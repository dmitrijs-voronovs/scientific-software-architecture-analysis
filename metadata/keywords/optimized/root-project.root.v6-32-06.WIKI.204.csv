quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,treamer(). void TQpSolverBase::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TQpSolverBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 164 of file TQpSolverBase.h. Member Data Documentation. ◆ fArtol. Double_t TQpSolverBase::fArtol. protected . Definition at line 81 of file TQpSolverBase.h. ◆ fDnorm. Double_t TQpSolverBase::fDnorm. protected . Definition at line 78 of file TQpSolverBase.h. ◆ fGamma_a. Double_t TQpSolverBase::fGamma_a. protected . Definition at line 84 of file TQpSolverBase.h. ◆ fGamma_f. Double_t TQpSolverBase::fGamma_f. protected . Definition at line 83 of file TQpSolverBase.h. ◆ fIter. Int_t TQpSolverBase::fIter. Definition at line 97 of file TQpSolverBase.h. ◆ fMaxit. Int_t TQpSolverBase::fMaxit. protected . Definition at line 87 of file TQpSolverBase.h. ◆ fMu_history. Double_t* TQpSolverBase::fMu_history. protected . Definition at line 89 of file TQpSolverBase.h. ◆ fMutol. Double_t TQpSolverBase::fMutol. protected . Definition at line 80 of file TQpSolverBase.h. ◆ fPhi. Double_t TQpSolverBase::fPhi. protected . Definition at line 85 of file TQpSolverBase.h. ◆ fPhi_history. Double_t* TQpSolverBase::fPhi_history. protected . Definition at line 91 of file TQpSolverBase.h. ◆ fPhi_min_history. Double_t* TQpSolverBase::fPhi_min_history. protected . Definition at line 93 of file TQpSolverBase.h. ◆ fRnorm_history. Double_t* TQpSolverBase::fRnorm_history. protected . Definition at line 90 of file TQpSolverBase.h. ◆ fSys. TQpLinSolverBase* TQpSolverBase::fSys. protected . Definition at line 76 of file TQpSolverBase.h. Libraries for TQpSolverBase:. [legend]; The documentation for this class was generated from the following files:; math/quadp/inc/TQpSolverBase.h; math/quadp/src/TQpSolverBase.cxx. TQpSolverBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpSolverBase.html:20125,Guid,Guide,20125,doc/master/classTQpSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpSolverBase.html,1,['Guid'],['Guide']
Usability,"treamerBasicType::GetCounter ; (; ); const. inline . Definition at line 284 of file TStreamerElement.h. ◆ GetMethod(). ULongptr_t TStreamerBasicType::GetMethod ; (; ); const. overridevirtual . return address of counter ; Reimplemented from TStreamerElement.; Definition at line 1148 of file TStreamerElement.cxx. ◆ GetSize(). Int_t TStreamerBasicType::GetSize ; (; ); const. overridevirtual . Returns size of this element in bytes. ; Reimplemented from TStreamerElement.; Definition at line 1158 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerBasicType::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 289 of file TStreamerElement.h. ◆ operator=(). TStreamerBasicType & TStreamerBasicType::operator= ; (; const TStreamerBasicType & ; ). privatedelete . ◆ Streamer(). void TStreamerBasicType::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerBasicType. ; Reimplemented from TNamed.; Definition at line 1166 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerBasicType::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 289 of file TStreamerElement.h. ◆ Update(). void TStreamerBasicType::Update ; (; const TClass * ; oldClass, . TClass * ; newClass . ). inlineoverridevirtual . function called by the TClass constructor when replacing an emulated class by the real class ; Reimplemented from TStreamerElement.; Definition at line 287 of file TStreamerElement.h. Member Data Documentation. ◆ fCounter. Int_t TStreamerBasicType::fCounter. protected . Definition at line 276 of file TStreamerElement.h. Libraries for TStreamerBasicType:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerBasicType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBasicType.html:20777,Guid,Guide,20777,doc/master/classTStreamerBasicType.html,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html,1,['Guid'],['Guide']
Usability,"treamerInfo for %s does not have a list of elements."",info->GetName());; 3688 lnk = lnk->Next();; 3689 continue;; 3690 }; 3691 TObject *element = info->GetElements()->UncheckedAt(0);; 3692 Bool_t isstl = element && strcmp(""This"",element->GetName())==0;; 3693 ; 3694 if ( (!isstl && mode ==0) || (isstl && mode ==1) ) {; 3695 // Skip the STL container the first time around; 3696 // Skip the regular classes the second time around;; 3697 info->BuildCheck(this);; 3698 Int_t uid = info->GetNumber();; 3699 Int_t asize = fClassIndex->GetSize();; 3700 if (uid >= asize && uid <100000) fClassIndex->Set(2*asize);; 3701 if (uid >= 0 && uid < fClassIndex->GetSize()) {; 3702 si_uids.push_back(uid);; 3703 fClassIndex->fArray[uid] = 1;; 3704 }; 3705 else if (!isstl && !info->GetClass()->IsSyntheticPair()) {; 3706 printf(""ReadStreamerInfo, class:%s, illegal uid=%d\n"",info->GetName(),uid);; 3707 }; 3708 if (gDebug > 0) printf("" -class: %s version: %d info read at slot %d\n"",info->GetName(), info->GetClassVersion(),uid);; 3709 }; 3710 lnk = lnk->Next();; 3711 }; 3712 }; 3713 fClassIndex->fArray[0] = 0;; 3714 list->Clear(); //this will delete all TStreamerInfo objects with kCanDelete bit set; 3715 delete list;; 3716 ; 3717 // We are done processing the record, let future calls and other threads that it; 3718 // has been done.; 3719 fgTsSIHashes.Insert(listRetcode.fHash, std::move(si_uids));; 3720}; 3721 ; 3722////////////////////////////////////////////////////////////////////////////////; 3723/// Specify if the streamerinfos must be read at file opening.; 3724///; 3725/// If fgReadInfo is true (default) TFile::ReadStreamerInfo is called; 3726/// when opening the file.; 3727/// It may be interesting to set fgReadInfo to false to speedup the file; 3728/// opening time or in case libraries containing classes referenced; 3729/// by the file have not yet been loaded.; 3730/// if fgReadInfo is false, one can still read the StreamerInfo with; 3731/// myfile.ReadStreamerInfo();; 3732 ; 3733void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:135021,Clear,Clear,135021,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Clear'],['Clear']
Usability,"treamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Terminate ();  ; virtual int Version () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:6161,Clear,Clear,6161,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['Clear'],['Clear']
Usability,"treamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 109 of file PDEFoamCell.h. Member Data Documentation. ◆ fBest. Int_t TMVA::PDEFoamCell::fBest. private . Best Edge for division. ; Definition at line 59 of file PDEFoamCell.h. ◆ fDaught0. TRef TMVA::PDEFoamCell::fDaught0. private . Pointer to daughter 1. ; Definition at line 53 of file PDEFoamCell.h. ◆ fDaught1. TRef TMVA::PDEFoamCell::fDaught1. private . Pointer to daughter 2. ; Definition at line 54 of file PDEFoamCell.h. ◆ fDim. Short_t TMVA::PDEFoamCell::fDim. private . Definition at line 45 of file PDEFoamCell.h. ◆ fDrive. Double_t TMVA::PDEFoamCell::fDrive. private . Driver integral, only for cell build-up. ; Definition at line 63 of file PDEFoamCell.h. ◆ fElement. TObject* TMVA::PDEFoamCell::fElement. private . may set by the user to save some data in this cell ; Definition at line 65 of file PDEFoamCell.h. ◆ fIntegral. Double_t TMVA::PDEFoamCell::fIntegral. private . Integral over cell (estimate from exploration) ; Definition at line 62 of file PDEFoamCell.h. ◆ fParent. TRef TMVA::PDEFoamCell::fParent. private . Pointer to parent cell. ; Definition at line 52 of file PDEFoamCell.h. ◆ fSerial. Int_t TMVA::PDEFoamCell::fSerial. private . Serial number. ; Definition at line 50 of file PDEFoamCell.h. ◆ fStatus. Int_t TMVA::PDEFoamCell::fStatus. private . Status (active, inactive) ; Definition at line 51 of file PDEFoamCell.h. ◆ fVolume. Double_t TMVA::PDEFoamCell::fVolume. private . Cartesian Volume of cell. ; Definition at line 61 of file PDEFoamCell.h. ◆ fXdiv. Double_t TMVA::PDEFoamCell::fXdiv. private . Factor for division. ; Definition at line 58 of file PDEFoamCell.h. Libraries for TMVA::PDEFoamCell:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamCell.h; tmva/tmva/src/PDEFoamCell.cxx. TMVAPDEFoamCell. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamCell.html:19993,Guid,Guide,19993,doc/master/classTMVA_1_1PDEFoamCell.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamCell.html,1,['Guid'],['Guide']
Usability,"tree; 283 //; 284 // These objects are filled with some random numbers and saved on a file.; 285 ; 286 #include ""TFile.h""; 287 #include ""TH1.h""; 288 #include ""TH2.h""; 289 #include ""TProfile.h""; 290 #include ""TRandom.h""; 291 #include ""TTree.h""; 292 ; 293 //__________________________________________________________________________; 294 main(int argc, char **argv); 295 {; 296 // Create a new ROOT binary machine independent file.; 297 // Note that this file may contain any kind of ROOT objects, histograms,trees; 298 // pictures, graphics objects, detector geometries, tracks, events, etc..; 299 // This file is now becoming the current directory.; 300 TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");; 301 ; 302 // Create some histograms and a profile histogram; 303 TH1F hpx(""hpx"",""This is the px distribution"",100,-4,4);; 304 TH2F hpxpy(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; 305 TProfile hprof(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; 306 ; 307 // Define some simple structures; 308 typedef struct {Float_t x,y,z;} POINT;; 309 typedef struct {; 310 Int_t ntrack,nseg,nvertex;; 311 UInt_t flag;; 312 Float_t temperature;; 313 } EVENTN;; 314 POINT point;; 315 EVENTN eventn;; 316 ; 317 // Create a ROOT Tree; 318 TTree tree(""T"",""An example of ROOT tree with a few branches"");; 319 tree.Branch(""point"",&point,""x:y:z"");; 320 tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; 321 tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);; 322 ; 323 Float_t px,py,pz;; 324 ; 325 // Here we start a loop on 1000 events; 326 for ( Int_t i=0; i<1000; i++) {; 327 gRandom->Rannor(px,py);; 328 pz = px*px + py*py;; 329 const auto random = gRandom->::Rndm(1);; 330 ; 331 // Fill histograms; 332 hpx.Fill(px);; 333 hpxpy.Fill(px,py,1);; 334 hprof.Fill(px,pz,1);; 335 ; 336 // Fill structures; 337 point.x = 10*(random-1);; 338 point.y = 5*random;; 339 point.z = 20*random;; 340 eventn.ntrack = Int_t(100*random);; 341 eventn.nseg = Int_t(2*eventn.ntrack);; 342",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:14383,simpl,simple,14383,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simple']
Usability,"trees in the TChain instead of the default behaviour using the weights of each tree in the chain (see TChain::SetWeight). ; Reimplemented in TChain.; Definition at line 9364 of file TTree.cxx. ◆ Show(). void TTree::Show ; (; Long64_t ; entry = -1, . Int_t ; lenmax = 20 . ). virtual . Print values of all active leaves for entry. . if entry==-1, print current entry (default); if a leaf is an array, a maximum of lenmax elements is printed. . Definition at line 9375 of file TTree.cxx. ◆ SortBranchesByTime(). void TTree::SortBranchesByTime ; (; ). private . Sorts top-level branches by the last average task time recorded per branch. ; Definition at line 5834 of file TTree.cxx. ◆ StartViewer(). void TTree::StartViewer ; (; ). virtual . Start the TTreeViewer on this tree. . ww is the width of the canvas in pixels; wh is the height of the canvas in pixels . Definition at line 9449 of file TTree.cxx. ◆ StopCacheLearningPhase(). Int_t TTree::StopCacheLearningPhase ; (; ). virtual . Stop the cache learning phase. ; Returns:; 0 learning phase stopped or not active; -1 on error . Definition at line 9464 of file TTree.cxx. ◆ Streamer(). void TTree::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 9535 of file TTree.cxx. ◆ StreamerNVirtual(). void TTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 659 of file TTree.h. ◆ UnbinnedFit(). Int_t TTree::UnbinnedFit ; (; const char * ; funcname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Unbinned fit of one or more variable(s) from a tree. ; funcname is a TF1 function.; See alsoTTree::Draw for explanations of the other parameters.; Fit the variable varexp using the function funcname using the selection cuts given by selection.; The list of fit options is given in parameter o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:218842,learn,learning,218842,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['learn'],['learning']
Usability,"trees in the TChain instead of the default behaviour using the weights of each tree in the chain (see TChain::SetWeight). ; Reimplemented in TChain.; Definition at line 9374 of file TTree.cxx. ◆ Show(). void TTree::Show ; (; Long64_t ; entry = -1, . Int_t ; lenmax = 20 . ). virtual . Print values of all active leaves for entry. . if entry==-1, print current entry (default); if a leaf is an array, a maximum of lenmax elements is printed. . Definition at line 9385 of file TTree.cxx. ◆ SortBranchesByTime(). void TTree::SortBranchesByTime ; (; ). private . Sorts top-level branches by the last average task time recorded per branch. ; Definition at line 5834 of file TTree.cxx. ◆ StartViewer(). void TTree::StartViewer ; (; ). virtual . Start the TTreeViewer on this tree. . ww is the width of the canvas in pixels; wh is the height of the canvas in pixels . Definition at line 9459 of file TTree.cxx. ◆ StopCacheLearningPhase(). Int_t TTree::StopCacheLearningPhase ; (; ). virtual . Stop the cache learning phase. ; Returns:; 0 learning phase stopped or not active; -1 on error . Definition at line 9474 of file TTree.cxx. ◆ Streamer(). void TTree::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 9545 of file TTree.cxx. ◆ StreamerNVirtual(). void TTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 705 of file TTree.h. ◆ UnbinnedFit(). Int_t TTree::UnbinnedFit ; (; const char * ; funcname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Unbinned fit of one or more variable(s) from a tree. ; funcname is a TF1 function.; See alsoTTree::Draw for explanations of the other parameters.; Fit the variable varexp using the function funcname using the selection cuts given by selection.; The list of fit options is given in parameter o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:221805,learn,learning,221805,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['learn'],['learning']
Usability,"tributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void TGWin32VirtualXProxy::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reimplemented from TVirtualX. ◆ ClearWindow() [2/2]. void TGWin32VirtualXProxy::ClearWindow ; (; Window_t ; id). overridevirtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented from TVirtualX. ◆ CloseDisplay(). void TGWin32VirtualXProxy::CloseDisplay ; (; ). overridevirtual . Closes connection to display server and destroys all windows. ; Reimplemented from TVirtualX.; Definition at line 265 of file TGWin32VirtualXProxy.cxx. ◆ ClosePixmap(). void TGWin32VirtualXProxy::ClosePixmap ; (; ). overridevirtual . Deletes current pixmap. ; Reimplemented from TVirtualX. ◆ CloseWindow(). void TGWin32VirtualXProxy::CloseWindow ; (; ). overridevirtual . Deletes current window. ; Reimplemented from TVirtualX. ◆ ConvertPrimarySelection(). void TGWin32VirtualXProxy::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t ; clipboard, . Time_t ; when . ). overridevirtual . Causes a SelectionRequest event to be sent to the current primary selection owner. ; This event specifies th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:56716,Clear,ClearWindow,56716,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Clear'],['ClearWindow']
Usability,"tributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:3498,Clear,Clear,3498,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,1,['Clear'],['Clear']
Usability,"tributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:3498,Clear,Clear,3498,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,2,['Clear'],['Clear']
Usability,"tributes()TAttLinevirtual; SetLineColor(Color_t lcolor)TAttLineinlinevirtual; SetLineColorAlpha(Color_t lcolor, Float_t lalpha)TAttLinevirtual; SetLineStyle(Style_t lstyle)TAttLineinlinevirtual; SetLineWidth(Width_t lwidth)TAttLineinlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetToolTipText(const char *text, Long_t delayms=1000)TBoxvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetX1(Double_t x1)TBoxinlinevirtual; SetX2(Double_t x2)TBoxinlinevirtual; SetY1(Double_t y1)TBoxinlinevirtual; SetY2(Double_t y2)TBoxinlinevirtual; Streamer(TBuffer &) overrideTFramevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TFrameinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TBox()TBox; TBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBox; TBox(const TBox &box)TBox; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TFrame()TFrame; TFrame(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TFrame; TFrame(const TFrame &frame)TFrame; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TWbox()TWboxinline; TWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=5, Short_t bordermode=1)TWbox; TWbox(const TWbox &wbox)TWbox; UseCurrentStyle() overrideTFramevirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TBox() overrideTBox; ~TFrame() overrideTFrame; ~TObject()TObjectvirtual; ~TWbox() override=defaultTWbox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFrame-members.html:9307,Guid,Guide,9307,doc/master/classTFrame-members.html,https://root.cern,https://root.cern/doc/master/classTFrame-members.html,1,['Guid'],['Guide']
Usability,"tric function ;  FirstContour.C Make a contour plot and get the first contour in a TPolyMarker ;  h1draw.C 1-D histogram drawing options ;  h2proj.C;  hbars.C Example of bar charts with 1-d histograms ;  histpalettecolor.C Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  legendautoplaced.C The legend can be placed automatically in the current pad in an empty space found at painting time ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot1.py Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot2.py Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot3.py Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot4.py Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot5.py Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:125382,simpl,simple,125382,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simple']
Usability,"tricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; double; xDouble_t x[n]Definition legend1.C:17; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::LogLikelihoodFunctionLogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunctionDefinition LogLikelihoodFCN.h:180; ROOT::Fit::LogLikelihoodGradFunctionLogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunctionDefinition LogLikelihoodFCN.h:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::Fit::FitUtil::Evaluate::EvalLogLstatic double EvalLogL(const IModelFunctionTempl< double > &func, const UnBinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0)Definition FitUtil.h:1413; ROOT::Fit::FitUtil::Evaluate::EvalLogLGradientstatic void EvalLogLGradient(const IModelFunctionTempl< double > &func, const UnBinData &data, const double *p, double *g, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0)Definition FitUtil.h:1464; ROOT::Fit::FitUtil::Evaluate::EvalPdfstatic double EvalPdf(const IModelFunctionTempl< double > &func, const UnBinData &data, const double *p, unsigned int i, double *g, double *h, bool hasGrad, bool fullHessian)Definition FitUtil.h:1451. mathmathcoreincFitLogLikelihoodFCN.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:14928,Guid,Guide,14928,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,1,['Guid'],['Guide']
Usability,"tricGradFunctionMultiDimTempl< T >::ParameterG2 ; (; const T * ; , . const double * ; , . T * ;  . ); const. inlinevirtual . Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ; g2 is a vector of dimension npar ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 278 of file IParamFunction.h. ◆ ParameterGradient() [1/2]. template<class T > . virtual void ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterGradient ; (; const T * ; x, . const double * ; p, . T * ; grad . ); const. inlinevirtual . Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 257 of file IParamFunction.h. ◆ ParameterGradient() [2/2]. template<class T > . void ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterGradient ; (; const T * ; x, . T * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values. ; Definition at line 291 of file IParamFunction.h. ◆ ParameterHessian(). template<class T > . virtual bool ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterHessian ; (; const T * ; , . const double * ; , . T * ;  . ); const. inlinevirtual . Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes if needed. If it is not implemented return a false. h must be dimensioned as a n x (n+1)/2 matrix (since it is a symmetric matrix) ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 272 of file IParamFunction.h. math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricGradFunctionMultiDimTempl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:10319,Guid,Guide,10319,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,1,['Guid'],['Guide']
Usability,"tries from entrymin to entrymax included.Definition TEventList.cxx:176; TEventList::operator-friend TEventList operator-(const TEventList &list1, const TEventList &list2)Subtraction.Definition TEventList.cxx:492; TEventList::fDirectoryTDirectory * fDirectory! Pointer to directory holding this treeDefinition TEventList.h:39; TEventList::GetEntryvirtual Long64_t GetEntry(Int_t index) constReturn value of entry at index in the list.Definition TEventList.cxx:227; TEventList::GetReapplyCutvirtual bool GetReapplyCut() constDefinition TEventList.h:57; TEventList::operator+friend TEventList operator+(const TEventList &list1, const TEventList &list2)Addition.Definition TEventList.cxx:482; TEventList::GetIndexvirtual Int_t GetIndex(Long64_t entry) constReturn index in the list of element with value entry array is supposed to be sorted prior to this cal...Definition TEventList.cxx:240; TEventList::GetSizevirtual Int_t GetSize() constDefinition TEventList.h:58; TEventList::Clearvoid Clear(Option_t *option="""") overrideDefinition TEventList.h:47; TEventList::GetNvirtual Int_t GetN() constDefinition TEventList.h:56; TEventList::GetDirectoryTDirectory * GetDirectory() constDefinition TEventList.h:52; TEventList::GetListvirtual Long64_t * GetList() constDefinition TEventList.h:55; TEventList::Mergevirtual Int_t Merge(TCollection *list)Merge entries in all the TEventList in the collection in this event list.Definition TEventList.cxx:284; TEventList::DirectoryAutoAddvirtual void DirectoryAutoAdd(TDirectory *)Called by TKey and others to automatically add us to a directory when we are read from a file.Definition TEventList.cxx:188; TEventList::Subtractvirtual void Subtract(const TEventList *list)Remove elements from this list that are present in alist.Definition TEventList.cxx:435; TEventList::Printvoid Print(Option_t *option="""") const overridePrint contents of this list.Definition TEventList.cxx:307; TEventList::SetDirectoryvirtual void SetDirectory(TDirectory *dir)Remove reference to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEventList_8h_source.html:5868,Clear,Clearvoid,5868,doc/master/TEventList_8h_source.html,https://root.cern,https://root.cern/doc/master/TEventList_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"tries, Long64_t firstentry=0);  Interface to the Principal Components Analysis class. ;  ; void Print (Option_t *option="""") const override;  Print a summary of the tree contents. ;  ; virtual void PrintCacheStats (Option_t *option="""") const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:25185,simpl,simply,25185,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,3,['simpl'],['simply']
Usability,"triesFast();; 633 TNamed *obj;; 634 TString name;; 635 for (Int_t i = 0; i < novlps; i++) {; 636 obj = (TNamed *)overlaps->At(i);; 637 if (novlps < 1000); 638 name = TString::Format(""ov%03d"", i);; 639 else; 640 name = TString::Format(""ov%06d"", i);; 641 obj->SetName(name);; 642 }; 643 if (novlps); 644 Info(""CheckOverlaps"", ""Number of illegal overlaps/extrusions for volume %s: %d\n"", GetName(), novlps);; 645 }; 646}; 647 ; 648////////////////////////////////////////////////////////////////////////////////; 649/// Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape(); 650 ; 651void TGeoVolume::CheckShape(Int_t testNo, Int_t nsamples, Option_t *option); 652{; 653 fShape->CheckShape(testNo, nsamples, option);; 654}; 655 ; 656////////////////////////////////////////////////////////////////////////////////; 657/// Clean data of the volume.; 658 ; 659void TGeoVolume::CleanAll(); 660{; 661 ClearNodes();; 662 ClearShape();; 663}; 664 ; 665////////////////////////////////////////////////////////////////////////////////; 666/// Clear the shape of this volume from the list held by the current manager.; 667 ; 668void TGeoVolume::ClearShape(); 669{; 670 fGeoManager->ClearShape(fShape);; 671}; 672 ; 673////////////////////////////////////////////////////////////////////////////////; 674/// check for negative parameters in shapes.; 675 ; 676void TGeoVolume::CheckShapes(); 677{; 678 if (fShape->IsRunTimeShape()) {; 679 Error(""CheckShapes"", ""volume %s has run-time shape"", GetName());; 680 InspectShape();; 681 return;; 682 }; 683 if (!fNodes); 684 return;; 685 Int_t nd = fNodes->GetEntriesFast();; 686 TGeoNode *node = nullptr;; 687 TGeoNode *new_node;; 688 const TGeoShape *shape = nullptr;; 689 TGeoVolume *old_vol;; 690 for (Int_t i = 0; i < nd; i++) {; 691 node = (TGeoNode *)fNodes->At(i);; 692 // check if node has name; 693 if (!node->GetName()[0]); 694 printf(""Daughter %i of volume %s - NO NAME!!!\n"", i, GetName());; 695 old_vol = node->GetVolume();; 696 sha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:28524,Clear,ClearNodes,28524,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,3,['Clear'],"['Clear', 'ClearNodes', 'ClearShape']"
Usability,"tring histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 double fLearningRate;; 853 double fMomentum;; 854 int fRepetitions;; 855 MinimizerType fMinimizerType;; 856 ; 857 size_t m_convergenceCount;; 858 size_t m_maxConvergenceCount;; 859 double m_minError;; 860 ; 861 ; 862 protected:; 863 bool m_useMultithreading;; 864 ; 865 std::shared_ptr<Monitoring> fMonitoring;; 866 };; 867 ; 868 ; 869 ; 870 ; 871 ; 872 ; 873 ; 874 ; 875 ; 876 ; 877 ; 878 ; 879 ; 880 ; 881 ; 882 ; 883 ; 884 ; 885 ; 886 ; 887 ; 888 ; 889 ; 890 /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:32065,progress bar,progress bar,32065,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['progress bar'],['progress bar']
Usability,"tring xtitle, ytitle, timeformat;; 1199 Int_t firstx = 0;; 1200 Int_t lastx = 0;; 1201 Bool_t timedisplay = kFALSE;; 1202 ; 1203 if (fHistogram) {; 1204 //cleanup in case of a previous unzoom and in case one of the TGraph has changed; 1205 auto lnk = fGraphs->FirstLink();; 1206 Int_t ngraphs = fGraphs->GetSize();; 1207 Bool_t reset_hist = kFALSE;; 1208 for (Int_t i=0;i<ngraphs;i++) {; 1209 TGraph* gAti = (TGraph*)(fGraphs->At(i));; 1210 if(gAti->TestBit(TGraph::kResetHisto)) {; 1211 reset_hist = kTRUE;; 1212 break;; 1213 }; 1214 lnk = lnk->Next();; 1215 }; 1216 if (fHistogram->GetMinimum() >= fHistogram->GetMaximum() || reset_hist) {; 1217 firstx = fHistogram->GetXaxis()->GetFirst();; 1218 lastx = fHistogram->GetXaxis()->GetLast();; 1219 timedisplay = fHistogram->GetXaxis()->GetTimeDisplay();; 1220 if (strlen(fHistogram->GetXaxis()->GetTitle()) > 0); 1221 xtitle = fHistogram->GetXaxis()->GetTitle();; 1222 if (strlen(fHistogram->GetYaxis()->GetTitle()) > 0); 1223 ytitle = fHistogram->GetYaxis()->GetTitle();; 1224 if (strlen(fHistogram->GetXaxis()->GetTimeFormat()) > 0); 1225 timeformat = fHistogram->GetXaxis()->GetTimeFormat();; 1226 delete fHistogram;; 1227 fHistogram = nullptr;; 1228 }; 1229 }; 1230 if (fHistogram) {; 1231 minimum = fHistogram->GetYaxis()->GetXmin();; 1232 maximum = fHistogram->GetYaxis()->GetXmax();; 1233 uxmin = gPad->PadtoX(rwxmin);; 1234 uxmax = gPad->PadtoX(rwxmax);; 1235 } else {; 1236 Bool_t initialrangeset = kFALSE;; 1237 while (auto g = (TGraph*) next()) {; 1238 if (g->GetN() <= 0) continue;; 1239 if (initialrangeset) {; 1240 Double_t rx1,ry1,rx2,ry2;; 1241 g->ComputeRange(rx1, ry1, rx2, ry2);; 1242 if (rx1 < rwxmin) rwxmin = rx1;; 1243 if (ry1 < rwymin) rwymin = ry1;; 1244 if (rx2 > rwxmax) rwxmax = rx2;; 1245 if (ry2 > rwymax) rwymax = ry2;; 1246 } else {; 1247 g->ComputeRange(rwxmin, rwymin, rwxmax, rwymax);; 1248 initialrangeset = kTRUE;; 1249 }; 1250 if (g->GetN() > npt) npt = g->GetN();; 1251 }; 1252 if (rwxmin == rwxmax) rwxmax += 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:39568,ux,uxmin,39568,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"tring);; dnnOptions.Append("":"");; dnnOptions.Append(archString);; ; TString dnnName = ""TMVA_DNN"";; factory->BookMethod(dataloader, TMVA::Types::kDL, dnnName, dnnOptions);; }; ; /**; ## Book Keras recurrent models; ; Book the different types of recurrent models in Keras (SimpleRNN, LSTM or GRU); ; **/; ; if (useKeras) {; ; for (int i = 0; i < 3; i++) {; ; if (use_rnn_type[i]) {; ; TString modelName = TString::Format(""model_%s.h5"", rnn_types[i].c_str());; TString trainedModelName = TString::Format(""trained_model_%s.h5"", rnn_types[i].c_str());; ; Info(""TMVA_RNN_Classification"", ""Building recurrent keras model using a %s layer"", rnn_types[i].c_str());; // create python script which can be executed; // create 2 conv2d layer + maxpool + dense; TMacro m;; m.AddLine(""import tensorflow"");; m.AddLine(""from tensorflow.keras.models import Sequential"");; m.AddLine(""from tensorflow.keras.optimizers import Adam"");; m.AddLine(""from tensorflow.keras.layers import Input, Dense, Dropout, Flatten, SimpleRNN, GRU, LSTM, Reshape, ""; ""BatchNormalization"");; m.AddLine("""");; m.AddLine(""model = Sequential() "");; m.AddLine(""model.add(Reshape((10, 30), input_shape = (10*30, )))"");; // add recurrent neural network depending on type / Use option to return the full output; if (rnn_types[i] == ""LSTM""); m.AddLine(""model.add(LSTM(units=10, return_sequences=True) )"");; else if (rnn_types[i] == ""GRU""); m.AddLine(""model.add(GRU(units=10, return_sequences=True) )"");; else; m.AddLine(""model.add(SimpleRNN(units=10, return_sequences=True) )"");; ; // m.AddLine(""model.add(BatchNormalization())"");; m.AddLine(""model.add(Flatten())""); // needed if returning the full time output sequence; m.AddLine(""model.add(Dense(64, activation = 'tanh')) "");; m.AddLine(""model.add(Dense(2, activation = 'sigmoid')) "");; m.AddLine(; ""model.compile(loss = 'binary_crossentropy', optimizer = Adam(learning_rate = 0.001), weighted_metrics = ['accuracy'])"");; m.AddLine(TString::Format(""modelName = '%s'"", modelName.Data()));; m.AddLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:68798,Simpl,SimpleRNN,68798,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Simpl'],['SimpleRNN']
Usability,"tring.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::pwdconst char * pwd()Definition TSystem.h:424; TSystem::PrependPathNamevirtual const char * PrependPathName(const char *dir, TString &name)Concatenate a directory and a file name.Definition TSystem.cxx:1081; TSystem::UnixPathNamevirtual const char * UnixPathName(const char *unixpathname)Convert from a local pathname to a Unix pathname.Definition TSystem.cxx:1063; TSystem::IsAbsoluteFileNamevirtual Bool_t IsAbsoluteFileName(const char *dir)Return true if dir is an absolute pathname.Definition TSystem.cxx:951; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; TUrl::GetAnchorconst char * GetAnchor() constDefinition TUrl.h:70; TUrl::GetUrlconst char * GetUrl(Bool_t withDeflt=kFALSE) constReturn full URL.Definition TUrl.cxx:390; TUrl::GetFileconst char * GetFile() constDefinition TUrl.h:69; TUrl::GetProtocolconst char * GetProtocol() constDefinition TUrl.h:64; TUrl::SetFilevoid SetFile(const char *file)Definition TUrl.h:85; int; unsigned int; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; rootsTCanvas * roots()Definition roots.C:1. treetreesrcTEntryList.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEntryList_8cxx_source.html:74354,Guid,Guide,74354,doc/master/TEntryList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEntryList_8cxx_source.html,1,['Guid'],['Guide']
Usability,"tring; 5 : invalid syntax; 6 : Too many operators; 7 : Too many parameters; 10 : z specified but not x and y; 11 : z and y specified but not x; 12 : y specified but not x; 13 : z and x specified but not y; 20 : non integer value for parameter number; 21 : atan2 requires two arguments; 22 : pow requires two arguments; 23 : degree of polynomial not specified; 24 : Degree of polynomial must be positive; 25 : Degree of polynomial must be less than 20; 26 : Unknown name; 27 : Too many constants in expression; 28 : strstr requires two arguments; 29 : interpreted or compiled function have to return a numerical type; 30 : Bad numerical expression; 31 : Part of the variable exist but some of it is not accessible or useable; 40 : '(' is expected; 41 : ')' is expected; 42 : '[' is expected; 43 : ']' is expected; . Special functions; By default, the formula is assigned fNumber=0. However, the following formula built with simple functions are assigned fNumber: ""gaus"" 100 (or gausn); ""xygaus"" 110; ""expo"" 200; ""polN"" 300+N; ""landau"" 400; ""xylandau"" 410; Note that expressions like gaus(0), expo(1) will force fNumber=0. Warning when deriving a class from TFormula; If you overload this member function, you also HAVE TO never call the constructor:; TFormula::TFormula(const char *name,const char *expression); namechar name[80]Definition TGX11.cxx:110; ROOT::v5::TFormula::TFormulaTFormula()Formula default constructor.Definition TFormula_v5.cxx:136; and write your own constructor; MyClass::MyClass(const char *name,const char *expression) : TFormula(); ROOT::v5::TFormulaThe FORMULA class (ROOT version 5)Definition TFormula.h:65; which has to call the TFormula default constructor and whose implementation should be similar to the implementation of the normal TFormula constructor; This is necessary because the normal TFormula constructor call indirectly the virtual member functions Analyze, DefaultString, DefaultValue and DefaultVariable. ; Definition at line 712 of file TFormula_v5.cxx. ◆ A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:29359,simpl,simple,29359,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['simpl'],['simple']
Usability,"tringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←. TDOMParser. TSAXParser. Function documentation; TXMLParser(); Initializes parser variables. ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser(const TXMLParser& ). TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fVali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLParser.html:11610,clear,clear,11610,root/html602/TXMLParser.html,https://root.cern,https://root.cern/root/html602/TXMLParser.html,2,['clear'],['clear']
Usability,"trix ; (; size_t ; n). inline . create a new diagonal matrix of size n ; Definition at line 291 of file RooLagrangianMorphFunc.cxx. ◆ invertMatrix(). double invertMatrix ; (; const Matrix & ; matrix, . Matrix & ; inverse . ). inline . Definition at line 309 of file RooLagrangianMorphFunc.cxx. ◆ makeRootMatrix(). TMatrixD makeRootMatrix ; (; const Matrix & ; in). inline . convert a matrix into a TMatrixD ; Definition at line 275 of file RooLagrangianMorphFunc.cxx. ◆ makeSuperMatrix(). Matrix makeSuperMatrix ; (; const TMatrixD & ; in). inline . convert a TMatrixD into a Matrix ; Definition at line 283 of file RooLagrangianMorphFunc.cxx. ◆ printMatrix(). void printMatrix ; (; const TMatrixD & ; mat). inline . write a matrix ; Definition at line 301 of file RooLagrangianMorphFunc.cxx. ◆ size(). template<class MatrixT > . size_t size ; (; const MatrixT & ; matrix). inline . retrieve the size of a square matrix . ◆ size< TMatrixD >(). template<> . size_t size< TMatrixD > ; (; const TMatrixD & ; mat). inline . Definition at line 114 of file RooLagrangianMorphFunc.cxx. ◆ writeMatrixToFileT(). template<class MatrixT > . void writeMatrixToFileT ; (; const MatrixT & ; matrix, . const char * ; fname . ). inline . write a matrix to a text file ; Definition at line 144 of file RooLagrangianMorphFunc.cxx. ◆ writeMatrixToStreamT(). template<class MatrixT > . void writeMatrixToStreamT ; (; const MatrixT & ; matrix, . std::ostream & ; stream . ). write a matrix to a stream ; Definition at line 123 of file RooLagrangianMorphFunc.cxx. Variable Documentation. ◆ morphLargestWeight. constexpr double morphLargestWeight = 10e7. staticconstexpr . Definition at line 89 of file RooLagrangianMorphFunc.cxx. ◆ morphUnityDeviation. constexpr double morphUnityDeviation = 10e-6. staticconstexpr . Definition at line 90 of file RooLagrangianMorphFunc.cxx. roofitroofitsrcRooLagrangianMorphFunc.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooLagrangianMorphFunc_8cxx.html:4901,Guid,Guide,4901,doc/master/RooLagrangianMorphFunc_8cxx.html,https://root.cern,https://root.cern/doc/master/RooLagrangianMorphFunc_8cxx.html,1,['Guid'],['Guide']
Usability,"trix();; 2485 const Double_t *orot = other.GetRotationMatrix();; 2486 for (auto i = 0; i < 9; i++); 2487 if (TMath::Abs(rot[i] - orot[i]) > 1.E-10); 2488 return kFALSE;; 2489 const Double_t *scl = GetScale();; 2490 const Double_t *oscl = other.GetScale();; 2491 for (auto i = 0; i < 3; i++); 2492 if (TMath::Abs(scl[i] - oscl[i]) > 1.E-10); 2493 return kFALSE;; 2494 return kTRUE;; 2495}; 2496 ; 2497////////////////////////////////////////////////////////////////////////////////; 2498/// Fast copy method.; 2499 ; 2500void TGeoHMatrix::CopyFrom(const TGeoMatrix *other); 2501{; 2502 SetBit(kGeoTranslation, other->IsTranslation());; 2503 SetBit(kGeoRotation, other->IsRotation());; 2504 SetBit(kGeoReflection, other->IsReflection());; 2505 memcpy(fTranslation, other->GetTranslation(), kN3);; 2506 memcpy(fRotationMatrix, other->GetRotationMatrix(), kN9);; 2507}; 2508 ; 2509////////////////////////////////////////////////////////////////////////////////; 2510/// clear the data for this matrix; 2511 ; 2512void TGeoHMatrix::Clear(Option_t *); 2513{; 2514 SetBit(kGeoReflection, kFALSE);; 2515 if (IsIdentity()); 2516 return;; 2517 ResetBit(kGeoTranslation);; 2518 ResetBit(kGeoRotation);; 2519 ResetBit(kGeoScale);; 2520 memcpy(fTranslation, kNullVector, kN3);; 2521 memcpy(fRotationMatrix, kIdentityMatrix, kN9);; 2522 memcpy(fScale, kUnitScale, kN3);; 2523}; 2524 ; 2525////////////////////////////////////////////////////////////////////////////////; 2526/// Make a clone of this matrix.; 2527 ; 2528TGeoMatrix *TGeoHMatrix::MakeClone() const; 2529{; 2530 TGeoMatrix *matrix = new TGeoHMatrix(*this);; 2531 return matrix;; 2532}; 2533 ; 2534////////////////////////////////////////////////////////////////////////////////; 2535/// Perform a rotation about Z having the sine/cosine of the rotation angle.; 2536 ; 2537void TGeoHMatrix::FastRotZ(const Double_t *sincos); 2538{; 2539 fRotationMatrix[0] = sincos[1];; 2540 fRotationMatrix[1] = -sincos[0];; 2541 fRotationMatrix[3] = sincos[0];; 2542",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:86233,clear,clear,86233,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"trix, weights, false, includeRegularization);; 1343 }; 1344 // add Regularization term; 1345 Double_t regzTerm = (includeRegularization) ? deepNet.RegularizationTerm() : 0.0;; 1346 minValError /= (Double_t)(nValidationSamples / settings.batchSize);; 1347 minValError += regzTerm;; 1348 ; 1349 ; 1350 // create a pointer to base class VOptimizer; 1351 std::unique_ptr<DNN::VOptimizer<Architecture_t, Layer_t, DeepNet_t>> optimizer;; 1352 ; 1353 // initialize the base class pointer with the corresponding derived class object.; 1354 switch (O) {; 1355 ; 1356 case EOptimizer::kSGD:; 1357 optimizer = std::unique_ptr<DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>>(; 1358 new DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>(settings.learningRate, deepNet, settings.momentum));; 1359 break;; 1360 ; 1361 case EOptimizer::kAdam: {; 1362 optimizer = std::unique_ptr<DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>>(; 1363 new DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>(; 1364 deepNet, settings.learningRate, settings.optimizerParams[""ADAM_beta1""],; 1365 settings.optimizerParams[""ADAM_beta2""], settings.optimizerParams[""ADAM_eps""]));; 1366 break;; 1367 }; 1368 ; 1369 case EOptimizer::kAdagrad:; 1370 optimizer = std::unique_ptr<DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>>(; 1371 new DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1372 settings.optimizerParams[""ADAGRAD_eps""]));; 1373 break;; 1374 ; 1375 case EOptimizer::kRMSProp:; 1376 optimizer = std::unique_ptr<DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>>(; 1377 new DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate, settings.momentum,; 1378 settings.optimizerParams[""RMSPROP_rho""],; 1379 settings.optimizerParams[""RMSPROP_eps""]));; 1380 break;; 1381 ; 1382 case EOptimizer::kAdadelta:; 1383 optimizer = std::unique_ptr<DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>>(; 1384 new DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 138",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:54010,learn,learningRate,54010,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"trixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian.html:3357,clear,clearShapeDirty,3357,root/html534/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian.html,3,['clear'],['clearShapeDirty']
Usability,"trix_t > > fPastSquaredWeightUpdates;  The accumulation of the square of the past weight updates associated with the deep net. ;  ; Scalar_t fRho;  The Rho constant used by the optimizer. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor1;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor2;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor1;  working tensor used to keep a temporary copy of weights or weight gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor2;  working tensor used to keep a temporary copy of weights or weight gradients ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Adadelta.h>. Inheritance diagram for TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Adadelta.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Adadelta.h. Constructor & Destructor Documentation. ◆ TAdadelta(). template<typename Architecture_t , typename L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html:4473,learn,learning,4473,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,1,['learn'],['learning']
Usability,"tructViewerGUI.cxx. ◆ SetLinksVisibility(). void TStructViewerGUI::SetLinksVisibility ; (; Bool_t ; val). Sets links visibility to ""visible"". ; Definition at line 767 of file TStructViewerGUI.cxx. ◆ SetNodePtr(). void TStructViewerGUI::SetNodePtr ; (; TStructNode * ; val). Sets top node pointer and updates view. ; Definition at line 758 of file TStructViewerGUI.cxx. ◆ SetPointerButtonSlot(). void TStructViewerGUI::SetPointerButtonSlot ; (; ). Sets pointer given in fPointerTestEntry to the main pointer. ; Definition at line 779 of file TStructViewerGUI.cxx. ◆ ShowLinksToggled(). void TStructViewerGUI::ShowLinksToggled ; (; Bool_t ; on). Changes links visibility and refresh view. ; Definition at line 788 of file TStructViewerGUI.cxx. ◆ UnCheckMaxObjects(). void TStructViewerGUI::UnCheckMaxObjects ; (; ). private . Shows hidden nodes. ; Definition at line 798 of file TStructViewerGUI.cxx. ◆ UndoButtonSlot(). void TStructViewerGUI::UndoButtonSlot ; (; ). UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ; Definition at line 873 of file TStructViewerGUI.cxx. ◆ Update(). void TStructViewerGUI::Update ; (; Bool_t ; resetCamera = false). Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ; Definition at line 814 of file TStructViewerGUI.cxx. ◆ UpdateButtonSlot(). void TStructViewerGUI::UpdateButtonSlot ; (; ). Update button slot. Updates scene. ; Definition at line 840 of file TStructViewerGUI.cxx. ◆ UpdateLabels(). void TStructViewerGUI::UpdateLabels ; (; TStructNode * ; node). private . Refresh information in labels when user put mouse over object. ; Definition at line 848 of file TStructViewerGUI.cxx. Member Data Documentation. ◆ fAllMembersCountLabel. TGLabel* TStructViewerGUI::fAllMembersCountLabel. private . Definition at line 64 of file TStructViewerGUI.h. ◆ fAutoRefesh. TGCheckButton* TStructViewerGUI::fAutoRefesh. private . Definition at line 76 of file TStructViewerGUI.h. ◆ fBoxHeightEn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:45757,Undo,Undo,45757,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Undo'],['Undo']
Usability,"tructor Documentation. ◆ TProfile2PolyBin() [1/2]. TProfile2PolyBin::TProfile2PolyBin ; (; ). TProfile2PolyBin constructor. ; Definition at line 40 of file TProfile2Poly.cxx. ◆ TProfile2PolyBin() [2/2]. TProfile2PolyBin::TProfile2PolyBin ; (; TObject * ; poly, . Int_t ; bin_number . ). TProfile2PolyBin constructor. ; Definition at line 54 of file TProfile2Poly.cxx. ◆ ~TProfile2PolyBin(). TProfile2PolyBin::~TProfile2PolyBin ; (; ). inlineoverride . Definition at line 25 of file TProfile2Poly.h. Member Function Documentation. ◆ Class(). static TClass * TProfile2PolyBin::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProfile2PolyBin::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProfile2PolyBin::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file TProfile2Poly.h. ◆ ClearStats(). void TProfile2PolyBin::ClearStats ; (; ). Clear statistics. ; Definition at line 111 of file TProfile2Poly.cxx. ◆ DeclFileName(). static const char * TProfile2PolyBin::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file TProfile2Poly.h. ◆ Fill(). void TProfile2PolyBin::Fill ; (; Double_t ; value, . Double_t ; weight . ). protected . Fill. ; Definition at line 124 of file TProfile2Poly.cxx. ◆ GetEffectiveEntries(). Double_t TProfile2PolyBin::GetEffectiveEntries ; (; ); const. inline . Definition at line 32 of file TProfile2Poly.h. ◆ GetEntries(). Double_t TProfile2PolyBin::GetEntries ; (; ); const. inline . Definition at line 33 of file TProfile2Poly.h. ◆ GetEntriesVW(). Double_t TProfile2PolyBin::GetEntriesVW ; (; ); const. inline . Definition at line 35 of file TProfile2Poly.h. ◆ GetEntriesW2(). Double_t TProfile2PolyBin::GetEntriesW2 ; (; ); const. inline . Definition at line 34 of file TProfile2Poly.h. ◆ GetEntriesWV2(). Double_t TProfile2PolyBin::GetEntriesWV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2PolyBin.html:13705,Clear,Clear,13705,doc/master/classTProfile2PolyBin.html,https://root.cern,https://root.cern/doc/master/classTProfile2PolyBin.html,1,['Clear'],['Clear']
Usability,"tructor; Should only be used by proof. RooProfileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooProfileLL(const RooProfileLL& other, const char* name = 0); Copy constructor. ~RooProfileLL(); Destructor. const RooArgSet& bestFitParams() const. const RooArgSet& bestFitObs() const. RooAbsReal* createProfile(const RooArgSet& paramsOfInterest); Optimized implementation of createProfile for profile likelihoods.; Return profile of original function in terms of stated parameters; of interest rather than profiling recursively. Double_t evaluate() const; Evaluate profile likelihood by minimizing likelihood w.r.t. all; parameters that are not considered observables of this profile; likelihood object. void validateAbsMin() const; Check that parameters and likelihood value for 'best fit' are still valid. If not,; because the best fit has never been calculated, or because constant parameters have; changed value or parameters have changed const/float status, the minimum is recalculated. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). TObject* clone(const char* newname) const; { return new RooProfileLL(*this,newname); }. void setAlwaysStartFromMin(Bool_t flag); { _startFromMin = flag ; }. Bool_t alwaysStartFromMin() const; { return _startFromMin ; }. RooMinuit* minuit(); { return _minuit ; }. RooAbsReal& nll(); { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void clearAbsMin(); { _absMinValid = kFALSE ; }. » Last changed: Wed Nov 17 19:12:29 2010 » Last generated: 2010-11-17 19:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:35762,clear,clearAbsMin,35762,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"tructures. Building a complete geometry in this style is virtually possible but highly not recommended.; The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer composite shapes, but basic primitives. The figure shows the composite shapes structure. The composite shapes structure; Suppose that A, B, C and D represent basic shapes, we will illustrate how the internal representation of few combinations look like. We do this only for understanding how to create them in a proper way, since the user interface for this purpose is in fact very simple. We will ignore for the time being the positioning of components. The definition of a composite shape takes an expression where the identifiers are shape names. The expression is parsed and decomposed in 2 sub-expressions and the top-level Boolean operator. Union: A+B+C. Just to illustrate the Boolean expression parsing and the composite shape structure, let's take a simple example. We will describe the union of A, B and C. Both union operators are at the same level. Since:; A+B+C = (A+B)+C = A+(B+C); The first(+) is taken as separator, hence the expression split in: A and (B+C). A Boolean node of type **TGeoUnion**(""A"",""B+C"") is created. This tries to replace the 2 expressions by actual pointers to corresponding shapes. The first expression (A) contains no operators therefore is interpreted as representing a shape. The shape named ""A"" is searched into the list of shapes handled by the manager class and stored as the """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:2379,simpl,simple,2379,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['simpl'],['simple']
Usability,"true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:3083,Undo,UndockWindow,3083,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,4,['Undo'],"['Undock', 'UndockWindow']"
Usability,"true). inline . Definition at line 83 of file TWebSnapshot.h. ◆ SetWithoutPrimitives(). void TPadWebSnapshot::SetWithoutPrimitives ; (; bool ; on = true). inline . Definition at line 81 of file TWebSnapshot.h. ◆ Streamer(). void TPadWebSnapshot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPadWebSnapshot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 97 of file TWebSnapshot.h. Member Data Documentation. ◆ fActive. bool TPadWebSnapshot::fActive {false}. protected . true when pad is active ; Definition at line 62 of file TWebSnapshot.h. ◆ fBatchMode. bool TPadWebSnapshot::fBatchMode {false}. protected . ! if object created for image generation ; Definition at line 65 of file TWebSnapshot.h. ◆ fHasExecs. bool TPadWebSnapshot::fHasExecs {false}. protected . if true, more interactive events will be delivered from client ; Definition at line 67 of file TWebSnapshot.h. ◆ fPrimitives. std::vector<std::unique_ptr<TWebSnapshot> > TPadWebSnapshot::fPrimitives. protected . list of all primitives, drawn in the pad ; Definition at line 68 of file TWebSnapshot.h. ◆ fReadOnly. bool TPadWebSnapshot::fReadOnly {true}. protected . when canvas or pad are in readonly mode ; Definition at line 63 of file TWebSnapshot.h. ◆ fSetObjectIds. bool TPadWebSnapshot::fSetObjectIds {true}. protected . ! set objects ids ; Definition at line 64 of file TWebSnapshot.h. ◆ fWithoutPrimitives. bool TPadWebSnapshot::fWithoutPrimitives {false}. protected . true when primitives not send while there are no modifications ; Definition at line 66 of file TWebSnapshot.h. Libraries for TPadWebSnapshot:. [legend]; The documentation for this class was generated from the following files:; gui/webgui6/inc/TWebSnapshot.h; gui/webgui6/src/TWebSnapshot.cxx. TPadWebSnapshot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadWebSnapshot.html:16672,Guid,Guide,16672,doc/master/classTPadWebSnapshot.html,https://root.cern,https://root.cern/doc/master/classTPadWebSnapshot.html,1,['Guid'],['Guide']
Usability,"try Shapes; TModuleDocInfo documentation for a group of classes; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObjectSpy Spy object pointer for deletion; TObjectTable Table of active objects; TOracleResult Oracle query result; TOracleRow One row of Oracle query result; TOracleServer Connection to Oracle server; TOracleStatement SQL statement class for Oracle; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TOutputListSelectorDataMap Converter from output list to TSelector data members; TPARA PARA shape; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:109112,simpl,simple,109112,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['simpl'],['simple']
Usability,"try Shapes; TModuleDocInfo documentation for a group of classes; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObjectSpy Spy object pointer for deletion; TObjectTable Table of active objects; TOracleResult Oracle query result; TOracleRow One row of Oracle query result; TOracleServer Connection to Oracle server; TOracleStatement SQL statement class for Oracle; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TPARA PARA shape; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate work packets for parallel processing; TPacketizerAdaptive Generate work packets f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:104198,simpl,simple,104198,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['simpl'],['simple']
Usability,"try is a one line text input widget.Definition TGTextEntry.h:24; TGTextEntry::SetDefaultSizevirtual void SetDefaultSize(UInt_t w, UInt_t h)Set the default / minimal size of the widget.Definition TGTextEntry.cxx:384; TGTextEntry::Clearvoid Clear(Option_t *option="""") overrideClears up the text entry.Definition TGTextEntry.cxx:972; TGTextEntry::GetTextconst char * GetText() constDefinition TGTextEntry.h:119; TGTextEntry::SetCursorPositionvirtual void SetCursorPosition(Int_t pos)Set the cursor position to newPos.Definition TGTextEntry.cxx:718; TGTextEntry::AppendTextvirtual void AppendText(const char *text)Appends text to the end of text entry, clears the selection and moves the cursor to the end of the li...Definition TGTextEntry.cxx:1689; TGTextEntry::SetToolTipTextvirtual void SetToolTipText(const char *text, Long_t delayms=500)Set tool tip text associated with this text entry.Definition TGTextEntry.cxx:1647; TGTextEntry::SetTextvirtual void SetText(const char *text, Bool_t emit=kTRUE)Sets text entry to text, clears the selection and moves the cursor to the end of the line.Definition TGTextEntry.cxx:611; TGTextEntry::HandleButtonBool_t HandleButton(Event_t *event) overrideHandle mouse button event in text entry widget.Definition TGTextEntry.cxx:1342; TGToolBarA toolbar is a composite frame that contains TGPictureButtons.Definition TGToolBar.h:33; TGVSplitterDefinition TGSplitter.h:53; TGVSplitter::SetFramevoid SetFrame(TGFrame *frame, Bool_t left) overrideSet frame to be resized.Definition TGSplitter.cxx:143; TGVertical3DLineA vertical 3D line is a line that can be used to separate groups of widgets.Definition TG3DLine.h:33; TGVerticalFrameA composite frame that layout their children in vertical way.Definition TGFrame.h:374; TGWidget::Associatevirtual void Associate(const TGWindow *w)Definition TGWidget.h:72; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::SetTitlevoid SetTitle(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:130136,clear,clears,130136,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['clear'],['clears']
Usability,"try numbers. ;  ; void Restart ();  Restart a Next() loop from entry 0 (of TEntryList index 0 of fEntryList is set). ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:11106,Clear,Clear,11106,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,1,['Clear'],['Clear']
Usability,"try-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files, TList* wrks = 0); Create in each worker sandbox symlinks to the files in the list; Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0, TList* wrks = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:31376,Clear,ClearCache,31376,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,2,['Clear'],['ClearCache']
Usability,"try::EEchoMode. EnumeratorkNormal ; kNoEcho ; kPassword . Definition at line 27 of file TGTextEntry.h. ◆ EInsertMode. enum TGTextEntry::EInsertMode. EnumeratorkInsert ; kReplace . Definition at line 28 of file TGTextEntry.h. Constructor & Destructor Documentation. ◆ TGTextEntry() [1/4]. TGTextEntry::TGTextEntry ; (; const TGTextEntry & ; ). privatedelete . ◆ TGTextEntry() [2/4]. TGTextEntry::TGTextEntry ; (; const TGWindow * ; p, . TGTextBuffer * ; text, . Int_t ; id = -1, . GContext_t ; norm = GetDefaultGC()(), . FontStruct_t ; font = GetDefaultFontStruct(), . UInt_t ; options = kSunkenFrame | kDoubleBorder, . Pixel_t ; back = GetWhitePixel() . ). Create a text entry widget. ; It will adopt the TGTextBuffer object (i.e. the text buffer will be deleted by the text entry widget). ; Definition at line 247 of file TGTextEntry.cxx. ◆ TGTextEntry() [3/4]. TGTextEntry::TGTextEntry ; (; const TGWindow * ; parent = nullptr, . const char * ; text = nullptr, . Int_t ; id = -1 . ). Simple text entry constructor. ; Definition at line 269 of file TGTextEntry.cxx. ◆ TGTextEntry() [4/4]. TGTextEntry::TGTextEntry ; (; const TString & ; contents, . const TGWindow * ; parent, . Int_t ; id = -1 . ). Simple test entry constructor. ; Notice TString argument comes before the parent argument (to make this ctor different from the first one taking a const char*). ; Definition at line 287 of file TGTextEntry.cxx. ◆ ~TGTextEntry(). TGTextEntry::~TGTextEntry ; (; ). override . Delete a text entry widget. ; Definition at line 303 of file TGTextEntry.cxx. Member Function Documentation. ◆ AppendText(). void TGTextEntry::AppendText ; (; const char * ; text). virtual . Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ; If necessary the text is truncated to fit MaxLength(). See also GetText(), InsertText(), SetText(), RemoveText(). ; Definition at line 1689 of file TGTextEntry.cxx. ◆ Backspace(). void TGTextEntry::Backspace ; (; ). Deletes the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:42956,Simpl,Simple,42956,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['Simpl'],['Simple']
Usability,try::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TGMenu.h. Friends And Related Symbol Documentation. ◆ TGMenuBar. friend class TGMenuBar. friend . Definition at line 60 of file TGMenu.h. ◆ TGPopupMenu. friend class TGPopupMenu. friend . Definition at line 59 of file TGMenu.h. Member Data Documentation. ◆ fEh. UInt_t TGMenuEntry::fEh. protected . width and height of entry ; Definition at line 68 of file TGMenu.h. ◆ fEntryId. Int_t TGMenuEntry::fEntryId. protected . the entry id (used for event processing) ; Definition at line 63 of file TGMenu.h. ◆ fEw. UInt_t TGMenuEntry::fEw. protected . Definition at line 68 of file TGMenu.h. ◆ fEx. Int_t TGMenuEntry::fEx. protected . Definition at line 67 of file TGMenu.h. ◆ fEy. Int_t TGMenuEntry::fEy. protected . position of entry ; Definition at line 67 of file TGMenu.h. ◆ fLabel. TGHotString* TGMenuEntry::fLabel. protected . menu entry label ; Definition at line 69 of file TGMenu.h. ◆ fPic. const TGPicture* TGMenuEntry::fPic. protected . menu entry icon ; Definition at line 71 of file TGMenu.h. ◆ fPopup. TGPopupMenu* TGMenuEntry::fPopup. protected . pointer to popup menu (in case of cascading menus) ; Definition at line 72 of file TGMenu.h. ◆ fShortcut. TGString* TGMenuEntry::fShortcut. protected . menu entry shortcut ; Definition at line 70 of file TGMenu.h. ◆ fStatus. Int_t TGMenuEntry::fStatus. protected . entry status (OR of EMenuEntryState) ; Definition at line 66 of file TGMenu.h. ◆ fType. EMenuEntryType TGMenuEntry::fType. protected . type of entry ; Definition at line 65 of file TGMenu.h. ◆ fUserData. void* TGMenuEntry::fUserData. protected . pointer to user data structure ; Definition at line 64 of file TGMenu.h. Libraries for TGMenuEntry:. [legend]; The documentation for this class was generated from the following file:; gui/gui/inc/TGMenu.h. TGMenuEntry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMenuEntry.html:16352,Guid,Guide,16352,doc/master/classTGMenuEntry.html,https://root.cern,https://root.cern/doc/master/classTGMenuEntry.html,1,['Guid'],['Guide']
Usability,"ts (0-9) or white spaces, i.e.Definition TString.cxx:1830; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TStyle::GetErrorXFloat_t GetErrorX() constDefinition TStyle.h:186; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TVectorTTVectorT.Definition TVectorT.h:27; TVectorT::GetNrowsInt_t GetNrows() constDefinition TVectorT.h:73; TVectorT::GetLwbInt_t GetLwb() constDefinition TVectorT.h:71; bool; double; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Math::normal_quantile_cdouble normal_quantile_c(double z, double sigma)Inverse ( ) of the cumulative distribution function of the upper tail of the normal (Gaussian) distri...Definition QuantFuncMathCore.cxx:126; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. histhistsrcTGraphAsymmErrors.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:72996,Guid,Guide,72996,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ts BypassStreamer bit set.; //However, because TLine has a custom Streamer, this bit was reset; //by TTree::Branch above. We set again this bit because the current; //version of TLine uses the automatic Streamer.; //BypassingStreamer saves space and time.; arr->BypassStreamer();; for (Int_t ev=0;ev<10000;ev++) {; ar.Clear();; Int_t nlines = Int_t(gRandom->Gaus(50,10));; if(nlines < 0) nlines = 1;; for (Int_t i=0;i<nlines;i++) {; Float_t x1 = gRandom->Rndm();; Float_t y1 = gRandom->Rndm();; Float_t x2 = gRandom->Rndm();; Float_t y2 = gRandom->Rndm();; new(ar[i]) TLine(x1,y1,x2,y2);; }; T.Fill();; }; T.Print();; T.Write();; }; ; void tclread(); {; // read file generated by tclwrite; // loop on all entries.; // histogram center of lines; TFile *f = new TFile(""tcl.root"");; TTree *T = (TTree*)f->Get(""T"");; TH2F *h2 = new TH2F(""h2"",""center of lines"",40,0,1,40,0,1);; ; TClonesArray *arr = new TClonesArray(""TLine"");; T->GetBranch(""tcl"")->SetAutoDelete(kFALSE);; T->SetBranchAddress(""tcl"",&arr);; Long64_t nentries = T->GetEntries();; for (Long64_t ev=0;ev<nentries;ev++) {; arr->Clear();; T->GetEntry(ev);; Int_t nlines = arr->GetEntriesFast();; for (Int_t i=0;i<nlines;i++) {; TLine *line = (TLine*)arr->At(i);; h2->Fill(0.5*(line->GetX1()+line->GetX2()), 0.5*(line->GetY1()+line->GetY2()));; }; }; h2->Draw(""lego"");; }; ; void tcl(Int_t split=0); {; gBenchmark->Start(""tcl"");; tclwrite(split);; tclread();; gBenchmark->Show(""tcl"");; }; f#define f(i)Definition RSha256.hxx:104; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TClonesArray.h; TFile.h; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tcl_8C.html:2184,Clear,Clear,2184,doc/master/tcl_8C.html,https://root.cern,https://root.cern/doc/master/tcl_8C.html,1,['Clear'],['Clear']
Usability,"ts TVirtualGeoPainter.; Definition at line 104 of file RGeoPainter.hxx. ◆ ShapeDistancetoPrimitive(). Int_t ROOT::RGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; , . Int_t ; , . Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 105 of file RGeoPainter.hxx. ◆ Test(). void ROOT::RGeoPainter::Test ; (; Int_t ; , . Option_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 106 of file RGeoPainter.hxx. ◆ TestOverlaps(). void ROOT::RGeoPainter::TestOverlaps ; (; const char * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 107 of file RGeoPainter.hxx. ◆ TestVoxels(). Bool_t ROOT::RGeoPainter::TestVoxels ; (; TGeoVolume * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 108 of file RGeoPainter.hxx. ◆ UnbombTranslation(). void ROOT::RGeoPainter::UnbombTranslation ; (; const Double_t * ; , . Double_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 109 of file RGeoPainter.hxx. ◆ Weight(). Double_t ROOT::RGeoPainter::Weight ; (; Double_t ; , . Option_t * ; = ""v"" . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 110 of file RGeoPainter.hxx. Member Data Documentation. ◆ fGeoManager. TGeoManager* ROOT::RGeoPainter::fGeoManager {nullptr}. private . Definition at line 22 of file RGeoPainter.hxx. ◆ fTopVisible. Int_t ROOT::RGeoPainter::fTopVisible {-1}. private . ! is s ; Definition at line 25 of file RGeoPainter.hxx. ◆ fViewer. std::shared_ptr<RGeomViewer> ROOT::RGeoPainter::fViewer. private . Definition at line 24 of file RGeoPainter.hxx. Libraries for ROOT::RGeoPainter:. [legend]; The documentation for this class was generated from the following files:; geom/webviewer/inc/ROOT/RGeoPainter.hxx; geom/webviewer/src/RGeoPainter.cxx. ROOTRGeoPainter. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:32762,Guid,Guide,32762,doc/v632/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html,1,['Guid'],['Guide']
Usability,"ts are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), together with a list of column names. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; auto c = d.Filter(metCut, {""MET""}).Count();; std::cout << *c << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::CountRResultPtr< ULong64_t > Count()Return the number of entries processed (lazy action).Definition RInterface.hxx:1560; xDouble_t x[n]Definition legend1.C:17; An example of a more complex filter expressed as a string containing C++ code is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:18222,simpl,simple,18222,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"ts are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), together with a list of column names. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; auto c = d.Filter(metCut, {""MET""}).Count();; std::cout << *c << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::CountRResultPtr< ULong64_t > Count()Return the number of entries processed (lazy action).Definition RInterface.hxx:1729; xDouble_t x[n]Definition legend1.C:17; An example of a more complex filter expressed as a string containing C++ code is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:18611,simpl,simple,18611,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"ts as arguments.; Useful to use the string operator +; example:; ntuple.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success. varexp is an expression of the general form; - ""e1"" produces a 1-d histogram (TH1F) of expression ""e1""; - ""e1:e2"" produces an unbinned 2-d scatter-plot (TGraph) of ""e1"" versus ""e2""; - ""e1:e2:e3"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3""; - ""e1:e2:e3:e4"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3"" and ""e4"" mapped on the color number.; (to create histograms in the 2, 3, and 4 dimesional case, see section ""Saving; the result of Draw to an histogram""). Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); = px:py:pz:2.5*E produces a 3-d scatter-plot of px vs py ps pz; and the color number of each marker will be 2.5*E.; If the color number is negative it is set to 0.; If the color number is greater than the current number of colors; it is set to the highest color number.; The default number of colors is 50.; see TStyle::SetPalette for setting a new color palette. Note that the variables e1, e2 or e3 may contain a selection.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. The expressions can use all the operations and build-in functions; supported by TFormula (See TFormula::Analyze), including free; standing function taking numerical arguments (TMath::Bessel).; In addition, you can call member functions taking numerical; arguments. For example:; - ""TMath::BreitWigner(fPx,3,2)""; - ""event.GetHistogram().GetXaxis().GetXmax()""; Note: You can only pass expression th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:62755,simpl,simplest,62755,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,3,['simpl'],['simplest']
Usability,"ts painting operations. ; Definition at line 26 of file TPadPainter.h. Public Member Functions;  TPadPainter ();  Empty ctor. We need it only because of explicit copy ctor. ;  ; void ClearDrawable () override;  Clear the current gVirtualX window. ;  ; void CopyDrawable (Int_t device, Int_t px, Int_t py) override;  Copy a gVirtualX pixmap. ;  ; Int_t CreateDrawable (UInt_t w, UInt_t h) override;  Create a gVirtualX Pixmap. ;  ; void DestroyDrawable (Int_t device) override;  Close the current gVirtualX pixmap. ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode) override;  Paint a simple box. ;  ; void DrawFillArea (Int_t n, const Double_t *x, const Double_t *y) override;  Paint filled area. ;  ; void DrawFillArea (Int_t n, const Float_t *x, const Float_t *y) override;  Paint filled area. ;  ; void DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Paint a simple line. ;  ; void DrawLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2) override;  Paint a simple line in normalized coordinates. ;  ; void DrawPixels (const unsigned char *pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending) override;  Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ;  ; void DrawPolyLine (Int_t n, const Double_t *x, const Double_t *y) override;  Paint Polyline. ;  ; void DrawPolyLine (Int_t n, const Float_t *x, const Float_t *y) override;  Paint polyline. ;  ; void DrawPolyLineNDC (Int_t n, const Double_t *u, const Double_t *v) override;  Paint polyline in normalized coordinates. ;  ; void DrawPolyMarker (Int_t n, const Double_t *x, const Double_t *y) override;  Paint polymarker. ;  ; void DrawPolyMarker (Int_t n, const Float_t *x, const Float_t *y) override;  Paint polymarker. ;  ; void DrawText (Double_t x, Double_t y, const char *text, ETextMode mode) override;  Paint text. ;  ; void DrawText (Double_t x, Double_t y, const wchar_t *text, ETextMode mode) override;  Special versio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadPainter.html:1391,simpl,simple,1391,doc/master/classTPadPainter.html,https://root.cern,https://root.cern/doc/master/classTPadPainter.html,1,['simpl'],['simple']
Usability,"ts the histogram to be filled.Definition TGraph2D.cxx:1568; TGraph2D::SetMaximumvoid SetMaximum(Double_t maximum=-1111)Set maximum.Definition TGraph2D.cxx:1619; TGraph2D::GetEXlowvirtual Double_t * GetEXlow() constDefinition TGraph2D.h:129; TGraph2D::Addvirtual void Add(TF2 *f, Double_t c1=1)Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated.Definition TGraph2D.cxx:642; TGraph2D::GetYmaxDouble_t GetYmax() constReturns the Y maximum.Definition TGraph2D.cxx:1175; TGraph2D::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideComputes distance from point px,py to a graph.Definition TGraph2D.cxx:730; TGraph2D::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default when an 2D graph is created, it is added to the list of 2D graph objects in the current di...Definition TGraph2D.cxx:1544; TGraph2D::fDirectoryTDirectory * fDirectory!Pointer to directory holding this 2D graphDefinition TGraph2D.h:60; TGraph2D::Clearvoid Clear(Option_t *option="""") overrideFree all memory allocated by this object.Definition TGraph2D.cxx:681; TGraph2D::Scalevirtual void Scale(Double_t c1=1., Option_t *option=""z"")Multiply the values of a TGraph2D by a constant c1.Definition TGraph2D.cxx:1506; TGraph2D::GetEXvirtual Double_t * GetEX() constDefinition TGraph2D.h:126; TGraph2D::DirectoryAutoAddvirtual void DirectoryAutoAdd(TDirectory *)Perform the automatic addition of the graph to the given directory.Definition TGraph2D.cxx:715; TGraph2D::CreateInterpolatorvoid CreateInterpolator(Bool_t oldInterp)Add a TGraphDelaunay in the list of the fHistogram's functions.Definition TGraph2D.cxx:968; TGraph2D::GetNpyInt_t GetNpy() constDefinition TGraph2D.h:110; TGraph2D::GetDirectoryTDirectory * GetDirectory() constDefinition TGraph2D.h:108; TGraph2D::fNpyInt_t fNpyNumber of bins along Y in fHistogram.Definition TGraph2D.h:47; TGraph2D::AddPointvirtual void AddPoint(Double_t x, Double_t y, Double_t z)Append a new point to the graph.Definition TGraph2D.h:93; TGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8h_source.html:18370,Clear,Clearvoid,18370,doc/master/TGraph2D_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ts w.r.t. the weights of the layer.Definition GeneralLayer.h:74; TMVA::DNN::VGeneralLayer::fOutputTensor_t fOutputActivations of this layer.Definition GeneralLayer.h:77; TMVA::DNN::VGeneralLayer::GetWeightGradientsconst std::vector< Matrix_t > & GetWeightGradients() constDefinition GeneralLayer.h:184; TMVA::DNN::VGeneralLayer::SetDropoutProbabilityvirtual void SetDropoutProbability(Scalar_t)Set Dropout probability.Definition GeneralLayer.h:160; TMVA::DNN::VGeneralLayer::CopyParametersvoid CopyParameters(const VGeneralLayer< Arch > &layer)Copy all trainable weight and biases from another equivalent layer but with different architecture Th...Definition GeneralLayer.h:478; TMVA::DNN::VGeneralLayer::GetWeightsAtconst Matrix_t & GetWeightsAt(size_t i) constDefinition GeneralLayer.h:175; TMVA::DNN::VGeneralLayer::SetHeightvoid SetHeight(size_t height)Definition GeneralLayer.h:222; TMVA::DNN::VGeneralLayer::UpdateWeightGradientsvoid UpdateWeightGradients(const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate)Updates the weight gradients, given some other weight gradients and learning rate.Definition GeneralLayer.h:438; TMVA::DNN::VGeneralLayer::Initializevirtual void Initialize()Initialize the weights and biases according to the given initialization method.Definition GeneralLayer.h:395; TMVA::DNN::VGeneralLayer::GetBiasesAtMatrix_t & GetBiasesAt(size_t i)Definition GeneralLayer.h:182; TMVA::DNN::VGeneralLayer::SetInputHeightvoid SetInputHeight(size_t inputHeight)Definition GeneralLayer.h:219; TMVA::DNN::VGeneralLayer::fBiasGradientsstd::vector< Matrix_t > fBiasGradientsGradients w.r.t. the bias values of the layer.Definition GeneralLayer.h:75; TMVA::DNN::VGeneralLayer::SetDepthvoid SetDepth(size_t depth)Definition GeneralLayer.h:221; TMVA::DNN::VGeneralLayer::SetExtraLayerParametersvirtual void SetExtraLayerParameters(const std::vector< Matrix_t > &)Definition GeneralLayer.h:212; TMVA::DNN::VGeneralLayer::ReadWeightsFromXMLvirtual void ReadWeightsFromXM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:28191,learn,learningRate,28191,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],"['learning', 'learningRate']"
Usability,"ts(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EEventType { kUnDefined; kPacket; kStart; kStop; kFile; kFileOpen; kFileRead; kRate; kNumEventType; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * EventType(TVirtualPerfStats::EEventType type); Return the name of the event type. virtual ~TVirtualPerfStats(); {}. void SimpleEvent(TVirtualPerfStats::EEventType type). void PacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead). void FileOpenEvent(TFile* file, const char* filename, Double_t start). void FileReadEvent(TFile* file, Int_t len, Double_t start). void RateEvent(Double_t proctime, Double_t deltatime, Long64_t eventsprocessed, Long64_t bytesRead). Long64_t GetBytesRead() const. void SetNumEvents(Long64_t num). Long64_t GetNumEvents() const. » Author: Kristjan Gulbrandsen 11/05/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TVirtualPerfStats.h 30978 2009-11-05 01:38:48Z rdm $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualPerfStats.html:6404,Simpl,SimpleEvent,6404,root/html528/TVirtualPerfStats.html,https://root.cern,https://root.cern/root/html528/TVirtualPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,ts). If not forward serverRedirect to cache elements ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 84 of file RooObjCacheManager.cxx. ◆ setClearOnRedirect(). void RooObjCacheManager::setClearOnRedirect ; (; bool ; flag). inline . Definition at line 50 of file RooObjCacheManager.h. ◆ sterilize(). void RooObjCacheManager::sterilize ; (; ). overridevirtual . Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 152 of file RooObjCacheManager.cxx. ◆ Streamer(). void RooObjCacheManager::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from RooCacheManager< RooAbsCacheElement >. ◆ StreamerNVirtual(). void RooObjCacheManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooObjCacheManager.h. Member Data Documentation. ◆ _allowOptimize. bool RooObjCacheManager::_allowOptimize. protected . Definition at line 55 of file RooObjCacheManager.h. ◆ _clearObsList. bool RooObjCacheManager::_clearObsList. staticprotected . Clear obslist on sterilize? ; Definition at line 60 of file RooObjCacheManager.h. ◆ _clearOnRedirect. bool RooObjCacheManager::_clearOnRedirect. protected . Definition at line 54 of file RooObjCacheManager.h. ◆ _optCacheModeSeen. bool RooObjCacheManager::_optCacheModeSeen. protected . ! ; Definition at line 56 of file RooObjCacheManager.h. ◆ _optCacheObservables. RooArgSet* RooObjCacheManager::_optCacheObservables = nullptr. protected . ! current optCacheObservables ; Definition at line 58 of file RooObjCacheManager.h. Libraries for RooObjCacheManager:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooObjCacheManager.h; roofit/roofitcore/src/RooObjCacheManager.cxx. RooObjCacheManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:12430,Clear,Clear,12430,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,"ts* l, TGPopupMenu* before = 0); virtual voidAddPopup(const char* s, TGPopupMenu* menu, TGLayoutHints* l, TGPopupMenu* before = 0); virtual TGPopupMenu*AddPopup(const TString& s, Int_t padleft = 4, Int_t padright = 0, Int_t padtop = 0, Int_t padbottom = 0); virtual voidAddTitle(TGMenuTitle* title, TGLayoutHints* l, TGPopupMenu* before = 0); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMenuBar.html:3512,Clear,Clear,3512,root/html528/TGMenuBar.html,https://root.cern,https://root.cern/root/html528/TGMenuBar.html,6,['Clear'],['Clear']
Usability,"ts, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file HypoTestResult.h. Public Member Functions;  HypoTestResult (const char *name, double nullp, double altp);  constructor from name, null and alternate p values ;  ;  HypoTestResult (const char *name=nullptr);  default constructor ;  ;  HypoTestResult (const HypoTestResult &other);  copy constructor ;  ;  ~HypoTestResult () override;  destructor ;  ; virtual double AlternatePValue () const;  Return p-value for alternate hypothesis. ;  ; virtual void Append (const HypoTestResult *other);  add values from another HypoTestResult ;  ; virtual double CLb () const;  Convert NullPValue into a ""confidence level"". ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; TObject * Clone (const char *newname=nullptr) const override;  clone method, required since some data members cannot rely on the streamers to copy them ;  ; virtual double CLs () const;  \(CL_{s}\) is simply \(CL_{s+b}/CL_{b}\) (not a method, but a quantity) ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; virtual double CLsplusb () const;  Convert AlternatePValue into a ""confidence level"". ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; const RooArgList * GetAllTestStatisticsData (void) const;  ; RooDataSet * GetAltDetailedOutput (void) const;  ; SamplingDistribution * GetAltDistribution (void) const;  ; bool GetBackGroundIsAlt (void) const;  ; RooDataSet * GetFitInfo () const;  ; RooDataSet * GetNullDetailedOutput (void) const;  ; SamplingDistribution * GetNullDistribution (void) const;  ; bool GetPValueIsRightTail (void) const;  ; double GetTestStatisticData (void) const;  ; bool HasTestStatisticData (void) const;  ; TClass * IsA () const override;  ; virtual double NullPValue () const;  Return p-value for null hypothesis. ;  ; double NullPValueError (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:2910,simpl,simply,2910,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['simpl'],['simply']
Usability,"ts. ; the values are copied. points should be ordered as follows: [re_0, im_0, re_1, im_1, ..., re_n, im_n) ; Implements TVirtualFFT.; Definition at line 361 of file TFFTComplexReal.cxx. ◆ SetPointsComplex(). void TFFTComplexReal::SetPointsComplex ; (; const Double_t * ; re, . const Double_t * ; im . ). overridevirtual . Set all points. The values are copied. ; Implements TVirtualFFT.; Definition at line 374 of file TFFTComplexReal.cxx. ◆ Streamer(). void TFFTComplexReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFFTComplexReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file TFFTComplexReal.h. ◆ Transform(). void TFFTComplexReal::Transform ; (; ). overridevirtual . Computes the transform, specified in Init() function. ; Implements TVirtualFFT.; Definition at line 165 of file TFFTComplexReal.cxx. Member Data Documentation. ◆ fFlags. TString TFFTComplexReal::fFlags. protected . Definition at line 30 of file TFFTComplexReal.h. ◆ fIn. void* TFFTComplexReal::fIn. protected . Definition at line 24 of file TFFTComplexReal.h. ◆ fN. Int_t* TFFTComplexReal::fN. protected . Definition at line 29 of file TFFTComplexReal.h. ◆ fNdim. Int_t TFFTComplexReal::fNdim. protected . Definition at line 27 of file TFFTComplexReal.h. ◆ fOut. void* TFFTComplexReal::fOut. protected . Definition at line 25 of file TFFTComplexReal.h. ◆ fPlan. void* TFFTComplexReal::fPlan. protected . Definition at line 26 of file TFFTComplexReal.h. ◆ fTotalSize. Int_t TFFTComplexReal::fTotalSize. protected . Definition at line 28 of file TFFTComplexReal.h. Libraries for TFFTComplexReal:. [legend]; The documentation for this class was generated from the following files:; math/fftw/inc/TFFTComplexReal.h; math/fftw/src/TFFTComplexReal.cxx. TFFTComplexReal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTComplexReal.html:25640,Guid,Guide,25640,doc/master/classTFFTComplexReal.html,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html,1,['Guid'],['Guide']
Usability,"ts. ROOT; » HIST; » HIST; » THnT<unsigned long>. class THnT<unsigned long>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<unsigned long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_unsigned_long_.html:1024,Clear,Clear,1024,root/html602/THnT_unsigned_long_.html,https://root.cern,https://root.cern/root/html602/THnT_unsigned_long_.html,2,['Clear'],['Clear']
Usability,"ts.back();; 118 fChild = fStackChilds.back();; 119 ; 120 fStackParents.pop_back();; 121 fStackChilds.pop_back();; 122 ; 123 if (fParentId < 0) {; 124 fNodeId = 0;; 125 } else {; 126 fNodeId = fDesc.fDesc[fParentId].chlds[fChild];; 127 }; 128 return true;; 129 }; 130 ; 131 bool Next(); 132 {; 133 // does not have parents; 134 if ((fNodeId <= 0) || (fParentId < 0)) {; 135 Reset();; 136 return false;; 137 }; 138 ; 139 auto &prnt = fDesc.fDesc[fParentId];; 140 if (++fChild >= prnt.chlds.size()) {; 141 fNodeId = -1; // not valid node, only Leave can be called; 142 return false;; 143 }; 144 ; 145 fNodeId = prnt.chlds[fChild];; 146 return true;; 147 }; 148 ; 149 bool Reset(); 150 {; 151 fParentId = -1;; 152 fNodeId = -1;; 153 fChild = 0;; 154 fStackParents.clear();; 155 fStackChilds.clear();; 156 ; 157 return true;; 158 }; 159 ; 160 bool NextNode(); 161 {; 162 if (Enter()); 163 return true;; 164 ; 165 if (Next()); 166 return true;; 167 ; 168 while (Leave()) {; 169 if (Next()); 170 return true;; 171 }; 172 ; 173 return false;; 174 }; 175 ; 176 /** Navigate to specified path - path specified as string and should start with ""/"" */; 177 bool Navigate(const std::string &path); 178 {; 179 size_t pos = path.find('/');; 180 if (pos != 0); 181 return false;; 182 ; 183 Reset(); // set to the top of element; 184 ; 185 while (++pos < path.length()) {; 186 auto last = pos;; 187 ; 188 pos = path.find('/', last);; 189 ; 190 if (pos == std::string::npos); 191 pos = path.length();; 192 ; 193 std::string folder = path.substr(last, pos - last);; 194 ; 195 if (!Enter()); 196 return false;; 197 ; 198 bool find = false;; 199 ; 200 do {; 201 find = (folder.compare(GetName()) == 0);; 202 } while (!find && Next());; 203 ; 204 if (!find); 205 return false;; 206 }; 207 ; 208 return true;; 209 }; 210 ; 211 /** Navigate to specified path */; 212 bool Navigate(const std::vector<std::string> &path); 213 {; 214 Reset(); // set to the top of element; 215 ; 216 for (auto &folder : path) {; 217 ; 218 if (!E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:4079,clear,clear,4079,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"ts::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat ; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCSamplerOld A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:47458,simpl,simple,47458,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['simpl'],['simple']
Usability,"ts::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:50070,simpl,simple,50070,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,3,['simpl'],['simple']
Usability,"ts::SetRealNorm ; (; Double_t ; rnorm). inlinevirtual . Definition at line 139 of file TTreePerfStats.h. ◆ SetRealTime(). virtual void TTreePerfStats::SetRealTime ; (; Double_t ; rtime). inlinevirtual . Definition at line 140 of file TTreePerfStats.h. ◆ SetTreeCacheSize(). virtual void TTreePerfStats::SetTreeCacheSize ; (; Int_t ; nbytes). inlinevirtual . Definition at line 141 of file TTreePerfStats.h. ◆ SetUnzipTime(). virtual void TTreePerfStats::SetUnzipTime ; (; Double_t ; uztime). inlinevirtual . Definition at line 142 of file TTreePerfStats.h. ◆ SetUsed() [1/2]. void TTreePerfStats::SetUsed ; (; size_t ; bi, . size_t ; basketNumber . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 152 of file TTreePerfStats.h. ◆ SetUsed() [2/2]. void TTreePerfStats::SetUsed ; (; TBranch * ; b, . size_t ; basketNumber . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 151 of file TTreePerfStats.h. ◆ SimpleEvent(). void TTreePerfStats::SimpleEvent ; (; EEventType ; ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 115 of file TTreePerfStats.h. ◆ Streamer(). void TTreePerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TTreePerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 157 of file TTreePerfStats.h. ◆ UnzipEvent(). void TTreePerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). overridevirtual . Record TTree unzip event. . start is the TimeStamp before unzip; pos is where in the file the compressed buffer came from; complen is the length of the compressed buffer; objlen is the length of the de-compressed buffer . Implements TVirtualPerfStats.; Definition at line 312 of file TTreePerfStats.cxx. ◆ UpdateBranchIndices(). void TTreePerfStats::UpdateBranchIndices ; (; TObjArray",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:32494,Simpl,SimpleEvent,32494,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"ts; // Here n=4 - each polygon defines a rectangle - 4 sides.; buffer.fPols[ 0] = fColor ; buffer.fPols[ 1] = 4 ; buffer.fPols[ 2] = 0 ; // base; buffer.fPols[ 3] = 1 ; buffer.fPols[ 4] = 2 ; buffer.fPols[ 5] = 3 ;; ; buffer.fPols[ 6] = fColor ; buffer.fPols[ 7] = 3 ; buffer.fPols[ 8] = 0 ; // side 0; buffer.fPols[ 9] = 4 ; buffer.fPols[10] = 5 ;; buffer.fPols[11] = fColor ; buffer.fPols[12] = 3 ; buffer.fPols[13] = 1 ; // side 1; buffer.fPols[14] = 5 ; buffer.fPols[15] = 6 ;; buffer.fPols[16] = fColor ; buffer.fPols[17] = 3 ; buffer.fPols[18] = 2 ; // side 2; buffer.fPols[19] = 6 ; buffer.fPols[20] = 7 ;; buffer.fPols[21] = fColor ; buffer.fPols[22] = 3 ; buffer.fPols[23] = 3 ; // side 3; buffer.fPols[24] = 7 ; buffer.fPols[25] = 4 ;; ; buffer.SetSectionsValid(TBuffer3D::kRaw);; }; ; return buffer;; }; ; class MyGeom : public TObject, public TAtt3D; {; public:; MyGeom();; ~MyGeom() override;; ; void Draw(Option_t *option) override;; void Paint(Option_t *option) override;; ; private:; std::vector<Shape *> fShapes;; ; ClassDefOverride(MyGeom,0);; };; ; ClassImp(MyGeom);; ; MyGeom::MyGeom(); {; // Create our simple geometry - sphere, couple of boxes; // and a square base pyramid; Shape * aShape;; aShape = new Sphere(kYellow, 80.0, 60.0, 120.0, 10.0);; fShapes.push_back(aShape);; aShape = new Box(kRed, 0.0, 0.0, 0.0, 20.0, 20.0, 20.0);; fShapes.push_back(aShape);; aShape = new Box(kBlue, 50.0, 100.0, 200.0, 5.0, 10.0, 15.0);; fShapes.push_back(aShape);; aShape = new SBPyramid(kGreen, 20.0, 25.0, 45.0, 30.0, 30.0, 90.0);; fShapes.push_back(aShape);; }; ; MyGeom::~MyGeom(); {; // Clear out fShapes; }; ; void MyGeom::Draw(Option_t *option); {; TObject::Draw(option);; ; // Ask pad to create 3D viewer of type 'option'; gPad->GetViewer3D(option);; }; ; void MyGeom::Paint(Option_t * /*option*/); {; TVirtualViewer3D * viewer = gPad->GetViewer3D();; ; // If MyGeom derives from TAtt3D then pad will recognise; // that the object it is asking to paint is 3D, and open/close; // the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:13426,simpl,simple,13426,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['simpl'],['simple']
Usability,"ts[fUniqueID] from the fPID object.; When the TRef is written, the process id number pidf of fPID is written in addition to the TObject part of the TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to the value stored in the TObjArray of TFile::fProcessIDs(fProcessIDs[pidf]).; When a referenced object is written, TObject::Streamer writes the pidf in addition to the standard fBits and fUniqueID. When TObject::Streamer reads a reference object, the pidf is read. At this point, the referenced object is entered into the table of objects of the TProcessID corresponding to pidf.; WARNING: If MyClass is the class of the referenced object, The TObject part of MyClass must be streamed. One should not call MyClass::Class()->IgnoreTObjectStreamer().; 11.4.4.1 TProccessID and TUUID; A TProcessID uniquely identifies a ROOT job. The TProcessID title consists of a TUUID object, which provides a globally unique identifier. The TUUID class implements the UUID (Universally Unique Identifier), also known as GUID (Globally Unique Identifier). A UUID is 128 bits long, and if generated according to this algorithm, is either guaranteed to be different from all other UUID generated until 3400 A.D. or extremely likely to be different.; The TROOT constructor automatically creates a TProcessID. When a TFile contains referenced objects, the TProcessID object is written to the file. If a file has been written in multiple sessions (same machine or not), a TProcessID is written for each session. The TProcessID objects are used by TRef to uniquely identify the referenced TObject.; When a referenced object is read from a file (its bit kIsReferenced is set), this object is entered into the objects table of the corresponding TProcessID. Each TFile has a list of TProcessIDs (see TFile::fProcessIDs) also accessible from TProcessID::fgPIDs (for all files). When this object is deleted, it is removed from the table via the cleanup mechanism invoked by the TObject destructor. Each TPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:483185,GUID,GUID,483185,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['GUID'],['GUID']
Usability,"tside will both see a modification of the range. ; Definition at line 372 of file RooCategory.cxx. ◆ addToRange() [2/2]. void RooCategory::addToRange ; (; const char * ; name, . RooAbsCategory::value_type ; stateIndex . ). Add the given state to the given range. ; NoteThis creates or accesses a shared map with allowed ranges. All copies of this category will share this range such that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 348 of file RooCategory.cxx. ◆ Class(). static TClass * RooCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooCategory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file RooCategory.h. ◆ clear(). void RooCategory::clear ; (; ). inline . Clear all defined category states. ; Definition at line 69 of file RooCategory.h. ◆ clearRange(). void RooCategory::clearRange ; (; const char * ; name, . bool ; silent . ). Clear the named range. ; NoteThis affects all copies of this category, because they are sharing range definitions. This ensures that categories inside a dataset and their counterparts on the outside will both see a modification of the range. ; Definition at line 321 of file RooCategory.cxx. ◆ clone(). TObject * RooCategory::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 37 of file RooCategory.h. ◆ DeclFileName(). static const char * RooCategory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 141 of file RooCategory.h. ◆ defineType() [1/2]. bool RooCategory::defineType ; (; const std::string & ; label). Define a state with given name. ; The lowest available positive integer is assigned as index. Category s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:55075,Clear,Clear,55075,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['Clear'],['Clear']
Usability,"ttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhi1first phi limit; Float_tfPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTUBS(); TUBS shape default constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape normal constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape ""simplified"" constructor. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBS(); TUBS shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetPoints(Double_t* points) const; Create TUBS points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TTUBS(). Float_t GetPhi1() const; {return fPhi1;}. Float_t GetPhi2() const; {return fPhi2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTUBS.html:9588,simpl,simplified,9588,root/html534/TTUBS.html,https://root.cern,https://root.cern/root/html534/TTUBS.html,1,['simpl'],['simplified']
Usability,"ttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhi1first phi limit; Float_tfPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTUBS(); TUBS shape default constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape normal constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape ""simplified"" constructor. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBS(); TUBS shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetPoints(Double_t* points) const; Create TUBS points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TTUBS(). Float_t GetPhi1() const; {return fPhi1;}. Float_t GetPhi2() const; {return fPhi2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TTUBS.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTUBS.html:9354,simpl,simplified,9354,root/html528/TTUBS.html,https://root.cern,https://root.cern/root/html528/TTUBS.html,1,['simpl'],['simplified']
Usability,"ttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhi1first phi limit; Float_tfPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTUBS(); TUBS shape default constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape normal constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape ""simplified"" constructor. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBS(); TUBS shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetPoints(Double_t* points) const; Create TUBS points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TTUBS(). Float_t GetPhi1() const; {return fPhi1;}. Float_t GetPhi2() const; {return fPhi2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TTUBS.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTUBS.html:9423,simpl,simplified,9423,root/html530/TTUBS.html,https://root.cern,https://root.cern/root/html530/TTUBS.html,1,['simpl'],['simplified']
Usability,"ttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhi1first phi limit; Float_tfPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTUBS(); TUBS shape default constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape normal constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape ""simplified"" constructor. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBS(); TUBS shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetPoints(Double_t* points) const; Create TUBS points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TTUBS(). Float_t GetPhi1() const; {return fPhi1;}. Float_t GetPhi2() const; {return fPhi2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TTUBS.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTUBS.html:9423,simpl,simplified,9423,root/html532/TTUBS.html,https://root.cern,https://root.cern/root/html532/TTUBS.html,1,['simpl'],['simplified']
Usability,"ttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TH1(const TH1 &)=deleteTH1private; TH1()TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins)TH1protected; TH1F()TH1F; TH1F(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup)TH1F; TH1F(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins)TH1F; TH1F(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins)TH1F; TH1F(const TVectorF &v)TH1Fexplicit; TH1F(const TH1F &h1f)TH1F; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TransformHisto(TVirtualFFT *fft, TH1 *h_output, Option_t *option)TH1static; UpdateBinContent(Int_t bin, Double_t content) overrideTH1Finlineprotectedvirtual; UseCurrentStyle() overrideTH1virtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; WriteArray(TBuffer &b, const TArray *a)TArraystatic; ~TArray()TArrayinlinevirtual; ~TArrayF()TArrayFvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TH1() overrideTH1; ~TH1F() overrideTH1F; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1F-members.html:24999,Guid,Guide,24999,doc/master/classTH1F-members.html,https://root.cern,https://root.cern/doc/master/classTH1F-members.html,1,['Guid'],['Guide']
Usability,"tte Line Color) and AMC (Palette Marker Color) ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:118450,simpl,simple,118450,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"tter action. ; By default, all functions with names like ""SetXXX"" or ""setXXX"" considered as setters. Another type of setters are Move, Resize operations; More complicated commands might want to override this function. ; Definition at line 440 of file TQCommand.cxx. ◆ IsUndoing(). Bool_t TQCommand::IsUndoing ; (; ); const. Undo action is in progress. ; Definition at line 808 of file TQCommand.cxx. ◆ ls(). void TQCommand::ls ; (; Option_t * ; option = """"); const. overridevirtual . ls this command and merged commands ; Reimplemented from TCollection.; Reimplemented in TQUndoManager.; Definition at line 848 of file TQCommand.cxx. ◆ Merge() [1/2]. Long64_t TQCommand::Merge ; (; TCollection * ; collection, . TFileMergeInfo * ;  . ). virtual . Merge a collection of TQCommand. ; Definition at line 337 of file TQCommand.cxx. ◆ Merge() [2/2]. void TQCommand::Merge ; (; TQCommand * ; c). virtual . Add command to the list of merged commands. ; This make it possible to group complex actions together so an end user can undo and redo them with one command. Execution of TQUndoManager::Undo(), TQUndoManager::Redo() methods only invokes the top level command as a whole.; Merge method is analogous to logical join operation.; Note: Merge method invokes redo action. ; Definition at line 329 of file TQCommand.cxx. ◆ operator=(). TQCommand & TQCommand::operator= ; (; const TQCommand & ; ). private . ◆ PrintCollectionHeader(). void TQCommand::PrintCollectionHeader ; (; Option_t * ; option); const. overrideprotectedvirtual . Print collection header. ; Reimplemented from TCollection.; Definition at line 864 of file TQCommand.cxx. ◆ Redo(). void TQCommand::Redo ; (; Option_t * ; option = """"). virtual . Execute command and then merge commands. ; Reimplemented in TQUndoManager.; Definition at line 588 of file TQCommand.cxx. ◆ SetArgs(). void TQCommand::SetArgs ; (; Int_t ; narg, .  ; ... . ). virtual . Set do/redo and undo parameters. ; The format is SetArgs(number_of_params, redo_params, undo_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:41706,undo,undo,41706,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"tting up ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it yourself.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:1008,Guid,Guides,1008,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,1,['Guid'],['Guides']
Usability,ttingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ;  ; file  TwoHistoFit2D.C;   Example to fit two histograms at the same time. ;  ; file  vectorizedFit.C;   Tutorial for creating a Vectorized TF1 function using a formula expression and use it for fitting an histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__fit.html:5237,Guid,Guide,5237,doc/master/group__tutorial__fit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html,1,['Guid'],['Guide']
Usability,"ttings, provided as a string in a key-value form. ;  ; void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  Methods for writing and reading weights. ;  ; virtual void ReadWeightsFromStream (TFile &);  Methods for writing and reading weights. ;  ; void ReadWeightsFromXML (void *wghtnode);  ; void SetArchitectureString (TString architectureString);  ; void SetBatchDepth (size_t batchDepth);  ; void SetBatchHeight (size_t batchHeight);  ; void SetBatchSize (size_t batchSize);  ; void SetBatchWidth (size_t batchWidth);  ; void SetErrorStrategyString (TString errorStrategy);  ; void SetInputDepth (int inputDepth);  Setters. ;  ; void SetInputHeight (int inputHeight);  ; void SetInputShape (std::vector< size_t > inputShape);  ; void SetInputWidth (int inputWidth);  ; void SetLayoutString (TString layoutString);  ; void SetOutputFunction (DNN::EOutputFunction outputFunction);  ; void SetTrainingStrategyString (TString trainingStrategyString);  ; void SetWeightInitialization (DNN::EInitialization weightInitialization);  ; void SetWeightInitializationString (TString weightInitializationString);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train ();  Methods for training the deep learning network. ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:3689,learn,learning,3689,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['learn'],['learning']
Usability,"ttributes |; List of all members ; TMVA::TMVAGaussPair Class Reference. . Definition at line 54 of file VariableGaussTransform.h. Public Member Functions;  TMVAGaussPair (Float_t f, Float_t w);  ; Float_t GetValue () const;  ; Float_t GetWeight () const;  ; Bool_t operator< (const TMVAGaussPair &p) const;  ; Bool_t operator== (const TMVAGaussPair &p) const;  ; Bool_t operator> (const TMVAGaussPair &p) const;  . Private Attributes; Float_t fF;  ; Float_t fW;  . #include <TMVA/VariableGaussTransform.h>; Constructor & Destructor Documentation. ◆ TMVAGaussPair(). TMVA::TMVAGaussPair::TMVAGaussPair ; (; Float_t ; f, . Float_t ; w . ). inline . Definition at line 58 of file VariableGaussTransform.h. Member Function Documentation. ◆ GetValue(). Float_t TMVA::TMVAGaussPair::GetValue ; (; ); const. inline . Definition at line 62 of file VariableGaussTransform.h. ◆ GetWeight(). Float_t TMVA::TMVAGaussPair::GetWeight ; (; ); const. inline . Definition at line 63 of file VariableGaussTransform.h. ◆ operator<(). Bool_t TMVA::TMVAGaussPair::operator< ; (; const TMVAGaussPair & ; p); const. inline . Definition at line 60 of file VariableGaussTransform.h. ◆ operator==(). Bool_t TMVA::TMVAGaussPair::operator== ; (; const TMVAGaussPair & ; p); const. inline . Definition at line 61 of file VariableGaussTransform.h. ◆ operator>(). Bool_t TMVA::TMVAGaussPair::operator> ; (; const TMVAGaussPair & ; p); const. inline . Definition at line 59 of file VariableGaussTransform.h. Member Data Documentation. ◆ fF. Float_t TMVA::TMVAGaussPair::fF. private . Definition at line 67 of file VariableGaussTransform.h. ◆ fW. Float_t TMVA::TMVAGaussPair::fW. private . Definition at line 68 of file VariableGaussTransform.h. Libraries for TMVA::TMVAGaussPair:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/VariableGaussTransform.h. TMVATMVAGaussPair. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TMVAGaussPair.html:2105,Guid,Guide,2105,doc/master/classTMVA_1_1TMVAGaussPair.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TMVAGaussPair.html,1,['Guid'],['Guide']
Usability,"ttributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:3435,clear,clearEvalError,3435,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['clear'],['clearEvalError']
Usability,"tual . Implemented in TPad. ◆ AddFirst(). virtual void TVirtualPad::AddFirst ; (; TObject * ; obj, . Option_t * ; opt = """", . Bool_t ; modified = kTRUE . ). pure virtual . Implemented in TPad. ◆ BuildLegend(). virtual TLegend * TVirtualPad::BuildLegend ; (; Double_t ; x1 = 0.3, . Double_t ; y1 = 0.21, . Double_t ; x2 = 0.3, . Double_t ; y2 = 0.21, . const char * ; title = """", . Option_t * ; option = """" . ). pure virtual . Implemented in TPad. ◆ cd(). virtual TVirtualPad * TVirtualPad::cd ; (; Int_t ; subpadnumber = 0). pure virtual . Implemented in TCanvas, and TPad. ◆ Class(). static TClass * TVirtualPad::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualPad::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualPad::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 289 of file TVirtualPad.h. ◆ Clear(). void TVirtualPad::Clear ; (; Option_t * ; option = """"). overridepure virtual . Reimplemented from TObject.; Implemented in TCanvas, and TPad. ◆ Clip(). virtual Int_t TVirtualPad::Clip ; (; Double_t * ; x, . Double_t * ; y, . Double_t ; xclipl, . Double_t ; yclipb, . Double_t ; xclipr, . Double_t ; yclipt . ). pure virtual . Implemented in TPad. ◆ Close(). virtual void TVirtualPad::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TCanvas, and TPad. ◆ CloseToolTip(). virtual void TVirtualPad::CloseToolTip ; (; TObject * ; tip). pure virtual . Implemented in TPad. ◆ CopyPixmap(). virtual void TVirtualPad::CopyPixmap ; (; ). pure virtual . Implemented in TPad. ◆ CopyPixmaps(). virtual void TVirtualPad::CopyPixmaps ; (; ). pure virtual . Implemented in TCanvas, and TPad. ◆ CreateToolTip(). virtual TObject * TVirtualPad::CreateToolTip ; (; const TBox * ; b, . const char * ; text, . Long_t ; delayms . ). pure virtual . Implemented in TPad. ◆ DeclFileName(). static const char * TVirtualPad::DeclFileNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPad.html:35059,Clear,Clear,35059,doc/master/classTVirtualPad.html,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html,1,['Clear'],['Clear']
Usability,"tual . ReturnsTClass describing current object ; Reimplemented from TGLayoutManager.; Definition at line 291 of file TGLayout.h. ◆ Layout(). void TGMatrixLayout::Layout ; (; ). overridevirtual . Make a matrix layout of all frames in the list. ; Implements TGLayoutManager.; Definition at line 635 of file TGLayout.cxx. ◆ operator=(). TGMatrixLayout & TGMatrixLayout::operator= ; (; const TGMatrixLayout & ; ). privatedelete . ◆ SavePrimitive(). void TGMatrixLayout::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save matrix layout manager as a C++ statement(s) on output stream. ; Reimplemented from TObject.; Definition at line 1075 of file TGLayout.cxx. ◆ Streamer(). void TGMatrixLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLayoutManager. ◆ StreamerNVirtual(). void TGMatrixLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 291 of file TGLayout.h. Member Data Documentation. ◆ fColumns. UInt_t TGMatrixLayout::fColumns. number of columns ; Definition at line 283 of file TGLayout.h. ◆ fHints. Int_t TGMatrixLayout::fHints. layout hints (currently not used) ; Definition at line 281 of file TGLayout.h. ◆ fList. TList* TGMatrixLayout::fList. protected . list of frames to arrange ; Definition at line 277 of file TGLayout.h. ◆ fMain. TGCompositeFrame* TGMatrixLayout::fMain. protected . container frame ; Definition at line 276 of file TGLayout.h. ◆ fRows. UInt_t TGMatrixLayout::fRows. number of rows ; Definition at line 282 of file TGLayout.h. ◆ fSep. Int_t TGMatrixLayout::fSep. interval between frames ; Definition at line 280 of file TGLayout.h. Libraries for TGMatrixLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGLayout.h; gui/gui/src/TGLayout.cxx. TGMatrixLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMatrixLayout.html:15401,Guid,Guide,15401,doc/master/classTGMatrixLayout.html,https://root.cern,https://root.cern/doc/master/classTGMatrixLayout.html,1,['Guid'],['Guide']
Usability,"tual . Set (add) a new fit parameter passing initial value, step size (verr) and parameter limits if vlow > vhigh the parameter is unbounded if the stepsize (verr) == 0 the parameter is treated as fixed. ; Implements TVirtualFitter.; Definition at line 663 of file TBackCompFitter.cxx. ◆ Streamer(). void TBackCompFitter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBackCompFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 143 of file TBackCompFitter.h. ◆ ValidParameterIndex(). bool TBackCompFitter::ValidParameterIndex ; (; int ; ipar); const. protected . Check if ipar is a valid parameter index. ; Definition at line 304 of file TBackCompFitter.cxx. Member Data Documentation. ◆ fCovar. std::vector<double> TBackCompFitter::fCovar. mutableprivate . Cached covariance matrix (NxN) ; Definition at line 139 of file TBackCompFitter.h. ◆ fFitData. std::shared_ptr<ROOT::Fit::FitData> TBackCompFitter::fFitData. private . ! Data of the fit ; Definition at line 134 of file TBackCompFitter.h. ◆ fFitter. std::shared_ptr<ROOT::Fit::Fitter> TBackCompFitter::fFitter. private . ! Pointer to fitter object ; Definition at line 135 of file TBackCompFitter.h. ◆ fMinimizer. ROOT::Math::Minimizer* TBackCompFitter::fMinimizer. private . Definition at line 136 of file TBackCompFitter.h. ◆ fModelFunc. ROOT::Math::IParamMultiFunction* TBackCompFitter::fModelFunc. private . Definition at line 138 of file TBackCompFitter.h. ◆ fObjFunc. ROOT::Math::IMultiGenFunction* TBackCompFitter::fObjFunc. private . Definition at line 137 of file TBackCompFitter.h. Libraries for TBackCompFitter:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TBackCompFitter.h; hist/hist/src/TBackCompFitter.cxx. TBackCompFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:37891,Guid,Guide,37891,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['Guid'],['Guide']
Usability,"tual Color_t GetTextColor() constReturn the text color.Definition TAttText.h:34; TAttText::~TAttTextvirtual ~TAttText()AttText destructor.Definition TAttText.cxx:287; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::GetTextAnglevirtual Float_t GetTextAngle() constReturn the text angle.Definition TAttText.h:33; TAttText::SetTextAttributesvirtual void SetTextAttributes()Invoke the DialogCanvas Text attributes.Definition TAttText.cxx:400; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizePixelsvirtual void SetTextSizePixels(Int_t npixels)Set the text size in pixel.Definition TAttText.cxx:423; TAttText::fTextFontFont_t fTextFontText font.Definition TAttText.h:25; TAttText::SaveTextAttributesvirtual void SaveTextAttributes(std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1)Save text attributes as C++ statement(s) on output stream out.Definition TAttText.cxx:373; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TAttText::GetTextSizePercentvirtual Float_t GetTextSizePercent(Float_t size)Return the text in percent of the pad size.Definition TAttText.cxx:310; TAttText::fTextAlignShort_t fTextAlignText alignment.Definition TAttText.h:23; TAttText::Copyvoid Copy(TAttText &atttext) constCopy this text attributes to a new TAttText.Definition TAttText.cxx:294; TAttText::ResetAttTextvirtual void ResetAttText(Option_t *toption="""")Reset this text attributes to default values.Definition TAttText.cxx:361; TAttText::fTextSizeFloat_t fTextSizeText size.Definition TAttText.h:22; int. corebaseincTAttText.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8h_source.html:6731,Guid,Guide,6731,doc/master/TAttText_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8h_source.html,1,['Guid'],['Guide']
Usability,"tual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:3691,clear,clearShapeDirty,3691,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,1,['clear'],['clearShapeDirty']
Usability,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void IncImpliedSelected ();  Increase element's implied-selection count. Stamp appropriately. ;  ; void In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneInfo.html:9309,feedback,feedback,9309,doc/master/classTEveSceneInfo.html,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html,1,['feedback'],['feedback']
Usability,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo2D.html:14840,feedback,feedback,14840,doc/master/classTEveCalo2D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo2D.html,9,['feedback'],['feedback']
Usability,"tual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)Fit this graph with function with name fname.Definition TGraph.cxx:1254; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)Fit this graph with function with name fname.Definition TMultiGraph.cxx:526; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::GetFunctionTF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TMultiGraph.cxx:1086; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; nconst Int_t nDefinition legend1.C:16; TMath::GausDouble_t Gaus(Double_t x, Double_t mean=0, Double_t sigma=1, Bool_t norm=kFALSE)Calculates a gaussian function with mean and sigma.Definition TMath.cxx:471; AuthorAnna Kreshuk ; Definition in file fitMultiGraph.C. tutorialsfitfitMultiGraph.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitMultiGraph_8C.html:6628,Guid,Guide,6628,doc/master/fitMultiGraph_8C.html,https://root.cern,https://root.cern/doc/master/fitMultiGraph_8C.html,1,['Guid'],['Guide']
Usability,tual void TMVA::MinuitFitter::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::FitterBase. ◆ StreamerNVirtual(). void TMVA::MinuitFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file MinuitFitter.h. Member Data Documentation. ◆ fBatch. Bool_t TMVA::MinuitFitter::fBatch. private . batch mode ; Definition at line 76 of file MinuitFitter.h. ◆ fErrorLevel. Int_t TMVA::MinuitFitter::fErrorLevel. private . minuit error level ; Definition at line 70 of file MinuitFitter.h. ◆ fFitStrategy. Int_t TMVA::MinuitFitter::fFitStrategy. private . minuit strategy level ; Definition at line 72 of file MinuitFitter.h. ◆ fMaxCalls. Int_t TMVA::MinuitFitter::fMaxCalls. private . (approximate) maximum number of function calls ; Definition at line 77 of file MinuitFitter.h. ◆ fMinWrap. MinuitWrapper* TMVA::MinuitFitter::fMinWrap. protected . Definition at line 64 of file MinuitFitter.h. ◆ fPrintLevel. Int_t TMVA::MinuitFitter::fPrintLevel. private . minuit printout level ; Definition at line 71 of file MinuitFitter.h. ◆ fPrintWarnings. Bool_t TMVA::MinuitFitter::fPrintWarnings. private . minuit warnings level ; Definition at line 73 of file MinuitFitter.h. ◆ fTolerance. Double_t TMVA::MinuitFitter::fTolerance. private . tolerance to the function value at the minimum ; Definition at line 78 of file MinuitFitter.h. ◆ fUseImprove. Bool_t TMVA::MinuitFitter::fUseImprove. private . flag for 'IMPROVE' use ; Definition at line 74 of file MinuitFitter.h. ◆ fUseMinos. Bool_t TMVA::MinuitFitter::fUseMinos. private . flag for 'MINOS' use ; Definition at line 75 of file MinuitFitter.h. Libraries for TMVA::MinuitFitter:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MinuitFitter.h; tmva/tmva/src/MinuitFitter.cxx. TMVAMinuitFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html:20523,Guid,Guide,20523,doc/master/classTMVA_1_1MinuitFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html,1,['Guid'],['Guide']
Usability,"tual voidAfterNewEventLoaded(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearNewEventCommands(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClose(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveEventManager.html:2248,Clear,ClearStamps,2248,root/html528/TEveEventManager.html,https://root.cern,https://root.cern/root/html528/TEveEventManager.html,1,['Clear'],['ClearStamps']
Usability,"tual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html:2628,Simpl,SimpleLikelihoodRatioTestStat,2628,root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"tual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__SimpleLikelihoodRatioTestStat.html:2628,Simpl,SimpleLikelihoodRatioTestStat,2628,root/html604/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html604/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"tual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidCloseBins(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEvePointSetArray.html:2709,Clear,ClearStamps,2709,root/html530/TEvePointSetArray.html,https://root.cern,https://root.cern/root/html530/TEvePointSetArray.html,5,['Clear'],['ClearStamps']
Usability,"tual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidDrawNeedle(); voidDrawText(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); voidTranslate(Float_t val, Float_t angle, Int_t* x, Int_t* y). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWindow::EEditMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSpeedo.html:15188,Clear,ClearFlags,15188,root/html602/TGSpeedo.html,https://root.cern,https://root.cern/root/html602/TGSpeedo.html,2,['Clear'],['ClearFlags']
Usability,"tual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*TEveWindow::CreateWindowMainFrame(TEveWindow* eve_parent = 0); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowPack.html:2202,Clear,ClearStamps,2202,root/html528/TEveWindowPack.html,https://root.cern,https://root.cern/root/html528/TEveWindowPack.html,2,['Clear'],['ClearStamps']
Usability,"tual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawBottomLeft(); virtual voidDrawBottomRight(); virtual voidDrawCenterX(); virtual voidDrawCenterY(); virtual voidDrawExpandX(); virtual voidDrawExpandY(); virtual voidDrawTopLeft(); virtual voidDrawTopRight(); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGuiBldHintsButton.html:15155,Clear,ClearFlags,15155,root/html602/TGuiBldHintsButton.html,https://root.cern,https://root.cern/root/html602/TGuiBldHintsButton.html,2,['Clear'],['ClearFlags']
Usability,"tual(TBuffer &ClassDef_StreamerNVirtual_b)TROOTinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TClingTROOTfriend; TDirectory(const TDirectory &directory)=deleteTDirectoryprotected; TDirectory()TDirectory; TDirectory(const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr)TDirectory; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; Time(Int_t casetime=1)TROOTinline; Timer() constTROOTinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TROOT(const TROOT &)=deleteTROOTprivate; TROOT()TROOTprotected; TROOT(const char *name, const char *title, VoidFuncPtr_t *initfunc=nullptr)TROOT; UnregisterContext(TContext *ctxt)TDirectoryprotected; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *=nullptr, Int_t=0, Int_t=0) overrideTDirectoryinlinevirtual; Write(const char *=nullptr, Int_t=0, Int_t=0) const overrideTDirectoryinlinevirtual; WriteDirHeader()TDirectoryinlinevirtual; WriteKeys()TDirectoryinlinevirtual; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObjectAny(const void *, const char *, const char *, Option_t *="""", Int_t=0)TDirectoryinlinevirtual; WriteObjectAny(const void *, const TClass *, const char *, Option_t *="""", Int_t=0)TDirectoryinlinevirtual; WriteTObject(const TObject *obj, const char *name=nullptr, Option_t *="""", Int_t=0)TDirectoryvirtual; ~TDirectory()TDirectoryvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TROOT()TROOTvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT-members.html:19519,Guid,Guide,19519,doc/master/classTROOT-members.html,https://root.cern,https://root.cern/doc/master/classTROOT-members.html,1,['Guid'],['Guide']
Usability,"tual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TObject &rhs)TObjectinline; Paint(Option_t *option="""")TObjectvirtual; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; ROOT::Internal::DeleteChangesMemoryImplTObjectfriend; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetObjectStat(Bool_t stat)TObjectstatic; SetUniqueID(UInt_t uid)TObjectvirtual; Streamer(TBuffer &)TObjectvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TObjectinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TClonesArrayTObjectfriend; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject-members.html:5181,Guid,Guide,5181,doc/master/classTObject-members.html,https://root.cern,https://root.cern/doc/master/classTObject-members.html,1,['Guid'],['Guide']
Usability,"tual; Print(Option_t *chopt="""") const overrideTMultiGraphvirtual; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj) overrideTMultiGraphvirtual; ResetBit(UInt_t f)TObjectinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""") overrideTMultiGraphvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetMaximum(Double_t maximum=-1111)TMultiGraphvirtual; SetMinimum(Double_t minimum=-1111)TMultiGraphvirtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTMultiGraphvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TMultiGraphinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TMultiGraph(const TMultiGraph &)=deleteTMultiGraphprotected; TMultiGraph()TMultiGraph; TMultiGraph(const char *name, const char *title)TMultiGraph; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TMultiGraph() overrideTMultiGraph; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph-members.html:7672,Guid,Guide,7672,doc/master/classTMultiGraph-members.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph-members.html,1,['Guid'],['Guide']
Usability,"tual; SetUniqueID(UInt_t uid)TObjectvirtual; SetX1(Double_t x1) overrideTPavevirtual; SetX1NDC(Double_t x1)TPaveinlinevirtual; SetX2(Double_t x2) overrideTPavevirtual; SetX2NDC(Double_t x2)TPaveinlinevirtual; SetY1(Double_t y1) overrideTPavevirtual; SetY1NDC(Double_t y1)TPaveinlinevirtual; SetY2(Double_t y2) overrideTPavevirtual; SetY2NDC(Double_t y2)TPaveinlinevirtual; Streamer(TBuffer &) overrideTPaveTextvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TPaveTextinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TBox()TBox; TBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBox; TBox(const TBox &box)TBox; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TPave()TPave; TPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPave; TPave(const TPave &pave)TPave; TPaveText()TPaveText; TPaveText(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option=""br"")TPaveText; TPaveText(const TPaveText &pavetext)TPaveText; UseCurrentStyle() overrideTPaveTextvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttText()TAttTextvirtual; ~TBox() overrideTBox; ~TObject()TObjectvirtual; ~TPave() overrideTPave; ~TPaveText() overrideTPaveText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveText-members.html:12645,Guid,Guide,12645,doc/master/classTPaveText-members.html,https://root.cern,https://root.cern/doc/master/classTPaveText-members.html,1,['Guid'],['Guide']
Usability,"tual; SetX1NDC(Double_t x1)TPaveinlinevirtual; SetX2(Double_t x2) overrideTPavevirtual; SetX2NDC(Double_t x2)TPaveinlinevirtual; SetY1(Double_t y1) overrideTPavevirtual; SetY1NDC(Double_t y1)TPaveinlinevirtual; SetY2(Double_t y2) overrideTPavevirtual; SetY2NDC(Double_t y2)TPaveinlinevirtual; Streamer(TBuffer &) overrideTLegendvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TLegendinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TBox()TBox; TBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBox; TBox(const TBox &box)TBox; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TLegend()TLegend; TLegend(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *header="""", Option_t *option=""brNDC"")TLegend; TLegend(Double_t w, Double_t h, const char *header="""", Option_t *option=""brNDC"")TLegend; TLegend(const TLegend &legend)TLegend; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TPave()TPave; TPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPave; TPave(const TPave &pave)TPave; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttText()TAttTextvirtual; ~TBox() overrideTBox; ~TLegend() overrideTLegend; ~TObject()TObjectvirtual; ~TPave() overrideTPave. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend-members.html:12669,Guid,Guide,12669,doc/master/classTLegend-members.html,https://root.cern,https://root.cern/doc/master/classTLegend-members.html,1,['Guid'],['Guide']
Usability,"tualBranchBrowsable::RegisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator); voidTVirtualBranchBrowsable::SetType(TClass* type); voidTVirtualBranchBrowsable::SetTypeIsPointer(Bool_t set = kTRUE); static voidTVirtualBranchBrowsable::UnregisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMethod*fMethodpointer to a method. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Constructor.; Links a TBranchElement to a TMethod, allowing the TBrowser to; browse simple methods. The c'tor sets the name for a method ""Class::Method(params) const""; to ""Method(params)"", title to TMethod::GetPrototype. void GetBrowsableMethodsForClass(TClass* cl, TList& list); Given a class, this methods fills list with TMethodBrowsables; for the class and its base classes, and returns the number of; added elements. If called from a TBranch::Browse overload, ""branch""; should be set to the calling TBranch, otherwise ""parent"" should; be set to the TVirtualBranchBrowsable being browsed, and branch; should be the branch of the parent. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's class and its base classes, and returns; the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being brows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodBrowsable.html:9015,simpl,simple,9015,root/html528/TMethodBrowsable.html,https://root.cern,https://root.cern/root/html528/TMethodBrowsable.html,4,['simpl'],['simple']
Usability,"tualCollectionProxy* Generate() const; Virtual copy constructor. TEmulatedCollectionProxy(const TEmulatedCollectionProxy& copy); Copy constructor. TEmulatedCollectionProxy(const char* cl_name, Bool_t silent); Initializing constructor. virtual ~TEmulatedCollectionProxy(); Standard destructor. void* New() const; Virtual constructor. { return new Cont_t; }. void* New(void* memory) const; Virtual in-place constructor. { return new(memory) Cont_t; }. void* NewArray(Int_t nElements) const; Virtual array constructor. { return new Cont_t[nElements]; }. void* NewArray(Int_t nElements, void* memory) const; Virtual in-place constructor. { return new(memory) Cont_t[nElements]; }. void Destructor(void* p, Bool_t dtorOnly = kFALSE) const; Virtual destructor. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; Virtual array destructor. UInt_t Sizeof() const; TVirtualCollectionProxy overload: Return the sizeof the collection object. { return sizeof(Cont_t); }. void * At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the container. void Resize(UInt_t n, Bool_t force_delete); Resize the container. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete); Block allocation of containees. void Commit(void* env); Block commit of containees. void ReadBuffer(TBuffer& buff, void* pObj); Read portion of the streamer. void ReadBuffer(TBuffer& buff, void* pObj, const TClass* onfile). void Streamer(TBuffer& refBuffer); Streamer for I/O handling. void Streamer(TBuffer& buff, void* pObj, int siz); Streamer I/O overload. Bool_t IsValid() const; Check validity of the proxy itself. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEmulatedCollectionProxy.html:8808,Clear,Clear,8808,root/html534/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TEmulatedCollectionProxy.html,2,['Clear'],['Clear']
Usability,"tualPS destructor. ;  ; virtual void * GetStream () const;  ; virtual Int_t GetType () const;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetStream (std::ofstream *os);  ; virtual void SetType (Int_t=-111);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteInteger (Int_t i, Bool_t space=kTRUE);  Write one Integer to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPS.html:2856,Clear,Clear,2856,doc/master/classTWebPS.html,https://root.cern,https://root.cern/doc/master/classTWebPS.html,1,['Clear'],['Clear']
Usability,"tualPad* pad); virtual~TGLScenePad(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddCompositeOp(UInt_t operation); voidAddHistoPhysical(TGLLogicalShape* log); virtual Int_tAddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); virtual Int_tAddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); voidTGLSceneBase::AddViewer(TGLViewerBase* viewer); virtual voidTGLScene::AdoptLogical(TGLLogicalShape& shape); virtual voidTGLScene::AdoptPhysical(TGLPhysicalShape& shape); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginScene(); UInt_tTGLScene::BeginSmartRefresh(); virtual Bool_tTGLScene::BeginUpdate(); const TGLBoundingBox&TGLSceneBase::BoundingBox() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tBuildingScene() const; virtual voidTGLScene::CalcBoundingBox() const; virtual Bool_tCanLoopOnPrimitives() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); TGLClip*TGLSceneBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseComposite(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGLScene::TSceneInfo*TGLScene::CreateSceneInfo(TGLViewerBase* view); TGLLockable::ELockTGLLockable::CurrentLock() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tTGLScene::DestroyLogical(TObject* logid, Bool_t mustFind = kTRUE); virtual Int_tTGLScene::DestroyLogicals(); virtual Bool_tTGLScene::DestroyPhysical(UInt_t phid); virtual Int_tTGLScene::DestroyPhysicals(); virtual Int_tDistancetoPrimitive(Int_t, Int_t); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTVirtualViewer3D::DrawViewer(); virtual voidTObject::Dump() constMENU ; voidTGLScene::DumpMapSizes() const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScenePad.html:1490,Clear,Clear,1490,root/html528/TGLScenePad.html,https://root.cern,https://root.cern/root/html528/TGLScenePad.html,1,['Clear'],['Clear']
Usability,"tualPad.; Definition at line 64 of file TInspectCanvas.h. ◆ SetLogz(). void TInspectCanvas::SetLogz ; (; Int_t ; value = 1). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 65 of file TInspectCanvas.h. ◆ SetTickx(). void TInspectCanvas::SetTickx ; (; Int_t ; value = 1). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 66 of file TInspectCanvas.h. ◆ SetTicky(). void TInspectCanvas::SetTicky ; (; Int_t ; value = 1). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 67 of file TInspectCanvas.h. ◆ Streamer(). void TInspectCanvas::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TCanvas. ◆ StreamerNVirtual(). void TInspectCanvas::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TInspectCanvas.h. ◆ x3d(). void TInspectCanvas::x3d ; (; Option_t * ; type = """"). inlineoverridevirtual . Deprecated: use TPad::GetViewer3D() instead. ; Reimplemented from TPad.; Definition at line 68 of file TInspectCanvas.h. Member Data Documentation. ◆ fBackward. TButton* TInspectCanvas::fBackward {nullptr}. protected . Pointer to the Backward button. ; Definition at line 25 of file TInspectCanvas.h. ◆ fCurObject. TObject* TInspectCanvas::fCurObject {nullptr}. protected . Pointer to object being inspected. ; Definition at line 28 of file TInspectCanvas.h. ◆ fForward. TButton* TInspectCanvas::fForward {nullptr}. protected . Pointer to the Forward button. ; Definition at line 26 of file TInspectCanvas.h. ◆ fObjects. TList* TInspectCanvas::fObjects {nullptr}. protected . List of objects inspected. ; Definition at line 27 of file TInspectCanvas.h. Libraries for TInspectCanvas:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TInspectCanvas.h; graf2d/gpad/src/TInspectCanvas.cxx. TInspectCanvas. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:70393,Guid,Guide,70393,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,1,['Guid'],['Guide']
Usability,tualStreamerInfo::kSTL@ kSTLDefinition TVirtualStreamerInfo.h:128; TVirtualStreamerInfo::kBits@ kBitsDefinition TVirtualStreamerInfo.h:121; TVirtualStreamerInfo::kTString@ kTStringDefinition TVirtualStreamerInfo.h:123; TVirtualStreamerInfo::kOffsetP@ kOffsetPDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kCacheNew@ kCacheNewDefinition TVirtualStreamerInfo.h:133; TVirtualStreamerInfo::kUShort@ kUShortDefinition TVirtualStreamerInfo.h:121; TVirtualStreamerInfo::kOffsetL@ kOffsetLDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kDouble@ kDoubleDefinition TVirtualStreamerInfo.h:119; TVirtualStreamerInfo::kAnyPnoVT@ kAnyPnoVTDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kCharStar@ kCharStarDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kAnyP@ kAnyPDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kAny@ kAnyDefinition TVirtualStreamerInfo.h:123; TVirtualStreamerInfo::kSTLp@ kSTLpDefinition TVirtualStreamerInfo.h:125; TVirtualStreamerInfo::kAnyp@ kAnypDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kObject@ kObjectDefinition TVirtualStreamerInfo.h:123; TVirtualStreamerInfo::kFloat@ kFloatDefinition TVirtualStreamerInfo.h:118; TVirtualStreamerInfo::kInt@ kIntDefinition TVirtualStreamerInfo.h:118; TVirtualStreamerInfo::kULong@ kULongDefinition TVirtualStreamerInfo.h:121; TVirtualStreamerInfo::kTObject@ kTObjectDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kLong64@ kLong64Definition TVirtualStreamerInfo.h:122; TVirtualStreamerInfo::kCounter@ kCounterDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kTNamed@ kTNamedDefinition TVirtualStreamerInfo.h:124; bool; double; int; unsigned int; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; v@ vDefinition rootcling_impl.cxx:3699; lTLine lDefinition textangle.C:4. ioiosrcTStreamerInfoWriteBuffer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html:51130,Guid,Guide,51130,doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,1,['Guid'],['Guide']
Usability,"tual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:48020,clear,clearing,48020,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['clear'],['clearing']
Usability,"tual_b);  ; virtual void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal method used by Initialize. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:12724,Clear,Clear,12724,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['Clear'],['Clear']
Usability,"tual_b);  ;  Public Member Functions inherited from RooAbsMCStudyModule;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processAfterFit (Int_t);  Method called after fit has been performed. ;  ; virtual bool processBetweenGenAndFit (Int_t);  Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html:3755,Clear,Clear,3755,doc/master/classRooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html,1,['Clear'],['Clear']
Usability,ture* TTreeViewer::fPicRefr. private . Pictures for Refresh buttons ///<ia. ; Definition at line 95 of file TTreeViewer.h. ◆ fPicStop. const TGPicture* TTreeViewer::fPicStop. private . Pictures for Stop buttons. ; Definition at line 94 of file TTreeViewer.h. ◆ fPicX. const TGPicture* TTreeViewer::fPicX. private . Pictures for X expressions. ; Definition at line 90 of file TTreeViewer.h. ◆ fPicY. const TGPicture* TTreeViewer::fPicY. private . Pictures for Y expressions. ; Definition at line 91 of file TTreeViewer.h. ◆ fPicZ. const TGPicture* TTreeViewer::fPicZ. private . Pictures for Z expressions. ; Definition at line 92 of file TTreeViewer.h. ◆ fProgressBar. TGHProgressBar* TTreeViewer::fProgressBar. private . Progress bar. ; Definition at line 152 of file TTreeViewer.h. ◆ fREFR. TGPictureButton* TTreeViewer::fREFR. private . REFRESH button ///<ia. ; Definition at line 160 of file TTreeViewer.h. ◆ fReset. TGTextButton* TTreeViewer::fReset. private . clear expression's entries ; Definition at line 168 of file TTreeViewer.h. ◆ fRunMenu. TGPopupMenu* TTreeViewer::fRunMenu. private . Definition at line 113 of file TTreeViewer.h. ◆ fScanMode. bool TTreeViewer::fScanMode. private . Flag activated when Scan Box is double-clicked. ; Definition at line 85 of file TTreeViewer.h. ◆ fSession. TTVSession* TTreeViewer::fSession. private . Current tree-viewer session. ; Definition at line 77 of file TTreeViewer.h. ◆ fSlider. TGDoubleVSlider* TTreeViewer::fSlider. private . Vertical slider to select processed tree entries;. ; Definition at line 143 of file TTreeViewer.h. ◆ fSourceFile. const char* TTreeViewer::fSourceFile. private . Name of the C++ source file - default treeviewer.C. ; Definition at line 79 of file TTreeViewer.h. ◆ fSPIDER. TGTextButton* TTreeViewer::fSPIDER. private . SPIDER button. ; Definition at line 158 of file TTreeViewer.h. ◆ fStatusBar. TGStatusBar* TTreeViewer::fStatusBar. private . Status bar. ; Definition at line 161 of file TTreeViewer.h. ◆ fSTOP. TGPic,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:64656,clear,clear,64656,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['clear'],['clear']
Usability,"tureString == ""STANDARD"") {; 433 Log() << kERROR << ""The STANDARD architecture has been deprecated. ""; 434 ""Please use Architecture=CPU or Architecture=CPU.""; 435 ""See the TMVA Users' Guide for instructions if you ""; 436 ""encounter problems.""; 437 << Endl;; 438 Log() << kFATAL << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been implemented yet. ""; 452 ""Please use Architecture=CPU or Architecture=CPU for the ""; 453 ""time being. See the TMVA Users' Guide for instructions ""; 454 ""if you encounter problems.""; 455 << Endl;; 456 }; 457 ; 458 if (fArchitectureString == ""GPU"") {; 459#ifndef DNNCUDA // Included only if DNNCUDA flag is _not_ set.; 460 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 461 ""you have CUDA installed and it was successfully ""; 462 ""detected by CMAKE.""; 463 << Endl;; 464 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 465 ""you have CUDA installed and it was successfully ""; 466 ""detected by CMAKE.""; 467 << Endl;; 468#endif // DNNCUDA; 469 }; 470 ; 471 if (fArchitectureString == ""CPU"") {; 472#ifndef DNNCPU // Included only if DNNCPU flag is _not_ set.; 473 Log() << kERROR << ""Multi-core CPU backend not enabled. Please make sure ""; 474 ""you have a BLAS implementation and it was successfully ""; 475 ""detected by CMake as well that the imt CMake flag is set.""; 476 << Endl;; 477 Log() << kFATAL << ""Multi-core CPU backend not enabled. Please make sure ""; 478 ""you have a BLAS implementation and it was s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:15407,Guid,Guide,15407,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ture_t>; 388VGeneralLayer<Architecture_t>::~VGeneralLayer(); 389{; 390 // Nothing to do here.; 391}; 392 ; 393//_________________________________________________________________________________________________; 394template <typename Architecture_t>; 395auto VGeneralLayer<Architecture_t>::Initialize() -> void; 396{; 397 for (size_t i = 0; i < fWeights.size(); i++) {; 398 initialize<Architecture_t>(fWeights[i], this->GetInitialization());; 399 initialize<Architecture_t>(fWeightGradients[i], EInitialization::kZero);; 400 }; 401 ; 402 for (size_t i = 0; i < fBiases.size(); i++) {; 403 initialize<Architecture_t>(fBiases[i], EInitialization::kZero);; 404 initialize<Architecture_t>(fBiasGradients[i], EInitialization::kZero);; 405 }; 406}; 407 ; 408//_________________________________________________________________________________________________; 409template <typename Architecture_t>; 410auto VGeneralLayer<Architecture_t>::Update(const Scalar_t learningRate) -> void; 411{; 412 this->UpdateWeights(fWeightGradients, learningRate);; 413 this->UpdateBiases(fBiasGradients, learningRate);; 414}; 415 ; 416//_________________________________________________________________________________________________; 417template <typename Architecture_t>; 418auto VGeneralLayer<Architecture_t>::UpdateWeights(const std::vector<Matrix_t> &weightGradients,; 419 const Scalar_t learningRate) -> void; 420{; 421 for (size_t i = 0; i < fWeights.size(); i++) {; 422 Architecture_t::ScaleAdd(fWeights[i], weightGradients[i], -learningRate);; 423 }; 424}; 425 ; 426//_________________________________________________________________________________________________; 427template <typename Architecture_t>; 428auto VGeneralLayer<Architecture_t>::UpdateBiases(const std::vector<Matrix_t> &biasGradients,; 429 const Scalar_t learningRate) -> void; 430{; 431 for (size_t i = 0; i < fBiases.size(); i++) {; 432 Architecture_t::ScaleAdd(fBiases[i], biasGradients[i], -learningRate);; 433 }; 434}; 435 ; 436//_______________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:18759,learn,learningRate,18759,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,4,['learn'],['learningRate']
Usability,"turn false;; 3215}; 3216 ; 3217////////////////////////////////////////////////////////////////////////////////; 3218 ; 3219void ExtractHeadersForDecls(const RScanner::ClassColl_t &annotatedRcds,; 3220 const RScanner::TypedefColl_t tDefDecls,; 3221 const RScanner::FunctionColl_t funcDecls,; 3222 const RScanner::VariableColl_t varDecls,; 3223 const RScanner::EnumColl_t enumDecls,; 3224 HeadersDeclsMap_t &headersClassesMap,; 3225 HeadersDeclsMap_t &headersDeclsMap,; 3226 const cling::Interpreter &interp); 3227{; 3228 std::set<const clang::CXXRecordDecl *> visitedDecls;; 3229 std::unordered_set<std::string> buffer;; 3230 std::string autoParseKey;; 3231 ; 3232 // Add some manip of headers; 3233 for (auto & annotatedRcd : annotatedRcds) {; 3234 if (const clang::CXXRecordDecl *cxxRcd =; 3235 llvm::dyn_cast_or_null<clang::CXXRecordDecl>(annotatedRcd.GetRecordDecl())) {; 3236 autoParseKey = """";; 3237 visitedDecls.clear();; 3238 std::list<std::string> headers(RecordDecl2Headers(*cxxRcd, interp, visitedDecls));; 3239 // remove duplicates, also if not subsequent; 3240 buffer.clear();; 3241 headers.remove_if([&buffer](const std::string & s) {; 3242 return !buffer.insert(s).second;; 3243 });; 3244 GetMostExternalEnclosingClassName(*cxxRcd, autoParseKey, interp);; 3245 if (autoParseKey.empty()) autoParseKey = annotatedRcd.GetNormalizedName();; 3246 if (IsGoodForAutoParseMap(*cxxRcd)){; 3247 headersDeclsMap[autoParseKey] = headers;; 3248 headersDeclsMap[annotatedRcd.GetRequestedName()] = headers;; 3249 } else {; 3250 ROOT::TMetaUtils::Info(nullptr, ""Class %s is not included in the set of autoparse keys.\n"", autoParseKey.c_str());; 3251 }; 3252 ; 3253 // Propagate to the classes map only if this is not a template.; 3254 // The header is then used as autoload key and we want to avoid duplicates.; 3255 if (!llvm::isa<clang::ClassTemplateSpecializationDecl>(cxxRcd)){; 3256 headersClassesMap[autoParseKey] = headersDeclsMap[autoParseKey];; 3257 headersClassesMap[annotatedRcd.GetRequeste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:128543,clear,clear,128543,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['clear'],['clear']
Usability,"turn layerPatternData;; 1216}; 1217 ; 1218 ; 1219 ; 1220 template <typename LayerContainer>; 1221 void Net::forwardPattern (const LayerContainer& _layers,; 1222 std::vector<LayerData>& layerData) const; 1223 {; 1224 size_t idxLayer = 0, idxLayerEnd = _layers.size ();; 1225 for (; idxLayer < idxLayerEnd; ++idxLayer); 1226 {; 1227 LayerData& prevLayerData = layerData.at (idxLayer);; 1228 LayerData& currLayerData = layerData.at (idxLayer+1);; 1229 ; 1230 forward (prevLayerData, currLayerData);; 1231 ; 1232 applyFunctions (currLayerData.valuesBegin (), currLayerData.valuesEnd (), currLayerData.activationFunction ());; 1233 }; 1234 }; 1235 ; 1236 ; 1237 ; 1238 ; 1239 template <typename LayerContainer, typename LayerPatternContainer>; 1240 void Net::forwardBatch (const LayerContainer& _layers,; 1241 LayerPatternContainer& layerPatternData,; 1242 std::vector<double>& valuesMean,; 1243 std::vector<double>& valuesStdDev,; 1244 size_t trainFromLayer) const; 1245 {; 1246 valuesMean.clear ();; 1247 valuesStdDev.clear ();; 1248 ; 1249 // ---------------------------------- loop over layers and pattern -------------------------------------------------------; 1250 for (size_t idxLayer = 0, idxLayerEnd = layerPatternData.size (); idxLayer < idxLayerEnd-1; ++idxLayer); 1251 {; 1252 bool doTraining = idxLayer >= trainFromLayer;; 1253 ; 1254 // get layer-pattern data for this and the corresponding one from the next layer; 1255 std::vector<LayerData>& prevLayerPatternData = layerPatternData.at (idxLayer);; 1256 std::vector<LayerData>& currLayerPatternData = layerPatternData.at (idxLayer+1);; 1257 ; 1258 size_t numPattern = prevLayerPatternData.size ();; 1259 size_t numNodesLayer = _layers.at (idxLayer).numNodes ();; 1260 ; 1261 std::vector<MeanVariance> means (numNodesLayer);; 1262 // ---------------- loop over layerDatas of pattern compute forward ----------------------------; 1263 for (size_t idxPattern = 0; idxPattern < numPattern; ++idxPattern); 1264 {; 1265 const LayerData& prevLaye",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:40540,clear,clear,40540,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['clear'],['clear']
Usability,"turn nullptr;; 2301 }; 2302 // Change the volume for the new node; 2303 newnode->SetVolume(vol);; 2304 // Replace the matrix; 2305 if (newpos && !nodeorig->IsOffset()) {; 2306 TGeoNodeMatrix *nodemat = (TGeoNodeMatrix *)newnode;; 2307 nodemat->SetMatrix(newpos);; 2308 }; 2309 // Replace nodeorig with new one; 2310 fNodes->RemoveAt(ind);; 2311 fNodes->AddAt(newnode, ind);; 2312 if (fVoxels); 2313 fVoxels->SetNeedRebuild();; 2314 if (IsAssembly()); 2315 fShape->ComputeBBox();; 2316 return newnode;; 2317}; 2318 ; 2319////////////////////////////////////////////////////////////////////////////////; 2320/// Select this volume as matching an arbitrary criteria. The volume is added to; 2321/// a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need; 2322/// to be reset at the end by calling the method with CLEAR=true. This will also clear; 2323/// the list.; 2324 ; 2325void TGeoVolume::SelectVolume(Bool_t clear); 2326{; 2327 static TObjArray array(256);; 2328 static Int_t len = 0;; 2329 Int_t i;; 2330 TObject *vol;; 2331 if (clear) {; 2332 for (i = 0; i < len; i++) {; 2333 vol = array.At(i);; 2334 vol->ResetBit(TGeoVolume::kVolumeSelected);; 2335 }; 2336 array.Clear();; 2337 len = 0;; 2338 return;; 2339 }; 2340 SetBit(TGeoVolume::kVolumeSelected);; 2341 array.AddAtAndExpand(this, len++);; 2342}; 2343 ; 2344////////////////////////////////////////////////////////////////////////////////; 2345/// set visibility of this volume; 2346 ; 2347void TGeoVolume::SetVisibility(Bool_t vis); 2348{; 2349 TGeoAtt::SetVisibility(vis);; 2350 if (fGeoManager->IsClosed()); 2351 SetVisTouched(kTRUE);; 2352 fGeoManager->SetVisOption(4);; 2353 TSeqCollection *brlist = gROOT->GetListOfBrowsers();; 2354 TIter next(brlist);; 2355 TBrowser *browser = nullptr;; 2356 while ((browser = (TBrowser *)next())) {; 2357 browser->CheckObjectItem(this, vis);; 2358 browser->Refresh();; 2359 }; 2360}; 2361 ; 2362///////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:86344,clear,clear,86344,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,2,['clear'],['clear']
Usability,"turn the Hue, Light, Saturation (HLS) definition of this RColor */; 163 bool GetHLS(float &hue, float &light, float &satur) const;; 164 ; 165 /** Set the Red Green and Blue (RGB) values from the Hue, Light, Saturation (HLS). */; 166 void SetHLS(float hue, float light, float satur);; 167 ; 168 std::string AsHex(bool with_alpha = false) const;; 169 std::string AsSVG() const;; 170 ; 171 void Clear(); 172 {; 173 fColor.clear();; 174 }; 175 ; 176 static const RColor &AutoColor();; 177 ; 178 R__DLLEXPORT static constexpr RGB_t kBlack{{0, 0, 0}};; 179 R__DLLEXPORT static constexpr RGB_t kGreen{{0, 0x80, 0}};; 180 R__DLLEXPORT static constexpr RGB_t kLime{{0, 0xFF, 0}};; 181 R__DLLEXPORT static constexpr RGB_t kAqua{{0, 0xFF, 0xFF}};; 182 R__DLLEXPORT static constexpr RGB_t kPurple{{0x80, 0, 0x80}};; 183 R__DLLEXPORT static constexpr RGB_t kGrey{{0x80, 0x80, 0x80}};; 184 R__DLLEXPORT static constexpr RGB_t kFuchsia{{0xFF, 0, 0xFF}};; 185 R__DLLEXPORT static constexpr RGB_t kNavy{{0, 0, 0x80}};; 186 R__DLLEXPORT static constexpr RGB_t kBlue{{0, 0, 0xff}};; 187 R__DLLEXPORT static constexpr RGB_t kTeal{{0, 0x80, 0x80}};; 188 R__DLLEXPORT static constexpr RGB_t kOlive{{0x80, 0x80, 0}};; 189 R__DLLEXPORT static constexpr RGB_t kSilver{{0xc0, 0xc0, 0xc0}};; 190 R__DLLEXPORT static constexpr RGB_t kMaroon{{0x80, 0, 0}};; 191 R__DLLEXPORT static constexpr RGB_t kRed{{0xff, 0, 0}};; 192 R__DLLEXPORT static constexpr RGB_t kYellow{{0xff, 0xff, 0}};; 193 R__DLLEXPORT static constexpr RGB_t kWhite{{0xff, 0xff, 0xff}};; 194 R__DLLEXPORT static constexpr float kTransparent{0.};; 195 R__DLLEXPORT static constexpr float kSemiTransparent{0.5};; 196 R__DLLEXPORT static constexpr float kOpaque{1.};; 197 ; 198 friend bool operator==(const RColor &lhs, const RColor &rhs); 199 {; 200 if (lhs.fColor == rhs.fColor) return true;; 201 ; 202 auto l = lhs.AsRGBA();; 203 auto r = rhs.AsRGBA();; 204 ; 205 return !l.empty() && (l == r);; 206 }; 207};; 208 ; 209} // namespace Experimental; 210} // namesp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RColor_8hxx_source.html:5223,clear,clear,5223,doc/master/RColor_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RColor_8hxx_source.html,1,['clear'],['clear']
Usability,"turn the list of header files to include to be able to compile this rule as a TObjArray of TObjString. ;  ; ReadFuncPtr_t GetReadFunctionPointer () const;  Get the pointer to the function to be run for the rule (if it is a read rule). ;  ; ReadRawFuncPtr_t GetReadRawFunctionPointer () const;  Get the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; RuleType_t GetRuleType () const;  Return the type of the rule. ;  ; const TObjArray * GetSource () const;  Get the list of source members as a TObjArray of TNamed object, with the name being the member name and the title being its type. ;  ; const char * GetSourceClass () const;  Get the source class of this rule (i.e. the onfile class). ;  ; const TObjArray * GetTarget () const;  Get the target data members of this rule (i.e. the in memory data member). ;  ; const char * GetTargetClass () const;  Get the targte class of this rule (i.e. the in memory class). ;  ; const char * GetTargetString () const;  Get the target data members of this rule as a simple string (i.e. the in memory data member). ;  ; const char * GetVersion () const;  Get the version string. ;  ; Bool_t HasSource (const TString &source) const;  Return true if one of the rule's data member source is 'source'. ;  ; Bool_t HasTarget (const TString &target) const;  Return true if one of the rule's data member target is 'target'. ;  ; TClass * IsA () const override;  ; Bool_t IsAliasRule () const;  Return kTRUE if the rule is a strict renaming of one of the data member of the class. ;  ; Bool_t IsRenameRule () const;  Return kTRUE if the rule is a strict renaming of the class to a new name. ;  ; Bool_t IsValid () const;  Return kTRUE if this rule is valid. ;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; TSchemaRule & operator= (const TSchemaRule &rhs);  Copy operator. ;  ; Bool_t operator== (const TSchemaRule &rhs) const;  Return true if the rule have the same effect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:3101,simpl,simple,3101,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,2,['simpl'],['simple']
Usability,"turning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 627 of file RooRealSumPdf.cxx. ◆ plotSamplingHint() [2/2]. std::list< double > * RooRealSumPdf::plotSamplingHint ; (; RooArgList const & ; funcList, . RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ). staticprivate . Definition at line 633 of file RooRealSumPdf.cxx. ◆ printMetaArgs() [1/2]. void RooRealSumPdf::printMetaArgs ; (; RooArgList const & ; funcList, . RooArgList const & ; coefList, . std::ostream & ; os . ). staticprivate . Definition at line 706 of file RooRealSumPdf.cxx. ◆ printMetaArgs() [2/2]. void RooRealSumPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 700 of file RooRealSumPdf.cxx. ◆ selfNormalized(). bool RooRealSumPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooRealSumPdf.h. ◆ setCacheAndTrackHints() [1/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgList const & ; funcList, . RooArgSet & ; trackNodes . ). staticprivate . Definition at line 686 of file RooRealSumPdf.cxx. ◆ setCacheAndTrackHints() [2/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooRealSumPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 680 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumPdf.html:89113,intuit,intuitively,89113,doc/master/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/master/classRooRealSumPdf.html,1,['intuit'],['intuitively']
Usability,"turning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 632 of file RooRealSumPdf.cxx. ◆ plotSamplingHint() [2/2]. std::list< double > * RooRealSumPdf::plotSamplingHint ; (; RooArgList const & ; funcList, . RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ). staticprivate . Definition at line 637 of file RooRealSumPdf.cxx. ◆ printMetaArgs() [1/2]. void RooRealSumPdf::printMetaArgs ; (; RooArgList const & ; funcList, . RooArgList const & ; coefList, . std::ostream & ; os . ). staticprivate . Definition at line 714 of file RooRealSumPdf.cxx. ◆ printMetaArgs() [2/2]. void RooRealSumPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 708 of file RooRealSumPdf.cxx. ◆ selfNormalized(). bool RooRealSumPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooRealSumPdf.h. ◆ setCacheAndTrackHints() [1/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgList const & ; funcList, . RooArgSet & ; trackNodes . ). staticprivate . Definition at line 693 of file RooRealSumPdf.cxx. ◆ setCacheAndTrackHints() [2/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooRealSumPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 687 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:90234,intuit,intuitively,90234,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,1,['intuit'],['intuitively']
Usability,turns const iterator to the end of the gradients; 602 ; 603 iterator_type gradientsBegin () { assert (m_hasGradients); return m_itGradientBegin; } ///< returns iterator to the begin of the gradients; 604 const_iterator_type gradientsBegin () const { assert (m_hasGradients); return m_itGradientBegin; } ///< returns const iterator to the begin of the gradients; 605 const_iterator_type weightsBegin () const { assert (m_hasWeights); return m_itConstWeightBegin; } ///< returns const iterator to the begin of the weights for this layer; 606 ; 607 std::shared_ptr<std::function<double(double)>> activationFunction () const { return m_activationFunction; }; 608 std::shared_ptr<std::function<double(double)>> inverseActivationFunction () const { return m_inverseActivationFunction; }; 609 ; 610 /*! \brief set the drop-out info for this layer; 611 *; 612 */; 613 template <typename Iterator>; 614 void setDropOut (Iterator itDrop) { m_itDropOut = itDrop; m_hasDropOut = true; }; 615 ; 616 /*! \brief clear the drop-out-data for this layer; 617 *; 618 *; 619 */; 620 void clearDropOut () { m_hasDropOut = false; }; 621 ; 622 bool hasDropOut () const { return m_hasDropOut; } ///< has this layer drop-out turned on?; 623 const_dropout_iterator dropOut () const { assert (m_hasDropOut); return m_itDropOut; } ///< return the begin of the drop-out information; 624 ; 625 size_t size () const { return m_size; } ///< return the size of the layer; 626 ; 627 private:; 628 ; 629 /*! \brief compute the probabilities from the node values; 630 *; 631 *; 632 */; 633 container_type computeProbabilities () const;; 634 ; 635 private:; 636 ; 637 size_t m_size; ////< layer size; 638 ; 639 const_iterator_type m_itInputBegin; ///< iterator to the first of the nodes in the input node vector; 640 const_iterator_type m_itInputEnd; ///< iterator to the end of the nodes in the input node vector; 641 ; 642 std::vector<double> m_deltas; ///< stores the deltas for the DNN training; 643 std::vector<double> m_valueGradie,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:21134,clear,clear,21134,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['clear'],['clear']
Usability,"turnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::PDEFoamKernelTrivial::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamKernelTrivial::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 50 of file PDEFoamKernelTrivial.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamKernelTrivial::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 50 of file PDEFoamKernelTrivial.h. ◆ Estimate(). Float_t TMVA::PDEFoamKernelTrivial::Estimate ; (; PDEFoam * ; foam, . std::vector< Float_t > & ; txvec, . ECellValue ; cv . ). virtual . Simple kernel estimator. ; It returns the cell value 'cv', corresponding to the event vector 'txvec' (in foam coordinates).; Parameters:. foam - the pdefoam to search in; txvec - event vector in foam coordinates [0,1]; cv - cell value to estimate . Implements TMVA::PDEFoamKernelBase.; Definition at line 75 of file PDEFoamKernelTrivial.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamKernelTrivial::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamKernelBase.; Definition at line 50 of file PDEFoamKernelTrivial.h. ◆ Streamer(). virtual void TMVA::PDEFoamKernelTrivial::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamKernelBase. ◆ StreamerNVirtual(). void TMVA::PDEFoamKernelTrivial::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file PDEFoamKernelTrivial.h. Libraries for TMVA::PDEFoamKernelTrivial:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamKernelTrivial.h; tmva/tmva/src/PDEFoamKernelTrivial.cxx. TMVAPDEFoamKernelTrivial. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html:13623,Guid,Guide,13623,doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,1,['Guid'],['Guide']
Usability,"tus (const RooArgSet &set, bool active)=0;  ; virtual void setDirtyProp (bool flag);  ; virtual void setExternalWeightArray (const double *, const double *, const double *, const double *);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual double sumEntries () const;  ; virtual const TTree * tree () const;  ; virtual double weight () const =0;  ; double weight (Int_t index) const;  ; virtual void weightError (double &lo, double &hi, RooAbsData::ErrorType etype=RooAbsData::Poisson) const =0;  ; virtual double weightError (RooAbsData::ErrorType etype=RooAbsData::Poisson) const =0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsDataStore.html:4849,Clear,Clear,4849,doc/master/classRooAbsDataStore.html,https://root.cern,https://root.cern/doc/master/classRooAbsDataStore.html,1,['Clear'],['Clear']
Usability,"tus of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Minuit2/Minuit2Minimizer.h>. Inheritance diagram for ROOT::Minuit2::Minuit2Minimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Minuit2Minimizer() [1/2]. ROOT::Minuit2::Minuit2Minimizer::Minuit2Minimizer ; (; ROOT::Minuit2::EMinimizerType ; type = ROOT::Minuit2::kMigrad). Default constructor. ; Definition at line 86 of file Minuit2Minimizer.cxx. ◆ Minuit2Minimizer() [2/2]. ROOT::Minuit2::Minuit2Minimizer::Minuit2Minimizer ; (; const char * ; type). Constructor with a char (used by PM) ; Definition at line 93 of file Minuit2Minimizer.cxx. ◆ ~Minuit2Minimizer(). ROOT::Minuit2::Minuit2Minimizer::~Minuit2Minimizer ; (; ). override . Destructor (no operations) ; Definition at line 145 of file Minuit2Minimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Minuit2::Minuit2Minimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 156 of file Minuit2Minimizer.cxx. ◆ Contour(). bool ROOT::Minuit2::Minuit2Minimizer::Contour ; (; unsigned int ; i, . unsigned int ; j, . unsigned int & ; npoints, . double * ; xi, . double * ; xj . ). overridevirtual . find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1148 of file Minuit2Minimizer.cxx. ◆ Correlation(). double ROOT::Minuit2::Minuit2Minimizer::Correlation ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return correlation coefficient between variable i and j. ; If the variable is fixed or const the return value is zero ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 81",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:13142,Clear,Clear,13142,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['Clear'],['Clear']
Usability,"tus; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionQueryFrame.html:21474,progress bar,progress bar,21474,root/html534/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html534/TSessionQueryFrame.html,1,['progress bar'],['progress bar']
Usability,"tus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle but",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressDialog.html:3853,progress bar,progress bar,3853,root/html602/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html602/TProofProgressDialog.html,2,['progress bar'],['progress bar']
Usability,"tus=kIdle, TProof *p=0);  ;  ~TProofDesc () override;  ; Int_t GetLocalId () const;  ; TProof * GetProof () const;  ; Int_t GetRemoteId () const;  ; Int_t GetStatus () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; Bool_t IsIdle () const;  ; Bool_t IsRunning () const;  ; Bool_t IsShuttingDown () const;  ; Bool_t MatchId (Int_t id) const;  ; void Print (Option_t *opt="""") const override;  Dump the content to the screen. ;  ; void SetProof (TProof *p);  ; void SetRemoteId (Int_t id);  ; void SetStatus (Int_t st);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDesc.html:2198,Clear,Clear,2198,doc/master/classTProofDesc.html,https://root.cern,https://root.cern/doc/master/classTProofDesc.html,1,['Clear'],['Clear']
Usability,"tusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TGTextEditCommand:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGTextEditCommand(). TGTextEditCommand::TGTextEditCommand ; (; TGTextEdit * ; te). inline . Definition at line 87 of file TGTextEdit.cxx. Member Function Documentation. ◆ SetPos(). void TGTextEditCommand::SetPos ; (; TGLongPosition ; pos). inline . Definition at line 91 of file TGTextEdit.cxx. Member Data Documentation. ◆ fEdit. TGTextEdit* TGTextEditCommand::fEdit. protected . Definition at line 83 of file TGTextEdit.cxx. ◆ fPos. TGLongPosition TGTextEditCommand::fPos. protected . Definition at line 84 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TGTextEditCommand. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditCommand.html:10407,Guid,Guide,10407,doc/master/classTGTextEditCommand.html,https://root.cern,https://root.cern/doc/master/classTGTextEditCommand.html,1,['Guid'],['Guide']
Usability,"tute some operators"");; TText *t3 = psub->AddText(""to C++ style"");; TPaveLabel *panal = new TPaveLabel(0.73,0.42,0.98,0.58,""Analyze"");; panal->SetTextSize(0.40);; panal->SetFillColor(42);; panal->Draw();; TArrow *ar1 = new TArrow(0.2,0.5,0.27,0.5,0.02,""|>"");; ar1->SetLineWidth(6);; ar1->SetLineColor(4);; ar1->Draw();; TArrow *ar2 = new TArrow(0.65,0.5,0.72,0.5,0.02,""|>"");; ar2->SetLineWidth(6);; ar2->SetLineColor(4);; ar2->Draw();; }; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TArrow::Drawvoid Draw(Option_t *option="""") overrideDraw this arrow with its current attributes.Definition TArrow.cxx:120; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file compile.C. tutorialsgraphicscompile.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/compile_8C.html:2492,Guid,Guide,2492,doc/master/compile_8C.html,https://root.cern,https://root.cern/doc/master/compile_8C.html,1,['Guid'],['Guide']
Usability,"tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst)TGraphMultiErrors; TGraphMultiErrors(const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst)TGraphMultiErrors; TGraphMultiErrors(Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst)TGraphMultiErrors; TGraphMultiErrors(Int_t ne, const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst)TGraphMultiErrors; TGraphMultiErrors(const TGraphMultiErrors &tgme)TGraphMultiErrors; TGraphMultiErrors(const TH1 *th, Int_t ne=1)TGraphMultiErrors; TGraphMultiErrors(const TH1 *pass, const TH1 *total, Int_t ne=1, Option_t *option="""")TGraphMultiErrors; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideTGraphMultiErrorsprotectedvirtual; UseCurrentStyle() overrideTGraphvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; Zero(Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations)TGraph; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TGraph() overrideTGraph; ~TGraphMultiErrors() overrideTGraphMultiErrors; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors-members.html:23500,Guid,Guide,23500,doc/master/classTGraphMultiErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors-members.html,1,['Guid'],['Guide']
Usability,"two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  twoscales.py Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  custom.CThis program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons ;  histfitserver.CThis program demonstrates simultaneous update of histogram and fitted function ;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ws.C;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:126679,simpl,simple,126679,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['simpl'],['simple']
Usability,"two histograms. ; To be called at the end of the MC run. ; Definition at line 120 of file TFoamMaxwt.cxx. ◆ IsA(). TClass * TFoamMaxwt::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 32 of file TFoamMaxwt.h. ◆ Make(). void TFoamMaxwt::Make ; (; Double_t ; eps, . Double_t & ; MCeff . ). Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 To be called at the end of the MC run. ; Definition at line 104 of file TFoamMaxwt.cxx. ◆ operator=(). TFoamMaxwt & TFoamMaxwt::operator= ; (; const TFoamMaxwt & ; From). substitution = ; Definition at line 80 of file TFoamMaxwt.cxx. ◆ Reset(). void TFoamMaxwt::Reset ; (; ). Resetting weight analysis. ; Definition at line 70 of file TFoamMaxwt.cxx. ◆ Streamer(). void TFoamMaxwt::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFoamMaxwt::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 32 of file TFoamMaxwt.h. Member Data Documentation. ◆ fnBin. Int_t TFoamMaxwt::fnBin. private . No. of bins on the weight distribution. ; Definition at line 15 of file TFoamMaxwt.h. ◆ fNent. Double_t TFoamMaxwt::fNent. private . No. of MC events. ; Definition at line 14 of file TFoamMaxwt.h. ◆ fwmax. Double_t TFoamMaxwt::fwmax. private . Maximum analyzed weight. ; Definition at line 16 of file TFoamMaxwt.h. ◆ fWtHst1. TH1D* TFoamMaxwt::fWtHst1. Histogram of the weight wt. ; Definition at line 18 of file TFoamMaxwt.h. ◆ fWtHst2. TH1D* TFoamMaxwt::fWtHst2. Histogram of wt filled with wt. ; Definition at line 19 of file TFoamMaxwt.h. Libraries for TFoamMaxwt:. [legend]; The documentation for this class was generated from the following files:; math/foam/inc/TFoamMaxwt.h; math/foam/src/TFoamMaxwt.cxx. TFoamMaxwt. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamMaxwt.html:14738,Guid,Guide,14738,doc/master/classTFoamMaxwt.html,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html,1,['Guid'],['Guide']
Usability,"two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:4254,learn,learning,4254,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,"ty () const;  ; const char * ParticleClass () const;  ; Int_t PdgCode () const;  ; void Print (Option_t *opt="""") const override;  Print the entire information of this kind of particle. ;  ; virtual void PrintDecayChannel (TDecayChannel *dc, Option_t *opt="""") const;  print the list of decays ;  ; void SetAntiParticle (TParticlePDG *ap);  ; Double_t Spin () const;  ; Int_t Stable () const;  ; Int_t Strangeness () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Top () const;  ; Int_t TrackingCode () const;  ; Double_t Width () const;  ; Int_t X () const;  ; Int_t Y () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticlePDG.html:3262,Clear,Clear,3262,doc/master/classTParticlePDG.html,https://root.cern,https://root.cern/doc/master/classTParticlePDG.html,1,['Clear'],['Clear']
Usability,"ty ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 429 of file TInterpreter.h. ◆ ClassInfo_Size(). virtual int TInterpreter::ClassInfo_Size ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 430 of file TInterpreter.h. ◆ ClassInfo_Tagnum(). virtual Longptr_t TInterpreter::ClassInfo_Tagnum ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 431 of file TInterpreter.h. ◆ ClassInfo_Title(). virtual const char * TInterpreter::ClassInfo_Title ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 435 of file TInterpreter.h. ◆ ClassInfo_TmpltName(). virtual const char * TInterpreter::ClassInfo_TmpltName ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 436 of file TInterpreter.h. ◆ ClearFileBusy(). virtual void TInterpreter::ClearFileBusy ; (; ). pure virtual . Implemented in TCling. ◆ ClearStack(). virtual void TInterpreter::ClearStack ; (; ). pure virtual . Implemented in TCling. ◆ CodeComplete(). virtual void TInterpreter::CodeComplete ; (; const std::string & ; , . size_t & ; , . std::vector< std::string > & ;  . ). inlinevirtual . Reimplemented in TCling.; Definition at line 279 of file TInterpreter.h. ◆ CreateEnum(). virtual TEnum * TInterpreter::CreateEnum ; (; void * ; VD, . TClass * ; cl . ); const. pure virtual . Implemented in TCling. ◆ CreateListOfBaseClasses(). virtual void TInterpreter::CreateListOfBaseClasses ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ CreateListOfDataMembers(). virtual void TInterpreter::CreateListOfDataMembers ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ CreateListOfMethodArgs(). virtual void TInterpreter::CreateListOfMethodArgs ; (; TFunction * ; m); const. pure virtual . Implemented in TCling. ◆ CreateListOfMethods(). virtual void TInterpreter::CreateListOfMethods ; (; TClass * ; cl); const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:58259,Clear,ClearStack,58259,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Clear'],['ClearStack']
Usability,"ty greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer) const; Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& ); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Ssiz_t GetInitialCapacity(). Ssiz_t GetResizeIncrement(). Ssiz_t GetMaxWaste(). Ssiz_t InitialCapacity(Ssiz_t ic = 15); Set default initial capacity for all TStrings. Default is 15. Ssiz_t ResizeIncrement(Ssiz_t ri = 16); Set default resize increment for all TStrings. Default is 16. Ssiz_t MaxWaste(Ssiz_t mw = 15); Set maximum space that may be wasted in a string before doing a resize.; Default is 15. TSubString operator()(Ssiz_t start, Ssiz_t len) const; Return sub-string of string starting at start with length len. TSubString SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; Returns a substring matching ""pattern"", or the null substring; if there is no such match. It would be nice if this could be yet another; overloaded version of operator(), but this would result in a type; conversion ambiguity with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TString.html:14362,Simpl,Simplified,14362,root/html534/TString.html,https://root.cern,https://root.cern/root/html534/TString.html,3,['Simpl'],['Simplified']
Usability,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:10059,clear,clear,10059,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,2,"['Clear', 'clear']","['ClearFunctions', 'clear']"
Usability,"tyle format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; ptTPaveText * ptDefinition entrylist_figure1.C:7; lineTLine * lineDefinition entrylistblock_figure1.C:235; yDouble_t y[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; f1TF1 * f1Definition legend1.C:11; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ASinDouble_t ASin(Double_t)Returns the principal value of the arc sine of x, expressed in radians.Definition TMath.h:624; TMath::ATanDouble_t ATan(Double_t)Returns the principal value of the arc tangent of x, expressed in radians.Definition TMath.h:640; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; ahDefinition civetweb.c:8348; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. mathminuitsrcTMinuit.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:278589,Guid,Guide,278589,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['Guid'],['Guide']
Usability,"tyle settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TMVA::IFitterTarget;  IFitterTarget ();  constructor ;  ; virtual ~IFitterTarget ();  ; virtual void ProgressNotifier (TString, TString);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::ConvergenceTest;  ConvergenceTest ();  constructor ;  ;  ~ConvergenceTest ();  destructor ;  ; Float_t GetCurrentValue ();  ; Bool_t HasConverged (Bool_t withinConvergenceBand=kFALSE);  gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ;  ; Float_t Progress ();  returns a float from 0 (just started) to 1 (finished) ;  ; void ResetConvergenceCounter ();  ; void SetConvergenceParameters (Int_t steps, Double_t improvement);  ; void SetCurrentValue (Float_t value);  ; Float_t SpeedControl (UInt_t ofSteps);  this function provides the ability to change the learning rate according to the success of the last generations. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodANNBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:25076,learn,learning,25076,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['learn'],['learning']
Usability,"tyleComboBox ; (; const TGWindow * ; p = nullptr, . Int_t ; id = -1, . UInt_t ; options = kHorizontalFrame | kSunkenFrame | kDoubleBorder, . Pixel_t ; back = GetWhitePixel() . ). Create a line style combo box. ; Definition at line 753 of file TGComboBox.cxx. Member Function Documentation. ◆ Class(). static TClass * TGLineStyleComboBox::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLineStyleComboBox::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLineStyleComboBox::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 149 of file TGComboBox.h. ◆ DeclFileName(). static const char * TGLineStyleComboBox::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 149 of file TGComboBox.h. ◆ IsA(). TClass * TGLineStyleComboBox::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGComboBox.; Definition at line 149 of file TGComboBox.h. ◆ SavePrimitive(). void TGLineStyleComboBox::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a line style combo box widget as a C++ statement(s). ; Reimplemented from TGComboBox.; Definition at line 774 of file TGComboBox.cxx. ◆ Streamer(). void TGLineStyleComboBox::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGComboBox. ◆ StreamerNVirtual(). void TGLineStyleComboBox::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 149 of file TGComboBox.h. Libraries for TGLineStyleComboBox:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGComboBox.h; gui/gui/src/TGComboBox.cxx. TGLineStyleComboBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLineStyleComboBox.html:37840,Guid,Guide,37840,doc/master/classTGLineStyleComboBox.html,https://root.cern,https://root.cern/doc/master/classTGLineStyleComboBox.html,1,['Guid'],['Guide']
Usability,"tyle_t style)Definition RooGlobalFunc.cxx:240; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOT::Math::fabsVecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > fabs(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:131; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; fit1Definition fit1.py:1; rf609_xychi2fitDefinition rf609_xychi2fit.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 1.17354, estimated distance to minimum: 3.83787e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a -6.4539e-02 +/- 5.85e-01; b 2.9760e-01 +/- 4.74e-01; c 1.0442e+00 +/- 9.06e-02; ; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 2.81819, estimated distance to minimum: 5.77434e-06; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a -5.5529e-02 +/- 3.37e-01; b 3.6741e-02 +/- 4.64e-01; c 1.0407e+00 +/- 4.98e-02; ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf609_xychi2fit.C. tutorialsroofitrf609_xychi2fit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf609__xychi2fit_8C.html:6821,Guid,Guide,6821,doc/master/rf609__xychi2fit_8C.html,https://root.cern,https://root.cern/doc/master/rf609__xychi2fit_8C.html,1,['Guid'],['Guide']
Usability,"type &key) constDefinition TClass.cxx:390; ROOT::TMapTypeToTClass::size_typeIdMap_t::size_type size_typeDefinition TClass.cxx:373; ROOT::TMapTypeToTClass::mapped_typeIdMap_t::mapped_type mapped_typeDefinition TClass.cxx:378; ROOT::TMapTypeToTClass::const_iteratorIdMap_t::const_iterator const_iteratorDefinition TClass.cxx:372; ROOT::TMapTypeToTClass::IdMap_tstd::map< std::string, TClass * > IdMap_tDefinition TClass.cxx:370; ROOT::TMapTypeToTClass::key_typeIdMap_t::key_type key_typeDefinition TClass.cxx:371; ROOT::TMapTypeToTClass::Removevoid Remove(const key_type &key)Definition TClass.cxx:398; ROOT::TMapTypeToTClass::Addvoid Add(const key_type &key, mapped_type &obj)Definition TClass.cxx:385; ROOT::TSchemaRuleDefinition TSchemaRule.h:20; ROOT::TSchemaRule::SetFromRuleBool_t SetFromRule(const char *rule)Set the content fot this object from the rule See TClass::AddRule for details on the syntax.Definition TSchemaRule.cxx:321; ROOT::TSchemaRule::GetTargetStringconst char * GetTargetString() constGet the target data members of this rule as a simple string (i.e. the in memory data member).Definition TSchemaRule.cxx:512; ROOT::TSchemaRule::GetVersionconst char * GetVersion() constGet the version string.Definition TSchemaRule.cxx:393; ROOT::TSchemaRule::GetTargetClassconst char * GetTargetClass() constGet the targte class of this rule (i.e. the in memory class).Definition TSchemaRule.cxx:484; TArray::Classstatic TClass * Class(); TAutoInspectorDefinition TClass.cxx:901; TAutoInspector::fBrowserTBrowser * fBrowserDefinition TClass.cxx:904; TAutoInspector::IsTreatingNonAccessibleTypesBool_t IsTreatingNonAccessibleTypes() overrideDefinition TClass.cxx:914; TAutoInspector::TAutoInspectorTAutoInspector(TBrowser *b)Definition TClass.cxx:906; TAutoInspector::~TAutoInspectorvirtual ~TAutoInspector()Definition TClass.cxx:911; TAutoInspector::fCountInt_t fCountDefinition TClass.cxx:903; TAutoInspector::Inspectvoid Inspect(TClass *cl, const char *parent, const char *name, const void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:302475,simpl,simple,302475,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,"type &key) constDefinition TClass.cxx:390; ROOT::TMapTypeToTClass::size_typeIdMap_t::size_type size_typeDefinition TClass.cxx:373; ROOT::TMapTypeToTClass::mapped_typeIdMap_t::mapped_type mapped_typeDefinition TClass.cxx:378; ROOT::TMapTypeToTClass::const_iteratorIdMap_t::const_iterator const_iteratorDefinition TClass.cxx:372; ROOT::TMapTypeToTClass::IdMap_tstd::map< std::string, TClass * > IdMap_tDefinition TClass.cxx:370; ROOT::TMapTypeToTClass::key_typeIdMap_t::key_type key_typeDefinition TClass.cxx:371; ROOT::TMapTypeToTClass::Removevoid Remove(const key_type &key)Definition TClass.cxx:398; ROOT::TMapTypeToTClass::Addvoid Add(const key_type &key, mapped_type &obj)Definition TClass.cxx:385; ROOT::TSchemaRuleDefinition TSchemaRule.h:20; ROOT::TSchemaRule::SetFromRuleBool_t SetFromRule(const char *rule)Set the content fot this object from the rule See TClass::AddRule for details on the syntax.Definition TSchemaRule.cxx:321; ROOT::TSchemaRule::GetTargetStringconst char * GetTargetString() constGet the target data members of this rule as a simple string (i.e. the in memory data member).Definition TSchemaRule.cxx:512; ROOT::TSchemaRule::GetVersionconst char * GetVersion() constGet the version string.Definition TSchemaRule.cxx:393; ROOT::TSchemaRule::GetTargetClassconst char * GetTargetClass() constGet the targte class of this rule (i.e. the in memory class).Definition TSchemaRule.cxx:484; TArray::Classstatic TClass * Class(); TAutoInspectorDefinition TClass.cxx:968; TAutoInspector::fBrowserTBrowser * fBrowserDefinition TClass.cxx:971; TAutoInspector::IsTreatingNonAccessibleTypesBool_t IsTreatingNonAccessibleTypes() overrideDefinition TClass.cxx:981; TAutoInspector::TAutoInspectorTAutoInspector(TBrowser *b)Definition TClass.cxx:973; TAutoInspector::~TAutoInspectorvirtual ~TAutoInspector()Definition TClass.cxx:978; TAutoInspector::fCountInt_t fCountDefinition TClass.cxx:970; TAutoInspector::Inspectvoid Inspect(TClass *cl, const char *parent, const char *name, const void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:305113,simpl,simple,305113,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,"type, . const RooArgSet * ; auxProto, . bool ; verbose . ); const. overridevirtual . Return specialized generator context for RooEffProds that implements generation in a more efficient way than can be done for generic correlated products. ; Reimplemented from RooAbsPdf.; Definition at line 66 of file RooEffProd.cxx. ◆ IsA(). TClass * RooEffProd::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 41 of file RooEffProd.h. ◆ Streamer(). void RooEffProd::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooEffProd::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file RooEffProd.h. ◆ translate(). void RooEffProd::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overrideprotectedvirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 75 of file RooEffProd.cxx. Member Data Documentation. ◆ _eff. RooRealProxy RooEffProd::_eff. protected . Efficiency function. ; Definition at line 39 of file RooEffProd.h. ◆ _pdf. RooRealProxy RooEffProd::_pdf. protected . Probability Density function. ; Definition at line 38 of file RooEffProd.h. Libraries for RooEffProd:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:76514,simpl,simple,76514,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['simpl'],['simple']
Usability,"typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TApplicationRemote.h>. Inheritance diagram for TARInterruptHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TARInterruptHandler(). TARInterruptHandler::TARInterruptHandler ; (; TApplicationRemote * ; r). inline . Definition at line 127 of file TApplicationRemote.h. Member Function Documentation. ◆ Notify(). Bool_t TARInterruptHandler::Notify ; (; ). overridevirtual . TApplicationRemote interrupt handler. ; Implements TSysEvtHandler.; Definition at line 48 of file TApplicationRemote.cxx. Member Data Documentation. ◆ fApplicationRemote. TApplicationRemote* TARInterruptHandler::fApplicationRemote. private . Definition at line 125 of file TApplicationRemote.h. Libraries for TARInterruptHandler:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TApplicationRemote.h; net/net/src/TApplicationRemote.cxx. TARInterruptHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTARInterruptHandler.html:16847,Guid,Guide,16847,doc/master/classTARInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTARInterruptHandler.html,1,['Guid'],['Guide']
Usability,"t|dterr) on dt.; #; # Instead of integrating out dterr, a weighted average of curves; # at values dterr_i as given in the external dataset.; # (The kTRUE argument bins the data before projection to speed up the process); decay_gm.plotOn(frame2, ProjWData=(expDataDterr, True)); ; # Draw all frames on canvas; c = ROOT.TCanvas(""rf306_condpereventerrors"", ""rf306_condperventerrors"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.20); hh_decay.GetZaxis().SetTitleOffset(2.5); hh_decay.Draw(""surf""); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.6); frame.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.6); frame2.Draw(); ; c.SaveAs(""rf306_condpereventerrors.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_over_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_over_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt]_decay_gmData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt,dterr]) using numeric integrator RooIntegrator1D to calculate Int(dterr); [#1] INFO:Plotting -- RooAbsReal::plotOn(decay_gm) plot on dt averages using data variables (dterr); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf306_condpereventerrors.py. tutorialsroofitrf306_condpereventerrors.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf306__condpereventerrors_8py.html:4617,Guid,Guide,4617,doc/master/rf306__condpereventerrors_8py.html,https://root.cern,https://root.cern/doc/master/rf306__condpereventerrors_8py.html,1,['Guid'],['Guide']
Usability,"t ; , . n ; , . 1 ;  . ). ◆ VOID_METHOD_ARG4() [5/5]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char VOID_METHOD_ARG4 ; (; VirtualX ; , . SetRGB ; , . Int_t ; , . cindex ; , . Float_t ; , . r ; , . Float_t ; , . g ; , . Float_t ; , . b ; , . 1 ;  . ). ◆ VOID_METHOD_ARG5() [1/4]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t VOID_METHOD_ARG5 ; (; VirtualX ; , . ChangeProperty ; , . Window_t ; , . id ; , . Atom_t ; , . property ; , . Atom_t ; , . type ; , . UChar_t * ; , . data ; , . Int_t ; , . len ; , . 1 ;  . ). ◆ VOID_METHOD_ARG5() [2/4]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t VOID_METHOD_ARG5 ; (; VirtualX ; , . ClearArea ; , . Window_t ; , . id ; , . Int_t ; , . x ; , . Int_t ; , . y ; , . UInt_t ; , . w ; , . UInt_t ; , . h ; , . 1 ;  . ). ◆ VOID_METHOD_ARG5() [3/4]. Option_t Option_t TPoint TPoint VOID_METHOD_ARG5 ; (; VirtualX ; , . DrawBox ; , . Int_t ; , . x1 ; , . Int_t ; , . y1 ; , . Int_t ; , . x2 ; , . Int_t ; , . y2 ; , . TVirtualX::EBoxMode ; , . mode ; , . 1 ;  . ). ◆ VOID_METHOD_ARG5() [4/4]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t VOID_METHOD_ARG5 ; (; VirtualX ; , . GetGeometry ; , . Int_t ; , . wid ; , . Int_t & ; , . x ; , . Int_t & ; , . y ; , . UInt_t & ; , . w ; , . UInt_t & ; , . h ; , . 1 ;  . ). ◆ VOID_METHOD_ARG6() [1/3]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG6 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:142681,Clear,ClearArea,142681,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['Clear'],['ClearArea']
Usability,"t ; back = GetWhitePixel() . ). Create a text edit widget. Initialize it with the specified string. ; Definition at line 267 of file TGTextEdit.cxx. ◆ ~TGTextEdit(). TGTextEdit::~TGTextEdit ; (; ). override . Cleanup text edit widget. ; Definition at line 278 of file TGTextEdit.cxx. Member Function Documentation. ◆ AdjustPos(). void TGTextEdit::AdjustPos ; (; ). protectedvirtual . Adjust current position. ; Definition at line 907 of file TGTextEdit.cxx. ◆ BreakLine(). void TGTextEdit::BreakLine ; (; ). virtual . Break a line. ; Definition at line 1906 of file TGTextEdit.cxx. ◆ Class(). static TClass * TGTextEdit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextEdit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextEdit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 133 of file TGTextEdit.h. ◆ Clear(). void TGTextEdit::Clear ; (; Option_t * ; = """"). overridevirtual . Clear text edit widget. ; Reimplemented from TObject.; Definition at line 382 of file TGTextEdit.cxx. ◆ Closed(). virtual void TGTextEdit::Closed ; (; ). inlinevirtual . Definition at line 126 of file TGTextEdit.h. ◆ Copy() [1/2]. Bool_t TGTextEdit::Copy ; (; ). overridevirtual . Copy text. ; Reimplemented from TGTextView.; Definition at line 422 of file TGTextEdit.cxx. ◆ Copy() [2/2]. void TGTextEdit::Copy ; (; TObject & ; object); const. inlineoverrideprotectedvirtual . Copy this to obj. ; Reimplemented from TObject.; Definition at line 60 of file TGTextEdit.h. ◆ CursorOff(). void TGTextEdit::CursorOff ; (; ). protectedvirtual . If cursor if on, turn it off. ; Definition at line 790 of file TGTextEdit.cxx. ◆ CursorOn(). void TGTextEdit::CursorOn ; (; ). protectedvirtual . Turn cursor on. ; Definition at line 801 of file TGTextEdit.cxx. ◆ Cut(). Bool_t TGTextEdit::Cut ; (; ). virtual . Cut text. ; Definition at line 448 of file TGTextEdit.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:49203,Clear,Clear,49203,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['Clear'],['Clear']
Usability,"t ; nbinsx, . const double * ; xbins, . int ; nbinsy, . const double * ; ybins . ). Definition at line 141 of file RDFHistoModels.cxx. ◆ TH2DModel() [8/8]. ROOT::RDF::TH2DModel::TH2DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . const float * ; xbins, . int ; nbinsy, . const float * ; ybins . ). Definition at line 148 of file RDFHistoModels.cxx. Member Function Documentation. ◆ GetHistogram(). std::shared_ptr<::TH2D > ROOT::RDF::TH2DModel::GetHistogram ; (; ); const. Definition at line 155 of file RDFHistoModels.cxx. Member Data Documentation. ◆ fBinXEdges. std::vector<double> ROOT::RDF::TH2DModel::fBinXEdges. Definition at line 57 of file HistoModels.hxx. ◆ fBinYEdges. std::vector<double> ROOT::RDF::TH2DModel::fBinYEdges. Definition at line 58 of file HistoModels.hxx. ◆ fName. TString ROOT::RDF::TH2DModel::fName. Definition at line 49 of file HistoModels.hxx. ◆ fNbinsX. int ROOT::RDF::TH2DModel::fNbinsX = 128. Definition at line 51 of file HistoModels.hxx. ◆ fNbinsY. int ROOT::RDF::TH2DModel::fNbinsY = 128. Definition at line 54 of file HistoModels.hxx. ◆ fTitle. TString ROOT::RDF::TH2DModel::fTitle. Definition at line 50 of file HistoModels.hxx. ◆ fXLow. double ROOT::RDF::TH2DModel::fXLow = 0. Definition at line 52 of file HistoModels.hxx. ◆ fXUp. double ROOT::RDF::TH2DModel::fXUp = 64. Definition at line 53 of file HistoModels.hxx. ◆ fYLow. double ROOT::RDF::TH2DModel::fYLow = 0. Definition at line 55 of file HistoModels.hxx. ◆ fYUp. double ROOT::RDF::TH2DModel::fYUp = 64. Definition at line 56 of file HistoModels.hxx. Collaboration diagram for ROOT::RDF::TH2DModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/HistoModels.hxx; tree/dataframe/src/RDFHistoModels.cxx. ROOTRDFTH2DModel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH2DModel.html:4692,Guid,Guide,4692,doc/master/structROOT_1_1RDF_1_1TH2DModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH2DModel.html,1,['Guid'],['Guide']
Usability,"t ; nrows, . Int_t ; ncols, . Int_t ; nr_nonzeros, . Int_t * ; pRowIndex, . Int_t * ; pColIndex, . Element * ; pData . ). inline . Definition at line 235 of file TMatrixTSparse.h. ◆ Use() [4/6]. template<class Element > . const TMatrixTSparse< Element > & TMatrixTSparse< Element >::Use ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t ; nr_nonzeros, . const Int_t * ; pRowIndex, . const Int_t * ; pColIndex, . const Element * ; pData . ); const. inline . Definition at line 141 of file TMatrixTSparse.h. ◆ Use() [5/6]. template<class Element > . TMatrixTSparse< Element > & TMatrixTSparse< Element >::Use ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t ; nr_nonzeros, . Int_t * ; pRowIndex, . Int_t * ; pColIndex, . Element * ; pData . ). Definition at line 1926 of file TMatrixTSparse.cxx. ◆ Use() [6/6]. template<class Element > . TMatrixTSparse< Element > & TMatrixTSparse< Element >::Use ; (; TMatrixTSparse< Element > & ; a). inline . Definition at line 243 of file TMatrixTSparse.h. ◆ Zero(). template<class Element > . TMatrixTBase< Element > & TMatrixTSparse< Element >::Zero. overridevirtual . Set matrix elements to zero. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 2254 of file TMatrixTSparse.cxx. Member Data Documentation. ◆ fColIndex. template<class Element > . Int_t* TMatrixTSparse< Element >::fColIndex. protected . Definition at line 41 of file TMatrixTSparse.h. ◆ fElements. template<class Element > . Element* TMatrixTSparse< Element >::fElements. protected . Definition at line 42 of file TMatrixTSparse.h. ◆ fRowIndex. template<class Element > . Int_t* TMatrixTSparse< Element >::fRowIndex. protected . Definition at line 40 of file TMatrixTSparse.h. math/matrix/inc/TMatrixDSparsefwd.h; math/matrix/inc/TMatrixTSparse.h; math/matrix/src/TMatrixTSparse.cxx. TMatrixTSparse. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:58293,Guid,Guide,58293,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['Guid'],['Guide']
Usability,"t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () const;  ; Int_t GetReset () const;  ; TString GetStructure () const;  ; Double_t GetTau () const;  ; TNeuron::ENeuronType GetType () const;  ; TClass * IsA () const override;  ; Bool_t LoadWeights (Option_t *filename="""");  Loads the weights from a text file conforming to the format defined by DumpWeights. ;  ; void Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTree *);  Set the data source. ;  ; void SetDelta (Double_t delta);  Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:13420,learn,learning,13420,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,4,['learn'],['learning']
Usability,"t Size () const;  Get size of basic typedef'ed type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () const override;  ; TDictionary & operator= (const TDictionary &other);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataType.html:2426,Clear,Clear,2426,doc/master/classTDataType.html,https://root.cern,https://root.cern/doc/master/classTDataType.html,1,['Clear'],['Clear']
Usability,"t TMath::StruveH0 (Double_t x);  Bessel function Y1(x) for positive x. ;  ; Double_t TMath::StruveH1 (Double_t x);  Struve functions of order 0. ;  ; Double_t TMath::StruveL0 (Double_t x);  Struve functions of order 1. ;  ; Double_t TMath::StruveL1 (Double_t x);  Modified Struve functions of order 0. ;  ; Double_t TMath::Student (Double_t T, Double_t ndf);  Computes density function for Student's t- distribution (the probability function (integral of density) is computed in StudentI). ;  ; Double_t TMath::StudentI (Double_t T, Double_t ndf);  Calculates the cumulative distribution function of Student's t-distribution second parameter stands for number of degrees of freedom, not for the number of samples if x has Student's t-distribution, the function returns the probability of x being less than T. ;  ; Double_t TMath::StudentQuantile (Double_t p, Double_t ndf, Bool_t lower_tail=kTRUE);  Computes quantiles of the Student's t-distribution 1st argument is the probability, at which the quantile is computed 2nd argument - the number of degrees of freedom of the Student distribution When the 3rd argument lower_tail is kTRUE (default)- the algorithm returns such x0, that. ;  ; Double_t TMath::Tan (Double_t);  Returns the tangent of an angle of x radians. ;  ; Double_t TMath::TanH (Double_t);  Returns the hyperbolic tangent of x. ;  ; constexpr Double_t TMath::TwoPi ();  \( 2\pi\) ;  ; Double_t TMath::Vavilov (Double_t x, Double_t kappa, Double_t beta2);  Returns the value of the Vavilov probability density function. ;  ; Double_t TMath::VavilovI (Double_t x, Double_t kappa, Double_t beta2);  Returns the value of the Vavilov cumulative distribution function (lower tail integral of the probability distribution function) ;  ; Double_t TMath::Voigt (Double_t x, Double_t sigma, Double_t lg, Int_t r=4);  Computation of Voigt function (normalised). ;  . mathmathcoreincTMath.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:20341,Guid,Guide,20341,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,1,['Guid'],['Guide']
Usability,"t WriteFile (const char *fname, EEnvLevel level=kEnvAll);  Write resource records to file fname for a certain level. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnv.html:6915,Clear,Clear,6915,doc/master/classTEnv.html,https://root.cern,https://root.cern/doc/master/classTEnv.html,1,['Clear'],['Clear']
Usability,"u, i, j, k).Definition Quaternion.h:49; ROOT::Math::Rotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix.Definition Rotation3D.h:67; ROOT::Math::RotationXRotation class representing a 3D rotation about the X axis by the angle of rotation.Definition RotationX.h:45; ROOT::Math::RotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation.Definition RotationY.h:45; ROOT::Math::RotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle p...Definition RotationZYX.h:63; ROOT::Math::RotationZYX::Pistatic double Pi()Definition RotationZYX.h:321; ROOT::Math::RotationZYX::RotationZYXRotationZYX()Default constructor.Definition RotationZYX.h:75; ROOT::Math::RotationZYX::fPhidouble fPhiDefinition RotationZYX.h:317; ROOT::Math::RotationZYX::fPsidouble fPsiDefinition RotationZYX.h:319; ROOT::Math::RotationZYX::fThetadouble fThetaDefinition RotationZYX.h:318; ROOT::Math::RotationZYX::Rectifyvoid Rectify()Re-adjust components place angles in canonical ranges.Definition RotationZYX.cxx:108; ROOT::Math::RotationZYX::operator*AVector operator*(const AVector &v) constOverload operator * for rotation on a vector.Definition RotationZYX.h:256; ROOT::Math::RotationZYX::Invertvoid Invert()Invert a rotation in place.Definition RotationZYX.cxx:138; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; double; MathNamespace for new Math classes and functions.; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorsrcRotationZYX.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RotationZYX_8cxx_source.html:8013,Guid,Guide,8013,doc/master/RotationZYX_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RotationZYX_8cxx_source.html,1,['Guid'],['Guide']
Usability,"u-scan is expected to work well with 1st or 2nd; derivative regularisation, because at some point the negative; correlations from migrations are approximately cancelled by the; positive correlations from the regularisation conditions. whichever algorithm is used, the output has to be checked:; (1) The L-curve should have approximate L-shape; and the final choice of tau should not be at the very edge of the; scanned region; (2) The scan result should have a well-defined minimum and the; final choice of tau should sit right in the minimum. Function Members (Methods); public:. virtual~TUnfoldDensity(); voidTObject::AbstractMethod(const char* method) const; voidTUnfoldSys::AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tTUnfold::DoUnfold(Double_t tau); Double_tTUnfold::DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldDensity.html:5193,Clear,Clear,5193,root/html602/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html602/TUnfoldDensity.html,2,['Clear'],['Clear']
Usability,ual . Set the layout manager for the composite frame. ; The layout manager is adopted by the frame and will be deleted by the frame. ; Reimplemented from TGCompositeFrame.; Definition at line 277 of file TGListBox.h. ◆ SetMultipleSelections(). virtual void TGListBox::SetMultipleSelections ; (; Bool_t ; multi = kTRUE). inlinevirtual . Definition at line 259 of file TGListBox.h. ◆ SetTopEntry(). void TGListBox::SetTopEntry ; (; Int_t ; id = -1). virtual . Scroll the entry with id to the top of the listbox. ; Definition at line 1388 of file TGListBox.cxx. ◆ SortByName(). void TGListBox::SortByName ; (; Bool_t ; ascend = kTRUE). virtual . Sort entries by name. ; Definition at line 1506 of file TGListBox.cxx. ◆ Streamer(). void TGListBox::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGListBox::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 302 of file TGListBox.h. Member Data Documentation. ◆ fIntegralHeight. Bool_t TGListBox::fIntegralHeight. protected . true if height should be multiple of fItemVsize ; Definition at line 229 of file TGListBox.h. ◆ fItemVsize. UInt_t TGListBox::fItemVsize. protected . maximum height of single entry ; Definition at line 228 of file TGListBox.h. ◆ fLbc. TGLBContainer* TGListBox::fLbc. protected . listbox container ; Definition at line 230 of file TGListBox.h. ◆ fVport. TGViewPort* TGListBox::fVport. protected . listbox viewport (see TGCanvas.h) ; Definition at line 231 of file TGListBox.h. ◆ fVScrollbar. TGVScrollBar* TGListBox::fVScrollbar. protected . vertical scrollbar ; Definition at line 232 of file TGListBox.h. Libraries for TGListBox:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGListBox.h; gui/gui/src/TGListBox.cxx. TGListBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListBox.html:49171,Guid,Guide,49171,doc/master/classTGListBox.html,https://root.cern,https://root.cern/doc/master/classTGListBox.html,1,['Guid'],['Guide']
Usability,"ual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2159 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition at line 2169 of file TTreeCache.cxx. ◆ StopLearningPhase(). void TTreeCache::StopLearningPhase ; (; ). virtual . This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ; It's useful when the user knows exactly what branches they are going to use. For the moment it's just a call to FillBuffer() since that method will create the buffer lists from the specified branches. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2186 of file TTreeCache.cxx. ◆ Streamer(). void TTreeCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip. ◆ StreamerNVirtual(). void TTreeCache::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 175 of file TTreeCache.h. ◆ UpdateBranches(). void TTreeCache::UpdateBranches ; (; TTree * ; tree). virtual . Update pointer to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:50682,learn,learning,50682,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['learn'],['learning']
Usability,"ual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2160 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition at line 2170 of file TTreeCache.cxx. ◆ StopLearningPhase(). void TTreeCache::StopLearningPhase ; (; ). virtual . This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ; It's useful when the user knows exactly what branches they are going to use. For the moment it's just a call to FillBuffer() since that method will create the buffer lists from the specified branches. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2187 of file TTreeCache.cxx. ◆ Streamer(). void TTreeCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip. ◆ StreamerNVirtual(). void TTreeCache::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 175 of file TTreeCache.h. ◆ UpdateBranches(). void TTreeCache::UpdateBranches ; (; TTree * ; tree). virtual . Update pointer to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:50752,learn,learning,50752,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['learn'],['learning']
Usability,"ual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 101 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). virtual void TGeoPatternFinder::UpdateMatrix ; (; Int_t ; , . TGeoHMatrix & ;  . ); const. inlinevirtual . Reimplemented in TGeoPatternX, TGeoPatternY, TGeoPatternZ, TGeoPatternParaX, TGeoPatternParaY, TGeoPatternParaZ, TGeoPatternTrapZ, TGeoPatternCylR, TGeoPatternCylPhi, TGeoPatternSphR, TGeoPatternSphTheta, TGeoPatternSphPhi, and TGeoPatternHoneycomb.; Definition at line 99 of file TGeoPatternFinder.h. Member Data Documentation. ◆ fDivIndex. Int_t TGeoPatternFinder::fDivIndex. protected . Definition at line 55 of file TGeoPatternFinder.h. ◆ fEnd. Double_t TGeoPatternFinder::fEnd. protected . Definition at line 53 of file TGeoPatternFinder.h. ◆ fMutex. std::mutex TGeoPatternFinder::fMutex. mutableprotected . Size of the thread vector. ; Definition at line 60 of file TGeoPatternFinder.h. ◆ fNdivisions. Int_t TGeoPatternFinder::fNdivisions. protected . Definition at line 54 of file TGeoPatternFinder.h. ◆ fStart. Double_t TGeoPatternFinder::fStart. protected . Definition at line 52 of file TGeoPatternFinder.h. ◆ fStep. Double_t TGeoPatternFinder::fStep. protected . Definition at line 51 of file TGeoPatternFinder.h. ◆ fThreadData. std::vector<ThreadData_t *> TGeoPatternFinder::fThreadData. mutableprotected . Definition at line 58 of file TGeoPatternFinder.h. ◆ fThreadSize. Int_t TGeoPatternFinder::fThreadSize. mutableprotected . Vector of thread private transient data. ; Definition at line 59 of file TGeoPatternFinder.h. ◆ fVolume. TGeoVolume* TGeoPatternFinder::fVolume. protected . Definition at line 56 of file TGeoPatternFinder.h. Libraries for TGeoPatternFinder:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternFinder.html:23333,Guid,Guide,23333,doc/master/classTGeoPatternFinder.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html,1,['Guid'],['Guide']
Usability,"ual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SimpleInterval.html:3719,Simpl,SimpleInterval,3719,root/html526/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"ual Double_t GetBinEntries(Int_t bin) constReturn bin entries of a Profile3D histogram.Definition TProfile3D.cxx:704; TProfile3D::GetBinErrorDouble_t GetBinError(Int_t binx, Int_t biny, Int_t binz) const overrideDefinition TProfile3D.h:117; TProfile3D::GetTminvirtual Double_t GetTmin() constDefinition TProfile3D.h:124; TProfile3D::GetW2Double_t * GetW2()Definition TProfile3D.h:76; TProfile3D::DivideBool_t Divide(TF1 *h1, Double_t c1=1) overridePerforms the operation: this = this/(c1*f1) .Definition TProfile3D.cxx:379; TProfile3D::GetBinContentDouble_t GetBinContent(Int_t, Int_t) const overrideDefinition TProfile3D.h:111; TProfile3D::fTsumwtDouble_t fTsumwtTotal Sum of weight*T.Definition TProfile3D.h:39; TProfile3D::FillInt_t Fill(Double_t, Double_t, const char *, Double_t) overrideIncrement cell defined by x,y,namez by a weight w.Definition TProfile3D.h:63; TProfile3D::FillInt_t Fill(const char *, const char *, Double_t, Double_t) overrideIncrement cell defined by namex,namey,z by a weight w.Definition TProfile3D.h:60; TProfile3D::SetBinsvoid SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t) overrideRedefine x and y axis parameters.Definition TProfile3D.h:81; TProfile3D::Approximatestatic void Approximate(Bool_t approx=kTRUE)Set the fgApproximate flag.Definition TProfile3D.cxx:231; TProfile3D::fTmaxDouble_t fTmaxUpper limit in T (if set)Definition TProfile3D.h:37; TProfile3D::GetBinErrorDouble_t GetBinError(Int_t bin) const overrideReturn bin error of a Profile3D histogram.Definition TProfile3D.cxx:745; TProfileHelperDefinition TProfileHelper.h:30; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; v@ vDefinition rootcling_impl.cxx:3699. histhistincTProfile3D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8h_source.html:20326,Guid,Guide,20326,doc/master/TProfile3D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8h_source.html,1,['Guid'],['Guide']
Usability,"ual Int_tTGX11::AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tTGX11::AddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tTGX11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tTGX11::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11TTF.html:1793,Clear,ClearArea,1793,root/html528/TGX11TTF.html,https://root.cern,https://root.cern/root/html528/TGX11TTF.html,3,['Clear'],['ClearArea']
Usability,"ual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:3512,clear,clearShapeDirty,3512,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['clear'],['clearShapeDirty']
Usability,"ual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheWrite.html:2684,Clear,Clear,2684,doc/master/classTFileCacheWrite.html,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html,1,['Clear'],['Clear']
Usability,"ual Long64_t GetReadEntry() constDefinition TTree.h:549; TTree::GetListOfBranchesvirtual TObjArray * GetListOfBranches()Definition TTree.h:528; TTree::fZipBytesLong64_t fZipBytesTotal number of bytes in all branches after compression.Definition TTree.h:87; TTree::GetTreevirtual TTree * GetTree() constDefinition TTree.h:557; TTree::fTransientBufferTBuffer * fTransientBuffer! Pointer to the current transient buffer.Definition TTree.h:138; TTree::GetValvirtual Double_t * GetVal(Int_t i)Definition TTree.h:574; TTree::SetEntryListvirtual void SetEntryList(TEntryList *list, Option_t *opt="""")Set an EntryList.Definition TTree.cxx:9046; TTree::Notifybool Notify() overrideFunction called when loading a new class library.Definition TTree.cxx:7033; TTree::AddZipBytesvirtual void AddZipBytes(Int_t zip)Definition TTree.h:332; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ReadFilevirtual Long64_t ReadFile(const char *filename, const char *branchDescriptor="""", char delimiter=' ')Create or simply read branches from filename.Definition TTree.cxx:7564; TTree::GetAliasvirtual const char * GetAlias(const char *aliasName) constReturns the expanded value of the alias. Search in the friends if any.Definition TTree.cxx:5226; TTree::SetIOFeaturesROOT::TIOFeatures SetIOFeatures(const ROOT::TIOFeatures &)Provide the end-user with the ability to enable/disable various experimental IO features for this TTr...Definition TTree.cxx:9130; TTree::CreateBasketvirtual TBasket * CreateBasket(TBranch *)Create a basket for this tree and given branch.Definition TTree.cxx:3731; TTree::fUserInfoTList * fUserInfopointer to a list of user objects associated to this TreeDefinition TTree.h:133; TTree::GetMinimumvirtual Double_t GetMinimum(const char *columname)Return minimum of column with name columname.Definition TTree.cxx:6275; TTree::RemoveFriendvirtual void RemoveFriend(TTree *)Remove a friend from the list of friends.Definition TTree.cxx:7977; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:76484,simpl,simply,76484,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['simpl'],['simply']
Usability,"ual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafB.html:4721,Clear,Clear,4721,doc/master/classTLeafB.html,https://root.cern,https://root.cern/doc/master/classTLeafB.html,4,['Clear'],['Clear']
Usability,"ual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsAnaConvPdf.html:4238,clear,clearEvalError,4238,root/html602/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html,1,['clear'],['clearEvalError']
Usability,"ual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedPdf.html:3343,clear,clearEvalError,3343,root/html534/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedPdf.html,6,['clear'],['clearEvalError']
Usability,"ual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDecay.html:2747,clear,clearEvalError,2747,root/html534/RooDecay.html,https://root.cern,https://root.cern/root/html534/RooDecay.html,3,['clear'],['clearEvalError']
Usability,"ual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBCPEffDecay.html:3049,clear,clearEvalError,3049,root/html534/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html534/RooBCPEffDecay.html,12,['clear'],['clearEvalError']
Usability,"ual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBDecay.html:2947,clear,clearEvalError,2947,root/html534/RooBDecay.html,https://root.cern,https://root.cern/root/html534/RooBDecay.html,3,['clear'],['clearEvalError']
Usability,"ual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooArgusBG.html:2771,clear,clearEvalError,2771,root/html534/RooArgusBG.html,https://root.cern,https://root.cern/root/html534/RooArgusBG.html,130,['clear'],['clearEvalError']
Usability,"ual void DeleteLink(TObjLink *lnk);; 62 ; 63 void InsertAfter(const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);; 64 ; 65private:; 66 TList(const TList&) = delete;; 67 TList& operator=(const TList&) = delete;; 68 ; 69public:; 70 typedef TListIter Iterator_t;; 71 ; 72 TList() : fAscending(kTRUE) { }; 73 ; 74 TList(TObject *) R__DEPRECATED(6, 34, ""The argument is ignored. Use the default constructor TList::TList()."") : fAscending(kTRUE) { } // for backward compatibility, don't use; 75 ; 76 virtual ~TList();; 77 void Clear(Option_t *option="""") override;; 78 void Delete(Option_t *option="""") override;; 79 TObject *FindObject(const char *name) const override;; 80 TObject *FindObject(const TObject *obj) const override;; 81 TIterator *MakeIterator(Bool_t dir = kIterForward) const override;; 82 ; 83 void Add(TObject *obj) override { AddLast(obj); }; 84 virtual void Add(TObject *obj, Option_t *opt) { AddLast(obj, opt); }; 85 void AddFirst(TObject *obj) override;; 86 virtual void AddFirst(TObject *obj, Option_t *opt);; 87 void AddLast(TObject *obj) override;; 88 virtual void AddLast(TObject *obj, Option_t *opt);; 89 void AddAt(TObject *obj, Int_t idx) override;; 90 void AddAfter(const TObject *after, TObject *obj) override;; 91 virtual void AddAfter(TObjLink *after, TObject *obj);; 92 void AddBefore(const TObject *before, TObject *obj) override;; 93 virtual void AddBefore(TObjLink *before, TObject *obj);; 94 TObject *Remove(TObject *obj) override;; 95 virtual TObject *Remove(TObjLink *lnk);; 96 TObject *Remove(const TObjLinkPtr_t &lnk) { return Remove(lnk.get()); }; 97 void RemoveLast() override;; 98 void RecursiveRemove(TObject *obj) override;; 99 ; 100 TObject *At(Int_t idx) const override;; 101 TObject *After(const TObject *obj) const override;; 102 TObject *Before(const TObject *obj) const override;; 103 TObject *First() const override;; 104 virtual TObjLink *FirstLink() const { return fFirst.get(); }; 105 TObject **GetObjectRef(const TObject *obj) const override;; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8h_source.html:2843,Clear,Clear,2843,doc/master/TList_8h_source.html,https://root.cern,https://root.cern/doc/master/TList_8h_source.html,1,['Clear'],['Clear']
Usability,"ual void TQpProbBase::JoinRHS ; (; TVectorD & ; rhs_in, . TVectorD & ; rhs1_in, . TVectorD & ; rhs2_in, . TVectorD & ; rhs3_in . ). pure virtual . Implemented in TQpProbDens, and TQpProbSparse. ◆ MakeData(). virtual TQpDataBase * TQpProbBase::MakeData ; (; TVectorD & ; c, . TMatrixDBase & ; Q_in, . TVectorD & ; xlo, . TVectorD & ; ixlo, . TVectorD & ; xup, . TVectorD & ; ixup, . TMatrixDBase & ; A_in, . TVectorD & ; bA, . TMatrixDBase & ; C_in, . TVectorD & ; clo, . TVectorD & ; iclo, . TVectorD & ; cup, . TVectorD & ; icup . ). pure virtual . Implemented in TQpProbDens, and TQpProbSparse. ◆ MakeLinSys(). virtual TQpLinSolverBase * TQpProbBase::MakeLinSys ; (; const TQpDataBase * ; data). pure virtual . Implemented in TQpProbDens, and TQpProbSparse. ◆ MakeResiduals(). virtual TQpResidual * TQpProbBase::MakeResiduals ; (; const TQpDataBase * ; data). pure virtual . Implemented in TQpProbDens, and TQpProbSparse. ◆ MakeVariables(). virtual TQpVar * TQpProbBase::MakeVariables ; (; const TQpDataBase * ; data). pure virtual . Implemented in TQpProbDens, and TQpProbSparse. ◆ operator=(). TQpProbBase & TQpProbBase::operator= ; (; const TQpProbBase & ; source). Assignment operator. ; Definition at line 94 of file TQpProbBase.cxx. ◆ SeparateVars(). virtual void TQpProbBase::SeparateVars ; (; TVectorD & ; x_in, . TVectorD & ; y_in, . TVectorD & ; z_in, . TVectorD & ; vars_in . ). pure virtual . Implemented in TQpProbDens, and TQpProbSparse. Member Data Documentation. ◆ fMy. Int_t TQpProbBase::fMy. Definition at line 93 of file TQpProbBase.h. ◆ fMz. Int_t TQpProbBase::fMz. Definition at line 94 of file TQpProbBase.h. ◆ fNx. Int_t TQpProbBase::fNx. Definition at line 92 of file TQpProbBase.h. Libraries for TQpProbBase:. [legend]; The documentation for this class was generated from the following files:; math/quadp/inc/TQpProbBase.h; math/quadp/src/TQpProbBase.cxx. TQpProbBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpProbBase.html:13323,Guid,Guide,13323,doc/master/classTQpProbBase.html,https://root.cern,https://root.cern/doc/master/classTQpProbBase.html,1,['Guid'],['Guide']
Usability,"ual voidResize(UInt_t n, Bool_t force_delete); virtual voidSetOnFileClass(TClass* cl); virtual voidSetValueClass(TClass* newcl); virtual UInt_tSize() const; virtual UInt_tSizeof() const; virtual voidStreamer(TBuffer& refBuffer); virtual voidStreamer(TBuffer& refBuffer, void* pObject, int siz). protected:. voidCheckFunctions() const; virtual voidDeleteItem(Bool_t force, void* ptr) const; TGenCollectionProxy*Initialize() const; virtual TGenCollectionProxy*InitializeEx(). private:. TGenCollectionProxy(). Data Members; public:. enum { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodfClearMethod cache for container accessors: clear container; TGenCollectionProxy::MethodfCollectMethod to collect objects from container; void*fConstructContainer accessors: block construct; map<std::string,TObjArray*>*fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0fCreateEnvMethod to allocate an Environment holder.; void*fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*fEnvAddress of the currently proxied object; void*fFeedContainer accessors: block feed; TGenCollectionProxy::MethodfFirstContainer accessors: generic iteration: first; void*fFunctionCreateIterators; void*fFunctionDeleteTwoIterators; TGenCollectionProxy::Value*fKeyDescriptor of the key_type; stringfNameName of the class being proxied.; TGenCollectionProxy::MethodfNextContainer accessors: generic iteration: next; TClass*fOnFileClassOn file class; Bool_tfPointersFlag to indicate if containee has pointers (key or value); UInt_tTVirtualCollectionProxy::fProperties; vector<ROOT::TCollectionProxyInfo::EnvironBase*,allocator<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenCollectionProxy.html:3847,clear,clear,3847,root/html528/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TGenCollectionProxy.html,2,['clear'],['clear']
Usability,"ual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveCaloData::CellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAnyParentAs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCaloDataHist.html:2079,Clear,ClearStamps,2079,root/html528/TEveCaloDataHist.html,https://root.cern,https://root.cern/root/html528/TEveCaloDataHist.html,12,['Clear'],['ClearStamps']
Usability,"ual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNewQueryDlg.html:1741,Clear,Clear,1741,root/html528/TNewQueryDlg.html,https://root.cern,https://root.cern/root/html528/TNewQueryDlg.html,6,['Clear'],['Clear']
Usability,"ual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); virtual Bool_tCanCompress(TQCommand* c) const; virtual Bool_tCanMerge(TQCommand* c) const; virtual Bool_tCanRedo() const; virtual Bool_tCanUndo() const; Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(TQCommand* c); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:4797,Clear,Clear,4797,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['Clear'],['Clear']
Usability,"ual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:7018,Simpl,SimpleInterval,7018,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"ual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSystem::AddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidTSystem::AddTimer(TTimer* t); virtual intTSystem::AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intTSystem::AnnounceUnixService(int port, int backlog); virtual intTSystem::AnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tTSystem::ChangeDirectory(const char* path); virtual intTSystem::Chmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTSystem::CleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSystem::CloseConnection(int sock, Bool_t force = kFALSE); virtual voidTSystem::Closelog(); virtual intTSystem::ClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intTSystem::CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*TSystem::ConcatFileName(const char* dir, const char* name); virtual Bool_tConsistentWith(const char* path, void* dirptr); virtual voidTNamed::Copy(TObject& named) const; virtual intTSystem::CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidTSystem::DispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetSystem.html:3769,Clear,Clear,3769,root/html528/TNetSystem.html,https://root.cern,https://root.cern/root/html528/TNetSystem.html,4,['Clear'],['Clear']
Usability,"ual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSystem::AddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidTSystem::AddTimer(TTimer* t); virtual intTSystem::AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intTSystem::AnnounceUnixService(int port, int backlog); virtual intTSystem::AnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tTSystem::ChangeDirectory(const char* path); virtual intTSystem::Chmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTSystem::CleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSystem::CloseConnection(int sock, Bool_t force = kFALSE); virtual voidTSystem::Closelog(); virtual intTSystem::ClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intTSystem::CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*TSystem::ConcatFileName(const char* dir, const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intTSystem::CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidTSystem::DispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheSystem.html:1795,Clear,Clear,1795,root/html526/TDCacheSystem.html,https://root.cern,https://root.cern/root/html526/TDCacheSystem.html,6,['Clear'],['Clear']
Usability,"ual voidToggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidEmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidSetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGButton(const TGButton&); TGButton&operator=(const TGButton&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGButton.html:17175,Clear,ClearFlags,17175,root/html528/TGButton.html,https://root.cern,https://root.cern/root/html528/TGButton.html,4,['Clear'],['ClearFlags']
Usability,"ual void SetTimeDisplay (Int_t value);  ; virtual void SetTimeFormat (const char *format="""");  Change the format used for time plotting. ;  ; virtual void SetTimeOffset (Double_t toffset, Option_t *option=""local"");  Change the time offset If option = ""gmt"", set display mode to GMT. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TAxis. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnZoom ();  Reset first & last bin to the full range. ;  ; virtual void ZoomOut (Double_t factor=0, Double_t offset=0);  Zoom out by a factor of 'factor' (default =2) uses previous zoom factor by default Keep center defined by 'offset' fixed ie. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classAxis2.html:8074,Clear,Clear,8074,doc/master/classAxis2.html,https://root.cern,https://root.cern/doc/master/classAxis2.html,2,['Clear'],['Clear']
Usability,"ual void SetVisibility (Int_t vis=1);  Set visibility for this node and its sons. ;  ; void Sizeof3D () const override;  Return total size of this 3-D Node with its attributes. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateMatrix ();  Update global rotation matrix/translation vector for this node this function must be called before invoking Local2Master. ;  ; virtual void UpdateTempMatrix (const Double_t *dx1, const Double_t *rmat1, Double_t x, Double_t y, Double_t z, Double_t *matrix, Double_t *dxnew, Double_t *rmatnew);  Compute new translation vector and global matrix. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNode.html:4862,Clear,Clear,4862,doc/master/classTNode.html,https://root.cern,https://root.cern/doc/master/classTNode.html,1,['Clear'],['Clear']
Usability,"ual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:64077,clear,clearEvalErrorLog,64077,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"ual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::unique_ptr< RooPolyFunc > taylorExpand (const char *name, const char *title, RooAbsReal &func, const RooArgList &observables, int order=1, std::vector< double > const &observableValues={}, double eps1=1e-6, double eps2=1e-3);  Taylor expanding given function in terms of observables around observableValues. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyFunc.html:46229,clear,clearEvalErrorLog,46229,doc/master/classRooPolyFunc.html,https://root.cern,https://root.cern/doc/master/classRooPolyFunc.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"ual ~ParamMemFunHandler()Definition ParamFunctor.h:186; ROOT::Math::ParamMemFunHandler::ParamMemFunHandlerParamMemFunHandler(const PointerToObj &pObj, PointerToMemFn pMemFn)constructor from a pointer to the class and a pointer to the functionDefinition ParamFunctor.h:182; TRootIOCtorDefinition TRootIOCtor.h:33; double; xDouble_t x[n]Definition legend1.C:17; F#define F(x, y, z); MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::ParamFunctorHandler::FuncEvaluator< F *, T >::EvalConststatic T EvalConst(F *f, const T *x, const double *p)Definition ParamFunctor.h:125; ROOT::Math::ParamFunctorHandler::FuncEvaluator< F *, T >::Evalstatic T Eval(F *f, T *x, double *p)Definition ParamFunctor.h:121; ROOT::Math::ParamFunctorHandler::FuncEvaluator< F *const, T >::EvalConststatic T EvalConst(const F *f, const T *x, const double *p)Definition ParamFunctor.h:136; ROOT::Math::ParamFunctorHandler::FuncEvaluator< F *const, T >::Evalstatic T Eval(const F *f, T *x, double *p)Definition ParamFunctor.h:132; ROOT::Math::ParamFunctorHandler::FuncEvaluatorDefinition ParamFunctor.h:110; ROOT::Math::ParamFunctorHandler::FuncEvaluator::EvalConststatic T EvalConst(F &f, const T *x, const double *p)Definition ParamFunctor.h:115; ROOT::Math::ParamFunctorHandler::FuncEvaluator::Evalstatic T Eval(F &f, T *x, double *p)Definition ParamFunctor.h:111; ROOT::Math::ParamMemFunHandler::MemFuncEvaluatorDefinition ParamFunctor.h:216; ROOT::Math::ParamMemFunHandler::MemFuncEvaluator::EvalConststatic T EvalConst(PObj &pobj, F &f, const T *x, const double *p)Definition ParamFunctor.h:221; ROOT::Math::ParamMemFunHandler::MemFuncEvaluator::Evalstatic T Eval(PObj &pobj, F &f, T *x, double *p)Definition ParamFunctor.h:217. mathmathcoreincMathParamFunctor.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ParamFunctor_8h_source.html:16971,Guid,Guide,16971,doc/master/ParamFunctor_8h_source.html,https://root.cern,https://root.cern/doc/master/ParamFunctor_8h_source.html,1,['Guid'],['Guide']
Usability,"ualPS destructor. ;  ; TClass * IsA () const override;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetStream (std::ofstream *os);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteInteger (Int_t i, Bool_t space=kTRUE);  Write one Integer to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImageDump.html:4211,Clear,Clear,4211,doc/master/classTImageDump.html,https://root.cern,https://root.cern/doc/master/classTImageDump.html,1,['Clear'],['Clear']
Usability,"ualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; DrawLineOption_t Option_t TPoint TPoint const char DrawLineDefinition TGWin32VirtualXProxy.cxx:70; srcOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t srcDefinition TGWin32VirtualXProxy.cxx:164; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TObject.h; TAttBBox2DAbstract base class for elements drawn in the editor.Definition TAttBBox2D.h:19; TAttLineLine Attributes class.Definition TAttLine.h:18; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::lsvoid ls(Option_t *option="""") const overrideList this line with its attributes.Definition TLine.cxx:380; TLine::SetY2virtual void SetY2(Double_t y2)Definition TLine.h:68; TLine::fY1Double_t fY1Y of 1st point.Definition TLine.h:26; TLine::fX1Double_t fX1X of 1st point.Definition TLine.h:25; TLine::SetX2virtual void SetX2(Double_t x2)Definition TLine.h:66; TLine::kLineNDC@ kLineNDCUse NDC coordinates.Definition TLine.h:33; TLine::kHorizontal@ kHorizontalLine is horizontal.Definition TLine.h:35; TLine::kVertical@ kVerticalLine is vertical.Definition TLine.h:34; TLine::IsVerticalBool_t IsVertical()Check whether this line is to be drawn vertically.Definition TLine.cxx:459; TLine::SetBBoxY1void SetBBoxY1(const Int_t y) overrideSet top of BoundingBox to a value (resize in y direction on top)Definition TLine.cxx:667; TLine::SetVerticalvoid SetVertical(Bool_t set=kTRUE)Force the line to be drawn vertically.Definition TLine.cxx:499; TL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLine_8h_source.html:4625,simpl,simple,4625,doc/master/TLine_8h_source.html,https://root.cern,https://root.cern/doc/master/TLine_8h_source.html,1,['simpl'],['simple']
Usability,"ual~TEveCompositeFrameInTab(); voidTObject::AbstractMethod(const char* method) const; virtual voidTEveCompositeFrame::AcquireEveWindow(TEveWindow* ew); voidTEveCompositeFrame::ActionPressed(); virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidDestroy(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCompositeFrameInTab.html:1523,Clear,Clear,1523,root/html528/TEveCompositeFrameInTab.html,https://root.cern,https://root.cern/root/html528/TEveCompositeFrameInTab.html,6,['Clear'],['Clear']
Usability,"uared error (regression)""; 166 "" or cross entropy (binary classification)."");; 167 AddPreDefVal(TString(""CROSSENTROPY""));; 168 AddPreDefVal(TString(""SUMOFSQUARES""));; 169 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 170 ; 171 DeclareOptionRef(fWeightInitializationString=""XAVIER"",; 172 ""WeightInitialization"",; 173 ""Weight initialization strategy"");; 174 AddPreDefVal(TString(""XAVIER""));; 175 AddPreDefVal(TString(""XAVIERUNIFORM""));; 176 ; 177 DeclareOptionRef(fArchitectureString = ""CPU"", ""Architecture"", ""Which architecture to perform the training on."");; 178 AddPreDefVal(TString(""STANDARD""));; 179 AddPreDefVal(TString(""CPU""));; 180 AddPreDefVal(TString(""GPU""));; 181 AddPreDefVal(TString(""OPENCL""));; 182 ; 183 DeclareOptionRef(; 184 fTrainingStrategyString = ""LearningRate=1e-1,""; 185 ""Momentum=0.3,""; 186 ""Repetitions=3,""; 187 ""ConvergenceSteps=50,""; 188 ""BatchSize=30,""; 189 ""TestRepetitions=7,""; 190 ""WeightDecay=0.0,""; 191 ""Renormalize=L2,""; 192 ""DropConfig=0.0,""; 193 ""DropRepetitions=5|LearningRate=1e-4,""; 194 ""Momentum=0.3,""; 195 ""Repetitions=3,""; 196 ""ConvergenceSteps=50,""; 197 ""BatchSize=20,""; 198 ""TestRepetitions=7,""; 199 ""WeightDecay=0.001,""; 200 ""Renormalize=L2,""; 201 ""DropConfig=0.0+0.5+0.5,""; 202 ""DropRepetitions=5,""; 203 ""Multithreading=True"",; 204 ""TrainingStrategy"",; 205 ""Defines the training strategies."");; 206}; 207 ; 208////////////////////////////////////////////////////////////////////////////////; 209/// parse layout specification string and return a vector, each entry; 210/// containing the number of neurons to go in each successive layer; 211 ; 212auto TMVA::MethodDNN::ParseLayoutString(TString layoutString); 213 -> LayoutVector_t; 214{; 215 LayoutVector_t layout;; 216 const TString layerDelimiter("","");; 217 const TString subDelimiter(""|"");; 218 ; 219 const size_t inputSize = GetNvar();; 220 ; 221 TObjArray* layerStrings = layoutString.Tokenize(layerDelimiter);; 222 TIter nextLayer (layerStrings);; 223 TObjString* layerString = (TObjString*)nextLayer ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:6724,Learn,LearningRate,6724,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Learn'],['LearningRate']
Usability,"uasiRandom::~QuasiRandom~QuasiRandom()Destructor: call Terminate() function of engine to free any allocated resource.Definition QuasiRandom.h:88; ROOT::Math::QuasiRandom::Namestd::string Name() constReturn the name of the generator.Definition QuasiRandom.h:154; ROOT::Math::QuasiRandom::Nextdouble Next()Generate next quasi random numbers point (1 - dimension)Definition QuasiRandom.h:102; ROOT::Math::QuasiRandom::RndmArraybool RndmArray(int n, double *array)Generate an array of random numbers between ]0,1[ Function to preserve ROOT Trandom compatibility The...Definition QuasiRandom.h:126; ROOT::Math::QuasiRandom::Rndmdouble Rndm()Generate quasi random numbers between ]0,1[ 0 and 1 are excluded Function to be compatible with ROOT ...Definition QuasiRandom.h:111; ROOT::Math::QuasiRandom::Typestd::string Type() constReturn the type (name) of the used generator.Definition QuasiRandom.h:133; ROOT::Math::QuasiRandom::EngineSizeunsigned int EngineSize() constReturn the size of the generator state.Definition QuasiRandom.h:140; ROOT::Math::QuasiRandom::NDimunsigned int NDim() constReturn the dimension of the generator.Definition QuasiRandom.h:147; ROOT::Math::QuasiRandom::QuasiRandomQuasiRandom(const Engine &e, unsigned int dimension=1)Create a QuasiRandom generator based on a provided generic engine.Definition QuasiRandom.h:80; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::QuasiRandomNiederreiterQuasiRandom< ROOT::Math::GSLQRngNiederreiter2 > QuasiRandomNiederreiterDefinition QuasiRandom.h:179; ROOT::Math::QuasiRandomSobolQuasiRandom< ROOT::Math::GSLQRngSobol > QuasiRandomSobolDefinition QuasiRandom.h:178; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoreincMathQuasiRandom.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/QuasiRandom_8h_source.html:7647,Guid,Guide,7647,doc/master/QuasiRandom_8h_source.html,https://root.cern,https://root.cern/doc/master/QuasiRandom_8h_source.html,1,['Guid'],['Guide']
Usability,"uate this function at point x[0]. ; x[0] is the value along X if fCase =0, the value along Y if fCase=1 if params is non null, the array will be used instead of the internal TF2 parameters ; Reimplemented from TF1.; Definition at line 157 of file TF12.cxx. ◆ GetXY(). virtual Double_t TF12::GetXY ; (; ); const. inlinevirtual . Definition at line 47 of file TF12.h. ◆ IsA(). TClass * TF12::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TF1.; Definition at line 51 of file TF12.h. ◆ SavePrimitive(). void TF12::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TF1.; Definition at line 176 of file TF12.cxx. ◆ SetXY(). void TF12::SetXY ; (; Double_t ; xy). virtual . Set the value of the constant for the TF2. ; constant in X when projecting along Y constant in Y when projecting along X The function title is set to include the value of the constant The current pad is updated ; Definition at line 190 of file TF12.cxx. ◆ Streamer(). void TF12::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TF1. ◆ StreamerNVirtual(). void TF12::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TF12.h. Member Data Documentation. ◆ fCase. Int_t TF12::fCase. protected . Projection along X(0), or Y(1) ; Definition at line 29 of file TF12.h. ◆ fF2. TF2* TF12::fF2. protected . Pointer to the mother TF2. ; Definition at line 30 of file TF12.h. ◆ fXY. Double_t TF12::fXY. protected . Value along Y (if projection X) or X (if projection Y) ; Definition at line 28 of file TF12.h. Libraries for TF12:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TF12.h; hist/hist/src/TF12.cxx. TF12. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF12.html:45324,Guid,Guide,45324,doc/master/classTF12.html,https://root.cern,https://root.cern/doc/master/classTF12.html,1,['Guid'],['Guide']
Usability,"ubDefinition TGeoShape.h:55; TGeoShape::kGeoTubeSeg@ kGeoTubeSegDefinition TGeoShape.h:47; TGeoShape::kGeoRunTimeShape@ kGeoRunTimeShapeDefinition TGeoShape.h:40; TGeoShape::kGeoPhiSeg@ kGeoPhiSegDefinition TGeoShape.h:35; TGeoShape::kGeoVisY@ kGeoVisYDefinition TGeoShape.h:38; TGeoShape::kGeoXtru@ kGeoXtruDefinition TGeoShape.h:60; TGeoShape::kGeoConeSeg@ kGeoConeSegDefinition TGeoShape.h:49; TGeoShape::kGeoPcon@ kGeoPconDefinition TGeoShape.h:50; TGeoShape::kGeoTrd2@ kGeoTrd2Definition TGeoShape.h:57; TGeoShape::kGeoBox@ kGeoBoxDefinition TGeoShape.h:43; TGeoShape::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute mouse actions on this shape.Definition TGeoShape.cxx:760; TGeoShape::Tolerancestatic Double_t Tolerance()Definition TGeoShape.h:90; TGeoShape::IsCloseToPhistatic Bool_t IsCloseToPhi(Double_t epsil, const Double_t *point, Double_t c1, Double_t s1, Double_t c2, Double_t s2)True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,...Definition TGeoShape.cxx:273; TGeoShape::GetMakeRuntimeShapevirtual TGeoShape * GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *mat) const =0; TGeoShape::SetPointsvirtual void SetPoints(Double_t *points) const =0; TGeoShape::IsAssemblyvirtual Bool_t IsAssembly() constDefinition TGeoShape.h:129; TGeoShape::TestShapeBitBool_t TestShapeBit(UInt_t f) constDefinition TGeoShape.h:167; TGeoShape::GetIdInt_t GetId() constDefinition TGeoShape.h:123; TGeoShape::MakeBuffer3Dvirtual TBuffer3D * MakeBuffer3D() constDefinition TGeoShape.h:146; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; bool; double; int; unsigned int; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; Drawth1 Draw(). geomgeomincTGeoShape.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:22681,Guid,Guide,22681,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,1,['Guid'],['Guide']
Usability,ubFunctions.cxx. ◆ LastLink(). TObjLink * TViewPubFunctions::LastLink ; (; ); const. overrideprotectedvirtual . LastLink is not allowed in this class. ; See TList::LastLink for the intended behavior. ; Reimplemented from TList.; Definition at line 320 of file TViewPubFunctions.cxx. ◆ Load(). void TViewPubFunctions::Load ; (; ). Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ; Definition at line 298 of file TViewPubFunctions.cxx. ◆ MakeIterator(). TIterator * TViewPubFunctions::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Return a list iterator. ; Reimplemented from TList.; Definition at line 122 of file TViewPubFunctions.cxx. ◆ operator=(). TViewPubFunctions & TViewPubFunctions::operator= ; (; const TViewPubFunctions & ; ). privatedelete . ◆ RecursiveRemove(). void TViewPubFunctions::RecursiveRemove ; (; TObject * ; obj). overrideprotectedvirtual . RecursiveRemove is not allowed in this class. ; See TList::RecursiveRemove for the intended behavior. ; Reimplemented from TList.; Definition at line 330 of file TViewPubFunctions.cxx. ◆ Remove() [1/2]. TObject * TViewPubFunctions::Remove ; (; TObject * ; obj). overrideprotectedvirtual . Remove is not allowed in this class. ; See TList::Remove for the intended behavior. ; Reimplemented from TList.; Definition at line 339 of file TViewPubFunctions.cxx. ◆ Remove() [2/2]. TObject * TViewPubFunctions::Remove ; (; TObjLink * ; lnk). overrideprotectedvirtual . Remove is not allowed in this class. ; See TList::Remove for the intended behavior. ; Reimplemented from TList.; Definition at line 349 of file TViewPubFunctions.cxx. Member Data Documentation. ◆ fClasses. TList TViewPubFunctions::fClasses. protected . Definition at line 31 of file TViewPubFunctions.h. core/meta/src/TViewPubFunctions.h; core/meta/src/TViewPubFunctions.cxx. TViewPubFunctions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubFunctions.html:28819,Guid,Guide,28819,doc/master/classTViewPubFunctions.html,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html,1,['Guid'],['Guide']
Usability,"uble *)> const &g)Construct a new GradFunctor object using 2 std::function, one for the function evaluation and one for...Definition Functor.h:204; ROOT::Math::GradFunctor::fGradFuncstd::function< void(const double *, double *)> fGradFuncDefinition Functor.h:246; ROOT::Math::GradFunctor::DoDerivativedouble DoDerivative(const double *x, unsigned int icoord) const overrideDefinition Functor.h:231; ROOT::Math::GradFunctor::fFuncstd::function< double(const double *)> fFuncDefinition Functor.h:244; ROOT::Math::IBaseFunctionMultiDimTempl< double >; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IGradientFunctionMultiDimTempl::Gradientvirtual void Gradient(const T *x, T *grad) constEvaluate all the vector of function derivatives (gradient) at a point x.Definition IFunction.h:177; ROOT::Math::IGradientFunctionMultiDimTempl::DerivativeT Derivative(const T *x, unsigned int icoord=0) constReturn the partial derivative with respect to the passed coordinate.Definition IFunction.h:209; ROOT::Math::IGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation.Definition IFunction.h:254; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(double x) constReturn the derivative of the function at a point x Use the private method DoDerivative.Definition IFunction.h:263; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathFunctor.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Functor_8h_source.html:19911,Guid,Guide,19911,doc/master/Functor_8h_source.html,https://root.cern,https://root.cern/doc/master/Functor_8h_source.html,1,['Guid'],['Guide']
Usability,"uble * ; p). inlineoverridevirtual . Set the parameter values. ; Parameters. pvector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. ; Implements ROOT::Math::IBaseParam.; Definition at line 192 of file WrappedParamFunction.h. ◆ SetParValues(). template<typename FuncPtr = FreeMultiFunctionPtr> . void ROOT::Math::WrappedParamFunctionGen< FuncPtr >::SetParValues ; (; unsigned int ; npar, . const double * ; p . ); const. inlineprivate . Definition at line 281 of file WrappedParamFunction.h. Member Data Documentation. ◆ fDim. template<typename FuncPtr = FreeMultiFunctionPtr> . unsigned int ROOT::Math::WrappedParamFunctionGen< FuncPtr >::fDim. private . Definition at line 291 of file WrappedParamFunction.h. ◆ fFunc. template<typename FuncPtr = FreeMultiFunctionPtr> . FuncPtr ROOT::Math::WrappedParamFunctionGen< FuncPtr >::fFunc. mutableprivate . Definition at line 290 of file WrappedParamFunction.h. ◆ fParams. template<typename FuncPtr = FreeMultiFunctionPtr> . std::vector<double> ROOT::Math::WrappedParamFunctionGen< FuncPtr >::fParams. private . Definition at line 292 of file WrappedParamFunction.h. ◆ fParIndices. template<typename FuncPtr = FreeMultiFunctionPtr> . std::vector<unsigned int> ROOT::Math::WrappedParamFunctionGen< FuncPtr >::fParIndices. private . Definition at line 294 of file WrappedParamFunction.h. ◆ fVarIndices. template<typename FuncPtr = FreeMultiFunctionPtr> . std::vector<unsigned int> ROOT::Math::WrappedParamFunctionGen< FuncPtr >::fVarIndices. private . Definition at line 293 of file WrappedParamFunction.h. ◆ fX. template<typename FuncPtr = FreeMultiFunctionPtr> . std::vector<double> ROOT::Math::WrappedParamFunctionGen< FuncPtr >::fX. mutableprivate . Definition at line 295 of file WrappedParamFunction.h. math/mathcore/inc/Math/WrappedParamFunction.h. ROOTMathWrappedParamFunctionGen. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html:10026,Guid,Guide,10026,doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,1,['Guid'],['Guide']
Usability,"uble x)Definition ChebyshevPol.h:34; ROOT::Math::detail::get_manipchar_t get_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m)Definition GenVectorIO.h:54; ROOT::Math::detail::require_delimstd::basic_istream< char_t, traits_t > & require_delim(std::basic_istream< char_t, traits_t > &is, manip_t m)Definition GenVectorIO.h:113; ROOT::Math::detail::set_manipvoid set_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch)Definition GenVectorIO.h:74; ROOT::Math::detail::open@ openDefinition GenVectorIO.h:35; ROOT::Math::detail::sep@ sepDefinition GenVectorIO.h:35; ROOT::Math::detail::close@ closeDefinition GenVectorIO.h:35; ROOT::Math::detail::bitforbit@ bitforbitDefinition GenVectorIO.h:35; ROOT::Math::operator>>std::basic_istream< char_t, traits_t > & operator>>(std::basic_istream< char_t, traits_t > &is, DisplacementVector2D< T, U > &v)Definition DisplacementVector2D.h:515; ROOT::Math::operator+DisplacementVector2D< CoordSystem1, U > operator+(DisplacementVector2D< CoordSystem1, U > v1, const DisplacementVector2D< CoordSystem2, U > &v2)Addition of DisplacementVector2D vectors.Definition DisplacementVector2D.h:440; ROOT::Math::operator-DisplacementVector2D< CoordSystem1, U > operator-(DisplacementVector2D< CoordSystem1, U > v1, DisplacementVector2D< CoordSystem2, U > const &v2)Difference between two DisplacementVector2D vectors.Definition DisplacementVector2D.h:453; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701. mathgenvectorincMathGenVectorDisplacementVector3D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html:38914,Guid,Guide,38914,doc/master/GenVector_2DisplacementVector3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html,1,['Guid'],['Guide']
Usability,uble* RooVectorDataStore::_extSumW2Array = nullptr. private . ! External sum of weights array ; Definition at line 582 of file RooVectorDataStore.h. ◆ _extWgtArray. const double* RooVectorDataStore::_extWgtArray = nullptr. private . ! External weight array ; Definition at line 579 of file RooVectorDataStore.h. ◆ _extWgtErrHiArray. const double* RooVectorDataStore::_extWgtErrHiArray = nullptr. private . ! External weight array - high error ; Definition at line 581 of file RooVectorDataStore.h. ◆ _extWgtErrLoArray. const double* RooVectorDataStore::_extWgtErrLoArray = nullptr. private . ! External weight array - low error ; Definition at line 580 of file RooVectorDataStore.h. ◆ _forcedUpdate. bool RooVectorDataStore::_forcedUpdate = false. private . ! Request for forced cache update ; Definition at line 589 of file RooVectorDataStore.h. ◆ _realfStoreList. std::vector<RealFullVector*> RooVectorDataStore::_realfStoreList. private . Definition at line 571 of file RooVectorDataStore.h. ◆ _realStoreList. std::vector<RealVector*> RooVectorDataStore::_realStoreList. private . Definition at line 570 of file RooVectorDataStore.h. ◆ _sumWeight. double RooVectorDataStore::_sumWeight = 0.0. private . Definition at line 576 of file RooVectorDataStore.h. ◆ _sumWeightCarry. double RooVectorDataStore::_sumWeightCarry = 0.0. private . Definition at line 577 of file RooVectorDataStore.h. ◆ _varsww. RooArgSet RooVectorDataStore::_varsww. private . Definition at line 567 of file RooVectorDataStore.h. ◆ _wgtVar. RooRealVar* RooVectorDataStore::_wgtVar = nullptr. private . Pointer to weight variable (if set) ; Definition at line 568 of file RooVectorDataStore.h. Libraries for RooVectorDataStore:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooVectorDataStore.h; roofit/roofitcore/src/RooVectorDataStore.cxx. RooVectorDataStore. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:12 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:42256,Guid,Guide,42256,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['Guid'],['Guide']
Usability,"uble,5> > SMatrixSym5D;; 28 typedef SMatrix<double,6,6,MatRepSym<double,6> > SMatrixSym6D;; 29 typedef SMatrix<double,7,7,MatRepSym<double,7> > SMatrixSym7D;; 30 ; 31} // namespace Math; 32 ; 33} // namespace ROOT; 34 ; 35 ; 36#endif; ROOT::Math::SMatrixSMatrix: a generic fixed size D1 x D2 Matrix class.Definition SMatrix.h:101; MathNamespace for new Math classes and functions.; ROOT::Math::SMatrix5DSMatrix< double, 5, 5, MatRepStd< double, 5, 5 > > SMatrix5DDefinition SMatrixDfwd.h:19; ROOT::Math::SMatrix2DSMatrix< double, 2, 2, MatRepStd< double, 2, 2 > > SMatrix2DDefinition SMatrixDfwd.h:16; ROOT::Math::SMatrixSym6DSMatrix< double, 6, 6, MatRepSym< double, 6 > > SMatrixSym6DDefinition SMatrixDfwd.h:28; ROOT::Math::SMatrix4DSMatrix< double, 4, 4, MatRepStd< double, 4, 4 > > SMatrix4DDefinition SMatrixDfwd.h:18; ROOT::Math::SMatrixSym5DSMatrix< double, 5, 5, MatRepSym< double, 5 > > SMatrixSym5DDefinition SMatrixDfwd.h:27; ROOT::Math::SMatrixSym4DSMatrix< double, 4, 4, MatRepSym< double, 4 > > SMatrixSym4DDefinition SMatrixDfwd.h:26; ROOT::Math::SMatrix3DSMatrix< double, 3, 3, MatRepStd< double, 3, 3 > > SMatrix3DDefinition SMatrixDfwd.h:17; ROOT::Math::SMatrixSym3DSMatrix< double, 3, 3, MatRepSym< double, 3 > > SMatrixSym3DDefinition SMatrixDfwd.h:25; ROOT::Math::SMatrixSym2DSMatrix< double, 2, 2, MatRepSym< double, 2 > > SMatrixSym2DDefinition SMatrixDfwd.h:24; ROOT::Math::SMatrix7DSMatrix< double, 7, 7, MatRepStd< double, 7, 7 > > SMatrix7DDefinition SMatrixDfwd.h:21; ROOT::Math::SMatrix6DSMatrix< double, 6, 6, MatRepStd< double, 6, 6 > > SMatrix6DDefinition SMatrixDfwd.h:20; ROOT::Math::SMatrixSym7DSMatrix< double, 7, 7, MatRepSym< double, 7 > > SMatrixSym7DDefinition SMatrixDfwd.h:29; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathsmatrixincMathSMatrixDfwd.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SMatrixDfwd_8h_source.html:3165,Guid,Guide,3165,doc/master/SMatrixDfwd_8h_source.html,https://root.cern,https://root.cern/doc/master/SMatrixDfwd_8h_source.html,1,['Guid'],['Guide']
Usability,"uble> parValues = fClingParameters;; 3720 auto paramMap = fParams;; 3721 fNpar = fParams.size();; 3722 ; 3723 fLazyInitialization = true; // when reading we initialize the formula later to avoid problem of recursive Jitting; 3724 ; 3725 if (!TestBit(TFormula::kLambda) ) {; 3726 ; 3727 // save dimension read from the file (stored for V >=12); 3728 // and we check after initializing if it is the same; 3729 int ndim = fNdim;; 3730 fNdim = 0;; 3731 ; 3732 //std::cout << ""Streamer::Reading preprocess the formula "" << fFormula << "" ndim = "" << fNdim << "" npar = "" << fNpar << std::endl;; 3733 // for ( auto &p : fParams); 3734 // std::cout << ""parameter "" << p.first << "" index "" << p.second << std::endl;; 3735 ; 3736 fClingParameters.clear(); // need to be reset before re-initializing it; 3737 ; 3738 FillDefaults();; 3739 ; 3740 ; 3741 PreProcessFormula(fFormula);; 3742 ; 3743 //std::cout << ""Streamer::after pre-process the formula "" << fFormula << "" ndim = "" << fNdim << "" npar = "" << fNpar << std::endl;; 3744 ; 3745 PrepareFormula(fFormula);; 3746 ; 3747 //std::cout << ""Streamer::after prepared "" << fClingInput << "" ndim = "" << fNdim << "" npar = "" << fNpar << std::endl;; 3748 ; 3749 ; 3750 // restore parameter values; 3751 if (fNpar != (int) parValues.size() ) {; 3752 Error(""Streamer"",""number of parameters computed (%d) is not same as the stored parameters (%d)"",fNpar,int(parValues.size()) );; 3753 Print(""v"");; 3754 }; 3755 if (v > 11 && fNdim != ndim) {; 3756 Error(""Streamer"",""number of dimension computed (%d) is not same as the stored value (%d)"",fNdim, ndim );; 3757 Print(""v"");; 3758 }; 3759 }; 3760 else {; 3761 // we also delay the initialization of lamda expressions; 3762 if (!fLazyInitialization) {; 3763 bool ret = InitLambdaExpression(fFormula);; 3764 if (ret) {; 3765 fClingInitialized = true;; 3766 }; 3767 }else {; 3768 fReadyToExecute = true;; 3769 }; 3770 }; 3771 assert(fNpar == (int) parValues.size() );; 3772 std::copy( parValues.begin(), parValues.end(), fClingP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:142012,clear,clear,142012,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['clear'],['clear']
Usability,"uble_t *levels=nullptr)Set the number and values of contour levels.Definition TH1.cxx:8483; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::SetBinContentvoid SetBinContent(Int_t bin, Double_t content) overrideSet bin content.Definition TH2.cxx:2616; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TListA doubly linked list.Definition TList.h:38; TList::AfterTObject * After(const TObject *obj) const overrideReturns the object after object obj.Definition TList.cxx:328; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetTitleWvoid SetTitleW(Float_t w=0)Definition TStyle.h:415; TStyle::SetTitleHvoid SetTitleH(Float_t h=0)Definition TStyle.h:416; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; lTLine lDefinition textangle.C:4; AuthorsJosh de Bever (CSI Medical Physics Group, The University of Western Ontario, London, Ontario, Canada), Olivier Couet ; Definition in file ContourList.C. tutorialshistContourList.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ContourList_8C.html:8759,Guid,Guide,8759,doc/master/ContourList_8C.html,https://root.cern,https://root.cern/doc/master/ContourList_8C.html,1,['Guid'],['Guide']
Usability,"uble_t bestx, ystar, y1, y2, ystst, pb, wg;; 7444 Double_t absmin, rho, sig2, rho1, rho2;; 7445 Int_t npfn, i, j, k, jhold, ncycl, nparx;; 7446 Int_t nparp1, kg, jh, nf, jl, ns;; 7447 ; 7448 if (fNpar <= 0) return;; 7449 if (fAmin == fUndefi) mnamin();; 7450 fCfrom = ""SIMPLEX "";; 7451 fNfcnfr = fNfcn;; 7452 fCstatu = ""UNCHANGED "";; 7453 npfn = fNfcn;; 7454 nparp1 = fNpar + 1;; 7455 nparx = fNpar;; 7456 rho1 = alpha + 1;; 7457 rho2 = rho1 + alpha*gamma;; 7458 wg = 1 / Double_t(fNpar);; 7459 if (fISW[4] >= 0) {; 7460 Printf("" START SIMPLEX MINIMIZATION. CONVERGENCE WHEN EDM .LT. %g"",fEpsi);; 7461 }; 7462 for (i = 1; i <= fNpar; ++i) {; 7463 fDirin[i-1] = fWerr[i-1];; 7464 mndxdi(fX[i-1], i-1, dxdi);; 7465 if (dxdi != 0) fDirin[i-1] = fWerr[i-1] / dxdi;; 7466 dmin_ = fEpsma2*TMath::Abs(fX[i-1]);; 7467 if (fDirin[i-1] < dmin_) fDirin[i-1] = dmin_;; 7468 }; 7469// choose the initial simplex using single-parameter searches; 7470L1:; 7471 ynpp1 = fAmin;; 7472 jl = nparp1;; 7473 fSIMPy[nparp1-1] = fAmin;; 7474 absmin = fAmin;; 7475 for (i = 1; i <= fNpar; ++i) {; 7476 aming = fAmin;; 7477 fPbar[i-1] = fX[i-1];; 7478 bestx = fX[i-1];; 7479 kg = 0;; 7480 ns = 0;; 7481 nf = 0;; 7482L4:; 7483 fX[i-1] = bestx + fDirin[i-1];; 7484 mninex(fX);; 7485 Eval(nparx, fGin, f, fU, 4); ++fNfcn;; 7486 if (f <= aming) goto L6;; 7487// failure; 7488 if (kg == 1) goto L8;; 7489 kg = -1;; 7490 ++nf;; 7491 fDirin[i-1] *= -.4;; 7492 if (nf < 3) goto L4;; 7493 ns = 6;; 7494// success; 7495L6:; 7496 bestx = fX[i-1];; 7497 fDirin[i-1] *= 3;; 7498 aming = f;; 7499 fCstatu = ""PROGRESS "";; 7500 kg = 1;; 7501 ++ns;; 7502 if (ns < 6) goto L4;; 7503// local minimum found in ith direction; 7504L8:; 7505 fSIMPy[i-1] = aming;; 7506 if (aming < absmin) jl = i;; 7507 if (aming < absmin) absmin = aming;; 7508 fX[i-1] = bestx;; 7509 for (k = 1; k <= fNpar; ++k) { fP[k + i*fMaxpar - fMaxpar-1] = fX[k-1]; }; 7510 }; 7511 jh = nparp1;; 7512 fAmin = fSIMPy[jl-1];; 7513 mnrazz(ynpp1, fPbar, fSIMPy, jh, jl);; 7514 for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:239085,simpl,simplex,239085,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['simpl'],['simplex']
Usability,"uble_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TTree::Fillvirtual Int_t Fill()Fill all branches.Definition TTree.cxx:4603; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)Add a new branch, and infer the data type from the type of obj being passed.Definition TTree.h:353; It is not always possible to add branches to existing datasets stored in TFiles: for example, these files might not be writeable, just readable. In addition, modifying in place a TTree causes a new TTree instance to be written and the previous one to be deleted. For this reasons, ROOT offers the concept of friends for TTree and TChain: if is good practice to rely on friend trees rather than adding a branch manually. An Example. // A simple example with histograms and a tree; //; // This program creates :; // - a one dimensional histogram; // - a two dimensional histogram; // - a profile histogram; // - a tree; //; // These objects are filled with some random numbers and saved on a file.; ; #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h""; ; //__________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");; ; // Create some histograms and a profile histogram; TH1F hpx(""hpx"",""This is the px distribution"",100,-4,4);; TH2F hpxpy(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile hprof(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; ; // Define some simple structures; typedef struct {Float_t x,y,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:11550,simpl,simple,11550,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['simpl'],['simple']
Usability,"uble_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); Compute the endpoint codes for TPad::Clip. Int_t ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Double_t* xc, Double_t* yc, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); Clip polygon using the Sutherland-Hodgman algorithm. Input parameters:. n: Number of points in the polygon to be clipped; x[n], y[n] : Polygon do be clipped vertices; xclipl, yclipb, xclipr, yclipt : Clipping boundary. Output parameters:. nn: number of points in xc and yc; xc, yc: clipped polygon vertices. The Int_t returned by this function is; the number of points in the clipped polygon. These vectors must; be allocated by the calling function. A size of 2*n for each is; enough. Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; strategy: It solves a series of simple and identical problems that, when; combined, solve the overall problem. The simple problem is to clip a polygon; against a single infinite clip edge. Four clip edges, each defining one boundary; of the clip rectangle, successively clip a polygon against a clip rectangle. Steps of Sutherland-Hodgman's polygon-clipping algorithm:. * Polygons can be clipped against each edge of the window one at a time.; Windows/edge intersections, if any, are easy to find since the X or Y coordinates; are already known.; * Vertices which are kept after clipping against one window edge are saved for; clipping against the remaining edges.; * Note that the number of vertices usually changes and will often increases. The clip boundary determines a visible and invisible region. The edges from; vertex i to vertex i+1 can be one of four types:. * Case 1 : Wholly inside visible region - save endpoint; * Case 2 : Exit visible region - save the intersection; * Case 3 : Wholly outside visible region - save nothing; * Case 4 : Enter visible region - save intersection and endpoint. void Close(Option_t* option = """"); Delete a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:34286,simpl,simple,34286,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,6,['simpl'],['simple']
Usability,"uble_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::AddLinevirtual TLine * AddLine(Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0)Add a new graphics line to this pavetext.Definition TPaveText.cxx:177; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPaveA TBox with a bordersize and a shadow option.Definition TPave.h:19; TPave::Drawvoid Draw(Option_t *option="""") overrideDraw this pave with its current attributes.Definition TPave.cxx:229; TPave::DrawPavevirtual TPave * DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")Draw this pave with new coordinates.Definition TPave.cxx:241; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; TText::Printvoid Print(Option_t *option="""") const overrideDump this text with its attributes.Definition TText.cxx:788; lineTLine * lineDefinition entrylistblock_figure1.C:235; c1return c1Definition legend1.C:41; arrowDefinition RArrowDS.hxx:17; AuthorRene Brun ; Definition in file file.C. tutorialsiofile.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/file_8C.html:7283,Guid,Guide,7283,doc/master/file_8C.html,https://root.cern,https://root.cern/doc/master/file_8C.html,1,['Guid'],['Guide']
Usability,"uble_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version working with wchar_t and required by TMathText (who uses utf-8(?)). void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image displayed in the canvas pointed by ""pad"" into a; binary file.; assert(pad != 0 && ""SaveImage, parameter 'pad' is null"");; assert(fileName != 0 && ""SaveImage, parameter 'fileName' is null"");. void DrawTextNDC(Double_t u, Double_t v, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. TPadPainter(); Final overriders for TVirtualPadPainter pure virtual functions.; 1. Part, which simply delegates to TVirtualX.; Line attributes. » Author: Olivier Couet, Timur Pocheptsov 06/05/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPadPainter.html:7443,simpl,simply,7443,root/html534/TPadPainter.html,https://root.cern,https://root.cern/root/html534/TPadPainter.html,1,['simpl'],['simply']
Usability,"uble_t& seed); Randomize matrix element values. void TMatrixTBase<Element> Streamer(TBuffer& ); Stream an object of class TMatrixTBase<Element>. Element & TMatrixTBase<Element> NaNValue(). template<class Element> Element TMatrixTBase<Element> SetTol(double tol). Element * GetElements(). Int_t GetRowLwb() const; { return fRowLwb; }. Int_t GetRowUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetColLwb() const; { return fColLwb; }. Int_t GetColUpb() const; { return fNcols+fColLwb-1; }. Int_t GetNcols() const; { return fNcols; }. Int_t GetNoElements() const; { return fNelems; }. Element GetTol() const; { return fTol; }. const Element * GetMatrixArray() const. Element * GetMatrixArray(). const Int_t * GetRowIndexArray() const. Int_t * GetRowIndexArray(). const Int_t * GetColIndexArray() const. Int_t * GetColIndexArray(). TMatrixTBase<Element> & SetRowIndexArray(Int_t* data). TMatrixTBase<Element> & SetColIndexArray(Int_t* data). void Clear(Option_t* option = """"). void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. TMatrixTBase<Element> & GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, TMatrixTBase<double>& target, Option_t* option = ""S"") const. TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1). TMatrixTBase<Element> & ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros = -1). Double_t Determinant() const; { AbstractMethod(""Determinant()""); return 0.; }. void Determinant(Double_t& d1, Double_t& d2) const; { AbstractMethod(""Determinant()""); d1 = 0.; d2 = 0.; }. Element NormInf() const; { return RowNorm(); }. Element Norm1() const; { return ColNorm(); }. Element operator()(Int_t rown, Int_t coln) const. Element & operator()(Int_t rown, Int_t coln). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-02 16:20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMatrixTBase_double_.html:21982,Clear,Clear,21982,root/html604/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html604/TMatrixTBase_double_.html,1,['Clear'],['Clear']
Usability,"uble_t(npoints);; 1614 } else {; 1615 barymin = y[0];; 1616 barymax = y[0];; 1617 for (i=1;i<npoints;i++) {; 1618 if (y[i] < barymin) barymin = y[i];; 1619 if (y[i] > barymax) barymax = y[i];; 1620 }; 1621 bdelta = (barymax-barymin)/Double_t(npoints);; 1622 }; 1623 dbar = 0.5*bdelta*gStyle->GetBarWidth();; 1624 if (!optionR) {; 1625 for (i=1;i<=npoints;i++) {; 1626 xlow = x[i-1] - dbar;; 1627 xhigh = x[i-1] + dbar;; 1628 yhigh = y[i-1];; 1629 if (xlow < uxmin && xhigh < uxmin) continue;; 1630 if (xhigh > uxmax && xlow > uxmax) continue;; 1631 if (xlow < uxmin) xlow = uxmin;; 1632 if (xhigh > uxmax) xhigh = uxmax;; 1633 if (!optionOne) ylow = TMath::Max((Double_t)0,gPad->GetUymin());; 1634 else ylow = gPad->GetUymin();; 1635 gxwork[0] = xlow;; 1636 gywork[0] = ylow;; 1637 gxwork[1] = xhigh;; 1638 gywork[1] = yhigh;; 1639 ComputeLogs(2, optionZ);; 1640 if (gyworkl[0] < gPad->GetUymin()) gyworkl[0] = gPad->GetUymin();; 1641 if (gyworkl[1] < gPad->GetUymin()) continue;; 1642 if (gyworkl[1] > gPad->GetUymax()) gyworkl[1] = gPad->GetUymax();; 1643 if (gyworkl[0] > gPad->GetUymax()) continue;; 1644 ; 1645 gPad->PaintBox(gxworkl[0],gyworkl[0],gxworkl[1],gyworkl[1]);; 1646 }; 1647 } else {; 1648 for (i=1;i<=npoints;i++) {; 1649 xhigh = x[i-1];; 1650 ylow = y[i-1] - dbar;; 1651 yhigh = y[i-1] + dbar;; 1652 xlow = TMath::Max((Double_t)0, gPad->GetUxmin());; 1653 gxwork[0] = xlow;; 1654 gywork[0] = ylow;; 1655 gxwork[1] = xhigh;; 1656 gywork[1] = yhigh;; 1657 ComputeLogs(2, optionZ);; 1658 gPad->PaintBox(gxworkl[0],gyworkl[0],gxworkl[1],gyworkl[1]);; 1659 }; 1660 }; 1661 theGraph->SetFillColor(FillSave);; 1662 theGraph->TAttFill::Modify();; 1663 }; 1664 gPad->ResetBit(TGraph::kClipFrame);; 1665 ; 1666 gxwork.clear();; 1667 gywork.clear();; 1668 gxworkl.clear();; 1669 gyworkl.clear();; 1670}; 1671 ; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// This is a service method used by `THistPainter`; 1675/// to paint 1D histograms. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:59111,ux,uxmin,59111,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,8,['ux'],"['uxmax', 'uxmin']"
Usability,"uble_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidTUnfoldSys::DoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tTUnfold::DoUnfold(); voidTUnfold::ErrorMatrixToHist(TH2* ematrix, const TMatrixDSparse* emat, const Int_t* binMap, Bool_t doClear) const; const TMatrixDSparse*TUnfold::GetAx() const; Int_tTUnfold::GetBinFromRow(int ix) const; Double_tGetDensityFactor(TUnfoldDensity::EDensityMode densityMode, Int_t iBin) const; const TMatrixDSparse*TUnfold::GetDXDAM(int i) const; const TMatrixDSparse*TUnfold::GetDXDAZ(int i) const; const TMatrixDSparse*TUnfold::GetDXDtauSquared() const; const TMatrixDSparse*TUnfold::GetDXDY() const; const TMatrixDSparse*TUnfold::GetE() const; const TMatrixDSparse*TUnfold::GetEinv() const; voidTUnfoldSys::GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); Int_tTUnfold::GetNx() const; Int_tTUnfold::GetNy() const; virtual TStringGetOutputBinName(Int_t iBinX) const; Double_tTUnfold::GetRhoIFromMatrix(TH1* rhoi, const TMatrixDSparse* eOrig, const Int_t* binMap, TH2* invEmat) const; Int_tTUnfold::GetRowFromBin(int ix) const; TMatrixDSparse*TUnfoldSys::GetSummedErrorMatrixXX(); TMatrixDSparse*TUnfoldSys::GetSummedErrorMatrixYY(); const TMatrixDSparse*TUnfold::GetVxx() const; const TMatrixDSparse*TUnfold::GetVxxInv() const; const TMatrixDSparse*TUnfold::GetVyyInv() const; const TMatrixD*TUnfold::GetX() const; TMatrixDSparse*TUnfold::InvertMSparseSymmPos(const TMatrixDSparse* A, Int_t* rank) const; voidTObject::MakeZombie(); TMatrixDSparse*TUnfold::MultiplyMSparseM(const TMatrixDSparse* a, const TMatrixD* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparseTranspVector(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldDensity.html:17571,clear,clearEmat,17571,root/html534/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html534/TUnfoldDensity.html,3,['clear'],['clearEmat']
Usability,"uble_t* err = 0, Double_t* errUpper = 0); return boosted MVA response. Double_t GetBoostROCIntegral(Bool_t , TMVA::Types::ETreeType , Bool_t CalcOverlapIntergral = kFALSE); Calculate the ROC integral of a single classifier or even the; whole boosted classifier. The tree type (training or testing; sample) is specified by 'eTT'. If tree type kTraining is set, the original training sample is; used to compute the ROC integral (original weights). - singleMethod - if kTRUE, return ROC integral of single (last; trained) classifier; if kFALSE, return ROC; integral of full classifier. - eTT - tree type (Types::kTraining / Types::kTesting). - CalcOverlapIntergral - if kTRUE, the overlap integral of the; signal/background MVA distributions; is calculated and stored in; 'fOverlap_integral'. void CalcMVAValues(); Calculate MVA values of current method fMethods.back() on; training sample. void SetBoostedMethodName(TString methodName); { fBoostedMethodName = methodName; }. Int_t GetBoostNum(); { return fBoostNum; }. TH1* GetMonitoringHist(Int_t histInd); gives the monitoring historgram from the vector according to index of the; histrogram added in the MonitorBoost function. { return (*fMonitorHist)[fDefaultHistNum+histInd]; }. void AddMonitoringHist(TH1* hist); { return fMonitorHist->push_back(hist); }. Types::EBoostStage GetBoostStage(); { return fBoostStage; }. void ClearAll(); clean up. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; print fit results. MethodBoost* SetStage(TMVA::Types::EBoostStage stage); { fBoostStage = stage; return this; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Or Cohen, Jan Therhaag, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id: MethodBoost.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodBoost.html:22118,Clear,ClearAll,22118,root/html532/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodBoost.html,1,['Clear'],['ClearAll']
Usability,"uble_tTGeoTrapEditor::fThetaiInitial theta; Double_tTGeoTrapEditor::fTl1iInitial half length in x at low z and y high edge; Double_tfTwistiInitial twist angle; TGTextButton*TGeoTrapEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for gtra editor. ~TGeoGtraEditor(); Destructor. void SetModel(TObject* obj); Connect to a given twisted trapezoid. void DoApply(); Slot for applying current settings. void DoUndo(); Slot for undoing last operation. void DoTwist(); Change the twist angle. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTrapEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGtraEditor.html:22415,undo,undoing,22415,root/html528/TGeoGtraEditor.html,https://root.cern,https://root.cern/root/html528/TGeoGtraEditor.html,1,['undo'],['undoing']
Usability,"uble_tTGeoTrapEditor::fThetaiInitial theta; Double_tTGeoTrapEditor::fTl1iInitial half length in x at low z and y high edge; Double_tfTwistiInitial twist angle; TGTextButton*TGeoTrapEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for gtra editor. ~TGeoGtraEditor(); Destructor. void SetModel(TObject* obj); Connect to a given twisted trapezoid. void DoApply(); Slot for applying current settings. void DoUndo(); Slot for undoing last operation. void DoTwist(); Change the twist angle. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTrapEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoGtraEditor.html:22515,undo,undoing,22515,root/html530/TGeoGtraEditor.html,https://root.cern,https://root.cern/root/html530/TGeoGtraEditor.html,1,['undo'],['undoing']
Usability,"uble_tTGeoTrapEditor::fThetaiInitial theta; Double_tTGeoTrapEditor::fTl1iInitial half length in x at low z and y high edge; Double_tfTwistiInitial twist angle; TGTextButton*TGeoTrapEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for gtra editor. ~TGeoGtraEditor(); Destructor. void SetModel(TObject* obj); Connect to a given twisted trapezoid. void DoApply(); Slot for applying current settings. void DoUndo(); Slot for undoing last operation. void DoTwist(); Change the twist angle. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTrapEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoGtraEditor.html:22515,undo,undoing,22515,root/html532/TGeoGtraEditor.html,https://root.cern,https://root.cern/root/html532/TGeoGtraEditor.html,1,['undo'],['undoing']
Usability,"uble_tfYiInitial Y; Double_tfZiInitial Z; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoParaEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoX(); Slot for X. void DoY(); Slot for Y. void DoZ(); Slot for Z. void DoAlpha(); Slot for alpha. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoParaEditor.html:21453,undo,undoing,21453,root/html534/TGeoParaEditor.html,https://root.cern,https://root.cern/root/html534/TGeoParaEditor.html,1,['undo'],['undoing']
Usability,"uble_t ; c1 = 1 . ). overridevirtual . Performs the operation: this = this*c1*f1. ; The function return kFALSE if the Multiply operation failed ; Reimplemented from TH1.; Definition at line 1202 of file TProfile.cxx. ◆ operator=(). TProfile & TProfile::operator= ; (; const TProfile & ; profile). Definition at line 249 of file TProfile.cxx. ◆ ProjectionX(). TH1D * TProfile::ProjectionX ; (; const char * ; name = ""_px"", . Option_t * ; option = ""e"" . ); const. Project this profile into a 1-D histogram along X. ; The projection is always of the type TH1D. if option ""E"" is specified the errors of the projected histogram are computed and set to be equal to the errors of the profile. Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram will be equal to the GetBinEntries(bin) of the profile, otherwise (default) it will be equal to GetBinContent(bin); if option ""C=E"" the bin contents of the projection are set to the bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the product of the bin content of the profile and the entries. With this option the returned histogram will be equivalent to the one obtained by filling directly a TH1D using the 2-nd value as a weight. This makes sense only for profile filled with weights =1. If not, the error of the projected histogram obtained with this option will not be correct. . Definition at line 1283 of file TProfile.cxx. ◆ PutStats(). void TProfile::PutStats ; (; Double_t * ; stats). overridevirtual . Replace current statistics with the values in array stats. ; Reimplemented from TH1.; Definition at line 1358 of file TProfile.cxx. ◆ Rebin(). TH1 * TProfile::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). overridevirtual . Rebin this profile grouping ngroup bins toge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:80228,simpl,simply,80228,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['simpl'],['simply']
Usability,"uble_t ; dz, . TGeoRotation * ; rot . ). Constructor from a translation specified by X,Y,Z and a pointer to a rotation. ; The rotation will not be owned by this. ; Definition at line 1746 of file TGeoMatrix.cxx. ◆ TGeoCombiTrans() [7/7]. TGeoCombiTrans::TGeoCombiTrans ; (; const char * ; name, . Double_t ; dx, . Double_t ; dy, . Double_t ; dz, . TGeoRotation * ; rot . ). Named ctor. ; Definition at line 1756 of file TGeoMatrix.cxx. ◆ ~TGeoCombiTrans(). TGeoCombiTrans::~TGeoCombiTrans ; (; ). override . destructor ; Definition at line 1841 of file TGeoMatrix.cxx. Member Function Documentation. ◆ Class(). static TClass * TGeoCombiTrans::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoCombiTrans::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoCombiTrans::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 365 of file TGeoMatrix.h. ◆ Clear(). void TGeoCombiTrans::Clear ; (; Option_t * ; option = """"). overridevirtual . Reset translation/rotation to identity. ; Reimplemented from TObject.; Reimplemented in TGeoGenTrans.; Definition at line 1852 of file TGeoMatrix.cxx. ◆ DeclFileName(). static const char * TGeoCombiTrans::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 365 of file TGeoMatrix.h. ◆ GetRotation(). TGeoRotation * TGeoCombiTrans::GetRotation ; (; ); const. inline . Definition at line 359 of file TGeoMatrix.h. ◆ GetRotationMatrix(). const Double_t * TGeoCombiTrans::GetRotationMatrix ; (; ); const. overridevirtual . get the rotation array ; Implements TGeoMatrix.; Definition at line 2213 of file TGeoMatrix.cxx. ◆ GetScale(). const Double_t * TGeoCombiTrans::GetScale ; (; ); const. inlineoverridevirtual . Implements TGeoMatrix.; Reimplemented in TGeoGenTrans.; Definition at line 363 of file TGeoMatrix.h. ◆ GetTranslation(). const Double_t * TGeoCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCombiTrans.html:19609,Clear,Clear,19609,doc/master/classTGeoCombiTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html,1,['Clear'],['Clear']
Usability,"uble UpperLimitEstimatedError ();  Estimate of lower limit error function evaluates only a rough error on the lower limit. ;  ; void UseCLs (bool on=true);  flag to switch between using CLsb (default) or CLs as confidence level ;  ;  Public Member Functions inherited from RooStats::SimpleInterval;  SimpleInterval (const char *name, const RooRealVar &var, double lower, double upper, double cl);  constructor from name, the Parameter of interest and lower/upper bound values ;  ;  SimpleInterval (const char *name=nullptr);  default constructor ;  ;  SimpleInterval (const SimpleInterval &other, const char *name);  default constructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are correct (i.e. they are the POI of this interval) ;  ; double ConfidenceLevel () const override;  return the confidence interval ;  ; RooArgSet * GetParameters () const override;  return a cloned list with the parameter of interest ;  ; TClass * IsA () const override;  ; bool IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; SimpleInterval & operator= (const SimpleInterval &other);  default constructor ;  ; void SetConfidenceLevel (double) override;  set the confidence level for the interval. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::ConfInterval;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; ConfInterval & operator= (const ConfInterval &other);  operator= ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:7633,Simpl,SimpleInterval,7633,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"ublic Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiFitFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ; Definition at line 58 of file GSLMultiFitFunctionWrapper.h. Public Member Functions;  GSLMultiFitFunctionWrapper ();  ; gsl_multifit_function_fdf * GetFunc ();  ; template<class FuncVector > ; void SetFunction (const FuncVector &f, unsigned int nres, unsigned int npar);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multifit_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFitFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiFitFunctionWrapper(). ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapper ; (; ). inline . Definition at line 62 of file GSLMultiFitFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_multifit_function_fdf * ROOT::Math::GSLMultiFitFunctionWrapper::GetFunc ; (; ). inline . Definition at line 90 of file GSLMultiFitFunctionWrapper.h. ◆ SetFunction(). template<class FuncVector > . void ROOT::Math::GSLMultiFitFunctionWrapper::SetFunction ; (; const FuncVector & ; f, . unsigned int ; nres, . unsigned int ; npar . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 79 of file GSLMultiFitFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multifit_function_fdf ROOT::Math::GSLMultiFitFunctionWrapper::fFunc. private . Definition at line 95 of file GSLMultiFitFunctionWrapper.h. math/mathmore/src/GSLMultiFitFunctionWrapper.h. ROOTMathGSLMultiFitFunctionWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html:2089,Guid,Guide,2089,doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html,1,['Guid'],['Guide']
Usability,"ublic TColor. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TColorGradient(const TColorGradient&); ~TColorGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColorGradient.html:1155,Clear,Clear,1155,root/html534/TColorGradient.html,https://root.cern,https://root.cern/root/html534/TColorGradient.html,1,['Clear'],['Clear']
Usability,"ublic:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMapfDescriptionMapstores the key, value pairs of the JDL; TMapfMapstores the key, value pairs of the JDL. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGridJDL(); Cleanup. void Clear(const Option_t* = 0); Clears the JDL information. void SetValue(const char* key, const char* value); Sets a value. If the entry already exists the old one is replaced. const char * GetValue(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. void SetDescription(const char* key, const char* description); Sets a value. If the entry already exists the old one is replaced. const char * GetDescription(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. TString AddQuotes(const char* value); Adds quotes to the provided string.; E.g. Value --> ""Value"". void AddToSet(const char* key, const char* value); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. void AddToSetDescription(const char* key, const char* description); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. TString Generate(); Generates the JDL snippet. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGridJDL.html:8089,Clear,Clear,8089,root/html602/TGridJDL.html,https://root.cern,https://root.cern/root/html602/TGridJDL.html,4,['Clear'],"['Clear', 'Clears']"
Usability,"ubset that is currently available is:; 662- AsNumpy; 663- Count; 664- Define; 665- DefinePerSample; 666- Filter; 667- Graph; 668- Histo[1,2,3]D; 669- HistoND; 670- Max; 671- Mean; 672- Min; 673- Profile[1,2,3]D; 674- Redefine; 675- Snapshot; 676- Stats; 677- StdDev; 678- Sum; 679- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 680- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 681- Information about the dataframe: GetColumnNames.; 682 ; 683with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 684currently not supported.; 685 ; 686\note The distributed RDataFrame module requires at least Python version 3.8.; 687 ; 688### Connecting to a Spark cluster; 689 ; 690In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 691official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 692connection instance to the distributed `RDataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT; 697 ; 698# Create a SparkContext object with the right configuration for your Spark cluster; 699conf = SparkConf().setAppName(appName).setMaster(master); 700sc = SparkContext(conf=conf); 701 ; 702# Point RDataFrame calls to the Spark specific RDataFrame; 703RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 704 ; 705# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 706# and it will distribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 711is not provided, the default behaviour is to create one in the background for you.; 712 ; 713### Connecting to a Dask cluste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:40422,guid,guide,40422,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['guid'],['guide']
Usability,"ubset that is currently available is:; 702- AsNumpy; 703- Count; 704- Define; 705- DefinePerSample; 706- Filter; 707- Graph; 708- Histo[1,2,3]D; 709- HistoND; 710- Max; 711- Mean; 712- Min; 713- Profile[1,2,3]D; 714- Redefine; 715- Snapshot; 716- Stats; 717- StdDev; 718- Sum; 719- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 720- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 721- Information about the dataframe: GetColumnNames.; 722 ; 723with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 724currently not supported.; 725 ; 726\note The distributed RDataFrame module requires at least Python version 3.8.; 727 ; 728### Connecting to a Spark cluster; 729 ; 730In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 731official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 732connection instance to the distributed `RDataFrame` object like so:; 733 ; 734~~~{.py}; 735import pyspark; 736import ROOT; 737 ; 738# Create a SparkContext object with the right configuration for your Spark cluster; 739conf = SparkConf().setAppName(appName).setMaster(master); 740sc = SparkContext(conf=conf); 741 ; 742# Point RDataFrame calls to the Spark specific RDataFrame; 743RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 744 ; 745# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 746# and it will distribute the application to the connected cluster; 747df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 748~~~; 749 ; 750If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 751is not provided, the default behaviour is to create one in the background for you.; 752 ; 753### Connecting to a Dask cluste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:42062,guid,guide,42062,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['guid'],['guide']
Usability,"uctor & Destructor Documentation. ◆ GSLFunctionDerivWrapper(). ROOT::Math::GSLFunctionDerivWrapper::GSLFunctionDerivWrapper ; (; ). inline . Definition at line 109 of file GSLFunctionWrapper.h. Member Function Documentation. ◆ Derivative(). double ROOT::Math::GSLFunctionDerivWrapper::Derivative ; (; double ; x). inline . Definition at line 129 of file GSLFunctionWrapper.h. ◆ Fdf(). void ROOT::Math::GSLFunctionDerivWrapper::Fdf ; (; double ; x, . double & ; f, . double & ; df . ). inline . Definition at line 131 of file GSLFunctionWrapper.h. ◆ GetFunc(). gsl_function_fdf * ROOT::Math::GSLFunctionDerivWrapper::GetFunc ; (; ). inline . Definition at line 124 of file GSLFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLFunctionDerivWrapper::IsValid ; (; ). inline . check if function is valid (has been set) ; Definition at line 136 of file GSLFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLFunctionDerivWrapper::operator() ; (; double ; x). inline . Definition at line 127 of file GSLFunctionWrapper.h. ◆ SetDerivPointer(). void ROOT::Math::GSLFunctionDerivWrapper::SetDerivPointer ; (; GSLFuncPointer ; f). inline . Definition at line 119 of file GSLFunctionWrapper.h. ◆ SetFdfPointer(). void ROOT::Math::GSLFunctionDerivWrapper::SetFdfPointer ; (; GSLFdfPointer ; f). inline . Definition at line 120 of file GSLFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLFunctionDerivWrapper::SetFuncPointer ; (; GSLFuncPointer ; f). inline . Definition at line 118 of file GSLFunctionWrapper.h. ◆ SetParams(). void ROOT::Math::GSLFunctionDerivWrapper::SetParams ; (; void * ; p). inline . Definition at line 121 of file GSLFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_function_fdf ROOT::Math::GSLFunctionDerivWrapper::fFunc. private . Definition at line 141 of file GSLFunctionWrapper.h. math/mathmore/src/GSLFunctionWrapper.h. ROOTMathGSLFunctionDerivWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html:2923,Guid,Guide,2923,doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html,1,['Guid'],['Guide']
Usability,"uctor & Destructor Documentation. ◆ TDrawFeedback(). TDrawFeedback::TDrawFeedback ; (; TProof * ; proof = 0, . TSeqCollection * ; names = 0 . ). Constructor. ; Definition at line 41 of file TDrawFeedback.cxx. ◆ ~TDrawFeedback(). TDrawFeedback::~TDrawFeedback ; (; ). override . Destructor. ; Definition at line 80 of file TDrawFeedback.cxx. Member Function Documentation. ◆ Class(). static TClass * TDrawFeedback::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDrawFeedback::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDrawFeedback::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 54 of file TDrawFeedback.h. ◆ DeclFileName(). static const char * TDrawFeedback::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 54 of file TDrawFeedback.h. ◆ Feedback(). void TDrawFeedback::Feedback ; (; TList * ; objs). Display feedback. ; Definition at line 93 of file TDrawFeedback.cxx. ◆ GetName(). const char * TDrawFeedback::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 50 of file TDrawFeedback.h. ◆ Hash(). ULong_t TDrawFeedback::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:16090,Feedback,Feedback,16090,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,1,['Feedback'],['Feedback']
Usability,"uctor & Destructor Documentation. ◆ ~VirtualIntegratorMultiDim(). ROOT::Math::VirtualIntegratorMultiDim::~VirtualIntegratorMultiDim ; (; ). inlineoverride . destructor: no operation ; Definition at line 165 of file VirtualIntegrator.h. Member Function Documentation. ◆ Integral(). virtual double ROOT::Math::VirtualIntegratorMultiDim::Integral ; (; const double * ; , . const double * ;  . ). pure virtual . evaluate multi-dim integral ; Implemented in ROOT::Math::GSLMCIntegrator, and ROOT::Math::AdaptiveIntegratorMultiDim. ◆ Options(). virtual ROOT::Math::IntegratorMultiDimOptions ROOT::Math::VirtualIntegratorMultiDim::Options ; (; ); const. pure virtual . get the option used for the integration implement by derived class otherwise return default ones ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator. ◆ SetFunction(). virtual void ROOT::Math::VirtualIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; ). pure virtual . setting a multi-dim function ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator. ◆ SetOptions(). virtual void ROOT::Math::VirtualIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inlinevirtual . set the options (if needed must be re-implemented by derived classes) ; Reimplemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator.; Definition at line 183 of file VirtualIntegrator.h. ◆ Type(). virtual ROOT::Math::IntegrationMultiDim::Type ROOT::Math::VirtualIntegratorMultiDim::Type ; (; ); const. inlinevirtual . return type of integrator ; Definition at line 178 of file VirtualIntegrator.h. Libraries for ROOT::Math::VirtualIntegratorMultiDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/VirtualIntegrator.h. ROOTMathVirtualIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html:4330,Guid,Guide,4330,doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,1,['Guid'],['Guide']
Usability,"uctures and perform some checks. Note the messages posted after the statement is executed. We will describe the corresponding operations later.; root[] gGeoManager->CloseGeometry();; Now we are really done with geometry building stage, but we would like to see our simple world:; root[] top->SetLineColor(kMagenta);; root[] gGeoManager->SetTopVisible(); // the TOP is invisible; root[] top->Draw();; 18.1.2 Example 2: A Geometrical Hierarchy Look and Feel; Before going further, let us get a look and feel of interacting with the modeller. For this, we will use one of the examples illustrating the geometry package. To get an idea on the geometry structure created in this example, just look at the link: http://root.cern.ch/root/html/tutorials/geom/rootgeom.C.html. You will notice that this is a bit more complex that just creating the “world” since several other volumes are created and put together in a hierarchy. The purpose here is just to learn how to interact with a geometry that is already built, but just few hints on the building steps in this example might be useful. The geometry here represents the word ROOT that is replicated in some symmetric manner. You might for instance ask some questions after having a first look:; Q: “OK, I understand the first lines that load the libGeom library and create a geometry manager object. I also recognize from the previous example the following lines creating some materials and media, but what about the geometrical transformations below?”; A: As explained before, the model that we are trying to create is a hierarchy of volumes based on containment. This is accomplished by positioning some volumes inside others. Any volume is an un-positioned object in the sense that it defines only a local frame (matching the one of its shape). In order to fully define the mother-daughter relationship between two volumes one has to specify how the daughter will be positioned inside. This is accomplished by defining a local geometrical transformatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:879286,learn,learn,879286,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learn']
Usability,udaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NkNN;  CEvent;  CModulekNN;  CNode;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidation;  CCrossValidationResult;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeBase class for all machine learning algorithms ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:70681,learn,learning,70681,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['learn'],['learning']
Usability,"ude </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tree/clonesA_Event.h>. Inheritance diagram for TMrbSubevent_Caen:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMrbSubevent_Caen(). TMrbSubevent_Caen::TMrbSubevent_Caen ; (; ). inline . Definition at line 49 of file clonesA_Event.h. ◆ ~TMrbSubevent_Caen(). virtual TMrbSubevent_Caen::~TMrbSubevent_Caen ; (; ). inlinevirtual . Definition at line 50 of file clonesA_Event.h. Member Function Documentation. ◆ Class(). static TClass * TMrbSubevent_Caen::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMrbSubevent_Caen::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMrbSubevent_Caen::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 58 of file clonesA_Event.h. ◆ Clear(). void TMrbSubevent_Caen::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 51 of file clonesA_Event.h. ◆ DeclFileName(). static const char * TMrbSubevent_Caen::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file clonesA_Event.h. ◆ GetHitBuffer(). TUsrHitBuffer * TMrbSubevent_Caen::GetHitBuffer ; (; ). inline . Definition at line 52 of file clonesA_Event.h. ◆ IsA(). virtual TClass * TMrbSubevent_Caen::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TUsrSevtData1, and TUsrSevtData2.; Definition at line 58 of file clonesA_Event.h. ◆ Streamer(). virtual void TMrbSubevent_Caen::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TUsrSevtData1, and TUsrSevtData2. ◆ StreamerNVirtual(). void TMrbSubevent_Caen::StreamerNVirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMrbSubevent__Caen.html:10925,Clear,Clear,10925,doc/master/classTMrbSubevent__Caen.html,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html,1,['Clear'],['Clear']
Usability,"ude <TMVA/MinuitWrapper.h>. Inheritance diagram for TMVA::MinuitWrapper:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MinuitWrapper(). TMVA::MinuitWrapper::MinuitWrapper ; (; IFitterTarget & ; target, . Int_t ; maxpar . ). constructor ; Definition at line 38 of file MinuitWrapper.cxx. ◆ ~MinuitWrapper(). virtual TMVA::MinuitWrapper::~MinuitWrapper ; (; ). inlinevirtual . Definition at line 51 of file MinuitWrapper.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MinuitWrapper::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MinuitWrapper::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MinuitWrapper::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 69 of file MinuitWrapper.h. ◆ Clear(). void TMVA::MinuitWrapper::Clear ; (; Option_t * ; = nullptr). virtual . reset the fitter environment ; Reimplemented from TObject.; Definition at line 74 of file MinuitWrapper.cxx. ◆ Clone(). TObject * TMVA::MinuitWrapper::Clone ; (; char const * ; newname); const. virtual . produces a clone of this MinuitWrapper ; Reimplemented from TObject.; Definition at line 132 of file MinuitWrapper.cxx. ◆ DeclFileName(). static const char * TMVA::MinuitWrapper::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file MinuitWrapper.h. ◆ Eval(). Int_t TMVA::MinuitWrapper::Eval ; (; Int_t ; , . Double_t * ; , . Double_t & ; f, . Double_t * ; par, . Int_t ;  . ). virtual . std::vector<Double_t> parameters( npar ); ; Reimplemented from TMinuit.; Definition at line 51 of file MinuitWrapper.cxx. ◆ ExecuteCommand(). Int_t TMVA::MinuitWrapper::ExecuteCommand ; (; const char * ; command, . Double_t * ; args, . Int_t ; nargs . ). Execute a fitter command; command : comm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html:25064,Clear,Clear,25064,doc/master/classTMVA_1_1MinuitWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html,1,['Clear'],['Clear']
Usability,"udes; Libraries. Function documentation; TMethodArg(MethodArgInfo_t* info = 0, TFunction* method = 0); Default TMethodArg ctor. TMethodArgs are constructed in TFunction; via a call to TCint::CreateListOfMethodArgs(). ~TMethodArg(); TMethodArg dtor deletes adopted CINT MethodArgInfo object. const char * GetDefault() const; Get default value of method argument. const char * GetTypeName() const; Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory""; Result needs to be used or copied immediately. const char * GetFullTypeName() const; Get full type description of method argument, e.g.: ""class TDirectory*"". Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of possible options - according to pointed datamember.; If there is no datamember field assigned to this methodarg - returns 0. TDataMember * GetDataMember() const; Returns TDataMember pointed by this methodarg.; If you want to specify list of options or current value for your; MethodArg (i.e. it is used as initial values in argument-asking dialogs; popped up from context-meny),you can get this value from one of data; members of the class.; The only restriction is, that this DataMember object must have its; Getter/Setter methods set-up correctly - for details look at TDataMember.; To learn how to specify the data member to which the argument should; ""point"", look at TMethod. This is TMethod which sets up fDataMember,; so it could work correctly. TMethodArg(const TMethodArg& ). TMethodArg& operator=(const TMethodArg& ). TFunction * GetMethod() const; { return fMethod; }. » Author: Rene Brun 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TMethodArg.h 25986 2008-10-28 08:39:44Z brun $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodArg.html:7604,learn,learn,7604,root/html528/TMethodArg.html,https://root.cern,https://root.cern/root/html528/TMethodArg.html,1,['learn'],['learn']
Usability,"udes; Libraries. Function documentation; TMethodArg(MethodArgInfo_t* info = 0, TFunction* method = 0); Default TMethodArg ctor. TMethodArgs are constructed in TFunction; via a call to TCint::CreateListOfMethodArgs(). ~TMethodArg(); TMethodArg dtor deletes adopted CINT MethodArgInfo object. const char * GetDefault() const; Get default value of method argument. const char * GetTypeName() const; Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory""; Result needs to be used or copied immediately. const char * GetFullTypeName() const; Get full type description of method argument, e.g.: ""class TDirectory*"". Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of possible options - according to pointed datamember.; If there is no datamember field assigned to this methodarg - returns 0. TDataMember * GetDataMember() const; Returns TDataMember pointed by this methodarg.; If you want to specify list of options or current value for your; MethodArg (i.e. it is used as initial values in argument-asking dialogs; popped up from context-meny),you can get this value from one of data; members of the class.; The only restriction is, that this DataMember object must have its; Getter/Setter methods set-up correctly - for details look at TDataMember.; To learn how to specify the data member to which the argument should; ""point"", look at TMethod. This is TMethod which sets up fDataMember,; so it could work correctly. TMethodArg(const TMethodArg& ). TMethodArg& operator=(const TMethodArg& ). TFunction * GetMethod() const; { return fMethod; }. » Author: Rene Brun 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TMethodArg.h 25986 2008-10-28 08:39:44Z brun $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMethodArg.html:7673,learn,learn,7673,root/html530/TMethodArg.html,https://root.cern,https://root.cern/root/html530/TMethodArg.html,1,['learn'],['learn']
Usability,"udes; Libraries. Function documentation; TMethodArg(MethodArgInfo_t* info = 0, TFunction* method = 0); Default TMethodArg ctor. TMethodArgs are constructed in TFunction; via a call to TCint::CreateListOfMethodArgs(). ~TMethodArg(); TMethodArg dtor deletes adopted CINT MethodArgInfo object. const char * GetDefault() const; Get default value of method argument. const char * GetTypeName() const; Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory""; Result needs to be used or copied immediately. const char * GetFullTypeName() const; Get full type description of method argument, e.g.: ""class TDirectory*"". Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of possible options - according to pointed datamember.; If there is no datamember field assigned to this methodarg - returns 0. TDataMember * GetDataMember() const; Returns TDataMember pointed by this methodarg.; If you want to specify list of options or current value for your; MethodArg (i.e. it is used as initial values in argument-asking dialogs; popped up from context-meny),you can get this value from one of data; members of the class.; The only restriction is, that this DataMember object must have its; Getter/Setter methods set-up correctly - for details look at TDataMember.; To learn how to specify the data member to which the argument should; ""point"", look at TMethod. This is TMethod which sets up fDataMember,; so it could work correctly. TMethodArg(const TMethodArg& ). TMethodArg& operator=(const TMethodArg& ). TFunction * GetMethod() const; { return fMethod; }. » Author: Rene Brun 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TMethodArg.h 25986 2008-10-28 08:39:44Z brun $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMethodArg.html:7812,learn,learn,7812,root/html532/TMethodArg.html,https://root.cern,https://root.cern/root/html532/TMethodArg.html,1,['learn'],['learn']
Usability,"ude ; kTree ; kDoc . Definition at line 65 of file TDocOutput.h. ◆ EGraphvizTool. enum TDocOutput::EGraphvizTool. protected . EnumeratorkDot ; kNeato ; kFdp ; kCirco . Definition at line 39 of file TDocOutput.h. Constructor & Destructor Documentation. ◆ TDocOutput(). TDocOutput::TDocOutput ; (; THtml & ; html). Definition at line 255 of file TDocOutput.cxx. ◆ ~TDocOutput(). TDocOutput::~TDocOutput ; (; ). override . Definition at line 260 of file TDocOutput.cxx. Member Function Documentation. ◆ AddLink(). void TDocOutput::AddLink ; (; TSubString & ; str, . TString & ; link, . const char * ; comment . ). protected . Add a link around str, with title comment. ; Update str so it surrounds the link. ; Definition at line 267 of file TDocOutput.cxx. ◆ AdjustSourcePath(). void TDocOutput::AdjustSourcePath ; (; TString & ; line, . const char * ; relpath = ""../"" . ). virtual . adjust the path of links for source files, which are in src/, but need to point to relpath (usually ""../""). ; Simply replaces ""=\""./"" by ""=\""../"" ; Definition at line 296 of file TDocOutput.cxx. ◆ CaseInsensitiveSort(). int TDocOutput::CaseInsensitiveSort ; (; const void * ; name1, . const void * ; name2 . ). protected . ◆ Class(). static TClass * TDocOutput::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDocOutput::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDocOutput::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 110 of file TDocOutput.h. ◆ Convert(). void TDocOutput::Convert ; (; std::istream & ; in, . const char * ; infilename, . const char * ; outfilename, . const char * ; title, . const char * ; relpath = ""../"", . Int_t ; includeOutput = 0, . const char * ; context = """", . TGClient * ; gclient = 0 . ). Convert a text file into a html file. ; outfilename doesn't have an extension yet; up to us to decide. We generate HTML, so our extension i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:16830,Simpl,Simply,16830,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['Simpl'],['Simply']
Usability,"udyPackFileName);  ;  RooStudyManager (RooWorkspace &w);  ;  RooStudyManager (RooWorkspace &w, RooAbsStudy &study);  ; void addStudy (RooAbsStudy &study);  ; TClass * IsA () const override;  ; void prepareBatchInput (const char *studyName, Int_t nExpPerJob, bool unifiedInput);  ; void processBatchOutput (const char *filePat);  ; void run (Int_t nExperiments);  ; void runProof (Int_t nExperiments, const char *proofHost="""", bool showGui=true);  Open PROOF-Lite session. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; std::list< RooAbsStudy * > & studies ();  ; RooWorkspace & wspace ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStudyManager.html:1528,Clear,Clear,1528,doc/master/classRooStudyManager.html,https://root.cern,https://root.cern/doc/master/classRooStudyManager.html,1,['Clear'],['Clear']
Usability,"ue if all objects are RooRealVars, false otherwise. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SequentialProposal.html:2528,Clear,Clear,2528,doc/master/classRooStats_1_1SequentialProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SequentialProposal.html,2,['Clear'],['Clear']
Usability,ue if the volume is an assembly or a scaled assembly. ; Reimplemented from TGeoVolume.; Definition at line 353 of file TGeoVolume.h. ◆ IsVisible(). Bool_t TGeoVolumeAssembly::IsVisible ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoVolume.; Definition at line 354 of file TGeoVolume.h. ◆ MakeAssemblyFromVolume(). TGeoVolumeAssembly * TGeoVolumeAssembly::MakeAssemblyFromVolume ; (; TGeoVolume * ; vol). static . Make a clone of volume VOL but which is an assembly. ; Definition at line 3088 of file TGeoVolume.cxx. ◆ operator=(). TGeoVolumeAssembly & TGeoVolumeAssembly::operator= ; (; const TGeoVolumeAssembly & ; ). privatedelete . ◆ SetCurrentNodeIndex(). void TGeoVolumeAssembly::SetCurrentNodeIndex ; (; Int_t ; index). Definition at line 2929 of file TGeoVolume.cxx. ◆ SetNextNodeIndex(). void TGeoVolumeAssembly::SetNextNodeIndex ; (; Int_t ; index). Definition at line 2936 of file TGeoVolume.cxx. ◆ Streamer(). void TGeoVolumeAssembly::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TGeoVolume. ; Reimplemented from TGeoVolume. ◆ StreamerNVirtual(). void TGeoVolumeAssembly::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 359 of file TGeoVolume.h. Member Data Documentation. ◆ fMutex. std::mutex TGeoVolumeAssembly::fMutex. mutableprotected . Thread vector size. ; Definition at line 333 of file TGeoVolume.h. ◆ fThreadData. std::vector<ThreadData_t *> TGeoVolumeAssembly::fThreadData. mutableprotected . Definition at line 331 of file TGeoVolume.h. ◆ fThreadSize. Int_t TGeoVolumeAssembly::fThreadSize. mutableprotected . Thread specific data vector. ; Definition at line 332 of file TGeoVolume.h. Libraries for TGeoVolumeAssembly:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoVolume.h; geom/geom/src/TGeoVolume.cxx. TGeoVolumeAssembly. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:37042,Guid,Guide,37042,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,1,['Guid'],['Guide']
Usability,"ue is -1 in case of error and TSelector::GetStatus() in case of success. ;  ; Long64_t Process (TSelector *selector, Long64_t nentries=-1, Option_t *option="""");  Process the specified TSelector object 'nentries' times. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:2054,Clear,ClearInput,2054,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,2,['Clear'],"['Clear', 'ClearInput']"
Usability,"ue, TString >::type operator+ ; (; T ; u, . const TString & ; s . ). friend . Definition at line 544 of file TString.h. ◆ operator+ [9/11]. template<class T > . std::enable_if< ROOT::TypeTraits::IsFloatNumeral< T >::value, TString >::type operator+ ; (; TString ; s, . T ; f . ). friend . Definition at line 529 of file TString.h. ◆ operator+ [10/11]. template<class T > . std::enable_if< ROOT::TypeTraits::IsSignedNumeral< T >::value, TString >::type operator+ ; (; TString ; s, . T ; i . ). friend . Definition at line 529 of file TString.h. ◆ operator+ [11/11]. template<class T > . std::enable_if< ROOT::TypeTraits::IsUnsignedNumeral< T >::value, TString >::type operator+ ; (; TString ; s, . T ; u . ). friend . Definition at line 529 of file TString.h. ◆ operator<<. TBuffer & operator<< ; (; TBuffer & ; b, . const TString * ; obj . ). friend . Write TString or derived to TBuffer. ; Definition at line 1470 of file TString.cxx. ◆ operator== [1/2]. Bool_t operator== ; (; const TString & ; s1, . const char * ; s2 . ). friend . Compare TString with a char *. ; Definition at line 1482 of file TString.cxx. ◆ operator== [2/2]. Bool_t operator== ; (; const TString & ; s1, . const TString & ; s2 . ). friend . Definition at line 767 of file TString.h. ◆ TBufferFile. friend class TBufferFile. friend . Definition at line 143 of file TString.h. ◆ TStringLong. friend class TStringLong. friend . Definition at line 141 of file TString.h. ◆ TSubString. friend class TSubString. friend . Definition at line 142 of file TString.h. Member Data Documentation. ◆ fRep. Rep_t TString::fRep. protected . Definition at line 224 of file TString.h. ◆ kNPOS. constexpr Ssiz_t TString::kNPOS = ::kNPOS. staticconstexpr . Definition at line 278 of file TString.h. core/base/inc/TString.h; core/base/src/Stringio.cxx; core/base/src/TPRegexp.cxx; core/base/src/TRegexp.cxx; core/base/src/TString.cxx. TString. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTString.html:61094,Guid,Guide,61094,doc/v632/classTString.html,https://root.cern,https://root.cern/doc/v632/classTString.html,1,['Guid'],['Guide']
Usability,"ue, but can be specified as from \(\mbox{low}\) to \(\mbox{high}\). After each scan, if a new minimum is found, the best parameter values are retained as start values for future scans or minimizations. The curve resulting from each scan can be plotted on the output terminal using MnPlot [api:plot] in order to show the approximate behaviour of the function.; 5.10.2 ScanMinimizer; Although the \(\mbox{SCAN}\) method is not intended for minimization it can be used as a minimizer in its most primitive form.; 5.11 MnSimplex and SimplexMinimizer; [api:simplex]; \(\mbox{SIMPLEX}\) is a function minimization method using the simplex method of Nelder and Mead. MnSimplex provides minimization of the function by the method of \(\mbox{SIMPLEX}\) and the functionality for parameters interaction. It also retains the result from the last minimization in case the user may want to do subsequent minimization steps with parameter interactions in between the minimization requests. The minimization is done by the SimplexMinimizer. Minimization of the function can be done by directly using the SimplexMinimizer if no parameters interaction is required. As \(\mbox{SIMPLEX}\) is a stepping method it does not produce a covariance matrix.; 5.11.1 MnSimplex(const FCNBase&, const std::vector\(<\)double\(>\)&,. const std::vector\(<\)double\(>\)&, unsigned int) ###; Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,. unsigned int) ###; Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,. const MnStrategy&) ###; Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:50013,Simpl,SimplexMinimizer,50013,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['Simpl'],['SimplexMinimizer']
Usability,"ue, but can be specified as from \(\mbox{low}\) to \(\mbox{high}\). After each scan, if a new minimum is found, the best parameter values are retained as start values for future scans or minimizations. The curve resulting from each scan can be plotted on the output terminal using MnPlot [api:plot] in order to show the approximate behaviour of the function.; 5.10.2 ScanMinimizer; Although the \(\mbox{SCAN}\) method is not intended for minimization it can be used as a minimizer in its most primitive form.; 5.11 MnSimplex and SimplexMinimizer; [api:simplex]; \(\mbox{SIMPLEX}\) is a function minimization method using the simplex method of Nelder and Mead. MnSimplex provides minimization of the function by the method of \(\mbox{SIMPLEX}\) and the functionality for parameters interaction. It also retains the result from the last minimization in case the user may want to do subsequent minimization steps with parameter interactions in between the minimization requests. The minimization is done by the SimplexMinimizer. Minimization of the function can be done by directly using the SimplexMinimizer if no parameters interaction is required. As \(\mbox{SIMPLEX}\) is a stepping method it does not produce a covariance matrix.; 5.11.1 MnSimplex(const FCNBase&, const std::vector\(<\)double\(>\)&,; const std::vector\(<\)double\(>\)&, unsigned int); Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,; unsigned int); Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,; const MnStrategy&); Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes minimization",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:54018,Simpl,SimplexMinimizer,54018,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['Simpl'],['SimplexMinimizer']
Usability,"ue;; 934 }; 935 ; 936 THashTable *typeTable = dynamic_cast<THashTable*>( gROOT->GetListOfTypes() );; 937 TDataType *type = (TDataType *)typeTable->THashTable::FindObject( inner );; 938 if (type) {; 939 // This is a raw type and an already loaded typedef.; 940 const char *newname = type->GetFullTypeName();; 941 if (type->GetType() == kLong64_t) {; 942 newname = ""Long64_t"";; 943 } else if (type->GetType() == kULong64_t) {; 944 newname = ""ULong64_t"";; 945 }; 946 if (strcmp(inner,newname) == 0) {; 947 return true;; 948 }; 949 if (offset) result = ""const "";; 950 result += newname;; 951 if ( end != tname.length() ) {; 952 result += tname.substr(end,tname.length()-end);; 953 }; 954 if (result == tname) result.clear();; 955 return true;; 956 }; 957 ; 958 // Check if the name is an enumerator; 959 const auto lastPos = TClassEdit::GetUnqualifiedName(inner);; 960 if (lastPos != inner) // Main switch: case 1 - scoped enum, case 2 global enum; 961 {; 962 // We have a scope; 963 const auto enName = lastPos;; 964 const auto scopeNameSize = (lastPos - inner) / sizeof(decltype(*lastPos)) - 2;; 965 std::string scopeName{inner, scopeNameSize};; 966 // Check if the scope is in the list of classes; 967 if (auto scope = static_cast<TClass *>(gROOT->GetListOfClasses()->FindObject(scopeName.c_str()))) {; 968 auto enumTable = dynamic_cast<const THashList *>(scope->GetListOfEnums(false));; 969 if (enumTable && enumTable->THashList::FindObject(enName)); 970 return true;; 971 }; 972 // It may still be in one of the loaded protoclasses; 973 else if (auto scope = static_cast<TProtoClass *>(gClassTable->GetProtoNorm(scopeName.c_str()))) {; 974 auto listOfEnums = scope->GetListOfEnums();; 975 if (listOfEnums) { // it could be null: no enumerators in the protoclass; 976 auto enumTable = dynamic_cast<const THashList *>(listOfEnums);; 977 if (enumTable && enumTable->THashList::FindObject(enName)); 978 return true;; 979 }; 980 }; 981 } else; 982 {; 983 // We don't have any scope: this could only be a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:33670,clear,clear,33670,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"uence::WriteMemberWiseActionsCollectionCreator ; (; TStreamerInfo * ; info, . TVirtualCollectionProxy * ; collectionProxy, . TClass * ;  . ). inlinestatic . Definition at line 292 of file TStreamerInfoActions.h. ◆ WriteMemberWiseActionsCollectionGetter(). static SequencePtr TStreamerInfoActions::TActionSequence::WriteMemberWiseActionsCollectionGetter ; (; TStreamerInfo * ; info, . TVirtualCollectionProxy * ; , . TClass * ;  . ). inlinestatic . Definition at line 284 of file TStreamerInfoActions.h. ◆ WriteMemberWiseActionsGetter(). static SequencePtr TStreamerInfoActions::TActionSequence::WriteMemberWiseActionsGetter ; (; TStreamerInfo * ; info, . TVirtualCollectionProxy * ; , . TClass * ;  . ). inlinestatic . Definition at line 297 of file TStreamerInfoActions.h. ◆ WriteMemberWiseActionsViaProxyGetter(). static SequencePtr TStreamerInfoActions::TActionSequence::WriteMemberWiseActionsViaProxyGetter ; (; TStreamerInfo * ; , . TVirtualCollectionProxy * ; collectionProxy, . TClass * ;  . ). inlinestatic . Definition at line 288 of file TStreamerInfoActions.h. Member Data Documentation. ◆ fActions. ActionContainer_t TStreamerInfoActions::TActionSequence::fActions. Definition at line 212 of file TStreamerInfoActions.h. ◆ fLoopConfig. TLoopConfiguration* TStreamerInfoActions::TActionSequence::fLoopConfig. If this is a bundle of memberwise streaming action, this configures the looping. ; Definition at line 211 of file TStreamerInfoActions.h. ◆ fStreamerInfo. TVirtualStreamerInfo* TStreamerInfoActions::TActionSequence::fStreamerInfo. StreamerInfo used to derive these actions. ; Definition at line 210 of file TStreamerInfoActions.h. Libraries for TStreamerInfoActions::TActionSequence:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TStreamerInfoActions.h; io/io/src/TStreamerInfoActions.cxx. TStreamerInfoActionsTActionSequence. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html:21932,Guid,Guide,21932,doc/master/classTStreamerInfoActions_1_1TActionSequence.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html,1,['Guid'],['Guide']
Usability,"uery; 1 save results after each packet (to reduce the; loss in case of crash). Setting 'ds' automatically sets 'mvf=1'; it is still possible to set 'mvf=11'; to save results after each packet. The separator from the next option is either a ' ' or a ';'. All recognized settings are removed from the input string opt.; If action == 0, set up the output file accordingly, if action == 1 clean related; output file settings.; If the final target file is local then 'target' is set to the final local path; when action == 0 and used to retrieve the file with TFile::Cp when action == 1. Output file settings are in the form. <previous_option>of=name <next_option>; <previous_option>outfile=name,...;<next_option>. The separator from the next option is either a ' ' or a ';'; Called interanally by TProof::Process. Returns 0 on success, -1 on error. void SetFeedback(TString& opt, TString& optfb, Int_t action); Extract from opt in optfb information about wanted feedback settings.; Feedback are removed from the input string opt.; If action == 0, set up feedback accordingly, if action == 1 clean related; feedback settings (using info in optfb, if available, or reparsing opt). Feedback requirements are in the form. <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>. The special name 'stats' triggers feedback about events and packets.; The separator from the next option is either a ' ' or a ';'.; Called interanally by TProof::Process. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file or; Tselector object; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:50991,Feedback,Feedback,50991,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['Feedback'],['Feedback']
Usability,"ueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyrig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionQueryFrame.html:22959,progress bar,progress bar,22959,root/html602/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html,2,['progress bar'],['progress bar']
Usability,"ues at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients. test of TSpline3 with nonequidistant knots and; equidistant knots follows. Int_t FindX(Double_t x) const; Find X. Double_t Eval(Double_t x) const; Eval this spline at x. Double_t Derivative(Double_t x) const; Derivative. void SaveAs(const char* filename, Option_t* option = """") const; write this spline as a C++ function that can be executed without ROOT; the name of the function is the name of the file up to the ""."" if any. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPoint(Int_t i, Double_t x, Double_t y); set point number i. void SetPointCoeff(Int_t i, Double_t b, Double_t c, Double_t d); set point coefficient number i. void BuildCoeff(); subroutine cubspl ( tau, c, n, ibcbeg, ibcend ); from * a practical guide to splines * by c. de boor; ************************ input ***************************; n = number of data points. assumed to be .ge. 2.; (tau(i), c(1,i), i=1,...,n) = abscissae and ordinates of the; data points. tau is assumed to be strictly increasing.; ibcbeg, ibcend = boundary condition indicators, and; c(2,1), c(2,n) = boundary condition information. specifically,; ibcbeg = 0 means no boundary condition at tau(1) is given.; in this case, the not-a-knot condition is used, i.e. the; jump in the third derivative across tau(2) is forced to; zero, thus the first and the second cubic polynomial pieces; are made to coincide.); ibcbeg = 1 means that the slope at tau(1) is made to equal; c(2,1), supplied by input.; ibcbeg = 2 means that the second derivative at tau(1) is; made to equal c(2,1), supplied by input.; ibcend = 0, 1, or 2 has analogous meaning concerning the; boundary condition at tau(n), with the additional infor-; mation taken from c(2,n).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpline3.html:12586,guid,guide,12586,root/html528/TSpline3.html,https://root.cern,https://root.cern/root/html528/TSpline3.html,6,['guid'],['guide']
Usability,"ues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Change window attributes. ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the background color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  Close connection to display server. ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:2906,Clear,ClearWindow,2906,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,4,['Clear'],"['Clear', 'ClearWindow']"
Usability,"uffer &) override;  Stream a 3-D polymarker object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:6123,Clear,Clear,6123,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,8,['Clear'],['Clear']
Usability,"uffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBox.html:5155,Clear,Clear,5155,doc/master/classTBox.html,https://root.cern,https://root.cern/doc/master/classTBox.html,1,['Clear'],['Clear']
Usability,"uffer &) override;  Stream an object of class TRef. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRef.html:12698,Clear,Clear,12698,doc/master/classTRef.html,https://root.cern,https://root.cern/doc/master/classTRef.html,1,['Clear'],['Clear']
Usability,"uffer &ClassDef_StreamerNVirtual_b);  ; void wireCache () override;  ;  Public Member Functions inherited from RooAbsCache;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static bool clearObsList ();  ; static const char * DeclFileName ();  ; static void doClearObsList (bool flag);  ;  Static Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; bool _allowOptimize;  ; bool _clearOnRedirect;  ; bool _optCacheModeSeen;  ! ;  ; RooArgSet * _optCacheObservables = nullptr;  ! current optCacheObservables ;  ;  Protected Attributes inherited from RooCacheManager< RooAbsCacheElement >; Int_t _lastIndex;  ! Last slot accessed ;  ; Int_t _maxSize;  ! Maximum size ;  ; std::vector< RooNormSetCache > _nsetCache;  ! Normalization/Integration set manager ;  ; std::vector< RooAbsCacheElement * > _object;  ! Payload ;  ; Int_t _size;  ! Actual use ;  ; bool _wired;  ! In wired mode, there is a single payload which is returned always ;  ;  Protected Attributes inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:5285,clear,clearObsList,5285,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['clear'],['clearObsList']
Usability,"uffer * TSqlRegistry::GetCmdsBuffer ; (; TSQLClassInfo * ; sqlinfo). inline . Definition at line 865 of file TSQLStructure.cxx. ◆ GetNextObjId(). Long64_t TSqlRegistry::GetNextObjId ; (; ). inline . Definition at line 855 of file TSQLStructure.cxx. ◆ InsertToNormalTable(). void TSqlRegistry::InsertToNormalTable ; (; TSQLTableData * ; columns, . TSQLClassInfo * ; sqlinfo . ). inline . Definition at line 1040 of file TSQLStructure.cxx. ◆ InsertToNormalTableOracle(). Bool_t TSqlRegistry::InsertToNormalTableOracle ; (; TSQLTableData * ; columns, . TSQLClassInfo * ; sqlinfo . ). inline . Definition at line 994 of file TSQLStructure.cxx. Member Data Documentation. ◆ fCmds. TObjArray* TSqlRegistry::fCmds. Definition at line 833 of file TSQLStructure.cxx. ◆ fCurrentObjClass. TClass* TSqlRegistry::fCurrentObjClass. Definition at line 837 of file TSQLStructure.cxx. ◆ fCurrentObjId. Long64_t TSqlRegistry::fCurrentObjId. Definition at line 836 of file TSQLStructure.cxx. ◆ fFile. TSQLFile* TSqlRegistry::fFile. Definition at line 830 of file TSQLStructure.cxx. ◆ fFirstObjId. Long64_t TSqlRegistry::fFirstObjId. Definition at line 834 of file TSQLStructure.cxx. ◆ fKeyId. Long64_t TSqlRegistry::fKeyId. Definition at line 831 of file TSQLStructure.cxx. ◆ fLastLongStrId. Int_t TSqlRegistry::fLastLongStrId. Definition at line 839 of file TSQLStructure.cxx. ◆ fLastObjId. Long64_t TSqlRegistry::fLastObjId. Definition at line 832 of file TSQLStructure.cxx. ◆ fLongStrValues. TObjArray TSqlRegistry::fLongStrValues. Definition at line 842 of file TSQLStructure.cxx. ◆ fPool. TMap TSqlRegistry::fPool. Definition at line 841 of file TSQLStructure.cxx. ◆ fRegStmt. TSQLStatement* TSqlRegistry::fRegStmt. Definition at line 845 of file TSQLStructure.cxx. ◆ fRegValues. TObjArray TSqlRegistry::fRegValues. Definition at line 843 of file TSQLStructure.cxx. io/sql/src/TSQLStructure.cxx. TSqlRegistry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRegistry.html:13427,Guid,Guide,13427,doc/master/classTSqlRegistry.html,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html,1,['Guid'],['Guide']
Usability,"uffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafF(); Default constructor for LeafF*-*-*-*-*-*-*-*-; *-* ============================. TLeafF(TBranch* parent, const char* name, const char* type); Create a LeafF*-*-; *-* ==============; -. ~TLeafF(); Default destructor for a LeafF*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a float from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafF(). const char * GetTypeName() const; {return ""Float_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafF.html:9233,simpl,simple,9233,root/html534/TLeafF.html,https://root.cern,https://root.cern/root/html534/TLeafF.html,1,['simpl'],['simple']
Usability,"uffer::IsReadingBool_t IsReading() constDefinition TBuffer.h:86; TBuffer::WriteClassBuffervirtual Int_t WriteClassBuffer(const TClass *cl, void *pointer)=0; TCollection::Printvoid Print(Option_t *option="""") const overrideDefault print for collections, calls Print(option, 1).Definition TCollection.cxx:476; TCollection::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an collection using the Streamer facility.Definition TCollection.cxx:263; TIterDefinition TCollection.h:235; TIter::Resetvoid Reset()Definition TCollection.h:254; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::GetXsizeDouble_t GetXsize()Return size of the formula along X in pad coordinates when the text precision is smaller than 3.Definition TLatex.cxx:2569; TLatex::Classstatic TClass * Class(); TLatex::PaintLatexvirtual void PaintLatex(Double_t x, Double_t y, Double_t angle, Double_t size, const char *text)Main drawing function.Definition TLatex.cxx:2114; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::Classstatic TClass * Class(); TLine::PaintLinevirtual void PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:399; TLine::GetY1Double_t GetY1() constDefinition TLine.h:52; TLine::GetX2Double_t GetX2() constDefinition TLine.h:51; TLine::IsATClass * IsA() const overrideDefinition TLine.h:79; TLine::GetX1Double_t GetX1() constDefinition TLine.h:50; TLine::GetY2Double_t GetY2() constDefinition TLine.h:53; TListA doubly linked list.Definition TList.h:38; TList::AddAftervoid AddAfter(const TObject *after, TObject *obj) overrideInsert object after object after in the list.Definition TList.cxx:248; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::LastTObject * Last() const overrideReturn the last object in the list. Returns 0 when list is em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8cxx_source.html:35795,simpl,simple,35795,doc/master/TPaveText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8cxx_source.html,1,['simpl'],['simple']
Usability,"ufferSizeInt_t SetBufferSize(Long64_t buffersize) overrideChange the underlying buffer size of the cache.Definition TTreeCache.cxx:2073; TTreeCache::SetLearnEntriesstatic void SetLearnEntries(Int_t n=10)Static function to set the number of entries to be used in learning mode The default value for n is 1...Definition TTreeCache.cxx:2145; TTreeCache::GetTreeTTree * GetTree() constDefinition TTreeCache.h:149; TTreeCache::SetEntryRangevirtual void SetEntryRange(Long64_t emin, Long64_t emax)Set the minimum and maximum entry number to be processed this information helps to optimize the numbe...Definition TTreeCache.cxx:2106; TTreeCache::DropBranchvirtual Int_t DropBranch(TBranch *b, bool subbranches=false)Remove a branch to the list of branches to be stored in the cache this function is called by TBranch:...Definition TTreeCache.cxx:541; TTreeCache::SetAutoCreatedvoid SetAutoCreated(bool val)Definition TTreeCache.h:164; TTreeCache::StopLearningPhasevirtual void StopLearningPhase()This is the counterpart of StartLearningPhase() and can be used to stop the learning phase.Definition TTreeCache.cxx:2187; TTreeCache::Printvoid Print(Option_t *option="""") const overridePrint cache statistics.Definition TTreeCache.cxx:1899; TTreeCache::AddBranchInt_t AddBranch(TBranch *b, bool subgbranches=false) overrideAdd a branch to the list of branches to be stored in the cache this function is called by the user vi...Definition TTreeCache.cxx:376; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeCloner::kNoWarnings@ kNoWarningsDefinition TTreeCloner.h:100; TTreeCloner::GetWarningconst char * GetWarning() constDefinition TTreeCloner.h:117; TTreeCloner::Execbool Exec()Execute the cloning.Definition TTreeCloner.cxx:222; TTreeCloner::NeedConversionbool NeedConversion()Definition TTreeCloner.h:121; TTreeCloner::IsValidbool IsValid()Definition TTreeCloner.h:120; TTreeCloner::SetCacheSizevoid SetCacheSize(Long64_t size)Set the cache size us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:430357,learn,learning,430357,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['learn'],['learning']
Usability,"ug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support RootTalk Digest. This mailing list is used to keep you up to date about important ROOT events (new releases, urgent bug fixes, etc.). This list is also used to discuss anything concerning ROOT with your fellow ROOT users and with the developers.; Currently available digests:; All articles of 2012 on the new e-groups mailing list; All articles of 2012; All articles of 2011; All articles of 2010; All articles of 2009; All articles of 2008; All articles of 2007; All articles of 2006; All articles of 2005; All articles of 2004; All articles of 2003; All articles of 2002; All articles of 2001; All articles of 2000; All articles of 1999; All articles of 1998; All articles of 1997. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/roottalk-digest.html:2628,Guid,Guides,2628,d/roottalk-digest.html,https://root.cern,https://root.cern/d/roottalk-digest.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"ugCount. Int_t RooMsgService::_debugCount = 0. static . Definition at line 191 of file RooMsgService.h. ◆ _debugWorkspace. std::unique_ptr<RooWorkspace> RooMsgService::_debugWorkspace. protected . Definition at line 242 of file RooMsgService.h. ◆ _devnull. std::unique_ptr<std::ofstream> RooMsgService::_devnull. protected . Definition at line 227 of file RooMsgService.h. ◆ _errorCount. Int_t RooMsgService::_errorCount. protected . Definition at line 236 of file RooMsgService.h. ◆ _files. std::map<std::string,std::unique_ptr<std::ostream> > RooMsgService::_files. protected . Definition at line 229 of file RooMsgService.h. ◆ _globMinLevel. RooFit::MsgLevel RooMsgService::_globMinLevel. protected . Definition at line 230 of file RooMsgService.h. ◆ _lastMsgLevel. RooFit::MsgLevel RooMsgService::_lastMsgLevel. protected . Definition at line 231 of file RooMsgService.h. ◆ _levelNames. std::map<int,std::string> RooMsgService::_levelNames. Definition at line 192 of file RooMsgService.h. ◆ _showPid. bool RooMsgService::_showPid. protected . Definition at line 234 of file RooMsgService.h. ◆ _silentMode. bool RooMsgService::_silentMode. protected . Definition at line 233 of file RooMsgService.h. ◆ _streams. std::vector<StreamConfig> RooMsgService::_streams. protected . Definition at line 225 of file RooMsgService.h. ◆ _streamsSaved. std::stack<std::vector<StreamConfig> > RooMsgService::_streamsSaved. protected . Definition at line 226 of file RooMsgService.h. ◆ _topicNames. std::map<int,std::string> RooMsgService::_topicNames. Definition at line 193 of file RooMsgService.h. Libraries for RooMsgService:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooMsgService.h; roofit/roofitcore/src/RooMsgService.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooMsgService. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:24731,Guid,Guide,24731,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['Guid'],['Guide']
Usability,ug . Definition at line 53 of file TSystem.h. ◆ ELogOption. enum ELogOption. EnumeratorkLogPid ; kLogCons . Definition at line 48 of file TSystem.h. ◆ ESendRecvOptions. enum ESendRecvOptions. EnumeratorkDefault ; kOob ; kPeek ; kDontBlock . Definition at line 232 of file TSystem.h. ◆ ESockOptions. enum ESockOptions. EnumeratorkSendBuffer ; kRecvBuffer ; kOobInline ; kKeepAlive ; kReuseAddr ; kNoDelay ; kNoBlock ; kProcessGroup ; kAtMark ; kBytesToRead . Definition at line 219 of file TSystem.h. Function Documentation. ◆ R_ISBLK(). Bool_t R_ISBLK ; (; Int_t ; mode). inline . Definition at line 115 of file TSystem.h. ◆ R_ISCHR(). Bool_t R_ISCHR ; (; Int_t ; mode). inline . Definition at line 114 of file TSystem.h. ◆ R_ISDIR(). Bool_t R_ISDIR ; (; Int_t ; mode). inline . Definition at line 113 of file TSystem.h. ◆ R_ISFIFO(). Bool_t R_ISFIFO ; (; Int_t ; mode). inline . Definition at line 118 of file TSystem.h. ◆ R_ISLNK(). Bool_t R_ISLNK ; (; Int_t ; mode). inline . Definition at line 117 of file TSystem.h. ◆ R_ISOFF(). Bool_t R_ISOFF ; (; Int_t ; mode). inline . Definition at line 120 of file TSystem.h. ◆ R_ISREG(). Bool_t R_ISREG ; (; Int_t ; mode). inline . Definition at line 116 of file TSystem.h. ◆ R_ISSOCK(). Bool_t R_ISSOCK ; (; Int_t ; mode). inline . Definition at line 119 of file TSystem.h. Variable Documentation. ◆ gProgName. R__EXTERN const char* gProgName. Definition at line 242 of file TSystem.h. ◆ gProgPath. R__EXTERN const char* gProgPath. Definition at line 243 of file TSystem.h. ◆ gRootDir. R__EXTERN const char* gRootDir. Definition at line 241 of file TSystem.h. ◆ gSystem. R__EXTERN TSystem* gSystem. Definition at line 561 of file TSystem.h. ◆ gSystemMutex. R__EXTERN TVirtualMutex* gSystemMutex. Definition at line 244 of file TSystem.h. ◆ gXDisplay. R__EXTERN TFileHandler* gXDisplay. Definition at line 562 of file TSystem.h. corebaseincTSystem.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h.html:5925,Guid,Guide,5925,doc/master/TSystem_8h.html,https://root.cern,https://root.cern/doc/master/TSystem_8h.html,1,['Guid'],['Guide']
Usability,"uick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPyMultiGenFunction. class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. TPyMultiGenFunction(PyObject* self = 0); virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TPyMultiGenFunction(const TPyMultiGenFunction& src); TPyMultiGenFunction&operator=(const TPyMultiGenFunction&). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Mon Jul 4 15:36:38 2011 » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPyMultiGenFunction.html:1389,Simpl,Simply,1389,root/html530/TPyMultiGenFunction.html,https://root.cern,https://root.cern/root/html530/TPyMultiGenFunction.html,2,['Simpl'],['Simply']
Usability,"uick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPyMultiGenFunction. class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. TPyMultiGenFunction(PyObject* self = 0); virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TPyMultiGenFunction(const TPyMultiGenFunction& src); TPyMultiGenFunction&operator=(const TPyMultiGenFunction&). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Thu Nov 3 20:22:00 2011 » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPyMultiGenFunction.html:1389,Simpl,Simply,1389,root/html532/TPyMultiGenFunction.html,https://root.cern,https://root.cern/root/html532/TPyMultiGenFunction.html,2,['Simpl'],['Simply']
Usability,uide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLChebSeries Class Reference. ; wrapper class for C struct gsl_cheb_series ; Definition at line 44 of file GSLChebSeries.h. Public Member Functions;  GSLChebSeries (const GSLChebSeries &)=delete;  ;  GSLChebSeries (GSLChebSeries &&)=delete;  ;  GSLChebSeries (size_t n);  ; virtual ~GSLChebSeries ();  ; gsl_cheb_series * get () const;  ; GSLChebSeries & operator= (const GSLChebSeries &)=delete;  ; GSLChebSeries & operator= (GSLChebSeries &&)=delete;  . Private Attributes; gsl_cheb_series * m_cs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLChebSeries.h>; Constructor & Destructor Documentation. ◆ GSLChebSeries() [1/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; size_t ; n). inline . Definition at line 47 of file GSLChebSeries.h. ◆ ~GSLChebSeries(). virtual ROOT::Math::GSLChebSeries::~GSLChebSeries ; (; ). inlinevirtual . Definition at line 52 of file GSLChebSeries.h. ◆ GSLChebSeries() [2/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; const GSLChebSeries & ; ). delete . ◆ GSLChebSeries() [3/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; GSLChebSeries && ; ). delete . Member Function Documentation. ◆ get(). gsl_cheb_series * ROOT::Math::GSLChebSeries::get ; (; ); const. inline . Definition at line 62 of file GSLChebSeries.h. ◆ operator=() [1/2]. GSLChebSeries & ROOT::Math::GSLChebSeries::operator= ; (; const GSLChebSeries & ; ). delete . ◆ operator=() [2/2]. GSLChebSeries & ROOT::Math::GSLChebSeries::operator= ; (; GSLChebSeries && ; ). delete . Member Data Documentation. ◆ m_cs. gsl_cheb_series* ROOT::Math::GSLChebSeries::m_cs. private . Definition at line 66 of file GSLChebSeries.h. math/mathmore/src/GSLChebSeries.h. ROOTMathGSLChebSeries. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLChebSeries.html:2002,Guid,Guide,2002,doc/master/classROOT_1_1Math_1_1GSLChebSeries.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLChebSeries.html,1,['Guid'],['Guide']
Usability,"uit2::MnUserParameterState & ; state). overridevirtual . Reimplemented from ROOT::Minuit2::MnTraceObject.; Definition at line 46 of file TMinuit2TraceObject.cxx. ◆ IsA(). TClass * TMinuit2TraceObject::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 41 of file TMinuit2TraceObject.h. ◆ operator()(). void TMinuit2TraceObject::operator() ; (; int ; i, . const ROOT::Minuit2::MinimumState & ; state . ). overridevirtual . Reimplemented from ROOT::Minuit2::MnTraceObject.; Definition at line 93 of file TMinuit2TraceObject.cxx. ◆ Streamer(). void TMinuit2TraceObject::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMinuit2TraceObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file TMinuit2TraceObject.h. Member Data Documentation. ◆ fHistoEdm. TH1* TMinuit2TraceObject::fHistoEdm. private . Definition at line 47 of file TMinuit2TraceObject.h. ◆ fHistoFval. TH1* TMinuit2TraceObject::fHistoFval. private . Definition at line 46 of file TMinuit2TraceObject.h. ◆ fHistoParList. TList* TMinuit2TraceObject::fHistoParList. private . Definition at line 48 of file TMinuit2TraceObject.h. ◆ fIterOffset. int TMinuit2TraceObject::fIterOffset. private . Definition at line 45 of file TMinuit2TraceObject.h. ◆ fMinuitPad. TVirtualPad* TMinuit2TraceObject::fMinuitPad. private . Definition at line 50 of file TMinuit2TraceObject.h. ◆ fOldPad. TVirtualPad* TMinuit2TraceObject::fOldPad. private . Definition at line 49 of file TMinuit2TraceObject.h. Libraries for TMinuit2TraceObject:. [legend]; The documentation for this class was generated from the following files:; math/minuit2/inc/TMinuit2TraceObject.h; math/minuit2/src/TMinuit2TraceObject.cxx. TMinuit2TraceObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit2TraceObject.html:14814,Guid,Guide,14814,doc/master/classTMinuit2TraceObject.html,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html,1,['Guid'],['Guide']
Usability,"uit::mnimprvirtual void mnimpr()Attempts to improve on a good local minimum.Definition TMinuit.cxx:4295; TMinuit::fPstarDouble_t * fPstarDefinition TMinuit.h:92; TMinuit::fObjectFitTObject * fObjectFitDefinition TMinuit.h:175; TMinuit::BuildArraysvirtual void BuildArrays(Int_t maxpar=15)Create internal Minuit arrays for the maxpar parameters.Definition TMinuit.cxx:512; TMinuit::mnwerrvirtual void mnwerr()Calculates the WERR, external parameter errors.Definition TMinuit.cxx:7861; TMinuit::fNfcnfrInt_t fNfcnfrDefinition TMinuit.h:148; TMinuit::mnrsetvirtual void mnrset(Int_t iopt)Resets function value and errors to UNDEFINED.Definition TMinuit.cxx:6661; TMinuit::fIMPRyDouble_t * fIMPRyDefinition TMinuit.h:106; TMinuit::fVlimhiDouble_t fVlimhiDefinition TMinuit.h:59; TMinuit::mneigvirtual void mneig(Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, Int_t &ifault)Compute matrix eigen values.Definition TMinuit.cxx:2305; TMinuit::mnsimpvirtual void mnsimp()Minimization using the simplex method of Nelder and Mead.Definition TMinuit.cxx:7431; TMinuit::fLwarnBool_t fLwarnDefinition TMinuit.h:157; TMinuit::fXptDouble_t * fXptDefinition TMinuit.h:97; TMinuit::fGinDouble_t * fGinDefinition TMinuit.h:84; TMinuit::GetMethodCallTMethodCall * GetMethodCall() constDefinition TMinuit.h:193; TMinuit::fNfcnmxInt_t fNfcnmxDefinition TMinuit.h:146; TMinuit::fItaurInt_t fItaurDefinition TMinuit.h:149; TMinuit::TMinuitTMinuit()Minuit normal constructor.Definition TMinuit.cxx:347; TMinuit::fUndefiDouble_t fUndefiDefinition TMinuit.h:60; TMinuit::fKe2crInt_t fKe2crDefinition TMinuit.h:156; TMinuit::mnaminvirtual void mnamin()Initialize AMIN.Definition TMinuit.cxx:972; TMinuit::SetErrorDefvirtual Int_t SetErrorDef(Double_t up)To get the n-sigma contour the error def parameter ""up"" has to set to n^2.Definition TMinuit.cxx:908; TMinuit::fNuInt_t fNuDefinition TMinuit.h:130; TMinuit::fPDouble_t * fPDefinition TMinuit.h:91; TMinuit::fNblockInt_t fNblockDefinition TMin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:259761,simpl,simplex,259761,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['simpl'],['simplex']
Usability,"uited setter method. ~TMultiLayerPerceptron(); Destructor. void SetData(TTree* ); Set the data source. void SetEventWeight(const char* ); Set the event weight. void SetTrainingDataSet(TEventList* train); Sets the Training dataset.; Those events will be used for the minimization. void SetTestDataSet(TEventList* test); Sets the Test dataset.; Those events will not be used for the minimization but for control. void SetTrainingDataSet(const char* train); Sets the Training dataset.; Those events will be used for the minimization.; Note that the tree must be already defined. void SetTestDataSet(const char* test); Sets the Test dataset.; Those events will not be used for the minimization but for control.; Note that the tree must be already defined. void SetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); Sets the learning method.; Available methods are: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; (look at the constructor for the complete description; of learning methods and parameters). void SetEta(Double_t eta); Sets Eta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEpsilon(Double_t eps); Sets Epsilon - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:23609,learn,learning,23609,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['learn'],['learning']
Usability,"ulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  . Public Member Functions;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; CopyIterator_t GetFunctionCopyIterator (Bool_t read=kTRUE) override;  See typedef void (*CopyIterator_t)(void *&dest, const void *source); Copy the iterator source, into dest. ;  ; CreateIterators_t GetFunctionCreateIterators (Bool_t read=kTRUE) override;  See typedef void (*CreateIterators_t)(void *collection, void *&begin_ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:3279,Clear,Clear,3279,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,2,['Clear'],['Clear']
Usability,"ulated root. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ SetFunction() [1/2]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGenFunction & ; , . double ; , . double ;  . ). inlinevirtual . Sets the function for the rest of the algorithms. ; The parameters set the interval where the root has to be calculated. ; Reimplemented in ROOT::Math::GSLRootFinder, ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, ROOT::Math::GSLRootFinderDeriv, and ROOT::Math::BrentRootFinder.; Definition at line 53 of file IRootFinderMethod.h. ◆ SetFunction() [2/2]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGradFunction & ; , . double ;  . ). inlinevirtual . Sets the function for algorithms using derivatives. . Reimplemented in ROOT::Math::GSLRootFinderDeriv, ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv.; Definition at line 45 of file IRootFinderMethod.h. ◆ Solve(). virtual bool ROOT::Math::IRootFinderMethod::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). pure virtual . Stimates the root for the function. ; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desired relative error in the minimum position. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ Status(). virtual int ROOT::Math::IRootFinderMethod::Status ; (; ); const. pure virtual . Returns the status of the previous estimate. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IRootFinderMethod.h. ROOTMathIRootFinderMethod. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html:5120,Guid,Guide,5120,doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,1,['Guid'],['Guide']
Usability,"uld be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last Integral calculation; ROOT::Math::VirtualIntegrator::NEvalvirtual int NEval() constreturn number of function evaluations in calculating the integral (if integrator do not implement thi...Definition VirtualIntegrator.h:84; ROOT::Math::VirtualIntegrator::Resultvirtual double Result() const =0return the Result of the last Integral calculation; ROOT::Math::VirtualIntegrator::Statusvirtual int Status() const =0return the Error Status of the last Integral calculation; ROOT::Math::WrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e.Definition WrappedFunction.h:45; ROOT::Math::IntegrationOneDim::TypeTypeenumeration specifying the integration types.Definition AllIntegrationTypes.h:32; ROOT::Math::IntegrationOneDim::kDEFAULT@ kDEFAULTdefault type specified in the static optionsDefinition AllIntegrationTypes.h:33; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::IntegratorIntegratorOneDim IntegratorDefinition Integrator.h:480; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathIntegrator.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:32811,Guid,Guide,32811,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['Guid'],['Guide']
Usability,"ule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 37 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 25 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 24 of file RConversionRuleParser.h. ROOT. ROOT v6-24 - Reference Guide Generated on Tue Aug 22 2023 03:09:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/namespaceROOT.html:30792,Guid,Guide,30792,doc/v624/namespaceROOT.html,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"ule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 37 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 25 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 24 of file RConversionRuleParser.h. ROOT. ROOT v6-26 - Reference Guide Generated on Mon Sep 11 2023 21:05:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:37068,Guid,Guide,37068,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"ule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 37 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 25 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 24 of file RConversionRuleParser.h. ROOT. ROOT v6-28 - Reference Guide Generated on Thu Oct 24 2024 01:53:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:38926,Guid,Guide,38926,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"ule.h:101; ROOT::TSchemaRule::GetIncludeconst TObjArray * GetInclude() constReturn the list of header files to include to be able to compile this rule as a TObjArray of TObjStri...Definition TSchemaRule.cxx:599; ROOT::TSchemaRule::IsAliasRuleBool_t IsAliasRule() constReturn kTRUE if the rule is a strict renaming of one of the data member of the class.Definition TSchemaRule.cxx:748; ROOT::TSchemaRule::GetTargetClassconst char * GetTargetClass() constGet the targte class of this rule (i.e. the in memory class).Definition TSchemaRule.cxx:484; ROOT::TSchemaRule::ProcessDeclarationstatic void ProcessDeclaration(TObjArray *array, const TString &list)Split the list as a declaration into as a TObjArray of TNamed(name,type).Definition TSchemaRule.cxx:974; ROOT::TSchemaRule::ProcessVersionBool_t ProcessVersion(const TString &version) constCheck if specified version string is correct and build version vector.Definition TSchemaRule.cxx:842; ROOT::TSchemaRule::RuleType_tRuleType_tDefinition TSchemaRule.h:34; ROOT::TSchemaRule::kNone@ kNoneDefinition TSchemaRule.h:37; ROOT::TSchemaRule::kReadRawRule@ kReadRawRuleDefinition TSchemaRule.h:36; ROOT::TSchemaRule::kReadRule@ kReadRuleDefinition TSchemaRule.h:35; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualObject.h:26; bool; int; unsigned int; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. coremetaincTSchemaRule.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8h_source.html:17560,Guid,Guide,17560,doc/master/TSchemaRule_8h_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8h_source.html,1,['Guid'],['Guide']
Usability,ules (only Friedmans module) ; Definition at line 178 of file MethodRuleFit.h. ◆ fRFWorkDir. TString TMVA::MethodRuleFit::fRFWorkDir. private . working directory from Friedmans module ; Definition at line 177 of file MethodRuleFit.h. ◆ fRuleFit. RuleFit TMVA::MethodRuleFit::fRuleFit. private . RuleFit instance. ; Definition at line 155 of file MethodRuleFit.h. ◆ fRuleFitModuleS. TString TMVA::MethodRuleFit::fRuleFitModuleS. private . which rulefit module to use ; Definition at line 175 of file MethodRuleFit.h. ◆ fRuleMinDist. Double_t TMVA::MethodRuleFit::fRuleMinDist. private . rule min distance - see RuleEnsemble ; Definition at line 207 of file MethodRuleFit.h. ◆ fSepType. SeparationBase* TMVA::MethodRuleFit::fSepType. private . the separation used in node splitting ; Definition at line 183 of file MethodRuleFit.h. ◆ fSepTypeS. TString TMVA::MethodRuleFit::fSepTypeS. private . forest generation: separation type - see DecisionTree ; Definition at line 187 of file MethodRuleFit.h. ◆ fSignalFraction. Double_t TMVA::MethodRuleFit::fSignalFraction. private . scalefactor for bkg events to modify initial s/b fraction in training data ; Definition at line 157 of file MethodRuleFit.h. ◆ fTreeEveFrac. Double_t TMVA::MethodRuleFit::fTreeEveFrac. private . fraction of events used for training each tree ; Definition at line 182 of file MethodRuleFit.h. ◆ fUseBoost. Bool_t TMVA::MethodRuleFit::fUseBoost. private . use boosted events for forest generation ; Definition at line 192 of file MethodRuleFit.h. ◆ fUseRuleFitJF. Bool_t TMVA::MethodRuleFit::fUseRuleFitJF. private . if true interface with J.Friedmans RuleFit module ; Definition at line 176 of file MethodRuleFit.h. Libraries for TMVA::MethodRuleFit:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodRuleFit.h; tmva/tmva/src/MethodRuleFit.cxx. TMVAMethodRuleFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html:52261,Guid,Guide,52261,doc/master/classTMVA_1_1MethodRuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html,1,['Guid'],['Guide']
Usability,"ulesR__EXTERN SchemaRuleClassMap_t gReadRulesDefinition RConversionRuleParser.h:24; ROOT::SchemaRuleMap_tstd::map< std::string, std::string > SchemaRuleMap_tDefinition RConversionRuleParser.h:22; ROOT::HasValidDataMembersbool HasValidDataMembers(SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string)Check if given rule contains references to valid data members.Definition RConversionRuleParser.cxx:461; ROOT::GetRuleIncludesvoid GetRuleIncludes(std::list< std::string > &result)Get the list of includes specified in the shema rules.Definition RConversionRuleParser.cxx:855; ROOT::WriteReadRawRuleFuncvoid WriteReadRawRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""...Definition RConversionRuleParser.cxx:708; ROOT::ProcessReadRawPragmavoid ProcessReadRawPragma(const char *args, std::string &error_string)I am being called then a readraw pragma is encountered.Definition RConversionRuleParser.cxx:935; ROOT::gReadRawRulesR__EXTERN SchemaRuleClassMap_t gReadRawRulesDefinition RConversionRuleParser.h:25; ROOT::ParseRulebool ParseRule(std::string rule, ROOT::Internal::MembersMap_t &result, std::string &error_string)Parse the schema rule as specified in the LinkDef file.Definition RConversionRuleParser.cxx:103; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854; ROOT::Internal::TSchemaTypeDefinition TSchemaType.h:13; ROOT::Internal::TSchemaType::fDimensionsstd::string fDimensionsDefinition TSchemaType.h:18; ROOT::Internal::TSchemaType::fTypestd::string fTypeDefinition TSchemaType.h:17; lTLine lDefinition textangle.C:4; outputstatic void output(). corefoundationsrcRConversionRuleParser.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConversionRuleParser_8cxx_source.html:43693,Guid,Guide,43693,doc/master/RConversionRuleParser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RConversionRuleParser_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ult pavetext AttText.; A title can be added later to this pavetext via TPaveText::SetLabel. IMPORTANT NOTE:; Because TPave objects (and objects deriving from TPave) have their; master coordinate system in NDC, one cannot use the TBox functions; SetX1,SetY1,SetX2,SetY2 to change the corner coordinates. One should use; instead SetX1NDC, SetY1NDC, SetX2NDC, SetY2NDC. ~TPaveText(); pavetext default destructor. TPaveText(const TPaveText& pavetext); pavetext copy constructor. TPaveText& operator=(const TPaveText& ); assignment operator. TBox * AddBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Add a new graphics box to this pavetext. TLine * AddLine(Double_t x1 = 0, Double_t y1 = 0, Double_t x2 = 0, Double_t y2 = 0); Add a new graphics line to this pavetext. TText * AddText(Double_t x1, Double_t y1, const char* label); Add a new Text line to this pavetext at given coordinates. TText * AddText(const char* label); Add a new Text line to this pavetext. void Clear(Option_t* option = """"); Clear all lines in this pavetext. void DeleteText(); Delete text at the mouse position. void Draw(Option_t* option = """"); Draw this pavetext with its current attributes. void DrawFile(const char* filename, Option_t* option = """"); Draw lines in filename in this pavetext. void EditText(); Edit text at the mouse position. TText * GetLine(Int_t number) const; Get Pointer to line number in this pavetext. TText * GetLineWith(const char* text) const; Get Pointer to first containing string text in this pavetext. TObject * GetObject(Double_t& ymouse, Double_t& yobj) const; Get object pointed by the mouse in this pavetext. Int_t GetSize() const; return number of text lines (ignoring Tlines, etc). void InsertLine(); Add a new lineine at the mouse position. void InsertText(const char* label); Add a new Text line at the mouse position. void Paint(Option_t* option = """"); Paint this pavetext with its current attributes. void PaintPrimitives(Int_t mode); Paint list of primitives in this pavetext. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaveText.html:12946,Clear,Clear,12946,root/html528/TPaveText.html,https://root.cern,https://root.cern/root/html528/TPaveText.html,6,['Clear'],['Clear']
Usability,"ult); 1959 ; 1960 if ((optionHist) || !chopt[0]) {; 1961 if (!optionRot) {; 1962 gxwork[0] = wmin;; 1963 if (!optionOne) gywork[0] = TMath::Min(TMath::Max((Double_t)0,gPad->GetUymin()); 1964 ,gPad->GetUymax());; 1965 else gywork[0] = gPad->GetUymin();; 1966 ywmin = gywork[0];; 1967 npt = 2;; 1968 for (i=first; i<=last;i++) {; 1969 if (!optionBins) {; 1970 gxwork[npt-1] = gxwork[npt-2];; 1971 gxwork[npt] = wmin+((i-first+1)*delta);; 1972 } else {; 1973 xi1 = x[i]; xi = x[i-1];; 1974 if (xi1 < xi) {; 1975 if (i != last) Error(where, ""X must be in increasing order"");; 1976 else Error(where, ""X must have N+1 values with option N"");; 1977 goto do_cleanup;; 1978 }; 1979 gxwork[npt-1] = x[i-1]; gxwork[npt] = x[i];; 1980 }; 1981 gywork[npt-1] = y[i-1];; 1982 gywork[npt] = y[i-1];; 1983 if (gywork[npt] < vymin) {gywork[npt] = vymin; gywork[npt-1] = vymin;}; 1984 if ((gxwork[npt-1] >= uxmin-rounding && gxwork[npt-1] <= uxmax+rounding) ||; 1985 (gxwork[npt] >= uxmin-rounding && gxwork[npt] <= uxmax+rounding)) npt += 2;; 1986 if (i == last) {; 1987 gxwork[npt-1] = gxwork[npt-2];; 1988 gywork[npt-1] = gywork[0];; 1989 //make sure that the fill area does not overwrite the frame; 1990 //take into account the frame line width; 1991 if (gxwork[0] < vxmin) {gxwork[0] = vxmin; gxwork[1 ] = vxmin;}; 1992 if (gywork[0] < vymin) {gywork[0] = vymin; gywork[npt-1] = vymin;}; 1993 ; 1994 ComputeLogs(npt, optionZ);; 1995 ; 1996 // do not draw the two vertical lines on the edges; 1997 Int_t nbpoints = npt-2;; 1998 Int_t point1 = 1;; 1999 ; 2000 if (optionOff) {; 2001 // remove points before the low cutoff; 2002 Int_t ip;; 2003 for (ip=point1; ip<=nbpoints; ip++) {; 2004 if (gyworkl[ip] != ywmin) {; 2005 point1 = ip;; 2006 break;; 2007 }; 2008 }; 2009 // remove points after the high cutoff; 2010 Int_t point2 = nbpoints;; 2011 for (ip=point2; ip>=point1; ip--) {; 2012 if (gyworkl[ip] != ywmin) {; 2013 point2 = ip;; 2014 break;; 2015 }; 2016 }; 2017 nbpoints = point2-point1+1;; 2018 } else {; 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:73254,ux,uxmax,73254,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['ux'],['uxmax']
Usability,"ult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:3352,clear,clearShapeDirty,3352,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['clear'],['clearShapeDirty']
Usability,ult.h. ◆ fParList. TString TQueryResult::fParList. protected . colon-separated list of PAR loaded at fStart ; Definition at line 72 of file TQueryResult.h. ◆ fPrepTime. Float_t TQueryResult::fPrepTime. protected . Prepare time (seconds) (millisec precision) ; Definition at line 77 of file TQueryResult.h. ◆ fProcTime. Float_t TQueryResult::fProcTime. protected . Processing time (seconds) (millisec precision) ; Definition at line 79 of file TQueryResult.h. ◆ fRecvTime. Float_t TQueryResult::fRecvTime. protected . Transfer-to-client time (seconds) (millisec precision) ; Definition at line 81 of file TQueryResult.h. ◆ fResultFile. TString TQueryResult::fResultFile. protected . URL of the file where results have been archived. ; Definition at line 76 of file TQueryResult.h. ◆ fSelecHdr. TMacro* TQueryResult::fSelecHdr. protected . selector header file ; Definition at line 69 of file TQueryResult.h. ◆ fSelecImp. TMacro* TQueryResult::fSelecImp. protected . selector implementation file ; Definition at line 70 of file TQueryResult.h. ◆ fSeqNum. Int_t TQueryResult::fSeqNum. protected . query unique sequential number ; Definition at line 57 of file TQueryResult.h. ◆ fStart. TDatime TQueryResult::fStart. protected . time when processing started ; Definition at line 60 of file TQueryResult.h. ◆ fStatus. EQueryStatus TQueryResult::fStatus. protected . query status ; Definition at line 59 of file TQueryResult.h. ◆ fTermTime. Float_t TQueryResult::fTermTime. protected . Terminate time (seconds) (millisec precision) ; Definition at line 82 of file TQueryResult.h. ◆ fUsedCPU. Float_t TQueryResult::fUsedCPU. protected . real CPU time used (seconds) ; Definition at line 62 of file TQueryResult.h. Libraries for TQueryResult:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TQueryResult.h; tree/tree/src/TQueryResult.cxx. TQueryResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResult.html:30037,Guid,Guide,30037,doc/master/classTQueryResult.html,https://root.cern,https://root.cern/doc/master/classTQueryResult.html,1,['Guid'],['Guide']
Usability,"ultB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr=0); Elementary constructors. void AMultB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr=0). void AMultB(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr=0). void APlusB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr=0). TMatrixTBase<Element> & SetRowIndexArray(Int_t* data); { memmove(fRowIndex,data,(this->fNrows+1)*sizeof(Int_t)); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* data); { memmove(fColIndex,data,this->fNelems*sizeof(Int_t)); return *this; }. TMatrixTSparse<Element> & SetSparseIndexAB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b). TMatrixTBase<Element> & SetMatrixArray(const double* data, Option_t* = """"); { memcpy(fElements,data,this->fNelems*sizeof(Element)); return *this; }. TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1). void Clear(Option_t* = """"). TMatrixTSparse<Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros, Int_t* pRowIndex, Int_t* pColIndex, double* pData). Bool_t IsSymmetric() const; { return (*this == TMatrixTSparse<Element>(kTransposed,*this)); }. void Mult(const TMatrixTSparse<double>& a, const TMatrixTSparse<double>& b); { AMultB(a,b,0); }. Int_t NonZeros() const; { return this->fNelems; }. TMatrixTBase<Element> & NormByDiag(const TVectorT<double>& , Option_t* ); { MayNotUse(""NormByDiag""); return *this; }. const TMatrixTSparseRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTSparseRow_const<Element>(*this,rown); }. TMatrixTSparseRow <Element> operator[](Int_t rown); { return TMatrixTSparseRow <Element>(*this,rown); }. TMatrixTSparse<Element> & operator-=(Element val). TMatrixTSparse<Element> & operator+=(Element val). TMatrixTSparse<Element> & operator*=(Element val). TMatrixTSparse<Element> & operator+=(const TMatrixTSparse<Eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_double_.html:26688,Clear,Clear,26688,root/html528/TMatrixTSparse_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_double_.html,6,['Clear'],['Clear']
Usability,"ultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMultiFitFunctionAdapter.h:69; ROOT::Math::GSLMultiFitFunctionWrapperwrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithmDefinition GSLMultiFitFunctionWrapper.h:58; ROOT::Math::GSLMultiFitFunctionWrapper::SetFunctionvoid SetFunction(const FuncVector &f, unsigned int nres, unsigned int npar)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiFitFunctionWrapper.h:79; ROOT::Math::GSLMultiFitFunctionWrapper::GetFuncgsl_multifit_function_fdf * GetFunc()Definition GSLMultiFitFunctionWrapper.h:90; ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapperGSLMultiFitFunctionWrapper()Definition GSLMultiFitFunctionWrapper.h:62; ROOT::Math::GSLMultiFitFunctionWrapper::fFuncgsl_multifit_function_fdf fFuncDefinition GSLMultiFitFunctionWrapper.h:95; double; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiFitFPointerdouble(* GSLMultiFitFPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiFitFunctionWrapper.h:46; ROOT::Math::GSLMultiFitDfPointervoid(* GSLMultiFitDfPointer)(const gsl_vector *, void *, gsl_matrix *)Definition GSLMultiFitFunctionWrapper.h:47; ROOT::Math::GSLMultiFitFdfPointervoid(* GSLMultiFitFdfPointer)(const gsl_vector *, void *, gsl_vector *, gsl_matrix *)Definition GSLMultiFitFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoresrcGSLMultiFitFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html:5224,Guid,Guide,5224,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html,1,['Guid'],['Guide']
Usability,"ultiRootFinder.h:233; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(Function &f, int ndim)same method as before but using any function implementing the operator(), so can be wrapped in a IMul...Definition GSLMultiRootFinder.h:193; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::operator=GSLMultiRootFinder & operator=(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:16491,Clear,Clearvoid,16491,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,3,"['Clear', 'clear']","['Clear', 'Clearvoid', 'clear']"
Usability,"ult . ). protected . case with one single file ; Definition at line 249 of file RooStudyManager.cxx. ◆ IsA(). TClass * RooStudyManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 64 of file RooStudyManager.h. ◆ prepareBatchInput(). void RooStudyManager::prepareBatchInput ; (; const char * ; studyName, . Int_t ; nExpPerJob, . bool ; unifiedInput = false . ). Definition at line 161 of file RooStudyManager.cxx. ◆ processBatchOutput(). void RooStudyManager::processBatchOutput ; (; const char * ; filePat). Definition at line 213 of file RooStudyManager.cxx. ◆ run(). void RooStudyManager::run ; (; Int_t ; nExperiments). Definition at line 86 of file RooStudyManager.cxx. ◆ runProof(). void RooStudyManager::runProof ; (; Int_t ; nExperiments, . const char * ; proofHost = """", . bool ; showGui = true . ). Open PROOF-Lite session. ; Definition at line 96 of file RooStudyManager.cxx. ◆ Streamer(). void RooStudyManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStudyManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file RooStudyManager.h. ◆ studies(). std::list< RooAbsStudy * > & RooStudyManager::studies ; (; ). inline . Definition at line 53 of file RooStudyManager.h. ◆ wspace(). RooWorkspace & RooStudyManager::wspace ; (; ). inline . Definition at line 52 of file RooStudyManager.h. Member Data Documentation. ◆ _pkg. RooStudyPackage* RooStudyManager::_pkg. protected . Definition at line 60 of file RooStudyManager.h. Libraries for RooStudyManager:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooStudyManager.h; roofit/roofitcore/src/RooStudyManager.cxx. RooStudyManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStudyManager.html:16220,Guid,Guide,16220,doc/master/classRooStudyManager.html,https://root.cern,https://root.cern/doc/master/classRooStudyManager.html,1,['Guid'],['Guide']
Usability,"um of daughter's capacities. void CheckGeometry(Int_t nrays = 1, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0) const; Shoot nrays with random directions from starting point (startx, starty, startz); in the reference frame of this volume. Track each ray until exiting geometry, then; shoot backwards from exiting point and compare boundary crossing points. void CheckOverlaps(Double_t ovlp = 0.1, Option_t* option = """") const; Overlap checking tool. Check for illegal overlaps within a limit OVLP.; Use option=""s[number]"" to force overlap checking by sampling volume with; [number] points.; Ex: myVol->CheckOverlaps(0.01, ""s10000000""); // shoot 10000000 points; myVol->CheckOverlaps(0.01, ""s""); // shoot the default value of 1e6 points. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape(). void CleanAll(); Clean data of the volume. void ClearShape(); Clear the shape of this volume from the list held by the current manager. void CheckShapes(); check for negative parameters in shapes.; THIS METHOD LEAVES SOME GARBAGE NODES -> memory leak, to be fixed; printf(""---Checking daughters of volume %s\n"", GetName());. Int_t CountNodes(Int_t nlevels = 1000, Int_t option = 0); Count total number of subnodes starting from this volume, nlevels down; option = 0 (default) - count only once per volume; option = 1 - count every time; option = 2 - count volumes on visible branches; option = 3 - return maximum level counted already with option = 0. Bool_t IsAllInvisible() const; Return TRUE if volume and all daughters are invisible. void InvisibleAll(Bool_t flag = kTRUE); Make volume and each of it daughters (in)visible. Bool_t IsFolder() const; Return TRUE if volume contains nodes; return (GetNdaughters()?kTRUE:kFALSE);. Bool_t IsStyleDefault() const; check if the visibility and attributes are the default ones. Bool_t IsTopVolume() const; True if this is the top volume of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoVolume.html:23010,Clear,ClearShape,23010,root/html530/TGeoVolume.html,https://root.cern,https://root.cern/root/html530/TGeoVolume.html,6,['Clear'],"['Clear', 'ClearShape']"
Usability,"um  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/SimpleInterval.h>. Inheritance diagram for RooStats::SimpleInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SimpleInterval() [1/3]. SimpleInterval::SimpleInterval ; (; const char * ; name = nullptr). explicit . default constructor ; Default constructor. ; Definition at line 42 of file SimpleInterval.cxx. ◆ SimpleInterval() [2/3]. SimpleInterval::SimpleInterval ; (; const SimpleInterval & ; other, . const char * ; name . ). default constructor ; fParameters.add( other.fParameters ); ; Definition at line 51 of file SimpleInterval.cxx. ◆ SimpleInterval() [3/3]. SimpleInterval::SimpleInterval ; (; const char * ; name, . const RooRealVar & ; var, . double ; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParameters ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implements RooStats::ConfInterval.; Definition at line 122 of file SimpleI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:13301,Simpl,SimpleInterval,13301,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"um3::SmoothMarkovconst char * SmoothMarkov(Double_t ***source, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t averWindow)This function calculates smoothed spectrum from source spectrum based on Markov chain method.Definition TSpectrum3.cxx:861. Definition at line 861 of file TSpectrum3.cxx. ◆ Streamer(). void TSpectrum3::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TSpectrum3.h. Member Data Documentation. ◆ fHistogram. TH1* TSpectrum3::fHistogram. protected . resulting histogram ; Definition at line 27 of file TSpectrum3.h. ◆ fMaxPeaks. Int_t TSpectrum3::fMaxPeaks. protected . Maximum number of peaks to be found. ; Definition at line 20 of file TSpectrum3.h. ◆ fNPeaks. Int_t TSpectrum3::fNPeaks. protected . number of peaks found ; Definition at line 21 of file TSpectrum3.h. ◆ fPosition. Double_t* TSpectrum3::fPosition. protected . [fNPeaks] array of current peak positions ; Definition at line 22 of file TSpectrum3.h. ◆ fPositionX. Double_t* TSpectrum3::fPositionX. protected . [fNPeaks] X positions of peaks ; Definition at line 23 of file TSpectrum3.h. ◆ fPositionY. Double_t* TSpectrum3::fPositionY. protected . [fNPeaks] Y positions of peaks ; Definition at line 24 of file TSpectrum3.h. ◆ fPositionZ. Double_t* TSpectrum3::fPositionZ. protected . [fNPeaks] Z positions of peaks ; Definition at line 25 of file TSpectrum3.h. ◆ fResolution. Double_t TSpectrum3::fResolution. protected . NOT USED resolution of the neighboring peaks ; Definition at line 26 of file TSpectrum3.h. Libraries for TSpectrum3:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum3.h; hist/spectrum/src/TSpectrum3.cxx. TSpectrum3. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum3.html:45817,Guid,Guide,45817,doc/master/classTSpectrum3.html,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html,1,['Guid'],['Guide']
Usability,"umKahanSum(T initialValue=T{})Initialise the sum.Definition Util.h:126; ROOT::Math::KahanSum::KahanSumKahanSum(T initialSumValue, T initialCarryValue)Initialise with a sum value and a carry value.Definition Util.h:135; ROOT::Math::KahanSum::Addvoid Add(T x)Single-element accumulation. Will not vectorise.Definition Util.h:165; ROOT::Math::KahanSum::operator-=KahanSum< T, N > & operator-=(KahanSum< U, M > const &other)Subtract other KahanSum.Definition Util.h:290; ROOT::Math::KahanSum::KahanSumKahanSum(Iterator sumBegin, Iterator sumEnd, Iterator carryBegin, Iterator carryEnd)Initialise the sum with a pre-existing state.Definition Util.h:148; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::MacOSX::UtilDefinition CocoaUtils.h:22; ROOT::Math::Util::EvalLogT EvalLog(T x)safe evaluation of log(x) with a protections against negative or zero argument to the log smooth line...Definition Util.h:64; ROOT::Math::Util::ToStringstd::string ToString(const T &val)Utility function for conversion to strings.Definition Util.h:50; ROOT::Math::operator+DisplacementVector2D< CoordSystem1, U > operator+(DisplacementVector2D< CoordSystem1, U > v1, const DisplacementVector2D< CoordSystem2, U > &v2)Addition of DisplacementVector2D vectors.Definition DisplacementVector2D.h:440; ROOT::Math::operator-DisplacementVector2D< CoordSystem1, U > operator-(DisplacementVector2D< CoordSystem1, U > v1, DisplacementVector2D< CoordSystem2, U > const &v2)Difference between two DisplacementVector2D vectors.Definition DisplacementVector2D.h:453; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Types.h; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. mathmathcoreincMathUtil.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Util_8h_source.html:18483,Guid,Guide,18483,doc/master/Util_8h_source.html,https://root.cern,https://root.cern/doc/master/Util_8h_source.html,1,['Guid'],['Guide']
Usability,"umVect->clear();; 911 ; 912 //---------------------------------------------------------------------------; 913 // Check the validity of each list element; 914 /////////////////////////////////////////////////////////////////////////////; 915 ; 916 for( const auto& checksumStr : checksums ) {; 917 auto chksum = ParseChecksum( checksumStr.c_str() );; 918 if (chksum == 0u) {; 919 delete fChecksumVect;; 920 fChecksumVect = nullptr;; 921 return kFALSE;; 922 }; 923 ; 924 fChecksumVect->push_back( chksum );; 925 }; 926 return kTRUE;; 927}; 928 ; 929////////////////////////////////////////////////////////////////////////////////; 930/// Parse the checksum in the given string. Returns either the checksum or zero; 931/// if the string is not a hex or decimal number.; 932 ; 933UInt_t TSchemaRule::ParseChecksum(const char* checksum) const {; 934 std::istringstream converter(checksum);; 935 UInt_t chksum;; 936 converter >> std::hex >> chksum;; 937 if (converter.fail()) {; 938 converter.clear();; 939 converter.seekg(0);; 940 converter >> std::dec >> chksum;; 941 }; 942 ; 943 if( converter.fail() ) {; 944 return 0u;; 945 }; 946 ; 947 return chksum;; 948}; 949 ; 950////////////////////////////////////////////////////////////////////////////////; 951/// Split the list as a comma separated list into a TObjArray of TObjString.; 952 ; 953void TSchemaRule::ProcessList( TObjArray* array, const TString& list ); 954{; 955 std::list<std::string> elems;; 956 std::list<std::string>::iterator it;; 957 Internal::TSchemaRuleProcessor::SplitList( (const char*)list, elems );; 958 ; 959 array->Clear();; 960 ; 961 if( elems.empty() ); 962 return;; 963 ; 964 for( it = elems.begin(); it != elems.end(); ++it ) {; 965 TObjString *str = new TObjString;; 966 *str = it->c_str();; 967 array->Add( str );; 968 }; 969}; 970 ; 971////////////////////////////////////////////////////////////////////////////////; 972/// Split the list as a declaration into as a TObjArray of TNamed(name,type).; 973 ; 974void TSchem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:30633,clear,clear,30633,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['clear'],['clear']
Usability,"umber (1->5) of; branches, since all their baskets will be clustered together; instead of being spread across the file. However it might; decrease the performance when reading more branches (or the full; entry). When using SortBasketsByEntry the baskets with the lowest; starting entry are written first. (i.e. the baskets are; sorted on the index/number of the first entry they contain).; This means that on the file the baskets will be in the order; in which they will be needed when reading the whole tree; sequentially. For examples of CloneTree, see tutorials:. -- copytree. A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in $ROOTSYS/test/Event; with: Event 1000 1 1 1. -- copytree2. A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in $ROOTSYS/test/Event; with: Event 1000 1 1 1. void CopyAddresses(TTree* , Bool_t undo = kFALSE); Set branch addresses of passed tree equal to ours.; If undo is true, reset the branch address instead of copying them.; This insures 'separation' of a cloned tree from its original. Long64_t CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); Copy nentries from given tree to this tree.; This routines assumes that the branches that intended to be copied are; already connected. The typical case is that this tree was created using; tree->CloneTree(0). By default copy all entries. Returns number of bytes copied to this tree. If 'option' contains the word 'fast' and nentries is -1, the cloning will be; done without unzipping or unstreaming the baskets (i.e., a direct copy of the; raw bytes on disk). When 'fast' is specified, 'option' can also contains a sorting order for the; baskets in the output file. There are currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. See TTree::CloneTree for a detailed explanat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:58154,undo,undo,58154,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,3,['undo'],['undo']
Usability,umber counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an impleme,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:8648,simpl,simple,8648,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['simpl'],['simple']
Usability,"umber of events in the dataset to obtain the fit function; # If model is an extended p.d.f, expected number events is used; # instead of the observed number of events.; ll = ROOT.RooLinkedList(); model.chi2FitTo(dh, ll); ; # NB: It is also possible to fit a ROOT.RooAbsReal function to a ROOT.RooDataHist; # using chi2FitTo().; ; # Note that entries with zero bins are _not_ allowed; # for a proper chi^2 calculation and will give error; # messages; dsmall = d.reduce(ROOT.RooFit.EventRange(1, 100)); dhsmall = dsmall.binnedClone(); chi2_lowstat = model.createChi2(dhsmall); print(chi2_lowstat.getVal()); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- The following expressions have been identified as constant and will be precalculated and cached: (sig1,sig2); [#1] INFO:Minimization -- The following expressions will be evaluated in cache-and-track mode: (bkg); Minuit2Minimizer: Minimize with max-calls 2000 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = 104.639633447510988; Edm = 0.000778057047730882148; Nfcn = 70; a0 = 0.501526 +/- 0.0229096 (limited); a1 = 0.158456 +/- 0.0368354 (limited); bkgfrac = 0.506609 +/- 0.011349 (limited); sig1frac = 0.815448 +/- 0.0373695 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; 90.86495991394004; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf602_chi2fit.py. tutorialsroofitrf602_chi2fit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf602__chi2fit_8py.html:3703,Guid,Guide,3703,doc/master/rf602__chi2fit_8py.html,https://root.cern,https://root.cern/doc/master/rf602__chi2fit_8py.html,1,['Guid'],['Guide']
Usability,"umber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t MakeSelector(const char* selfile); Create the selector object and save the relevant files and binary information; in the cache so that the worker can pick it up.; Returns 0 and fill fSelector in case of success. Returns -1 and sets; fSelector to 0 in case of failure. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize a query.; Returns -1 in case error, 0 otherwise. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. void SetupFeedback(); Setup reporting of feedback objects. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. TProofPlayerLite(TProof* proof = 0); { }. virtual ~TProofPlayerLite(); { }. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). » Author: G. Ganis Mar 2008 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLite.html:19776,feedback,feedback,19776,root/html602/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLite.html,3,['feedback'],['feedback']
Usability,"umber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t MakeSelector(const char* selfile); Create the selector object and save the relevant files and binary information; in the cache so that the worker can pick it up.; Returns 0 and fill fSelector in case of success. Returns -1 and sets; fSelector to 0 in case of failure. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize a query.; Returns -1 in case error, 0 otherwise. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. void SetupFeedback(); Setup reporting of feedback objects. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. TProofPlayerLite(TProof* proof = 0); { }. virtual ~TProofPlayerLite(); { }. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). » Author: G. Ganis Mar 2008 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerLite.html:19986,feedback,feedback,19986,root/html604/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html604/TProofPlayerLite.html,3,['feedback'],['feedback']
Usability,umberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ; file  StandardFeldmanCousinsDemo.C;   Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  ; file  StandardFrequentistDiscovery.C;   StandardFrequentistDiscovery ;  ; file  StandardHistFactoryPlotsWithCategories.C;   StandardHistFactoryPlotsWithCategories ;  ; file  StandardHypoTestDemo.C;   Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypothesis tests calculators and test statistics. ;  ; file  StandardHypoTestInvDemo.C;   Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  ; file  StandardProfileInspectorDemo.C;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileInspectorDemo.py;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileLikelihoodDemo.C;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardProfileLikelihoodDemo.py;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardTestStatDistributionDemo.C;   StandardTestStatDistributionDemo.C ;  ; file  TestNonCentral.C;   Demonstrates non central chi-square. ;  ; file  TwoSidedFrequentistUpperLimitWithBands.C;   TwoSidedFrequentistUpperLimitWithBands ;  ; file  Zbi_Zgamma.C;   Demonstrate Z_Bi = Z_Gamma ;  ; file  Zbi_Zgamma.py;   Demonstrate Z_Bi = Z_Gamma ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roostats.html:4769,Guid,Guide,4769,doc/master/group__tutorial__roostats.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html,1,['Guid'],['Guide']
Usability,"umbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:108315,simpl,simple,108315,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['simpl'],['simple']
Usability,"ume is a small world by itself - what we need to do is to take it out and to ignore all the rest since it is a self-contained object. In fact, the modeller can act like this, considering a given volume as temporary MARS, but we will describe this feature later on. Let us focus on the biggest pack - it is mandatory to define one. Consider the simplest geometry that is made of a single box. Here is an example on how to build it:; 18.1.1 Example 1: Creating the World; We first need to load the geometry library. This is not needed if one does make map in root folder.; root[] gSystem->Load(""libGeom"");; Second, we have to create an instance of the geometry manager class. This takes care of all the modeller components, performing several tasks to insure geometry validity and containing the user interface for building and interacting with the geometry. After its creation, the geometry manager class can be accessed with the global gGeoManager:; root[] new TGeoManager(""world"", ""the simplest geometry"");; We want to create a single volume in our geometry, but since any volume needs to have an associated medium, we will create a dummy one. You can safely ignore the following lines for the time being, since materials and media will be explained in detail later on.; root[] TGeoMaterial *mat = new TGeoMaterial(""Vacuum"",0,0,0);; root[] TGeoMedium *med = new TGeoMedium(""Vacuum"",1,mat);; We can finally make our volume having a box shape. Note that the world volume does not need to be a box - it can be any other shape. Generally, boxes and tubes are the most recommendable shapes for this purpose due to their fast navigation algorithms.; root[] TGeoVolume *top=gGeoManager->MakeBox(""Top"",med,10.,10.,10.);; The default units are in centimeters. Now we want to make this volume our world. We have to do this operation before closing the geometry.; root[] gGeoManager->SetTopVolume(top);; This should be enough, but it is not since always after defining some geometry hierarchy, TGeo needs to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:877300,simpl,simplest,877300,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"umed for all frames put into the editor. This implies:. do not share the layout-hints among GUI components;; do not delete child widgets in the destructor as this is done automatically. 25.9.2.2 Using Several Tabs; Sometimes you might need to use several tabs to organize properly your class-editor. Each editor tab is a resource shared among all the class-editors. Tabs must be created from the constructor of your editor-class by using the method:; TGVerticalFrame* TGedFrame::CreateEditorTabSubFrame(const Text_t *name),; It returns a pointer to a new tab container frame ready for use in your class. If you need to hide/show this frame depending on the object’s status, you should store it in a data member. See for examples: TH1Editor, TH2Editor.; 25.9.2.3 Base-Class Editors Control; Full control over base-class editors can be achieved by re-implementing virtual method void TGedFrame::ActivateBaseClassEditors(TClass *cl). It is called during each compound editor rebuild and the default implementation simply offers all base-classes to the publishing mechanism.; To prevent inclusion of a base-class into the compound editor, call:; void TGedEditor::ExcludeClassEditor(TClass* class, Bool_t recurse); Pointer to the compound GED-editor is available in TGedFrame‘s data-member:; TGedEditor *fGedEditor; Ordering of base-class editor frames follows the order of the classes in the class hierarchy. This order can be changed by modifying the value of TGedFrame’s data member Int_t fPriority. The default value is 50; smaller values move the frame towards to the top. This priority should be set in the editor constructor.; 25.10 Drag and Drop; Drag and Drop support is introduced for Linux (via Xdnd - the drag and drop protocol for X window system) and for Windows (via Clipboard). Users can selects something in ROOT with a mouse press, drags it (moves the mouse while keeping the mouse button pressed) and releases the mouse button someplace else. When the button is released the selected da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1225973,simpl,simply,1225973,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"umentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code documentation. This is mainly for software developers of ROOT and using ROOT to build the applications.; A general Users Guide is provided for a more in depth explanation of concepts and functionality available in the ROOT system. ; A number of topical User Guides and Manuals for various components of the system.; A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; A rich set of HowTo's is also present to discuss issues commonly faced by ROOT users. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Convent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:1926,Guid,Guide,1926,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,1,['Guid'],['Guide']
Usability,"umentation. ◆ clone(). TObject * xRooProjectedPdf::clone ; (; const char * ; newname); const. inlineoverridevirtual . Reimplemented from RooProjectedPdf.; Definition at line 7152 of file xRooNode.cxx. ◆ evaluate(). double xRooProjectedPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate projected p.d.f. ; Reimplemented from RooProjectedPdf.; Definition at line 7155 of file xRooNode.cxx. ◆ expectedEvents(). double xRooProjectedPdf::expectedEvents ; (; const RooArgSet * ; nset); const. inlineoverridevirtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented from RooProjectedPdf.; Definition at line 7147 of file xRooNode.cxx. ◆ extendMode(). ExtendMode xRooProjectedPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooProjectedPdf.; Definition at line 7151 of file xRooNode.cxx. ◆ RooProjectedPdf() [1/3]. RooProjectedPdf::RooProjectedPdf ; (; ). Default constructor. ; Definition at line 24 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [2/3]. RooProjectedPdf::RooProjectedPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _intpdf, . const RooArgSet & ; intObs . ). Construct projection of input pdf '_intpdf' over observables 'intObs'. ; Definition at line 25 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [3/3]. RooProjectedPdf::RooProjectedPdf ; (; const RooProjectedPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 26 of file RooProjectedPdf.cxx. roofit/xroofit/src/xRooNode.cxx. xRooProjectedPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:76141,Guid,Guide,76141,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['Guid'],['Guide']
Usability,umentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ; Definition at line 33 of file TGraphMultiErrors.h. Libraries for TGraphMultiErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphMultiErrors.h; hist/hist/src/TGraphMultiErrors.cxx. TGraphMultiErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:79484,Guid,Guide,79484,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['Guid'],['Guide']
Usability,umentation. ◆ m_ams. std::vector<double> TMVA::DNN::ClassificationSettings::m_ams. Definition at line 1000 of file NeuralNet.h. ◆ m_cutValue. double TMVA::DNN::ClassificationSettings::m_cutValue. Definition at line 1008 of file NeuralNet.h. ◆ m_fileNameNetConfig. std::string TMVA::DNN::ClassificationSettings::m_fileNameNetConfig. Definition at line 1011 of file NeuralNet.h. ◆ m_fileNameResult. std::string TMVA::DNN::ClassificationSettings::m_fileNameResult. Definition at line 1010 of file NeuralNet.h. ◆ m_input. std::vector<double> TMVA::DNN::ClassificationSettings::m_input. Definition at line 995 of file NeuralNet.h. ◆ m_output. std::vector<double> TMVA::DNN::ClassificationSettings::m_output. Definition at line 996 of file NeuralNet.h. ◆ m_pResultPatternContainer. std::vector<Pattern>* TMVA::DNN::ClassificationSettings::m_pResultPatternContainer. Definition at line 1009 of file NeuralNet.h. ◆ m_scaleToNumEvents. size_t TMVA::DNN::ClassificationSettings::m_scaleToNumEvents. Definition at line 1006 of file NeuralNet.h. ◆ m_significances. std::vector<double> TMVA::DNN::ClassificationSettings::m_significances. Definition at line 1001 of file NeuralNet.h. ◆ m_sumOfBkgWeights. double TMVA::DNN::ClassificationSettings::m_sumOfBkgWeights. Definition at line 1005 of file NeuralNet.h. ◆ m_sumOfSigWeights. double TMVA::DNN::ClassificationSettings::m_sumOfSigWeights. Definition at line 1004 of file NeuralNet.h. ◆ m_targets. std::vector<double> TMVA::DNN::ClassificationSettings::m_targets. Definition at line 997 of file NeuralNet.h. ◆ m_weights. std::vector<double> TMVA::DNN::ClassificationSettings::m_weights. Definition at line 998 of file NeuralNet.h. Libraries for TMVA::DNN::ClassificationSettings:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/NeuralNet.h; tmva/tmva/src/NeuralNet.cxx. TMVADNNClassificationSettings. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:11459,Guid,Guide,11459,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['Guid'],['Guide']
Usability,"umeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7f337a0 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(Mf_over_Mf_Int[cpsi]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_Mf_over_Mf_Int[cpsi]_MfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7e9d680 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi] for nset () with code 1 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Mf_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7e9d680 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:NumericIntegration -- RooRealIntegral::init(T_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf210_angularconv.py. tutorialsroofitrf210_angularconv.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf210__angularconv_8py.html:8583,Guid,Guide,8583,doc/master/rf210__angularconv_8py.html,https://root.cern,https://root.cern/doc/master/rf210__angularconv_8py.html,1,['Guid'],['Guide']
Usability,"ummy, std::string histoName, int bins=0, double min=0, double max=0);  ; TH2F * getHistogram (const TH2F *dummy, std::string histoName, int bins=0, double min=0, double max=0, int bins2=0, double min2=0, double max2=0);  . Private Attributes; TCanvas * fCanvas;  ; std::map< std::string, TH1F * > m_histos1D;  ; std::map< std::string, TH2F * > m_histos2D;  . #include <TMVA/Monitoring.h>; Constructor & Destructor Documentation. ◆ Monitoring(). TMVA::Monitoring::Monitoring ; (; ). inline . Definition at line 26 of file Monitoring.h. ◆ ~Monitoring(). TMVA::Monitoring::~Monitoring ; (; ). inline . Definition at line 31 of file Monitoring.h. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::Monitoring::addPoint ; (; std::string ; histoName, . double ; x . ). inline . Definition at line 169 of file Monitoring.h. ◆ addPoint() [2/2]. void TMVA::Monitoring::addPoint ; (; std::string ; histoName, . double ; x, . double ; y . ). inline . Definition at line 176 of file Monitoring.h. ◆ clear(). void TMVA::Monitoring::clear ; (; std::string ; histoName). inline . Definition at line 183 of file Monitoring.h. ◆ create() [1/2]. void TMVA::Monitoring::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . Definition at line 132 of file Monitoring.h. ◆ create() [2/2]. void TMVA::Monitoring::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max, . int ; bins2, . double ; min2, . double ; max2 . ). inline . Definition at line 138 of file Monitoring.h. ◆ exists() [1/3]. bool TMVA::Monitoring::exists ; (; std::string ; histoName). inline . Definition at line 116 of file Monitoring.h. ◆ exists() [2/3]. bool TMVA::Monitoring::exists ; (; TH1F * ; dummy, . std::string ; histoName . ). inline . Definition at line 99 of file Monitoring.h. ◆ exists() [3/3]. bool TMVA::Monitoring::exists ; (; TH2F * ; dummy, . std::string ; histoName . ). inline . Definition at line 107 of file Monitoring.h. ◆ GetCanvas(). TCanvas * TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Monitoring.html:2128,clear,clear,2128,doc/master/classTMVA_1_1Monitoring.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Monitoring.html,1,['clear'],['clear']
Usability,"umns of a Haar -matrix of order order are indeed orthogonal:; const TMatrixD haar = THaarMatrixD(order);; TVectorD colj(1<<order);; TVectorD coll(1<<order);; for (Int_t j = haar.GetColLwb(); j <= haar.GetColUpb(); j++) {; colj = TMatrixDColumn_const(haar,j);; Assert(TMath::Abs(colj*colj-1.0) <= 1.0e-15);. for (Int_t l = j+1; l <= haar.GetColUpb(); l++) {; coll = TMatrixDColumn_const(haar,l);; Assert(TMath::Abs(colj*coll) <= 1.0e-15);; }; }; Multiplying part of a matrix with another part of that matrix (they can overlap); TMatrixDSub(m,1,3,1,3) *= m.GetSub(5,7,5,7);; 14.6 Matrix Decompositions; The linear algebra package offers several classes to assist in matrix decompositions. Each of the decomposition methods performs a set of matrix transformations to facilitate solving a system of linear equations, the formation of inverses as well as the estimation of determinants and condition numbers. More specifically the classes TDecompLU, TDecompBK, TDecompChol, TDecompQRH and TDecompSVD give a simple and consistent interface to the LU, Bunch-Kaufman, Cholesky, QR and SVD decompositions. All of these classes are derived from the base class TDecompBase of which the important methods are listed in next table:. Method; Action. Bool_t Decompose(); perform the matrix decomposition. Double_t Condition(); calculate ||A||1 ||A-1||1, see “Condition number”. void Det(Double_t &d1,Double_t &d2); the determinant is d1 \(2^{d_{2}}\). Expressing the determinant this way makes under/over-flow very unlikely. Bool_t Solve(TVectorD &b); solve Ax=b; vectorb is supplied through the argument and replaced with solution x. TVectorD Solve(const TVectorD &b,Bool_t &ok); solve Ax=b; x is returned. Bool_t Solve(TMatrixDColumn &b); solve Ax=column(B,j);column(B,j) is supplied through the argument and replaced with solution x. Bool_t TransSolve(TVectorD &b); solve \(A^Tx=b;\) vector b is supplied through the argument and replaced with solution x. TVectorD TransSolve(const TVectorD b, Bool_t &ok); solve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:788826,simpl,simple,788826,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"unc, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z . ). Definition at line 83 of file RooTFnPdfBinding.cxx. ◆ BootStrapData(). RooCmdArg RooFit::BootStrapData ; (; const RooDataSet & ; dset). Definition at line 917 of file RooGlobalFunc.cxx. ◆ getUniqueId(). template<class Class , class UniqueId_t = std::remove_reference_t<decltype(std::declval<std::remove_pointer_t<Class>>().uniqueId())>> . UniqueId_t const & RooFit::getUniqueId ; (; Class const * ; ptr). A helper function to replace pointer comparisons with UniqueId comparisons. ; With pointer comparisons, we can also have nullptr. In the UniqueId case, this translates to the nullid. ; Definition at line 89 of file UniqueId.h. ◆ makeOwningPtr() [1/2]. template<typename T > . OwningPtr< T > RooFit::makeOwningPtr ; (; std::unique_ptr< T > && ; ptr). Internal helper to turn a std::unique_ptr<T> into an OwningPtr. ; Definition at line 40 of file Config.h. ◆ makeOwningPtr() [2/2]. template<typename T , typename U > . OwningPtr< T > RooFit::makeOwningPtr ; (; std::unique_ptr< U > && ; ptr). internal helper to turn a std::unique_ptr<t> into an owningptr. ; Definition at line 51 of file Config.h. ◆ operator<<(). ostream & RooFit::operator<< ; (; std::ostream & ; os, . const RooPrintable & ; rp . ). Definition at line 49 of file RooPrintable.cxx. ◆ ShowAsymError(). RooCmdArg RooFit::ShowAsymError ; (; bool ; flag). Definition at line 962 of file RooGlobalFunc.cxx. ◆ ShowError(). RooCmdArg RooFit::ShowError ; (; bool ; flag). Definition at line 958 of file RooGlobalFunc.cxx. ◆ ShowName(). RooCmdArg RooFit::ShowName ; (; bool ; flag). Definition at line 950 of file RooGlobalFunc.cxx. ◆ ShowUnit(). RooCmdArg RooFit::ShowUnit ; (; bool ; flag). Definition at line 966 of file RooGlobalFunc.cxx. ◆ ShowValue(). RooCmdArg RooFit::ShowValue ; (; bool ; flag). Definition at line 954 of file RooGlobalFunc.cxx. RooFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit.html:35593,Guid,Guide,35593,doc/master/namespaceRooFit.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html,1,['Guid'],['Guide']
Usability,"unction / constant. Needs to be overridden by all derived classes. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return the number of expected events over the full range of all variables. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to input p.d.f. ;  ; TClass * IsA () const override;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendPdf.html:3227,simpl,simple,3227,doc/master/classRooExtendPdf.html,https://root.cern,https://root.cern/doc/master/classRooExtendPdf.html,1,['simpl'],['simple']
Usability,"unction class and of the member function are required only; if running in CINT and they are not need in compiled C++ mode.; See also the tutorial math/exampleFunctor.C for a running example.; . Function Members (Methods); public:. virtual~TF1(); voidTObject::AbstractMethod(const char* method) const; static voidAbsValue(Bool_t reject = kTRUE); virtual voidAddParameter(const TString& name, Double_t value); virtual Bool_tAddToGlobalList(Bool_t on = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static voidCalcGaussLegendreSamplingPoints(Int_t num, Double_t* x, Double_t* w, Double_t eps = 3.0E-11); virtual Double_tCentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& f1) const; virtual TH1*CreateHistogram(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDerivative(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tDerivative2(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tDerivative3(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; static Double_tDerivativeError(); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TF1*DrawCopy(Option_t* option = """") const; virtual TObject*DrawDerivative(Option_t* option = ""al"")MENU ; virtual voidDrawF1(Double_t xmin, Double_t xmax, Option_t* option = """"); virtual TObject*DrawIntegra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:5962,Clear,Clear,5962,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,1,['Clear'],['Clear']
Usability,"unction is virtual, we append ""virtual"" before the return type.; 796 returnType.Prepend(""virtual "");; 797 }; 798 returnType.ReplaceAll("" *"", ""*"");; 799 } else {; 800 // If the function is not inline we only change the spacing in ""returnType""; 801 returnType.ReplaceAll(""*"", "" *"");; 802 }; 803 // In any case (with no respect to virtual/inline check) we need to change; 804 // the return type as following.; 805 // TODO: prepend ""std::"" to all stdlib classes!; 806 returnType.ReplaceAll(""istream"", ""std::istream"");; 807 returnType.ReplaceAll(""ostream"", ""std::ostream"");; 808 returnType.ReplaceAll(""map"", ""std::map"");; 809 returnType.ReplaceAll(""vector"", ""std::vector"");; 810 returnType.ReplaceAll(""&"", "" &"");; 811 return returnType;; 812}; 813} // namespace; 814 ; 815namespace {; 816////////////////////////////////////////////////////////////////////////////////; 817/// The function generates a URL for ""dataMemberName"" defined in ""scopeName"".; 818/// It returns a TString with the URL used in the online reference guide,; 819/// generated with Doxygen. For data members the URL consist of 2 parts -; 820/// URL for ""scopeName"" and a part for ""dataMemberName"".; 821/// For enumerator, the URL could be separated into 3 parts - URL for; 822/// ""scopeName"", part for the enumeration and a part for the enumerator.; 823///; 824/// \param[in] scopeName the name of the class/namespace/struct; 825/// \param[in] dataMemberName the name of the data member/enumerator; 826/// \param[in] dataMember pointer to the data member/enumerator; 827/// \param[in] scopeType enumerator to the scope type; 828 ; 829static TString; 830GetUrlForDataMember(const TString &scopeName, const TString &dataMemberName, TDataMember *dataMember, EUrl scopeType); 831{; 832 // We first check if the data member is not enumerator.; 833 if (!dataMember->IsEnum()) {; 834 // If we work with data members, we have to append a hashed with MD5 text, consisting of:; 835 // ""Type ClassName::DataMemberNameDataMemberName(arguments)"".; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:29868,guid,guide,29868,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['guid'],['guide']
Usability,"unction, the variables; it integrates and the range integrates over. The following named arguments are accepted. SupNormSet(const RooArgSet&) -- Observables over which should be normalized _in_addition_ to the; integration observables; ScanNumCdf() -- Apply scanning technique if cdf integral involves numeric integration [ default ]; ScanAllCdf() -- Always apply scanning technique; ScanNoCdf() -- Never apply scanning technique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:77357,clear,clearEvalError,77357,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,12,"['Clear', 'clear']","['Clear', 'clearEvalError']"
Usability,"unction1Map< VO, VI > & RooCFunction1Ref< VO, VI >::fmap ; (; ). static . ◆ fmap() [2/3]. RooCFunction1Map< double, double > & RooCFunction1Ref< double, double >::fmap ; (; ). Definition at line 36 of file RooCFunction1Binding.cxx. ◆ fmap() [3/3]. RooCFunction1Map< double, int > & RooCFunction1Ref< double, int >::fmap ; (; ). Definition at line 46 of file RooCFunction1Binding.cxx. ◆ IsA(). template<class VO , class VI > . TClass * RooCFunction1Ref< VO, VI >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 137 of file RooCFunction1Binding.h. ◆ name(). template<class VO , class VI > . const char * RooCFunction1Ref< VO, VI >::name ; (; ); const. inline . Definition at line 100 of file RooCFunction1Binding.h. ◆ operator()(). template<class VO , class VI > . VO RooCFunction1Ref< VO, VI >::operator() ; (; VI ; x); const. inline . Definition at line 95 of file RooCFunction1Binding.h. ◆ Streamer(). template<class VO , class VI > . void RooCFunction1Ref< VO, VI >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 145 of file RooCFunction1Binding.h. ◆ StreamerNVirtual(). template<class VO , class VI > . void RooCFunction1Ref< VO, VI >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 137 of file RooCFunction1Binding.h. Member Data Documentation. ◆ _fmap. template<class VO , class VI > . RooCFunction1Map< VO, VI > * RooCFunction1Ref< VO, VI >::_fmap = nullptr. staticprivate . Pointer to embedded function. ; Definition at line 135 of file RooCFunction1Binding.h. ◆ _ptr. template<class VO , class VI > . func_t RooCFunction1Ref< VO, VI >::_ptr. private . Definition at line 133 of file RooCFunction1Binding.h. roofit/roofit/inc/RooCFunction1Binding.h. RooCFunction1Ref. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Ref.html:14289,Guid,Guide,14289,doc/master/classRooCFunction1Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Ref.html,1,['Guid'],['Guide']
Usability,"unction::SVKernelFunction ; (; EKernelType ; k, . std::vector< EKernelType > ; kernels, . std::vector< Float_t > ; gammas, . Float_t ; gamma, . Float_t ; order, . Float_t ; theta . ). constructor ; Definition at line 100 of file SVKernelFunction.cxx. ◆ ~SVKernelFunction(). TMVA::SVKernelFunction::~SVKernelFunction ; (; ). destructor ; Definition at line 115 of file SVKernelFunction.cxx. Member Function Documentation. ◆ Evaluate(). Float_t TMVA::SVKernelFunction::Evaluate ; (; SVEvent * ; ev1, . SVEvent * ; ev2 . ). Definition at line 133 of file SVKernelFunction.cxx. ◆ setCompatibilityParams(). void TMVA::SVKernelFunction::setCompatibilityParams ; (; EKernelType ; k, . UInt_t ; order, . Float_t ; theta, . Float_t ; kappa . ). set old options for compatibility mode ; Definition at line 124 of file SVKernelFunction.cxx. Member Data Documentation. ◆ fGamma. Float_t TMVA::SVKernelFunction::fGamma. private . Definition at line 56 of file SVKernelFunction.h. ◆ fKappa. Float_t TMVA::SVKernelFunction::fKappa. private . Definition at line 65 of file SVKernelFunction.h. ◆ fKernel. EKernelType TMVA::SVKernelFunction::fKernel. private . Definition at line 62 of file SVKernelFunction.h. ◆ fKernelsList. std::vector<EKernelType> TMVA::SVKernelFunction::fKernelsList. private . Definition at line 67 of file SVKernelFunction.h. ◆ fmGamma. std::vector<Float_t> TMVA::SVKernelFunction::fmGamma. private . Definition at line 59 of file SVKernelFunction.h. ◆ fOrder. UInt_t TMVA::SVKernelFunction::fOrder. private . Definition at line 63 of file SVKernelFunction.h. ◆ fTheta. Float_t TMVA::SVKernelFunction::fTheta. private . Definition at line 64 of file SVKernelFunction.h. Libraries for TMVA::SVKernelFunction:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/SVKernelFunction.h; tmva/tmva/src/SVKernelFunction.cxx. TMVASVKernelFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVKernelFunction.html:4276,Guid,Guide,4276,doc/master/classTMVA_1_1SVKernelFunction.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVKernelFunction.html,1,['Guid'],['Guide']
Usability,"unctions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:1163,simpl,simple,1163,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,2,['simpl'],['simple']
Usability,"und()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringGetTypeString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGSlider&operator=(const TGSlider&); TGSlider(const TGSlider&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSlider.html:15131,Clear,ClearFlags,15131,root/html602/TGSlider.html,https://root.cern,https://root.cern/root/html602/TGSlider.html,2,['Clear'],['ClearFlags']
Usability,"und, so missing class descriptions can be handled. For HTML, its creates the description block, the list of functions and data members, and the inheritance tree or, if Graphviz's dot is found, the class charts. ; Definition at line 1338 of file TClassDocOutput.cxx. ◆ WriteClassDocHeader(). void TClassDocOutput::WriteClassDocHeader ; (; std::ostream & ; classFile). protectedvirtual . Write out the introduction of a class description (shortcuts and links) ; Definition at line 1429 of file TClassDocOutput.cxx. ◆ WriteMethod(). void TClassDocOutput::WriteMethod ; (; std::ostream & ; out, . TString & ; ret, . TString & ; name, . TString & ; params, . const char * ; filename, . TString & ; anchor, . TString & ; comment, . TString & ; codeOneLiner, . TDocMethodWrapper * ; guessedMethod . ). protectedvirtual . Write method name with return type ret and parameters param to out. ; Build a link using file and anchor. Cooment it with comment, and show the code codeOneLiner (set if the func consists of only one line of code, immediately surrounded by ""{"",""}""). Also updates fMethodNames's count of method names. ; Definition at line 1589 of file TClassDocOutput.cxx. Friends And Related Symbol Documentation. ◆ TDocParser. friend class TDocParser. friend . Definition at line 65 of file TClassDocOutput.h. Member Data Documentation. ◆ fCurrentClass. TClass* TClassDocOutput::fCurrentClass. protected . Definition at line 28 of file TClassDocOutput.h. ◆ fCurrentClassesTypedefs. TList* TClassDocOutput::fCurrentClassesTypedefs. protected . Definition at line 29 of file TClassDocOutput.h. ◆ fHierarchyLines. Int_t TClassDocOutput::fHierarchyLines. protected . Definition at line 27 of file TClassDocOutput.h. ◆ fParser. TDocParser* TClassDocOutput::fParser. protected . Definition at line 30 of file TClassDocOutput.h. html/inc/TClassDocOutput.h; html/src/TClassDocOutput.cxx. TClassDocOutput. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocOutput.html:28146,Guid,Guide,28146,doc/master/classTClassDocOutput.html,https://root.cern,https://root.cern/doc/master/classTClassDocOutput.html,1,['Guid'],['Guide']
Usability,"undaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:4480,clear,clearShapeDirty,4480,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['clear'],['clearShapeDirty']
Usability,"uned for a total write memory of around 300 MB per fill context. ; Definition at line 82 of file RNTupleWriteOptions.hxx. ◆ fUseBufferedWrite. bool ROOT::Experimental::RNTupleWriteOptions::fUseBufferedWrite = true. protected . Whether to use buffered writing (with RPageSinkBuf). ; This buffers compressed pages in memory, reorders them to keep pages of the same column adjacent, and coalesces the writes when committing a cluster. ; Definition at line 85 of file RNTupleWriteOptions.hxx. ◆ fUseDirectIO. bool ROOT::Experimental::RNTupleWriteOptions::fUseDirectIO = false. protected . Whether to use Direct I/O for writing. ; Note that this introduces alignment requirements that may very between filesystems and platforms. ; Definition at line 88 of file RNTupleWriteOptions.hxx. ◆ fUseImplicitMT. EImplicitMT ROOT::Experimental::RNTupleWriteOptions::fUseImplicitMT = EImplicitMT::kDefault. protected . Whether to use implicit multi-threading to compress pages. Only has an effect if buffered writing is turned on. ; Definition at line 93 of file RNTupleWriteOptions.hxx. ◆ fWriteBufferSize. std::size_t ROOT::Experimental::RNTupleWriteOptions::fWriteBufferSize = 4 * 1024 * 1024. protected . Buffer size to use for writing to files, must be a multiple of 4096 bytes. ; Testing suggests that 4MiB gives best performance (with Direct I/O) at a reasonable memory consumption. ; Definition at line 91 of file RNTupleWriteOptions.hxx. ◆ kDefaultMaxKeySize. constexpr std::uint64_t ROOT::Experimental::RNTupleWriteOptions::kDefaultMaxKeySize = 0x4000'0000. staticconstexpr . Definition at line 56 of file RNTupleWriteOptions.hxx. Libraries for ROOT::Experimental::RNTupleWriteOptions:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx; tree/ntuple/v7/src/RNTupleWriteOptions.cxx. ROOTExperimentalRNTupleWriteOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:13634,Guid,Guide,13634,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,1,['Guid'],['Guide']
Usability,"unexpectedly. The objects which can be used to minimize are:; 6.1.1 \(\mbox{MIGRAD}\); This is the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. It will run faster if you instantiate it with a low–level MnStrategy and will be more reliable if you instantiate it with a high–level MnStrategy (although the latter option may not help much). Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate. If first derivatives are a problem, they can be calculated analytically inside \(\mbox{FCN}\) (see [howto:fcn]) or if this is not feasible, the user can try to improve the accuracy of M ’s numerical approximation by adjusting values of MnMachinePrecision and/or MnStrategy (see [api:epsmac] and [api:strategy]).; 6.1.2 \(\mbox{MINIMIZE}\); This is equivalent to \(\mbox{MIGRAD}\), except that if \(\mbox{MIGRAD}\) fails, it reverts to \(\mbox{SIMPLEX}\) and then calls \(\mbox{MIGRAD}\) again.; 6.1.3 \(\mbox{SCAN}\); This is not intended to minimize, and just scans the function, one parameter at a time. It does however retain the best value after each scan, so it does some sort of highly primitive minimization.; 6.1.4 \(\mbox{SIMPLEX}\); This genuine multidimensional minimization routine is usually much slower than \(\mbox{MIGRAD}\), but it does not use first derivatives, so it should not be so sensitive to the precision of the \(\mbox{FCN}\) calculations, and is even rather robust with respect to gross fluctuations in the function value. However, it gives no reliable information about parameter errors, no information whatsoever about parameter correlations, and worst of all cannot be expected to converge accurately to the minimum in a finite time. Its estimate of the expected distance to the minimum \(\mbox{EDM}\) is largely fantasy, so it would not even know if it did converge.; 6.2 Fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:67011,SIMPL,SIMPLEX,67011,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['SIMPL'],['SIMPLEX']
Usability,"unfold distributions from detector to truth level. ; TUnfold is used to decompose a measurement y into several sources x, given the measurement uncertainties and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfold has an adjustable regularisation term and also supports an optional constraint on the total number of events.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various features to TUnfold, such as: background subtraction, propagation of systematic uncertainties, complex multidimensional arrangements of the bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfold are the getter functions. For TUnfold, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfold: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Basic formulae:; χ2A=(Ax-y)TVyy-1(Ax-y); χ2L=(x-f*x0)TLTL(x-f*x0); χ2unf=χ2A+τ2χ2L+λΣi(Ax-y)i; x:result, A:probabilities, y:data, Vyy:data covariance, f:bias scale, x0:bias, L:regularisation conditions, τ:regularisation strength, λ:Lagrangian multiplier; Without area constraint, λ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:1405,simpl,simply,1405,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['simpl'],['simply']
Usability,"unique tag of the wanted session The special value stag = ""NR"" allows to just initialize the TProofLog object w/o retrieving the files; this may be useful when the number of workers is large and only a subset of logs is required. If 'stag' is specified 'isess' is ignored (unless stag = ""NR""). If 'pattern' is specified only the lines containing it are retrieved (remote grep functionality); to filter out a pattern 'pat' use pattern = ""-v pat"". Returns a TProofLog object (to be deleted by the caller) on success, 0 if something wrong happened. ; Reimplemented from TProofMgr.; Definition at line 129 of file TProofMgrLite.cxx. ◆ IsA(). TClass * TProofMgrLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofMgr.; Definition at line 39 of file TProofMgrLite.h. ◆ ReadBuffer() [1/2]. TObjString * TProofMgrLite::ReadBuffer ; (; const char * ; fin, . const char * ; pattern . ). overridevirtual . Read lines containing 'pattern' in 'file'. ; Returns a TObjString with the content or 0, in case of failure ; Reimplemented from TProofMgr.; Definition at line 353 of file TProofMgrLite.cxx. ◆ ReadBuffer() [2/2]. TObjString * TProofMgrLite::ReadBuffer ; (; const char * ; fin, . Long64_t ; ofs, . Int_t ; len . ). overridevirtual . Read 'len' bytes from offset 'ofs' of the local file 'fin'. ; Returns a TObjString with the content or 0, in case of failure ; Reimplemented from TProofMgr.; Definition at line 289 of file TProofMgrLite.cxx. ◆ Streamer(). void TProofMgrLite::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofMgr. ◆ StreamerNVirtual(). void TProofMgrLite::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TProofMgrLite.h. proof/proof/inc/TProofMgrLite.h; proof/proof/src/TProofMgrLite.cxx. TProofMgrLite. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgrLite.html:20352,Guid,Guide,20352,doc/master/classTProofMgrLite.html,https://root.cern,https://root.cern/doc/master/classTProofMgrLite.html,1,['Guid'],['Guide']
Usability,"unk. The core library (libCore.so) contains the essentials; it is a part of all ROOT applications. In the Figure 1-2 you see that libCore.so is made up of base classes, container classes, meta information classes, operating system specific classes, and the ZIP algorithm used for compression of the ROOT files.; The Cling library (libCling.so) is also needed in all ROOT applications, and even by libCore. A program referencing only TObject only needs libCore; libCling will be opened automatically. To add the ability to read and write ROOT objects one also has to load libRIO. As one would expect, none of that depends on graphics or the GUI.; Library dependencies have different consequences; depending on whether you try to build a binary, or you just try to access a class that is defined in a library.; 1.6.2.2 Linktime Library Dependencies; When building your own executable you will have to link against the libraries that contain the classes you use. The ROOT reference guide states the library a class is reference guide defined in. Almost all relevant classes can be found in libraries returned by root-config -glibs; the graphics libraries are retuned by root-config --libs. These commands are commonly used in Makefiles. Using root-config instead of enumerating the libraries by hand allows you to link them in a platform independent way. Also, if ROOT library names change you will not need to change your Makefile.; A batch program that does not have a graphic display, which creates, fills, and saves histograms and trees, only needs to link the core libraries (libCore, libRIO), libHist and libTree. If ROOT needs access to other libraries, it loads them dynamically. For example, if the TreeViewer is used, libTreePlayer and all libraries libTreePlayer depends on are loaded also. The dependent libraries are shown in the ROOT reference guide’s library dependency graph. The difference between reference guide libHist and libHistPainter is that the former needs to be explicitly link",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:21655,guid,guide,21655,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['guid'],['guide']
Usability,"unsigned int ROOT::Math::GSLQuasiRandomEngine::NDim ; (; ); const. return the dimension of generator ; Definition at line 152 of file GSLQuasiRandom.cxx. ◆ operator()() [1/2]. double ROOT::Math::GSLQuasiRandomEngine::operator() ; (; ); const. Generate a random number between ]0,1[. ; Definition at line 97 of file GSLQuasiRandom.cxx. ◆ operator()() [2/2]. bool ROOT::Math::GSLQuasiRandomEngine::operator() ; (; double * ; x); const. Fill array x with random numbers between ]0,1[. ; Definition at line 107 of file GSLQuasiRandom.cxx. ◆ operator=(). GSLQuasiRandomEngine & ROOT::Math::GSLQuasiRandomEngine::operator= ; (; const GSLQuasiRandomEngine & ; eng). Assignment operator : make a deep copy of the contained GSL generator. ; Definition at line 71 of file GSLQuasiRandom.cxx. ◆ SetType(). void ROOT::Math::GSLQuasiRandomEngine::SetType ; (; GSLQRngWrapper * ; r). inlineprotected . internal method used by the derived class to set the type of generators ; Definition at line 136 of file GSLQuasiRandom.h. ◆ Size(). unsigned int ROOT::Math::GSLQuasiRandomEngine::Size ; (; ); const. return the state size of generator ; Definition at line 145 of file GSLQuasiRandom.cxx. ◆ Skip(). bool ROOT::Math::GSLQuasiRandomEngine::Skip ; (; unsigned int ; n); const. Skip the next n random numbers. ; Definition at line 114 of file GSLQuasiRandom.cxx. ◆ Terminate(). void ROOT::Math::GSLQuasiRandomEngine::Terminate ; (; ). delete pointer to contained rng ; Definition at line 88 of file GSLQuasiRandom.cxx. Member Data Documentation. ◆ fQRng. GSLQRngWrapper* ROOT::Math::GSLQuasiRandomEngine::fQRng. private . Definition at line 142 of file GSLQuasiRandom.h. Libraries for ROOT::Math::GSLQuasiRandomEngine:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLQuasiRandom.h; math/mathmore/src/GSLQuasiRandom.cxx. ROOTMathGSLQuasiRandomEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQuasiRandomEngine.html:5971,Guid,Guide,5971,doc/master/classROOT_1_1Math_1_1GSLQuasiRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQuasiRandomEngine.html,1,['Guid'],['Guide']
Usability,"unts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const; TStringSecToText(Double_t, Bool_t) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts"" ; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Timer.html:6564,progress bar,progress bar,6564,root/html528/TMVA__Timer.html,https://root.cern,https://root.cern/root/html528/TMVA__Timer.html,4,['progress bar'],['progress bar']
Usability,"uota (const char *opt);  Display quota information. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:5249,Clear,Clear,5249,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['Clear'],['Clear']
Usability,"up . Definition at line 7150 of file TSpectrum2Painter.cxx. ◆ SetColorIncrements(). void TSpectrum2Painter::SetColorIncrements ; (; Double_t ; r, . Double_t ; g, . Double_t ; b . ). Sets color increments between two color levels for r, g, b components: . r, g, b - color increments between two color levels . Definition at line 7162 of file TSpectrum2Painter.cxx. ◆ SetContourWidth(). void TSpectrum2Painter::SetContourWidth ; (; Int_t ; width). Sets width between horizontal slices: . width - width between contours, applies only for contours display mode . Definition at line 7218 of file TSpectrum2Painter.cxx. ◆ SetDisplayMode(). void TSpectrum2Painter::SetDisplayMode ; (; Int_t ; modeGroup, . Int_t ; displayMode . ). Sets display group mode and display mode: . modeGroup - the following group modes can be set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; displayMode - posible display modes are: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles . Definition at line 7071 of file TSpectrum2Painter.cxx. ◆ SetLightHeightWeight(). void TSpectrum2Painter::SetLightHeightWeight ; (; Double_t ; weight). Sets weight between shading according to fictive light source and according to channels counts: . weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group . Definition at line 7228 of file TSpectrum2Painter.cxx. ◆ SetLightPosition(). void TSpectrum2Painter::SetLightPosition ; (; Int_t ; x, . Int_t ; y, . Int_t ; z . ). Sets position of fictive light source in 3D space: . x, y, z . Definition at line 7176 of file TSpectrum2Painter.cxx. ◆ SetNodes(). void TSpectrum2Painter::SetNodes ; (; Int_t ; nodesx, . Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:54037,simpl,simple,54037,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"up Combobox popup window; TGCommandPlugin Command (I/O redirection) plugin for the new ROOT Browser; TGCompositeFrame Base class for composite widgets (menubars, etc.); TGContainer Canvas container; TGDMLParse imports GDML using DOM and binds it to ROOT; TGDMLRefl helper class used for the storage of reflected solids; TGDNDManager The main Drag and Drop Manager; TGDimension Dimension object (width, height); TGDockButton Dock button; TGDockHideButton Hide dock button; TGDockableFrame Dockable widget; TGDoubleHSlider Horizontal double slider widget; TGDoubleSlider Double slider widget abstract base class; TGDoubleVSlider Vertical double slider widget; TGDragWindow Window used for dragging; TGEventHandler Abstract event handler; TGFSComboBox Combo box widget for file system path; TGFileBrowser File browser.; TGFileContainer Container containing file system objects; TGFileDialog File selection dialog; TGFileInfo ; TGFileItem Class representing file system object; TGFont GUI font description; TGFontDialog Font selection dialog; TGFontDialog::FontProp_t ; TGFontPool Font pool; TGFontTypeComboBox Font type combobox widget; TGFrame Base class for simple widgets (button, etc.); TGFrameElement Base class used in GUI containers; TGFrameElementPack Class used in TGPack.; TGGC Graphics context; TGGCPool Graphics context pool; TGGotoDialog Goto line dialog used by TGTextEdit widget; TGGroupFrame A composite frame with border and title; TGHButtonGroup A button group with one horizontal row; TGHProgressBar Horizontal progress bar widget; TGHScrollBar Horizontal scrollbar widget; TGHSlider Horizontal slider widget; TGHSplitter A horizontal frame splitter; TGHeaderFrame Header frame with buttons and splitters; TGHorizontal3DLine A horizontal 3D separator line; TGHorizontalFrame Composite frame with horizontal child layout; TGHorizontalLayout Horizontal layout manager; TGHotString Graphics string with hot character; TGHtml HTML widget; TGHtmlBrowser very simple html browser; TGIcon Ic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:69347,simpl,simple,69347,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,4,['simpl'],['simple']
Usability,"up, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; both shadings.; Function:; TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width). Using this function one can change pen color, pen style and pen width.; Possible pen styles are:. kPenStyleSolid,; kPenStyleDash,; kPenStyleDot,; kPenStyleDashDot. Default values:. color = kBlack; style = kPenStyleSolid; width = 1. Simple modes group, display mode = linesX, 64 x 64 channels. Pen width = 3.; Function:; TSpectrum2Painter::SetNodes(Int_t nodesx,Int_t nodesy); Sometimes the displayed region is rather large. When displaying all channels; pictures become very dense and complicated. It is very difficult to understand; overall shape of the data. Therefore in the package we have implemented the; possibility to change the density of displayed channels. Only channels; coinciding with given nodes are displayed. In the next figure we introduce the; example of the above presented spectrum with number of nodes set to 64x64.; Default values:. nodesx = Xmax-Xmin+1; nodesy = Ymax-Ymin+1. Simple modes group, display mode = grid, 256 x 256 channels.; Number of nodes is 64x64.; Function:; void TSpectrum2Painter::SetAngles (Int_t alpha,Int_t beta, Int_t view); One can change the angles of the position of 3-d space and to rotate the; space. Alpha parameter defines the angle between bottom horizontal screen line; and the displayed space on the right",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:19480,Simpl,Simple,19480,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"up-to-date If not, make the relevant updates Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. ; Definition at line 1085 of file TDataSetManagerFile.cxx. ◆ ChecksumDataSet(). Int_t TDataSetManagerFile::ChecksumDataSet ; (; const char * ; path, . const char * ; md5path, . TString & ; checksum . ). protected . Calculate the checksum of the indicated dataset at 'path' and save it to the appropriate file 'md5path'. ; The MD5 string is returned in 'md5sum'. Return 0 on success, -1 on error. ; Definition at line 1512 of file TDataSetManagerFile.cxx. ◆ Class(). static TClass * TDataSetManagerFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDataSetManagerFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDataSetManagerFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 100 of file TDataSetManagerFile.h. ◆ ClearCache(). Int_t TDataSetManagerFile::ClearCache ; (; const char * ; uri = 0). overridevirtual . Clear cached information matching uri. ; Reimplemented from TDataSetManager.; Definition at line 1253 of file TDataSetManagerFile.cxx. ◆ CreateLsFile(). Int_t TDataSetManagerFile::CreateLsFile ; (; const char * ; group, . const char * ; user, . Long_t & ; mtime, . TString & ; checksum . ). protected . Create or recreate the dataset lists for 'uri'. ; The list are saved in text form in 'uri'/ls.txt for fast browsing and in 'uri'/ls.root in form of TMacro for optimized and portable transfer. Return 0 on success, 1 if the file was empty, -1 on error ; Definition at line 474 of file TDataSetManagerFile.cxx. ◆ DeclFileName(). static const char * TDataSetManagerFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file TDataSetManagerFile.h. ◆ ExistsDataSet() [1/2]. Bool_t TDataSetManagerFile::ExistsDataSet ; (; const char * ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:23355,Clear,ClearCache,23355,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['Clear'],['ClearCache']
Usability,"upHandle. std::unique_ptr<TObject> ROOT::RBrowserData::fCleanupHandle. private . ! cleanup handle for RecursiveRemove ; Definition at line 54 of file RBrowserData.hxx. ◆ fLastAllChilds. bool ROOT::RBrowserData::fLastAllChilds {false}. private . ! if all chlds were extracted ; Definition at line 50 of file RBrowserData.hxx. ◆ fLastElement. std::shared_ptr<Browsable::RElement> ROOT::RBrowserData::fLastElement. private . ! last element used in request ; Definition at line 48 of file RBrowserData.hxx. ◆ fLastItems. std::vector<std::unique_ptr<Browsable::RItem> > ROOT::RBrowserData::fLastItems. private . ! created browser items - used in requests ; Definition at line 49 of file RBrowserData.hxx. ◆ fLastPath. Browsable::RElementPath_t ROOT::RBrowserData::fLastPath. private . ! path to last used element ; Definition at line 47 of file RBrowserData.hxx. ◆ fLastSortedItems. std::vector<const Browsable::RItem *> ROOT::RBrowserData::fLastSortedItems. private . ! sorted child items, used in requests ; Definition at line 51 of file RBrowserData.hxx. ◆ fLastSortMethod. std::string ROOT::RBrowserData::fLastSortMethod. private . ! last sort method ; Definition at line 52 of file RBrowserData.hxx. ◆ fLastSortReverse. bool ROOT::RBrowserData::fLastSortReverse {false}. private . ! last request reverse order ; Definition at line 53 of file RBrowserData.hxx. ◆ fTopElement. std::shared_ptr<Browsable::RElement> ROOT::RBrowserData::fTopElement. private . ! top element ; Definition at line 41 of file RBrowserData.hxx. ◆ fWorkingPath. Browsable::RElementPath_t ROOT::RBrowserData::fWorkingPath. private . ! path showed in Breadcrumb ; Definition at line 43 of file RBrowserData.hxx. Libraries for ROOT::RBrowserData:. [legend]; The documentation for this class was generated from the following files:; gui/browserv7/inc/ROOT/RBrowserData.hxx; gui/browserv7/src/RBrowserData.cxx. ROOTRBrowserData. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:9333,Guid,Guide,9333,doc/v632/classROOT_1_1RBrowserData.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html,1,['Guid'],['Guide']
Usability,"uple.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success. varexp is an expression of the general form; - ""e1"" produces a 1-d histogram (TH1F) of expression ""e1""; - ""e1:e2"" produces an unbinned 2-d scatter-plot (TGraph) of ""e1""; on the y-axis versus ""e2"" on the x-axis; - ""e1:e2:e3"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3"" on the x-, y-, z-axis, respectively.; - ""e1:e2:e3:e4"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3"" and ""e4"" mapped on the color number.; (to create histograms in the 2, 3, and 4 dimensional case, see section ""Saving; the result of Draw to an histogram""). Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); = px:py:pz:2.5*E produces a 3-d scatter-plot of px vs py ps pz; and the color number of each marker will be 2.5*E.; If the color number is negative it is set to 0.; If the color number is greater than the current number of colors; it is set to the highest color number.; The default number of colors is 50.; see TStyle::SetPalette for setting a new color palette. Note that the variables e1, e2 or e3 may contain a selection.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. The expressions can use all the operations and build-in functions; supported by TFormula (See TFormula::Analyze), including free; standing function taking numerical arguments (TMath::Bessel).; In addition, you can call member functions taking numerical; arguments. For example:; - ""TMath::BreitWigner(fPx,3,2)""; - ""event.GetHistogram().GetXaxis().GetXmax()""; Note: You can only pass expression th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:67774,simpl,simplest,67774,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['simpl'],['simplest']
Usability,"uples on file', ""button"" ); bar.AddButton( 'hsum', r'TPython::Exec( ""' + to_run.format('hsum.py') + '"" );', 'Filling Histograms and Some Graphics Options' ); bar.AddButton( 'formula1', r'TPython::Exec( ""' + to_run.format('formula1.py') + '"" );', 'Simple Formula and Functions' ); bar.AddButton( 'surfaces', r'TPython::Exec( ""' + to_run.format('surfaces.py') + '"" );', 'Surface Drawing Options' ); bar.AddButton( 'fillrandom', r'TPython::Exec( ""' + to_run.format('fillrandom.py') + '"" );','Histograms with Random Numbers from a Function' ); bar.AddButton( 'fit1', r'TPython::Exec( ""' + to_run.format('fit1.py') + '"" );', 'A Simple Fitting Example' ); bar.AddButton( 'multifit', r'TPython::Exec( ""' + to_run.format('multifit.py') + '"" );', 'Fitting in Subranges of Histograms' ); bar.AddButton( 'h1draw', r'TPython::Exec( ""' + to_run.format('h1ReadAndDraw.py') + '"" );', 'Drawing Options for 1D Histograms' ); bar.AddButton( 'graph', r'TPython::Exec( ""' + to_run.format('graph.py') + '"" );', 'Example of a Simple Graph' ); bar.AddButton( 'gerrors', r'TPython::Exec( ""' + to_run.format('gerrors.py') + '"" );', 'Example of a Graph with Error Bars' ); bar.AddButton( 'tornado', r'TPython::Exec( ""' + to_run.format('tornado.py') + '"" );', 'Examples of 3-D PolyMarkers' ); bar.AddButton( 'shapes', r'TPython::Exec( ""' + to_run.format('shapes.py') + '"" );', 'The Geometry Shapes' ); bar.AddButton( 'geometry', r'TPython::Exec( ""' + to_run.format('geometry.py') + '"" );', 'Creation of the NA49 Geometry File' ); bar.AddButton( 'na49view', r'TPython::Exec( ""' + to_run.format('na49view.py') + '"" );', 'Two Views of the NA49 Detector Geometry' ); bar.AddButton( 'file', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/file.py') + '"" );', 'The ROOT File Format' ); bar.AddButton( 'fildir', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/fildir.py') + '"" );', 'The ROOT File, Directories and Keys' ); bar.AddButton( 'tree', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/tree.py') + '"" );', 'T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demo_8py.html:2617,Simpl,Simple,2617,doc/master/demo_8py.html,https://root.cern,https://root.cern/doc/master/demo_8py.html,1,['Simpl'],['Simple']
Usability,"upper bounds outside current parameter value. The value will be set to (low+up)/2 "");; 39 fValue = 0.5 * (up + low);; 40 }; 41 fLowerLimit = low;; 42 fUpperLimit = up;; 43 fHasLowerLimit = true;; 44 fHasUpperLimit = true;; 45}; 46 ; 47} // end namespace Fit; 48 ; 49} // end namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; ParameterSettings.h; ROOT::Fit::ParameterSettings::RemoveLimitsvoid RemoveLimits()remove all limitDefinition ParameterSettings.h:140; ROOT::Fit::ParameterSettings::fLowerLimitdouble fLowerLimitlower parameter limitDefinition ParameterSettings.h:152; ROOT::Fit::ParameterSettings::fUpperLimitdouble fUpperLimitupper parameter limitDefinition ParameterSettings.h:153; ROOT::Fit::ParameterSettings::fHasUpperLimitbool fHasUpperLimitflag to control upper parameter limitDefinition ParameterSettings.h:155; ROOT::Fit::ParameterSettings::fHasLowerLimitbool fHasLowerLimitflag to control lower parameter limitDefinition ParameterSettings.h:154; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::fValuedouble fValueparameter valueDefinition ParameterSettings.h:149; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcParameterSettings.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ParameterSettings_8cxx_source.html:3184,Guid,Guide,3184,doc/master/ParameterSettings_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ParameterSettings_8cxx_source.html,1,['Guid'],['Guide']
Usability,"upport directly (non-OpenGL); // Complete kRawSizes section; if (reqSections & TBuffer3D::kRawSizes) {; //buffer.SetSectionsValid(TBuffer3D::kRawSizes);; }; // Complete kRaw section; if (reqSections & TBuffer3D::kRaw) {; //buffer.SetSectionsValid(TBuffer3D::kRaw);; }; ; return buffer;; }; ; class Box : public Shape; {; public:; Box(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ);; ~Box() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fDX, fDY, fDZ; // Half lengths; ; ClassDefOverride(Box,0);; };; ; ClassImp(Box);; ; Box::Box(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ) :; Shape(color,x,y,z),; fDX(dX), fDY(dY), fDZ(dZ); {}; ; TBuffer3D & Box::GetBuffer3D(UInt_t reqSections); {; static TBuffer3D buffer(TBuffer3DTypes::kGeneric);; ; // Complete kCore section - this could be moved to Shape base class; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); ; // Complete local/master transformation matrix - simple x/y/z; // translation. Easiest way to set identity then override the; // translation components; buffer.SetLocalMasterIdentity();; buffer.fLocalMaster[12] = fX;; buffer.fLocalMaster[13] = fY;; buffer.fLocalMaster[14] = fZ;; buffer.fLocalFrame = kTRUE; // Local frame; ; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t origin[3] = { fX, fY, fZ };; Double_t halfLength[3] = { fDX, fDY, fDZ };; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // No kShapeSpecific section; ; // Complete kRawSizes section; if (reqSections & TBuffer3D::kRawSizes) {; buffer.SetRawSizes(8, 3*8, 12, 3*12, 6, 6*6);; buffer.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:4746,Clear,ClearSectionsValid,4746,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['Clear'],['ClearSectionsValid']
Usability,"ural networks ;  CMethodBaseVirtual base Class for all MVA method ;  CMethodBayesClassifierDescription of bayesian classifiers ;  CMethodBDTAnalysis of Boosted Decision Trees ;  CMethodBoostClass for boosting a TMVA method ;  CMethodC50;  CMethodCategoryClass for categorizing the phase space ;  CMethodCFMlpANNInterface to Clermond-Ferrand artificial neural network ;  ►CMethodCFMlpANN_UtilsImplementation of Clermond-Ferrand artificial neural network ;  CVARn2;  CMethodCompositeBaseVirtual base class for combining several TMVA method ;  CMethodCutsMultivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements ;  ►CMethodDNNDeep Neural Network Implementation ;  CTTrainingSettings;  CMethodDTAnalysis of Boosted Decision Trees ;  CMethodFDAFunction discriminant analysis (FDA) ;  CMethodFisherFisher and Mahalanobis Discriminants (Linear Discriminant Analysis) ;  CMethodHMatrixH-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables ;  CMethodInfo;  CMethodKNNAnalysis of k-nearest neighbor ;  CMethodLDLinear Discriminant ;  CMethodLikelihoodLikelihood analysis (""non-parametric approach"") ;  CMethodMLPMultilayer Perceptron class built off of MethodANNBase ;  CMethodPDEFoamThe PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density ;  CMethodPDERSThis is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA ;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:73418,simpl,simple,73418,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,2,['simpl'],['simple']
Usability,"uralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdoubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:73749,progress bar,progress barDefinition,73749,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['progress bar'],['progress barDefinition']
Usability,"urbool Contour(unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683)Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or...Definition TFitResult.cxx:119; TFitResult::GetCovarianceMatrixTMatrixDSym GetCovarianceMatrix() constReturn the covariance matrix from fit.Definition TFitResult.cxx:59; TFitResult::Printvoid Print(Option_t *option="""") const overridePrint result of the fit, by default chi2, parameter values and errors.Definition TFitResult.cxx:44; TFitResult::Scanbool Scan(unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0)Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return fill...Definition TFitResult.cxx:93; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::Setvirtual void Set(Int_t n)Set number of points in the graph Existing coordinates are preserved New coordinates above fNpoints a...Definition TGraph.cxx:2277; TMatrixTSym< Double_t >; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TStringBasic string class.Definition TString.h:139; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; grTGraphErrors * grDefinition legend1.C:25; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. histhistsrcTFitResult.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResult_8cxx_source.html:9867,Guid,Guide,9867,doc/master/TFitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFitResult_8cxx_source.html,1,['Guid'],['Guide']
Usability,"urce file and save it where you can find it: EventDataSelector.C (or wget http://root-mirror.github.io/training/intro/EventDataSelector.C).; This selector contains all the necessary steps to read the data from the tree branches, like the number of particles, the X position of each particle PosX[nparticles], and the absolute momentum of each particle Momentum[nparticles].; Now quit and restart ROOT (to make sure everybody starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. Adding a Data Member; Just like for the sum of event sizes, you need to add a data member to the class. As in Histogramming, we want to histogram the particles' fPosX; the type of the data member should thus be TH1F*. Don't forget to initialize the histogram pointer to 0 in the constructor, again just like for the event size sum.; Creating the Histogram; You then create the object with new TH1F(""hPosX"", ""Position in X"", 20, -5, 5);; check the documentation of TSelector to learn in which of your selector's functions to create the histogram object.; Associate error bars with this histogram (see TH1F::Sumw2()); Filling the Histogram; Like in the Histogramming chapter, fill the histogram with the value of fPosX from the tree for all particles with a momentum > 40.; Just like before, the per-event analysis happens in Process(). Here again, you need to get the tree entry before you can access the corresponding data members of your selector.; Fitting and Drawing the Histogram; Here again, once the histogram is filled, fit it with a pol2 using TH1::Fit(""pol2"").; See the documentation of TSelector on where to do the fitting, i.e. which function of your selector gets called after the whole tree has been processed. You should first fit and then draw, to see the fit together with the histogram.; At the end, you should get the same result than the figure 6 in Histogramming; If, for any reason, you don't manage to get it working, yo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:3119,learn,learn,3119,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,1,['learn'],['learn']
Usability,"urceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVertical(Bool_t x = kTRUE); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowPack.html:16967,Undo,UndockWindow,16967,root/html528/TEveWindowPack.html,https://root.cern,https://root.cern/root/html528/TEveWindowPack.html,6,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"ure) ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1339 of file TVirtualX.cxx. ◆ ChangeProperties(). void TVirtualX::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). virtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 2448 of file TVirtualX.cxx. ◆ ChangeProperty(). void TVirtualX::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). virtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1572 of file TVirtualX.cxx. ◆ ChangeWindowAttributes(). void TVirtualX::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). virtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1554 of file TVirtualX.cxx. ◆ CheckEvent(). Bool_t TVirtualX::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). virtual . Check if there is for window",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:53045,simpl,simply,53045,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['simpl'],['simply']
Usability,"ure. ; Definition at line 1085 of file TDataSetManagerFile.cxx. ◆ ChecksumDataSet(). Int_t TDataSetManagerFile::ChecksumDataSet ; (; const char * ; path, . const char * ; md5path, . TString & ; checksum . ). protected . Calculate the checksum of the indicated dataset at 'path' and save it to the appropriate file 'md5path'. ; The MD5 string is returned in 'md5sum'. Return 0 on success, -1 on error. ; Definition at line 1512 of file TDataSetManagerFile.cxx. ◆ Class(). static TClass * TDataSetManagerFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDataSetManagerFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDataSetManagerFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 100 of file TDataSetManagerFile.h. ◆ ClearCache(). Int_t TDataSetManagerFile::ClearCache ; (; const char * ; uri = 0). overridevirtual . Clear cached information matching uri. ; Reimplemented from TDataSetManager.; Definition at line 1253 of file TDataSetManagerFile.cxx. ◆ CreateLsFile(). Int_t TDataSetManagerFile::CreateLsFile ; (; const char * ; group, . const char * ; user, . Long_t & ; mtime, . TString & ; checksum . ). protected . Create or recreate the dataset lists for 'uri'. ; The list are saved in text form in 'uri'/ls.txt for fast browsing and in 'uri'/ls.root in form of TMacro for optimized and portable transfer. Return 0 on success, 1 if the file was empty, -1 on error ; Definition at line 474 of file TDataSetManagerFile.cxx. ◆ DeclFileName(). static const char * TDataSetManagerFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file TDataSetManagerFile.h. ◆ ExistsDataSet() [1/2]. Bool_t TDataSetManagerFile::ExistsDataSet ; (; const char * ; group, . const char * ; user, . const char * ; dsName . ). protected . Checks if the indicated dataset exits. ; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:23455,Clear,Clear,23455,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['Clear'],['Clear']
Usability,"urn the ; element or NULL if the table is unterminated. ; Definition at line 1118 of file TGHtmlTable.cxx. ◆ WidenLine(). void TGHtmlLayoutContext::WidenLine ; (; int ; reqWidth, . int * ; pX, . int * ; pY, . int * ; pW . ). protected . Move past obstacles until a linewidth of reqWidth is obtained, or until all obstacles are cleared. ; reqWidth - Requested line width pX, pY, pW - The margins. See ComputeMargins() ; Definition at line 1058 of file TGHtmlLayout.cxx. Member Data Documentation. ◆ fBottom. int TGHtmlLayoutContext::fBottom. Definition at line 800 of file TGHtml.h. ◆ fHeadRoom. int TGHtmlLayoutContext::fHeadRoom. Definition at line 798 of file TGHtml.h. ◆ fHtml. TGHtml* TGHtmlLayoutContext::fHtml. Definition at line 795 of file TGHtml.h. ◆ fLeft. int TGHtmlLayoutContext::fLeft. Definition at line 801 of file TGHtml.h. ◆ fLeftMargin. SHtmlMargin_t* TGHtmlLayoutContext::fLeftMargin. Definition at line 805 of file TGHtml.h. ◆ fMaxX. int TGHtmlLayoutContext::fMaxX. Definition at line 804 of file TGHtml.h. ◆ fMaxY. int TGHtmlLayoutContext::fMaxY. Definition at line 804 of file TGHtml.h. ◆ fPageWidth. int TGHtmlLayoutContext::fPageWidth. Definition at line 802 of file TGHtml.h. ◆ fPEnd. TGHtmlElement* TGHtmlLayoutContext::fPEnd. Definition at line 797 of file TGHtml.h. ◆ fPStart. TGHtmlElement* TGHtmlLayoutContext::fPStart. Definition at line 796 of file TGHtml.h. ◆ fRight. int TGHtmlLayoutContext::fRight. Definition at line 801 of file TGHtml.h. ◆ fRightMargin. SHtmlMargin_t* TGHtmlLayoutContext::fRightMargin. Definition at line 806 of file TGHtml.h. ◆ fTop. int TGHtmlLayoutContext::fTop. Definition at line 799 of file TGHtml.h. Libraries for TGHtmlLayoutContext:. [legend]; The documentation for this class was generated from the following files:; gui/guihtml/inc/TGHtml.h; gui/guihtml/src/TGHtmlLayout.cxx; gui/guihtml/src/TGHtmlTable.cxx. TGHtmlLayoutContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:22445,Guid,Guide,22445,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Guid'],['Guide']
Usability,"urns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of logical object, with the fLocalMaster transform and the fColor and fTransparency attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; it may for various reasons decide to ignore it:; It already has the object internally cached .; The object falls outside some 'interest' limits of the viewer camera.; The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions of objects, and only accept those that are of interest at a certain time, caching the relatively small number of CPU/memory costly logical shapes, and retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for tw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:9262,simpl,simply,9262,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,2,['simpl'],['simply']
Usability,"urns true if a row was added, false otherwise ; A new row k is added to the matrix L, its dimension is expanded. The new elements Lki are filled from the array rowData[] where the indices i which are taken from the array indices[]. ; Definition at line 1954 of file TUnfold.cxx. ◆ Class(). static TClass * TUnfold::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUnfold::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUnfold::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 357 of file TUnfold.h. ◆ ClearHistogram(). void TUnfold::ClearHistogram ; (; TH1 * ; h, . Double_t ; x = 0. . ); const. protected . Initialize bin contents and bin errors for a given histogram. ; Parameters. [out]hhistogram ; [in]xnew histogram content. all histgram errors are set to zero, all contents are set to x ; Definition at line 3680 of file TUnfold.cxx. ◆ ClearResults(). void TUnfold::ClearResults ; (; void ; ). protectedvirtual . reset all results ; Reimplemented in TUnfoldSys.; Definition at line 208 of file TUnfold.cxx. ◆ CreateSparseMatrix(). TMatrixDSparse * TUnfold::CreateSparseMatrix ; (; Int_t ; nrow, . Int_t ; ncol, . Int_t ; nel, . Int_t * ; row, . Int_t * ; col, . Double_t * ; data . ); const. protected . create a sparse matrix, given the nonzero elements ; Parameters. [in]nrownumber of rows ; [in]ncolnumber of columns ; [in]nelnumber of non-zero elements ; [in]rowrow indexes of non-zero elements ; [in]colcolumn indexes of non-zero elements ; [in]datanon-zero elements data. return pointer to a new sparse matrix; shortcut to new TMatrixDSparse() followed by SetMatrixArray() ; Definition at line 578 of file TUnfold.cxx. ◆ DeclFileName(). static const char * TUnfold::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 357 of file TUnfold.h. ◆ DeleteMatrix() [1/2]. void TUnf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:28585,Clear,ClearResults,28585,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['Clear'],['ClearResults']
Usability,"urnsVersion of this class ; Definition at line 277 of file TProofDraw.h. ◆ DeclFileName(). static const char * TProofDrawListOfGraphs::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 277 of file TProofDraw.h. ◆ DefVar(). void TProofDrawListOfGraphs::DefVar ; (; ). inlineoverrideprotectedvirtual . Implements TProofDraw.; Definition at line 270 of file TProofDraw.h. ◆ DoFill(). void TProofDrawListOfGraphs::DoFill ; (; Long64_t ; entry, . Double_t ; w, . const Double_t * ; v . ). overrideprotectedvirtual . Fills the scatter plot with the given values. ; Implements TProofDraw.; Definition at line 1947 of file TProofDraw.cxx. ◆ IsA(). TClass * TProofDrawListOfGraphs::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofDraw.; Definition at line 277 of file TProofDraw.h. ◆ SlaveBegin(). void TProofDrawListOfGraphs::SlaveBegin ; (; TTree * ; tree). overridevirtual . See TProofDraw::SlaveBegin(). ; Reimplemented from TProofDraw.; Definition at line 1915 of file TProofDraw.cxx. ◆ Streamer(). void TProofDrawListOfGraphs::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofDraw. ◆ StreamerNVirtual(). void TProofDrawListOfGraphs::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 277 of file TProofDraw.h. ◆ Terminate(). void TProofDrawListOfGraphs::Terminate ; (; void ; ). overridevirtual . See TProofDraw::Terminate(). ; Reimplemented from TProofDraw.; Definition at line 1956 of file TProofDraw.cxx. Member Data Documentation. ◆ fPoints. TProofVectorContainer<Point3D_t>* TProofDrawListOfGraphs::fPoints. protected . Definition at line 268 of file TProofDraw.h. proof/proofplayer/inc/TProofDraw.h; proof/proofplayer/src/TProofDraw.cxx. TProofDrawListOfGraphs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfGraphs.html:17076,Guid,Guide,17076,doc/master/classTProofDrawListOfGraphs.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfGraphs.html,1,['Guid'],['Guide']
Usability,"uron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitely, or via; a string containing the formula to be used to define them, exactly as; for a TCut.; The learning method is defined using the; TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :; TMultiLayerPerceptron::kStochastic, ; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS; A weight can be assigned to events, either in the constructor, either; with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight; is taken into account.; Finally, one starts the training with; TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The; first argument is the number of epochs while option is a string that; can contain: ""text"" (simple text output) , ""graph""; (evoluting graphical training curves), ""update=X"" (step for; the text/graph output update) or ""+"" (will skip the; randomisation and start from the previous values). All combinations; are available. . Example:; net.Train(100,""text, graph, update=10"").; When the neural net is trained, it can be used; directly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:7359,learn,learning,7359,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['learn'],['learning']
Usability,"urre...Definition TCanvas.cxx:1074; TCanvas::GetClickSelectedPadTVirtualPad * GetClickSelectedPad() constDefinition TCanvas.h:147; TCanvas::fYsizeRealSize_t fYsizeRealCurrent size of canvas along Y in CM.Definition TCanvas.h:36; TCanvas::Constructorvoid Constructor()Canvas default constructor.Definition TCanvas.cxx:191; TCanvas::SetClickSelectedPadvoid SetClickSelectedPad(TPad *pad)Definition TCanvas.h:211; TCanvas::ToggleAutoExecvirtual void ToggleAutoExec()Toggle pad auto execution of list of TExecs.Definition TCanvas.cxx:2422; TCanvas::TCanvasTCanvas(const TCanvas &canvas)=delete; TCanvas::fWindowTopXInt_t fWindowTopXTop X position of window (in pixels)Definition TCanvas.h:39; TCanvas::SetSelectedPadvoid SetSelectedPad(TPad *pad)Definition TCanvas.h:210; TCanvas::SetHighLightColorvoid SetHighLightColor(Color_t col)Definition TCanvas.h:207; TCanvas::ToggleToolTipsvirtual void ToggleToolTips()Toggle tooltip display.Definition TCanvas.cxx:2464; TCanvas::Clearvoid Clear(Option_t *option="""") overrideRemove all primitives from the canvas.Definition TCanvas.cxx:737; TCanvas::operator=TCanvas & operator=(const TCanvas &rhs)=delete; TCanvas::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in canvas.Definition TCanvas.cxx:1185; TCanvas::Iconifyvoid Iconify()Iconify canvas.Definition TCanvas.cxx:1479; TCanvas::GetWindowTopXInt_t GetWindowTopX()Returns current top x position of window on screen.Definition TCanvas.cxx:1210; TCanvas::ToggleEventStatusvirtual void ToggleEventStatus()Toggle event statusbar.Definition TCanvas.cxx:2431; TCanvas::Destructorvoid Destructor()Actual canvas destructor.Definition TCanvas.cxx:695; TCanvas::GetCanvasParvirtual void GetCanvasPar(Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh)Definition TCanvas.h:165; TCanvas::GetCanvasImpTCanvasImp * GetCanvasImp() const overrideDefinition TCanvas.h:158; TCanvas::IsRetainedBool_t IsRetained() const overrideDefinition TCanvas.h:176; TCanvas::fUpdatedBool_t fUp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:16704,Clear,Clearvoid,16704,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"urrent object ; Reimplemented from TEveCaloData.; Definition at line 291 of file TEveCaloData.h. ◆ operator=(). TEveCaloDataVec & TEveCaloDataVec::operator= ; (; const TEveCaloDataVec & ; ). private . ◆ Rebin(). void TEveCaloDataVec::Rebin ; (; TAxis * ; ax, . TAxis * ; ay, . vCellId_t & ; in, . Bool_t ; et, . RebinData_t & ; out . ); const. overridevirtual . Rebin cells. ; Implements TEveCaloData.; Definition at line 571 of file TEveCaloData.cxx. ◆ SetAxisFromBins(). void TEveCaloDataVec::SetAxisFromBins ; (; Double_t ; epsX = 0.001, . Double_t ; epsY = 0.001 . ). Set XY axis from cells geometry. ; Definition at line 648 of file TEveCaloData.cxx. ◆ Streamer(). void TEveCaloDataVec::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveCaloData. ◆ StreamerNVirtual(). void TEveCaloDataVec::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 291 of file TEveCaloData.h. Member Data Documentation. ◆ fEtaMax. Float_t TEveCaloDataVec::fEtaMax. protected . Definition at line 259 of file TEveCaloData.h. ◆ fEtaMin. Float_t TEveCaloDataVec::fEtaMin. protected . Definition at line 258 of file TEveCaloData.h. ◆ fGeomVec. vCellGeom_t TEveCaloDataVec::fGeomVec. protected . Definition at line 254 of file TEveCaloData.h. ◆ fPhiMax. Float_t TEveCaloDataVec::fPhiMax. protected . Definition at line 262 of file TEveCaloData.h. ◆ fPhiMin. Float_t TEveCaloDataVec::fPhiMin. protected . Definition at line 261 of file TEveCaloData.h. ◆ fSliceVec. vvFloat_t TEveCaloDataVec::fSliceVec. protected . Definition at line 253 of file TEveCaloData.h. ◆ fTower. Int_t TEveCaloDataVec::fTower. protected . Definition at line 256 of file TEveCaloData.h. Libraries for TEveCaloDataVec:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveCaloData.h; graf3d/eve/src/TEveCaloData.cxx. TEveCaloDataVec. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloDataVec.html:40579,Guid,Guide,40579,doc/master/classTEveCaloDataVec.html,https://root.cern,https://root.cern/doc/master/classTEveCaloDataVec.html,1,['Guid'],['Guide']
Usability,"ursiveFraction.h. ◆ evaluate(). double RooRecursiveFraction::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return value of \( a_n * \prod_{i=0}^{n-1} (1 - a_i) \). ; Implements RooAbsReal.; Definition at line 77 of file RooRecursiveFraction.cxx. ◆ IsA(). TClass * RooRecursiveFraction::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 42 of file RooRecursiveFraction.h. ◆ Streamer(). void RooRecursiveFraction::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRecursiveFraction::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file RooRecursiveFraction.h. ◆ translate(). void RooRecursiveFraction::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 91 of file RooRecursiveFraction.cxx. Member Data Documentation. ◆ _list. RooListProxy RooRecursiveFraction::_list. protected . Definition at line 38 of file RooRecursiveFraction.h. Libraries for RooRecursiveFraction:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRecursiveFraction.h; roofit/roofitcore/src/RooRecursiveFraction.cxx. RooRecursiveFraction. ROOT master ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRecursiveFraction.html:62578,simpl,simple,62578,doc/master/classRooRecursiveFraction.html,https://root.cern,https://root.cern/doc/master/classRooRecursiveFraction.html,1,['simpl'],['simple']
Usability,"ursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TDrawFeedback::HashULong_t Hash() const overrideReturn hash value for this object.Definition TDrawFeedback.h:51; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 51 of file TDrawFeedback.h. ◆ IsA(). TClass * TDrawFeedback::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 54 of file TDrawFeedback.h. ◆ SetOption(). void TDrawFeedback::SetOption ; (; Option_t * ; option). inline . Definition at line 52 of file TDrawFeedback.h. ◆ Streamer(). void TDrawFeedback::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDrawFeedback::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file TDrawFeedback.h. Member Data Documentation. ◆ fAll. Bool_t TDrawFeedback::fAll. private . Definition at line 38 of file TDrawFeedback.h. ◆ fName. TString TDrawFeedback::fName. private . Definition at line 37 of file TDrawFeedback.h. ◆ fNames. THashList* TDrawFeedback::fNames. private . Definition at line 39 of file TDrawFeedback.h. ◆ fOption. Option_t* TDrawFeedback::fOption. protected . Definition at line 42 of file TDrawFeedback.h. ◆ fProof. TProof* TDrawFeedback::fProof. protected . Definition at line 43 of file TDrawFeedback.h. proof/proofplayer/inc/TDrawFeedback.h; proof/proofplayer/src/TDrawFeedback.cxx. TDrawFeedback. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:19196,Guid,Guide,19196,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,1,['Guid'],['Guide']
Usability,"us Developers | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Previous Developers. The following people have been working on ROOT for some time in their career and ROOT would not be what it is without their c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:1009,Guid,Guides,1009,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['Guid'],['Guides']
Usability,"us& st); TProofProgressStatus&operator=(const TProofProgressStatus&); TProofProgressStatus&operator=(TProofProgressStatus&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBytesRead(Long64_t bytesRead); voidSetCPUTime(Double_t procTime); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Long64_t entries); voidSetLastEntries(Long64_t entries); voidSetLastProcTime(Double_t procTime); voidSetLastUpdate(Double_t updtTime = 0); voidSetLearnTime(Double_t learnTime); static voidTObject::SetObjectStat(Bool_t stat); voidSetProcTime(Double_t procTime); voidSetReadCalls(Long64_t readCalls); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressStatus(TProofProgressStatus&&); TProofProgressStatus(const TProofProgressStatus&); TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressStatus.html:4978,learn,learnTime,4978,root/html602/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html602/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"us(); in case of success. Bool_t JoinProcess(TList* workers); Not implemented: meaningful only in the remote player. Returns kFALSE. Bool_t CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); Check the memory usage, if requested.; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or; resident limits are depassed. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize query (may not be used in this class). Long64_t Finalize(TQueryResult* qr); Finalize query (may not be used in this class). void MergeOutput(); Merge output (may not be used in this class). void MapOutputListToDataMembers() const. void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); Update automatic binning parameters for given object ""name"". TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet (may not be used in this class). void SetupFeedback(); Set up feedback (may not be used in this class). void StopFeedback(); Stop feedback (may not be used in this class). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (may not be used in this class). void HandleGetTreeHeader(TMessage* mess); Handle tree header request. void HandleRecvHisto(TMessage* mess); Receive histo from slave. Int_t DrawCanvas(TObject* obj); Draw the object if it is a canvas.; Return 0 in case of success, 1 if it is not a canvas or libProofDraw; is not available. Int_t GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); Parse the arguments from var, sel and opt and fill the selector and; object name accordingly.; Return 0 in case of success, 1 if libProofDraw is not available. void FeedBackCanvas(const char* name, Bool_t create); Create/destroy a named canvas for feedback. Long64_t GetCacheSize(); Return the size in bytes of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayer.html:21583,feedback,feedback,21583,root/html602/TProofPlayer.html,https://root.cern,https://root.cern/root/html602/TProofPlayer.html,1,['feedback'],['feedback']
Usability,"us(0)+gaus(3)+gaus(6)"", 85, 125);; total->SetLineColor(2);; ; // Fit each function and add it to the list of functions. By default,; // TH1::Fit() fits the function on the defined histogram range. You can; // specify the ""R"" option in the second parameter of TH1::Fit() to restrict; // the fit to the range specified in the TF1 constructor. Alternatively, you; // can also specify the range in the call to TH1::Fit(), which we demonstrate; // here with the 3rd Gaussian. The ""+"" option needs to be added to the later; // fits to not replace existing fitted functions in the histogram.; h->Fit(g1, ""R"");; h->Fit(g2, ""R+"");; h->Fit(g3, ""+"", """", 110, 121);; ; // Get the parameters from the fit.; g1->GetParameters(&par[0]);; g2->GetParameters(&par[3]);; g3->GetParameters(&par[6]);; ; // Use the parameters on the sum.; total->SetParameters(par);; h->Fit(total, ""R+"");; }; h#define h(i)Definition RSha256.hxx:106; TF1.h; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; TH1.h; TF11-Dim function classDefinition TF1.h:233; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; xDouble_t x[n]Definition legend1.C:17; multifitDefinition multifit.py:1; AuthorRene Brun ; Definition in file multifit.C. tutorialsfitmultifit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multifit_8C.html:5089,Guid,Guide,5089,doc/master/multifit_8C.html,https://root.cern,https://root.cern/doc/master/multifit_8C.html,1,['Guid'],['Guide']
Usability,"us(6)"", 85, 125);; 53 total->SetLineColor(2);; 54 ; 55 // Fit each function and add it to the list of functions. By default,; 56 // TH1::Fit() fits the function on the defined histogram range. You can; 57 // specify the ""R"" option in the second parameter of TH1::Fit() to restrict; 58 // the fit to the range specified in the TF1 constructor. Alternatively, you; 59 // can also specify the range in the call to TH1::Fit(), which we demonstrate; 60 // here with the 3rd Gaussian. The ""+"" option needs to be added to the later; 61 // fits to not replace existing fitted functions in the histogram.; 62 h->Fit(g1, ""R"");; 63 h->Fit(g2, ""R+"");; 64 h->Fit(g3, ""+"", """", 110, 121);; 65 ; 66 // Get the parameters from the fit.; 67 g1->GetParameters(&par[0]);; 68 g2->GetParameters(&par[3]);; 69 g3->GetParameters(&par[6]);; 70 ; 71 // Use the parameters on the sum.; 72 total->SetParameters(par);; 73 h->Fit(total, ""R+"");; 74}; h#define h(i)Definition RSha256.hxx:106; TF1.h; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; TH1.h; TF11-Dim function classDefinition TF1.h:233; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; xDouble_t x[n]Definition legend1.C:17; multifitDefinition multifit.py:1. tutorialsfitmultifit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multifit_8C_source.html:4317,Guid,Guide,4317,doc/master/multifit_8C_source.html,https://root.cern,https://root.cern/doc/master/multifit_8C_source.html,1,['Guid'],['Guide']
Usability,"us)TObject::kSingleKey; static TCondor::EStatekSuspended; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 15:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TCondor.html:7424,Resume,Resume,7424,root/html604/TCondor.html,https://root.cern,https://root.cern/root/html604/TCondor.html,2,['Resume'],['Resume']
Usability,"us)TObject::kSingleKey; static TCondor::EStatekSuspended; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-30 14:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCondor.html:7424,Resume,Resume,7424,root/html602/TCondor.html,https://root.cern,https://root.cern/root/html602/TCondor.html,2,['Resume'],['Resume']
Usability,"us; 940 gPad->GetViewer3D(option);; 941 TView *view = gPad->GetView();; 942 if (!view) {; 943 view = TView::CreateView(11, nullptr, nullptr);; 944 // Set the view to perform a first autorange (frame) draw.; 945 // TViewer3DPad will revert view to normal painting after this; 946 view->SetAutoRange(kTRUE);; 947 PaintOverlap(ovlp, ""range"");; 948 overlap->GetPolyMarker()->Draw(""SAME"");; 949 if (has_pad); 950 gPad->Update();; 951 }; 952 ; 953 // If we are drawing into the pad, then the view needs to be; 954 // set to perspective; 955 // if (!view->IsPerspective()) view->SetPerspective();; 956 fVisLock = kTRUE;; 957}; 958 ; 959////////////////////////////////////////////////////////////////////////////////; 960/// Draw only one volume.; 961 ; 962void TGeoPainter::DrawOnly(Option_t *option); 963{; 964 TString opt = option;; 965 opt.ToLower();; 966 if (fVisLock) {; 967 ClearVisibleVolumes();; 968 fVisLock = kFALSE;; 969 }; 970 fPaintingOverlaps = kFALSE;; 971 fIsPaintingShape = kFALSE;; 972 Bool_t has_pad = (gPad == nullptr) ? kFALSE : kTRUE;; 973 // Clear pad if option ""same"" not given; 974 if (!gPad) {; 975 gROOT->MakeDefCanvas();; 976 }; 977 if (!opt.Contains(""same"")); 978 gPad->Clear();; 979 // append this volume to pad; 980 fTopVolume = fGeoManager->GetCurrentVolume();; 981 fTopVolume->AppendPad(option);; 982 ; 983 // Create a 3-D view; 984 TView *view = gPad->GetView();; 985 if (!view) {; 986 view = TView::CreateView(11, nullptr, nullptr);; 987 // Set the view to perform a first autorange (frame) draw.; 988 // TViewer3DPad will revert view to normal painting after this; 989 view->SetAutoRange(kTRUE);; 990 fVisOption = kGeoVisOnly;; 991 if (has_pad); 992 gPad->Update();; 993 }; 994 ; 995 // If we are drawing into the pad, then the view needs to be; 996 // set to perspective; 997 // if (!view->IsPerspective()) view->SetPerspective();; 998 fVisLock = kTRUE;; 999}; 1000 ; 1001////////////////////////////////////////////////////////////////////////////////; 1002/// Draw cur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:30851,Clear,ClearVisibleVolumes,30851,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,"us; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:21181,progress bar,progress bar,21181,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,2,['progress bar'],['progress bar']
Usability,"us; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionQueryFrame.html:21456,progress bar,progress bar,21456,root/html532/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html532/TSessionQueryFrame.html,1,['progress bar'],['progress bar']
Usability,"use the function range when creating the fit data (default is false); 52 bool fErrors1; ///< use all errors equal to 1, i.e. fit without errors (default is false); 53 bool fExpErrors; ///< use expected errors from the function and not from the data; 54 bool fCoordErrors; ///< use errors on the x coordinates when available (default is true); 55 bool fAsymErrors; ///< use asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); 56 ; 57 ; 58};; 59 ; 60 } // end namespace Fit; 61 ; 62} // end namespace ROOT; 63 ; 64 ; 65#endif /* ROOT_Fit_DataOptions */; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataOptions_8h_source.html:2642,simpl,simple,2642,doc/master/DataOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/DataOptions_8h_source.html,1,['simpl'],['simple']
Usability,"use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ; file  xtruSamples.C;  Draw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__geom.html:3298,Guid,Guide,3298,doc/master/group__tutorial__geom.html,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html,1,['Guid'],['Guide']
Usability,"useX and fMouseY when user move a mouse over viewer and hides ToolTip. ;  ; void LevelDistValueSetSlot (Long_t dist);  Emmited when user changes distance between levels. ;  ; void MouseOverSlot (TGLPhysicalShape *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleByChangedSlot ();  Activated when user press radio button. ;  ; void SetLinksVisibility (Bool_t val);  Sets links visibility to ""visible"". ;  ; void SetNodePtr (TStructNode *val);  Sets top node pointer and updates view. ;  ; void SetPointerButtonSlot ();  Sets pointer given in fPointerTestEntry to the main pointer. ;  ; void ShowLinksToggled (Bool_t on);  Changes links visibility and refresh view. ;  ; void UndoButtonSlot ();  UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ;  ; void Update (Bool_t resetCamera=false);  Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ;  ; void UpdateButtonSlot ();  Update button slot. Updates scene. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:2579,Clear,Clear,2579,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Clear'],['Clear']
Usability,"user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2822 of file OptionParser.h. ROOToption. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1option.html:14093,Guid,Guide,14093,doc/v632/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html,1,['Guid'],['Guide']
Usability,"ush origin vX-YY-ZZ. Tag ROOTTEST repository. Artifacts. Produce binary tarfiles. start the procedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenkins procedure called root-releasenotes; Update the releases xml with the Jenkins procedure called root-release-makeReleasesXml; Once authenticated, import the releases xml in the site clicking import here (Be reminded: this works for authenticated users only!).; Eventually edit the 'highlights' section, which is currently commented, in the generated release page.; If this applies, mark the release as Pro or Old and remove the attribute to the one previously holding it. There are radio buttons exposed by Drupal when editing a release's page.; If not a patch release edit reference-guide page to add the new reference guide for the release. Announcements. send mail to the following mailing lists: root-planning@cern.ch, root-dev@cern.ch, roottalk@cern.ch, root-godparents@cern.ch, root-ambassadors@cern.ch; write announcement in RootTalk forum news. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxyge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:4303,guid,guide,4303,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,2,['guid'],['guide']
Usability,"ush_back(region);; 5522 }; 5523 ; 5524 } else {; 5525 ; 5526 // loop over pixels; 5527 ; 5528 Double_t beta = (TMath::Log10(xMax) - TMath::Log10(xMin))/(nPixels-1.0);; 5529 ; 5530 for (Int_t pixelIndex=0; pixelIndex<(nPixels-1); pixelIndex++) {; 5531 // linear plot; 5532 Int_t binLow = pAxis->FindBin(xMin*TMath::Power(10.0, beta*pixelIndex));; 5533 Int_t binHigh = pAxis->FindBin(xMin*TMath::Power(10.0, beta*(pixelIndex+1)));; 5534 THistRenderingRegion region = { std::make_pair(pixelIndex, pixelIndex+1),; 5535 std::make_pair(binLow, binHigh)};; 5536 regions.push_back(region);; 5537 }; 5538 }; 5539 } else {; 5540 // standard linear plot; 5541 ; 5542 if (strategy == Bins) {; 5543 // loop over bins; 5544 for (Int_t bin=pAxis->GetFirst(); bin<=pAxis->GetLast(); bin++) {; 5545 ; 5546 // linear plot. we simply need to find the appropriate bin; 5547 // for the; 5548 Int_t xPx0 = ((bin - pAxis->GetFirst()) * nPixels)/nBins;; 5549 Int_t xPx1 = xPx0 + nPixels/nBins;; 5550 ; 5551 // make sure we don't compute beyond our bounds; 5552 if (xPx1>= nPixels) xPx1 = nPixels-1;; 5553 ; 5554 THistRenderingRegion region = {std::make_pair(xPx0, xPx1),; 5555 std::make_pair(bin, bin+1)};; 5556 regions.push_back(region);; 5557 }; 5558 } else {; 5559 // loop over pixels; 5560 for (Int_t pixelIndex=0; pixelIndex<nPixels-1; pixelIndex++) {; 5561 // linear plot; 5562 Int_t binLow = (nBins*pixelIndex)/nPixels + pAxis->GetFirst();; 5563 Int_t binHigh = binLow + nBins/nPixels;; 5564 THistRenderingRegion region = { std::make_pair(pixelIndex, pixelIndex+1),; 5565 std::make_pair(binLow, binHigh)};; 5566 regions.push_back(region);; 5567 }; 5568 }; 5569 }; 5570 ; 5571 return regions;; 5572}; 5573 ; 5574////////////////////////////////////////////////////////////////////////////////; 5575/// [Rendering scheme for the COL2 and COLZ2 options] (\ref HP14); 5576 ; 5577void THistPainter::PaintColorLevelsFast(Option_t*); 5578{; 5579 ; 5580 if (Hoption.System != kCARTESIAN) {; 5581 Error(""THistPainter::PaintCol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:207387,simpl,simply,207387,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['simpl'],['simply']
Usability,"using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:338; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:22888,simpl,simple,22888,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:441; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:23277,simpl,simple,23277,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"using ROOT::Experimental::RFieldBase::RSchemaIterator = RSchemaIteratorTemplate<false>. Definition at line 443 of file RFieldBase.hxx. Member Enumeration Documentation. ◆ EState. enum class ROOT::Experimental::RFieldBase::EState. strong . During its lifetime, a field undergoes the following possible state transitions: ; [*] --> Unconnected --> ConnectedToSink -— | | | | --> ConnectedToSource —> [*] . | |. EnumeratorkUnconnected ; kConnectedToSink ; kConnectedToSource . Definition at line 134 of file RFieldBase.hxx. Constructor & Destructor Documentation. ◆ RFieldBase() [1/3]. ROOT::Experimental::RFieldBase::RFieldBase ; (; std::string_view ; name, . std::string_view ; type, . ENTupleStructure ; structure, . bool ; isSimple, . std::size_t ; nRepetitions = 0 . ). The constructor creates the underlying column objects and connects them to either a sink or a source. ; If isSimple is true, the trait kTraitMappable is automatically set on construction. However, the field might be demoted to non-simple if a post-read callback is set. ; Definition at line 557 of file RField.cxx. ◆ RFieldBase() [2/3]. ROOT::Experimental::RFieldBase::RFieldBase ; (; const RFieldBase & ; ). delete . ◆ RFieldBase() [3/3]. ROOT::Experimental::RFieldBase::RFieldBase ; (; RFieldBase && ; ). default . ◆ ~RFieldBase(). virtual ROOT::Experimental::RFieldBase::~RFieldBase ; (; ). virtualdefault . Member Function Documentation. ◆ AcceptVisitor(). void ROOT::Experimental::RFieldBase::AcceptVisitor ; (; Detail::RFieldVisitor & ; visitor); const. virtual . Reimplemented in ROOT::Experimental::RFieldZero, ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RCardinalityField, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RField< bool >, ROOT::Experimental::RField< char >, ROOT::Experimental::RField< float >, ROOT::Experimental::RField< double >, ROOT::Experimental::RProxiedCollectionField, ROOT::Experimental::RRecordField, ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:17606,simpl,simple,17606,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['simpl'],['simple']
Usability,"usted MC template (Aji) for template (parm). ; Note that the (Aji) times fractions only sum to the total prediction of the fit if all weights are 1. Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if the class is deleted ; Definition at line 961 of file TFractionFitter.cxx. ◆ GetNDF(). Int_t TFractionFitter::GetNDF ; (; ); const. return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ; The number of degrees of freedom corresponds to the number of points used in the fit minus the number of templates. ; Definition at line 894 of file TFractionFitter.cxx. ◆ GetPlot(). TH1 * TFractionFitter::GetPlot ; (; ). Return the ""template prediction"" corresponding to the fit result (this is not the same as the weighted sum of template distributions, as template statistical uncertainties are taken into account). ; Note that the name of this histogram will simply be the same as that of the ""data"" histogram, prefixed with the string ""Fraction fit to hist: "". Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if the class is deleted ; Definition at line 621 of file TFractionFitter.cxx. ◆ GetProb(). Double_t TFractionFitter::GetProb ; (; ); const. return the fit probability ; Definition at line 903 of file TFractionFitter.cxx. ◆ GetRanges(). void TFractionFitter::GetRanges ; (; Int_t & ; minX, . Int_t & ; maxX, . Int_t & ; minY, . Int_t & ; maxY, . Int_t & ; minZ, . Int_t & ; maxZ . ); const. private . Used internally to obtain the bin ranges according to the dimensionality of the histogram and the limits set by hand. ; Definition at line 639 of file TFractionFitter.cxx. ◆ GetResult(). void TFractionFitter::GetResult ; (; Int_t ; parm, . Double_t & ; value, . Double_t & ; error . ); const. Obtain the fit result for parameter <parm> (the parameter numbering follows that of the input template vector). ; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:28105,simpl,simply,28105,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['simpl'],['simply']
Usability,"ustomizing HTML; THtml allows a vast amount of customizations, from a custom style to custom links, to customized java scripts. By default, the style sheet is taken from $ROOTSYS/etc/html/ROOT.css when the documentation is generated. The path for ROOT.css can be changed by calling THtml::SetEtcDir(); it should contain the same CSS classes and entity IDs as the original ROOT.css. This style sheet is an easy means of customizing the layout and appearance of the documentation pages. Many of THtml setting can be customized by calls to THtml member functions or by settings in .rootrc, as documented in the THtml class reference page http://root.cern.ch/root/html/THtml. The following will enumerate some of the highlights.; 27.4.1 Referencing Documentation for other Libraries; When THtml generates documentation for classes it recognizes all class names known to ROOT. If THtml does not have sources for a class it determines the class’s library name. This has to be set by means of rootmap files, see Library AutoLoading of this User’s Guide. Given the library name, THtml searches for an entry in its map of libraries to documentation URLs. If it finds it, it will create a link to the documentation at that URL for all occurrences of a given class name. One can set the URL ../mylib/ for a library name MyLib by setting Root.Html.MyLib: ../mylib/ or by calling THtml::SetLibURL(""MyLib"", ""../mylib/""). Occurrences of class MyClass of MyLib will now be referenced as ../mylib/MyClass.html.; 27.4.2 Search Engine; THtml can invoke external search engines. The ROOT reference guide sets Root.Html.Search to http://www.google.com/search?q=%s+site%3A%u. Calling THtml::SetSearchStemURL() will set the same. If this URL stem is set, THtml will create search fields in the index pages. It will send the words entered in these search fields as %s in the URL; %u will be replaced by the current document’s path, allowing a site- and directory-specific search.; 27.4.3 ViewCVS; Most code is managed in a v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1249268,Guid,Guide,1249268,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"ut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 793 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:69598,simpl,simple,69598,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,2,['simpl'],['simple']
Usability,"ut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 819 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:70007,simpl,simple,70007,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,2,['simpl'],['simple']
Usability,"ut 'physics' pdf resmodel : input 'resolution' pdf; output is pdf(x) (X) resmodel(x) = Int [ pdf(x') resmodel (x-x') ] dx' ; Definition at line 106 of file RooNumConvolution.cxx. ◆ RooNumConvolution() [3/3]. RooNumConvolution::RooNumConvolution ; (; const RooNumConvolution & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 143 of file RooNumConvolution.cxx. ◆ ~RooNumConvolution(). RooNumConvolution::~RooNumConvolution ; (; ). override . Destructor. ; Definition at line 214 of file RooNumConvolution.cxx. Member Function Documentation. ◆ Class(). static TClass * RooNumConvolution::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumConvolution::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumConvolution::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 97 of file RooNumConvolution.h. ◆ clearConvolutionWindow(). void RooNumConvolution::clearConvolutionWindow ; (; ). Removes previously defined convolution window, reverting to convolution from -inf to +inf. ; Definition at line 274 of file RooNumConvolution.cxx. ◆ clone(). TObject * RooNumConvolution::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 39 of file RooNumConvolution.h. ◆ cloneModel(). RooAbsReal & RooNumConvolution::cloneModel ; (; ); const. inlineprotected . Definition at line 87 of file RooNumConvolution.h. ◆ clonePdf(). RooAbsReal & RooNumConvolution::clonePdf ; (; ); const. inlineprotected . Definition at line 86 of file RooNumConvolution.h. ◆ cloneVar(). RooRealVar & RooNumConvolution::cloneVar ; (; ); const. inlineprotected . Definition at line 85 of file RooNumConvolution.h. ◆ convIntConfig() [1/2]. RooNumIntConfig & RooNumConvolution::convIntConfig ; (; ). inline . Definition at line 44 of file RooNumConvolution.h. ◆ convIntConfig() [2/2]. const RooNum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:66039,clear,clearConvolutionWindow,66039,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['clear'],['clearConvolutionWindow']
Usability,"ut (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects that might be needed during the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:7461,Clear,ClearInputData,7461,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['Clear'],['ClearInputData']
Usability,"ut << std::endl;; sgn.Fill();; bkg.Fill();; ; if (n == 1) {; auto c1 = new TCanvas();; c1->Divide(ntime, 2);; for (int j = 0; j < ntime; ++j) {; c1->cd(j + 1);; v1[j]->Draw();; }; for (int j = 0; j < ntime; ++j) {; c1->cd(ntime + j + 1);; v2[j]->Draw();; }; gPad->Update();; }; }; if (n > 1) {; sgn.Write();; bkg.Write();; sgn.Print();; bkg.Print();; f.Close();; }; }; /// macro for performing a classification using a Recurrent Neural Network; /// @param nevts = 2000 Number of events used. (increase for better classification results); /// @param use_type; /// use_type = 0 use Simple RNN network; /// use_type = 1 use LSTM network; /// use_type = 2 use GRU; /// use_type = 3 build 3 different networks with RNN, LSTM and GRU; ; void TMVA_RNN_Classification(int nevts = 2000, int use_type = 1); {; ; const int ninput = 30;; const int ntime = 10;; const int batchSize = 100;; const int maxepochs = 20;; ; int nTotEvts = nevts; // total events to be generated for signal or background; ; bool useKeras = true;; ; ; bool useTMVA_RNN = true;; bool useTMVA_DNN = true;; bool useTMVA_BDT = false;; ; std::vector<std::string> rnn_types = {""RNN"", ""LSTM"", ""GRU""};; std::vector<bool> use_rnn_type = {1, 1, 1};; if (use_type >=0 && use_type < 3) {; use_rnn_type = {0,0,0};; use_rnn_type[use_type] = 1;; }; bool useGPU = true; // use GPU for TMVA if available; ; #ifndef R__HAS_TMVAGPU; useGPU = false;; #ifndef R__HAS_TMVACPU; Warning(""TMVA_RNN_Classification"", ""TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for RNN"");; useTMVA_RNN = false;; #endif; #endif; ; ; TString archString = (useGPU) ? ""GPU"" : ""CPU"";; ; bool writeOutputFile = true;; ; ; ; const char *rnn_type = ""RNN"";; ; #ifdef R__HAS_PYMVA; TMVA::PyMethodBase::PyInitialize();; #else; useKeras = false;; #endif; ; #ifdef R__USE_IMT; int num_threads = 4; // use max 4 threads; // switch off MT in OpenBLAS to avoid conflict with tbb; gSystem->Setenv(""OMP_NUM_THREADS"", ""1"");; ; // do enable MT running; if (n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:59934,Simpl,Simple,59934,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Simpl'],['Simple']
Usability,"ut global) minimization by monte carlo search. ; Each time a new minimum is found, the search area is shifted to be centered at the best value. Random points are chosen uniformly over a hypercube determined by current step sizes. The Metropolis algorithm accepts a worse point with probability exp(-d/UP), where d is the degradation. Improved points are of course always accepted. Actual steps are random multiples of the nominal steps (DIRIN). ; Definition at line 6818 of file TMinuit.cxx. ◆ mnset(). void TMinuit::mnset ; (; ). virtual . Interprets the commands that start with SET and SHOW. ; Called from MNEXCM file characteristics for SET INPUT 'SET ' or 'SHOW', 'ON ' or 'OFF', 'SUPPRESSED' or 'REPORTED ' explanation of print level numbers -1:3 and strategies 0:2 identification of debug options things that can be set or shown options not intended for normal users ; Definition at line 6913 of file TMinuit.cxx. ◆ mnsimp(). void TMinuit::mnsimp ; (; ). virtual . Minimization using the simplex method of Nelder and Mead. ; Performs a minimization using the simplex method of Nelder and Mead (ref. – Comp. J. 7,308 (1965)). ; Definition at line 7431 of file TMinuit.cxx. ◆ mnstat(). void TMinuit::mnstat ; (; Double_t & ; fmin, . Double_t & ; fedm, . Double_t & ; errdef, . Int_t & ; npari, . Int_t & ; nparx, . Int_t & ; istat . ). virtual . Returns concerning the current status of the minimization. ; User-called Namely, it returns:; FMIN: the best function value found so far; FEDM: the estimated vertical distance remaining to minimum; ERRDEF: the value of UP defining parameter uncertainties; NPARI: the number of currently variable parameters; NPARX: the highest (external) parameter number defined by user; ISTAT: a status integer indicating how good is the covariance matrix:; 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix . Definition at line 7638 of file TMinuit.cxx. ◆ mntiny(). voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:64413,simpl,simplex,64413,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['simpl'],['simplex']
Usability,"ut specification option; vector<TNeuron*>fOutputNeuronscache this for fast access; static const Bool_tfgDEBUGdebug flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DeclareOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function; used at the neuronn. void ProcessOptions(); do nothing specific at this moment. std::vector<Int_t>* ParseLayoutString(TString layerSpec); parse layout specification string and return a vector, each entry; containing the number of neurons to go in each successive layer. void InitANNBase(); initialize ANNBase object. ~MethodANNBase(); destructor. void DeleteNetwork(); delete/clear network. void DeleteNetworkLayer(TObjArray*& layer); delete a network layer. void BuildNetwork(vector<Int_t>* layout, vector<Double_t>* weights = NULL, Bool_t fromFile = kFALSE); build network given a layout (number of neurons in each layer); and optional weights array. void BuildLayers(vector<Int_t>* layout, Bool_t from_file = false); build the network layers. void BuildLayer(Int_t numNeurons, TObjArray* curLayer, TObjArray* prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file = false); build a single layer with neurons and synapses connecting this; layer to the previous layer. void AddPreLinks(TMVA::TNeuron* neuron, TObjArray* prevLayer); add synapses connecting a neuron to its preceding layer. void InitWeights(); initialize the synapse weights randomly. void ForceWeights(vector<Double_t>* weights); force the synapse weights. void ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); force the input values of the input neurons; force the value for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodANNBase.html:19450,clear,clear,19450,root/html534/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodANNBase.html,1,['clear'],['clear']
Usability,"ut to the region. ;  ; void AddCut (const TGeoRegionCut &regioncut);  Add an identical cut to the region. ;  ; bool AddVolume (const char *name);  Add an existing volume to the region. ;  ; void AddVolume (TGeoVolume *vol);  ; TGeoRegionCut * GetCut (int i) const;  ; int GetNcuts () const;  ; int GetNvolumes () const;  ; TGeoVolume * GetVolume (int i) const;  ; TClass * IsA () const override;  ; TGeoRegion & operator= (const TGeoRegion &other);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print region info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegion.html:1932,Clear,Clear,1932,doc/master/classTGeoRegion.html,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html,1,['Clear'],['Clear']
Usability,"ut, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetDimensions(). void TGeoParaboloid::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetParaboloidDimensions(). void TGeoParaboloid::SetParaboloidDimensions ; (; Double_t ; rlo, . Double_t ; rhi, . Double_t ; dz . ). ◆ SetPoints() [1/2]. void TGeoParaboloid::SetPoints ; (; Double_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoParaboloid::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetSegsAndPols(). void TGeoParaboloid::SetSegsAndPols ; (; TBuffer3D & ; buff); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Sizeof3D(). void TGeoParaboloid::Sizeof3D ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Streamer(). void TGeoParaboloid::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoParaboloid::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGeoParaboloid.h. Member Data Documentation. ◆ fA. Double_t TGeoParaboloid::fA. private . Definition at line 22 of file TGeoParaboloid.h. ◆ fB. Double_t TGeoParaboloid::fB. private . Definition at line 23 of file TGeoParaboloid.h. ◆ fDz. Double_t TGeoParaboloid::fDz. private . Definition at line 21 of file TGeoParaboloid.h. ◆ fRhi. Double_t TGeoParaboloid::fRhi. private . Definition at line 20 of file TGeoParaboloid.h. ◆ fRlo. Double_t TGeoParaboloid::fRlo. private . Definition at line 19 of file TGeoParaboloid.h. Libraries for TGeoParaboloid:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoParaboloid.h. TGeoParaboloid. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParaboloid.html:30672,Guid,Guide,30672,doc/master/classTGeoParaboloid.html,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html,1,['Guid'],['Guide']
Usability,"ut, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:16425,Clear,ClearCache,16425,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,12,['Clear'],"['Clear', 'ClearCache']"
Usability,"utDefinition TTimer.h:56; TTimer::IsSyncBool_t IsSync() constDefinition TTimer.h:80; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; TUrl::GetUserconst char * GetUser() constDefinition TUrl.h:65; TUrl::GetHostconst char * GetHost() constDefinition TUrl.h:67; TUrl::GetProtocolconst char * GetProtocol() constDefinition TUrl.h:64; TVersionCheck::TVersionCheckTVersionCheck(int versionCode)Register version of plugin library.Definition TSystem.cxx:4396; TVirtualMutexThis class implements a mutex interface.Definition TVirtualMutex.h:32; bool; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; I#define I(x, y, z); ROOT::FoundationUtils::GetCurrentDirstd::string GetCurrentDir()Definition FoundationUtils.cxx:47; ROOT::FoundationUtils::MakePathRelativestd::string MakePathRelative(const std::string &path, const std::string &base, bool isBuildingROOT=false)Definition FoundationUtils.cxx:82; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; v@ vDefinition rootcling_impl.cxx:3699; CpuInfo_tDefinition TSystem.h:163; FileStat_tDefinition TSystem.h:122; FileStat_t::fModeInt_t fModeDefinition TSystem.h:125; FileStat_t::fSizeLong64_t fSizeDefinition TSystem.h:128; FileStat_t::fDevLong_t fDevDefinition TSystem.h:123; FileStat_t::fMtimeLong_t fMtimeDefinition TSystem.h:129; FileStat_t::fInoLong_t fInoDefinition TSystem.h:124; MemInfo_tDefinition TSystem.h:177; ProcInfo_tDefinition TSystem.h:196; ProcInfo_t::~ProcInfo_tvirtual ~ProcInfo_t()Definition TSystem.cxx:75; RedirectHandle_tDefinition TSystem.h:207; SysInfo_tDefinition TSystem.h:148; UserGroup_tDefinition TSystem.h:136; UserGroup_t::fUserTString fUserDefinition TSystem.h:139; lTLine lDefinition textangle.C:4; ttauto * ttDefinition textangle.C:16. corebasesrcTSystem.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:197929,Guid,Guide,197929,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ute Hessian ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 84 of file BasicFCN.h. ◆ ModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . virtual const IModelFunction & ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunction ; (; ); const. inlinevirtual . access to const reference to the model function ; Definition at line 78 of file BasicFCN.h. ◆ ModelFunctionPtr(). template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr< IModelFunction > ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunctionPtr ; (; ); const. inline . access to function pointer ; Definition at line 81 of file BasicFCN.h. ◆ SetData(). template<class DerivFunType , class ModelFunType , class DataType > . void ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::SetData ; (; const std::shared_ptr< DataType > & ; data). inlineprotected . Set the data pointer. ; Definition at line 98 of file BasicFCN.h. ◆ SetModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . void ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Set the function pointer. ; Definition at line 101 of file BasicFCN.h. Member Data Documentation. ◆ fData. template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr<DataType> ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::fData. protected . Definition at line 104 of file BasicFCN.h. ◆ fFunc. template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr<IModelFunction> ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::fFunc. protected . Definition at line 105 of file BasicFCN.h. math/mathcore/inc/Fit/BasicFCN.h. ROOTFitBasicFCN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:8796,Guid,Guide,8796,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html,1,['Guid'],['Guide']
Usability,"utes |; Private Member Functions |; Private Attributes |; List of all members ; TH1Editor Class ReferenceGUI » ROOT Graphics Editor. ; Editor for changing TH1 histogram attributes, rebinning & fitting. ; For all possible draw options (there are a few which are not implementable in graphical user interface) see THistPainter::Paint; These changes can be made via the TH1Editor: Style Tab: 'Line' : change Line attributes (color, thickness) see TAttLineEditor 'Fill' : change Fill attributes (color, pattern) see TAttFillEditor 'Title' : TextEntry: set the title of the histogram 'Histogram': change the draw options of the histogram 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram according to the Plot dimension there will be different drawing possibilities (ComboBoxes/ CheckBoxes) 2d Plot: 'Error' : ComboBox: add different error bars to the histogram (no errors, simple, ..., see THistPainter::Paint 'Add' : ComboBox: further things which can be added to the histogram (None, simple/smooth line, fill area 'Simple Drawing': CheckBox: draw a simple histogram without errors (= ""HIST"" drawoption). In combination with some other draw options an outer line is drawn on top of the histogram 'Show markers': CheckBox: draw a marker on to of each bin (=""P"" drawoption) 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption) change the Fill Color with Fill in the Style Tab => will show Bar menue in the Style Tab 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption) => will show Bar menue in the Style Tab 3d Plot: 'Type' : ComboBox: set histogram type Lego-Plot or Surface draw(Lego, Lego1.2, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Paint 'Error' : see 2D plot 'Bar' : change the bar attributes 'W' : change Bar Width 'O' : change Bar Offset 'Percentage': specifies the percentage of the bar which is drawn brighter and darker (10% == BAR1 drawoption) 'Horizontal Bar': draw a horizont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:1241,simpl,simple,1241,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,3,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"utes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GeneticMinimizer.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:11350,Clear,Clear,11350,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"utes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; AuthorSimon Spies ; Definition in file gmultierrors.C. tutorialsgraphsgmultierrors.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gmultierrors_8C.html:3581,Guid,Guide,3581,doc/master/gmultierrors_8C.html,https://root.cern,https://root.cern/doc/master/gmultierrors_8C.html,1,['Guid'],['Guide']
Usability,"utines like drawing, size of string on screen depen...Definition TGString.h:20; TGString::GetStringconst char * GetString() constDefinition TGString.h:30; TGTextBufferA text buffer is used in several widgets, like TGTextEntry, TGFileDialog, etc.Definition TGTextBuffer.h:17; TGTextButtonYield an action as soon as it is clicked.Definition TGButton.h:142; TGTextEntryA TGTextEntry is a one line text input widget.Definition TGTextEntry.h:24; TGTextEntry::SetDefaultSizevirtual void SetDefaultSize(UInt_t w, UInt_t h)Set the default / minimal size of the widget.Definition TGTextEntry.cxx:384; TGTextEntry::Clearvoid Clear(Option_t *option="""") overrideClears up the text entry.Definition TGTextEntry.cxx:972; TGTextEntry::GetTextconst char * GetText() constDefinition TGTextEntry.h:119; TGTextEntry::SetCursorPositionvirtual void SetCursorPosition(Int_t pos)Set the cursor position to newPos.Definition TGTextEntry.cxx:718; TGTextEntry::AppendTextvirtual void AppendText(const char *text)Appends text to the end of text entry, clears the selection and moves the cursor to the end of the li...Definition TGTextEntry.cxx:1689; TGTextEntry::SetToolTipTextvirtual void SetToolTipText(const char *text, Long_t delayms=500)Set tool tip text associated with this text entry.Definition TGTextEntry.cxx:1647; TGTextEntry::SetTextvirtual void SetText(const char *text, Bool_t emit=kTRUE)Sets text entry to text, clears the selection and moves the cursor to the end of the line.Definition TGTextEntry.cxx:611; TGTextEntry::HandleButtonBool_t HandleButton(Event_t *event) overrideHandle mouse button event in text entry widget.Definition TGTextEntry.cxx:1342; TGToolBarA toolbar is a composite frame that contains TGPictureButtons.Definition TGToolBar.h:33; TGVSplitterDefinition TGSplitter.h:53; TGVSplitter::SetFramevoid SetFrame(TGFrame *frame, Bool_t left) overrideSet frame to be resized.Definition TGSplitter.cxx:143; TGVertical3DLineA vertical 3D line is a line that can be used to separate groups of widgets",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:129761,clear,clears,129761,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['clear'],['clears']
Usability,"ution . Definition at line 1250 of file TUnfoldSys.cxx. ◆ GetEmatrixInput(). void TUnfoldSys::GetEmatrixInput ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from input measurement uncertainties ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the uncertainties or covariance of the input data. In many cases, these are the ""statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1207 of file TUnfoldSys.cxx. ◆ GetEmatrixSysBackgroundScale(). void TUnfoldSys::GetEmatrixSysBackgroundScale ; (; TH2 * ; ematrix, . const char * ; name, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from background normalisation uncertainty ; Parameters. [in,out]ematrixoutput histogram ; [in]sourceidentifier of the background source ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram prior to adding the covariance matrix contribution. this method returns the uncertainties on the unfolding result arising from the background source source and its normalisation uncertainty. See method SubtractBackground() how to set the normalisation uncertainty ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1144 of file TUnfoldSys.cxx. ◆ GetEmatrixSysBackgroundUncorr(). void TUnfoldSys::GetEmatrixSysBackgroundUncorr ; (; TH2 * ; ematrix, . const char * ; source, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from background",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:38447,clear,clearEmat,38447,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"utomatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree automatically creates a cache. This feature can be; controlled with an env. variable or the TTreeCache.Size option.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:1389,learn,learning,1389,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['learn'],['learning']
Usability,"utomatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ; file  xtruSamples.C;  Draw a sample of TXTRU shapes some convex, concave (and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__geom.html:2232,simpl,simple,2232,doc/master/group__tutorial__geom.html,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html,1,['simpl'],['simple']
Usability,"utorials directory to the macro path; //This is necessary in case this macro is executed from another user directory; TString dirName = gSystem->GetDirName(gInterpreter->GetCurrentMacroName());; const char *current = gROOT->GetMacroPath();; gROOT->SetMacroPath(TString::Format(""%s:%s"", current, dirName.Data()));; ; TControlBar *bar = new TControlBar(""vertical"", ""Demos"", 10, 10);; bar->AddButton(""Help Demos"", "".x demoshelp.C"", ""Click Here For Help on Running the Demos"");; bar->AddButton(""browser"", ""new TBrowser;"", ""Start the ROOT Browser"");; bar->AddButton(""framework"", "".x graphics/framework.C"", ""An Example of Object Oriented User Interface"");; bar->AddButton(""first"", "".x graphics/first.C"", ""An Example of Slide with Root"");; bar->AddButton(""hsimple"", "".x hsimple.C"", ""An Example Creating Histograms/Ntuples on File"");; bar->AddButton(""hsum"", "".x hist/hsum.C"", ""Filling Histograms and Some Graphics Options"");; bar->AddButton(""formula1"", "".x graphics/formula1.C"", ""Simple Formula and Functions"");; bar->AddButton(""surfaces"", "".x graphs/surfaces.C"", ""Surface Drawing Options"");; bar->AddButton(""fillrandom"", "".x hist/fillrandom.C"", ""Histograms with Random Numbers from a Function"");; bar->AddButton(""fit1"", "".x fit/fit1.C"", ""A Simple Fitting Example"");; bar->AddButton(""multifit"", "".x fit/multifit.C"", ""Fitting in Subranges of Histograms"");; bar->AddButton(""h1ReadAndDraw"", "".x hist/h1ReadAndDraw.C"", ""Drawing Options for 1D Histograms"");; bar->AddButton(""graph"", "".x graphs/graph.C"", ""Example of a Simple Graph"");; bar->AddButton(""gerrors"", "".x graphs/gerrors.C"", ""Example of a Graph with Error Bars"");; bar->AddButton(""tornado"", "".x graphics/tornado.C"", ""Examples of 3-D PolyMarkers"");; bar->AddButton(""geometry"", "".x geom/rootgeom.C"", ""Example of TGeoManager drawing"");; bar->AddButton(""file"", "".x io/file.C"", ""The ROOT File Format"");; bar->AddButton(""fildir"", "".x io/fildir.C"", ""The ROOT File, Directories and Keys"");; bar->AddButton(""tree"", "".x tree/tree.C"", ""The Tree Data Structure"");; ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demos_8C.html:1304,Simpl,Simple,1304,doc/master/demos_8C.html,https://root.cern,https://root.cern/doc/master/demos_8C.html,1,['Simpl'],['Simple']
Usability,uttons ; Definition at line 97 of file TGDockableFrame.h. ◆ fContainer. TGCompositeFrame* TGDockableFrame::fContainer. protected . container containing dockable frame ; Definition at line 96 of file TGDockableFrame.h. ◆ fDeleted. Bool_t TGDockableFrame::fDeleted. protected . kTRUE if it is being deleted ; Definition at line 93 of file TGDockableFrame.h. ◆ fDockButton. TGDockButton* TGDockableFrame::fDockButton. protected . dock button ; Definition at line 98 of file TGDockableFrame.h. ◆ fDockName. TString TGDockableFrame::fDockName. protected . name of frame ; Definition at line 95 of file TGDockableFrame.h. ◆ fEnableHide. Bool_t TGDockableFrame::fEnableHide. protected . if frame can be hidden ; Definition at line 91 of file TGDockableFrame.h. ◆ fEnableUndock. Bool_t TGDockableFrame::fEnableUndock. protected . if frame can be undocked ; Definition at line 92 of file TGDockableFrame.h. ◆ fFixedSize. Bool_t TGDockableFrame::fFixedSize. protected . kTRUE if fixed size when undocked ; Definition at line 94 of file TGDockableFrame.h. ◆ fFrame. TGUndockedFrame* TGDockableFrame::fFrame. protected . undocked frame ; Definition at line 100 of file TGDockableFrame.h. ◆ fHidden. Bool_t TGDockableFrame::fHidden. protected . if frame is hidden ; Definition at line 90 of file TGDockableFrame.h. ◆ fHideButton. TGDockHideButton* TGDockableFrame::fHideButton. protected . hide button ; Definition at line 99 of file TGDockableFrame.h. ◆ fHints. TGLayoutHints* TGDockableFrame::fHints. protected . layout hints ; Definition at line 101 of file TGDockableFrame.h. ◆ fLb. TGLayoutHints* TGDockableFrame::fLb. protected . Definition at line 102 of file TGDockableFrame.h. ◆ fLc. TGLayoutHints * TGDockableFrame::fLc. protected . layout hints ; Definition at line 102 of file TGDockableFrame.h. Libraries for TGDockableFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDockableFrame.h; gui/gui/src/TGDockableFrame.cxx. TGDockableFrame. ROOT mast,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:40271,undo,undocked,40271,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['undo'],['undocked']
Usability,"v = new TF1Convolution(function1, function2, xmin, xmax);; 558 ; 559 // (note: currently ignoring `useFFT` option); 560 fNpar = conv->GetNpar();; 561 fNdim = 1; // (note: may want to extend this in the future?); 562 ; 563 fType = EFType::kCompositionFcn;; 564 fComposition = std::unique_ptr<TF1AbsComposition>(conv);; 565 ; 566 fParams = std::make_unique<TF1Parameters>(fNpar); // default to zeros (TF1Convolution has no GetParameters()); 567 // set parameter names; 568 for (int i = 0; i < fNpar; i++); 569 this->SetParName(i, conv->GetParName(i));; 570 // set parameters to default values; 571 int f1Npar = function1->GetNpar();; 572 int f2Npar = function2->GetNpar();; 573 // first, copy parameters from function1; 574 for (int i = 0; i < f1Npar; i++); 575 this->SetParameter(i, function1->GetParameter(i));; 576 // then, check if the ""Constant"" parameters were combined; 577 // (this code assumes function2 has at most one parameter named ""Constant""); 578 if (conv->GetNpar() == f1Npar + f2Npar - 1) {; 579 int cst1 = function1->GetParNumber(""Constant"");; 580 int cst2 = function2->GetParNumber(""Constant"");; 581 this->SetParameter(cst1, function1->GetParameter(cst1) * function2->GetParameter(cst2));; 582 // and copy parameters from function2; 583 for (int i = 0; i < f2Npar; i++); 584 if (i < cst2); 585 this->SetParameter(f1Npar + i, function2->GetParameter(i));; 586 else if (i > cst2); 587 this->SetParameter(f1Npar + i - 1, function2->GetParameter(i));; 588 } else {; 589 // or if no constant, simply copy parameters from function2; 590 for (int i = 0; i < f2Npar; i++); 591 this->SetParameter(i + f1Npar, function2->GetParameter(i));; 592 }; 593 ; 594 // Then check if we need NSUM syntax:; 595 } else if (formulaLength > 5 && strncmp(formula, ""NSUM("", 5) == 0 && formula[formulaLength - 1] == ')') {; 596 // using comma as delimiter; 597 char delimiter = ',';; 598 // first, remove ""NSUM("" and "")"" and spaces; 599 TString formDense = TString(formula)(5,formulaLength-5-1);; 600 formDense.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:19029,simpl,simply,19029,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['simpl'],['simply']
Usability,"v default destructor. ; Definition at line 69 of file TNodeDiv.cxx. Member Function Documentation. ◆ Class(). static TClass * TNodeDiv::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TNodeDiv::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TNodeDiv::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file TNodeDiv.h. ◆ DeclFileName(). static const char * TNodeDiv::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file TNodeDiv.h. ◆ Draw(). void TNodeDiv::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw Referenced node with current parameters. ; Reimplemented from TNode.; Definition at line 76 of file TNodeDiv.cxx. ◆ IsA(). TClass * TNodeDiv::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNode.; Definition at line 41 of file TNodeDiv.h. ◆ Paint(). void TNodeDiv::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint Referenced node with current parameters. ; Reimplemented from TNode.; Definition at line 83 of file TNodeDiv.cxx. ◆ Streamer(). void TNodeDiv::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNode. ◆ StreamerNVirtual(). void TNodeDiv::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file TNodeDiv.h. Member Data Documentation. ◆ fAxis. Int_t TNodeDiv::fAxis. protected . Definition at line 31 of file TNodeDiv.h. ◆ fNdiv. Int_t TNodeDiv::fNdiv. protected . Definition at line 30 of file TNodeDiv.h. Libraries for TNodeDiv:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TNodeDiv.h; graf3d/g3d/src/TNodeDiv.cxx. TNodeDiv. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNodeDiv.html:21786,Guid,Guide,21786,doc/master/classTNodeDiv.html,https://root.cern,https://root.cern/doc/master/classTNodeDiv.html,1,['Guid'],['Guide']
Usability,"v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vector:""); for branch in t.GetListOfBranches():; print(""Branch: %s"" %branch.GetName()); ; f1.Close(); ; # We are not forced to write the full set of column names. We can also; # specify a regular expression for that. In case nothing is specified, all; # columns are persistified.; d2.Snapshot(treeName, outFileNameAllColumns); ; # Open the new file and list the columns of the tree; f2 = ROOT.TFile(outFileNameAllColumns); t = f2[treeName]; print(""These are all the columns available to this dataframe:""); for branch in t.GetListOfBranches():; print(""Branch: %s"" %branch.GetName()); ; f2.Close(); ; # We can also get a fresh RDataFrame out of the snapshot and restart the; # analysis chain from it.; ; snapshot_df = d2.Snapshot(treeName, outFileName, [""b1_square""]);; h = snapshot_df.Histo1D(""b1_square""); ; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df007_snapshot.png""); ; print(""Saved figure to df007_snapshot.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateApril 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df007_snapshot.py. tutorialsdataframedf007_snapshot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df007__snapshot_8py.html:3201,Guid,Guide,3201,doc/master/df007__snapshot_8py.html,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html,1,['Guid'],['Guide']
Usability,"vEmat = 0) const; get global correlation coefficients with arbitrary min map; rhoi: global correlation histogram; binMap: for each bin of the original output distribution; specify the destination bin. A value of -1 means that the bin; is discarded. 0 means underflow bin, 1 first bin, ...; binMap[0] : destination of underflow bin; binMap[1] : destination of first bin. return value: maximum global correlation. Double_t GetRhoIFromMatrix(TH1* rhoi, const TMatrixDSparse* eOrig, const Int_t* binMap, TH2* invEmat) const; get global correlation coefficients with arbitrary min map; rhoi: global correlation histogram; emat: error matrix; binMap: for each bin of the original output distribution; specify the destination bin. A value of -1 means that the bin; is discarded. 0 means underflow bin, 1 first bin, ...; binMap[0] : destination of underflow bin; binMap[1] : destination of first bin. return value: maximum global correlation. void ClearHistogram(TH1* h, Double_t x = 0.) const; clear histogram contents and error. void SetEpsMatrix(Double_t eps); set accuracy for matrix inversion. TUnfold(const TUnfold& ); Int_t IsNotSymmetric(TMatrixDSparse const &m) const;. TMatrixDSparse * MultiplyMSparseTranspMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const. TMatrixDSparse * InvertMSparseSymmPos(const TMatrixDSparse* A, Int_t* rank) const. TMatrixDSparse * CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const. Int_t GetNx(void). Int_t GetNy(void). const TMatrixDSparse * GetDXDY(void); { return fDXDY; }. const TMatrixDSparse * GetDXDAM(int i) const; { return fDXDAM[i]; }. const TMatrixDSparse * GetDXDAZ(int i) const; { return fDXDAZ[i]; }. const TMatrixDSparse * GetDXDtauSquared(void); { return fDXDtauSquared; }. const TMatrixDSparse * GetAx(void); { return fAx; }. const TMatrixDSparse * GetEinv(void); { return fEinv; }. const TMatrixDSparse * GetE(void); { return fE; }. const TMatrixDSparse * GetVxx(void); { return fVxx; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:32052,clear,clear,32052,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['clear'],['clear']
Usability,"vaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; TStringfOptimizationFitTypewhich type of optimisation procedure to be used ; map<TString,TMVA::Interval>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__OptimizeConfigParameters.html:3152,simpl,simple,3152,root/html530/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html530/TMVA__OptimizeConfigParameters.html,2,['simpl'],['simple']
Usability,"va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for RecHit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RecHit(). RecHit::RecHit ; (; float ; pt, . float ; x, . float ; y, . float ; z . ). inline . Definition at line 96 of file collection_proxies.C. Member Function Documentation. ◆ Class(). static TClass * RecHit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RecHit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RecHit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 97 of file collection_proxies.C. ◆ DeclFileName(). static const char * RecHit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 97 of file collection_proxies.C. ◆ IsA(). virtual TClass * RecHit::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 97 of file collection_proxies.C. ◆ Streamer(). virtual void RecHit::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RecHit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 97 of file collection_proxies.C. Member Data Documentation. ◆ fPt. float RecHit::fPt {0}. Definition at line 94 of file collection_proxies.C. ◆ fX. float RecHit::fX {0}. Definition at line 91 of file collection_proxies.C. ◆ fY. float RecHit::fY {0}. Definition at line 92 of file collection_proxies.C. ◆ fZ. float RecHit::fZ {0}. Definition at line 93 of file collection_proxies.C. tutorials/eve7/collection_proxies.C. RecHit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRecHit.html:11713,Guid,Guide,11713,doc/master/classRecHit.html,https://root.cern,https://root.cern/doc/master/classRecHit.html,1,['Guid'],['Guide']
Usability,"val -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gx_Int[mean,x]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.01562 , s = 4.5; [5] h = 0.003906 , s = 3.75; [6] h = 0.0009766 , s = 4.125; [7] h = 0.0002441 , s = 3.938; [8] h = 6.104e-05 , s = 4.031; [9] h = 1.526e-05 , s = 3.984; [10] h = 3.815e-06 , s = 4.008; [11] h = 9.537e-07 , s = 3.996; [12] h = 2.384e-07 , s = 4.002; [13] h = 5.96e-08 , s = 3.999; [14] h = 1.49e-08 , s = 4; [15] h = 3.725e-09 , s = 4; [16] h = 9.313e-10 , s = 4; [17] h = 2.328e-10 , s = 4; [18] h = 5.821e-11 , s = 4; [19] h = 1.455e-11 , s = 4; [20] h = 3.638e-12 , s = 4; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161efde710 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x_mean for nset (x,mean) with code 1; [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161efde710 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x for nset (x) with code 3 from preexisting content.; DateApril 2009 ; AuthorWouter Verkerke ; Definition in file rf211_paramconv.C. tutorialsroofitrf211_paramconv.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8C.html:34626,Guid,Guide,34626,doc/master/rf211__paramconv_8C.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8C.html,1,['Guid'],['Guide']
Usability,"val(3); (Double_t)4.70400026866224020e-02; root[] f1.Derivative(3); (Double_t)(-3.45675056671992330e-01); root[] f1.Integral(0,3); (Double_t)1.84865252799946810e+00; root[] f1.Draw(); By default the method TF1::Paint(), that draws the function, computes 100 equidistant points to draw it. The number of points can be set to a higher value with:; root[] f1.SetNpx(2000);; Note that while the ROOT framework is an object-oriented framework, this does not prevent the user from calling plain functions.; 2.3.4 User Interaction; Now we will look at some interactive capabilities. Try to draw the function sin(x)/x again. Every object in a window (which is called a canvas) is, in fact, a graphical object in the sense that you can grab it, resize it, and change its characteristics with a mouse click. For example, bring the cursor over the x-axis. The cursor changes to a hand with a pointing finger when it is over the axis. Now, left click and drag the mouse along the axis to the right. You have a very simple zoom.; When you move the mouse over any object, you can get access to selected methods by pressing the right mouse button and obtaining a context menu. If you try this on the function TF1, you will get a menu showing available methods. The other objects on this canvas are the title, a TPaveText object; the x and y-axis, TAxis objects, the frame, a TFrame object, and the canvas a TCanvas object. Try clicking on these and observe the context menu with their methods. A context menu. For example try selecting the SetRange() method and putting -10, 10 in the dialog box fields. This is equivalent to executing f1.SetRange(-10,10) from the command line, followed by f1.Draw(). Here are some other options you can try.; Once the picture suits your wishes, you may want to see the code you should put in a script to obtain the same result. To do that, choose Save / canvas.C entry of the File menu. This will generate a script showing the options set in the current canvas. Notice that you can",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:49246,simpl,simple,49246,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"val.; Definition at line 92 of file LogInterval.h. ◆ GetNbins(). virtual Int_t TMVA::LogInterval::GetNbins ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 95 of file LogInterval.h. ◆ GetRndm(). Double_t TMVA::LogInterval::GetRndm ; (; TRandom3 & ; rnd); const. virtual . get uniformly distributed number within interval ; Reimplemented from TMVA::Interval.; Definition at line 144 of file LogInterval.cxx. ◆ GetStepSize(). Double_t TMVA::LogInterval::GetStepSize ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete LogInterval"" ; Reimplemented from TMVA::Interval.; Definition at line 129 of file LogInterval.cxx. ◆ GetWidth(). Double_t TMVA::LogInterval::GetWidth ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 151 of file LogInterval.cxx. ◆ IsA(). virtual TClass * TMVA::LogInterval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Interval.; Definition at line 106 of file LogInterval.h. ◆ Log(). TMVA::MsgLogger & TMVA::LogInterval::Log ; (; ); const. Definition at line 165 of file LogInterval.cxx. ◆ SetMax(). void TMVA::LogInterval::SetMax ; (; Double_t ; m). inline . Definition at line 101 of file LogInterval.h. ◆ SetMin(). void TMVA::LogInterval::SetMin ; (; Double_t ; m). inline . Definition at line 102 of file LogInterval.h. ◆ Streamer(). virtual void TMVA::LogInterval::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::Interval. ◆ StreamerNVirtual(). void TMVA::LogInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 106 of file LogInterval.h. Libraries for TMVA::LogInterval:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LogInterval.h; tmva/tmva/src/LogInterval.cxx. TMVALogInterval. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:7155,Guid,Guide,7155,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Guid'],['Guide']
Usability,val.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterval.; Definition at line 40 of file SimpleInterval.h. ◆ Streamer(). void RooStats::SimpleInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::SimpleInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file SimpleInterval.h. ◆ UpperLimit(). virtual double RooStats::SimpleInterval::UpperLimit ; (; ). inlinevirtual . return the interval upper limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 48 of file SimpleInterval.h. Member Data Documentation. ◆ fConfidenceLevel. double RooStats::SimpleInterval::fConfidenceLevel. confidence level ; Definition at line 65 of file SimpleInterval.h. ◆ fLowerLimit. double RooStats::SimpleInterval::fLowerLimit. lower interval limit ; Definition at line 63 of file SimpleInterval.h. ◆ fParameters. RooArgSet RooStats::SimpleInterval::fParameters. set containing the parameter of interest ; Definition at line 62 of file SimpleInterval.h. ◆ fUpperLimit. double RooStats::SimpleInterval::fUpperLimit. upper interval limit ; Definition at line 64 of file SimpleInterval.h. Libraries for RooStats::SimpleInterval:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/SimpleInterval.h; roofit/roostats/src/SimpleInterval.cxx. RooStatsSimpleInterval. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:17285,Simpl,SimpleInterval,17285,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,13,"['Guid', 'Simpl']","['Guide', 'SimpleInterval']"
Usability,"valid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:3286,clear,clearShapeDirty,3286,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,32,['clear'],['clearShapeDirty']
Usability,"valid = kFALSE) const; virtual RooAbsGenContext*binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:6940,clear,clearValueAndShapeDirty,6940,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"value press the left mouse button near to the left/right (top/bottom) edges of the slider. To change both values simultaneously press the mouse button near to the slider center. To change pointer value press the mouse on the pointer and drag it to the desired position.; fSlider = new TGTripleHSlider(parent,100,kDoubleScaleBoth,kSLD_ID,; kHorizontalFrame);; parent->AddFrame(fSlider,new TGLayoutHints(kLHintsExpandX,5,5,5,5));; fSlider->SetConstrained(kTRUE);; fSlider->SetRange(rmin, rmax);; fSlider->SetPosition(pmin, pmax);; fSlider ->SetPointerPosition(pvalue);; 25.8.10 Progress Bars; A progress bar is a widget that shows that an operation is in progress and how much time is left. It is a long rectangular bar, initially empty, that fills with a color as a process is being performed. The filled-in area indicates the percentage of the process that has been completed. You should use this widget for waits exceeding one minute. For a very time consuming operation it is better to break the operation into subtasks and provide a progress bar for each of them. A progress bar may be oriented horizontally or vertically. The horizontally oriented progress bar fills with a color from left to right; the vertically oriented - from bottom to top. A percent complete message provides an indication of the completed part of the process. It is a good practice to include some descriptive text of the process to keep users informed and entertained while they are waiting for process completion.; The picture below shows the progress bars you can create using the classes TGProgressBar, TGHProgressBar, and TGHProgressBar.; // vertical frame with three horizontal progressive bars; TGVerticalFrame *vframe = new TGVerticalFrame(fMain, 10, 10);; fHProg1 = new TGHProgressBar(vframe,TGProgressBar::kStandard,300);; fHProg1->ShowPosition();; fHProg1->SetBarColor(""yellow"");; fHProg2 = new TGHProgressBar(vframe,TGProgressBar::kFancy,300);; fHProg2->SetBarColor(""lightblue"");; fHProg2->ShowPosition(kTRUE,kF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1208132,progress bar,progress bar,1208132,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['progress bar'],['progress bar']
Usability,"value returned by its Hash() function. If and only if 'before' is in the same bucket as obj, obj is added in front of 'before' within the bucket's list. ; Definition at line 112 of file THashTable.cxx. ◆ AddImpl(). void THashTable::AddImpl ; (; Int_t ; slot, . TObject * ; obj . ). inlineprivate . Helper function doing the actual add to the table give a slot and object. ; This does not take any lock. ; Definition at line 78 of file THashTable.cxx. ◆ AverageCollisions(). Float_t THashTable::AverageCollisions ; (; ); const. inline . Definition at line 85 of file THashTable.h. ◆ Class(). static TClass * THashTable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * THashTable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THashTable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file THashTable.h. ◆ Clear(). void THashTable::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the table. ; Does not delete the objects unless the THashTable is the owner (set via SetOwner()). ; Implements TCollection.; Definition at line 167 of file THashTable.cxx. ◆ Collisions() [1/2]. Int_t THashTable::Collisions ; (; const char * ; name); const. Returns the number of collisions for an object with a certain name (i.e. ; number of objects in same slot in the hash table, i.e. length of linked list). ; Definition at line 191 of file THashTable.cxx. ◆ Collisions() [2/2]. Int_t THashTable::Collisions ; (; TObject * ; obj); const. Returns the number of collisions for an object (i.e. ; number of objects in same slot in the hash table, i.e. length of linked list). ; Definition at line 205 of file THashTable.cxx. ◆ DeclFileName(). static const char * THashTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 82 of file THashTable.h. ◆ Delete(). void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:18946,Clear,Clear,18946,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['Clear'],['Clear']
Usability,"value, and has not been set, appropriate warning is shown. ; Definition at line 3359 of file TFormula.cxx. ◆ DoSetParameters(). void TFormula::DoSetParameters ; (; const Double_t * ; p, . Int_t ; size . ). protected . Definition at line 2949 of file TFormula.cxx. ◆ Eval(). template<typename... Args> . Double_t TFormula::Eval ; (; Args... ; args); const. Set first 1, 2, 3 or 4 variables (e.g. ; x, y, z and t) and evaluate formula. ; Definition at line 324 of file TFormula.h. ◆ EvalPar() [1/2]. Double_t TFormula::EvalPar ; (; const Double_t * ; x, . const Double_t * ; params = nullptr . ); const. Definition at line 3078 of file TFormula.cxx. ◆ EvalPar() [2/2]. template<class T > . T TFormula::EvalPar ; (; const T * ; x, . const Double_t * ; params = nullptr . ); const. inline . Definition at line 244 of file TFormula.h. ◆ ExtractFunctors(). void TFormula::ExtractFunctors ; (; TString & ; formula). protected . Extracts functors from formula, and put them in fFuncs. ; Simple grammar:; <function> := name(arg1,arg2...); <variable> := name; <parameter> := [number]; <name> := String containing lower and upper letters, numbers, underscores; <number> := Integer number Operators are omitted. . Definition at line 1832 of file TFormula.cxx. ◆ FillDefaults(). void TFormula::FillDefaults ; (; ). private . Fill structures with default variables, constants and function shortcuts. ; Definition at line 902 of file TFormula.cxx. ◆ FillParametrizedFunctions(). void TFormula::FillParametrizedFunctions ; (; std::map< std::pair< TString, Int_t >, std::pair< TString, TString > > & ; functions). private . Fill map with parametrized functions. ; Definition at line 2417 of file TFormula.cxx. ◆ FillVecFunctionsShurtCuts(). void TFormula::FillVecFunctionsShurtCuts ; (; ). private . Fill the shortcuts for vectorized functions We will replace for example sin with vecCore::Mat::Sin. ; Definition at line 970 of file TFormula.cxx. ◆ GenerateGradientPar(). bool TFormula::GenerateGradientPar ; (; ). Gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:34352,Simpl,Simple,34352,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['Simpl'],['Simple']
Usability,"values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedPdf(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset); Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset); Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedPdf.html:41764,clear,clearCacheObject,41764,root/html526/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedPdf.html,1,['clear'],['clearCacheObject']
Usability,"values;; 407 ; 408 const TString tokenDelim (""+"");; 409 TObjArray* tokenStrings = parseString.Tokenize (tokenDelim);; 410 TIter nextToken (tokenStrings);; 411 TObjString* tokenString = (TObjString*)nextToken ();; 412 for (; tokenString != NULL; tokenString = (TObjString*)nextToken ()) {; 413 std::stringstream sstr;; 414 double currentValue;; 415 sstr << tokenString->GetString ().Data ();; 416 sstr >> currentValue;; 417 values.push_back (currentValue);; 418 }; 419 return values;; 420}; 421 ; 422////////////////////////////////////////////////////////////////////////////////; 423 ; 424void TMVA::MethodDNN::ProcessOptions(); 425{; 426 if (IgnoreEventsWithNegWeightsInTraining()) {; 427 Log() << kINFO; 428 << ""Will ignore negative events in training!""; 429 << Endl;; 430 }; 431 ; 432 if (fArchitectureString == ""STANDARD"") {; 433 Log() << kERROR << ""The STANDARD architecture has been deprecated. ""; 434 ""Please use Architecture=CPU or Architecture=CPU.""; 435 ""See the TMVA Users' Guide for instructions if you ""; 436 ""encounter problems.""; 437 << Endl;; 438 Log() << kFATAL << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been implemented yet. ""; 452 ""Please use Architecture=CPU or Architecture=CPU for the ""; 453 ""time being. See the TMVA Users' Guide for instructions ""; 454 ""if you encounter problems.""; 455 << Endl;; 456 }; 457 ; 458 if (fArchitectureString == ""GPU"") {; 459#ifndef DNNCUDA // Included only if DNNCUDA flag is _not_ set.; 460 Log() << kERROR <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:14609,Guid,Guide,14609,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Guid'],['Guide']
Usability,"var, const std::string &name, double val, double step, double lower)ROOT::Math::Minimizerinlinevirtual; SetMaxFunctionCalls(unsigned int maxfcn)ROOT::Math::Minimizerinline; SetMaxIterations(unsigned int maxiter)ROOT::Math::Minimizerinline; SetOptions(const MinimizerOptions &opt)ROOT::Math::Minimizerinline; SetPrecision(double prec)ROOT::Math::Minimizerinline; SetPrintLevel(int level)ROOT::Math::Minimizerinline; SetStrategy(int strategyLevel)ROOT::Math::Minimizerinline; SetTolerance(double tol)ROOT::Math::Minimizerinline; SetUpperLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double upper)ROOT::Math::Minimizerinlinevirtual; SetValidError(bool on)ROOT::Math::Minimizerinline; SetVariable(unsigned int ivar, const std::string &name, double val, double step)=0ROOT::Math::Minimizerpure virtual; SetVariableInitialRange(unsigned int, double, double)ROOT::Math::Minimizerinlinevirtual; SetVariableLimits(unsigned int ivar, double lower, double upper)ROOT::Math::Minimizerinlinevirtual; SetVariableLowerLimit(unsigned int ivar, double lower)ROOT::Math::Minimizervirtual; SetVariables(const VariableIterator &begin, const VariableIterator &end)ROOT::Math::Minimizerinline; SetVariableStepSize(unsigned int ivar, double value)ROOT::Math::Minimizervirtual; SetVariableUpperLimit(unsigned int ivar, double upper)ROOT::Math::Minimizervirtual; SetVariableValue(unsigned int ivar, double value)ROOT::Math::Minimizervirtual; SetVariableValues(const double *x)ROOT::Math::Minimizerinlinevirtual; Status() constROOT::Math::Minimizerinline; Strategy() constROOT::Math::Minimizerinline; Tolerance() constROOT::Math::Minimizerinline; VariableIndex(const std::string &name) constROOT::Math::Minimizervirtual; VariableName(unsigned int ivar) constROOT::Math::Minimizervirtual; X() const =0ROOT::Math::Minimizerpure virtual; ~Minimizer()ROOT::Math::Minimizerinlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer-members.html:5505,Guid,Guide,5505,doc/master/classROOT_1_1Math_1_1Minimizer-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer-members.html,1,['Guid'],['Guide']
Usability,"var9, const char* name = """"); virtual~RooArgSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tadd(const RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tadd(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual RooAbsArg*addClone(const RooAbsArg& var, Bool_t silent = kFALSE); virtual voidaddClone(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_taddOwned(RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_taddOwned(const RooAbsCollection& list, Bool_t silent = kFALSE); Bool_tRooAbsCollection::allInRange(const char* rangeSpec) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooAbsCollection&RooAbsCollection::assignFast(const RooAbsCollection& other); RooAbsCollection&RooAbsCollection::assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsCollection::Clone(const char* newname = 0) const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tRooAbsCollection::contains(const RooAbsArg& var) const; Bool_tRooAbsCollection::containsInstance(const RooAbsArg& var) const; stringRooAbsCollection::contentsString() const; virtual voidTObject::Copy(TObject& object) const; virtual TObject*create(const char* newname) const; TIterator*RooAbsCollection::createIterator(Bool_t dir = kIterForward) const; virtual Int_tRooAbsCollection::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooArgSet.html:3895,Clear,Clear,3895,root/html530/RooArgSet.html,https://root.cern,https://root.cern/root/html530/RooArgSet.html,1,['Clear'],['Clear']
Usability,"variables. We assign px and py a Gaussian with mean = 0 and sigma = 1 by calling gRandom->Rannor(px,py), and calculatepz. Then we call the TTree::Fill() method. The call t1.Fill() fills all branches in the tree because we have already organized the tree into branches and told each branch where to get the value from. After this script is executed we have a ROOT file called tree1.root with a tree called t1. There is a possibility to fill branches one by one using the method TBranch::Fill(). In this case you do not need to call TTree::Fill() method. The entries can be set by TTree::SetEntries(Double_t n). Calling this method makes sense only if the number of existing entries is null.; 12.14.2 Viewing the Tree. The tree1.root file and its tree in the browser and a leaf histogram. In the right panel of the ROOT object browse are the branches: ev, px, py, pz, and random. Note that these are shown as leaves because they are “end” branches with only one leaf. To histogram a leaf, we can simply double click on it in the browser. This is how the tree t1 looks in the Tree Viewer. Here we can add a cut and add other operations for histogramming the leaves. See “The Tree Viewer”. For example, we can plot a two dimensional histogram. The tree viewer. 12.14.3 Reading the Tree; The tree1r function shows how to read the tree and access each entry and each leaf. We first define the variables to hold the read values.; Float_t px, py, pz;; Then we tell the tree to populate these variables when reading an entry. We do this with the method TTree::SetBranchAddress. The first parameter is the branch name, and the second is the address of the variable where the branch data is to be placed. In this example, the branch name is px. This name was given when the tree was written (see tree1w). The second parameter is the address of the variable px.; t1->SetBranchAddress(""px"",&px);; 12.14.3.1 GetEntry; Once the branches have been given the address, a specific entry can be read into the variables w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:555071,simpl,simply,555071,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"vas(""rf302_utilfuncs"", ""rf302_utilfuncs"", 800, 800); c.Divide(2, 2); c.cd(1); ROOT.gPad.SetLeftMargin(0.20); hh_model_1.GetZaxis().SetTitleOffset(2.5); hh_model_1.Draw(""surf""); c.cd(2); ROOT.gPad.SetLeftMargin(0.20); hh_model_2.GetZaxis().SetTitleOffset(2.5); hh_model_2.Draw(""surf""); c.cd(3); ROOT.gPad.SetLeftMargin(0.20); hh_model_3.GetZaxis().SetTitleOffset(2.5); hh_model_3.Draw(""surf""); c.cd(4); ROOT.gPad.SetLeftMargin(0.20); hh_model_4.GetZaxis().SetTitleOffset(2.5); hh_model_4.Draw(""surf""); ; c.SaveAs(""rf302_utilfuncs.png""); [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_3' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_4' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_1_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_2_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_3_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_4_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf302_utilfuncs.py. tutorialsroofitrf302_utilfuncs.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf302__utilfuncs_8py.html:4675,Guid,Guide,4675,doc/master/rf302__utilfuncs_8py.html,https://root.cern,https://root.cern/doc/master/rf302__utilfuncs_8py.html,1,['Guid'],['Guide']
Usability,"vas() [1/2]. ROOT::Experimental::RCanvas::RCanvas ; (; const RCanvas & ; ). privatedelete . Disable copy construction for now. . ◆ RCanvas() [2/2]. ROOT::Experimental::RCanvas::RCanvas ; (; ). inline . Create a temporary RCanvas; for long-lived ones please use Create(). ; Definition at line 88 of file RCanvas.hxx. ◆ ~RCanvas(). ROOT::Experimental::RCanvas::~RCanvas ; (; ). overridedefault . Member Function Documentation. ◆ AddPanel(). template<class PANEL > . bool ROOT::Experimental::RCanvas::AddPanel ; (; std::shared_ptr< PANEL > & ; panel). inline . Insert panel into the canvas, canvas should be shown at this moment. ; Definition at line 139 of file RCanvas.hxx. ◆ ClearOnClose(). void ROOT::Experimental::RCanvas::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 239 of file RCanvas.cxx. ◆ ClearShown(). void ROOT::Experimental::RCanvas::ClearShown ; (; ). inline . clear IsShown() flag ; Definition at line 123 of file RCanvas.hxx. ◆ ClearUpdated(). void ROOT::Experimental::RCanvas::ClearUpdated ; (; ). inline . clear IsUpdated() flag ; Definition at line 169 of file RCanvas.hxx. ◆ Create(). std::shared_ptr< ROOT::Experimental::RCanvas > ROOT::Experimental::RCanvas::Create ; (; const std::string & ; title). static . Create new canvas instance. ; Definition at line 89 of file RCanvas.cxx. ◆ CreateJSON(). std::string ROOT::Experimental::RCanvas::CreateJSON ; (; ). Provide JSON which can be used for offline display. ; Create JSON data for the canvas Can be used of offline display with JSROOT. ; Definition at line 211 of file RCanvas.cxx. ◆ GetCanvas() [1/2]. const RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ); const. inlineoverridevirtual . Access to the top-most canvas, if any (const version). ; Implements ROOT::Experimental::RPadBase.; Definition at line 92 of file RCanvas.hxx. ◆ GetCanvas() [2/2]. RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ). inlineoverride",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:10507,clear,clear,10507,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html,1,['clear'],['clear']
Usability,"vas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionQueryFrame.html:22530,feedback,feedback,22530,root/html602/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html,2,['feedback'],['feedback']
Usability,"vas.cxx. Member Function Documentation. ◆ Browse(). void TCanvas::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 682 of file TCanvas.cxx. ◆ Build(). void TCanvas::Build ; (; ). private . Build a canvas. Called by all constructors. ; Definition at line 584 of file TCanvas.cxx. ◆ cd(). TVirtualPad * TCanvas::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 716 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 734 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 767 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 785 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 775 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:66174,Clear,Clear,66174,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Clear'],['Clear']
Usability,"vas.cxx. Member Function Documentation. ◆ Browse(). void TCanvas::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 685 of file TCanvas.cxx. ◆ Build(). void TCanvas::Build ; (; ). private . Build a canvas. Called by all constructors. ; Definition at line 587 of file TCanvas.cxx. ◆ cd(). TVirtualPad * TCanvas::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 719 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 737 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 770 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 788 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 778 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:66550,Clear,Clear,66550,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['Clear'],['Clear']
Usability,"vas.cxx:199; ROOT::Experimental::RCanvas::CreateJSONstd::string CreateJSON()Provide JSON which can be used for offline display.Definition RCanvas.cxx:211; ROOT::Experimental::RCanvas::SetHeightvoid SetHeight(int height)Set canvas height.Definition RCanvas.hxx:108; ROOT::Experimental::RCanvas::IsShownbool IsShown() constreturns true if Show() method was calledDefinition RCanvas.hxx:120; ROOT::Experimental::RCanvas::fPainterstd::unique_ptr< Internal::RVirtualCanvasPainter > fPainterThe painter of this canvas, bootstrapping the graphics connection.Definition RCanvas.hxx:67; ROOT::Experimental::RCanvas::fWidthint fWidthWidth of the canvas in pixels.Definition RCanvas.hxx:56; ROOT::Experimental::RCanvas::fUpdatedbool fUpdatedindicate if Update() method was called beforeDefinition RCanvas.hxx:73; ROOT::Experimental::RCanvas::Createstatic std::shared_ptr< RCanvas > Create(const std::string &title)Create new canvas instance.Definition RCanvas.cxx:89; ROOT::Experimental::RCanvas::ClearShownvoid ClearShown()clear IsShown() flagDefinition RCanvas.hxx:123; ROOT::Experimental::RCanvas::ClearOnClosevoid ClearOnClose(const std::shared_ptr< void > &handle)Set handle which will be cleared when connection is closed.Definition RCanvas.cxx:239; ROOT::Experimental::RCanvas::SetWidthvoid SetWidth(int width)Set canvas width.Definition RCanvas.hxx:105; ROOT::Experimental::RCanvas::GetCanvasconst RCanvas * GetCanvas() const overrideAccess to the top-most canvas, if any (const version).Definition RCanvas.hxx:92; ROOT::Experimental::RCanvas::RCanvasRCanvas()Create a temporary RCanvas; for long-lived ones please use Create().Definition RCanvas.hxx:88; ROOT::Experimental::RCanvas::Modifiedvoid Modified(std::shared_ptr< RDrawable > drawable)Set newest version to specified drawable.Definition RCanvas.hxx:152; ROOT::Experimental::RCanvas::Modifiedvoid Modified()Definition RCanvas.hxx:149; ROOT::Experimental::RCanvas::GetWidthint GetWidth() constGet canvas width.Definition RCanvas.hxx:111; ROOT::Exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8hxx_source.html:12277,Clear,ClearShownvoid,12277,doc/master/RCanvas_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8hxx_source.html,3,"['Clear', 'clear']","['ClearShown', 'ClearShownvoid', 'clear']"
Usability,vate . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 76 of file DLMinimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 74 of file DLMinimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 81 of file DLMinimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 82 of file DLMinimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 73 of file DLMinimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 80 of file DLMinimizers.h. ◆ fTestInterval. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fTestInterval. private . Interval for the computation of the test error. ; Definition at line 78 of file DLMinimizers.h. ◆ fTrainingError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fTrainingError. private . Holds the most recently computed training loss. ; Definition at line 79 of file DLMinimizers.h. tmva/tmva/inc/TMVA/DNN/DLMinimizers.h. TMVADNNTDLGradientDescent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:13502,Guid,Guide,13502,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['Guid'],['Guide']
Usability,vate . The background model combination. ; Definition at line 92 of file HLFactory.h. ◆ fComboCat. RooCategory* RooStats::HLFactory::fComboCat = nullptr. private . The category of the combination. ; Definition at line 91 of file HLFactory.h. ◆ fComboDataset. RooDataSet* RooStats::HLFactory::fComboDataset = nullptr. private . The datasets combination. ; Definition at line 94 of file HLFactory.h. ◆ fComboSigBkgPdf. RooAbsPdf* RooStats::HLFactory::fComboSigBkgPdf = nullptr. private . The signal plus background model combination. ; Definition at line 93 of file HLFactory.h. ◆ fDatasetsNames. TList RooStats::HLFactory::fDatasetsNames. private . List of channels names to combine for the datasets. ; Definition at line 98 of file HLFactory.h. ◆ fInclusionLevel. int RooStats::HLFactory::fInclusionLevel = 0. private . Keep trace of the inclusion deepness. ; Definition at line 101 of file HLFactory.h. ◆ fLabelsNames. TList RooStats::HLFactory::fLabelsNames. private . List of channels names to combine for the datasets. ; Definition at line 99 of file HLFactory.h. ◆ fOwnWs. bool RooStats::HLFactory::fOwnWs = false. private . Owns workspace. ; Definition at line 103 of file HLFactory.h. ◆ fSigBkgPdfNames. TList RooStats::HLFactory::fSigBkgPdfNames. private . List of channels names to combine for the signal plus background pdfs. ; Definition at line 96 of file HLFactory.h. ◆ fVerbose. bool RooStats::HLFactory::fVerbose = false. private . The verbosity flag. ; Definition at line 100 of file HLFactory.h. ◆ fWs. RooWorkspace* RooStats::HLFactory::fWs = nullptr. private . The RooWorkspace containing the models and variables. ; Definition at line 102 of file HLFactory.h. Libraries for RooStats::HLFactory:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HLFactory.h; roofit/roostats/src/HLFactory.cxx. RooStatsHLFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HLFactory.html:22323,Guid,Guide,22323,doc/master/classRooStats_1_1HLFactory.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HLFactory.html,1,['Guid'],['Guide']
Usability,"vationReLU.h. ◆ Eval(). Double_t TMVA::TActivationReLU::Eval ; (; Double_t ; arg). inlinevirtual . Implements TMVA::TActivation.; Definition at line 48 of file TActivationReLU.h. ◆ EvalDerivative(). Double_t TMVA::TActivationReLU::EvalDerivative ; (; Double_t ; arg). inlinevirtual . Implements TMVA::TActivation.; Definition at line 51 of file TActivationReLU.h. ◆ GetExpression(). TString TMVA::TActivationReLU::GetExpression ; (; ). virtual . get expressions for the tanh and its derivative ; Implements TMVA::TActivation.; Definition at line 42 of file TActivationReLU.cxx. ◆ GetMax(). Double_t TMVA::TActivationReLU::GetMax ; (; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 57 of file TActivationReLU.h. ◆ GetMin(). Double_t TMVA::TActivationReLU::GetMin ; (; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 54 of file TActivationReLU.h. ◆ IsA(). virtual TClass * TMVA::TActivationReLU::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::TActivation.; Definition at line 66 of file TActivationReLU.h. ◆ MakeFunction(). void TMVA::TActivationReLU::MakeFunction ; (; std::ostream & ; fout, . const TString & ; fncName . ). virtual . writes the Rectified Linear Unit activation function source code ; Implements TMVA::TActivation.; Definition at line 52 of file TActivationReLU.cxx. ◆ Streamer(). virtual void TMVA::TActivationReLU::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::TActivation. ◆ StreamerNVirtual(). void TMVA::TActivationReLU::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file TActivationReLU.h. Libraries for TMVA::TActivationReLU:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TActivationReLU.h; tmva/tmva/src/TActivationReLU.cxx. TMVATActivationReLU. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationReLU.html:4557,Guid,Guide,4557,doc/master/classTMVA_1_1TActivationReLU.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationReLU.html,1,['Guid'],['Guide']
Usability,"ve (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TPaveLabel.cxx:201; TPaveLabel::Copyvoid Copy(TObject &pavelabel) const overrideCopy this pavelabel to pavelabel.Definition TPaveLabel.cxx:78; TPaveLabel::PaintPaveLabelvirtual void PaintPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, Option_t *option="""")Draw this pavelabel with new coordinates.Definition TPaveLabel.cxx:122; TPaveLabel::~TPaveLabel~TPaveLabel() overrideTPaveLabel default destructor.Definition TPaveLabel.cxx:53; TPaveLabel::DrawPaveLabelvirtual TPaveLabel * DrawPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, Option_t *option="""")Draw this pavelabel with new coordinates.Definition TPaveLabel.cxx:100; TPaveLabel::GetLabelconst char * GetLabel() constDefinition TPaveLabel.h:36; TPaveLabel::Paintvoid Paint(Option_t *option="""") overridePaint this pavelabel with its current attributes.Definition TPaveLabel.cxx:111; TPaveLabel::TPaveLabelTPaveLabel()Pavelabel default constructor.Definition TPaveLabel.cxx:32; TPaveLabel::fLabelTString fLabelLabel written at the center of Pave.Definition TPaveLabel.h:23; TPaveLabel::SetLabelvirtual void SetLabel(const char *label)Definition TPaveLabel.h:42; TPaveLabel::operator=TPaveLabel & operator=(const TPaveLabel &pavelabel)TPaveLabel assign operator.Definition TPaveLabel.cxx:68; TPaveLabel::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TPaveLabel.h:37; TPaveA TBox with a bordersize and a shadow option.Definition TPave.h:19; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; double; Drawth1 Draw(). graf2dgrafincTPaveLabel.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveLabel_8h_source.html:4594,Guid,Guide,4594,doc/master/TPaveLabel_8h_source.html,https://root.cern,https://root.cern/doc/master/TPaveLabel_8h_source.html,1,['Guid'],['Guide']
Usability,"ve ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetDimensions(). void TGeoPara::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [1/2]. void TGeoPara::SetPoints ; (; Double_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoPara::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Sizeof3D(). void TGeoPara::Sizeof3D ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Streamer(). void TGeoPara::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoPara::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TGeoPara.h. Member Data Documentation. ◆ fAlpha. Double_t TGeoPara::fAlpha. protected . Definition at line 23 of file TGeoPara.h. ◆ fPhi. Double_t TGeoPara::fPhi. protected . Definition at line 25 of file TGeoPara.h. ◆ fTheta. Double_t TGeoPara::fTheta. protected . Definition at line 24 of file TGeoPara.h. ◆ fTxy. Double_t TGeoPara::fTxy. protected . Definition at line 26 of file TGeoPara.h. ◆ fTxz. Double_t TGeoPara::fTxz. protected . Definition at line 27 of file TGeoPara.h. ◆ fTyz. Double_t TGeoPara::fTyz. protected . Definition at line 28 of file TGeoPara.h. ◆ fX. Double_t TGeoPara::fX. protected . Definition at line 20 of file TGeoPara.h. ◆ fY. Double_t TGeoPara::fY. protected . Definition at line 21 of file TGeoPara.h. ◆ fZ. Double_t TGeoPara::fZ. protected . Definition at line 22 of file TGeoPara.h. Libraries for TGeoPara:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoPara.h. TGeoPara. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPara.html:30527,Guid,Guide,30527,doc/master/classTGeoPara.html,https://root.cern,https://root.cern/doc/master/classTGeoPara.html,1,['Guid'],['Guide']
Usability,"ve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  NGenAlgoOptUtil;  NGenVector;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NImpl;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton algorithm, which computes the derivative at each iteration See the GSL manual for more information ;  CSecantSecant algorithm, simplified version of Newton method, which does not require the derivative at every step ;  CSteffensonSteffenson method, providing the fastes convergence ;  ►NrowOffsetsUtils;  Cindices;  Cmake_indices;  Cmake_indices_impl;  Cmake_indices_impl< I, indices< Indices.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:38075,simpl,simplest,38075,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,2,['simpl'],"['simplest', 'simplified']"
Usability,"ve and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 63 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 444 of file RGeomViewer.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomViewer::Description ; (; ). inline . Definition at line 107 of file RGeomViewer.hxx. ◆ GetShowColumns(). bool ROOT::RGeomViewer::GetShowColumns ; (; ); const. inline . Definition at line 97 of file RGeomViewer.hxx. ◆ GetShowHierarchy(). bool ROOT::RGeomViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 93 of file RGeomViewer.hxx. ◆ GetStackFromJson(). std::vector< int > RGeomViewer::GetStackFromJson ; (; const std::string & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 164 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window addres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:4580,clear,cleared,4580,doc/v632/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html,1,['clear'],['cleared']
Usability,"ve and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 71 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 452 of file RGeomViewer.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomViewer::Description ; (; ). inline . Definition at line 107 of file RGeomViewer.hxx. ◆ GetShowColumns(). bool ROOT::RGeomViewer::GetShowColumns ; (; ); const. inline . Definition at line 97 of file RGeomViewer.hxx. ◆ GetShowHierarchy(). bool ROOT::RGeomViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 93 of file RGeomViewer.hxx. ◆ GetStackFromJson(). std::vector< int > RGeomViewer::GetStackFromJson ; (; const std::string & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 172 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window addres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:4626,clear,cleared,4626,doc/master/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html,1,['clear'],['cleared']
Usability,"ve been making some commits to your local repository on the master branch, and you realize (perhaps because your project is turning out to be a bit more involved than you thought, or because a slew of changes have just appeared upstream) that you might have been better using NoSY. It's actually quite easy to swap to using NoSY without any disruption to your already-committed changes. Starting from your current position on the master branch:; Stash your current changes if appropriate:git stash; Create (but do not switch to) a branch which will contain all your local commits up to this point:git branch <local-branch>; Download the latest metadata from the remote:git fetch origin; Now, reset your local master branch directly to the current state of origin/master:git reset --hard origin/master; Note that you have not lost your local commits: they are on your local branch already.; Switch to your local branch:git checkout <local-branch>; Do an initial sync between your local branch and the remote, resolving conflicts if necessary:git rebase origin/master; Apply your stash, again, resolving conflicts if necessary:git stash pop; Pick up at step 2 of the NoSY workflow above.; Reproduced with permission from the following page: https://cdcvs.fnal.gov/redmine/projects/cet-is-public/wiki/GitTipsAndTricks. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html:5016,Guid,Guides,5016,d/suggested-work-flow-distributed-projects-nosy.html,https://root.cern,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"ve cursor-"");; hdemo->AddText(""this will create \""slice\"" (TF does not support yet)."");; hdemo->AddText(""After the slice was created, you can project it on a back box"");; hdemo->AddText("" ---press key 'p' (now implemented only for surf options )."");; hdemo->AddText(""Left double click removes all slices/projections."");; ; hdemo->Draw();; ; }; kBlue@ kBlueDefinition Rtypes.h:66; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; AuthorTimur Pocheptsov ; Definition in file gldemos.C. tutorialsglgldemos.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gldemos_8C.html:4237,Guid,Guide,4237,doc/master/gldemos_8C.html,https://root.cern,https://root.cern/doc/master/gldemos_8C.html,1,['Guid'],['Guide']
Usability,"ve package 'pack' If 'pack' is null or empty all packages are cleared. ;  ; void SetLogger (TPackMgrLog_t logger);  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetPrefix (const char *pfx);  ; void Show (const char *title=0);  Show available packages. ;  ; void ShowEnabled (const char *title=0);  Show enabled packages. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unload (const char *pack);  Method to unload a package. ;  ; Int_t Unpack (const char *pack, TMD5 *sum=0);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:4744,Clear,Clear,4744,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['Clear'],['Clear']
Usability,"ve that file.; 1118 // So we SetObject to a harmless value, so that 'dir'; 1119 // is not seen as part of the list.; 1120 // We will later, remove all the object (see files->Clear(); 1121 cursor->SetObject(&harmless); // this must not be zero otherwise things go wrong.; 1122 // See related comment at the files->Clear(""nodelete"");; 1123 dir->Close(""nodelete"");; 1124 // Put it back; 1125 cursor->SetObject(dir);; 1126 }; 1127 cursor = cursor->Next();; 1128 };; 1129 // Now were done, clear the list but do not delete the objects as; 1130 // they have been moved to the list of closed objects and must be; 1131 // deleted from there in order to avoid a double delete from a; 1132 // use objects (on the interpreter stack).; 1133 files->Clear(""nodelete"");; 1134 }; 1135 ; 1136 static void R__ListSlowDeleteContent(TList *files); 1137 {; 1138 // Routine to delete the content of list of files using the 'slow' techniques; 1139 ; 1140 static TObject harmless;; 1141 TObjLink *cursor = files->FirstLink();; 1142 while (cursor) {; 1143 TDirectory *dir = dynamic_cast<TDirectory*>( cursor->GetObject() );; 1144 if (dir) {; 1145 // In order for the iterator to stay valid, we must; 1146 // prevent the removal of the object (dir) from the list; 1147 // (which is done in TFile::Close). We can also can not; 1148 // just move to the next iterator since the Close might; 1149 // also (indirectly) remove that file.; 1150 // So we SetObject to a harmless value, so that 'dir'; 1151 // is not seen as part of the list.; 1152 // We will later, remove all the object (see files->Clear(); 1153 cursor->SetObject(&harmless); // this must not be zero otherwise things go wrong.; 1154 // See related comment at the files->Clear(""nodelete"");; 1155 dir->GetList()->Delete(""slow"");; 1156 // Put it back; 1157 cursor->SetObject(dir);; 1158 }; 1159 cursor = cursor->Next();; 1160 };; 1161 }; 1162}; 1163 ; 1164////////////////////////////////////////////////////////////////////////////////; 1165/// Close any files and so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:44277,Clear,Clear,44277,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['Clear'],['Clear']
Usability,"ve valid frustum cache - call Apply() after last modification, before using. ;  ; const TGLPlane & FrustumPlane (EFrustumPlane plane) const;  ; const TGLMatrix & GetCamBase () const;  ; const TGLMatrix & GetCamTrans () const;  ; Double_t * GetCenterVec ();  ; Bool_t GetExternalCenter ();  ; Double_t GetFarClip () const;  ; Double_t * GetFixDefCenterVec ();  ; Double_t GetNearClip () const;  ; Double_t GetTheta () const;  Get angle between camera up axis. ;  ; Float_t GetVAxisMinAngle ();  ; void IncTimeStamp ();  ; TClass * IsA () const override;  ; Bool_t IsCacheDirty () const;  ; virtual Bool_t IsOrthographic () const;  ; virtual Bool_t IsPerspective () const;  ; Bool_t OfInterest (const TGLBoundingBox &box, Bool_t ignoreSize) const;  Calculate if the an object defined by world frame bounding box is 'of interest' to the camera. ;  ; TGLMatrix & RefCamBase ();  ; TGLMatrix & RefCamTrans ();  ; TGLMatrix & RefLastNoPickProjM () const;  ; const TGLMatrix & RefModelViewMatrix () const;  ; TGLRect & RefViewport ();  ; const TGLRect & RefViewport () const;  ; virtual void Reset ()=0;  ; void ResetInterest ();  Clear out the existing interest box. ;  ; virtual Bool_t Rotate (Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2);  Rotate the camera round view volume center established in Setup(). ;  ; virtual Bool_t RotateArcBall (Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2);  Rotate the camera round view volume center established in Setup(). ;  ; virtual Bool_t RotateArcBallRad (Double_t hRotate, Double_t vRotate);  Rotate camera around center. ;  ; virtual Bool_t RotateRad (Double_t hRotate, Double_t vRotate);  Rotate camera around center. ;  ; void SetCenterVec (Double_t x, Double_t y, Double_t z);  Set camera center vector. ;  ; void SetCenterVecWarp (Double_t x, Double_t y, Double_t z);  Set camera center vector and do not keep the same combined camera transformation matrix. ;  ; void SetExternalCenter (Bool_t x);  Set camera center diffrent than scene center",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLCamera.html:4930,Clear,Clear,4930,doc/master/classTGLCamera.html,https://root.cern,https://root.cern/doc/master/classTGLCamera.html,1,['Clear'],['Clear']
Usability,"ve;; 4525 Hparam = hparsave;; 4526 }; 4527 gCurrentHist = oldhist;; 4528 fXbuf.clear();; 4529 fYbuf.clear();; 4530 return;; 4531 }; 4532 TView *view = gPad->GetView();; 4533 if (view) {; 4534 if (!Hoption.Lego && !Hoption.Surf && !Hoption.Tri) {; 4535 delete view;; 4536 gPad->SetView(nullptr);; 4537 }; 4538 }; 4539 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) {; 4540 // In case of 1D histogram, Z axis becomes Y axis.; 4541 Int_t logysav=0, logzsav=0;; 4542 if (fH->GetDimension() == 1) {; 4543 logysav = Hoption.Logy;; 4544 logzsav = Hoption.Logz;; 4545 Hoption.Logz = 0;; 4546 if (Hoption.Logy) {; 4547 Hoption.Logz = 1;; 4548 Hoption.Logy = 0;; 4549 }; 4550 }; 4551 PaintTable(option);; 4552 if (Hoption.Func) {; 4553 Hoption_t hoptsave = Hoption;; 4554 Hparam_t hparsave = Hparam;; 4555 PaintFunction(option);; 4556 SetHistogram(hsave);; 4557 Hoption = hoptsave;; 4558 Hparam = hparsave;; 4559 }; 4560 fH->SetMinimum(minsav);; 4561 gCurrentHist = oldhist;; 4562 fXbuf.clear();; 4563 fYbuf.clear();; 4564 if (fH->GetDimension() == 1) {; 4565 Hoption.Logy = logysav;; 4566 Hoption.Logz = logzsav;; 4567 }; 4568 return;; 4569 }; 4570 ; 4571 if (Hoption.Bar >= 20) {; 4572 PaintBarH(option);; 4573 fXbuf.clear();; 4574 fYbuf.clear();; 4575 return;; 4576 }; 4577 ; 4578 gPad->RangeAxisChanged(); //emit RangeAxisChanged() signal to sync axes; 4579 // fill Hparam structure with histo parameters; 4580 if (!PaintInit()) {; 4581 fXbuf.clear();; 4582 fYbuf.clear();; 4583 return;; 4584 }; 4585 ; 4586 // Picture surround (if new page) and page number (if requested).; 4587 // Histogram surround (if not option ""Same"").; 4588 PaintFrame();; 4589 ; 4590 // Paint histogram axis only; 4591 Bool_t gridx = gPad->GetGridx();; 4592 Bool_t gridy = gPad->GetGridy();; 4593 if (Hoption.Axis > 0) {; 4594 if (Hoption.Axis > 1) PaintAxis(kTRUE); //axis with grid; 4595 else {; 4596 if (gridx) gPad->SetGridx(0);; 4597 if (gridy) gPad->SetGridy(0);; 4598 PaintAxis(kFALSE);; 4599 if (gridx) gPad->Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:173159,clear,clear,173159,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"veBegin (TTree *);  ; virtual void SlaveTerminate ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:5671,Clear,Clear,5671,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,2,['Clear'],['Clear']
Usability,"veCompositeFrameInMainFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTEveCompositeFrame::AcquireEveWindow(TEveWindow* ew); voidTEveCompositeFrame::ActionPressed(); virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidDestroy(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCompositeFrameInMainFrame.html:1553,Clear,Clear,1553,root/html528/TEveCompositeFrameInMainFrame.html,https://root.cern,https://root.cern/root/html528/TEveCompositeFrameInMainFrame.html,6,['Clear'],['Clear']
Usability,"veElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); Bool_tAssertCellIdCache() const; TEveRGBAPalette*AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tCellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidCellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCaloViz.html:2540,Clear,Clear,2540,root/html528/TEveCaloViz.html,https://root.cern,https://root.cern/root/html528/TEveCaloViz.html,6,['Clear'],['Clear']
Usability,"veElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveWindowFrame.html:17173,Undo,UndockWindow,17173,root/html534/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html534/TEveWindowFrame.html,4,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"veElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element.; static Pixel_tTEveWindow::fgCurrentBackgroundColor; static Bool_tfgInitInternal; static UInt_tTEveWindow::fgMainFrameDefHeight; static UInt_tTEveWindow::fgMainFrameDefWidth; static Pixel_tTEveWindow::fgMiniBarBackgroundColor; static Bool_tfgRecreateGlOnDockOps. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveViewer(const char* n = ""TEveViewer"", const char* t = """"); Constructor.; The base-class TEveWindowFrame is constructed without a frame so; a default composite-frame is instantiated and stored in fGUIFrame.; Cleanup is set to no-cleanup as viewers need to be zapped with some; more care. ~TEveViewer(); Destructor. void InitInternal(); Initialize static data-members according to running conditions. void PreUndock(); Virtual function called before a window is undocked.; On mac we have to force recreation of gl-context. void PostDock(); Virtual function called after a window is docked.; On mac we have to force recreation of gl-context. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return TEveViewer icon. void SetGLViewer(TGLViewer* viewer, TGFrame* frame); Set TGLViewer that is represented by this object.; The old gl-viewer is deleted. TGLSAViewer* SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE); Spawn new GLViewer and adopt it. TGLEmbeddedViewer* SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); Spawn new GLViewer and adopt it. void Redraw(Bool_t resetCameras = kFALSE); Redraw viewer immediately. void SwitchStereo(); Switch stereo mode.; This only works TGLSAViewers and, of course, with stereo support; provided by the OpenGL driver. void AddScene(TEveScene* scene); Add 'scene' to the list of scenes. void RemoveElementLocal(TEveElement* el); Remove element 'el' from the list of child",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveViewer.html:22748,undo,undocked,22748,root/html528/TEveViewer.html,https://root.cern,https://root.cern/root/html528/TEveViewer.html,4,['undo'],['undocked']
Usability,"veG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:70441,Simpl,Simplex,70441,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['Simpl'],['Simplex']
Usability,"veG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:71691,Simpl,Simplex,71691,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,3,['Simpl'],['Simplex']
Usability,"veProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tCanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatching",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTriangleSet.html:2302,Clear,Clear,2302,root/html528/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html528/TEveTriangleSet.html,1,['Clear'],['Clear']
Usability,"veRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:7199,Simpl,SimpleInterval,7199,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"veWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:2625,undo,undocked,2625,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,2,['undo'],['undocked']
Usability,"vector (normalized) in MARS.Definition TGeoManager.cxx:2856; TGeoManager::ThreadsMapIt_tThreadsMap_t::const_iterator ThreadsMapIt_tDefinition TGeoManager.h:115; TGeoManager::fMatrixTransformBool_t fMatrixTransformflag that the list of physical nodes has to be drawnDefinition TGeoManager.h:87; TGeoManager::SetVisibilityvoid SetVisibility(TObject *obj, Bool_t vis)Set visibility for a volume.Definition TGeoManager.cxx:1060; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::fMatrixReflectionBool_t fMatrixReflectionflag for using GL matrixDefinition TGeoManager.h:88; TGeoManager::SetAlignableEntryTGeoPNEntry * SetAlignableEntry(const char *unique_name, const char *path, Int_t uid=-1)Creates an alignable object with unique name corresponding to a path and adds it to the list of align...Definition TGeoManager.cxx:3342; TGeoManager::ClearShapevoid ClearShape(const TGeoShape *shape)Remove a shape from the list of shapes.Definition TGeoManager.cxx:1617; TGeoManager::ModifiedPadvoid ModifiedPad() constSend ""Modified"" signal to painter.Definition TGeoManager.cxx:3151; TGeoManager::BombTranslationvoid BombTranslation(const Double_t *tr, Double_t *bombtr)Get the new 'bombed' translation vector according current exploded view mode.Definition TGeoManager.cxx:1078; TGeoManager::fCurrentNavigatorTGeoNavigator * fCurrentNavigatorLock existing navigators.Definition TGeoManager.h:123; TGeoManager::LockDefaultUnitsstatic Bool_t LockDefaultUnits(Bool_t new_value)Definition TGeoManager.cxx:4307; TGeoManager::fMaxVisNodesInt_t fMaxVisNodesDefinition TGeoManager.h:75; TGeoManager::GetMediumTGeoMedium * GetMedium(const char *medium) constSearch for a named tracking medium. All trailing blanks stripped.Definition TGeoManager.cxx:3022; TGeoManager::InsertPNEIdBool_t InsertPNEId(Int_t uid, Int_t ientry)Insert a PN entry in the sorted array of indexes.Definition TGeoMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:202466,Clear,ClearShapevoid,202466,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,['Clear'],"['ClearShape', 'ClearShapevoid']"
Usability,"vector< LossFunctionEventInfo > &evs)=0;  ; virtual Int_t Id ()=0;  ; virtual TString Name ()=0;  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LossFunctionBDT(). TMVA::LossFunctionBDT::LossFunctionBDT ; (; ). inline . Definition at line 129 of file LossFunction.h. ◆ ~LossFunctionBDT(). virtual TMVA::LossFunctionBDT::~LossFunctionBDT ; (; ). inlinevirtual . Definition at line 130 of file LossFunction.h. Member Function Documentation. ◆ Fit(). virtual Double_t TMVA::LossFunctionBDT::Fit ; (; std::vector< LossFunctionEventInfo > & ; evs). pure virtual . Implemented in TMVA::HuberLossFunctionBDT, TMVA::LeastSquaresLossFunctionBDT, and TMVA::AbsoluteDeviationLossFunctionBDT. ◆ Init(). virtual void TMVA::LossFunctionBDT::Init ; (; std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap, . std::vector< double > & ; boostWeights . ). pure virtual . Implemented in TMVA::HuberLossFunctionBDT, TMVA::LeastSquaresLossFunctionBDT, and TMVA::AbsoluteDeviationLossFunctionBDT. ◆ SetTargets(). virtual void TMVA::LossFunctionBDT::SetTargets ; (; std::vector< const TMVA::Event * > & ; evs, . std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap . ). pure virtual . Implemented in TMVA::HuberLossFunctionBDT, TMVA::LeastSquaresLossFunctionBDT, and TMVA::AbsoluteDeviationLossFunctionBDT. ◆ Target(). virtual Double_t TMVA::LossFunctionBDT::Target ; (; LossFunctionEventInfo & ; e). pure virtual . Implemented in TMVA::HuberLossFunctionBDT, TMVA::LeastSquaresLossFunctionBDT, and TMVA::AbsoluteDeviationLossFunctionBDT. Libraries for TMVA::LossFunctionBDT:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/LossFunction.h. TMVALossFunctionBDT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LossFunctionBDT.html:2992,Guid,Guide,2992,doc/master/classTMVA_1_1LossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunctionBDT.html,1,['Guid'],['Guide']
Usability,"vector< RooNormSetCache > _nsetCache;  ! Normalization/Integration set manager ;  ; std::vector< RooAbsCacheElement * > _object;  ! Payload ;  ; Int_t _size;  ! Actual use ;  ; bool _wired;  ! In wired mode, there is a single payload which is returned always ;  ;  Protected Attributes inherited from RooAbsCache; RooAbsArg * _owner;  Pointer to owning RooAbsArg. ;  . Static Protected Attributes; static bool _clearObsList;  Clear obslist on sterilize? ;  . #include <RooObjCacheManager.h>. Inheritance diagram for RooObjCacheManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooObjCacheManager() [1/2]. RooObjCacheManager::RooObjCacheManager ; (; RooAbsArg * ; owner = nullptr, . Int_t ; maxSize = 2, . bool ; clearCacheOnServerRedirect = true, . bool ; allowOptimize = false . ). Constructor of object cache manager for given owner. ; If clearCacheOnServerRedirect is true all cache elements will be cleared when a server redirect is intercepted by the cache manager. This is the default strategy and should only be overridden when you really understand what you're doing as properly implementing server redirect in cache elements can get very complicated, especially if there are (cyclical) reference back to the owning object ; Definition at line 47 of file RooObjCacheManager.cxx. ◆ RooObjCacheManager() [2/2]. RooObjCacheManager::RooObjCacheManager ; (; const RooObjCacheManager & ; other, . RooAbsArg * ; owner = nullptr . ). Copy constructor. ; Definition at line 59 of file RooObjCacheManager.cxx. ◆ ~RooObjCacheManager(). RooObjCacheManager::~RooObjCacheManager ; (; ). override . Destructor. ; Definition at line 71 of file RooObjCacheManager.cxx. Member Function Documentation. ◆ Class(). static TClass * RooObjCacheManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooObjCacheManager::Class_Name ; (; ). static . ReturnsName of this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:7130,clear,clearCacheOnServerRedirect,7130,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,2,['clear'],"['clearCacheOnServerRedirect', 'cleared']"
Usability,"vector< const Browsable::RItem * > fLastSortedItems;  ! sorted child items, used in requests ;  ; std::string fLastSortMethod;  ! last sort method ;  ; bool fLastSortReverse {false};  ! last request reverse order ;  ; std::shared_ptr< Browsable::RElement > fTopElement;  ! top element ;  ; Browsable::RElementPath_t fWorkingPath;  ! path showed in Breadcrumb ;  . Friends; class RBrowserDataCleanup;  . #include <ROOT/RBrowserData.hxx>; Constructor & Destructor Documentation. ◆ RBrowserData() [1/2]. RBrowserData::RBrowserData ; (; ). Default constructor. ; Definition at line 68 of file RBrowserData.cxx. ◆ RBrowserData() [2/2]. ROOT::RBrowserData::RBrowserData ; (; std::shared_ptr< Browsable::RElement > ; elem). inline . Definition at line 63 of file RBrowserData.hxx. ◆ ~RBrowserData(). RBrowserData::~RBrowserData ; (; ). virtual . Destructor. ; Definition at line 78 of file RBrowserData.cxx. Member Function Documentation. ◆ ClearCache(). void RBrowserData::ClearCache ; (; ). Clear internal objects cache. ; Definition at line 370 of file RBrowserData.cxx. ◆ CreateDefaultElements(). void RBrowserData::CreateDefaultElements ; (; ). Create default elements shown in the RBrowser. ; Definition at line 108 of file RBrowserData.cxx. ◆ DecomposePath(). Browsable::RElementPath_t RBrowserData::DecomposePath ; (; const std::string & ; path, . bool ; relative_to_work_element . ). Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ; Definition at line 155 of file RBrowserData.cxx. ◆ GetElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElement ; (; const std::string & ; str). Returns element with path, specified as string. ; Definition at line 290 of file RBrowserData.cxx. ◆ GetElementFromTop(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElementFromTop ; (; const Browsable::RElementPath_t & ; path). Returns element with path, specified as Browsable::RElemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:3994,Clear,Clear,3994,doc/v632/classROOT_1_1RBrowserData.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html,2,['Clear'],['Clear']
Usability,"vector<size_t> TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >::fInputShape. private . Defines the batch depth, no. of channels and spatial dimensions of an input tensor. ; Definition at line 61 of file TensorDataLoader.h. ◆ fNOutputFeatures. template<typename AData , typename AReal > . size_t TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >::fNOutputFeatures. private . The number of outputs from the classifier/regressor. ; Definition at line 58 of file TensorDataLoader.h. ◆ fNSamples. template<typename AData , typename AReal > . size_t TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >::fNSamples. private . The total number of samples in the dataset. ; Definition at line 53 of file TensorDataLoader.h. ◆ fSampleIndices. template<typename AData , typename AReal > . std::vector<size_t> TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >::fSampleIndices. private . Ordering of the samples in the epoch. ; Definition at line 67 of file TensorDataLoader.h. ◆ inputTensor. template<typename AData , typename AReal > . std::vector<TMatrixT<AReal> > TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >::inputTensor. private . The 3D tensor used to keep the input data. ; Definition at line 63 of file TensorDataLoader.h. ◆ outputMatrix. template<typename AData , typename AReal > . TMatrixT<AReal> TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >::outputMatrix. private . The matrix used to keep the output. ; Definition at line 64 of file TensorDataLoader.h. ◆ weightMatrix. template<typename AData , typename AReal > . TMatrixT<AReal> TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >::weightMatrix. private . The matrix used to keep the batch weights. ; Definition at line 65 of file TensorDataLoader.h. tmva/tmva/inc/TMVA/DNN/Architectures/Reference/TensorDataLoader.h. TMVADNNTTensorDataLoader< AData, TReference< AReal > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html:9962,Guid,Guide,9962,doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,1,['Guid'],['Guide']
Usability,"vectors fY and fVyy, then performs the background subtraction; Data members modified:; fYData,fY,fVyyData,fVyy,fVyyinvData,fVyyinv; and those modified by TUnfold::SetInput(); and those modified by DoBackgroundSubtraction(); LM: WARNING: Coverity detects here a false USE_AFTER_FREE for fY and fVyy; the objects are deleted but then re-created immediatly afterwards in; TUnfold::SetInput. void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); Store background source; bgr: background distribution with uncorrelated errors; name: name of this background source; scale: scale factor applied to the background; scaleError: error on scale factor (correlated error). Data members modified:; fBgrIn,fBgrErrUncorrIn,fBgrErrCorrIn; and those modified by DoBackgroundSubtraction(); save background source. void InitTUnfoldSys(void); initialize pointers and TMaps. ~TUnfoldSys(void); delete all data members. void ClearResults(void); clear all data members which depend on the unfolding results. void PrepareSysError(void); calculations required for syst.error; data members modified; fEmatUncorrX, fEmatUncorrAx, fDeltaCorrX, fDeltaCorrAx. void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); get output error contribution from statistical fluctuations in A; ematrix: output error matrix histogram; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors; data members modified:; fVYAx, fESparse, fEAtV, fErrorAStat. TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2); propagate uncorrelated systematic errors to a covariance matrix; m0,m1 : coefficients (matrices) for propagating the errors. the error matrix is calculated by standard error propagation, where the; derivative of the result vector X wrt the matrix A is given by. dX_k / dA_ij = M0_kj * Z0_i - M1_ki * Z1_j. where:; the matrices M0 and M1 are arguments to this f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:20706,Clear,ClearResults,20706,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,6,"['Clear', 'clear']","['ClearResults', 'clear']"
Usability,"ved class with the appropriated type; of the parameters. void BuildSorter(TString& colName, Int_t firstRow, Int_t numberRows). BuildSorter backs TTableSorter ctor. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression inside of [], only a single integer number allowed !; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the sie of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. void SetSimpleArray(Int_t arraySize, Int_t firstRow, Int_t numberRows); Set some common parameteres for the ""simple"" arrays. ~TTableSorter(); to be documented. Int_t BSearch(valuetype value). Int_t SelectSearch(valuetype value). Int_t BSearch(const void* value) const; to be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:16680,simpl,simpleArray,16680,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,6,['simpl'],['simpleArray']
Usability,"vel"" will be ignored.; calling the function with a negative argument (e.g., ""NoMsg( -1 )"") resets gErrorIgnoreLevel to its previous value. ; Definition at line 1108 of file TTabCom.cxx. ◆ operator=(). TTabCom & TTabCom::operator= ; (; const TTabCom & ; ). privatedelete . ◆ ParseReverse(). int TTabCom::ParseReverse ; (; const char * ; var_str, . int ; start . ). private . Returns the place in the string where to put the \0, starting the search from ""start"". ; Definition at line 2565 of file TTabCom.cxx. ◆ PathIsSpecifiedInFileName(). Bool_t TTabCom::PathIsSpecifiedInFileName ; (; const TString & ; fileName). static . [static utility function]///////////////////////////// ; true if ""fileName""; is an absolute path (""/tmp/a""); is a relative path (""../whatever"", ""./test""); starts with user name (""~/mail""); starts with an environment variable (""$ROOTSYS/bin"") . Definition at line 1088 of file TTabCom.cxx. ◆ RehashAll(). void TTabCom::RehashAll ; (; ). clears and then rebuilds all lists except for user names and system include files. ; Definition at line 415 of file TTabCom.cxx. ◆ RehashClasses(). void TTabCom::RehashClasses ; (; ). Do the class rehash. ; Definition at line 335 of file TTabCom.cxx. ◆ RehashCppDirectives(). void TTabCom::RehashCppDirectives ; (; ). Cpp rehashing. ; Definition at line 344 of file TTabCom.cxx. ◆ RehashEnvVars(). void TTabCom::RehashEnvVars ; (; ). Environemnt variables rehashing. ; Definition at line 353 of file TTabCom.cxx. ◆ RehashFiles(). void TTabCom::RehashFiles ; (; ). Close files. ; Definition at line 362 of file TTabCom.cxx. ◆ RehashGlobalFunctions(). void TTabCom::RehashGlobalFunctions ; (; ). Reload global functions. ; Definition at line 370 of file TTabCom.cxx. ◆ RehashGlobals(). void TTabCom::RehashGlobals ; (; ). Reload globals. ; Definition at line 378 of file TTabCom.cxx. ◆ RehashPragmas(). void TTabCom::RehashPragmas ; (; ). Reload pragmas. ; Definition at line 387 of file TTabCom.cxx. ◆ RehashSysIncFiles(). void TTabCom::Rehas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:17663,clear,clears,17663,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['clear'],['clears']
Usability,"ven initialization method. ;  ; bool IsTraining () const;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Private Attributes; Architecture_t::ActivationDescriptor_t fActivationDesc;  ; Tensor_t fDerivatives;  activation function gradient ;  ; Scalar_t fDropoutProbability;  Probability that an input is active. ;  ; EActivationFunction fF;  Activation function of the layer. ;  ; Tensor_t fInputActivation;  output of GEMM and input to a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html:6900,learn,learningRate,6900,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"ven stable for problems involving for instance 500 variables, 100 inequality conditions and 50 equality conditions .; Enough said about quadratic programming, let's return to our example . Suppose, after a long day of doing physics, you have a look at your investments and realize that an early retirement is not possible, given the returns of your stocks . So what now ? ROOT to the rescue ...; In 1990 Harry Markowitz was awarded the Nobel prize for economics: "" his work provided new tools; for weighing the risks and rewards of different investments and for valuing corporate stocks and bonds"" . In plain English, he developed the tools to balance greed and fear, we want the maximum return with the minimum amount of risk. Our stock portfolio should be at the ""Efficient Frontier"". To quantify better the risk we are willing to take, we define a utility function \( U(x) \). It describes as a function of our total assets \( x \), our ""satisfaction"" . A common choice is \( 1-exp(-k*x) \) (the reason for the exponent will be clear later) . The parameter \( k \) is the risk-aversion factor . For small values of \( k \) the satisfaction is small for small values of \( x \); by increasing \( x \) the satisfaction can still be increased significantly . For large values of \( k \), \( U(x) \) increases rapidly to 1, there is no increase in satisfaction for additional dollars earned .; In summary :; small \( k \) ==> risk-loving investor; large \( k \) ==> risk-averse investor. Suppose we have for nrStocks the historical daily returns \( r = closing_price(n) - closing_price(n-1) \). Define a vector \( x \) of length of \( nrStocks \), which contains the fraction of our money invested in each stock . We can calculate the average daily return \( z \) of our portfolio and its variance using the portfolio covariance Covar :; \( z = r^T x \) and \( var = x^T Covar x \); Assuming that the daily returns have a Normal distribution, \( N(x) \), so will \( z \) with mean \( r^T x \) and varia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/portfolio_8C.html:2590,clear,clear,2590,doc/master/portfolio_8C.html,https://root.cern,https://root.cern/doc/master/portfolio_8C.html,1,['clear'],['clear']
Usability,"ventListvirtual void SetEventList(TEventList *list)This function transfroms the given TEventList into a TEntryList The new TEntryList is owned by the TT...Definition TTree.cxx:9069; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::MakeSelectorvirtual Int_t MakeSelector(const char *selector=nullptr, Option_t *option="""")Generate skeleton selector class for this tree.Definition TTree.cxx:6822; TTree::GetReadEntryvirtual Long64_t GetReadEntry() constDefinition TTree.h:549; TTree::GetListOfBranchesvirtual TObjArray * GetListOfBranches()Definition TTree.h:528; TTree::GetHistogramTH1 * GetHistogram()Definition TTree.h:519; TTree::Refreshvirtual void Refresh()Refresh contents of this tree and its branches from the current status on disk.Definition TTree.cxx:7916; TWin32SplashThreadDefinition TWin32SplashThread.h:18; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; ROOT::TMetaUtils::BeginsWithbool BeginsWith(const std::string &theString, const std::string &theSubstring)Definition TClingUtils.cxx:5135; TMVA::DNN::Cuda::max__device__ AFloat max(AFloat x, AFloat y)Definition Kernels.cuh:207; TMVA::TMVAGlob::GetListOfMethodsUInt_t GetListOfMethods(TList &methods, TDirectory *dir=nullptr)Definition tmvaglob.cxx:590; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; TMVA_SOFIE_GNN.outoutDefinition TMVA_SOFIE_GNN.py:203; TMVA_SOFIE_GNN.recrecDefinition TMVA_SOFIE_GNN.py:13; TMVA_SOFIE_GNN.startstartDefinition TMVA_SOFIE_GNN.py:200; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Event_tEvent structure.Definition GuiTypes.h:174; Event_t::fTypeEGEventType fTypeof event (see EGEventType)Definition GuiTypes.h:175. treetreeviewersrcTTreeViewer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:154894,Guid,Guide,154894,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['Guid'],['Guide']
Usability,"vention to number sub-pads.; Returns the new current pad, or 0 in case of failure.; For example: c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad points to the current pad. One can use gPad to set attributes of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with: TPad subpad = (TPad)pad->GetPad(subpadnumber); ; Implements TVirtualPad.; Definition at line 693 of file TPad.cxx. ◆ Class(). static TClass * TPad::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPad::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPad::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 419 of file TPad.h. ◆ Clear(). void TPad::Clear ; (; Option_t * ; option = """"). overridevirtual . Delete all pad primitives. ; If the bit kClearAfterCR has been set for this pad, the Clear function will execute only after having pressed a CarriageReturn Set the bit with mypad->SetBit(TPad::kClearAfterCR) ; Implements TVirtualPad.; Definition at line 722 of file TPad.cxx. ◆ Clip() [1/2]. Int_t TPad::Clip ; (; Double_t * ; x, . Double_t * ; y, . Double_t ; xclipl, . Double_t ; yclipb, . Double_t ; xclipr, . Double_t ; yclipt . ). overridevirtual . Clipping routine: Cohen Sutherland algorithm. ; - If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. Parameters. [in,out]x[],y[]Segment coordinates (2 points) ; [in]xclipl,yclipb,xclipr,ycliptClipping boundary . Implements TVirtualPad.; Definition at line 830 of file TPad.cxx. ◆ Clip() [2/2]. Int_t TPad::Clip ; (; Float_t * ; x, . Float_t * ; y, . Float_t ; xclip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:60882,Clear,Clear,60882,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Clear'],['Clear']
Usability,"ventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Compiling Your Code (also known as ACLiC). You can run your code as compiled code instead of interpreted. This makes it possible to debug your code, and might give slightly faster code.; Wherever you would specify MyCode.C you can simply specify MyCode.C+ (note the trailing ""+"") and ROOT will start your compiler and load your code as dynamic library. Give it a try with "".x AnalyzeTree.C+"". If you see ""command not found"", ROOT cannot find the compiler in your $PATH / %PATH%.; . ‹ Fit Panel; up; Accessing a TTree With a TSelector ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/compiling-your-code-also-known-aclic.html:2888,Guid,Guides,2888,d/compiling-your-code-also-known-aclic.html,https://root.cern,https://root.cern/d/compiling-your-code-also-known-aclic.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"ventions; Class definition conventions. Inline; Declaration Order. Avoid raw C types; Exception handling; Namespaces; Using comments to document the code; Source file layout. Header file layout; Implementation file layout. Preferred Coding Style. Indentation; Placing Braces and Spaces. ClangFormat; Astyle; Where to go from here. Naming conventions; For naming conventions we follow the Taligent rules. They have written a very large body of C++ and their rules seem well thought out. No need to invent something new. The only addition/change we made is to append an _t to typedefs and simple structs, e.g.:; typedef int Int_t ; struct Simple_t { ..... } ; ; Addherence to the rules is mandatory. After a while one really gets used to the fact that all class fields start with an f followed by a capitalized word, fEnergy, or that TStreamerInfo is a class. If the convention is sporadically violated debugging becomes a nightmare. The usage of a standard begin letter or token for the different types also makes it easy to parse and search the code using simple tools.; Class definition conventions; Also here the Taligent guide is quite reasonable. Of course, no class data member should ever be public. Make the data fields always private. Or protected, if you want to grant an inherited class direct access.; Inline; Add trivial get or setters directly in the class definition. This improves reading time since one does not have to look for it somewhere else. Add more complex inlines (longer than one line) at the bottom of the .h file. Creating separate .icc files increases the build time, the complexity of the build system and, more importantly, increases the number of files one possibly has to scan to find a piece of code.; Declaration Order; In the class definition we first declare all private data members, followed by the private static members, the private methods and the private static methods. Then the protected members and methods and finally the public methods (no public data ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:2953,simpl,simple,2953,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['simpl'],['simple']
Usability,"vents from CMS OpenData containing muon candidates part of 2012 dataset (DOI: 10.7483/OPENDATA.CMS.YLIC.86ZZ and DOI: 10.7483/OPENDATA.CMS.M5AD.Y3V3). The macro matches muon pairs and produces an histogram of the dimuon mass spectrum showing resonances up to the Z mass. Note that the bump at 30 GeV is not a resonance but a trigger effect.; More details about the dataset can be found on the CERN Open Data portal. ; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RDFHelpers.hxx""; #include ""ROOT/RVec.hxx""; #include ""TCanvas.h""; #include ""TH1D.h""; #include ""TLatex.h""; #include ""TStyle.h""; ; using namespace ROOT::VecOps;; ; void df102_NanoAODDimuonAnalysis(); {; // Enable multi-threading; ROOT::EnableImplicitMT();; ; // Create dataframe from NanoAOD files; ROOT::RDataFrame df(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/""; ""Run2012BC_DoubleMuParked_Muons.root"");; ; // Add ProgressBar; ROOT::RDF::Experimental::AddProgressBar(df);; ; // For simplicity, select only events with exactly two muons and require opposite charge; auto df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons"");; auto df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge"");; ; // Compute invariant mass of the dimuon system; auto df_mass = df_os.Define(""Dimuon_mass"", InvariantMass<float>, {""Muon_pt"", ""Muon_eta"", ""Muon_phi"", ""Muon_mass""});; ; // Make histogram of dimuon mass spectrum. Note how we can set title and axis labels in one go; auto h = df_mass.Histo1D({""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300}, ""Dimuon_mass"");; ; // Request cut-flow report; auto report = df.Report();; ; // Produce plot; gStyle->SetOptStat(0); gStyle->SetTextFont(42);; auto c = new TCanvas(""c"", """", 800, 700);; c->SetLogx(); c->SetLogy();; ; h->GetXaxis()->SetTitleSize(0.04);; h->GetYaxis()->SetTitleSize(0.04);; h->DrawClone();; ; TLatex label; label.SetNDC(true);; label.DrawLatex(0.175, 0.740, ""#eta"");; label.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html:1443,simpl,simplicity,1443,doc/master/df102__NanoAODDimuonAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html,1,['simpl'],['simplicity']
Usability,"vents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12883,simpl,simplify,12883,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['simpl'],['simplify']
Usability,"ver a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. The; MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with f being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In all methods implemented, one needs to compute; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especialy the; derivative of compound functions, one can write:. for a neuton: product of the local derivative with the; weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented.; Stochastic minimization: This; is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; $w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:3546,learn,learning,3546,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['learn'],['learning']
Usability,"ver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TProofServLiteInterruptHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofServLiteInterruptHandler(). TProofServLiteInterruptHandler::TProofServLiteInterruptHandler ; (; TProofServLite * ; s). inline . Definition at line 75 of file TProofServLite.cxx. Member Function Documentation. ◆ Notify(). Bool_t TProofServLiteInterruptHandler::Notify ; (; ). overridevirtual . Handle urgent data. ; Implements TSysEvtHandler.; Definition at line 83 of file TProofServLite.cxx. Member Data Documentation. ◆ fServ. TProofServLite* TProofServLiteInterruptHandler::fServ. private . Definition at line 73 of file TProofServLite.cxx. proof/proof/src/TProofServLite.cxx. TProofServLiteInterruptHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteInterruptHandler.html:16666,Guid,Guide,16666,doc/master/classTProofServLiteInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteInterruptHandler.html,1,['Guid'],['Guide']
Usability,"ver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TBlinkTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBlinkTimer(). TBlinkTimer::TBlinkTimer ; (; TGTextEntry * ; t, . Long_t ; ms . ). inline . Definition at line 226 of file TGTextEntry.cxx. Member Function Documentation. ◆ Notify(). Bool_t TBlinkTimer::Notify ; (; ). overridevirtual . Notify when timer times out and reset the timer. ; Implements TSysEvtHandler.; Definition at line 233 of file TGTextEntry.cxx. Member Data Documentation. ◆ fTextEntry. TGTextEntry* TBlinkTimer::fTextEntry. private . Definition at line 224 of file TGTextEntry.cxx. gui/gui/src/TGTextEntry.cxx. TBlinkTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBlinkTimer.html:17846,Guid,Guide,17846,doc/master/classTBlinkTimer.html,https://root.cern,https://root.cern/doc/master/classTBlinkTimer.html,1,['Guid'],['Guide']
Usability,"ver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; TGCompositeFrame * f10;  Contains the Bar Option Title. ;  ; TGCompositeFrame * f11;  Contains the Bar Width/Offset NumberEntries. ;  ; TGCompositeFrame * f12;  Contains fPercentCombo, fMakeHBar. ;  ; TGCompositeFrame * f15;  Contains outer line CheckBox. ;  ; TGCompositeFrame * f3;  Contains Histogram Type. ;  ; TGCompositeFrame * f6;  Contains the Add-ComboBox (Style) ;  ; TGCompositeFrame * f7;  Contains the Marker OnOff CheckBox. ;  ; TGCompositeFrame * f8;  Contains the Bar Chart CheckBox. ;  ; TGCompositeFrame * f9;  Contains the Bar Option CheckBox. ;  ; TGCheckButton * fAdd;  Activate more Options. ;  ; TGCheckButton * fAddB;  Draw a Bar Chart. ;  ; TGCheckButton * fAddBar;  Bar Option. ;  ; TGComboBox * fAddCombo;  Add Lines, Bars, Fill. ;  ; TGCheckButton * fAddMarker;  Draw a Marker on top of each bin. ;  ; TGCheckButton * fAddSimple;  Draw a simple histogram (==HIST draw option) ;  ; TGTextButton * fApply;  Apply-Button to accept the rebinned histogram. ;  ; TGNumberEntry * fBarOffset;  Change the Bar Offset. ;  ; TGNumberEntry * fBarWidth;  Change the Bar Width. ;  ; TGCompositeFrame * fBin;  Contains the Binning Widgets. ;  ; TGCompositeFrame * fBinCont;  Contains the Rebin Widgets for case 1. ;  ; TGCompositeFrame * fBinCont1;  Contains the Rebin Widgets for case 2. ;  ; TGNumberEntryField * fBinNumberEntry;  Label which shows the rebinned bin number. ;  ; TGNumberEntryField * fBinNumberEntry1;  Label which shows the rebinned bin number for ntuple histogram. ;  ; TGHSlider * fBinOffsetSld;  Add an offset to the origin of the histogram. ;  ; TGHSlider * fBinSlider;  Slider to set rebinning integer value. ;  ; TGHSlider * fBinSlider1;  Slider to set rebinning integer value for ntuple histogram. ;  ; TGTextButton * fCancel;  Cancel-Button to reprobate the rebinned histogram. ;  ; TGComboBox * fCoordsCombo;  Coordinate System combo box. ;  ; TGCheckButton * f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:33201,simpl,simple,33201,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['simpl'],['simple']
Usability,"verFromNaNStrength ; (; double ; strength). Try to recover from invalid function values. ; When invalid function values are encountered, a penalty term is returned to the minimiser to make it back off. This sets the strength of this penalty. NoteA strength of zero is equivalent to a constant penalty (= the gradient vanishes, ROOT < 6.24). Positive values lead to a gradient pointing away from the undefined regions. Use ~10 to force the minimiser away from invalid function values. ; Definition at line 802 of file RooMinimizer.cxx. ◆ setStrategy(). void RooMinimizer::setStrategy ; (; int ; istrat). Change MINUIT strategy to istrat. ; Accepted codes are 0,1,2 and represent MINUIT strategies for dealing most efficiently with fast FCNs (0), expensive FCNs (2) and 'intermediate' FCNs (1) ; Definition at line 189 of file RooMinimizer.cxx. ◆ setVerbose(). void RooMinimizer::setVerbose ; (; bool ; flag = true). inline . Definition at line 153 of file RooMinimizer.h. ◆ simplex(). int RooMinimizer::simplex ; (; ). Execute SIMPLEX. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 453 of file RooMinimizer.cxx. ◆ Streamer(). void RooMinimizer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 247 of file RooMinimizer.h. ◆ update(). bool RooMinimizer::update ; (; bool ; isValid). private . Definition at line 1100 of file RooMinimizer.cxx. ◆ updateErrors(). void RooMinimizer::updateErrors ; (; ). private . Definition at line 1129 of file RooMinimizer.cxx. ◆ updateFitConfig(). void RooMinimizer::updateFitConfig ; (; ). private . Definition at line 1013 of file RooMinimizer.cxx. ◆ updateMinimizerOptions(). bool RooMinimizer::updateMinimizerOptions ; (; boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:29581,simpl,simplex,29581,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['simpl'],['simplex']
Usability,"ver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TASSigPipeHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TASSigPipeHandler(). TASSigPipeHandler::TASSigPipeHandler ; (; TApplicationServer * ; s). inline . Definition at line 98 of file TApplicationServer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TASSigPipeHandler::Notify ; (; ). overridevirtual . Handle this signal. ; Implements TSysEvtHandler.; Definition at line 106 of file TApplicationServer.cxx. Member Data Documentation. ◆ fServ. TApplicationServer* TASSigPipeHandler::fServ. private . Definition at line 96 of file TApplicationServer.cxx. net/net/src/TApplicationServer.cxx. TASSigPipeHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASSigPipeHandler.html:16569,Guid,Guide,16569,doc/master/classTASSigPipeHandler.html,https://root.cern,https://root.cern/doc/master/classTASSigPipeHandler.html,1,['Guid'],['Guide']
Usability,"verride;  ; Bool_t IsClosed () const;  ; Bool_t IsUsingOverlaps () const;  ; void PrintBVH () const;  Prints the BVH. ;  ; Int_t PrintDetectedOverlaps () const;  Print the overlaps which were detected during real tracking. ;  ; void RefreshPhysicalNodes ();  Refresh the node pointers and re-voxelize. ;  ; void ResetOverlaps () const;  Reset overlapflag for all volumes in geometry. ;  ; Double_t Safety (Double_t point[3], Double_t safmax=1.E30);  ; void SetAccelerationMode (AccelerationMode const &mode);  ; void SetUseOverlaps (Bool_t flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:4103,Clear,Clear,4103,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['Clear'],['Clear']
Usability,"verride;  ; Int_t SavePartialResults (Bool_t queryend=kFALSE, Bool_t force=kFALSE) override;  Save the partial results of this query to a dedicated file under the user data directory. ;  ; void SetCurrentQuery (TQueryResult *q) override;  Set current query and save previous value. ;  ; void SetDispatchTimer (Bool_t on=kTRUE) override;  Enable/disable the timer to dispatch pening events while processing. ;  ; void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt) override;  Set draw feedback option. ;  ; void SetExitStatus (EExitStatus st) override;  ; void SetInitTime () override;  ; void SetMaxDrawQueries (Int_t max) override;  ; void SetMerging (Bool_t=kTRUE) override;  ; void SetOutputFilePath (const char *fp) override;  ; void SetProcessing (Bool_t on=kTRUE);  Set processing bit according to 'on'. ;  ; void SetStopTimer (Bool_t on=kTRUE, Bool_t abort=kFALSE, Int_t timeout=0) override;  Enable/disable the timer to stop/abort processing. ;  ; virtual void StopFeedback ();  Stop feedback (may not be used in this class). ;  ; void StopProcess (Bool_t abort, Int_t timeout=-1) override;  Stop the process after this event. ;  ; void StoreFeedback (TObject *slave, TList *out) override;  Store feedback list (may not be used in this class). ;  ; void StoreOutput (TList *out) override;  Store output list (may not be used in this class). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateAutoBin (const char *name, Double_t &xmin, Double_t &xmax, Double_t &ymin, Double_t &ymax, Double_t &zmin, Double_t &zmax) override;  Update automatic binning parameters for given object ""name"". ;  ; void UpdateProgressInfo () override;  Update fProgressStatus. ;  ;  Public Member Functions inherited from TVirtualProofPlayer;  TVirtualProofPlayer ();  ;  ~TVirtualProofPlayer () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:7508,feedback,feedback,7508,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"verride;  Construct an array of nElements container objects at the address given by arena ;  ; void Resize (UInt_t n, Bool_t force_delete) override;  Resize the container. ;  ; UInt_t Sizeof () const override;  Return the sizeof() of the collection object. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; CopyIterator_t GetFunctionCopyIterator (Bool_t read=kTRUE) override;  See typedef void (*CopyIterator_t)(void *&dest, const void *source); Copy the iterator source, into dest. ;  ; CreateIterators_t GetFunctionCreateIterators (Bool_t read=kTRUE) override;  See typedef void (*CreateIterators_t)(void *collection, void *&begin_ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedMapProxy.html:4224,Clear,Clear,4224,doc/master/classTEmulatedMapProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedMapProxy.html,2,['Clear'],['Clear']
Usability,"verride;  dump this file ;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; void Inspect () const override;  inspect this file ;  ; TClass * IsA () const override;  ; virtual void Rename (const char *name);  rename this file ;  ; void SetDrawOption (Option_t *) override;  Set drawing option for object. ;  ; virtual void SetIconName (const char *name);  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetTitle (const char *title) override;  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemDirectory.html:4048,Clear,Clear,4048,doc/master/classTSystemDirectory.html,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html,1,['Clear'],['Clear']
Usability,"verride;  set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval) ;  ; void SetInterpolationOption (InterpolOption_t opt);  set the interpolation option, linear (kLinear ) or spline (kSpline) ;  ; virtual void SetTestSize (double size);  set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double UpperLimit () override;  return the interval upper limit ;  ; double UpperLimitEstimatedError ();  Estimate of lower limit error function evaluates only a rough error on the lower limit. ;  ; void UseCLs (bool on=true);  flag to switch between using CLsb (default) or CLs as confidence level ;  ;  Public Member Functions inherited from RooStats::SimpleInterval;  SimpleInterval (const char *name, const RooRealVar &var, double lower, double upper, double cl);  constructor from name, the Parameter of interest and lower/upper bound values ;  ;  SimpleInterval (const char *name=nullptr);  default constructor ;  ;  SimpleInterval (const SimpleInterval &other, const char *name);  default constructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are correct (i.e. they are the POI of this interval) ;  ; double ConfidenceLevel () const override;  return the confidence interval ;  ; RooArgSet * GetParameters () const override;  return a cloned list with the parameter of interest ;  ; TClass * IsA () const override;  ; bool IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; SimpleInterval & operator= (const SimpleInterval &other);  default constructor ;  ; void SetConfidenceLevel (double) override;  set the confidence level for the interval. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:6823,Simpl,SimpleInterval,6823,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,5,['Simpl'],['SimpleInterval']
Usability,"verridevirtual . Implements TVirtualPerfStats.; Definition at line 142 of file TPerfStats.h. ◆ SetMissed() [2/2]. void TPerfStats::SetMissed ; (; TBranch * ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 141 of file TPerfStats.h. ◆ SetNumEvents(). void TPerfStats::SetNumEvents ; (; Long64_t ; num). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 133 of file TPerfStats.h. ◆ Setup(). void TPerfStats::Setup ; (; TList * ; input). static . Setup the PROOF input list with requested statistics and tracing options. ; Definition at line 727 of file TPerfStats.cxx. ◆ SetUsed() [1/2]. void TPerfStats::SetUsed ; (; size_t ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 144 of file TPerfStats.h. ◆ SetUsed() [2/2]. void TPerfStats::SetUsed ; (; TBranch * ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 143 of file TPerfStats.h. ◆ SimpleEvent(). void TPerfStats::SimpleEvent ; (; EEventType ; type). overridevirtual . Simple event. ; Implements TVirtualPerfStats.; Definition at line 387 of file TPerfStats.cxx. ◆ Start(). void TPerfStats::Start ; (; TList * ; input, . TList * ; output . ). static . Initialize PROOF statistics run. ; Definition at line 744 of file TPerfStats.cxx. ◆ Stop(). void TPerfStats::Stop ; (; ). static . Terminate the PROOF statistics run. ; Definition at line 764 of file TPerfStats.cxx. ◆ Streamer(). void TPerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file TPerfStats.h. ◆ UnzipEvent(). void TPerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). overridevirtual . Record TTree file unzip event. ; start is the TimeSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPerfStats.html:20787,Simpl,SimpleEvent,20787,doc/master/classTPerfStats.html,https://root.cern,https://root.cern/doc/master/classTPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"verridevirtual . Paint a simple box. ; Implements TVirtualPadPainter.; Definition at line 390 of file TPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 411 of file TPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 425 of file TPadPainter.cxx. ◆ DrawLine(). void TPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 360 of file TPadPainter.cxx. ◆ DrawLineNDC(). void TPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in normalized coordinates. ; Implements TVirtualPadPainter.; Definition at line 375 of file TPadPainter.cxx. ◆ DrawPixels(). void TPadPainter::DrawPixels ; (; const unsigned char * ; pixelData, . UInt_t ; width, . UInt_t ; height, . Int_t ; dstX, . Int_t ; dstY, . Bool_t ; enableAlphaBlending . ). overridevirtual . Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ; Implements TVirtualPadPainter.; Definition at line 351 of file TPadPainter.cxx. ◆ DrawPolyLine() [1/2]. void TPadPainter::DrawPolyLine ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint Polyline. ; Implements TVirtualPadPainter.; Definition at line 438 of file TPadPainter.cxx. ◆ DrawPolyLine() [2/2]. void TPadPainter::DrawPolyLine ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint polyline. ; Implements TVirtualPadPainter.; Definition at line 454 of file TPadPainter.cxx. ◆ DrawPolyLineNDC(). void TPadPainter::DrawPolyLineNDC ; (; Int_t ; n, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadPainter.html:9165,simpl,simple,9165,doc/master/classTPadPainter.html,https://root.cern,https://root.cern/doc/master/classTPadPainter.html,1,['simpl'],['simple']
Usability,"verridevirtual . Return the sizeof the collection object. ; Implements TVirtualCollectionProxy.; Definition at line 1014 of file TGenCollectionProxy.cxx. ◆ Streamer() [1/2]. void TGenCollectionProxy::Streamer ; (; TBuffer & ; refBuffer). virtual . Streamer Function. ; Reimplemented in TEmulatedCollectionProxy, TEmulatedMapProxy, and TGenCollectionStreamer.; Definition at line 1427 of file TGenCollectionProxy.cxx. ◆ Streamer() [2/2]. void TGenCollectionProxy::Streamer ; (; TBuffer & ; refBuffer, . void * ; pObject, . int ; siz . ). virtual . Streamer I/O overload. ; Reimplemented in TEmulatedCollectionProxy, TEmulatedMapProxy, and TGenCollectionStreamer.; Definition at line 1439 of file TGenCollectionProxy.cxx. Friends And Related Symbol Documentation. ◆ TCollectionProxyFactory. friend class TCollectionProxyFactory. friend . Definition at line 34 of file TGenCollectionProxy.h. Member Data Documentation. ◆ fClear. Method TGenCollectionProxy::fClear. protected . Method cache for container accessors: clear container. ; Definition at line 301 of file TGenCollectionProxy.h. ◆ fCollect. Collectfunc_t TGenCollectionProxy::fCollect. protected . Method to collect objects from container. ; Definition at line 309 of file TGenCollectionProxy.h. ◆ fConstruct. ArrIterfunc_t TGenCollectionProxy::fConstruct. protected . Container accessors: block construct. ; Definition at line 306 of file TGenCollectionProxy.h. ◆ fConversionReadMemberWise. std::map<std::string, TObjArray*>* TGenCollectionProxy::fConversionReadMemberWise. mutableprotected . Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ; Definition at line 292 of file TGenCollectionProxy.h. ◆ fCreateEnv. Method0 TGenCollectionProxy::fCreateEnv. protected . Method to allocate an Environment holder. ; Definition at line 310 of file TGenCollectionProxy.h. ◆ fDestruct. Sizing_t TGenCollectionProxy::fDestruct. protected . Container accessors: block destruct. ; Definition at line 307 of file TGenC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:27160,clear,clear,27160,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['clear'],['clear']
Usability,"versity of Bonn in Germany. He worked in ATLAS to improve the sensitivity in the search for Higgs --> bb decays. His main focus was on analysis frameworks, machine learning, systematic uncertainties and statistical models.; He joined the ROOT team in 2018 to support and improve RooFit. He further looks into math and statistics, as well as into questions regarding performance and programming model.; ; . Vassil Vassilev ; ; Vassil graduated from the University of Plovdiv ""Paisii Hilendarski"", Bulgaria. He received a MSc in Software Technologies and a PhD in Computer Science with specialization in programming languages and visual programming. He joined the ROOT team in 2010, authoring Cling - the interactive, LLVM-based C++ interpreter. He was one of the core engineers involved in ROOT6.; Vassil is responsible for the implementation and adoption of clang's C++ modules (PCMs) in ROOT. He also helps with interpreter and reflection related activities in the ROOT project. He works on the CMS interests in the ROOT collaboration including development, trouble shooting, and any other activities as may be required.   ; From January, 2017, Vassil is employed by Princeton University and part of the Princeton Intel Parallel Computing Center (IPCC) project, which focuses on code modernization in ROOT.;  ; ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/team.html:11371,Guid,Guides,11371,d/team.html,https://root.cern,https://root.cern/d/team.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"very specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:28226,simpl,simple,28226,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['simpl'],['simple']
Usability,"ves implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:38037,simpl,simple,38037,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['simpl'],['simple']
Usability,"ves implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:43667,simpl,simple,43667,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,4,['simpl'],['simple']
Usability,"ves; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:7441,Clear,ClearAll,7441,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,8,"['Clear', 'clear']","['ClearAll', 'clears']"
Usability,"vevoid SetIpythonInteractive(IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C)Definition NeuralNet.h:1283; TMVA::DNN::Net::computestd::vector< double > compute(const std::vector< double > &input, const Weights &weights) constcompute the net with the given input and the given weightsDefinition NeuralNet.icc:1037; TMVA::DNN::Net::container_typestd::vector< double > container_typeDefinition NeuralNet.h:1065; TMVA::DNN::Net::iterator_typecontainer_type::iterator iterator_typeDefinition NeuralNet.h:1066; TMVA::DNN::Net::preTrainvoid preTrain(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)pre-training for future use; TMVA::DNN::Net::fetchOutputvoid fetchOutput(const LayerData &lastLayerData, OutputContainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::clearvoid clear()Definition NeuralNet.h:1251; TMVA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:66410,clear,clearvoid,66410,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,2,['clear'],"['clear', 'clearvoid']"
Usability,"vex polygon.; Both the X3D and OpenGL renderers expect polygons to be convex.; The OpenGL spec specifies that points defining a polygon using the; GL_POLYGON primitive may be rendered as the convex hull of that set. Solid rendering under X3D can also give unexpected artifacts if; the combination of x-y-z offsets and scales for the segments are; chosen in such a manner that they represent a concave shape when; sliced along a plane parallel to the z axis. Choosing sets of point that represent a malformed polygon is; not supported, but testing for such a condition is not implemented; and thus it is left to the user to avoid this mistake. . Function Members (Methods); public:. TXTRU(); TXTRU(const TXTRU& xtru); TXTRU(const char* name, const char* title, const char* material, Int_t nyx, Int_t nz); virtual~TXTRU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& xtru) const; virtual voidDefineSection(Int_t secNum, Float_t z, Float_t scale = 1., Float_t x0 = 0., Float_t y0 = 0.); virtual voidDefineVertex(Int_t pointNum, Float_t x, Float_t y); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXTRU.html:2482,Clear,Clear,2482,root/html528/TXTRU.html,https://root.cern,https://root.cern/root/html528/TXTRU.html,4,['Clear'],['Clear']
Usability,"ve” objects, which mean they are reordered to be on top of the others. To interactively make an object “active”, you can use the middle mouse button. In case of canvases or pads, the border becomes highlighted when it is active.; 9.2.2.2 With C++ Statements (Programmatically); Frequently we want to draw in different canvases or pads. By default, the objects are drawn in the active canvas. To activate a canvas you can use the TPad::cd() method.; root[] c1->cd(); 9.2.3 Context Menus: the Right Mouse Button; The context menus are a way to interactively call certain methods of an object. When designing a class, the programmer can add methods to the context menu of the object by making minor changes to the header file.; 9.2.3.1 Using Context Menus; On a ROOT canvas, you can right-click on any object and see the context menu for it. The script hsimple.C draws a histogram. The image below shows the context menus for some of the objects on the canvas. Next picture shows that drawing a simple histogram involves as many as seven objects. When selecting a method from the context menu and that method has options, the user will be asked for numerical values or strings to fill in the option. For example, TAxis::SetTitle will prompt you for a string to use for the axis title. Context menus of different objects in a canvas. 9.2.3.2 Structure of the Context Menus; The curious reader will have noticed that each entry in the context menu corresponds to a method of the class. Look for example to the menu named TAxis::xaxis. xaxis is the name of the object and TAxis the name of its class. If we look at the list of TAxis methods, for example in https://root.cern/doc/master/classTAxis.html, we see the methods SetTimeDisplay() andUnZoom(), which appear also in the context menu.; There are several divisions in the context menu, separated by lines. The top division is a list of the class methods; the second division is a list of the parent class methods. The subsequent divisions are the meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:294268,simpl,simple,294268,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"via Voxelize. ; Definition at line 1292 of file TGeoVolume.cxx. ◆ ResetTransparency(). void TGeoVolume::ResetTransparency ; (; Char_t ; transparency = -1). inline . Definition at line 383 of file TGeoVolume.h. ◆ SaveAs(). void TGeoVolume::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save geometry having this as top volume as a C++ macro. ; Reimplemented from TObject.; Definition at line 1447 of file TGeoVolume.cxx. ◆ SavePrimitive(). void TGeoVolume::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 1535 of file TGeoVolume.cxx. ◆ SelectVolume(). void TGeoVolume::SelectVolume ; (; Bool_t ; clear = kFALSE). Select this volume as matching an arbitrary criteria. ; The volume is added to a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need to be reset at the end by calling the method with CLEAR=true. This will also clear the list. ; Definition at line 2325 of file TGeoVolume.cxx. ◆ SetActiveDaughters(). void TGeoVolume::SetActiveDaughters ; (; Bool_t ; flag = kTRUE). inline . Definition at line 213 of file TGeoVolume.h. ◆ SetActivity(). void TGeoVolume::SetActivity ; (; Bool_t ; flag = kTRUE). inline . Definition at line 212 of file TGeoVolume.h. ◆ SetAdded(). void TGeoVolume::SetAdded ; (; ). inline . Definition at line 215 of file TGeoVolume.h. ◆ SetAsTopVolume(). void TGeoVolume::SetAsTopVolume ; (; ). Set this volume as the TOP one (the whole geometry starts from here) ; Definition at line 2051 of file TGeoVolume.cxx. ◆ SetAttVisibility(). void TGeoVolume::SetAttVisibility ; (; Bool_t ; vis). inline . Definition at line 233 of file TGeoVolume.h. ◆ SetCurrentPoint(). void TGeoVolume::SetCurrentPoint ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ). Set the current tracking point. ; Definition at line 2059 of file TGeoVolume.cxx. ◆ SetC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:63568,CLEAR,CLEAR,63568,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['CLEAR'],['CLEAR']
Usability,"via a message. ;  ; virtual Int_t Echo (const TObject *obj);  Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ;  ; Int_t EnablePackage (const char *package, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, const char *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, TList *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t Exec (const char *cmd, Bool_t plusMaster=kFALSE);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t Exec (const char *cmd, const char *ord, Bool_t logtomacro=kFALSE);  Send command to be executed on node of ordinal 'ord' (use ""0"" for master). ;  ; virtual Bool_t ExistsDataSet (const char *dataset);  Returns kTRUE if 'dataset' exists, kFALSE otherwise. ;  ; void Feedback (TList *objs);  Get list of feedback objects. ;  ; Long64_t Finalize (const char *queryref, Bool_t force=kFALSE);  Finalize query with reference ref. ;  ; Long64_t Finalize (Int_t query=-1, Bool_t force=kFALSE);  Finalize the qry-th query in fQueries. ;  ; TList * FindDataSets (const char *searchString, const char *optStr="""");  Find datasets, returns in a TList all found datasets. ;  ; Long64_t GetBytesRead () const;  ; Int_t GetClientProtocol () const;  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataPoolUrl () const;  ; virtual TFileCollection * GetDataSet (const char *dataset, const char *optStr="""");  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSetQuota (const char *optStr="""");  returns a map of the quotas of all groups ;  ; virtual TMap * GetDataSets (const char *uri="""", const char *optStr="""");  Lists all datasets that match given uri. ;  ; TString Getenv (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:7555,Feedback,Feedback,7555,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,6,"['Feedback', 'feedback']","['Feedback', 'feedback']"
Usability,"vide special functor for gROOT, while ROOT::GetROOT() does not return reference; 1795 TGlobalMappedFunction::MakeFunctor(""gROOT"", ""TROOT*"", ROOT::GetROOT, [] {; 1796 ROOT::GetROOT();; 1797 return (void *)&ROOT::Internal::gROOTLocal;; 1798 });; 1799 ; 1800 TGlobalMappedFunction::MakeFunctor(""gPad"", ""TVirtualPad*"", TVirtualPad::Pad);; 1801 TGlobalMappedFunction::MakeFunctor(""gVirtualX"", ""TVirtualX*"", TVirtualX::Instance);; 1802 TGlobalMappedFunction::MakeFunctor(""gDirectory"", ""TDirectory*"", TDirectory::CurrentDirectory);; 1803 ; 1804 // Don't let TGlobalMappedFunction delete our globals, now that we take them.; 1805 fGlobals->AddAll(&TGlobalMappedFunction::GetEarlyRegisteredGlobals());; 1806 TGlobalMappedFunction::GetEarlyRegisteredGlobals().SetOwner(kFALSE);; 1807 TGlobalMappedFunction::GetEarlyRegisteredGlobals().Clear();; 1808 }; 1809 ; 1810 if (!fInterpreter); 1811 Fatal(""GetListOfGlobals"", ""fInterpreter not initialized"");; 1812 ; 1813 if (load) fGlobals->Load();; 1814 ; 1815 return fGlobals;; 1816}; 1817 ; 1818////////////////////////////////////////////////////////////////////////////////; 1819/// Return list containing the TFunctions currently defined.; 1820/// Since functions are created and deleted during execution of the; 1821/// program, we need to update the list of functions every time we; 1822/// execute this method. However, when calling this function in; 1823/// a (tight) loop where no interpreter symbols will be created; 1824/// you can set load=kFALSE (default).; 1825 ; 1826TCollection *TROOT::GetListOfGlobalFunctions(Bool_t load); 1827{; 1828 R__LOCKGUARD(gROOTMutex);; 1829 ; 1830 if (!fGlobalFunctions) {; 1831 fGlobalFunctions = new TListOfFunctions(nullptr);; 1832 }; 1833 ; 1834 if (!fInterpreter); 1835 Fatal(""GetListOfGlobalFunctions"", ""fInterpreter not initialized"");; 1836 ; 1837 // A thread that calls with load==true and a thread that calls with load==false; 1838 // will conflict here (the load==true will be updating the list while the; 1839 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:69744,Clear,Clear,69744,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['Clear'],['Clear']
Usability,"vide, which will return an asymmetric and non-zero lower; error for the case b1=b2. void Draw(Option_t* option = """"); -*-*-*-*-*-*-*-*-*Draw this histogram with options*-*-*-*-*-*-*-*-*-*-*-*. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in different pads.; When an histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If an histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of an histogram in a pad, one can use; h->DrawCopy();; This makes a clone of the histogram. Once the clone is drawn, the original; histogram may be modified or deleted without affecting the aspect of the; clone.; By default, TH1::Draw clears the current pad. One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; value for the maximum or the minimum scale on the plot. TH1::UseCurrentStyle can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle();. See THistPainter::Paint for a description of all the drawing options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. TH1 * DrawCopy(Option_t* option = """") const; -*-*-*-*-*Copy this histogram and Draw in the current pad*-*-*-*-*-*-*-*. Once the histogram is drawn into the pad, any further modification; using graphics input will be made on the copy of the histogram,; and not to the original object. See Draw for the list of options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:60390,clear,clears,60390,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['clear'],['clears']
Usability,"view are present and send signal ""Modified"" to pad. void Paint(Option_t* option = """"); Paint current geometry according to option. void PaintOverlap(void* ovlp, Option_t* option = """"); Paint an overlap. void PaintNode(TGeoNode* node, Option_t* option = """", TGeoMatrix* global = 0); Paint recursively a node and its content accordind to visualization options. void PaintVolume(TGeoVolume* vol, Option_t* option = """", TGeoMatrix* global = 0); Paint recursively a node and its content accordind to visualization options. Bool_t PaintShape(const TGeoShape& shape, Option_t* option) const; Paint the supplied shape into the current 3D viewer. void PaintShape(TGeoShape* shape, Option_t* option = """"); Paint an overlap. void PaintPhysicalNode(TGeoPhysicalNode* node, Option_t* option = """"); Paints a physical node associated with a path. void PrintOverlaps() const; Print overlaps (see TGeoChecker::PrintOverlaps()). void OpProgress(const char* opname, Long64_t current, Long64_t size, TStopwatch* watch = 0, Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char* msg = """"); Text progress bar. void RandomPoints(const TGeoVolume* vol, Int_t npoints, Option_t* option = """"); Draw random points in the bounding box of a volume. void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* target_vol = 0, Bool_t check_norm = kFALSE); Shoot nrays in the current drawn geometry. void Raytrace(Option_t* option = """"); Raytrace current drawn geometry. TGeoNode * SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil, const char* g3path); shoot npoints randomly in a box of 1E-5 arround current point.; return minimum distance to points outside. void SetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3); --- Set cartesian and radial bomb factors for translations. void SetExplodedView(Int_t iopt = 0); set type of exploding view. void SetNsegments(Int_t nseg = 20); Set number of segments to approximate circles. void SetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPainter.html:19032,progress bar,progress bar,19032,root/html534/TGeoPainter.html,https://root.cern,https://root.cern/root/html534/TGeoPainter.html,3,['progress bar'],['progress bar']
Usability,"vigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ ClearTracks(). void TGeoManager::ClearTracks ; (; ). inline . Definition at line 415 of file TGeoManager.h. ◆ CloseGeometry(). void TGeoManager::CloseGeometry ; (; Option_t * ; option = ""d""). Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ; Definition at line 1480 of file TGeoManager.cxx. ◆ ConvertReflections(). void TGeoManager::ConvertReflections ; (; ). Convert all reflections in geometry to normal rotations + reflected shapes. ; Definition at line 1723 of file TGeoManager.cxx. ◆ CountLevels(). void TGeoManager::CountLevels ; (; ). Count maximum number of nodes per volume, maximum depth and maximum number of xtru vertices. ; Definition at line 1759 of file TGeoManager.cxx. ◆ CountNodes(). Int_t TGeoManager::CountNodes ; (; const TGeoVolume * ; vol = nullptr, . Int_t ; nlevels = 10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:78890,Clear,ClearTracks,78890,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearTracks']
Usability,"viour; in split or non-split mode. classname does not have to derive from TObject.; The function is based on the new TStreamerInfo. Build a TBranchElement for an object of class classname. addr is the address of a pointer to an object of class classname.; The class dictionary must be available (ClassDef in class header). Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the addr parameter. This option requires access to the library where the corresponding class; is defined. Accessing one single data member in the object implies; reading the full object. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (e.g. 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:53322,simpl,simply,53322,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['simpl'],['simply']
Usability,"viour; in split or non-split mode. classname does not have to derive from TObject.; The function is based on the new TStreamerInfo. Build a TBranchElement for an object of class classname. addr is the address of a pointer to an object of class classname.; The class dictionary must be available (ClassDef in class header). Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the addr parameter. This option requires access to the library where the corresponding class; is defined. Accessing one single data member in the object implies; reading the full object. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:50983,simpl,simply,50983,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['simpl'],['simply']
Usability,"vironment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; virtual void SendInputDataFile ();  Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Friends; class TProofPlayerSuperMaster;  . Additional Inherited Members;  Public Types inherited from TPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofSuperMaster.html:37820,feedback,feedback,37820,doc/master/classTProofSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofSuperMaster.html,1,['feedback'],['feedback']
Usability,"virtual . Brings the composite frame with the index tabIndex to the front and generate the following event if the front tab has changed: kC_COMMAND, kCM_TAB, tab id, 0. ; Returns kFALSE if tabIndex is a not valid index ; Definition at line 558 of file TGTab.cxx. ◆ SetText(). void TGTab::SetText ; (; const char * ; text = ""tab""). virtual . Set text to current tab. ; Definition at line 762 of file TGTab.cxx. ◆ Streamer(). void TGTab::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGTab::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 112 of file TGTab.h. Member Data Documentation. ◆ fContainer. TGCompositeFrame* TGTab::fContainer. protected . main container ; Definition at line 51 of file TGTab.h. ◆ fCurrent. Int_t TGTab::fCurrent. protected . index of current tab ; Definition at line 49 of file TGTab.h. ◆ fFontStruct. FontStruct_t TGTab::fFontStruct. protected . font ; Definition at line 53 of file TGTab.h. ◆ fgDefaultFont. const TGFont * TGTab::fgDefaultFont = nullptr. staticprotected . Definition at line 59 of file TGTab.h. ◆ fgDefaultGC. const TGGC * TGTab::fgDefaultGC = nullptr. staticprotected . Definition at line 60 of file TGTab.h. ◆ fNormGC. GContext_t TGTab::fNormGC. protected . drawing context ; Definition at line 54 of file TGTab.h. ◆ fRemoved. TList* TGTab::fRemoved. protected . list of removed tabs ; Definition at line 52 of file TGTab.h. ◆ fScrolling. Bool_t TGTab::fScrolling. protected . true if tab scrolling enabled ; Definition at line 55 of file TGTab.h. ◆ fTabh. UInt_t TGTab::fTabh. protected . tab height ; Definition at line 50 of file TGTab.h. Libraries for TGTab:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTab.h; gui/gui/src/TGTab.cxx. TGTab. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTab.html:44156,Guid,Guide,44156,doc/master/classTGTab.html,https://root.cern,https://root.cern/doc/master/classTGTab.html,1,['Guid'],['Guide']
Usability,"virtual Bool_t TGLManager::PlotSelected ; (; TVirtualGLPainter * ; plot, . Int_t ; px, . Int_t ; py . ). pure virtual . Implemented in TGOSXGLManager, TGWin32GLManager, TGWin32GLManagerProxy, and TX11GLManager. ◆ PrintViewer(). virtual void TGLManager::PrintViewer ; (; TVirtualViewer3D * ; vv). pure virtual . Implemented in TGOSXGLManager, TGWin32GLManager, TGWin32GLManagerProxy, and TX11GLManager. ◆ ReadGLBuffer(). virtual void TGLManager::ReadGLBuffer ; (; Int_t ; ctxInd). pure virtual . Implemented in TGOSXGLManager, TGWin32GLManager, TGWin32GLManagerProxy, and TX11GLManager. ◆ ResizeOffScreenDevice(). virtual Bool_t TGLManager::ResizeOffScreenDevice ; (; Int_t ; ctxInd, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). pure virtual . Implemented in TGOSXGLManager, TGWin32GLManager, TGWin32GLManagerProxy, and TX11GLManager. ◆ SelectManip(). virtual Bool_t TGLManager::SelectManip ; (; TVirtualGLManip * ; manip, . const TGLCamera * ; camera, . const TGLRect * ; rect, . const TGLBoundingBox * ; sceneBox . ). pure virtual . Implemented in TGOSXGLManager, TGWin32GLManager, TGWin32GLManagerProxy, and TX11GLManager. ◆ SelectOffScreenDevice(). virtual void TGLManager::SelectOffScreenDevice ; (; Int_t ; ctxInd). pure virtual . Implemented in TGOSXGLManager, TGWin32GLManager, TGWin32GLManagerProxy, and TX11GLManager. ◆ Streamer(). void TGLManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGOSXGLManager, TGWin32GLManager, and TX11GLManager. ◆ StreamerNVirtual(). void TGLManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file TVirtualGL.h. Libraries for TGLManager:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TVirtualGL.h; core/base/src/TVirtualGL.cxx. TGLManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLManager.html:18445,Guid,Guide,18445,doc/master/classTGLManager.html,https://root.cern,https://root.cern/doc/master/classTGLManager.html,1,['Guid'],['Guide']
Usability,"virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooStats::SimpleInterval::IsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); Double_tLowerLimitEstimatedError(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&RooStats::SimpleInterval::operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:5377,Simpl,SimpleInterval,5377,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"virtual Double_t GetMaximum(Double_t maxval=FLT_MAX) constReturn maximum value smaller than maxval of bins in the range, unless the value has been overridden b...Definition TH1.cxx:8545; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetHighlightvirtual void SetHighlight(Bool_t set=kTRUE)Set highlight (enable/disable) mode for the histogram by default highlight mode is disable.Definition TH1.cxx:4482; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TStyle::SetGridColorvoid SetGridColor(Color_t color=0)Definition TStyle.h:370; TTextBase class for several text objects.Definition TText.h:22; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; DateMarch 2018 ; AuthorJan Musinsky ; Definition in file hlHisto4.C. tutorialshisthlHisto4.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlHisto4_8C.html:5979,Guid,Guide,5979,doc/master/hlHisto4_8C.html,https://root.cern,https://root.cern/doc/master/hlHisto4_8C.html,1,['Guid'],['Guide']
Usability,"virtual Int_tTGX11::AddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tTGX11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tTGX11::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11TTF.html:1855,Clear,ClearArea,1855,root/html534/TGX11TTF.html,https://root.cern,https://root.cern/root/html534/TGX11TTF.html,3,['Clear'],['ClearArea']
Usability,"virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTable::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTable::Expand(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ExpandColumns(UInt_t ncolumns); virtual voidTGTable::ExpandRows(UInt_t nrows); virtual UInt_tTGTable::GetCHdrWidth() const; static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual UInt_tTGTable::GetRHdrHeight() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTable::Init(); voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); virtual voidTGTable::ResizeTable(UInt_t nrows, UInt_t ncolumns); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGTable::SetInterface(TVirtualTableInterface* interface, UInt_t nrows = 50, UInt_t ncolumns = 20); virtual voidTGTable::Shrink(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ShrinkColumns(UInt_t ncolumns); virtual voidTGTable::ShrinkRows(UInt_t nrows); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTable::UpdateHeaders(EHeaderType type); virtual voidTGTable::UpdateRangeFrame(). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSimpleTable.html:17352,Clear,ClearFlags,17352,root/html528/TGSimpleTable.html,https://root.cern,https://root.cern/root/html528/TGSimpleTable.html,7,['Clear'],['ClearFlags']
Usability,"virtual Int_t GetEntryMax () const;  ; virtual Int_t GetEntryMin () const;  ; virtual EPrefillType GetLearnPrefill () const;  ; Double_t GetMissEfficiency () const;  The total efficiency of the 'miss cache' - defined as the ratio of blocks found in the cache versus the number of blocks prefetched. ;  ; Double_t GetMissEfficiencyRel () const;  Relative efficiency of the 'miss cache' - ratio of the reads found in cache to the number of reads so far. ;  ; bool GetOptimizeMisses () const;  ; TTree * GetTree () const;  ; TClass * IsA () const override;  ; bool IsAutoCreated () const;  ; virtual bool IsEnabled () const;  ; bool IsLearning () const override;  ; Int_t LearnBranch (TBranch *b, bool subgbranches=false) override;  Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ;  ; virtual void LearnPrefill ();  Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; virtual void ResetCache ();  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Int_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this infor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:14528,Learn,LearnPrefill,14528,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,"['Learn', 'learn']","['LearnPrefill', 'learning']"
Usability,"virtual Int_t GetEntryMax () const;  ; virtual Int_t GetEntryMin () const;  ; virtual EPrefillType GetLearnPrefill () const;  ; Double_t GetMissEfficiency () const;  The total efficiency of the 'miss cache' - defined as the ratio of blocks found in the cache versus the number of blocks prefetched. ;  ; Double_t GetMissEfficiencyRel () const;  Relative efficiency of the 'miss cache' - ratio of the reads found in cache to the number of reads so far. ;  ; bool GetOptimizeMisses () const;  ; TTree * GetTree () const;  ; TClass * IsA () const override;  ; bool IsAutoCreated () const;  ; virtual bool IsEnabled () const;  ; bool IsLearning () const override;  ; Int_t LearnBranch (TBranch *b, bool subgbranches=false) override;  Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ;  ; virtual void LearnPrefill ();  Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; virtual void ResetCache ();  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:14529,Learn,LearnPrefill,14529,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,"['Learn', 'learn']","['LearnPrefill', 'learning']"
Usability,"virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidGetBackground(TH1* bgr, const char* bgrSource = 0, const Int_t* binMap = 0, Int_t includeError = 3, Bool_t clearHist = kTRUE) const; voidTUnfold::GetBias(TH1* bias, const Int_t* binMap = 0) const; Double_tTUnfold::GetChi2A() const; Double_tTUnfold::GetChi2L() const; Double_tGetChi2Sys(); Bool_tGetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0); Bool_tGetDeltaSysSource(TH1* hist_delta, const char* source, const Int_t* binMap = 0); Bool_tGetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTUnfold::GetEmatrix(TH2* ematrix, const Int_t* binMap = 0) const; voidGetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundUncorr(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); Double_tTUnfold::GetEpsMatrix() const; voidTUnfold::GetFoldedOutput(TH1* folded, const Int_t* binMap = 0) const; virtual const char*TObject::GetIconName() const; voidTUnfold::GetInput(TH1* inputData, const Int_t* binMap = 0) const; voidTUnfold::GetInputInverseEmatrix(TH2* ematrix); voidTUnfold::GetL(TH2* l) const; virtual Double_tTUnfold::GetLcurveX() const; virtual Double_tTUnfold::GetLcurveY() const; voidTUnfold::GetLsquared(TH2* lsquared) const; virtual const char*TObject::GetName() const; Int_tTUnfold::GetNdf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:6047,clear,clearEmat,6047,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,3,['clear'],['clearEmat']
Usability,"virtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (learningRate)Definition NeuralNet.h:371; TMVA::DNN::Steepest::m_localWeightsstd::vector< double > m_localWeightslocal weights for reuse in thread.Definition NeuralNet.h:375; TMVA::DNN::Steepest::operator()double operator()(Function &fitnessFunction, Weights &weights, PassThrough &passThrough)operator to call the steepest gradient descent algorithmDefinition NeuralNet.icc:271; TMVA::IPythonInteractive::AddPointvoid AddPoint(Double_t x, Double_t y1, Double_t y2)This function is used only in 2 TGraph case, and it will add new data points to graphs.Definition MethodBase.cxx:207; TStringBasic string class.Definition TString.h:139; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; double; nconst Int_t nDefinition legend1.C:16; TMVA::DNN::InvGaussstd::shared_ptr< std::function< double(double)> > InvGaussDefinition NeuralNet.cxx:14; TMVA::DNN::su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:70304,learn,learningRate,70304,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['learn'],['learningRate']
Usability,"virtual voidSetValueClass(TClass* newcl); virtual UInt_tSize() const; virtual UInt_tSizeof() const; virtual voidStreamer(TBuffer& refBuffer); virtual voidStreamer(TBuffer& refBuffer, void* pObject, int siz). protected:. voidCheckFunctions() const; virtual voidDeleteItem(Bool_t force, void* ptr) const; TGenCollectionProxy*Initialize(Bool_t silent) const; virtual TGenCollectionProxy*InitializeEx(Bool_t silent). private:. TGenCollectionProxy(); TGenCollectionProxy&operator=(const TGenCollectionProxy&). Data Members; public:. enum { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; kNeedDelete; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodfClearMethod cache for container accessors: clear container; void*fCollectMethod to collect objects from container; void*fConstructContainer accessors: block construct; map<std::string,TObjArray*>*fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0fCreateEnvMethod to allocate an Environment holder.; void*fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*fEnvAddress of the currently proxied object; void*fFeedContainer accessors: block feed; TGenCollectionProxy::MethodfFirstContainer accessors: generic iteration: first; void*fFunctionCopyIterator; void*fFunctionCreateIterators; void*fFunctionDeleteIterator; void*fFunctionDeleteTwoIterators; void*fFunctionNextIterator; TGenCollectionProxy::Value*fKeyDescriptor of the key_type; stringfNameName of the class being proxied.; TGenCollectionProxy::MethodfNextContainer accessors: generic iteration: next; TClass*fOnFileClassOn file class; Bool_tfPointersFlag to indicate if containee has pointers (key or value); UInt_tTVirtualCollectionPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenCollectionProxy.html:3995,clear,clear,3995,root/html534/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TGenCollectionProxy.html,1,['clear'],['clear']
Usability,"virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowFrame(TGFrame* frame, const char* n = ""TEveWindowFrame"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowFrame.html:17156,Undo,UndockWindow,17156,root/html602/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html602/TEveWindowFrame.html,4,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidEmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); voidPSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGCheckButton(const TGCheckButton&); TGCheckButton&operator=(const TGCheckButton&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGCheckButton.html:19204,Clear,ClearFlags,19204,root/html528/TGCheckButton.html,https://root.cern,https://root.cern/root/html528/TGCheckButton.html,4,['Clear'],['ClearFlags']
Usability,"virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidEmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); voidPSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGRadioButton(const TGRadioButton&); TGRadioButton&operator=(const TGRadioButton&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGRadioButton.html:19194,Clear,ClearFlags,19194,root/html528/TGRadioButton.html,https://root.cern,https://root.cern/root/html528/TGRadioButton.html,4,['Clear'],['ClearFlags']
Usability,"virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTUnfold::AddMSparse(TMatrixDSparse* dest, Double_t f, const TMatrixDSparse* src) const; Bool_tTUnfold::AddRegularisationCondition(Int_t nEle, const Int_t* indices, const Double_t* rowData); Bool_tTUnfold::AddRegularisationCondition(Int_t i0, Double_t f0, Int_t i1 = -1, Double_t f1 = 0., Int_t i2 = -1, Double_t f2 = 0.); voidTUnfold::ClearHistogram(TH1* h, Double_t x = 0.) const; virtual voidClearResults(); TMatrixDSparse*TUnfold::CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidDoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tTUnfold::DoUnfold(); voidTUnfold::ErrorMatrixToHist(TH2* ematrix, const TMatrixDSparse* emat, const Int_t* binMap, Bool_t doClear) const; const TMatrixDSparse*TUnfold::GetAx() const; Int_tTUnfold::GetBinFromRow(int ix) const; const TMatrixDSparse*TUnfold::GetDXDAM(int i) const; const TMatrixDSparse*TUnfold::GetDXDAZ(int i) const; const TMatrixDSparse*TUnfold::GetDXDtauSquared() const; const TMatrixDSparse*TUnfold::GetDXDY() const; const TMatrixDSparse*TUnfold::GetE() const; const TMatrixDSparse*TUnfold::GetEinv() const; voidGetEmatrixFromVyy(const TMatrixDS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:11958,Clear,ClearHistogram,11958,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,2,['Clear'],['ClearHistogram']
Usability,"virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpTimer.html:3821,Clear,Clear,3821,doc/master/classTHttpTimer.html,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html,33,['Clear'],['Clear']
Usability,"virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:36266,Clear,Clear,36266,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,147,['Clear'],['Clear']
Usability,"virtual. ;  ; void UnbombTranslation (const Double_t *tr, Double_t *bombtr);  Get the new 'unbombed' translation vector according current exploded view mode. ;  ; void ViewLeaves (Bool_t flag=kTRUE);  Set visualization option (leaves only OR all volumes) ;  ; TGeoVolume * Volume (const char *name, const char *shape, Int_t nmed, Double_t *upar, Int_t npar=0);  Create a volume in GEANT3 style. ;  ; TGeoVolume * Volume (const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0);  Create a volume in GEANT3 style. ;  ; Double_t Weight (Double_t precision=0.01, Option_t *option=""va"");  Estimate weight of volume VOL with a precision SIGMA(W)/W better than PRECISION. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:51243,Clear,Clear,51243,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['Clear']
Usability,"virtual; SetTextColor(Color_t tcolor=1)TAttTextinlinevirtual; SetTextColorAlpha(Color_t tcolor, Float_t talpha)TAttTextvirtual; SetTextFont(Font_t tfont=62)TAttTextinlinevirtual; SetTextSize(Float_t tsize=1)TAttTextinlinevirtual; SetTextSizePixels(Int_t npixels)TAttTextvirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetX(Double_t x)TTextinlinevirtual; SetY(Double_t y)TTextinlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTLatexvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TLatexinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TLatex()TLatex; TLatex(Double_t x, Double_t y, const char *text)TLatex; TLatex(const TLatex &text)TLatex; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TText()TTextinline; TText(Double_t x, Double_t y, const char *text)TText; TText(Double_t x, Double_t y, const wchar_t *text)TText; TText(const TText &text)TText; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttLine()TAttLinevirtual; ~TAttText()TAttTextvirtual; ~TLatex() overrideTLatex; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TText() overrideTText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLatex-members.html:11952,Guid,Guide,11952,doc/master/classTLatex-members.html,https://root.cern,https://root.cern/doc/master/classTLatex-members.html,1,['Guid'],['Guide']
Usability,"vogadro constant (Avogadro's Number) in \( mol^{-1} \). ;  ; constexpr Double_t NaUncertainty ();  Avogadro constant (Avogadro's Number) uncertainty. ;  ; Long_t NextPrime (Long_t x);  ; template<typename T > ; Int_t Nint (T x);  Round to nearest integer. Rounds half integers to the nearest even integer. ;  ; template<typename T > ; T * Normal2Plane (const T v1[3], const T v2[3], const T v3[3], T normal[3]);  Calculates a normal vector of a plane. ;  ; Double_t Normalize (Double_t v[3]);  Normalize a vector v in place. ;  ; Float_t Normalize (Float_t v[3]);  Normalize a vector v in place. ;  ; template<typename T > ; T NormCross (const T v1[3], const T v2[3], T out[3]);  Calculates the Normalized Cross Product of two vectors. ;  ; Double_t NormQuantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:16480,Simpl,Simple,16480,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['Simpl'],['Simple']
Usability,"void *ptr)Definition TGenCollectionProxy.cxx:518; TGenCollectionProxy::Value::fCaseUInt_t fCasetype of data of Value_typeDefinition TGenCollectionProxy.h:64; TGenCollectionProxy::Value::fTypeTClassRef fTypeTClass reference of Value_type in collection.Definition TGenCollectionProxy.h:66; TGenCollectionProxy::Value::fPropertiesUInt_t fPropertiesAdditional properties of the value type (kNeedDelete)Definition TGenCollectionProxy.h:65; TGenCollectionProxy::Value::fSizesize_t fSizefSize of the contained objectDefinition TGenCollectionProxy.h:68; TGenCollectionProxy::Value::fDeleteROOT::DelFunc_t fDeleteMethod cache for containee delete.Definition TGenCollectionProxy.h:63; TGenCollectionProxy::Value::fDtorROOT::DesFunc_t fDtorMethod cache for containee destructor.Definition TGenCollectionProxy.h:62; TGenCollectionProxy::Value::fCtorROOT::NewFunc_t fCtorMethod cache for containee constructor.Definition TGenCollectionProxy.h:61; TGenCollectionProxy::Value::ValueValue(const std::string &info, Bool_t silent, size_t hint_pair_offset=0, size_t hint_pair_size=0)Constructor.Definition TGenCollectionProxy.cxx:316; TGenCollectionProxy::Value::fKindEDataType fKindkind of ROOT-fundamental typeDefinition TGenCollectionProxy.h:67; TGenCollectionProxy::Value::IsValidBool_t IsValid()Return true if the Value has been properly initialized.Definition TGenCollectionProxy.cxx:511; TGenCollectionProxy__SlowIteratorDefinition TGenCollectionProxy.cxx:1454; TGenCollectionProxy__SlowIterator::fProxyTVirtualCollectionProxy * fProxyDefinition TGenCollectionProxy.cxx:1455; TGenCollectionProxy__SlowIterator::fIndexUInt_t fIndexDefinition TGenCollectionProxy.cxx:1456; TGenCollectionProxy__SlowIterator::TGenCollectionProxy__SlowIteratorTGenCollectionProxy__SlowIterator(TVirtualCollectionProxy *proxy)Definition TGenCollectionProxy.cxx:1457; vecDefinition civetweb.c:1855. ioiosrcTGenCollectionProxy.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:99327,Guid,Guide,99327,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Guid'],['Guide']
Usability,"void * ; object, . const char * ; redo, . const char * ; undo . ). protectedvirtual . Common protected method used in several constructors. ; Definition at line 120 of file TQCommand.cxx. ◆ IsA(). TClass * TQCommand::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 98 of file TQCommand.h. ◆ IsEqual(). Bool_t TQCommand::IsEqual ; (; const TObject * ; obj); const. overridevirtual . Equal comparison. ; The commands are equal if they are applied to the same object and have the same Redo/Undo actions; More complicated commands might want to override this function. ; Reimplemented from TObject.; Definition at line 418 of file TQCommand.cxx. ◆ IsExecuting(). Bool_t TQCommand::IsExecuting ; (; ); const. Returns kTRUE if command execution is in progress. ; Definition at line 824 of file TQCommand.cxx. ◆ IsMacro(). Bool_t TQCommand::IsMacro ; (; ); const. Returns kTRUE if neither redo nor undo action specified. ; Definition at line 800 of file TQCommand.cxx. ◆ IsRedoing(). Bool_t TQCommand::IsRedoing ; (; ); const. Redo action is in progress. ; Definition at line 816 of file TQCommand.cxx. ◆ IsSetter(). Bool_t TQCommand::IsSetter ; (; ); const. virtual . Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ; By default, all functions with names like ""SetXXX"" or ""setXXX"" considered as setters. Another type of setters are Move, Resize operations; More complicated commands might want to override this function. ; Definition at line 440 of file TQCommand.cxx. ◆ IsUndoing(). Bool_t TQCommand::IsUndoing ; (; ); const. Undo action is in progress. ; Definition at line 808 of file TQCommand.cxx. ◆ ls(). void TQCommand::ls ; (; Option_t * ; option = """"); const. overridevirtual . ls this command and merged commands ; Reimplemented from TCollection.; Reimplemented in TQUndoManager.; Definition at line 848 of file TQCommand.cxx. ◆ Merge() [1/2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:40339,undo,undo,40339,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TBenchmark::GetCpuTimeFloat_t GetCpuTime(const char *name)Returns Cpu time used by Benchmark name.Definition TBenchmark.cxx:117; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TPolyMarker3D::SetPointvoid SetPoint(Int_t n, Double_t x, Double_t y, Double_t z)Set point n to x, y, z.Definition TPolyMarker3D.cxx:535; TPolyMarker3D::Drawvoid Draw(Option_t *option="""") overrideDraws 3-D polymarker with its current attributes.Definition TPolyMarker3D.cxx:242; TViewSee TView3D.Definition TView.h:25; TView::CreateViewstatic TView * CreateView(Int_t system=1, const Double_t *rmin=nullptr, const Double_t *rmax=nullptr)Create a concrete default 3-d view via the plug-in manager.Definition TView.cxx:27; TView::SetRangevirtual void SetRange(const Double_t *min, const Double_t *max)=0; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; tornadoDefinition tornado.py:1; AuthorRene Brun ; Definition in file tornado.C. tutorialsgraphicstornado.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tornado_8C.html:3919,Guid,Guide,3919,doc/master/tornado_8C.html,https://root.cern,https://root.cern/doc/master/tornado_8C.html,1,['Guid'],['Guide']
Usability,"void SetPrecision(double prec)set the precisionDefinition MinimizerOptions.h:222; ROOT::Math::MinimizerOptions::MaxFunctionCallsunsigned int MaxFunctionCalls() constmax number of function callsDefinition MinimizerOptions.h:177; ROOT::Math::MinimizerOptions::ResetToDefaultOptionsvoid ResetToDefaultOptions()non-static methods for setting optionsDefinition MinimizerOptions.cxx:174; ROOT::Math::MinimizerOptions::MinimizerOptionsMinimizerOptions()Definition MinimizerOptions.cxx:137; ROOT::Math::MinimizerOptions::SetDefaultTolerancestatic void SetDefaultTolerance(double tol)Set the Minimization tolerance.Definition MinimizerOptions.cxx:55; ROOT::Math::MinimizerOptions::PrintLevelint PrintLevel() constnon-static methods for retrieving optionsDefinition MinimizerOptions.h:174; ROOT::Math::MinimizerOptions::SetErrorDefvoid SetErrorDef(double err)set error defDefinition MinimizerOptions.h:228; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::MinimizerOptions::Printvoid Print(std::ostream &os=std::cout) constprint all the optionsDefinition MinimizerOptions.cxx:216; ROOT::Math::MinimizerOptions::DefaultMaxIterationsstatic int DefaultMaxIterations()Definition MinimizerOptions.cxx:95; ROOT::Math::MinimizerOptions::DefaultErrorDefstatic double DefaultErrorDef()Definition MinimizerOptions.cxx:91; ROOT::Math::MinimizerOptions::SetMinimizerAlgorithmvoid SetMinimizerAlgorithm(const char *type)set minimizer algorithmDefinition MinimizerOptions.h:234; ROOT::Math::MinimizerOptions::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition MinimizerOptions.h:219; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathMinimizerOptions.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8h_source.html:20312,Guid,Guide,20312,doc/master/MinimizerOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html,1,['Guid'],['Guide']
Usability,"void SetSelected(TObject *clickedObject)Assign the last selected object.Definition TBrowser.cxx:429; TBrowser::fNeedRefreshBool_t fNeedRefreshContext menu pointer.Definition TBrowser.h:49; TBrowser::GetSelectedTObject * GetSelected() constDefinition TBrowser.h:99; TBrowser::GetRefreshFlagBool_t GetRefreshFlag() constDefinition TBrowser.h:98; TBrowser::ExecuteDefaultActionvoid ExecuteDefaultAction(TObject *obj)Execute default action for selected object (action is specified in the $HOME/.root....Definition TBrowser.cxx:399; TBrowser::GetBrowserImpTBrowserImp * GetBrowserImp() constDefinition TBrowser.h:94; TBrowser::GetDrawOptionOption_t * GetDrawOption() const overrideGet option used by the graphics system to draw this object.Definition TBrowser.h:107; TBrowser::AddCheckBoxvoid AddCheckBox(TObject *obj, Bool_t check=kFALSE)Add checkbox for this item.Definition TBrowser.cxx:336; TBrowser::operator=TBrowser & operator=(const TBrowser &)=delete; TBrowser::BrowseObjectvoid BrowseObject(TObject *obj)Definition TBrowser.h:92; TBrowser::IsWebBool_t IsWeb() constDefinition TBrowser.h:95; TBrowser::SetStatusTextvoid SetStatusText(const char *txt, Int_t col)Definition TBrowser.h:113; TBrowser::Addvoid Add(TObject *obj, const char *name=nullptr, Int_t check=-1)Add object with name to browser.Definition TBrowser.cxx:303; TBrowser::SetBrowserImpvoid SetBrowserImp(TBrowserImp *i)Definition TBrowser.h:96; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TContextMenuThis class provides an interface to context sensitive popup menus.Definition TContextMenu.h:44; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; bool; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. coreguiincTBrowser.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBrowser_8h_source.html:12330,Guid,Guide,12330,doc/master/TBrowser_8h_source.html,https://root.cern,https://root.cern/doc/master/TBrowser_8h_source.html,1,['Guid'],['Guide']
Usability,"void StopProcess(Bool_t abort, Int_t timeout = -1). void AddInput(TObject* inp). void ClearInput(). TObject * GetOutput(const char* name) const. TList * GetOutputList() const. TList * GetInputList() const. TList * GetListOfResults() const. void AddQueryResult(TQueryResult* q). TQueryResult * GetCurrentQuery() const. TQueryResult * GetQueryResult(const char* ref). void RemoveQueryResult(const char* ref). void SetCurrentQuery(TQueryResult* q). void SetMaxDrawQueries(Int_t max). void RestorePreviousQuery(). Int_t AddOutputObject(TObject* obj). void AddOutput(TList* out). void StoreOutput(TList* out). void StoreFeedback(TObject* slave, TList* out). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). void Progress(TProofProgressInfo* ). void Progress(TSlave* , TProofProgressInfo* ). void Feedback(TList* objs). TDrawFeedback * CreateDrawFeedback(TProof* p). void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt). void DeleteDrawFeedback(TDrawFeedback* f). TDSetElement * GetNextPacket(TSlave* slave, TMessage* r). Int_t ReinitSelector(TQueryResult* qr). void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax). Bool_t IsClient() const. EExitStatus GetExitStatus() const. Long64_t GetEventsProcessed() const. void AddEventsProcessed(Long64_t ev). TProofProgressStatus* GetProgressStatus() const. void SetDispatchTimer(Bool_t on = kTRUE). void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0). Long64_t GetCacheSize(). Int_t GetLearnEntries(). TVirtualPacketizer * GetPacketizer() const; { return 0; }. TVirtualProofPlayer * Create(const char* player, TProof* p, TSocket* s = 0). » Author: Fons Rademakers 15/03/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualProofPlayer.html:13363,Feedback,Feedback,13363,root/html528/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html528/TVirtualProofPlayer.html,3,['Feedback'],['Feedback']
Usability,"void StopProcess(Bool_t abort, Int_t timeout = -1). void AddInput(TObject* inp). void ClearInput(). TObject * GetOutput(const char* name) const. TList * GetOutputList() const. TList * GetInputList() const. TList * GetListOfResults() const. void AddQueryResult(TQueryResult* q). TQueryResult * GetCurrentQuery() const. TQueryResult * GetQueryResult(const char* ref). void RemoveQueryResult(const char* ref). void SetCurrentQuery(TQueryResult* q). void SetMaxDrawQueries(Int_t max). void RestorePreviousQuery(). Int_t AddOutputObject(TObject* obj). void AddOutput(TList* out). void StoreOutput(TList* out). void StoreFeedback(TObject* slave, TList* out). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). void Progress(TProofProgressInfo* ). void Progress(TSlave* , TProofProgressInfo* ). void Feedback(TList* objs). TDrawFeedback * CreateDrawFeedback(TProof* p). void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt). void DeleteDrawFeedback(TDrawFeedback* f). TDSetElement * GetNextPacket(TSlave* slave, TMessage* r). Int_t ReinitSelector(TQueryResult* qr). void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax). Bool_t IsClient() const. EExitStatus GetExitStatus() const. void SetExitStatus(TVirtualProofPlayer::EExitStatus ). Long64_t GetEventsProcessed() const. void AddEventsProcessed(Long64_t ev). TProofProgressStatus* GetProgressStatus() const. void SetDispatchTimer(Bool_t on = kTRUE). void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0). Long64_t GetCacheSize(). Int_t GetLearnEntries(). void UpdateProgressInfo(). TVirtualPacketizer * GetPacketizer() const; { return 0; }. void SetOutputFilePath(const char* fp). Int_t SavePartialResults(Bool_t queryend = kFALSE, Bool_t force =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualProofPlayer.html:15022,Feedback,Feedback,15022,root/html602/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html602/TVirtualProofPlayer.html,1,['Feedback'],['Feedback']
Usability,"void StopProcess(Bool_t abort, Int_t timeout = -1). void AddInput(TObject* inp). void ClearInput(). TObject * GetOutput(const char* name) const. TList * GetOutputList() const. TList * GetInputList() const. TList * GetListOfResults() const. void AddQueryResult(TQueryResult* q). TQueryResult * GetCurrentQuery() const. TQueryResult * GetQueryResult(const char* ref). void RemoveQueryResult(const char* ref). void SetCurrentQuery(TQueryResult* q). void SetMaxDrawQueries(Int_t max). void RestorePreviousQuery(). Int_t AddOutputObject(TObject* obj). void AddOutput(TList* out). void StoreOutput(TList* out). void StoreFeedback(TObject* slave, TList* out). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). void Progress(TProofProgressInfo* ). void Progress(TSlave* , TProofProgressInfo* ). void Feedback(TList* objs). TDrawFeedback * CreateDrawFeedback(TProof* p). void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt). void DeleteDrawFeedback(TDrawFeedback* f). TDSetElement * GetNextPacket(TSlave* slave, TMessage* r). Int_t ReinitSelector(TQueryResult* qr). void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax). Bool_t IsClient() const. EExitStatus GetExitStatus() const. void SetExitStatus(TVirtualProofPlayer::EExitStatus ). Long64_t GetEventsProcessed() const. void AddEventsProcessed(Long64_t ev). TProofProgressStatus* GetProgressStatus() const. void SetDispatchTimer(Bool_t on = kTRUE). void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0). void SetMerging(Bool_t on = kTRUE). Long64_t GetCacheSize(). Int_t GetLearnEntries(). void UpdateProgressInfo(). TVirtualPacketizer * GetPacketizer() const; { return 0; }. void SetOutputFilePath(const char* fp). Int_t SavePartialResults(Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualProofPlayer.html:14045,Feedback,Feedback,14045,root/html534/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html534/TVirtualProofPlayer.html,2,['Feedback'],['Feedback']
Usability,"void TFormula::Copy(TObject &obj) const; 685{; 686 TNamed::Copy(obj);; 687 // need to copy also cling parameters; 688 TFormula & fnew = dynamic_cast<TFormula&>(obj);; 689 ; 690 fnew.fClingParameters = fClingParameters;; 691 fnew.fClingVariables = fClingVariables;; 692 ; 693 fnew.fFuncs = fFuncs;; 694 fnew.fVars = fVars;; 695 fnew.fParams = fParams;; 696 fnew.fConsts = fConsts;; 697 fnew.fFunctionsShortcuts = fFunctionsShortcuts;; 698 fnew.fFormula = fFormula;; 699 fnew.fNdim = fNdim;; 700 fnew.fNpar = fNpar;; 701 fnew.fNumber = fNumber;; 702 fnew.fVectorized = fVectorized;; 703 fnew.SetParameters(GetParameters());; 704 // copy Linear parts (it is a vector of TFormula pointers) needs to be copied one by one; 705 // looping at all the elements; 706 // delete first previous elements; 707 int nLinParts = fnew.fLinearParts.size();; 708 if (nLinParts > 0) {; 709 for (int i = 0; i < nLinParts; ++i) delete fnew.fLinearParts[i];; 710 fnew.fLinearParts.clear();; 711 }; 712 // old size that needs to be copied; 713 nLinParts = fLinearParts.size();; 714 if (nLinParts > 0) {; 715 fnew.fLinearParts.reserve(nLinParts);; 716 for (int i = 0; i < nLinParts; ++i) {; 717 TFormula * linearNew = new TFormula();; 718 TFormula * linearOld = (TFormula*) fLinearParts[i];; 719 if (linearOld) {; 720 linearOld->Copy(*linearNew);; 721 fnew.fLinearParts.push_back(linearNew);; 722 }; 723 else; 724 Warning(""Copy"",""Function %s - expr %s has a dummy linear part %d"",GetName(),GetExpFormula().Data(),i);; 725 }; 726 }; 727 ; 728 fnew.fClingInput = fClingInput;; 729 fnew.fReadyToExecute = fReadyToExecute;; 730 fnew.fClingInitialized = fClingInitialized.load();; 731 fnew.fAllParametersSetted = fAllParametersSetted;; 732 fnew.fClingName = fClingName;; 733 fnew.fSavedInputFormula = fSavedInputFormula;; 734 fnew.fLazyInitialization = fLazyInitialization;; 735 ; 736 // case of function based on a C++ expression (lambda's) which is ready to be compiled; 737 if (fLambdaPtr && TestBit(TFormula::kLambda)) {; 738 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:26186,clear,clear,26186,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['clear'],['clear']
Usability,"void TGImageMap::SetToolTipText ; (; const char * ; text, . Long_t ; delayms = 300 . ). overridevirtual . Set tooltip text for main region. ; Reimplemented from TGButton.; Definition at line 613 of file TGImageMap.cxx. ◆ SetToolTipText() [2/2]. void TGImageMap::SetToolTipText ; (; Int_t ; id, . const char * ; text, . Long_t ; delayms = 300 . ). Set tooltip text for regions with specified id. ; Definition at line 625 of file TGImageMap.cxx. ◆ Streamer(). void TGImageMap::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGButton. ◆ StreamerNVirtual(). void TGImageMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TGImageMap.h. Member Data Documentation. ◆ fCursorMouseOut. ECursor TGImageMap::fCursorMouseOut. protected . cursor shape out of regions ; Definition at line 121 of file TGImageMap.h. ◆ fCursorMouseOver. ECursor TGImageMap::fCursorMouseOver. protected . cursor shape in regions ; Definition at line 120 of file TGImageMap.h. ◆ fLastVisited. Int_t TGImageMap::fLastVisited. protected . id of the last visited region ; Definition at line 122 of file TGImageMap.h. ◆ fListOfRegions. TList* TGImageMap::fListOfRegions. protected . list of regions ; Definition at line 118 of file TGImageMap.h. ◆ fMainTip. TGToolTip* TGImageMap::fMainTip. protected . tooltip text for main region ; Definition at line 123 of file TGImageMap.h. ◆ fNavMode. ENavMode TGImageMap::fNavMode. protected . navigation mode ; Definition at line 119 of file TGImageMap.h. ◆ fTrash. TList* TGImageMap::fTrash. protected . collect all objects that need to be cleaned up ; Definition at line 124 of file TGImageMap.h. Libraries for TGImageMap:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGImageMap.h; gui/gui/src/TGImageMap.cxx. TGImageMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGImageMap.html:41297,Guid,Guide,41297,doc/master/classTGImageMap.html,https://root.cern,https://root.cern/doc/master/classTGImageMap.html,1,['Guid'],['Guide']
Usability,void TGeoTabManager::SetModel ; (; TObject * ; model). Send the SetModel signal to all editors in the tab TYPE. ; Definition at line 275 of file TGeoTabManager.cxx. ◆ SetTab(). void TGeoTabManager::SetTab ; (; ). Set a given tab element as active one. ; Definition at line 291 of file TGeoTabManager.cxx. ◆ SetVolTabEnabled(). void TGeoTabManager::SetVolTabEnabled ; (; Bool_t ; flag = kTRUE). Enable/disable tabs. ; Definition at line 267 of file TGeoTabManager.cxx. Friends And Related Symbol Documentation. ◆ TGeoManagerEditor. friend class TGeoManagerEditor. friend . Definition at line 43 of file TGeoTabManager.h. Member Data Documentation. ◆ fGedEditor. TGedEditor* TGeoTabManager::fGedEditor. private . Definition at line 46 of file TGeoTabManager.h. ◆ fgEditorToMgrMap. TMap TGeoTabManager::fgEditorToMgrMap. staticprivate . Definition at line 56 of file TGeoTabManager.h. ◆ fMaterialPanel. TGeoTransientPanel* TGeoTabManager::fMaterialPanel. private . Definition at line 52 of file TGeoTabManager.h. ◆ fMatrixPanel. TGeoTransientPanel* TGeoTabManager::fMatrixPanel. private . Definition at line 53 of file TGeoTabManager.h. ◆ fMediumPanel. TGeoTransientPanel* TGeoTabManager::fMediumPanel. private . Definition at line 51 of file TGeoTabManager.h. ◆ fPad. TVirtualPad* TGeoTabManager::fPad. private . Definition at line 47 of file TGeoTabManager.h. ◆ fShapePanel. TGeoTransientPanel* TGeoTabManager::fShapePanel. private . Definition at line 50 of file TGeoTabManager.h. ◆ fTab. TGTab* TGeoTabManager::fTab. private . Definition at line 48 of file TGeoTabManager.h. ◆ fVolume. TGeoVolume* TGeoTabManager::fVolume. private . Definition at line 49 of file TGeoTabManager.h. ◆ fVolumeTab. TGCompositeFrame* TGeoTabManager::fVolumeTab. private . Definition at line 54 of file TGeoTabManager.h. geom/geombuilder/inc/TGeoTabManager.h; geom/geombuilder/src/TGeoTabManager.cxx. TGeoTabManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTabManager.html:16873,Guid,Guide,16873,doc/master/classTGeoTabManager.html,https://root.cern,https://root.cern/doc/master/classTGeoTabManager.html,1,['Guid'],['Guide']
Usability,"void TTreeIndex::UpdateFormulaLeaves ; (; const TTree * ; parent). overridevirtual . Called by TChain::LoadTree when the parent chain changes it's tree. ; Implements TVirtualIndex.; Definition at line 619 of file TTreeIndex.cxx. Member Data Documentation. ◆ fIndex. Long64_t* TTreeIndex::fIndex. protected . [fN] Index of sorted values ; Definition at line 36 of file TTreeIndex.h. ◆ fIndexValues. Long64_t* TTreeIndex::fIndexValues. protected . [fN] Sorted index values, higher 64bits ; Definition at line 34 of file TTreeIndex.h. ◆ fIndexValuesMinor. Long64_t* TTreeIndex::fIndexValuesMinor. protected . [fN] Sorted index values, lower 64bits ; Definition at line 35 of file TTreeIndex.h. ◆ fMajorFormula. TTreeFormula* TTreeIndex::fMajorFormula. protected . ! Pointer to major TreeFormula ; Definition at line 37 of file TTreeIndex.h. ◆ fMajorFormulaParent. TTreeFormula* TTreeIndex::fMajorFormulaParent. protected . ! Pointer to major TreeFormula in Parent tree (if any) ; Definition at line 39 of file TTreeIndex.h. ◆ fMajorName. TString TTreeIndex::fMajorName. protected . Index major name. ; Definition at line 31 of file TTreeIndex.h. ◆ fMinorFormula. TTreeFormula* TTreeIndex::fMinorFormula. protected . ! Pointer to minor TreeFormula ; Definition at line 38 of file TTreeIndex.h. ◆ fMinorFormulaParent. TTreeFormula* TTreeIndex::fMinorFormulaParent. protected . ! Pointer to minor TreeFormula in Parent tree (if any) ; Definition at line 40 of file TTreeIndex.h. ◆ fMinorName. TString TTreeIndex::fMinorName. protected . Index minor name. ; Definition at line 32 of file TTreeIndex.h. ◆ fN. Long64_t TTreeIndex::fN. protected . Number of entries. ; Definition at line 33 of file TTreeIndex.h. Libraries for TTreeIndex:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TTreeIndex.h; tree/treeplayer/src/TTreeIndex.cxx. TTreeIndex. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeIndex.html:27429,Guid,Guide,27429,doc/master/classTTreeIndex.html,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html,1,['Guid'],['Guide']
Usability,"voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooThresholdCategory.html:1977,Clear,Clear,1977,root/html526/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html526/RooThresholdCategory.html,1,['Clear'],['Clear']
Usability,"voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:6315,clear,clearShapeDirty,6315,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['clear'],['clearShapeDirty']
Usability,"voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2010-11-20 20:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html:2539,Clear,ClearExtra,2539,root/html528/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__BaseIntegratorOptions.html:2541,Clear,ClearExtra,2541,root/html530/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BaseIntegratorOptions.html:2541,Clear,ClearExtra,2541,root/html532/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t tmin, Double_t tmax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile3D.html:3579,Clear,ClearUnderflowAndOverflow,3579,root/html602/TProfile3D.html,https://root.cern,https://root.cern/root/html602/TProfile3D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t ymin, Double_t ymax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile.html:3964,Clear,ClearUnderflowAndOverflow,3964,root/html602/TProfile.html,https://root.cern,https://root.cern/root/html602/TProfile.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t zmin, Double_t zmax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile2D.html:3509,Clear,ClearUnderflowAndOverflow,3509,root/html602/TProfile2D.html,https://root.cern,https://root.cern/root/html602/TProfile2D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"voidTArrayI::AddAt(Int_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayI::Adopt(Int_t n, Int_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTArrayI::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1I.html:1979,Clear,Clear,1979,root/html534/TH1I.html,https://root.cern,https://root.cern/root/html534/TH1I.html,1,['Clear'],['Clear']
Usability,"voidTArrayI::AddAt(Int_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayI::Adopt(Int_t n, Int_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTArrayI::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2I.html:2328,Clear,Clear,2328,root/html534/TH2I.html,https://root.cern,https://root.cern/root/html534/TH2I.html,1,['Clear'],['Clear']
Usability,"voidTArrayI::AddAt(Int_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayI::Adopt(Int_t n, Int_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTArrayI::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3I.html:2198,Clear,Clear,2198,root/html534/TH3I.html,https://root.cern,https://root.cern/root/html534/TH3I.html,1,['Clear'],['Clear']
Usability,"voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGTextButton&operator=(const TGTextButton&); TGTextButton(const TGTextButton&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextButton.html:19084,Clear,ClearFlags,19084,root/html602/TGTextButton.html,https://root.cern,https://root.cern/root/html602/TGTextButton.html,2,['Clear'],['ClearFlags']
Usability,"voidTObject::AbstractMethod(const char* method) const; virtual Int_tAddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tAddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tAllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidBell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidChangeGC(GContext_t gc, GCValues_t* gval); virtual voidChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tCheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidClearWindow(); virtual voidClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseDisplay(); virtual voidClosePixmap(); virtual voidCloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidCopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidCopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tCreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tCreateCursor(ECursor cursor); virtual GC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11.html:1679,Clear,Clear,1679,root/html534/TGX11.html,https://root.cern,https://root.cern/root/html534/TGX11.html,3,['Clear'],['Clear']
Usability,"voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&operator=(const RooStats::SimpleInterval& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:3819,Simpl,SimpleInterval,3819,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMemb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleInterval.html:3819,Simpl,SimpleInterval,3819,root/html530/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2323,Clear,ClearInput,2323,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearInput']
Usability,"voidTSystem::AddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidTSystem::AddTimer(TTimer* t); virtual intTSystem::AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intTSystem::AnnounceUdpService(int port, int backlog); virtual intTSystem::AnnounceUnixService(int port, int backlog); virtual intTSystem::AnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tTSystem::ChangeDirectory(const char* path); virtual intTSystem::Chmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTSystem::CleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSystem::CloseConnection(int sock, Bool_t force = kFALSE); virtual voidTSystem::Closelog(); virtual intTSystem::ClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intTSystem::CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*TSystem::ConcatFileName(const char* dir, const char* name); virtual Bool_tConsistentWith(const char* path, void* dirptr); virtual voidTNamed::Copy(TObject& named) const; virtual intTSystem::CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidTSystem::DispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNetSystem.html:3891,Clear,Clear,3891,root/html532/TNetSystem.html,https://root.cern,https://root.cern/root/html532/TNetSystem.html,11,['Clear'],['Clear']
Usability,"voidTSystem::AddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidTSystem::AddTimer(TTimer* t); virtual intTSystem::AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intTSystem::AnnounceUdpService(int port, int backlog); virtual intTSystem::AnnounceUnixService(int port, int backlog); virtual intTSystem::AnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tTSystem::ChangeDirectory(const char* path); virtual intTSystem::Chmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTSystem::CleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSystem::CloseConnection(int sock, Bool_t force = kFALSE); virtual voidTSystem::Closelog(); virtual intTSystem::ClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intTSystem::CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*TSystem::ConcatFileName(const char* dir, const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intTSystem::CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidTSystem::DispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDCacheSystem.html:1919,Clear,Clear,1919,root/html532/TDCacheSystem.html,https://root.cern,https://root.cern/root/html532/TDCacheSystem.html,6,['Clear'],['Clear']
Usability,"void Activate ();  ; void DeActivate ();  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleSelection (Event_t *);  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void ProcessedEvent (Event_t *event);  ; virtual Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t);  ; virtual void SendMessage (const TGWindow *w, Longptr_t msg, Longptr_t parm1, Longptr_t parm2);  Send message (i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEventHandler.html:4699,Clear,Clear,4699,doc/master/classTGLEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGLEventHandler.html,1,['Clear'],['Clear']
Usability,"void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void StreamerNVirtual (TBu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:1852,clear,clear,1852,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['clear'],['clear']
Usability,"void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects that might be needed during the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *opt="""");  Detach this instance to its proofserv. ;  ; void DisableGoAsyn ();  Signal to disable related switches. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:7552,Clear,ClearInputData,7552,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,2,"['Clear', 'clear']","['ClearInputData', 'clear']"
Usability,"void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:2211,undo,undocked,2211,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,2,['undo'],['undocked']
Usability,"void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo parameters. ;  ; virtual void SetName (const char *name);  Sets name of the command. ;  ; virtual void SetRedoArgs (Int_t nargs,...);  Set redo parameters. ;  ; virtual void SetTitle (const char *title);  Sets des",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:3572,undo,undo,3572,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['undo'],['undo']
Usability,"void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; void ls (Option_t *option="""") const override;  ls this command and merged commands ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void Redo (Option_t *option="""");  Execute command and then merge commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:6648,undo,undo,6648,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"void SetDataSet (const char *dataset);  ; void SetEntries (Long64_t ent);  ; void SetEntryList (TObject *aList, Long64_t first=-1, Long64_t num=-1);  Set entry (or event) list for this element. ;  ; void SetFirst (Long64_t first);  ; void SetLookedUp ();  ; void SetMaxProcTime (Float_t mpt);  ; void SetNum (Long64_t num);  ; void SetTDSetOffset (Long64_t offset);  ; void SetValid ();  ; void Streamer (TBuffer &) override;  Stream an object of class TDSetElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Validate (Bool_t isTree);  Validate by opening the file. ;  ; void Validate (TDSetElement *elem);  Validate by checking against another element. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSetElement.html:4542,Clear,Clear,4542,doc/master/classTDSetElement.html,https://root.cern,https://root.cern/doc/master/classTDSetElement.html,1,['Clear'],['Clear']
Usability,"void SetLookedUp ();  Flag all the elements as looked-up, so to avoid opening the files if the functionality is not supported. ;  ; void SetObjName (const char *objname);  Set/change object name. ;  ; void SetSrvMaps (TList *srvmaps=0);  Set (or unset) the list for mapping servers coordinate for files. ;  ; void SetWriteV3 (Bool_t on=kTRUE);  Set/Reset the 'OldStreamer' bit in this instance and its elements. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this TTree. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Validate ();  Validate the TDSet by opening files. ;  ; void Validate (TDSet *dset);  Validate the TDSet against another TDSet. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSetProxy.html:5414,Clear,Clear,5414,doc/master/classTDSetProxy.html,https://root.cern,https://root.cern/doc/master/classTDSetProxy.html,1,['Clear'],['Clear']
Usability,"volume. Double_t Capacity() const; Computes the capacity of this [cm^3] as the capacity of its shape.; In case of assemblies, the capacity is computed as the sum of daughter's capacities. void CheckGeometry(Int_t nrays = 1, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0) const; Shoot nrays with random directions from starting point (startx, starty, startz); in the reference frame of this volume. Track each ray until exiting geometry, then; shoot backwards from exiting point and compare boundary crossing points. void CheckOverlaps(Double_t ovlp = 0.1, Option_t* option = """") const; Overlap checking tool. Check for illegal overlaps within a limit OVLP.; Use option=""s[number]"" to force overlap checking by sampling volume with; [number] points.; Ex: myVol->CheckOverlaps(0.01, ""s10000000""); // shoot 10000000 points; myVol->CheckOverlaps(0.01, ""s""); // shoot the default value of 1e6 points. void CleanAll(); Clean data of the volume. void ClearShape(); Clear the shape of this volume from the list held by the current manager. void CheckShapes(); check for negative parameters in shapes.; THIS METHOD LEAVES SOME GARBAGE NODES -> memory leak, to be fixed; printf(""---Checking daughters of volume %s\n"", GetName());. Int_t CountNodes(Int_t nlevels = 1000, Int_t option = 0); Count total number of subnodes starting from this volume, nlevels down; option = 0 (default) - count only once per volume; option = 1 - count every time; option = 2 - count volumes on visible branches; option = 3 - return maximum level counted already with option = 0. Bool_t IsAllInvisible() const; Return TRUE if volume and all daughters are invisible. void InvisibleAll(Bool_t flag = kTRUE); Make volume and each of it daughters (in)visible. Bool_t IsFolder() const; Return TRUE if volume contains nodes; return (GetNdaughters()?kTRUE:kFALSE);. Bool_t IsStyleDefault() const; check if the visibility and attributes are the default ones. Bool_t IsTopVolume() const; True if this is the top volume of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:22669,Clear,ClearShape,22669,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,2,['Clear'],"['Clear', 'ClearShape']"
Usability,volution in high resolution peak searching function (class TSpectrum) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlcreatedb.py Create a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlfilldb.py Fill run catalog with nfiles entries ;  sqlselect.CQuery example to MySQL test database ;  sqlselect.py Query example to MySQL test database ;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVACrossValida,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:158000,simpl,simple,158000,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simple']
Usability,"vt);  train network over a single event this uses the new event model ;  ; void TrainOneEventFast (Int_t ievt, Float_t *&branchVar, Int_t &type);  fast per-event training ;  ; void UpdateNetwork (const std::vector< Float_t > &desired, Double_t eventWeight=1.0);  update the network based on how closely the output matched the desired output ;  ; void UpdateNetwork (Double_t desired, Double_t eventWeight=1.0);  update the network based on how closely the output matched the desired output ;  ; void UpdatePriors ();  zjh ;  ; void UpdateRegulators ();  zjh ;  ; void UpdateSynapses ();  update synapse error fields and adjust the weights (if in sequential mode) ;  . Private Attributes; Int_t fBatchSize;  batch size, only matters if in batch learning mode ;  ; EBPTrainingMode fBPMode;  backprop learning mode (sequential or batch) ;  ; TString fBpModeS;  backprop learning mode option string (sequential or batch) ;  ; bool fCalculateErrors;  compute inverse hessian matrix at the end of the training ;  ; Double_t fDecayRate;  decay rate for above learning rate ;  ; std::vector< std::pair< Float_t, Float_t > > * fDeviationsFromTargets;  deviation from the targets, event weight ;  ; Bool_t fEpochMon;  create and fill epoch-wise monitoring histograms (makes outputfile big!) ;  ; Int_t fGA_nsteps;  GA settings: number of steps. ;  ; Int_t fGA_preCalc;  GA settings: number of pre-calc steps. ;  ; Double_t fGA_SC_factor;  GA settings: SC_factor. ;  ; Int_t fGA_SC_rate;  GA settings: SC_rate. ;  ; Int_t fGA_SC_steps;  GA settings: SC_steps. ;  ; Double_t fLastAlpha;  line search variable ;  ; Double_t fLearnRate;  learning rate for synapse weight adjustments ;  ; Double_t fPrior;  zjh ;  ; std::vector< Double_t > fPriorDev;  zjh ;  ; Int_t fResetStep;  reset time (how often we clear hessian matrix) ;  ; Float_t fSamplingEpoch;  fraction of epochs where sampling is used ;  ; Float_t fSamplingFraction;  fraction of events which is sampled for training ;  ; Bool_t fSamplingTesting;  The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:33879,learn,learning,33879,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,4,['learn'],['learning']
Usability,"w ; (; const TSelectorDraw & ; ). private . ◆ TSelectorDraw() [2/2]. TSelectorDraw::TSelectorDraw ; (; ). Default selector constructor. ; Definition at line 47 of file TSelectorDraw.cxx. ◆ ~TSelectorDraw(). TSelectorDraw::~TSelectorDraw ; (; ). override . Selector destructor. ; Definition at line 86 of file TSelectorDraw.cxx. Member Function Documentation. ◆ Begin(). void TSelectorDraw::Begin ; (; TTree * ; tree). overridevirtual . Called every time a loop on the tree(s) starts. ; Reimplemented from TSelector.; Definition at line 105 of file TSelectorDraw.cxx. ◆ Class(). static TClass * TSelectorDraw::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSelectorDraw::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSelectorDraw::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 121 of file TSelectorDraw.h. ◆ ClearFormula(). void TSelectorDraw::ClearFormula ; (; ). protectedvirtual . Delete internal buffers. ; Definition at line 941 of file TSelectorDraw.cxx. ◆ CompileVariables(). bool TSelectorDraw::CompileVariables ; (; const char * ; varexp = """", . const char * ; selection = """" . ). protectedvirtual . Compile input variables and selection expression. ; varexp is an expression of the general form e1:e2:e3 where e1,etc is a formula referencing a combination of the columns; Example: varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); selection is an expression with a combination of the columns; Example: selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized; Return false if any of the variable is not compilable. ; Definition at line 976 of file TSelectorDraw.cxx. ◆ DeclFileName(). static const char * TSelectorDraw::DeclFileName ; (; ). inlinestatic . ReturnsName of the file c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:18237,Clear,ClearFormula,18237,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['Clear'],['ClearFormula']
Usability,"w SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 242 of file LossFunction.h. ◆ ~AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::~AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 243 of file LossFunction.h. Member Function Documentation. ◆ CalculateLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateLoss ; (; LossFunctionEventInfo & ; e). virtual . absolute deviation, determine the loss for a single event ; Implements TMVA::LossFunction.; Definition at line 497 of file LossFunction.cxx. ◆ CalculateMeanLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateMeanLoss ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . absolute deviation, determine the mean loss for a collection of events ; Implements TMVA::LossFunction.; Definition at line 516 of file LossFunction.cxx. ◆ CalculateNetLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateNetLoss ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . absolute deviation, determine the net loss for a collection of events ; Implements TMVA::LossFunction.; Definition at line 505 of file LossFunction.cxx. ◆ Id(). Int_t TMVA::AbsoluteDeviationLossFunction::Id ; (; ). inlinevirtual . Implements TMVA::LossFunction.; Definition at line 252 of file LossFunction.h. ◆ Name(). TString TMVA::AbsoluteDeviationLossFunction::Name ; (; ). inlinevirtual . Implements TMVA::LossFunction.; Definition at line 251 of file LossFunction.h. Libraries for TMVA::AbsoluteDeviationLossFunction:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LossFunction.h; tmva/tmva/src/LossFunction.cxx. TMVAAbsoluteDeviationLossFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html:3060,Guid,Guide,3060,doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html,1,['Guid'],['Guide']
Usability,"w TList;; 699 return gPad;; 700 }; 701 ; 702 if (!fPrimitives) fPrimitives = new TList;; 703 TIter next(fPrimitives);; 704 while (auto obj = next()) {; 705 if (obj->InheritsFrom(TPad::Class())) {; 706 Int_t n = ((TPad*)obj)->GetNumber();; 707 if (n == subpadnumber) {; 708 return ((TPad*)obj)->cd();; 709 }; 710 }; 711 }; 712 return nullptr;; 713}; 714 ; 715////////////////////////////////////////////////////////////////////////////////; 716/// Delete all pad primitives.; 717///; 718/// If the bit kClearAfterCR has been set for this pad, the Clear function; 719/// will execute only after having pressed a CarriageReturn; 720/// Set the bit with `mypad->SetBit(TPad::kClearAfterCR)`; 721 ; 722void TPad::Clear(Option_t *option); 723{; 724 if (!IsEditable()) return;; 725 ; 726 R__LOCKGUARD(gROOTMutex);; 727 ; 728 if (!fPadPaint) {; 729 SafeDelete(fView);; 730 if (fPrimitives) fPrimitives->Clear(option);; 731 if (fFrame) {; 732 if (! ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; 733 fFrame = nullptr;; 734 }; 735 }; 736 if (fCanvas) fCanvas->Cleared(this);; 737 ; 738 cd();; 739 ; 740 if (TestBit(kClearAfterCR)) {; 741 // Intentional do not use the return value of getchar,; 742 // we just want to get it and forget it; 743 getchar();; 744 }; 745 ; 746 if (!gPad->IsBatch() && GetPainter()) GetPainter()->ClearDrawable();; 747 if (gVirtualPS && gPad == gPad->GetCanvas()) gVirtualPS->NewPage();; 748 ; 749 PaintBorder(GetFillColor(), kTRUE);; 750 fCrosshairPos = 0;; 751 fNumPaletteColor = 0;; 752 fCollideGrid.clear();; 753 fCGnx = 0;; 754 fCGny = 0;; 755 ResetBit(TGraph::kClipFrame);; 756}; 757 ; 758////////////////////////////////////////////////////////////////////////////////; 759/// Clipping routine: Cohen Sutherland algorithm.; 760///; 761/// - If Clip ==2 the segment is outside the boundary.; 762/// - If Clip ==1 the segment has one point outside the boundary.; 763/// - If Clip ==0 the segment is inside the boundary.; 764///; 765/// \param[inout] x[],y[] Segment coord",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:22250,Clear,Clear,22250,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,5,['Clear'],"['Clear', 'ClearDrawable', 'Cleared']"
Usability,"w all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t Buil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:61260,Clear,ClearPackage,61260,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['Clear'],['ClearPackage']
Usability,"w all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = 2, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:70512,Clear,ClearPackage,70512,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['Clear'],['ClearPackage']
Usability,"w all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:72670,Clear,ClearPackage,72670,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['Clear'],['ClearPackage']
Usability,"w all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:73343,Clear,ClearPackage,73343,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['Clear'],['ClearPackage']
Usability,"w all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:60718,Clear,ClearPackage,60718,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['Clear'],['ClearPackage']
Usability,"w classes are added to the existing directory.; Existing classes with the same name are replaced by the; new definition. If the directory dirname doest not exist,; same effect as ""new"".; If option = ""genreflex"", then use genreflex rather than rootcint to generate; the dictionary.; If, in addition to one of the 3 above options, the option ""+"" is specified,; the function will generate:; - a script called MAKEP to build the shared lib; - a dirnameLinkDef.h file; - rootcint will be run to generate a dirnameProjectDict.cxx file; - dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; - a shared lib dirname.so will be created.; If the option ""++"" is specified, the generated shared lib is dynamically; linked with the current executable module.; If the option ""+"" and ""nocompile"" are specified, the utility files are generated; as in the option ""+"" but they are not executed.; Example:; file.MakeProject(""demo"",""*"",""recreate++"");; - creates a new directory demo unless it already exist; - clear the previous directory content; - generate the xxx.h files for all classes xxx found in this file; and not yet known to the CINT dictionary.; - creates the build script MAKEP; - creates a LinkDef.h file; - runs rootcint generating demoProjectDict.cxx; - compiles demoProjectDict.cxx into demoProjectDict.o; - generates a shared lib demo.so; - dynamically links the shared lib demo.so to the executable; If only the option ""+"" had been specified, one can still link the; shared lib to the current executable module with:; gSystem->load(""demo/demo.so"");. The following feature is not yet enabled:; One can restrict the list of classes to be generated by using expressions like:; classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only. void ReadStreamerInfo(); Read the list of StreamerInfo from this file.; The key with name holding the list of TStreamerInfo objects is read.; The corresponding TClass objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:41825,clear,clear,41825,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,2,['clear'],['clear']
Usability,"w functionality).; What M does not:. histogramming; data handling; graphics. M is kept as a low-level package with optimal performance.; The main usages of M are. from a user’s program (such as int main()…); from a graphical data analysis tool such as HippoDraw@bib-HippoDraw. The most important goals of M in are. its numerical accuracy (equivalent to its Fortran version); its computational performance (equivalent to its Fortran version). For the design of the application programming interface (API) of M a two-way strategy was imposed:. a minimal required interface with minimum interaction with M objects and with appropriate usage of the standard library (STL): the user’s implementation of the FCNBase class, initial parameter values and uncertainties are provided by the to M user via std::vectors.; a rich interface which provides the user with more functionality such as interaction with parameters. The core of the minimization functionality and related tools (the kernel of M ) should be clearly separated from the user, who is interfacing via defined user interfaces (the API).; 2.3 Internal and external parameters; Each of the parameters to the \(\mbox{FCN}\) is defined by the user as belonging to one of the following types:. Freely variable: allowed to take on any value.; Variable with double sided limits: allowed to vary only between two limits specified by the user.; Variable with single sided limits: allowed to vary only between one upper or one lower limit specified by the user and unlimited to the other side.; Fixed: originally defined as variable, but now taking on only the value the parameter had at the moment it was fixed, or a value later assigned by the user.; Constant: taking on only one value as specified by the user. When using the minimal required interface, all variable parameters are free and unbound.; The user, in his \(\mbox{FCN}\), must of course be able to “see” all types of defined parameters, and he therefore has access to what we call the extern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:10401,clear,clearly,10401,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['clear'],['clearly']
Usability,"w functionality).; What M does not:. histogramming; data handling; graphics. M is kept as a low-level package with optimal performance.; The main usages of M are. from a user’s program (such as int main()…); from a graphical data analysis tool such as HippoDraw@bib-HippoDraw. The most important goals of M in are. its numerical accuracy (equivalent to its Fortran version); its computational performance (equivalent to its Fortran version). For the design of the application programming interface (API) of M a two-way strategy was imposed:. a minimal required interface with minimum interaction with M objects and with appropriate usage of the standard library (STL): the user’s implementation of the FCNBase class, initial parameter values and uncertainties are provided by the to M user via std::vectors.; a rich interface which provides the user with more functionality such as interaction with parameters. The core of the minimization functionality and related tools (the kernel of M ) should be clearly separated from the user, who is interfacing via defined user interfaces (the API).; 2.3 Internal and external parameters; Each of the parameters to the \(\mbox{FCN}\) is defined by the user as belonging to one of the following types:. Freely variable: allowed to take on any value.; Variable with double sided limits: allowed to vary only between two limits specified by the user.; Variable with single sided limits: allowed to vary only between one upper or one lower limit specified by the user and unlimited to the other side.; Fixed: originally defined as variable, but now taking on only the value the parameter had at the moment it was fixed, or a value later assigned by the user.; Constant: taking on only one value as specified by the user. When using the minimal required interface, all variable parameters are free and unbound.; The user, in their \(\mbox{FCN}\), must of course be able to “see” all types of defined parameters, and they therefore have access to what we call the e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:6365,clear,clearly,6365,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['clear'],['clearly']
Usability,"w the object communication mechanism can be used for handling the TCanvas’s mouse/key events in an interpreted class. With this demo you can fill histograms by hand:. Click the left button or move mouse with button pressed to fill histograms.; Use the right button of the mouse to reset the histograms. 26.6.4 Complex GUI Using Signals and Slots (guitest.C); Based on $ROOTSYS/test/guitest.cxx this example demonstrates:. All features of the original compiled guitest.cxx program.; Sophisticated use of signals and slots to build a complete user interface that can be executed either in the interpreter or as a compiled program. 27 Automatic HTML Documentation. THtml is ROOT’s documentation engine. It can be used to document your classes in a reference guide, and to convert your text or source files to HTML.; 27.1 Reference Guide; The Reference Guide for the ROOT classes at http://root.cern.ch/root/html/ has been generated by ROOT’s THtml class. Just as for ROOT’s classes, it can generate (and update) a reference guide for your classes, too. You document your classes using source code comments. All comments will be automatically put into a <pre></pre> environment to keep the indentation and line length. You can write “raw” HTML by enclosing comments in the keywords Begin_Html and End_Html.; To generate documentation for the class TObject you could run the following commands:; root[] THtml h; root[] h.SetInputDir(""$(ROOTSYS)"");; root[] h.MakeClass(""TObject"");; root[] h.CreateJavascript();; root[] h.CreateStylesheet();; The comments following the first comment of the form //____________________, before any method, is assumed to be the class description. As with any other documentation part, it has to be a continuous block of comments.; Any documented class will have an class index entry in the ClassIndex.html, showing their name with a link to their documentation page and a miniature description. This description for e.g. the class MyClass has to be given in MyClass's header ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1240236,guid,guide,1240236,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guide']
Usability,"w("""");; ; c->cd(2);; TGLParametricEquation *p2 = new TGLParametricEquation(""Limpet torus"",; ""cos(u) / (sqrt(2) + sin(v))"",; ""sin(u) / (sqrt(2) + sin(v))"",; ""1. / (sqrt(2) + cos(v))"",; -TMath::Pi(), TMath::Pi(),; -TMath::Pi(), TMath::Pi());; p2->Draw();; ; c->cd(3);; TGLParametricEquation *p3 = new TGLParametricEquation(""Klein bottle"",; klein_bottle,; 0., TMath::TwoPi(),; 0., TMath::TwoPi());; p3->Draw();; ; c->cd(4);; TGLParametricEquation *p4 = new TGLParametricEquation(""Helicoid"",; ""v * cos(u)"",; ""v * sin(u)"",; ""u"",; -3., 3.,; -3., 3.);; p4->Draw();; }; c#define c(i)Definition RSha256.hxx:101; Double_tdouble Double_tDefinition RtypesCore.h:59; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TGLVertex33 component (x/y/z) vertex class.Definition TGLUtil.h:84; TGLVertex3::XDouble_t X() constDefinition TGLUtil.h:119; TGLVertex3::ZDouble_t Z() constDefinition TGLUtil.h:123; TGLVertex3::YDouble_t Y() constDefinition TGLUtil.h:121; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetCanvasPreferGLvoid SetCanvasPreferGL(Bool_t prefer=kTRUE)Definition TStyle.h:341; TMathTMath.Definition TMathBase.h:35; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; v@ vDefinition rootcling_impl.cxx:3699; AuthorTimur Pocheptsov ; Definition in file glparametrics2.C. tutorialsglglparametrics2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glparametrics2_8C.html:4004,Guid,Guide,4004,doc/master/glparametrics2_8C.html,https://root.cern,https://root.cern/doc/master/glparametrics2_8C.html,1,['Guid'],['Guide']
Usability,"w(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidEmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); voidPSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGCheckButton&operator=(const TGCheckButton&); TGCheckButton(const TGCheckButton&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGCheckButton.html:19411,Clear,ClearFlags,19411,root/html602/TGCheckButton.html,https://root.cern,https://root.cern/root/html602/TGCheckButton.html,2,['Clear'],['ClearFlags']
Usability,"w(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidEmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); voidPSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGRadioButton&operator=(const TGRadioButton&); TGRadioButton(const TGRadioButton&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGRadioButton.html:19401,Clear,ClearFlags,19401,root/html602/TGRadioButton.html,https://root.cern,https://root.cern/root/html602/TGRadioButton.html,2,['Clear'],['ClearFlags']
Usability,"w), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DefVar () override;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the eventlist with given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEntryList * fElist;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawEntryList.html:11777,Clear,ClearFormula,11777,doc/master/classTProofDrawEntryList.html,https://root.cern,https://root.cern/doc/master/classTProofDrawEntryList.html,1,['Clear'],['ClearFormula']
Usability,"w), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DefVar () override;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the eventlist with given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEventList * fElist;  ; TList * fEventLists;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawEventList.html:11777,Clear,ClearFormula,11777,doc/master/classTProofDrawEventList.html,https://root.cern,https://root.cern/doc/master/classTProofDrawEventList.html,1,['Clear'],['ClearFormula']
Usability,"w), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DefVar () override;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the graph with the given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGraph * fGraph;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawGraph.html:11799,Clear,ClearFormula,11799,doc/master/classTProofDrawGraph.html,https://root.cern,https://root.cern/doc/master/classTProofDrawGraph.html,1,['Clear'],['ClearFormula']
Usability,"w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidAddTH3(const TH3* hist, TGLTH3Composition::ETH3BinShape shape = kBox); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidTH3C::Copy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLTH3Composition.html:1783,Clear,Clear,1783,root/html602/TGLTH3Composition.html,https://root.cern,https://root.cern/root/html602/TGLTH3Composition.html,2,['Clear'],['Clear']
Usability,"w* p, TGTable* table = 0, UInt_t w = 1, UInt_t h = 1, EHeaderType type = kColumnHeader, UInt_t option = 0); virtual~TGTableHeaderFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTableHeaderFrame.html:1662,Clear,Clear,1662,root/html528/TGTableHeaderFrame.html,https://root.cern,https://root.cern/root/html528/TGTableHeaderFrame.html,4,['Clear'],['Clear']
Usability,"w, Int_t wh)Embedded a canvas into a TRootEmbeddedCanvas.Definition TCanvas.cxx:1048; TCanvas::SetWindowSizevoid SetWindowSize(UInt_t ww, UInt_t wh)Set canvas window size.Definition TCanvas.cxx:2173; TCanvas::IsDrawnBool_t IsDrawn() constDefinition TCanvas.h:172; TCanvas::SetFolderstatic void SetFolder(Bool_t isfolder=kTRUE)If isfolder=kTRUE, the canvas can be browsed like a folder by default a canvas is not browsable.Definition TCanvas.cxx:2038; TCanvas::Browsevoid Browse(TBrowser *b) overrideBrowse.Definition TCanvas.cxx:685; TCanvas::GetWindowHeightUInt_t GetWindowHeight() constDefinition TCanvas.h:162; TCanvas::GetClickSelectedTObject * GetClickSelected() constDefinition TCanvas.h:142; TCanvas::ResetUpdatedvoid ResetUpdated()Definition TCanvas.h:193; TCanvas::EditorBarvirtual void EditorBar()Get editor bar.Definition TCanvas.cxx:1039; TCanvas::MakeDefCanvasstatic TCanvas * MakeDefCanvas()Static function to build a default canvas.Definition TCanvas.cxx:1516; TCanvas::ClearPadSavevoid ClearPadSave()Definition TCanvas.h:140; TCanvas::EnterLeavevoid EnterLeave(TPad *prevSelPad, TObject *prevSelObj)Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the curre...Definition TCanvas.cxx:1074; TCanvas::GetClickSelectedPadTVirtualPad * GetClickSelectedPad() constDefinition TCanvas.h:147; TCanvas::fYsizeRealSize_t fYsizeRealCurrent size of canvas along Y in CM.Definition TCanvas.h:36; TCanvas::Constructorvoid Constructor()Canvas default constructor.Definition TCanvas.cxx:191; TCanvas::SetClickSelectedPadvoid SetClickSelectedPad(TPad *pad)Definition TCanvas.h:211; TCanvas::ToggleAutoExecvirtual void ToggleAutoExec()Toggle pad auto execution of list of TExecs.Definition TCanvas.cxx:2422; TCanvas::TCanvasTCanvas(const TCanvas &canvas)=delete; TCanvas::fWindowTopXInt_t fWindowTopXTop X position of window (in pixels)Definition TCanvas.h:39; TCanvas::SetSelectedPadvoid SetSelectedPad(TPad *pad)Definition TCanvas.h:210; TCanvas::SetHighLight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:15509,Clear,ClearPadSavevoid,15509,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,2,['Clear'],"['ClearPadSave', 'ClearPadSavevoid']"
Usability,"w->WCtoNDC(xx,u);; 11113 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11114 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11115 xx[0] = xaxis->GetXmax();; 11116 view->WCtoNDC(xx,u);; 11117 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11118 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11119 gVirtualX->DrawPolyLine(2,line1);; 11120 if (nbins>1) {; 11121 xx[0] = xaxis->GetXmin();; 11122 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11123 xx[1] = yaxis->GetBinCenter(biny);; 11124 view->WCtoNDC(xx,u);; 11125 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11126 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11127 xx[0] = xaxis->GetXmax();; 11128 view->WCtoNDC(xx,u);; 11129 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11130 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11131 ; 11132 xx[0] = xaxis->GetXmin();; 11133 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11134 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11135 view->WCtoNDC(xx,u);; 11136 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11137 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11138 xx[0] = xaxis->GetXmax();; 11139 view->WCtoNDC(xx,u);; 11140 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11141 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11142 ; 11143 xx[0] = xaxis->GetXmin();; 11144 xx[2] = zaxis->GetBinCenter(binz);; 11145 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11146 view->WCtoNDC(xx,u);; 11147 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11148 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11149 xx[0] = xaxis->GetXmax();; 11150 view->WCtoNDC(xx,u);; 11151 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11152 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11153 ; 11154 endface1[0].SetX(line1[0].GetX());; 11155 endface1[0].SetY(line1[0].GetY());; 11156 endface1[1].SetX(line2[0].GetX());; 11157 endface1[1].SetY(line2[0].GetY());; 11158 endface1[2].SetX(line3[0].GetX());; 11159 endface1[2].SetY(line3[0].GetY());; 11160 endface1[3].SetX(line4[0].GetX());; 11161 endface1[3].SetY(li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:402967,ux,uxmin,402967,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"w->WCtoNDC(xx,u);; 11117 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11118 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11119 gVirtualX->DrawPolyLine(2,line1);; 11120 if (nbins>1) {; 11121 xx[0] = xaxis->GetXmin();; 11122 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11123 xx[1] = yaxis->GetBinCenter(biny);; 11124 view->WCtoNDC(xx,u);; 11125 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11126 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11127 xx[0] = xaxis->GetXmax();; 11128 view->WCtoNDC(xx,u);; 11129 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11130 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11131 ; 11132 xx[0] = xaxis->GetXmin();; 11133 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11134 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11135 view->WCtoNDC(xx,u);; 11136 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11137 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11138 xx[0] = xaxis->GetXmax();; 11139 view->WCtoNDC(xx,u);; 11140 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11141 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11142 ; 11143 xx[0] = xaxis->GetXmin();; 11144 xx[2] = zaxis->GetBinCenter(binz);; 11145 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11146 view->WCtoNDC(xx,u);; 11147 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11148 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11149 xx[0] = xaxis->GetXmax();; 11150 view->WCtoNDC(xx,u);; 11151 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11152 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11153 ; 11154 endface1[0].SetX(line1[0].GetX());; 11155 endface1[0].SetY(line1[0].GetY());; 11156 endface1[1].SetX(line2[0].GetX());; 11157 endface1[1].SetY(line2[0].GetY());; 11158 endface1[2].SetX(line3[0].GetX());; 11159 endface1[2].SetY(line3[0].GetY());; 11160 endface1[3].SetX(line4[0].GetX());; 11161 endface1[3].SetY(line4[0].GetY());; 11162 endface1[4].SetX(line1[0].GetX());; 11163 endface1[4].SetY(line1[0].GetY());; 11164 ; 11165 endface2[0].SetX(line1[1].GetX());; 11166 endface2[0].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:403136,ux,uxmin,403136,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"w->WCtoNDC(xx,u);; 11228 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11229 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11230 xx[1] = yaxis->GetXmax();; 11231 view->WCtoNDC(xx,u);; 11232 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11233 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11234 gVirtualX->DrawPolyLine(2,line1);; 11235 if (nbins>1) {; 11236 xx[1] = yaxis->GetXmin();; 11237 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11238 xx[0] = xaxis->GetBinCenter(binx);; 11239 view->WCtoNDC(xx,u);; 11240 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11241 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11242 xx[1] = yaxis->GetXmax();; 11243 view->WCtoNDC(xx,u);; 11244 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11245 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11246 ; 11247 xx[1] = yaxis->GetXmin();; 11248 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11249 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11250 view->WCtoNDC(xx,u);; 11251 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11252 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11253 xx[1] = yaxis->GetXmax();; 11254 view->WCtoNDC(xx,u);; 11255 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11256 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11257 ; 11258 xx[1] = yaxis->GetXmin();; 11259 xx[2] = zaxis->GetBinCenter(binz);; 11260 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11261 view->WCtoNDC(xx,u);; 11262 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11263 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11264 xx[1] = yaxis->GetXmax();; 11265 view->WCtoNDC(xx,u);; 11266 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11267 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11268 ; 11269 endface1[0].SetX(line1[0].GetX());; 11270 endface1[0].SetY(line1[0].GetY());; 11271 endface1[1].SetX(line2[0].GetX());; 11272 endface1[1].SetY(line2[0].GetY());; 11273 endface1[2].SetX(line3[0].GetX());; 11274 endface1[2].SetY(line3[0].GetY());; 11275 endface1[3].SetX(line4[0].GetX());; 11276 endface1[3].SetY(li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:407626,ux,uxmin,407626,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"w->WCtoNDC(xx,u);; 11232 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11233 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11234 gVirtualX->DrawPolyLine(2,line1);; 11235 if (nbins>1) {; 11236 xx[1] = yaxis->GetXmin();; 11237 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11238 xx[0] = xaxis->GetBinCenter(binx);; 11239 view->WCtoNDC(xx,u);; 11240 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11241 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11242 xx[1] = yaxis->GetXmax();; 11243 view->WCtoNDC(xx,u);; 11244 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11245 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11246 ; 11247 xx[1] = yaxis->GetXmin();; 11248 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11249 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11250 view->WCtoNDC(xx,u);; 11251 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11252 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11253 xx[1] = yaxis->GetXmax();; 11254 view->WCtoNDC(xx,u);; 11255 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11256 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11257 ; 11258 xx[1] = yaxis->GetXmin();; 11259 xx[2] = zaxis->GetBinCenter(binz);; 11260 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11261 view->WCtoNDC(xx,u);; 11262 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11263 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11264 xx[1] = yaxis->GetXmax();; 11265 view->WCtoNDC(xx,u);; 11266 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11267 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11268 ; 11269 endface1[0].SetX(line1[0].GetX());; 11270 endface1[0].SetY(line1[0].GetY());; 11271 endface1[1].SetX(line2[0].GetX());; 11272 endface1[1].SetY(line2[0].GetY());; 11273 endface1[2].SetX(line3[0].GetX());; 11274 endface1[2].SetY(line3[0].GetY());; 11275 endface1[3].SetX(line4[0].GetX());; 11276 endface1[3].SetY(line4[0].GetY());; 11277 endface1[4].SetX(line1[0].GetX());; 11278 endface1[4].SetY(line1[0].GetY());; 11279 ; 11280 endface2[0].SetX(line1[1].GetX());; 11281 endface2[0].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:407795,ux,uxmin,407795,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"w->WCtoNDC(xx,u);; 11342 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11343 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11344 xx[2] = zaxis->GetXmax();; 11345 view->WCtoNDC(xx,u);; 11346 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11347 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11348 gVirtualX->DrawPolyLine(2,line1);; 11349 if (nbins>1) {; 11350 xx[2] = zaxis->GetXmin();; 11351 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11352 xx[0] = xaxis->GetBinCenter(binx);; 11353 view->WCtoNDC(xx,u);; 11354 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11355 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11356 xx[2] = zaxis->GetXmax();; 11357 view->WCtoNDC(xx,u);; 11358 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11359 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11360 ; 11361 xx[2] = zaxis->GetXmin();; 11362 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11363 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11364 view->WCtoNDC(xx,u);; 11365 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11366 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11367 xx[2] = zaxis->GetXmax();; 11368 view->WCtoNDC(xx,u);; 11369 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11370 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11371 ; 11372 xx[2] = zaxis->GetXmin();; 11373 xx[1] = yaxis->GetBinCenter(biny);; 11374 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11375 view->WCtoNDC(xx,u);; 11376 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11377 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11378 xx[2] = zaxis->GetXmax();; 11379 view->WCtoNDC(xx,u);; 11380 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11381 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11382 ; 11383 endface1[0].SetX(line1[0].GetX());; 11384 endface1[0].SetY(line1[0].GetY());; 11385 endface1[1].SetX(line2[0].GetX());; 11386 endface1[1].SetY(line2[0].GetY());; 11387 endface1[2].SetX(line3[0].GetX());; 11388 endface1[2].SetY(line3[0].GetY());; 11389 endface1[3].SetX(line4[0].GetX());; 11390 endface1[3].SetY(li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:412276,ux,uxmin,412276,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"w->WCtoNDC(xx,u);; 11346 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11347 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11348 gVirtualX->DrawPolyLine(2,line1);; 11349 if (nbins>1) {; 11350 xx[2] = zaxis->GetXmin();; 11351 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11352 xx[0] = xaxis->GetBinCenter(binx);; 11353 view->WCtoNDC(xx,u);; 11354 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11355 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11356 xx[2] = zaxis->GetXmax();; 11357 view->WCtoNDC(xx,u);; 11358 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11359 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11360 ; 11361 xx[2] = zaxis->GetXmin();; 11362 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11363 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11364 view->WCtoNDC(xx,u);; 11365 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11366 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11367 xx[2] = zaxis->GetXmax();; 11368 view->WCtoNDC(xx,u);; 11369 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11370 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11371 ; 11372 xx[2] = zaxis->GetXmin();; 11373 xx[1] = yaxis->GetBinCenter(biny);; 11374 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11375 view->WCtoNDC(xx,u);; 11376 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11377 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11378 xx[2] = zaxis->GetXmax();; 11379 view->WCtoNDC(xx,u);; 11380 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11381 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11382 ; 11383 endface1[0].SetX(line1[0].GetX());; 11384 endface1[0].SetY(line1[0].GetY());; 11385 endface1[1].SetX(line2[0].GetX());; 11386 endface1[1].SetY(line2[0].GetY());; 11387 endface1[2].SetX(line3[0].GetX());; 11388 endface1[2].SetY(line3[0].GetY());; 11389 endface1[3].SetX(line4[0].GetX());; 11390 endface1[3].SetY(line4[0].GetY());; 11391 endface1[4].SetX(line1[0].GetX());; 11392 endface1[4].SetY(line1[0].GetY());; 11393 ; 11394 endface2[0].SetX(line1[1].GetX());; 11395 endface2[0].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:412445,ux,uxmin,412445,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,w.h. ◆ fMarkedEnd. TGLongPosition TGTextView::fMarkedEnd. protected . end position of marked text ; Definition at line 41 of file TGTextView.h. ◆ fMarkedFromX. Bool_t TGTextView::fMarkedFromX. protected . true if text is marked from x ; Definition at line 34 of file TGTextView.h. ◆ fMarkedFromY. Bool_t TGTextView::fMarkedFromY. protected . true if text is marker from y ; Definition at line 35 of file TGTextView.h. ◆ fMarkedStart. TGLongPosition TGTextView::fMarkedStart. protected . start position of marked text ; Definition at line 40 of file TGTextView.h. ◆ fMaxAscent. Int_t TGTextView::fMaxAscent. protected . maximum ascent in font ; Definition at line 28 of file TGTextView.h. ◆ fMaxDescent. Int_t TGTextView::fMaxDescent. protected . maximum descent in font ; Definition at line 29 of file TGTextView.h. ◆ fMaxWidth. Int_t TGTextView::fMaxWidth. protected . maximum width of character in font ; Definition at line 30 of file TGTextView.h. ◆ fNormGC. TGGC TGTextView::fNormGC. protected . graphics context for drawing text ; Definition at line 31 of file TGTextView.h. ◆ fReadOnly. Bool_t TGTextView::fReadOnly. protected . text cannot be edited ; Definition at line 39 of file TGTextView.h. ◆ fScrollTimer. TViewTimer* TGTextView::fScrollTimer. protected . scrollbar timer ; Definition at line 42 of file TGTextView.h. ◆ fSelbackGC. TGGC TGTextView::fSelbackGC. protected . graphics context for drawing marked background ; Definition at line 33 of file TGTextView.h. ◆ fSelGC. TGGC TGTextView::fSelGC. protected . graphics context for drawing marked text ; Definition at line 32 of file TGTextView.h. ◆ fText. TGText* TGTextView::fText. protected . text buffer ; Definition at line 25 of file TGTextView.h. Libraries for TGTextView:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTextView.h; gui/gui/src/TGTextView.cxx. TGTextView. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:58020,Guid,Guide,58020,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,1,['Guid'],['Guide']
Usability,"w::CreateView(11, nullptr, nullptr);; 851 // Set the view to perform a first autorange (frame) draw.; 852 // TViewer3DPad will revert view to normal painting after this; 853 view->SetAutoRange(kTRUE);; 854 if (has_pad); 855 gPad->Update();; 856 }; 857 if (!opt.Contains(""same"")); 858 Paint(""range"");; 859 else; 860 Paint(opt);; 861 view->SetAutoRange(kFALSE);; 862 // If we are drawing into the pad, then the view needs to be; 863 // set to perspective; 864 // if (!view->IsPerspective()) view->SetPerspective();; 865 ; 866 fLastVolume = fTopVolume;; 867 ; 868 // Create a 3D viewer to paint us; 869 gPad->GetViewer3D(option);; 870}; 871 ; 872////////////////////////////////////////////////////////////////////////////////; 873/// Draw a shape.; 874 ; 875void TGeoPainter::DrawShape(TGeoShape *shape, Option_t *option); 876{; 877 TString opt = option;; 878 opt.ToLower();; 879 fPaintingOverlaps = kFALSE;; 880 fOverlap = nullptr;; 881 fIsPaintingShape = kTRUE;; 882 ; 883 Bool_t has_pad = (gPad == nullptr) ? kFALSE : kTRUE;; 884 // Clear pad if option ""same"" not given; 885 if (!gPad) {; 886 gROOT->MakeDefCanvas();; 887 }; 888 if (!opt.Contains(""same"")); 889 gPad->Clear();; 890 // append this shape to pad; 891 shape->AppendPad(option);; 892 ; 893 // Create a 3-D view; 894 TView *view = gPad->GetView();; 895 if (!view) {; 896 view = TView::CreateView(11, nullptr, nullptr);; 897 // Set the view to perform a first autorange (frame) draw.; 898 // TViewer3DPad will revert view to normal painting after this; 899 view->SetAutoRange(kTRUE);; 900 if (has_pad); 901 gPad->Update();; 902 }; 903 PaintShape(shape, ""range"");; 904 view->SetAutoRange(kFALSE);; 905 view->SetPerspective();; 906 // Create a 3D viewer to paint us; 907 gPad->GetViewer3D(option);; 908}; 909 ; 910////////////////////////////////////////////////////////////////////////////////; 911/// Draw an overlap.; 912 ; 913void TGeoPainter::DrawOverlap(void *ovlp, Option_t *option); 914{; 915 TString opt = option;; 916 fIsPaintingShap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:28410,Clear,Clear,28410,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"w::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TView::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 127 of file TView.h. ◆ ToggleRulers(). virtual void TView::ToggleRulers ; (; TVirtualPad * ; pad = nullptr). pure virtual . Implemented in TView3D. ◆ ToggleZoom(). virtual void TView::ToggleZoom ; (; TVirtualPad * ; pad = nullptr). pure virtual . Implemented in TView3D. ◆ Top(). virtual void TView::Top ; (; ). pure virtual . Implemented in TView3D. ◆ TopView(). virtual void TView::TopView ; (; TVirtualPad * ; pad = nullptr). pure virtual . Implemented in TView3D. ◆ UnZoom(). virtual void TView::UnZoom ; (; ). pure virtual . Implemented in TView3D. ◆ UnzoomView(). virtual void TView::UnzoomView ; (; TVirtualPad * ; pad = nullptr, . Double_t ; unZoomFactor = 1.25 . ). pure virtual . Implemented in TView3D. ◆ WCtoNDC() [1/2]. virtual void TView::WCtoNDC ; (; const Double_t * ; pw, . Double_t * ; pn . ). pure virtual . Implemented in TView3D. ◆ WCtoNDC() [2/2]. virtual void TView::WCtoNDC ; (; const Float_t * ; pw, . Float_t * ; pn . ). pure virtual . Implemented in TView3D. ◆ Zoom(). virtual void TView::Zoom ; (; ). pure virtual . Implemented in TView3D. ◆ ZoomIn(). virtual void TView::ZoomIn ; (; ). pure virtual . Implemented in TView3D. ◆ ZoomMove(). virtual void TView::ZoomMove ; (; ). pure virtual . Implemented in TView3D. ◆ ZoomOut(). virtual void TView::ZoomOut ; (; ). pure virtual . Implemented in TView3D. ◆ ZoomView(). virtual void TView::ZoomView ; (; TVirtualPad * ; pad = nullptr, . Double_t ; zoomFactor = 1.25 . ). pure virtual . Implemented in TView3D. Libraries for TView:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TView.h; graf2d/gpad/src/TView.cxx. TView. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTView.html:28951,Guid,Guide,28951,doc/master/classTView.html,https://root.cern,https://root.cern/doc/master/classTView.html,1,['Guid'],['Guide']
Usability,w::fSelectMultiple. protected . True if selection has a variable index. ; Definition at line 61 of file TSelectorDraw.h. ◆ fTree. TTree* TSelectorDraw::fTree. protected . Pointer to current Tree. ; Definition at line 38 of file TSelectorDraw.h. ◆ fTreeElist. TObject* TSelectorDraw::fTreeElist. protected . Pointer to Tree Event list. ; Definition at line 42 of file TSelectorDraw.h. ◆ fTreeElistArray. TEntryListArray* TSelectorDraw::fTreeElistArray. protected . ! Pointer to Tree Event list array ; Definition at line 43 of file TSelectorDraw.h. ◆ fVal. Double_t** TSelectorDraw::fVal. protected . ![fSelectedRows][fDimension] Local buffer for the variables ; Definition at line 57 of file TSelectorDraw.h. ◆ fValSize. Int_t TSelectorDraw::fValSize. protected . Definition at line 58 of file TSelectorDraw.h. ◆ fVar. TTreeFormula** TSelectorDraw::fVar. protected . ![fDimension] Array of pointers to variables formula ; Definition at line 39 of file TSelectorDraw.h. ◆ fVarMultiple. bool* TSelectorDraw::fVarMultiple. protected . ![fDimension] True if fVar[i] has a variable index ; Definition at line 60 of file TSelectorDraw.h. ◆ fVmax. Double_t* TSelectorDraw::fVmax. protected . ![fDimension] Maxima of varexp columns ; Definition at line 55 of file TSelectorDraw.h. ◆ fVmin. Double_t* TSelectorDraw::fVmin. protected . ![fDimension] Minima of varexp columns ; Definition at line 54 of file TSelectorDraw.h. ◆ fW. Double_t* TSelectorDraw::fW. protected . ![fSelectedRows]Local buffer for weights ; Definition at line 59 of file TSelectorDraw.h. ◆ fWeight. Double_t TSelectorDraw::fWeight. protected . Tree weight (see TTree::SetWeight) ; Definition at line 56 of file TSelectorDraw.h. Libraries for TSelectorDraw:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TSelectorDraw.h; tree/treeplayer/src/TSelectorDraw.cxx. TSelectorDraw. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:31664,Guid,Guide,31664,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['Guid'],['Guide']
Usability,"w::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCombiTransEditor.html:22179,undo,undoing,22179,root/html528/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html528/TGeoCombiTransEditor.html,1,['undo'],['undoing']
Usability,"w::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoCombiTransEditor.html:22279,undo,undoing,22279,root/html530/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html530/TGeoCombiTransEditor.html,1,['undo'],['undoing']
Usability,"w::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoCombiTransEditor.html:22279,undo,undoing,22279,root/html532/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html532/TGeoCombiTransEditor.html,1,['undo'],['undoing']
Usability,"w::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPconEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPconEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given pcon. void CreateSections(Int_t inew); Change dynamically the number of sections. Bool_t CheckSections(Bool_t change = kFALSE); Check validity of sections. void UpdateSections(); Update sections according fShape. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoSectionChange(Int_t i); Change parameters of section isect;. void DoNz(); Change number of sections. void DoPhi(); Change phi range. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoPconEditor.h 21425 2007-12-17 15:59:27Z brun $ » Last generated: 2010-11-08 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPconEditor.html:21973,undo,undoing,21973,root/html528/TGeoPconEditor.html,https://root.cern,https://root.cern/root/html528/TGeoPconEditor.html,1,['undo'],['undoing']
Usability,"w::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPconEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPconEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given pcon. void CreateSections(Int_t inew); Change dynamically the number of sections. Bool_t CheckSections(Bool_t change = kFALSE); Check validity of sections. void UpdateSections(); Update sections according fShape. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoSectionChange(Int_t i); Change parameters of section isect;. void DoNz(); Change number of sections. void DoPhi(); Change phi range. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoPconEditor.h 21425 2007-12-17 15:59:27Z brun $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPconEditor.html:22073,undo,undoing,22073,root/html530/TGeoPconEditor.html,https://root.cern,https://root.cern/root/html530/TGeoPconEditor.html,1,['undo'],['undoing']
Usability,"w::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPconEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPconEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given pcon. void CreateSections(Int_t inew); Change dynamically the number of sections. Bool_t CheckSections(Bool_t change = kFALSE); Check validity of sections. void UpdateSections(); Update sections according fShape. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoSectionChange(Int_t i); Change parameters of section isect;. void DoNz(); Change number of sections. void DoPhi(); Change phi range. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoPconEditor.h 21425 2007-12-17 15:59:27Z brun $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPconEditor.html:22073,undo,undoing,22073,root/html532/TGeoPconEditor.html,https://root.cern,https://root.cern/root/html532/TGeoPconEditor.html,1,['undo'],['undoing']
Usability,"w;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGCheckButton * fAutoUpdate;  ; TGComboBox * fComboBox;  ; TRootEmbeddedCanvas * fHistCanvas;  canvas to draw the histogram ;  ; TH1D * fHisto;  histogram of image pixels ;  ; TVirtualPad * fImagePad;  ; LimitLine * fLimitLine [2];  ; Double_t fMaxValue;  max value of image ;  ; Double_t fMinValue;  min value of image ;  ; PaintPalette * fPaintPalette;  ; TImagePalette * fPalette;  current palette ;  ; TRootEmbeddedCanvas * fPaletteCanvas;  canvas to draw the current palette ;  ; TList * fPaletteList;  list of palettes for undo and redo ;  ; Int_t fRampFactor;  ; TGRadioButton * fRamps [3];  ; TGTextButton * fReDoButton;  ; TGCheckButton * fStepButton;  ; TGTextButton * fUnDoButton;  ;  Protected Attributes inherited from TPaletteEditor; TAttImage * fAttImage {nullptr};  ;  Protected Attributes inherited from TGMainFrame; TList * fBindList;  list with key bindings ;  ; TString fClassName;  WM class name. ;  ; Atom_t * fDNDTypeList;  handles DND types ;  ; TString fIconName;  icon name ;  ; TString fIconPixmap;  icon pixmap name ;  ; UInt_t fMWMFuncs;  MWM functions. ;  ; UInt_t fMWMInput;  MWM input modes. ;  ; UInt_t fMWMValue;  MWM decoration hints. ;  ; TString fResourceName;  WM resource name. ;  ; TString fWindowName;  window name ;  ; UInt_t fWMHeight;  WM height. ;  ; UInt_t fWMHeightInc;  WM height increments. ;  ; EInitialState fWMInitState;  WM initial state. ;  ; UInt_t fWMMaxHeight;  WM max height. ;  ; UInt_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:31274,undo,undo,31274,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,1,['undo'],['undo']
Usability,"wDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 361 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TGeoManager* ROOT::RGeomViewer::fGeoManager {nullptr}. protected . ! geometry to show ; Definition at line 31 of file RGeomViewer.hxx. ◆ fInfoActive. bool ROOT::RGeomViewer::fInfoActive {false}. protected . ! true when info page active and node info need to be provided ; Definition at line 37 of file RGeomViewer.hxx. ◆ fSelectedVolume. std::string ROOT::RGeomViewer::fSelectedVolume. protected . ! name of selected volume ; Definition at line 32 of file RGeomViewer.hxx. ◆ fShowColumns. bool ROOT::RGeomViewer::fShowColumns {true}. protected . ! show columns in hierarchy ; Definition at line 35 of file RGeomViewer.hxx. ◆ fShowHierarchy. bool ROOT::RGeomViewer::fShowHierarchy {true}. protected . ! if hierarchy visible by default ; Definition at line 34 of file RGeomViewer.hxx. ◆ fTitle. std::string ROOT::RGeomViewer::fTitle. protected . ! title of geometry viewer ; Definition at line 36 of file RGeomViewer.hxx. ◆ fWebHierarchy. std::shared_ptr<RGeomHierarchy> ROOT::RGeomViewer::fWebHierarchy. protected . ! web handle for hierarchy part ; Definition at line 41 of file RGeomViewer.hxx. ◆ fWebWindow. std::shared_ptr<RWebWindow> ROOT::RGeomViewer::fWebWindow. protected . ! web window to show geometry ; Definition at line 39 of file RGeomViewer.hxx. Libraries for ROOT::RGeomViewer:. [legend]; The documentation for this class was generated from the following files:; geom/webviewer/inc/ROOT/RGeomViewer.hxx; geom/webviewer/src/RGeomViewer.cxx. ROOTRGeomViewer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:11929,Guid,Guide,11929,doc/master/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html,1,['Guid'],['Guide']
Usability,"wGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); Create a dockable frame widget. ~TGDockableFrame(); Cleanup dockable frame. void AddFrame(TGFrame* f, TGLayoutHints* hints); Add frame to dockable frame container. Frame and hints are NOT adopted. void UndockContainer(); Undock container. void DockContainer(Int_t del = kTRUE); Dock container back to TGDockableFrame. void ShowContainer(); Show dock container. void HideContainer(); Hide dock container. Bool_t ProcessMessage(Long_t , Long_t , Long_t ); Process dockable frame messages. void EnableUndock(Bool_t onoff); Enable undocking. void EnableHide(Bool_t onoff); Enable hiding. void SetWindowName(const char* name); Set window name so it appear as title of the undock window. void SavePrimitive(ostream& out, Option_t* option = """"); Save a dockable frame widget as a C++ statement(s) on output stream out. TGUndockedFrame& operator=(const TGDockableFrame& ). TGDockableFrame(const TGDockableFrame& ). void Docked(); { Emit(""Docked()""); }. void Undocked(); { Emit(""Undocked()""); }. void EnableUndock(Bool_t onoff). void EnableHide(Bool_t onoff). Bool_t IsUndocked() const; { return (fFrame != 0); }. Bool_t IsHidden() const; { return fHidden; }. Bool_t IsFixedSize() const; { return fFixedSize; }. void SetFixedSize(Bool_t fixed); { fFixedSize = fixed; }. TGCompositeFrame * GetContainer() const; { return fContainer; }. TGUndockedFrame * GetUndocked() const; { return fFrame; }. » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-04-23 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDockableFrame.html:21709,Undo,Undocked,21709,root/html534/TGDockableFrame.html,https://root.cern,https://root.cern/root/html534/TGDockableFrame.html,2,['Undo'],['Undocked']
Usability,"wRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); Draw lines in exposed region. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HandleTimer(TTimer* t); Handle scroll timer. Bool_t HandleButton(Event_t* event); Handle mouse button event in text editor. Bool_t HandleDoubleClick(Event_t* event); handle double click. Bool_t HandleMotion(Event_t* event); Handle mouse motion event in the text editor widget. Bool_t HandleSelectionClear(Event_t* event); Handle selection clear event. Bool_t HandleSelectionRequest(Event_t* event); Handle request to send current clipboard contents to requestor window. Bool_t HandleDNDDrop(TDNDData* data); Handle Drop event. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle Drag position event. Atom_t HandleDNDEnter(Atom_t* typelist); Handle Drag Enter event. Bool_t HandleDNDLeave(); Handle Drag Leave event. void Mark(Long_t xPos, Long_t yPos); Mark a text region from xPos to yPos. void UnMark(); Clear marked region. void AdjustWidth(); Adjust widget width to longest line. void Layout(); Layout the components of view. void HLayout(); Horizontal layout of widgets (canvas, scrollbar). void VLayout(); Vertical layout of widgets (canvas, scrollbar). void SetSBRange(Int_t direction); Set the range for the kVertical or kHorizontal scrollbar. void SetHsbPosition(Long_t newPos); Set position of horizontal scrollbar. void SetVsbPosition(Long_t newPos); Set position of vertical scrollbar. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. void ShowBottom(); Show bottom of the page. void ShowTop(); Show top of the page. void SetForegroundColor(Pixel_t ); Set text color. const TGGC & GetDefaultGC(); Return default graphics context in use. const TGGC & GetDefaultSelectedGC(); Return selection graphics context in use. const TGGC & GetDefaultSelectedBackgroundGC(); Return graphics context for highlighted frame background. void SavePrimitive(ostream& out, Option_t* = """");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextView.html:27281,Clear,Clear,27281,root/html528/TGTextView.html,https://root.cern,https://root.cern/root/html528/TGTextView.html,6,['Clear'],['Clear']
Usability,"want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_back('#');; // re-print the line with the progress bar; std::cout << ""\r["" << std::left << std::setw(barWidth) << progressBar << ']' << std::flush;; });; ; // ## Running the analysis; // So far we told RDataFrame what we want to happen during the event-loop, but we have not actually run any of those; // actions: the TBrowser is still empty, the progress bar has not been printed even once, and we haven't produced; // a single data-point!; // As usual with RDataFrame, the event-loop is triggered by accessing the contents of a TResultProxy for the first; // time. Let's run!; std::cout << ""Analysis running..."" << std::endl;; h->Draw(); // the final, complete result will be drawn after the event-loop has completed.; std::cout << ""\nDone!"" << std::endl;; ; // Finally, some book-keeping: in the TMemFile that we are using as TBrowser directory, we substitute the partial; // result with a clone of the final result (the ""original"" final result will be deleted at the end of the macro).; dfDirectory->Clear();; auto clone = static_cast<TH1D *>(h->Clone());; clone->SetDirectory(nullptr);; dfDirectory->Add(clone);; if (!browserPad); return; // in case root -b was invoked; browserPad->cd();; clone->Draw();; browserPad->Update();; }; d#define d(i)Definition RSha256.hxx:102; h#d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:5604,progress bar,progress bar,5604,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,2,['progress bar'],['progress bar']
Usability,"ward(). template<typename T > . RResult & ROOT::Experimental::RResult< T >::Forward ; (; RError::RLocation && ; sourceLocation). inline . Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ; Definition at line 226 of file RError.hxx. ◆ Inspect(). template<typename T > . const T & ROOT::Experimental::RResult< T >::Inspect ; (; ). inline . If the operation was successful, returns a const reference to the inner type. ; If there was an error, Inspect() instead throws an exception. ; Definition at line 234 of file RError.hxx. ◆ operator bool(). template<typename T > . ROOT::Experimental::RResult< T >::operator bool ; (; ). inlineexplicit . Definition at line 251 of file RError.hxx. ◆ operator=() [1/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; const RResult< T > & ; other). delete . ◆ operator=() [2/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; RResult< T > && ; other). default . ◆ ThrowOnError(). template<typename T > . void ROOT::Experimental::RResult< T >::ThrowOnError ; (; ). inlineprivate . Definition at line 200 of file RError.hxx. ◆ Unwrap(). template<typename T > . T ROOT::Experimental::RResult< T >::Unwrap ; (; ). inline . If the operation was successful, returns the inner type by value. ; For move-only types, Unwrap can only be called once, as it yields ownership of the inner value to the caller using std::move, potentially leaving the RResult in an unspecified state.; If there was an error, Unwrap() instead throws an exception. ; Definition at line 246 of file RError.hxx. Member Data Documentation. ◆ fValue. template<typename T > . T ROOT::Experimental::RResult< T >::fValue. private . The result value in case of successful execution. ; Definition at line 197 of file RError.hxx. core/foundation/v7/inc/ROOT/RError.hxx. ROOTExperimentalRResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:7862,Guid,Guide,7862,doc/master/classROOT_1_1Experimental_1_1RResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html,1,['Guid'],['Guide']
Usability,"ways considered to be dirty. void setACleanADirty(Bool_t flag); This global switch changes the cache mode of all objects marked as 'always clean'; to 'always dirty'. For internal use in RooRealIntegral. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's value and/or shape. void addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register a list of RooAbsArg as servers to us by calls; addServer() for each arg in the list. void removeServer(RooAbsArg& server, Bool_t force = kFALSE); Unregister another RooAbsArg as a server to us, ie, declare that; we no longer depend on its value and shape. void replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); Replace 'oldServer' with 'newServer'. void change",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:18633,clear,clear,18633,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,['clear'],['clear']
Usability,"ween the start a...Definition TStopwatch.cxx:110; TStopwatch::ResetRealTimevoid ResetRealTime(Double_t time=0)Definition TStopwatch.h:54; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::fTotalRealTimeDouble_t fTotalRealTimeDefinition TStopwatch.h:38; TStopwatch::CounterInt_t Counter() constDefinition TStopwatch.h:50; TStopwatch::GetRealTimestatic Double_t GetRealTime()Private static method returning system realtime.Definition TStopwatch.cxx:139; TStopwatch::fStartRealTimeDouble_t fStartRealTimeDefinition TStopwatch.h:33; TStopwatch::fStopRealTimeDouble_t fStopRealTimeDefinition TStopwatch.h:34; TStopwatch::fStartCpuTimeDouble_t fStartCpuTimeDefinition TStopwatch.h:35; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::fCounterInt_t fCounterDefinition TStopwatch.h:40; TStopwatch::Continuevoid Continue()Resume a stopped stopwatch.Definition TStopwatch.cxx:93; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Resetvoid Reset()Definition TStopwatch.h:52; TStopwatch::fTotalCpuTimeDouble_t fTotalCpuTimeDefinition TStopwatch.h:37; TStopwatch::TStopwatchTStopwatch()Create a stopwatch and start it.Definition TStopwatch.cxx:39; TStopwatch::GetCPUTimestatic Double_t GetCPUTime()Private static method returning system CPU time.Definition TStopwatch.cxx:158; TStopwatch::fStopCpuTimeDouble_t fStopCpuTimeDefinition TStopwatch.h:36; TStopwatch::EStateEStateDefinition TStopwatch.h:31; TStopwatch::kRunning@ kRunningDefinition TStopwatch.h:31; TStopwatch::kStopped@ kStoppedDefinition TStopwatch.h:31; TStopwatch::kUndefined@ kUndefinedDefinition TStopwatch.h:31; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStopwatch::ResetCpuTimevoid ResetCpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStopwatch_8h_source.html:3802,Resume,Resume,3802,doc/master/TStopwatch_8h_source.html,https://root.cern,https://root.cern/doc/master/TStopwatch_8h_source.html,1,['Resume'],['Resume']
Usability,"ween two points; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method ; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCommittee Analysis of Boosted MVA methods; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach) ; TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodSeedDistance Function Discriminant Analysis; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MetricEuler calculates the ""distance"" between two points; TMVA::MetricManhattan calculates the ""distance"" between two points; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:97461,simpl,simple,97461,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,2,['simpl'],['simple']
Usability,"ween; buttons and drawnbuttons (let's say icons) and assign to them their; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TControlBar.html:1418,Simpl,Simple,1418,root/html602/TControlBar.html,https://root.cern,https://root.cern/root/html602/TControlBar.html,2,['Simpl'],['Simple']
Usability,"weight ""w"",. ;  ; void Init (const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis, Int_t chunkSize=1024 *16);  Initialize axes and name. ;  ; THnBase & operator= (const THnBase &other);  ; THnBase & operator= (THnBase &&other);  ; Bool_t PrintBin (Long64_t idx, Int_t *coord, Option_t *options) const;  Print one bin. ;  ; TObject * ProjectionAny (Int_t ndim, const Int_t *dim, Bool_t wantNDim, Option_t *option="""") const;  Project all bins into a ndim-dimensional THn / THnSparse (whatever *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram, keeping only axes in dim (specifying ndim dimensions). ;  ; THnBase * RebinBase (const Int_t *group) const;  Combine the content of ""group"" neighboring bins for each dimension into a new bin and return the resulting THnBase. ;  ; THnBase * RebinBase (Int_t group) const;  Combine the content of ""group"" neighboring bins into a new bin and return the resulting THnBase. ;  ; virtual void Reserve (Long64_t);  ; void ResetBase (Option_t *option="""");  Clear the histogram. ;  ; virtual void SetFilledBins (Long64_t);  ; void UpdateXStat (const Double_t *x, Double_t w=1.);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Int_t > fCoordBuf;  ; TNDArrayT< Double_t > fSumw2;  ;  Protected Attributes inherited from THnBase; TObjArray fAxes;  Axes of the histogram. ;  ; TObjArray fBrowsables;  ! Browser-helpers for each axis ;  ; Double_t fEntries;  Number of entries, spread over chunks. ;  ; std::vector< Double_t > fIntegral;  ! vector with bin weight sums ;  ; enum THnBase:: { ... }  fIntegralStatus;  ! status of integral ;  ; Int_t fNdimensions;  Number of dimensions. ;  ; Double_t fTsumw;  Total sum of weights. ;  ; Double_t fTsumw2;  Total sum of weights squared; -1 if no errors are calculated. ;  ; TArrayD fT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:22354,Clear,Clear,22354,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['Clear'],['Clear']
Usability,"weight ""w"",. ;  ; void Init (const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis, Int_t chunkSize=1024 *16);  Initialize axes and name. ;  ; THnBase & operator= (const THnBase &other);  ; THnBase & operator= (THnBase &&other);  ; Bool_t PrintBin (Long64_t idx, Int_t *coord, Option_t *options) const;  Print one bin. ;  ; TObject * ProjectionAny (Int_t ndim, const Int_t *dim, Bool_t wantNDim, Option_t *option="""") const;  Project all bins into a ndim-dimensional THn / THnSparse (whatever *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram, keeping only axes in dim (specifying ndim dimensions). ;  ; THnBase * RebinBase (const Int_t *group) const;  Combine the content of ""group"" neighboring bins for each dimension into a new bin and return the resulting THnBase. ;  ; THnBase * RebinBase (Int_t group) const;  Combine the content of ""group"" neighboring bins into a new bin and return the resulting THnBase. ;  ; virtual void Reserve (Long64_t);  ; void ResetBase (Option_t *option="""");  Clear the histogram. ;  ; virtual void SetFilledBins (Long64_t);  ; void UpdateXStat (const Double_t *x, Double_t w=1.);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from THnBase; static THnBase * CreateHnAny (const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THn / THnSparse object from a histogram deriving from TH1. ;  ; static THnBase * CreateHnAny (const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly converting THn <-> THnSparse. ;  . #include <THn.h>. Inheritance diagram for THnT< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnT.html:23673,Clear,Clear,23673,doc/master/classTHnT.html,https://root.cern,https://root.cern/doc/master/classTHnT.html,1,['Clear'],['Clear']
Usability,"weight, UInt_t seed=0);  initialize random or importance sampling ;  ; virtual TClass * IsA () const;  ; void MoveTrainingBlock (Int_t blockInd, Types::ETreeType dest, Bool_t applyChanges=kTRUE);  move training block ;  ; void SetCurrentEvent (Long64_t ievt) const;  ; void SetCurrentType (Types::ETreeType type) const;  ; void SetEventCollection (std::vector< Event * > *, Types::ETreeType, Bool_t deleteEvents=true);  Sets the event collection (by DataSetFactory) ;  ; void SetVerbose (Bool_t);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; UInt_t TreeIndex (Types::ETreeType type) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:4062,Clear,Clear,4062,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['Clear'],['Clear']
Usability,"weights go to nan and lead to an ABORT. MethodANNBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir); construct the Method from the weight file. void DeclareOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function; used at the neuronn. void ProcessOptions(); do nothing specific at this moment. std::vector<Int_t>* ParseLayoutString(TString layerSpec); parse layout specification string and return a vector, each entry; containing the number of neurons to go in each successive layer. void InitANNBase(); initialize ANNBase object. ~MethodANNBase(); destructor. void DeleteNetwork(); delete/clear network. void DeleteNetworkLayer(TObjArray*& layer); delete a network layer. void BuildNetwork(vector<Int_t>* layout, vector<Double_t>* weights = __null, Bool_t fromFile = kFALSE); build network given a layout (number of neurons in each layer); and optional weights array. void BuildLayers(vector<Int_t>* layout, Bool_t from_file = false); build the network layers. void BuildLayer(Int_t numNeurons, TObjArray* curLayer, TObjArray* prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file = false); build a single layer with neurons and synapses connecting this; layer to the previous layer. void AddPreLinks(TMVA::TNeuron* neuron, TObjArray* prevLayer); add synapses connecting a neuron to its preceding layer. void InitWeights(); initialize the synapse weights randomly. void ForceWeights(vector<Double_t>* weights); force the synapse weights. void ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); force the input values of the input neurons; force the value f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodANNBase.html:21601,clear,clear,21601,root/html602/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodANNBase.html,2,['clear'],['clear']
Usability,"wer before rendering a scene if some; moderately significant part of render-context has changed. Here we update the basic state (clear last-LOD, mark the time,; set global <-> scene transforamtion matrices) and potentially; study and refine the clipping planes based on scene bounding box. void LodifySceneInfo(TGLRnrCtx& ctx); Setup LOD-dependant values in scene-info. Nothing to be done here but to store the last LOD. void PreDraw(TGLRnrCtx& rnrCtx); Perform basic pre-render initialization:; - calculate LOD, Style, Clipping,; - build draw lists. This is called in the beginning of the GL-viewer draw cycle. void PreRender(TGLRnrCtx& rnrCtx); Perform pre-render initialization - fill rnrCtx with; values stored during PreDraw(). This is called each time before RenderXyzz(). void Render(TGLRnrCtx& rnrCtx); This function does rendering of all stages, the shapes are; rendered in the following order: opaque, transparent,; selected-opaque, selected-transparent. GL-depth buffer is cleared after transparent shapes have been; rendered. This is never called from ROOT GL directly. Use it if you know; you are rendering a single scene. void RenderOpaque(TGLRnrCtx& rnrCtx); Render opaque elements. void RenderTransp(TGLRnrCtx& rnrCtx); Render transparent elements. void RenderSelOpaque(TGLRnrCtx& rnrCtx); Render selected opaque elements. void RenderSelTransp(TGLRnrCtx& rnrCtx); Render selected transparent elements for highlight. void RenderSelOpaqueForHighlight(TGLRnrCtx& rnrCtx); Render selected opaque elements for highlight. void RenderSelTranspForHighlight(TGLRnrCtx& rnrCtx); Render selected transparent elements. void PostRender(TGLRnrCtx& rnrCtx); Perform post-render clean-up. void PostDraw(TGLRnrCtx& rnrCtx); Finalize drawing. This is called at the end of the GL-viewer draw cycle. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); Process selection record rec.; 'curIdx' is the item position where the scene should start; its processing.; Return TRUE if an object has been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLSceneBase.html:6370,clear,cleared,6370,root/html534/TGLSceneBase.html,https://root.cern,https://root.cern/root/html534/TGLSceneBase.html,3,['clear'],['cleared']
Usability,"wer before rendering a scene if some; moderately significant part of render-context has changed. Here we update the basic state (clear last-LOD, mark the time,; set global <-> scene transforamtion matrices) and potentially; study and refine the clipping planes based on scene bounding box. void LodifySceneInfo(TGLRnrCtx& ctx); Setup LOD-dependant values in scene-info. Nothing to be done here but to store the last LOD. void PreDraw(TGLRnrCtx& rnrCtx); Perform basic pre-render initialization:; - calculate LOD, Style, Clipping,; - build draw lists. This is called in the beginning of the GL-viewer draw cycle. void PreRender(TGLRnrCtx& rnrCtx); Perform pre-render initialization - fill rnrCtx with; values stored during PreDraw(). This is called each time before RenderXyzz(). void Render(TGLRnrCtx& rnrCtx); This function does rendering of all stages, the shapes are; rendered in the following order: opaque, transparent,; selected-opaque, selected-transparent. GL-depth buffer is cleared after transparent shapes have been; rendered. This is never called from ROOT GL directly. Use it if you know; you are rendering a single scene. void RenderOpaque(TGLRnrCtx& rnrCtx); Render opaque elements. void RenderTransp(TGLRnrCtx& rnrCtx); Render transparent elements. void RenderSelOpaque(TGLRnrCtx& rnrCtx); Render selected opaque elements. void RenderSelTransp(TGLRnrCtx& rnrCtx); Render selected transparent elements. void PostRender(TGLRnrCtx& rnrCtx); Perform post-render clean-up. void PostDraw(TGLRnrCtx& rnrCtx); Finalize drawing. This is called at the end of the GL-viewer draw cycle. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); Process selection record rec.; 'curIdx' is the item position where the scene should start; its processing.; Return TRUE if an object has been identified or FALSE otherwise.; The scene-info member of the record is already set by the caller. See implementation in sub-class TGLScene, here we just return FALSE. TGLSceneBase& operator=(const TGLScen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSceneBase.html:6231,clear,cleared,6231,root/html528/TGLSceneBase.html,https://root.cern,https://root.cern/root/html528/TGLSceneBase.html,3,['clear'],['cleared']
Usability,wer limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterval.; Definition at line 40 of file SimpleInterval.h. ◆ Streamer(). void RooStats::SimpleInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::SimpleInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file SimpleInterval.h. ◆ UpperLimit(). virtual double RooStats::SimpleInterval::UpperLimit ; (; ). inlinevirtual . return the interval upper limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 48 of file SimpleInterval.h. Member Data Documentation. ◆ fConfidenceLevel. double RooStats::SimpleInterval::fConfidenceLevel. confidence level ; Definition at line 65 of file SimpleInterval.h. ◆ fLowerLimit. double RooStats::SimpleInterval::fLowerLimit. lower interval limit ; Definition at line 63 of file SimpleInterval.h. ◆ fParameters. RooArgSet RooStats::SimpleInterval::fParameters. set containing the parameter of interest ; Definition at line 62 of file SimpleInterval.h. ◆ fUpperLimit. double RooStats::SimpleInterval::fUpperLimit. upper interval limit ; Definition at line 64 of file SimpleInterval.h. Libraries for RooStats::SimpleInterval:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/SimpleInterval.h; roofit/roostats/src/SimpleInterval.cxx. RooStatsSimpleInterval.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:17118,Simpl,SimpleInterval,17118,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"wever, if you have already pushed tags, there are wider consequences. For this reason, altering pushed tags is emphatically discouraged: create a new tag. However, since you're going to ignore me and do it anyway, here's how to do what you want without getting into too much of a mess:. To remove an erroneous tag, someone with the manager rôle on the project must log into cdcvsdirectly as the repository user (e.g. p-art), cd to the bare repository with cd /cvs/projects/<project> and then remove the tag with git tag -d <tag>.; Back in your working directory, tag correctly and then push tags.; Now, you must alert all your developers that, if they have pulled the erroneous tag to their local repository, they will need to remove the tag from their local repository with git -d <tag> and then re-pull from the repository. Otherwise, deleted tags will keep re-appearing in the remote repository and/or users will be unable to pull or push to the remote. Undo the last commit:. Undo the commit:; git reset --soft HEAD^. Do stuff.; Recommit:; git commit -a -m <message> -c ORIG_HEAD. Note that the -c ORIG_HEAD clause causes git to use the meta-data from the previous HEAD (author, etc) with the exception of the commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:15353,Undo,Undo,15353,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['Undo'],['Undo']
Usability,"when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ; Reimplemented from TObject.; Definition at line 2623 of file TGraph.cxx. ◆ Zero(). void TGraph::Zero ; (; Int_t & ; k, . Double_t ; AZ, . Double_t ; BZ, . Double_t ; E2, . Double_t & ; X, . Double_t & ; Y, . Int_t ; maxiterations . ). Find zero of a continuous function. ; This function finds a real zero of the continuous real function Y(X) in a given interval (A,B). See accompanying notes for details of the argument list and calling sequence ; Definition at line 2717 of file TGraph.cxx. Member Data Documentation. ◆ fFunctions. TList* TGraph::fFunctions. protected . Pointer to list of functions (fits and user) ; Definition at line 49 of file TGraph.h. ◆ fHistogram. TH1F* TGraph::fHistogram. protected . Pointer to histogram used for drawing axis. ; Definition at line 50 of file TGraph.h. ◆ fMaximum. Double_t TGraph::fMaximum. protected . Maximum value for plotting along y. ; Definition at line 52 of file TGraph.h. ◆ fMaxSize. Int_t TGraph::fMaxSize. protected . !Current dimension of arrays fX and fY ; Definition at line 45 of file TGraph.h. ◆ fMinimum. Double_t TGraph::fMinimum. protected . Minimum value for plotting along y. ; Definition at line 51 of file TGraph.h. ◆ fNpoints. Int_t TGraph::fNpoints. protected . Number of points <= fMaxSize. ; Definition at line 46 of file TGraph.h. ◆ fOption. TString TGraph::fOption. protected . Options used for drawing the graph. ; Definition at line 53 of file TGraph.h. ◆ fX. Double_t* TGraph::fX. protected . [fNpoints] array of X points ; Definition at line 47 of file TGraph.h. ◆ fY. Double_t* TGraph::fY. protected . [fNpoints] array of Y points ; Definition at line 48 of file TGraph.h. Libraries for TGraph:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph.h; hist/hist/src/TGraph.cxx. TGraph. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:77921,Guid,Guide,77921,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['Guid'],['Guide']
Usability,"when reconnecting ; Definition at line 10583 of file TProof.cxx. ◆ SetDataPoolUrl(). void TProof::SetDataPoolUrl ; (; const char * ; url). inline . Definition at line 1044 of file TProof.h. ◆ SetDataSetTreeName(). Int_t TProof::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedbackOption(). void TProof::SetDrawFeedbackOption ; (; TDrawFeedback * ; f, . Option_t * ; opt . ). Set draw feedback option. ; Definition at line 10102 of file TProof.cxx. ◆ SetDSet(). void TProof::SetDSet ; (; TDSet * ; dset). inlineprotected . Definition at line 737 of file TProof.h. ◆ SetFeedback(). void TProof::SetFeedback ; (; TString & ; opt, . TString & ; optfb, . Int_t ; action . ). protected . Extract from opt in optfb information about wanted feedback settings. ; Feedback are removed from the input string opt. If action == 0, set up feedback accordingly, if action == 1 clean related feedback settings (using info in optfb, if available, or reparsing opt).; Feedback requirements are in the form <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>; The special name 'stats' triggers feedback about events and packets. The separator from the next option is either a ' ' or a ';'. Called interanally by TProof::Process. ; Definition at line 5232 of file TProof.cxx. ◆ SetInputDataFile(). void TProof::SetInputDataFile ; (; const char * ; datafile). Set the file to be used to optimally distribute the input data objects. ; If the file exists the object in the file are added to those in the fInputData list. If the file path is null, a default file will be created at the moment of sending the processing request with the content of the fInputData list. See a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:142720,feedback,feedback,142720,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void LearnPrefill(); Perform an initial prefetch, attempting to read as much of the learning; phase baskets for all branches at once. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). void Disable(); {fEnabled = kFALSE;}. void Enable(); {fEnabled = kTRUE;}. const TObjArray * GetCachedBranches() const; { return fBranches; }. EPrefillType GetConfiguredPrefillType() const. Int_t GetEntryMin() const; {return fEntryMin;}. Int_t GetEntryMax() const; {return fEntryMax;}. EPrefillType GetLearnPrefill() const; {return fPrefillType;}. TTree * GetTree() const; {return fTree;}. Bool_t IsAutoCreated() const; {return fAutoCreated;}. Bool_t IsEnabled() const; {return fEnabled;}. Bool_t IsLearning() const; {return fIsLearning;}. void SetAutoCreated(Bool_t val); {fAutoCreated = val;}. » Author: Rene Brun 04/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:26379,Learn,LearnPrefill,26379,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,2,"['Learn', 'learn']","['LearnPrefill', 'learning']"
Usability,"widget. ; Definition at line 229 of file TGTextView.cxx. ◆ AddLineFast(). void TGTextView::AddLineFast ; (; const char * ; string). virtual . Add a line of text to the view widget. ; Fast version. Use it if you are going to add several lines, than call Update(). ; Definition at line 251 of file TGTextView.cxx. ◆ AddText(). void TGTextView::AddText ; (; TGText * ; text). virtual . Add text to the view widget. ; Definition at line 208 of file TGTextView.cxx. ◆ AdjustWidth(). void TGTextView::AdjustWidth ; (; ). virtual . Adjust widget width to longest line. ; Definition at line 1312 of file TGTextView.cxx. ◆ Class(). static TClass * TGTextView::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextView::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextView::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file TGTextView.h. ◆ Clear(). void TGTextView::Clear ; (; Option_t * ; = """"). overridevirtual . Clear text view widget. ; Reimplemented from TObject.; Definition at line 430 of file TGTextView.cxx. ◆ Clicked(). virtual void TGTextView::Clicked ; (; const char * ; word). inlinevirtual . Definition at line 138 of file TGTextView.h. ◆ Copy() [1/2]. Bool_t TGTextView::Copy ; (; ). virtual . Copy selected text to clipboard. ; Reimplemented in TGTextEdit.; Definition at line 486 of file TGTextView.cxx. ◆ Copy() [2/2]. void TGTextView::Copy ; (; TObject & ; object); const. inlineoverrideprotectedvirtual . Copy this to obj. ; Reimplemented from TObject.; Definition at line 54 of file TGTextView.h. ◆ DataChanged(). virtual void TGTextView::DataChanged ; (; ). inlinevirtual . Definition at line 135 of file TGTextView.h. ◆ DataDropped(). virtual void TGTextView::DataDropped ; (; const char * ; fname). inlinevirtual . Definition at line 136 of file TGTextView.h. ◆ DeclFileName(). static const char * TGTextView::DeclFileN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:43093,Clear,Clear,43093,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,1,['Clear'],['Clear']
Usability,"window. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; virtual Int_t SetTextFont (char *fontname, ETextSetMode mode);  Sets text font to specified name ""fontname"".This function returns 0 if the specified font is found, 1 if it is not. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:33114,Clear,Clear,33114,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['Clear'],['Clear']
Usability,"wing function, which checks if a vector consists of two elements equal to 1 and 2:; auto checkOneTwo = [] (const std::vector<int> &v) { return v.size() == 2 && v[0] == 1 && v[1] == 2; };; // The following line, although it looks reasonable, would _not_ run correctly:; // df.Filter(checkOneTwo, {""one"", ""two""});; // The reason is that `Filter(..., {""one"", ""two""})` expects a callable that takes exactly two integers, while; // `checkOneTwo` actually takes a vector of integers (i.e. it does not have the right signature).; // PassAsVec helps passing down the single values ""one"", ""two"" to `checkOneTwo` as a collection: it takes a callable; // `f` that expects a collection as argument and returns a new callable that takes single arguments instead, passes; // them down to `f` and returns what `f` returns.; // PassAsVec requires that number of arguments and their type is specified as template argument.; // Here's an example usage (remember, PassAsVec(f) returns a new callable!):; auto c3 = df.Filter(ROOT::RDF::PassAsVec<2, int>(checkOneTwo), {""one"", ""two""}).Count();; R__ASSERT(*c3 == nEntries);; }; a#define a(i)Definition RSha256.hxx:99; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; ROOT::RDF::Notauto Not(F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)))Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns ...Definition RDFHelpers.hxx:83; v@ vDefinition rootcling_impl.cxx:3699; DateJuly 2018 ; AuthorEnrico Guiraud (CERN) ; Definition in file df020_helpers.C. tutorialsdataframedf020_helpers.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df020__helpers_8C.html:3275,Guid,Guide,3275,doc/master/df020__helpers_8C.html,https://root.cern,https://root.cern/doc/master/df020__helpers_8C.html,1,['Guid'],['Guide']
Usability,"with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofPlayerRemote.html:19421,feedback,feedback,19421,root/html532/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html532/TProofPlayerRemote.html,4,['feedback'],['feedback']
Usability,"with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Definition at line 3783 of file TGeoManager.cxx. ◆ Class(). static TClass * TGeoManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 605 of file TGeoManager.h. ◆ CleanGarbage(). void TGeoManager::CleanGarbage ; (; ). Clean temporary volumes and shapes from garbage collection. ; Definition at line 1627 of file TGeoManager.cxx. ◆ ClearAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attributes for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ Cle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:77883,Clear,Clear,77883,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['Clear']
Usability,"with error cancelation when x is small; 98 inline double log1p(double x); 99 {; 100#ifndef HAVE_NO_LOG1P; 101 return ::log1p(x);; 102#else; 103 // if log1p is not in c math library; 104 volatile double y;; 105 y = 1 + x;; 106 return std::log(y) - ((y-1)-x)/y ; /* cancels errors with IEEE arithmetic */; 107#endif; 108}; 109/// exp(x) -1 with error cancellation when x is small; 110inline double expm1( double x) {; 111#ifndef HAVE_NO_EXPM1; 112 return ::expm1(x);; 113#else; 114 // compute using taylor expansion until difference is less than epsilon; 115 // use for values smaller than 0.5 (for larger (exp(x)-1 is fine; 116 if (std::abs(x) < 0.5); 117 {; 118 // taylor series S = x + (1/2!) x^2 + (1/3!) x^3 + ...; 119 ; 120 double i = 1.0;; 121 double sum = x;; 122 double term = x / 1.0;; 123 do {; 124 i++ ;; 125 term *= x/i;; 126 sum += term;; 127 }; 128 while (std::abs(term) > std::abs(sum) * std::numeric_limits<double>::epsilon() ) ;; 129 ; 130 return sum ;; 131 }; 132 else; 133 {; 134 return std::exp(x) - 1;; 135 }; 136#endif; 137}; 138 ; 139 } // end namespace Math; 140 ; 141} // end namespace ROOT; 142 ; 143 ; 144 ; 145 ; 146 ; 147#endif /* ROOT_Math_Math */; M_PI#define M_PIDefinition Rotated.cxx:105; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::log1pdouble log1p(double x)declarations for functions which are not implemented by some compilersDefinition Math.h:98; ROOT::Math::Pidouble Pi()Mathematical constants.Definition Math.h:88; ROOT::Math::expm1double expm1(double x)exp(x) -1 with error cancellation when x is smallDefinition Math.h:110; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. mathmathcoreincMathMath.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Math_8h_source.html:4660,Guid,Guide,4660,doc/master/Math_8h_source.html,https://root.cern,https://root.cern/doc/master/Math_8h_source.html,1,['Guid'],['Guide']
Usability,"with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset);  Write core json. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:16276,Clear,ClearProjectedList,16276,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,1,['Clear'],['ClearProjectedList']
Usability,"with the worker. If needed, this master will move the worker from the active to the inactive list and rebuild the list of unique workers. Use ord = ""*"" to deactivate all active workers. The string 'ord' can also be a comma-separated list of ordinal numbers the status of which will be modified at once. Return <0 if something went wrong (-2 if at least one worker was not found) or the number of workers with status change (on master; 0 on client). ; Definition at line 11370 of file TProof.cxx. ◆ DeclFileName(). static const char * TProof::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 1073 of file TProof.h. ◆ DelEnvVar(). void TProof::DelEnvVar ; (; const char * ; name). static . Remove an variable from the list of environment variables passed to proofserv on the master and slaves. ; Definition at line 11782 of file TProof.cxx. ◆ DeleteDrawFeedback(). void TProof::DeleteDrawFeedback ; (; TDrawFeedback * ; f). Delete draw feedback object. ; Definition at line 10110 of file TProof.cxx. ◆ DeleteParameters(). void TProof::DeleteParameters ; (; const char * ; wildcard). Delete the input list parameters specified by a wildcard (e.g. ; PROOF_*) or exact name (e.g. PROOF_MaxSlavesPerNode). ; Definition at line 9933 of file TProof.cxx. ◆ Detach(). void TProof::Detach ; (; Option_t * ; opt = """"). Detach this instance to its proofserv. ; If opt is 'S' or 's' the remote server is shutdown ; Definition at line 10518 of file TProof.cxx. ◆ DisableGoAsyn(). void TProof::DisableGoAsyn ; (; ). Signal to disable related switches. ; Definition at line 6259 of file TProof.cxx. ◆ DisablePackage(). Int_t TProof::DisablePackage ; (; const char * ; pack). private . Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7885 of file TProof.cxx. ◆ DisablePackages(). Int_t TProof::DisablePackages ; (; ). private . Remove all packages. ; Returns 0 in case of success and -1 in case of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:81981,feedback,feedback,81981,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"with uniformly distributed weights instead of gaussian weights \n \; 1554 - LAYERSIZE \n \; 1555 Random values scaled by the layer size \n \; 1556 \n \; 1557 \""TrainingStrategy\"" \n \; 1558 - example: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5|LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFraction=0.0,DropRepetitions=5\"" \n \; 1559 - explanation: two stacked training settings separated by \""|\"" \n \; 1560 . first training setting: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5\"" \n \; 1561 . second training setting : \""LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFractions=0.0,DropRepetitions=5\"" \n \; 1562 . LearningRate : \n \; 1563 - recommended for classification: 0.1 initially, 1e-4 later \n \; 1564 - recommended for regression: 1e-4 and less \n \; 1565 . Momentum : \n \; 1566 preserve a fraction of the momentum for the next training batch [fraction = 0.0 - 1.0] \n \; 1567 . Repetitions : \n \; 1568 train \""Repetitions\"" repetitions with the same minibatch before switching to the next one \n \; 1569 . ConvergenceSteps : \n \; 1570 Assume that convergence is reached after \""ConvergenceSteps\"" cycles where no improvement \n \; 1571 of the error on the test samples has been found. (Mind that only at each \""TestRepetitions\"" \n \; 1572 cycle the test samples are evaluated and thus the convergence is checked) \n \; 1573 . BatchSize \n \; 1574 Size of the mini-batches. \n \; 1575 . TestRepetitions \n \; 1576 Perform testing the neural net on the test samples each \""TestRepetitions\"" cycle \n \; 1577 . WeightDecay \n \; 1578 If \""Renormalize\"" is set to L1 or L2, \""WeightDecay\"" provides the renormalization factor \n \; 15",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:58482,Learn,LearningRate,58482,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Learn'],['LearningRate']
Usability,"wn; unless the option 0 is set. The following example illustrates the option 0 combined with the option; COL. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,600);; c1->Divide(1,2);; TH2F *hcol21 = new TH2F(""hcol21"",""Option COLZ"",40,-4,4,40,-20,20);; TH2F *hcol22 = new TH2F(""hcol22"",""Option COLZ0"",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcol21->Fill(px,5*py);; hcol22->Fill(px,5*py);; }; hcol21->SetBit(TH1::kNoStats);; hcol22->SetBit(TH1::kNoStats);; gStyle->SetPalette(57);; c1->cd(1); hcol21->Draw(""COLZ"");; c1->cd(2); hcol22->Draw(""COLZ0"");; hcol22->SetMaximum(100);; hcol22->SetMinimum(40);; return c1;; }. The option COL can be combined with the option POL:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hcol1 = new TH2F(""hcol1"",""Option COLor combined with POL"",40,-4,4,40,-4,4);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcol1->Fill(px,py);; }; gStyle->SetPalette(57);; hcol1->Draw(""COLZPOL"");; return c1;; }; The CANDLE option; A Candle plot (also known as; a ""box-and whisker plot"" or simply ""box plot"") is a convenient way to describe; graphically a data distribution (D) with only five numbers. It was invented; in 1977 by John Tukey. With the option CANDLEX five numbers are:. The minimum value of the distribution D (bottom dashed line).; The lower quartile (Q1): 25% of the data points in D are less than; Q1 (bottom of the box).; The median (M): 50% of the data points in D are less than M; (thick line segment inside the box).; The upper quartile (Q3): 75% of the data points in D are less; than Q3 (top of the box).; The maximum value of the distribution D (top dashed line). The mean value of the distribution D is also represented as a circle. In this implementation a TH2 is considered as a collection of TH1 along; X (option CANDLE or CANDLEX) or Y (option CANDLEY).; Each TH1 is represented as a candle plot. Picture; Source. {; TCanvas *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:33340,simpl,simply,33340,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,1,['simpl'],['simply']
Usability,"wo discriminating variables collectively denoted  which are chosen within three possible variables denoted , and .; The variable which is not incorporated in  is used as the control variable . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1:; Distributions of the three discriminating variables available to perform the Likelihood fit:; , , .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events. Chosing and as discriminating variables to determine and through a maximum Likelihood fit, one builds, for the control variable which is unknown to the fit, the two ; for signal and background shown in Fig. 3. One observes that the . for signal reproduces correctly the PDF even where the latter vanishes,; although the error bars remain sizeable. This results from the almost; complete cancellation between positive and negative weights: the sum of; weights is close to zero while the sum of weights squared is not. The; occurence of negative weights occurs through the appearance of the; covariance matrix, an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPlot.html:6246,clear,clearly,6246,root/html602/TSPlot.html,https://root.cern,https://root.cern/root/html602/TSPlot.html,2,['clear'],['clearly']
Usability,"works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:22767,learn,learning,22767,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,2,['learn'],['learning']
Usability,"write; kWriteDelete; };. private:. Int_tfCountnumber of updates contributing to error field; Double_tfDEDwsum of deltas; Double_tfDeltalocal error field; Double_tfLearnRatelearning rate parameter; TMVA::TNeuron*fPostNeuronpointer to post-neuron; TMVA::TNeuron*fPreNeuronpointer to pre-neuron; Double_tfWeightweight of the synapse; static TMVA::MsgLogger*fgLogger! message logger, static to save resources. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); constructor. ~TSynapse(); destructor. void SetWeight(Double_t weight); set synapse weight. Double_t GetWeightedValue(); get output of pre-neuron weighted by synapse weight. Double_t GetWeightedDelta(); get error field of post-neuron weighted by synapse weight. void AdjustWeight(); adjust the weight based on the error field all ready calculated by CalculateDelta. void CalculateDelta(); calculate/adjust the error field for this synapse. TSynapse(). Double_t GetWeight(); get the weight of the synapse. { return fWeight; }. void SetLearningRate(Double_t rate); set the learning rate. { fLearnRate = rate; }. Double_t GetLearningRate(); get the learning rate. { return fLearnRate; }. void DecayLearningRate(Double_t rate); decay the learning rate. { fLearnRate *= (1-rate); }. void SetPreNeuron(TMVA::TNeuron* pre); set the pre-neuron. { fPreNeuron = pre; }. void SetPostNeuron(TMVA::TNeuron* post); set hte post-neuron. { fPostNeuron = post; }. void InitDelta(); initialize the error field of the synpase to 0. { fDelta = 0.0; fCount = 0; }. void SetDEDw(Double_t DEDw); { fDEDw = DEDw; }. Double_t GetDEDw(); { return fDEDw; }. Double_t GetDelta(); { return fDelta; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TSynapse.h 33928 2010-06-15 16:19:31Z stelzer $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TSynapse.html:6591,learn,learning,6591,root/html528/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html528/TMVA__TSynapse.html,3,['learn'],['learning']
Usability,"write; kWriteDelete; };. private:. Int_tfCountnumber of updates contributing to error field; Double_tfDEDwsum of deltas; Double_tfDeltalocal error field; Double_tfLearnRatelearning rate parameter; TMVA::TNeuron*fPostNeuronpointer to post-neuron; TMVA::TNeuron*fPreNeuronpointer to pre-neuron; Double_tfWeightweight of the synapse; static TMVA::MsgLogger*fgLogger! message logger, static to save resources. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); constructor. ~TSynapse(); destructor. void SetWeight(Double_t weight); set synapse weight. Double_t GetWeightedValue(); get output of pre-neuron weighted by synapse weight. Double_t GetWeightedDelta(); get error field of post-neuron weighted by synapse weight. void AdjustWeight(); adjust the weight based on the error field all ready calculated by CalculateDelta. void CalculateDelta(); calculate/adjust the error field for this synapse. TSynapse(). Double_t GetWeight(); get the weight of the synapse. { return fWeight; }. void SetLearningRate(Double_t rate); set the learning rate. { fLearnRate = rate; }. Double_t GetLearningRate(); get the learning rate. { return fLearnRate; }. void DecayLearningRate(Double_t rate); decay the learning rate. { fLearnRate *= (1-rate); }. void SetPreNeuron(TMVA::TNeuron* pre); set the pre-neuron. { fPreNeuron = pre; }. void SetPostNeuron(TMVA::TNeuron* post); set hte post-neuron. { fPostNeuron = post; }. void InitDelta(); initialize the error field of the synpase to 0. { fDelta = 0.0; fCount = 0; }. void SetDEDw(Double_t DEDw); { fDEDw = DEDw; }. Double_t GetDEDw(); { return fDEDw; }. Double_t GetDelta(); { return fDelta; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TSynapse.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TSynapse.html:6660,learn,learning,6660,root/html532/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html532/TMVA__TSynapse.html,3,['learn'],['learning']
Usability,"ws - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTable.html:27267,Clear,Clear,27267,root/html528/TTable.html,https://root.cern,https://root.cern/root/html528/TTable.html,6,['Clear'],['Clear']
Usability,"ws. More...;  ; class  TGVerticalFrame;  A composite frame that layout their children in vertical way. More...;  . Enumerations; enum  EDNDFlags { kIsDNDSource = (1ULL << ( 0 )); , kIsDNDTarget = (1ULL << ( 1 )); };  ; enum  EFrameCleanup { kNoCleanup = 0; , kLocalCleanup = 1; , kDeepCleanup = -1; };  ; enum  EFrameState { kIsVisible = (1ULL << ( 0 )); , kIsMapped = kIsVisible; , kIsArranged = (1ULL << ( 1 )); };  ; enum  EMWMHints { ;   kMWMFuncAll = (1ULL << ( 0 )); , kMWMFuncResize = (1ULL << ( 1 )); , kMWMFuncMove = (1ULL << ( 2 )); , kMWMFuncMinimize = (1ULL << ( 3 )); , ;   kMWMFuncMaximize = (1ULL << ( 4 )); , kMWMFuncClose = (1ULL << ( 5 )); , kMWMInputModeless = 0; , kMWMInputPrimaryApplicationModal = 1; , ;   kMWMInputSystemModal = 2; , kMWMInputFullApplicationModal = 3; , kMWMDecorAll = (1ULL << ( 0 )); , kMWMDecorBorder = (1ULL << ( 1 )); , ;   kMWMDecorResizeH = (1ULL << ( 2 )); , kMWMDecorTitle = (1ULL << ( 3 )); , kMWMDecorMenu = (1ULL << ( 4 )); , kMWMDecorMinimize = (1ULL << ( 5 )); , ;   kMWMDecorMaximize = (1ULL << ( 6 )). };  . Enumeration Type Documentation. ◆ EDNDFlags. enum EDNDFlags. EnumeratorkIsDNDSource ; kIsDNDTarget . Definition at line 74 of file TGFrame.h. ◆ EFrameCleanup. enum EFrameCleanup. EnumeratorkNoCleanup ; kLocalCleanup ; kDeepCleanup . Definition at line 39 of file TGFrame.h. ◆ EFrameState. enum EFrameState. EnumeratorkIsVisible ; kIsMapped ; kIsArranged . Definition at line 32 of file TGFrame.h. ◆ EMWMHints. enum EMWMHints. EnumeratorkMWMFuncAll ; kMWMFuncResize ; kMWMFuncMove ; kMWMFuncMinimize ; kMWMFuncMaximize ; kMWMFuncClose ; kMWMInputModeless ; kMWMInputPrimaryApplicationModal ; kMWMInputSystemModal ; kMWMInputFullApplicationModal ; kMWMDecorAll ; kMWMDecorBorder ; kMWMDecorResizeH ; kMWMDecorTitle ; kMWMDecorMenu ; kMWMDecorMinimize ; kMWMDecorMaximize . Definition at line 47 of file TGFrame.h. guiguiincTGFrame.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGFrame_8h.html:3311,Guid,Guide,3311,doc/master/TGFrame_8h.html,https://root.cern,https://root.cern/doc/master/TGFrame_8h.html,1,['Guid'],['Guide']
Usability,"wserWidgetProvider(). RBrowserWidgetProvider::RBrowserWidgetProvider ; (; const std::string & ; kind). explicit . Constructor. ; Definition at line 37 of file RBrowserWidget.cxx. ◆ ~RBrowserWidgetProvider(). RBrowserWidgetProvider::~RBrowserWidgetProvider ; (; ). virtual . Destructor. ; Definition at line 45 of file RBrowserWidget.cxx. Member Function Documentation. ◆ Create(). virtual std::shared_ptr< RBrowserWidget > ROOT::RBrowserWidgetProvider::Create ; (; const std::string & ; ). protectedpure virtual . Implemented in RBrowserGeomProvider, RBrowserRCanvasProvider, RBrowserTCanvasProvider, and RBrowserTreeProvider. ◆ CreateFor(). virtual std::shared_ptr< RBrowserWidget > ROOT::RBrowserWidgetProvider::CreateFor ; (; const std::string & ; , . std::shared_ptr< Browsable::RElement > & ;  . ). inlineprotectedvirtual . Reimplemented in RBrowserTCanvasProvider, and RBrowserRCanvasProvider.; Definition at line 76 of file RBrowserWidget.hxx. ◆ CreateWidget(). std::shared_ptr< RBrowserWidget > RBrowserWidgetProvider::CreateWidget ; (; const std::string & ; kind, . const std::string & ; name . ). static . Create specified widget. ; Definition at line 67 of file RBrowserWidget.cxx. ◆ CreateWidgetFor(). std::shared_ptr< RBrowserWidget > RBrowserWidgetProvider::CreateWidgetFor ; (; const std::string & ; kind, . const std::string & ; name, . std::shared_ptr< Browsable::RElement > & ; element . ). static . Create specified widget for existing object. ; Definition at line 91 of file RBrowserWidget.cxx. ◆ GetMap(). RBrowserWidgetProvider::ProvidersMap_t & RBrowserWidgetProvider::GetMap ; (; ). staticprotected . Returns static map of existing providers. ; Definition at line 58 of file RBrowserWidget.cxx. The documentation for this class was generated from the following files:; gui/browserv7/src/RBrowserWidget.hxx; gui/browserv7/src/RBrowserWidget.cxx. ROOTRBrowserWidgetProvider. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserWidgetProvider.html:3856,Guid,Guide,3856,doc/v632/classROOT_1_1RBrowserWidgetProvider.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserWidgetProvider.html,1,['Guid'],['Guide']
Usability,"wvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TCollectionCollection abstract base class.Definition TCollection.h:65; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TCollection::IsEmptyvirtual Bool_t IsEmpty() constDefinition TCollection.h:188; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TIterDefinition TCollection.h:235; TIter::Resetvoid Reset()Definition TCollection.h:254; TMethodCallMethod or function calling interface.Definition TMethodCall.h:37; TMethodCall::Executevoid Execute(const char *, const char *, int *=nullptr) overrideExecute method on this object with the given parameter string, e.g.Definition TMethodCall.h:64; TMethodCall::IsValidBool_t IsValid() constReturn true if the method call has been properly initialized and is usable.Definition TMethodCall.cxx:376; TMethodCall::InitWithPrototypevoid InitWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch)Initialize the method invocation environment.Definition TMethodCall.cxx:342; TMethodCall::SetParamvoid SetParam(Long_t l)Add a long method parameter.Definition TMethodCall.cxx:606; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::IsEqualvirtual Bool_t IsEqual(const TObject *obj) constDefault equal comparison (objects are equal if they have the same address in memory).Definition TObject.cxx:570; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::InheritsFromvirtual Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeqCollection_8cxx_source.html:11586,usab,usable,11586,doc/master/TSeqCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSeqCollection_8cxx_source.html,1,['usab'],['usable']
Usability,"x 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; CopyIterator_t GetFunctionCopyIterator (Bool_t read=kTRUE) override;  See typedef void (*CopyIterator_t)(void *&dest, const void *source); Copy the iterator source, into dest. ;  ; CreateIterators_t GetFunctionCreateIterators (Bool_t read=kTRUE) override;  See typedef void (*CreateIterators_t)(void *collection, void *&begin_ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenListProxy.html:1433,Clear,Clear,1433,doc/master/classTGenListProxy.html,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html,6,['Clear'],['Clear']
Usability,"x = 1., xStep = (xMax - xMin) / (nX - 1);; ; const UInt_t nY = 30;; const Double_t yMin = -1., yMax = 1., yStep = (yMax - yMin) / (nY - 1);; ; const UInt_t nZ = 30;; const Double_t zMin = -1., zMax = 1., zStep = (zMax - zMin) / (nZ - 1);; ; TH3F *hist = new TH3F(""glvoxel"", ""glvoxel"", nX, -1., 1., nY, -1., 1., nZ, -1., 1.);; ; // Fill the histogram to create a ""sphere"".; for (UInt_t i = 0; i < nZ; ++i) {; const Double_t z = zMin + i * zStep;; ; for (UInt_t j = 0; j < nY; ++j) {; const Double_t y = yMin + j * yStep;; ; for (UInt_t k = 0; k < nX; ++k) {; const Double_t x = xMin + k * xStep;; ; const Double_t val = 1. - (x * x + y * y + z * z);; hist->SetBinContent(k + 1, j + 1, i + 1, val);; }; }; }; ; // Now, specify the transfer function.; TList * lf = hist->GetListOfFunctions();; if (lf) {; TF1 * tf = new TF1(""TransferFunction"", my_transfer_function, -2., 1.);; lf->Add(tf);; }; ; gStyle->SetCanvasPreferGL(true);; ; hist->Draw(""glcol"");; }; ; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Double_tdouble Double_tDefinition RtypesCore.h:59; TF1.h; TH3.h; TList.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH3F3-D histogram with a float per channel (see TH1 documentation)Definition TH3.h:317; TH3::SetBinContentvoid SetBinContent(Int_t bin, Double_t content) overrideSet bin content.Definition TH3.cxx:3468; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TStyle::SetCanvasPreferGLvoid SetCanvasPreferGL(Bool_t prefer=kTRUE)Definition TStyle.h:341; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; AuthorTimur Pocheptsov ; Definition in file glvox2.C. tutorialsglglvox2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glvox2_8C.html:3597,Guid,Guide,3597,doc/master/glvox2_8C.html,https://root.cern,https://root.cern/doc/master/glvox2_8C.html,1,['Guid'],['Guide']
Usability,"x = {run2;foo}(idx = 1); [Auto,Clean] ; 0x8c93820/VS RooMultiCategory::model_sim2_index_internalMultiCat = {run2;foo}(idx = 1); [Auto,Clean] ; 0x7e3df80/VS RooCategory::c = run2(idx = 1); ; 0x7e7c470/VS RooCategory::d = foo(idx = 0); ; 0x8c93c50/V- RooAddPdf::model_{run1;bar} = 1/1 [Auto,Clean] ; 0x88718c0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x1c2d460/V- RooRealVar::m = 0; 0x889de80/V- RooRealVar::s = 1; 0x88077e0/V- RooRealVar::f = 0.5; 0x8ca62d0/V- RooPolynomial::p_{run1;bar} = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x8913b80/V- RooRealVar::p0_{run1;bar} = 0.01; 0x8914200/V- RooAddPdf::model_{run1;foo} = 1/1 [Auto,Clean] ; 0x88718c0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x1c2d460/V- RooRealVar::m = 0; 0x889de80/V- RooRealVar::s = 1; 0x88077e0/V- RooRealVar::f = 0.5; 0x8918e30/V- RooPolynomial::p_{run1;foo} = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x8cab9a0/V- RooRealVar::p0_{run1;foo} = 0.01; 0x8cac020/V- RooAddPdf::model_{run2;bar} = 1/1 [Auto,Clean] ; 0x88718c0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x1c2d460/V- RooRealVar::m = 0; 0x889de80/V- RooRealVar::s = 1; 0x88077e0/V- RooRealVar::f = 0.5; 0x8cb0c90/V- RooPolynomial::p_{run2;bar} = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x8cb3220/V- RooRealVar::p0_{run2;bar} = 0.01; 0x8cb38a0/V- RooAddPdf::model_{run2;foo} = 1/1 [Auto,Clean] ; 0x88718c0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x1c2d460/V- RooRealVar::m = 0; 0x889de80/V- RooRealVar::s = 1; 0x88077e0/V- RooRealVar::f = 0.5; 0x8cb8510/V- RooPolynomial::p_{run2;foo} = 1 [Auto,Dirty] ; 0x1c88ae0/V- RooRealVar::x = 0; 0x8cbaaa0/V- RooRealVar::p0_{run2;foo} = 0.01; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf504_simwstool.py. tutorialsroofitrf504_simwstool.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf504__simwstool_8py.html:10524,Guid,Guide,10524,doc/master/rf504__simwstool_8py.html,https://root.cern,https://root.cern/doc/master/rf504__simwstool_8py.html,1,['Guid'],['Guide']
Usability,"x is locked. Returns the DeltaState between now and the resulting state (i.e. lock count before state), such that the difference can be re-applied using Apply(). In pseudo-code: delta = current_lock_count - earlierState.lock_count; current_lock_count -= delta; return delta; ; Implements ROOT::TVirtualRWMutex.; Definition at line 84 of file TRWMutexImp.cxx. ◆ Streamer(). template<typename MutexT , typename RecurseCountsT = ROOT::Internal::RecurseCounts> . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::Streamer ; (; TBuffer & ; R__b). inlineoverridevirtual . Reimplemented from TVirtualMutex.; Definition at line 36 of file TRWMutexImp.h. ◆ StreamerNVirtual(). template<typename MutexT , typename RecurseCountsT = ROOT::Internal::RecurseCounts> . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 36 of file TRWMutexImp.h. ◆ WriteLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * ROOT::TRWMutexImp< MutexT, RecurseCountsT >::WriteLock. overridevirtual . Take the Write Lock of the mutex. ; Implements ROOT::TVirtualRWMutex.; Definition at line 40 of file TRWMutexImp.cxx. ◆ WriteUnLock(). template<typename MutexT , typename RecurseCountsT = ROOT::Internal::RecurseCounts> . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::WriteUnLock ; (; Hint_t * ; ). overridevirtual . Release the read lock of the mutex. ; Implements ROOT::TVirtualRWMutex.; Definition at line 58 of file TRWMutexImp.cxx. Member Data Documentation. ◆ fMutexImp. template<typename MutexT , typename RecurseCountsT = ROOT::Internal::RecurseCounts> . ROOT::TReentrantRWLock<MutexT, RecurseCountsT> ROOT::TRWMutexImp< MutexT, RecurseCountsT >::fMutexImp. private . Definition at line 23 of file TRWMutexImp.h. core/thread/src/TRWMutexImp.h; core/thread/src/TRWMutexImp.cxx. ROOTTRWMutexImp. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:8355,Guid,Guide,8355,doc/v632/classROOT_1_1TRWMutexImp.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html,1,['Guid'],['Guide']
Usability,"x, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidChangeTab(Int_t tabIndex, Bool_t emit = kTRUE); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGTab&operator=(const TGTab&); TGTab(const TGTab&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTab.html:16733,Clear,ClearFlags,16733,root/html602/TGTab.html,https://root.cern,https://root.cern/root/html602/TGTab.html,2,['Clear'],['ClearFlags']
Usability,"x. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:38215,simpl,simple,38215,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,2,['simpl'],['simple']
Usability,"x. ◆ IsVisited(). virtual int TGHtml::IsVisited ; (; const char * ; ). inlinevirtual . Definition at line 924 of file TGHtml.h. ◆ ItemLayout(). Bool_t TGHtml::ItemLayout ; (; ). overridevirtual . Layout html widget. ; Reimplemented from TGView.; Definition at line 834 of file TGHtml.cxx. ◆ LayoutDoc(). void TGHtml::LayoutDoc ; (; ). protected . Advance the layout as far as possible. ; Definition at line 1178 of file TGHtmlLayout.cxx. ◆ ListTokens(). TGString * TGHtml::ListTokens ; (; TGHtmlElement * ; p, . TGHtmlElement * ; pEnd . ). Return all tokens between the two elements as a string list. ; Definition at line 1454 of file TGHtmlParse.cxx. ◆ LoadImage(). TImage * TGHtml::LoadImage ; (; const char * ; url, . int ; w = 0, . int ; h = 0 . ). virtual . This is the default LoadImage() procedure. ; It just tries to load the image from a file in the local filesystem. ; Definition at line 292 of file TGHtmlImage.cxx. ◆ LostSelection(). void TGHtml::LostSelection ; (; ). protected . Clear selection. ; Definition at line 2027 of file TGHtml.cxx. ◆ MakeInvisible(). void TGHtml::MakeInvisible ; (; TGHtmlElement * ; p_first, . TGHtmlElement * ; p_last . ). protected . Add the STY_Invisible style to every token between p_first and p_last. ; Definition at line 144 of file TGHtmlSizer.cxx. ◆ MakeMarkupEntry(). TGHtmlMarkupElement * TGHtml::MakeMarkupEntry ; (; int ; objType, . int ; type, . int ; argc, . int ; arglen[], . char * ; argv[] . ). protected . Make one markup entry. ; Definition at line 1006 of file TGHtmlParse.cxx. ◆ MapControls(). int TGHtml::MapControls ; (; ). protected . Map any control that should be visible according to the current scroll position. ; At the same time, if any controls that should not be visible are mapped, unmap them. After this routine finishes, all <INPUT> controls should be in their proper places regardless of where they might have been before.; Return the number of controls that are currently visible. ; Definition at line 71 of file TGHtmlFo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:76598,Clear,Clear,76598,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['Clear'],['Clear']
Usability,"x. ◆ ListGui(). void TRecorder::ListGui ; (; const char * ; filename). Prints out recorded GUI events. ; Definition at line 279 of file TRecorder.cxx. ◆ operator=(). TRecorder & TRecorder::operator= ; (; const TRecorder & ; ). private . ◆ Pause(). void TRecorder::Pause ; (; ). Pauses replaying. ; Definition at line 247 of file TRecorder.cxx. ◆ PrevCanvases(). void TRecorder::PrevCanvases ; (; const char * ; filename, . Option_t * ; option . ). Save previous canvases in a .root file. ; Definition at line 308 of file TRecorder.cxx. ◆ Replay() [1/2]. void TRecorder::Replay ; (; ). inline . Definition at line 318 of file TRecorder.h. ◆ Replay() [2/2]. Bool_t TRecorder::Replay ; (; const char * ; filename, . Bool_t ; showMouseCursor = kTRUE, . TRecorder::EReplayModes ; mode = kRealtime . ). Replays events from 'filename'. ; Definition at line 238 of file TRecorder.cxx. ◆ ReplayStop(). void TRecorder::ReplayStop ; (; ). Cancels replaying. ; Definition at line 263 of file TRecorder.cxx. ◆ Resume(). void TRecorder::Resume ; (; ). Resumes replaying. ; Definition at line 255 of file TRecorder.cxx. ◆ Start(). void TRecorder::Start ; (; const char * ; filename, . Option_t * ; option = ""RECREATE"", . Window_t * ; w = nullptr, . Int_t ; winCount = 0 . ). Starts recording events. ; Definition at line 221 of file TRecorder.cxx. ◆ Stop(). void TRecorder::Stop ; (; Bool_t ; guiCommand = kFALSE). Stopps recording events. ; Definition at line 230 of file TRecorder.cxx. ◆ Streamer(). void TRecorder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TRecorder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 341 of file TRecorder.h. Friends And Related Symbol Documentation. ◆ TRecorderInactive. friend class TRecorderInactive. friend . Definition at line 275 of file TRecorder.h. ◆ TRecorderPaused. friend class TRecorderPaused. friend . Definition at line 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:17362,Resume,Resume,17362,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Resume'],['Resume']
Usability,"x. ◆ Weight(). Double_t TGeoChecker::Weight ; (; Double_t ; precision = 0.01, . Option_t * ; option = ""v"" . ). Estimate weight of top level volume with a precision SIGMA(W)/W better than PRECISION. ; Option can be ""v"" - verbose (default). ; Definition at line 2890 of file TGeoChecker.cxx. Member Data Documentation. ◆ fBuff1. TBuffer3D* TGeoChecker::fBuff1. private . Definition at line 42 of file TGeoChecker.h. ◆ fBuff2. TBuffer3D* TGeoChecker::fBuff2. private . Definition at line 43 of file TGeoChecker.h. ◆ fFlags. Bool_t* TGeoChecker::fFlags. private . Array of timing per volume. ; Definition at line 47 of file TGeoChecker.h. ◆ fFullCheck. Bool_t TGeoChecker::fFullCheck. private . Definition at line 44 of file TGeoChecker.h. ◆ fGeoManager. TGeoManager* TGeoChecker::fGeoManager. private . Definition at line 40 of file TGeoChecker.h. ◆ fNchecks. Int_t TGeoChecker::fNchecks. private . Selected node for overlap checking. ; Definition at line 50 of file TGeoChecker.h. ◆ fNmeshPoints. Int_t TGeoChecker::fNmeshPoints. private . Number of checks for current volume. ; Definition at line 51 of file TGeoChecker.h. ◆ fSelectedNode. TGeoNode* TGeoChecker::fSelectedNode. private . Timer. ; Definition at line 49 of file TGeoChecker.h. ◆ fTimer. TStopwatch* TGeoChecker::fTimer. private . Array of flags per volume. ; Definition at line 48 of file TGeoChecker.h. ◆ fVal1. Double_t* TGeoChecker::fVal1. private . Definition at line 45 of file TGeoChecker.h. ◆ fVal2. Double_t* TGeoChecker::fVal2. private . Array of number of crossings per volume. ; Definition at line 46 of file TGeoChecker.h. ◆ fVsafe. TGeoVolume* TGeoChecker::fVsafe. private . Definition at line 41 of file TGeoChecker.h. Libraries for TGeoChecker:. [legend]; The documentation for this class was generated from the following files:; geom/geompainter/inc/TGeoChecker.h; geom/geompainter/src/TGeoChecker.cxx. TGeoChecker. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:31514,Guid,Guide,31514,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['Guid'],['Guide']
Usability,"x. ◆ begin(). TIter TCollection::begin ; (; ); const. inline . Definition at line 292 of file TCollection.h. ◆ Browse(). void TCollection::Browse ; (; TBrowser * ; b). overridevirtual . Browse this collection (called by TBrowser). ; If b=0, there is no Browse call TObject::Browse(0) instead. This means TObject::Inspect() will be invoked indirectly ; Reimplemented from TObject.; Reimplemented in TRootIconList.; Definition at line 248 of file TCollection.cxx. ◆ Capacity(). Int_t TCollection::Capacity ; (; ); const. inline . Definition at line 167 of file TCollection.h. ◆ Class(). static TClass * TCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 222 of file TCollection.h. ◆ Clear(). void TCollection::Clear ; (; Option_t * ; option = """"). overridepure virtual . Reimplemented from TObject.; Implemented in TListOfEnums, TListOfEnumsWithLock, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfDataMembers, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions. ◆ Clone(). TObject * TCollection::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a clone of an collection using the Streamer facility. ; If newname is specified, this will be the name of the new collection. ; Reimplemented from TObject.; Definition at line 263 of file TCollection.cxx. ◆ Compare(). Int_t TCollection::Compare ; (; const TObject * ; obj); const. overridevirtual . Compare two TCollection objects. ; Returns 0 when equal, -1 when this is smaller and +1 when bigger (like strcmp()). ; Reimplemented from TObject.; Definition at line 275 of file TCollection.cxx. ◆ Contains() [1/2]. Bool_t TCollection::Contains ; (; const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:17243,Clear,Clear,17243,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,2,['Clear'],['Clear']
Usability,x. ◆ ~THilbertMatrixT(). template<class Element > . virtual THilbertMatrixT< Element >::~THilbertMatrixT ; (; ). inlinevirtual . Definition at line 150 of file TMatrixTLazy.h. Member Function Documentation. ◆ Class(). template<class Element > . static TClass * THilbertMatrixT< Element >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). template<class Element > . static const char * THilbertMatrixT< Element >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class Element > . static constexpr Version_t THilbertMatrixT< Element >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 152 of file TMatrixTLazy.h. ◆ DeclFileName(). template<class Element > . static const char * THilbertMatrixT< Element >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 152 of file TMatrixTLazy.h. ◆ FillIn(). template<class Element > . void THilbertMatrixT< Element >::FillIn ; (; TMatrixT< Element > & ; m); const. overrideprivatevirtual . Implements TMatrixTLazy< Element >.; Definition at line 174 of file TMatrixTLazy.cxx. ◆ IsA(). template<class Element > . TClass * THilbertMatrixT< Element >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 152 of file TMatrixTLazy.h. ◆ Streamer(). template<class Element > . void THilbertMatrixT< Element >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). template<class Element > . void THilbertMatrixT< Element >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 152 of file TMatrixTLazy.h. math/matrix/inc/TMatrixTLazy.h; math/matrix/src/TMatrixTLazy.cxx. THilbertMatrixT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHilbertMatrixT.html:13920,Guid,Guide,13920,doc/master/classTHilbertMatrixT.html,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixT.html,1,['Guid'],['Guide']
Usability,"x.Definition TMath.h:668; TMath::MinElementT MinElement(Long64_t n, const T *a)Returns minimum of array a of length n.Definition TMath.h:960; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::AreEqualRelBool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec)Comparing floating points.Definition TMath.h:426; TMath::AreEqualAbsBool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon)Comparing floating points.Definition TMath.h:418; TMath::KolmogorovProbDouble_t KolmogorovProb(Double_t z)Calculates the Kolmogorov distribution function,.Definition TMath.cxx:679; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TMath::InfinityDouble_t Infinity()Returns an infinity as defined by the IEEE standard.Definition TMath.h:917; v@ vDefinition rootcling_impl.cxx:3699; Foption_tDefinition Foption.h:24; Drawth1 Draw(); mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. histhistsrcTH1.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:478428,Guid,Guide,478428,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Guid'],['Guide']
Usability,"x.cxx:2877; TGeoHMatrix::CopyFromvoid CopyFrom(const TGeoMatrix *other)Fast copy method.Definition TGeoMatrix.cxx:2500; TGeoHMatrix::ReflectYvoid ReflectY(Bool_t leftside, Bool_t rotonly=kFALSE) overrideMultiply by a reflection respect to ZX.Definition TGeoMatrix.cxx:2837; TGeoHMatrix::FastRotZvoid FastRotZ(const Double_t *sincos)Perform a rotation about Z having the sine/cosine of the rotation angle.Definition TGeoMatrix.cxx:2537; TGeoHMatrix::fTranslationDouble_t fTranslation[3]Definition TGeoMatrix.h:460; TGeoHMatrix::operator==Bool_t operator==(const TGeoMatrix &other) constIs-equal operator.Definition TGeoMatrix.cxx:2475; TGeoHMatrix::fRotationMatrixDouble_t fRotationMatrix[9]Definition TGeoMatrix.h:461; TGeoHMatrix::~TGeoHMatrix~TGeoHMatrix() overridedestructorDefinition TGeoMatrix.cxx:2422; TGeoHMatrix::RotateYvoid RotateY(Double_t angle) overrideRotate about Y axis with angle expressed in degrees.Definition TGeoMatrix.cxx:2763; TGeoHMatrix::Clearvoid Clear(Option_t *option="""") overrideclear the data for this matrixDefinition TGeoMatrix.cxx:2512; TGeoHMatrix::GetTranslationconst Double_t * GetTranslation() const overrideDefinition TGeoMatrix.h:527; TGeoHMatrix::operator=TGeoHMatrix & operator=(const TGeoHMatrix &other)Definition TGeoMatrix.h:471; TGeoHMatrix::Multiplyvoid Multiply(const TGeoMatrix *right)multiply to the right with an other transformation if right is identity matrix, just returnDefinition TGeoMatrix.cxx:2605; TGeoHMatrix::ReflectZvoid ReflectZ(Bool_t leftside, Bool_t rotonly=kFALSE) overrideMultiply by a reflection respect to XY.Definition TGeoMatrix.cxx:2857; TGeoHMatrix::operator*TGeoHMatrix operator*(const TGeoMatrix &other) constDefinition TGeoMatrix.cxx:2465; TGeoHMatrix::SetTranslationvoid SetTranslation(const Double_t *vect)Definition TGeoMatrix.h:511; TGeoHMatrix::fScaleDouble_t fScale[3]Definition TGeoMatrix.h:462; TGeoIdentityAn identity transformation.Definition TGeoMatrix.h:406; TGeoIdentity::InverseTGeoHMatrix Inverse() const over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:109712,Clear,Clearvoid,109712,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"x1: outside radius at -DZ in z; rmin2: inside radius at +DZ in z; rmax2: outside radius at +DZ in z . Definition at line 28 of file TCONE.h. Public Member Functions;  TCONE ();  CONE shape default constructor. ;  ;  TCONE (const char *name, const char *title, const char *material, Float_t dz, Float_t rmax1, Float_t rmax2=0);  CONE shape ""simplified"" constructor. ;  ;  TCONE (const char *name, const char *title, const char *material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2);  CONE shape normal constructor. ;  ;  ~TCONE () override;  CONE shape default destructor. ;  ; Float_t GetRmax2 () const;  ; Float_t GetRmin2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONE.html:1557,simpl,simplified,1557,doc/master/classTCONE.html,https://root.cern,https://root.cern/doc/master/classTCONE.html,1,['simpl'],['simplified']
Usability,"x:105; ROOT::Internal::VecOps::ResetViewvoid ResetView(RVec< T > &v, T *addr, std::size_t sz)An unsafe function to reset the buffer for which this RVec is acting as a view.Definition RVec.hxx:546; ROOT::Internal::VecOps::NextPowerOf2uint64_t NextPowerOf2(uint64_t A)Return the next power of two (in 64-bits) that is strictly greater than A.Definition RVec.hxx:126; ROOT::Internal::VecOps::Allconstexpr bool All(const bool *vals, std::size_t size)Definition RVec.hxx:79; ROOT::Internal::VecOps::GetVectorsSizestd::size_t GetVectorsSize(const std::string &id, const RVec< T > &... vs)Definition RVec.hxx:88; ROOT::Internal::VecOps::UninitializedValueConstructvoid UninitializedValueConstruct(ForwardIt first, ForwardIt last)Definition RVec.hxx:530; ROOT::Internal::VecOps::MapFromTupleauto MapFromTuple(Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...))Definition RVec.hxx:117; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Dot#define Dot(u, v)Definition normal.c:49; v2@ v2Definition rootcling_impl.cxx:3690; v0@ v0Definition rootcling_impl.cxx:3688; v@ vDefinition rootcling_impl.cxx:3687; v1@ v1Definition rootcling_impl.cxx:3689; ROOT::Detail::indicesDefinition span.hxx:68; ROOT::Internal::VecOps::IsRVecDefinition RVec.hxx:73; ROOT::Internal::VecOps::RVecInlineStorageSizeThe size of the inline storage of an RVec.Definition RVec.hxx:512; ROOT::Internal::VecOps::SmallVectorAlignmentAndSizeUsed to figure out the offset of the first element of an RVec.Definition RVec.hxx:199; ROOT::Internal::VecOps::SmallVectorStorageStorage for the SmallVector elements.Definition RVec.hxx:497; ValueDefinition functioncalls.h:15; RangeTa Range(0, 0, 1, 1); mTMarker mDefinition textangle.C:8. mathvecopsincROOTRVec.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:08:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RVec_8hxx_source.html:152196,Guid,Guide,152196,doc/v632/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html,1,['Guid'],['Guide']
Usability,"x:373; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; |> | [Elapsed time: 0:13m processing file: 7 / 9 processed evts: 1000 / 556693 7.24e+01 evt/s 2:07:51h remaining time (per file being processed)] ; |=====================================================================================================================================================================================================================================================================> | [Elapsed time: 0:14m processing file: 9 / 9 processed evts: 436000 / 912535 2.17e+05 evt/s 0:02m remaining time (per file being processed)] ; || [Elapsed time: 0:15m processing file: 9 / 9 processed evts: 895000 / 912535 2.97e+05 evt/s 0:00m remaining time (per file being processed)] ; ; ; [Total elapsed time: 0:15m processed files: 9 / 9 processed evts: 912535 / 912535] ; Saved figure to df106_HiggsToFourLeptons_python.png; DateMarch 2020, August 2022, August 2023 ; AuthorsStefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN) ; Definition in file df106_HiggsToFourLeptons.py. tutorialsdataframedf106_HiggsToFourLeptons.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html:14340,Guid,Guide,14340,doc/master/df106__HiggsToFourLeptons_8py.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html,1,['Guid'],['Guide']
Usability,"x:381; TRandom::Binomialvirtual Int_t Binomial(Int_t ntot, Double_t prob)Generates a random integer N according to the binomial law.Definition TRandom.cxx:212; Note that the time to generate a number from an arbitrary TF1 function using TF1::GetRandom or using TUnuran is independent of the complexity of the function.; TH1::FillRandom(TH1 *) or TH1::FillRandom(const char *tf1name) can be used to fill an histogram (1-d, 2-d, 3-d from an existing histogram or from an existing function.; Note this interesting feature when working with objects. You can use several TRandom objects, each with their ""independent"" random sequence. For example, one can imagine TRandom *eventGenerator = new TRandom();; TRandom *tracking = new TRandom();; eventGenerator can be used to generate the event kinematics. tracking can be used to track the generated particles with random numbers independent from eventGenerator. This very interesting feature gives the possibility to work with simple and very fast random number generators without worrying about random number periodicity as it was the case with Fortran. One can use TRandom::SetSeed to modify the seed of one generator.; A TRandom object may be written to a Root file. as part of another object; or with its own key (example: gRandom->Write(""Random"") ) ; . Definition at line 27 of file TRandom.h. Public Member Functions;  TRandom (UInt_t seed=65539);  Default constructor. For seed see SetSeed(). ;  ;  ~TRandom () override;  Default destructor. ;  ; virtual Int_t Binomial (Int_t ntot, Double_t prob);  Generates a random integer N according to the binomial law. ;  ; virtual Double_t BreitWigner (Double_t mean=0, Double_t gamma=1);  Return a number distributed following a BreitWigner function with mean and gamma. ;  ; virtual void Circle (Double_t &x, Double_t &y, Double_t r);  Generates random vectors, uniformly distributed over a circle of given radius. ;  ; virtual Double_t Exp (Double_t tau);  Returns an exponential deviate. ;  ; virtual Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:10630,simpl,simple,10630,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['simpl'],['simple']
Usability,"x:51; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TTree.h; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Fillvirtual Int_t Fill()Fill all branches.Definition TTree.cxx:4603; TTree::AddFriendvirtual TFriendElement * AddFriend(const char *treename, const char *filename="""")Add a TFriendElement to the list of friends.Definition TTree.cxx:1332; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::Printvoid Print(Option_t *option="""") const overridePrint a summary of the tree contents.Definition TTree.cxx:7219; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)Add a new branch, and infer the data type from the type of obj being passed.Definition TTree.h:353; TTree::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite this object to the current directory.Definition TTree.cxx:9753; ptTPaveText * ptDefinition entrylist_figure1.C:7; nconst Int_t nDefinition legend1.C:16; f1TF1 * f1Definition legend1.C:11; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; AuthorRene Brun ; Definition in file tree3.C. tutorialstreetree3.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree3_8C.html:4636,Guid,Guide,4636,doc/master/tree3_8C.html,https://root.cern,https://root.cern/doc/master/tree3_8C.html,1,['Guid'],['Guide']
Usability,"x:850; TStreamerInfo::fVirtualInfoLocULong_t * fVirtualInfoLoc![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated)Definition TStreamerInfo.h:103; TStreamerInfo::Updatevoid Update(const TClass *oldClass, TClass *newClass) overridefunction called by the TClass constructor when replacing an emulated class by the real classDefinition TStreamerInfo.cxx:5629; TStreamerInfo::GetReadMemberWiseActionsTStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Bool_t forCollection)Definition TStreamerInfo.h:167; TStreamerInfo::PrintValueClonesvoid PrintValueClones(const char *name, TClonesArray *clones, Int_t i, Int_t eoffset, Int_t lenmax=1000) constPrint value of element i in a TClonesArray.Definition TStreamerInfo.cxx:5204; TStreamerInfo::GetValueClonesDouble_t GetValueClones(TClonesArray *clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) constDefinition TStreamerInfo.h:193; TStreamerInfo::GetValueDouble_t GetValue(char *pointer, Int_t i, Int_t j, Int_t len) constDefinition TStreamerInfo.h:192; TStringBasic string class.Definition TString.h:139; TVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualArray.h:27; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualCollectionProxy::Atvirtual void * At(UInt_t idx)=0Return the address of the value at index idx; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; bool; double; int; unsigned int; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TStreamerInfoActionsDefinition TBuffer.h:39. ioioincTStreamerInfo.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8h_source.html:44235,Guid,Guide,44235,doc/master/TStreamerInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8h_source.html,1,['Guid'],['Guide']
Usability,"x;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 lines in it (RLine) ;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro ru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:172721,learn,learn,172721,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['learn'],['learn']
Usability,"x;; 1584 fSelectedY = py;; 1585 }; 1586 }; 1587 return pad;; 1588}; 1589 ; 1590////////////////////////////////////////////////////////////////////////////////; 1591/// Emit Picked() signal.; 1592 ; 1593void TCanvas::Picked(TPad *pad, TObject *obj, Int_t event); 1594{; 1595 Longptr_t args[3];; 1596 ; 1597 args[0] = (Longptr_t) pad;; 1598 args[1] = (Longptr_t) obj;; 1599 args[2] = event;; 1600 ; 1601 Emit(""Picked(TPad*,TObject*,Int_t)"", args);; 1602}; 1603 ; 1604////////////////////////////////////////////////////////////////////////////////; 1605/// Emit Highlighted() signal.; 1606///; 1607/// - pad is pointer to pad with highlighted histogram or graph; 1608/// - obj is pointer to highlighted histogram or graph; 1609/// - x is highlighted x bin for 1D histogram or highlighted x-th point for graph; 1610/// - y is highlighted y bin for 2D histogram (for 1D histogram or graph not in use); 1611 ; 1612void TCanvas::Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y); 1613{; 1614 Longptr_t args[4];; 1615 ; 1616 args[0] = (Longptr_t) pad;; 1617 args[1] = (Longptr_t) obj;; 1618 args[2] = x;; 1619 args[3] = y;; 1620 ; 1621 Emit(""Highlighted(TVirtualPad*,TObject*,Int_t,Int_t)"", args);; 1622}; 1623 ; 1624////////////////////////////////////////////////////////////////////////////////; 1625/// This is ""simplification"" for function TCanvas::Connect with Highlighted; 1626/// signal for specific slot.; 1627///; 1628/// Slot has to be defined ""UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)""; 1629/// all parameters of UserFunction are taken from TCanvas::Highlighted; 1630 ; 1631void TCanvas::HighlightConnect(const char *slot); 1632{; 1633 Connect(""Highlighted(TVirtualPad*,TObject*,Int_t,Int_t)"", nullptr, nullptr, slot);; 1634}; 1635 ; 1636////////////////////////////////////////////////////////////////////////////////; 1637/// Emit Selected() signal.; 1638 ; 1639void TCanvas::Selected(TVirtualPad *pad, TObject *obj, Int_t event); 1640{; 1641 Longptr_t args[3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:50816,simpl,simplification,50816,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['simpl'],['simplification']
Usability,"x;i++){; �����; for(j=0;j<nbinsy;j++){�� ��������������� ; �������� fwrite(source[i][j],; sizeof(source[0][0][0]),nbinsz,out);; ����� }; �� }�� ; �� fclose(out);����� ; �� ; ��; back->Draw("""");� ; };  ;  . const char* SmoothMarkov(float*** source, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t averWindow). THREE-DIMENSIONAL MARKOV SPECTRUM SMOOTHING FUNCTION. This function calculates smoothed spectrum from source spectrum; based on Markov chain method.; The result is placed in the array pointed by spectrum pointer. Function parameters:; source-pointer to the array of source spectrum; working_space-pointer to the working array; ssizex-x length of spectrum and working space arrays; ssizey-y length of spectrum and working space arrays; ssizey-z length of spectrum and working space arrays; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of statistical fluctuations; �        ; the algorithm is based on discrete Markov chain, which has very simple; invariant distribution;  ; ����������� �����; �������; ��being defined from the normalization; condition ; �������� n is the length of the smoothed spectrum and .  ;  ;  . is the; probability of the change of the peak position from channel i to the channel; i+1.� is; the normalization constant so that �and m is a width of smoothing window.; We have extended this algorithm to three dimensions. ;  ; Function:; const char*; TSpectrum3::SmoothMarkov(float; ***fSpectrum, int fSizex, int; fSizey, int fSizey, �int; fAverWindow)� ;  ; This function calculates smoothed; spectrum from the source spectrum based on Markov chain method. The result is; placed in the field pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix��������������� �����������������; ������� fAverWindow-w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum3.html:18606,simpl,simple,18606,root/html528/TSpectrum3.html,https://root.cern,https://root.cern/root/html528/TSpectrum3.html,4,['simpl'],['simple']
Usability,xConnect() [2/2]. int TWinNTSystem::WinNTUnixConnect ; (; int ; port). staticprotected . Connect to a Unix domain socket. ; Definition at line 5256 of file TWinNTSystem.cxx. ◆ WorkingDirectory() [1/2]. const char * TWinNTSystem::WorkingDirectory ; (; ). overridevirtual . Return the working directory for the default drive. ; Reimplemented from TSystem.; Definition at line 2141 of file TWinNTSystem.cxx. ◆ WorkingDirectory() [2/2]. const char * TWinNTSystem::WorkingDirectory ; (; char ; driveletter). Return working directory for the selected drive driveletter == 0 means return the working durectory for the default drive. ; Definition at line 2164 of file TWinNTSystem.cxx. Member Data Documentation. ◆ fActUser. int TWinNTSystem::fActUser {-1}. private . Definition at line 68 of file TWinNTSystem.h. ◆ fDirNameBuffer. std::string TWinNTSystem::fDirNameBuffer. private . Definition at line 74 of file TWinNTSystem.h. ◆ fGroups. struct group* TWinNTSystem::fGroups {nullptr}. private . Definition at line 64 of file TWinNTSystem.h. ◆ fGroupsInitDone. Bool_t TWinNTSystem::fGroupsInitDone {kFALSE}. private . Definition at line 69 of file TWinNTSystem.h. ◆ fGUIThreadHandle. void* TWinNTSystem::fGUIThreadHandle {nullptr}. private . Definition at line 72 of file TWinNTSystem.h. ◆ fGUIThreadId. ULong_t TWinNTSystem::fGUIThreadId {0}. private . Definition at line 73 of file TWinNTSystem.h. ◆ fhProcess. HANDLE TWinNTSystem::fhProcess. private . Definition at line 71 of file TWinNTSystem.h. ◆ fNbGroups. int TWinNTSystem::fNbGroups {0}. private . Definition at line 67 of file TWinNTSystem.h. ◆ fNbUsers. int TWinNTSystem::fNbUsers {0}. private . Definition at line 66 of file TWinNTSystem.h. ◆ fPasswords. struct passwd* TWinNTSystem::fPasswords {nullptr}. private . Definition at line 65 of file TWinNTSystem.h. core/winnt/inc/TWinNTSystem.h; core/winnt/src/TWinNTSystem.cxx. TWinNTSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:78751,Guid,Guide,78751,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['Guid'],['Guide']
Usability,"xD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian.html:3445,clear,clearValueDirty,3445,root/html534/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian.html,3,['clear'],['clearValueDirty']
Usability,"xDBase::kAtA,m);; const TMatrixDSymEigen eigen(mtm);; const TVectorD eigenVal = eigen.GetEigenValues();; const Bool_t ok = VerifyVectorIdentity(sig,eigenVal,1,1.-e-14);; 14.8 Speed Comparisons; Speed of four matrix operations have been compared between four matrix libraries, GSL CLHEP, ROOT v3.10 and ROOT v4.0. Next figure shows the CPU time for these four operations as a function of the matrix size:. A*B The execution time is measured for the sum of A * Bsym, Bsym* A and A * B. Notice the matrix_size3 dependence of execution time. CLHEP results are hampered by a poor implementation of symmetric matrix multiplications. For instance, for general matrices of size 100x100, the time is 0.015 sec. while A * Bsym takes 0.028 sec and Bsym* A takes 0.059 sec. Both GSL and ROOT v4.0 can be setup to use the hardware-optimized multiplication routines of the BLAS libraries. It was tested on a G4 PowerPC. The improvement becomes clearly visible around sizes of (50x50) were the execution speed improvement of the Altivec processor becomes more significant than the overhead of filling its pipe. \(A^{-1}\) Here, the time is measured for an in-place matrix inversion. Except for ROOT v3.10, the algorithms are all based on an LUfactorization followed by forward/back-substitution. ROOT v3.10 is using the slower Gaussian elimination method. The numerical accuracy of the CLHEP routine is poor:. up to 6x6 the numerical imprecise Cramer multiplication is hard-coded. For instance, calculating U=H*H-1, where H is a (5x5) Hilbert matrix, results in off-diagonal elements of \(10^{-7}\) instead of the \(10^{-13}\) using an LUaccording to Crout.; scaling protection is non-existent and limits are hard-coded, as a consequence inversion of a Hilbert matrix for sizes>(12x12) fails. In order to gain speed the CLHEP algorithm stores its permutation info of the pivots points in a static array, making multi-threading not possible. GSL uses LU decomposition without the implicit scaling of Crout. Therefore",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:802290,clear,clearly,802290,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clearly']
Usability,"xImp *m) override;  Return a Win32 condition variable. ;  ; TMutexImp * CreateMutexImp (Bool_t recursive) override;  Return a Win32 Mutex. ;  ; TThreadImp * CreateThreadImp () override;  Return a Win32 thread. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadFactory;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32ThreadFactory.html:1559,Clear,Clear,1559,doc/master/classTWin32ThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTWin32ThreadFactory.html,1,['Clear'],['Clear']
Usability,"xParam];; 192 fDF = new Double_t[fMaxParam];; 193 fGr = new Double_t[fMaxParam];; 194 fANames = new TString[fMaxParam];; 195 ; 196 // fX = new Double_t[10];; 197 ; 198 Int_t zSize = fMaxParam*(fMaxParam+1)/2;; 199 fZ0 = new Double_t[zSize];; 200 fZ = new Double_t[zSize];; 201 ; 202 for (Int_t i=0;i<fMaxParam;i++) {; 203 fA[i] =0.;; 204 fDF[i]=0.;; 205 fAMN[i]=gMINDOUBLE;; 206 fAMX[i]=gMAXDOUBLE;; 207 fPL0[i]=.1;; 208 fPL[i] =.1;; 209 fParamError[i]=0.;; 210 fANames[i]=Form(""%d"",i);; 211 }; 212}; 213 ; 214////////////////////////////////////////////////////////////////////////////////; 215/// TFumili destructor; 216 ; 217TFumili::~TFumili() {; 218 DeleteArrays();; 219 if (gROOT && !gROOT->TestBit(TObject::kInvalidObject)); 220 gROOT->GetListOfSpecials()->Remove(this);; 221 if (gFumili == this) gFumili = nullptr;; 222}; 223 ; 224////////////////////////////////////////////////////////////////////////////////; 225/// return a chisquare equivalent; 226 ; 227Double_t TFumili::Chisquare(Int_t npar, Double_t *params) const; 228{; 229 Double_t amin = 0;; 230 H1FitChisquareFumili(npar,params,amin,params,1);; 231 return 2*amin;; 232}; 233 ; 234////////////////////////////////////////////////////////////////////////////////; 235///; 236/// Resets all parameter names, values and errors to zero; 237///; 238/// Argument opt is ignored; 239///; 240/// NB: this procedure doesn't reset parameter limits; 241 ; 242void TFumili::Clear(Option_t *); 243{; 244 fNpar = fMaxParam;; 245 fNfcn = 0;; 246 for (Int_t i=0;i<fNpar;i++) {; 247 fA[i] =0.;; 248 fDF[i] =0.;; 249 fPL0[i] =.1;; 250 fPL[i] =.1;; 251 fAMN[i] = gMINDOUBLE;; 252 fAMX[i] = gMAXDOUBLE;; 253 fParamError[i]=0.;; 254 fANames[i]=Form(""%d"",i);; 255 }; 256}; 257 ; 258////////////////////////////////////////////////////////////////////////////////; 259/// Deallocates memory. Called from destructor TFumili::~TFumili; 260 ; 261void TFumili::DeleteArrays(){; 262 delete[] fCmPar;; 263 delete[] fANames;; 264 delete[] fDF;; 265 // delete[]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:7858,Clear,Clear,7858,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['Clear'],['Clear']
Usability,"xT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 > source2Definition TMatrixT.cxx:2584; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; TMatrixTAutoloadOps::ElementDivTMatrixT< Element > & ElementDiv(TMatrixT< Element > &target, const TMatrixT< Element > &source)Divide target by the source, element-by-element.Definition TMatrixT.cxx:3025; TMatrixTAutoloadOps::MultElement1 Mult(const TVectorT< Element1 > &v1, const TMatrixT< Element2 > &m, const TVectorT< Element3 > &v2)Perform v1 * M * v2, a scalar result.Definition TVectorT.cxx:1542; TMatrixTAutoloadOps::operator-TMatrixT< Element > operator-(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)operation this = source1-source2Definition TMatrixT.cxx:2354; TMatrixTAutoloadOps::operator<=TMatrixT< Element > operator<=(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 <= source2Definition TMatrixT.cxx:2714; TMatrixTAutoloadOps::operator&&TMatrixT< Element > operator&&(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)Logical AND.Definition TMatrixT.cxx:2466; TMatrixTAutoloadOps::operator*TMatrixT< Element > operator*(Element val, const TMatrixT< Element > &source)operation this = val*sourceDefinition TMatrixT.cxx:2405; TMatrixTAutoloadOps::AreCompatibleBool_t AreCompatible(const TMatrixTBase< Element1 > &m1, const TMatrixTBase< Element2 > &m2, Int_t verbose=0)Check that matrice sm1 and m2 areboth valid and have identical shapes .Definition TMatrixTBase.cxx:888; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701; mTMarker mDefinition textangle.C:8. mathmatrixsrcTMatrixT.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:142339,Guid,Guide,142339,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['Guid'],['Guide']
Usability,"xTreeType)number of signal events (used to compute significance)Definition DataLoader.cxx:371; TMVA::DataLoader::AddSpectatorvoid AddSpectator(const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0)user inserts target in data set infoDefinition DataLoader.cxx:524; TMVA::DataLoader::PrepareTrainingAndTestTreevoid PrepareTrainingAndTestTree(const TCut &cut, const TString &splitOpt)prepare the training and test trees -> same cuts for signal and backgroundDefinition DataLoader.cxx:632; TMVA::DataLoader::AddBackgroundTreevoid AddBackgroundTree(TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)number of signal events (used to compute significance)Definition DataLoader.cxx:402; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kFisher@ kFisherDefinition Types.h:82; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMVA::TMVAGuivoid TMVAGui(const char *fName=""TMVA.root"", TString dataset=""""); Factory.h; AuthorKim Albertsson (adapted from code originally by Andreas Hoecker) ; Definition in file TMVACrossValidation.C. tutorialstmvaTMVACrossValidation.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:30358,Guid,Guide,30358,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['Guid'],['Guide']
Usability,"x[0]-par[1])/par[2]);; double r2 = double((x[1]-par[3])/par[4]);; return par[0]*TMath::Exp(-0.5*(r1*r1+r2*r2));; }; double fun2(double *x, double *par) {; double *p1 = &par[0];; double *p2 = &par[5];; double *p3 = &par[10];; double result = g2(x,p1) + g2(x,p2) + g2(x,p3);; return result;; }; ; void fit2() {; const int npar = 15;; double f2params[npar] =; {100,-3,3,-3,3,160,0,0.8,0,0.9,40,4,0.7,4,0.7};; TF2 *f2 = new TF2(""f2"",fun2,-10,10,-10,10, npar);; f2->SetParameters(f2params);; ; //Create an histogram and fill it randomly with f2; TH2F *h2 = new TH2F(""h2"",""from f2"",40,-10,10,40,-10,10);; int nentries = 100000;; h2->FillRandom(""f2"",nentries);; //Fit h2 with original function f2; float ratio = 4*nentries/100000;; f2params[ 0] *= ratio;; f2params[ 5] *= ratio;; f2params[10] *= ratio;; f2->SetParameters(f2params);; h2->Fit(""f2"");; }; TF2.h; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TH2.h; nentriesint nentriesDefinition THbookFile.cxx:91; TMath.h; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF2A 2-Dim function with parameters.Definition TF2.h:29; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; double; xDouble_t x[n]Definition legend1.C:17; RooFit::Detail::MathFuncs::ratiodouble ratio(double numerator, double denominator)Definition MathFuncs.h:103; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; AuthorRene Brun ; Definition in file fit2.C. tutorialsfitfit2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit2_8C.html:3120,Guid,Guide,3120,doc/master/fit2_8C.html,https://root.cern,https://root.cern/doc/master/fit2_8C.html,1,['Guid'],['Guide']
Usability,"x_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; virtual void Initialize ();  Initialize the weights and biases according to the given initialization method. ;  ; bool IsTraining () const;  ; virtual void Print () const =0;  Prints the info about the layer. ;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ReadWeightsFromXML (void *parent)=0;  Read the information and the weights about the layer from XML node. ;  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5145,learn,learningRate,5145,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"xamples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials illustrate the main features of RooStats. ;  ;  Spectrum tutorials;  Examples showing the TSpectrum and TSpectrumPainter usage. ;  ;  TSPlot tutorials;  This tutorial illustrates the use of class TSPlot. ;  ;  SQL tutorials;  Examples showing the SQL classes. ;  ;  TMVA tutorials;  Example code which illustrates how to use the TMVA toolkit. ;  ;  TUnfold tutorials;  Test programs for the classes TUnfold and related. ;  ;  Unuran tutorials;  Examples showing unuran capabilities. ;  ;  VecOps tutorials;  These examples show the functionalities of the VecOps utilities. ;  ;  FITS files interface tutorials;  Examples showing the FITS file interface. ;  ;  XML tutorials;  XML examples. ;  ;  Proof tutorials;  These examples aim to illustrate the usage of PROOF. ;  ;  TWebCanvas tutorials;  Examples showing the special features of web-based canvas. ;  ;  Webgui tutorials;  Webgui examples. ;  ;  Legacy tutorials;  Legacy Tutorials. ;  . Files; file  demos.C;  This macro shows a control bar to run some of the ROOT tutorials. ;  ; file  demoshelp.C;  This macro shows help on running the Demos. ;  ; file  hsimple.C;   This program creates : ;  ; file  rootlogoff.C;  Example of rootlogoff.C. ;  ; file  rootlogon.C;  Example of rootlogon.C. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Tutorials.html:4921,Guid,Guide,4921,doc/master/group__Tutorials.html,https://root.cern,https://root.cern/doc/master/group__Tutorials.html,1,['Guid'],['Guide']
Usability,"xclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ;  gerrors.C;   Draw a graph with error bars ;  ;  gerrors2.C;   Draw two graphs with error bars ;  ;  gmultierrors.C;   Draw a graph with multiple y errors ;  ;  graph.C;   Draw a simple graph. ;  ;  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ;  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ;  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  graphpolar.C;   Create and draw a polar graph. ;  ;  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ;  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ;  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ;  graphShade.C;   Show how to shade an area between two graphs ;  ;  graphstruct.C;   Draw a simple graph structure. ;  ;  graphtext.C;   Draw a graph with text attached to each point. ;  ;  gtime.C;   Example of TGraphTime. ;  ;  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ;  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  hlGraph2.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  labels1.C;   Setting alphanumeric labels in a 1-d histogram. ;  ;  labels2.C;   Setting alphanumeric labels. ;  ;  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ;  multigraph.C;   Create and Draw a TMultiGraph. ;  ;  multigraphpalettecolor.C;   Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  multipalette.C;   Draw color plots using different color palettes. ;  ;  scatter.C;   D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html:1582,simpl,simple,1582,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,1,['simpl'],['simple']
Usability,"xel coordinates. If (px,py) is the cursor position, px=0 and py=0 corresponds to the top-left corner of the pad, which is the standard convention in windowing systems.; 9.3.2.4 Using NDC for a particular Object; Most of the time, you will be using the user coordinate system. But sometimes, you will want to use NDC. For example, if you want to draw text always at the same place over a histogram, no matter what the histogram coordinates are. There are two ways to do this. You can set the NDC for one object or may convert NDC to user coordinates. Most graphical objects offer an option to be drawn in NDC. For instance, a line (TLine) may be drawn in NDC by using DrawLineNDC(). A latex formula or a text may use TText::SetNDC() to be drawn in NDC coordinates.; 9.3.3 Converting between Coordinate Systems; There are a few utility functions in TPad to convert from one system of coordinates to another. In the following table, a point is defined by (px,py) in pixel coordinates, (ux,uy) in user coordinates, (ndcx,ndcy) in normalized coordinates, (apx, apy) are in absolute pixel coordinates. Conversion; TPad’s Methods; Returns. NDC to Pixel; UtoPixel(ndcx); VtoPixel(ndcy); Int_t; Int_t. Pixel to User; PixeltoX(px); PixeltoY(py); PixeltoXY(px,py,&ux,&uy); Double_t; Double_t; Double_t ux,uy. User to Pixel; XtoPixel(ux); YtoPixel(uy); XYtoPixel(ux,uy,&px,&py); Int_t; Int_t; Int_t px,py. User to absolute pixel; XtoAbsPixel(ux); YtoAbsPixel(uy); XYtoAbsPixel(ux,uy,&apx,&apy); Int_t; Int_t; Int_t apx,apy. Absolute pixel to user; AbsPixeltoX(apx); AbsPixeltoY(apy); AbsPixeltoXY(apx,apy,&ux,&uy); Double_t; Double_t; Double_t ux,uy. Note: all the pixel conversion functions along the Y axis consider that py=0 is at the top of the pad except PixeltoY() which assume that the position py=0 is at the bottom of the pad. To make PixeltoY() converting the same way as the other conversion functions, it should be used the following way (p is a pointer to a TPad):; p->PixeltoY(py - p->GetWh());; 9.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:310549,ux,ux,310549,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['ux'],['ux']
Usability,"xel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TPieEditor(); Destructor of pie editor. void ConnectSignals2Slots(); Connect signals to slots. void ActivateBaseClassEditors(TClass* ); Exclude TAttTextEditor from this interface. void SetModel(TObject* ); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoChange3DAngle(); Slot for setting the 3D angle. void DoGraphLineWidth(); Slot connected to the graph line width. void DoTextChange(); Change text. TGComboBox* BuildFontSizeComboBox(TGFrame* , Int_t ); Create text size combo box. » Author: Guido Volpi 04/10/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TPieEditor.h 31945 2009-12-21 19:03:21Z rdm $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPieEditor.html:21559,Guid,Guido,21559,root/html528/TPieEditor.html,https://root.cern,https://root.cern/root/html528/TPieEditor.html,1,['Guid'],['Guido']
Usability,"xel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TPieEditor(); Destructor of pie editor. void ConnectSignals2Slots(); Connect signals to slots. void ActivateBaseClassEditors(TClass* ); Exclude TAttTextEditor from this interface. void SetModel(TObject* ); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoChange3DAngle(); Slot for setting the 3D angle. void DoGraphLineWidth(); Slot connected to the graph line width. void DoTextChange(); Change text. TGComboBox* BuildFontSizeComboBox(TGFrame* , Int_t ); Create text size combo box. » Author: Guido Volpi 04/10/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TPieEditor.h 31945 2009-12-21 19:03:21Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPieEditor.html:21659,Guid,Guido,21659,root/html530/TPieEditor.html,https://root.cern,https://root.cern/root/html530/TPieEditor.html,1,['Guid'],['Guido']
Usability,"xel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TPieEditor(); Destructor of pie editor. void ConnectSignals2Slots(); Connect signals to slots. void ActivateBaseClassEditors(TClass* ); Exclude TAttTextEditor from this interface. void SetModel(TObject* ); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoChange3DAngle(); Slot for setting the 3D angle. void DoGraphLineWidth(); Slot connected to the graph line width. void DoTextChange(); Change text. TGComboBox* BuildFontSizeComboBox(TGFrame* , Int_t ); Create text size combo box. » Author: Guido Volpi 04/10/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TPieEditor.h 31945 2009-12-21 19:03:21Z rdm $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPieEditor.html:21659,Guid,Guido,21659,root/html532/TPieEditor.html,https://root.cern,https://root.cern/root/html532/TPieEditor.html,1,['Guid'],['Guido']
Usability,"xel_t back = GetDefaultFrameBackground()); virtual~TGContainer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidAdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidClearViewPort(); virtual voidClicked(TGFrame* f, Int_t btn)SIGNAL ; virtual voidClicked(TGFrame* f, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCurrentChanged(TGFrame* f)SIGNAL ; virtual voidCurrentChanged(Int_t x, Int_t y)SIGNAL ; virtual voidTGFrame::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGContainer.html:2756,Clear,Clear,2756,root/html528/TGContainer.html,https://root.cern,https://root.cern/root/html528/TGContainer.html,4,['Clear'],['Clear']
Usability,"xel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*fgDefaultSelectedBackgroundGC; static const TGGC*fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEntry(const TGWindow* p, TGTextBuffer* text, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame|kDoubleBorder, Pixel_t back = GetWhitePixel()); Create a text entry widget. It will adopt the TGTextBuffer object; (i.e. the text buffer will be deleted by the text entry widget). TGTextEntry(const TGWindow* parent = 0, const char* text = 0, Int_t id = -1); Simple text entry constructor. TGTextEntry(const TString& contents, const TGWindow* parent, Int_t id = -1); Simple test entry constructor. Notice TString argument comes before the; parent argument (to make this ctor different from the first one taking a; const char*). ~TGTextEntry(); Delete a text entry widget. void Init(); Do default initialization. TGDimension GetDefaultSize() const; Return the default / minimal size of the widget. void SetDefaultSize(UInt_t w, UInt_t h); Set the default / minimal size of the widget. void ReturnPressed(); This signal is emitted when the return or enter key is pressed. void ShiftTabPressed(); This signal is emitted when <SHIFT> and <TAB> keys are pressed. void TabPressed(); This signal is emitted when the <TAB> key is pressed. void TextChanged(const char* text = 0); This signal is emitted every time the text has changed. void CursorOutLeft(); This signal is emitted when cursor is going out of left side. void CursorOutRight(); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEntry.html:26494,Simpl,Simple,26494,root/html528/TGTextEntry.html,https://root.cern,https://root.cern/root/html528/TGTextEntry.html,4,['Simpl'],['Simple']
Usability,"xes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TProfile2Dstatic; Class_Name()TProfile2Dstatic; Class_Version()TProfile2Dinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTProfile2Dvirtual; TH2D::TAttLine::Copy(TAttLine &attline) constTAttLine; TH2D::TAttFill::Copy(TAttFill &attfill) constTAttFill; TH2D::TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TArrayD::Copy(TArrayD &array) constTArrayDinline; DeclFileName()TProfile2Dinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *h1, Double_t c1=1) overrideTProfile2Dvirtual; Divide(const TH1 *h1) overrideTProfile2Dvirtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""") overrideTProfile2Dvirtual; DoError(int level, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D-members.html:2941,Clear,ClearUnderflowAndOverflow,2941,doc/master/classTProfile2D-members.html,https://root.cern,https://root.cern/doc/master/classTProfile2D-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"xes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TProfile3Dstatic; Class_Name()TProfile3Dstatic; Class_Version()TProfile3Dinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTProfile3Dvirtual; TH3D::TAttLine::Copy(TAttLine &attline) constTAttLine; TH3D::TAttFill::Copy(TAttFill &attfill) constTAttFill; TH3D::TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TArrayD::Copy(TArrayD &array) constTArrayDinline; DeclFileName()TProfile3Dinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *h1, Double_t c1=1) overrideTProfile3Dvirtual; Divide(const TH1 *h1) overrideTProfile3Dvirtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""") overrideTProfile3Dvirtual; DoError(int level, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D-members.html:3070,Clear,ClearUnderflowAndOverflow,3070,doc/master/classTProfile3D-members.html,https://root.cern,https://root.cern/doc/master/classTProfile3D-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"xis * GetYaxis()Definition TH1.h:325; TH1::GetNdivisionsvirtual Int_t GetNdivisions(Option_t *axis=""X"") constReturn the number of divisions for ""axis"".Definition Haxis.cxx:27; TH1::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Definition TH1.h:405; TH1::Paintvoid Paint(Option_t *option="""") overrideControl routine to paint any kind of histograms.Definition TH1.cxx:6206; TH1::GetMaximumStoredvirtual Double_t GetMaximumStored() constDefinition TH1.h:289; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TIterDefinition TCollection.h:235; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::PaintLinevirtual void PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:399; TListIterIterator of linked list.Definition TList.h:193; TListIter::NextTObject * Next() overrideReturn next object in the list. Returns 0 when no more objects in list.Definition TList.cxx:1109; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TList::FirstLinkvirtual TObjLink * FirstLink() constDefinition TList.h:104; TList::AddFirstvoid AddFirst(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:208845,simpl,simple,208845,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"xis fYaxisY axis descriptor.Definition TH1.h:91; TH1::GetSumOfWeightsvirtual Double_t GetSumOfWeights() constReturn the sum of weights excluding under/overflows.Definition TH1.cxx:7917; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TH1::SetEntriesvirtual void SetEntries(Double_t n)Definition TH1.h:391; TH1::fTsumwxDouble_t fTsumwxTotal Sum of weight*X.Definition TH1.h:98; TH2PolyBinHelper class to represent a bin in the TH2Poly histogram.Definition TH2Poly.h:25; TH2PolyBin::GetXMinDouble_t GetXMin()Returns the minimum value for the x coordinates of the bin.Definition TH2Poly.cxx:1565; TH2PolyBin::~TH2PolyBin~TH2PolyBin() overrideDestructor.Definition TH2Poly.cxx:1491; TH2PolyBin::GetYMaxDouble_t GetYMax()Returns the maximum value for the y coordinates of the bin.Definition TH2Poly.cxx:1601; TH2PolyBin::GetAreaDouble_t GetArea()Returns the area of the bin.Definition TH2Poly.cxx:1499; TH2PolyBin::ClearContentvoid ClearContent()Definition TH2Poly.h:32; TH2PolyBin::Fillvoid Fill(Double_t w)Definition TH2Poly.h:33; TH2PolyBin::GetYMinDouble_t GetYMin()Returns the minimum value for the y coordinates of the bin.Definition TH2Poly.cxx:1637; TH2PolyBin::fAreaDouble_t fAreaBin area.Definition TH2Poly.h:51; TH2PolyBin::fContentDouble_t fContentBin content.Definition TH2Poly.h:52; TH2PolyBin::IsInsideBool_t IsInside(Double_t x, Double_t y) constReturn ""true"" if the point (x,y) is inside the bin.Definition TH2Poly.cxx:1673; TH2PolyBin::fXmaxDouble_t fXmaxX maximum value.Definition TH2Poly.h:55; TH2PolyBin::fNumberInt_t fNumberBin number of the bin in TH2Poly.Definition TH2Poly.h:49; TH2PolyBin::TH2PolyBinTH2PolyBin()Default constructor.Definition TH2Poly.cxx:1459; TH2PolyBin::fYmaxDouble_t fYmaxY maximum value.Definition TH2Poly.h:56; TH2PolyBin::GetXMaxDouble_t GetXMax()Returns the maximum value for the x coordinates of the bin.Definition TH2Poly.cxx:1529; TH2PolyBin::GetContentDouble_t GetContent() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:64774,Clear,ClearContentvoid,64774,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,2,['Clear'],"['ClearContent', 'ClearContentvoid']"
Usability,"xis when constructing the interval ; Definition at line 178 of file MCMCCalculator.h. ◆ fNumBurnInSteps. Int_t RooStats::MCMCCalculator::fNumBurnInSteps = 0. protected . number of iterations to discard as burn-in, starting from the first ; Definition at line 177 of file MCMCCalculator.h. ◆ fNumIters. Int_t RooStats::MCMCCalculator::fNumIters = 0. protected . number of iterations to run metropolis algorithm ; Definition at line 176 of file MCMCCalculator.h. ◆ fPdf. RooAbsPdf* RooStats::MCMCCalculator::fPdf. protected . pointer to common PDF (owned by the workspace) ; Definition at line 173 of file MCMCCalculator.h. ◆ fPOI. RooArgSet RooStats::MCMCCalculator::fPOI. protected . parameters of interest for interval ; Definition at line 167 of file MCMCCalculator.h. ◆ fPriorPdf. RooAbsPdf* RooStats::MCMCCalculator::fPriorPdf. protected . pointer to prior PDF (owned by the workspace) ; Definition at line 174 of file MCMCCalculator.h. ◆ fPropFunc. ProposalFunction* RooStats::MCMCCalculator::fPropFunc. mutableprotected . Proposal function for MCMC integration. ; Definition at line 172 of file MCMCCalculator.h. ◆ fSize. double RooStats::MCMCCalculator::fSize = -1. protected . size of the test (eg. specified rate of Type I error) ; Definition at line 166 of file MCMCCalculator.h. ◆ fUseKeys. bool RooStats::MCMCCalculator::fUseKeys = false. protected . whether to use kernel estimation to determine interval ; Definition at line 181 of file MCMCCalculator.h. ◆ fUseSparseHist. bool RooStats::MCMCCalculator::fUseSparseHist = false. protected . whether to use sparse histogram (if using hist at all) ; Definition at line 182 of file MCMCCalculator.h. Libraries for RooStats::MCMCCalculator:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/MCMCCalculator.h; roofit/roostats/src/MCMCCalculator.cxx. RooStatsMCMCCalculator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html:31958,Guid,Guide,31958,doc/master/classRooStats_1_1MCMCCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html,1,['Guid'],['Guide']
Usability,"xis->GetNbins()+1;; 5455 Int_t lastLabelBin = -1;; 5456 for (Int_t i = 0; i < n; ++i) {; 5457 Int_t bin = labels->At(i)->GetUniqueID();; 5458 if (bin < firstLabelBin) firstLabelBin = bin;; 5459 if (bin > lastLabelBin) lastLabelBin = bin;; 5460 }; 5461 if (firstLabelBin != 1 || lastLabelBin-firstLabelBin +1 != n) {; 5462 Error(""LabelsOption"", ""%s of Histogram %s contains bins without labels. Sorting will not work correctly - return"",; 5463 axis->GetName(), GetName());; 5464 return;; 5465 }; 5466 // case where label bins are consecutive starting from first bin will work; 5467 // calling before a TH1::LabelsDeflate() will avoid this error message; 5468 Warning(""LabelsOption"", ""axis %s of Histogram %s has extra following bins without labels. Sorting will work only for first label bins"",; 5469 axis->GetName(), GetName());; 5470 }; 5471 std::vector<Int_t> a(n);; 5472 std::vector<Int_t> b(n);; 5473 ; 5474 ; 5475 Int_t i, j, k;; 5476 std::vector<Double_t> cont;; 5477 std::vector<Double_t> errors2;; 5478 THashList *labold = new THashList(labels->GetSize(), 1);; 5479 TIter nextold(labels);; 5480 TObject *obj = nullptr;; 5481 labold->AddAll(labels);; 5482 labels->Clear();; 5483 ; 5484 // delete buffer if it is there since bins will be reordered.; 5485 if (fBuffer); 5486 BufferEmpty(1);; 5487 ; 5488 if (sort > 0) {; 5489 //---sort by values of bins; 5490 if (GetDimension() == 1) {; 5491 cont.resize(n);; 5492 if (fSumw2.fN); 5493 errors2.resize(n);; 5494 for (i = 0; i < n; i++) {; 5495 cont[i] = RetrieveBinContent(i + 1);; 5496 if (!errors2.empty()); 5497 errors2[i] = GetBinErrorSqUnchecked(i + 1);; 5498 b[i] = labold->At(i)->GetUniqueID(); // this is the bin corresponding to the label; 5499 a[i] = i;; 5500 }; 5501 if (sort == 1); 5502 TMath::Sort(n, cont.data(), a.data(), kTRUE); // sort by decreasing values; 5503 else; 5504 TMath::Sort(n, cont.data(), a.data(), kFALSE); // sort by increasing values; 5505 for (i = 0; i < n; i++) {; 5506 // use UpdateBinCOntent to not screw up hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:219740,Clear,Clear,219740,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Clear'],['Clear']
Usability,"xis; TAxisfCartesianYAxis; TAxisfCartesianZAxis; Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh; static TGLParametricPlot::EMeshSizekHigh; static TGLParametricPlot::EMeshSizekLow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLParametricPlot.html:5823,simpl,simple,5823,root/html604/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html604/TGLParametricPlot.html,1,['simpl'],['simple']
Usability,"xis; TAxisfCartesianYAxis; TAxisfCartesianZAxis; Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh; static TGLParametricPlot::EMeshSizekHigh; static TGLParametricPlot::EMeshSizekLow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLParametricPlot.html:5823,simpl,simple,5823,root/html602/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html602/TGLParametricPlot.html,1,['simpl'],['simple']
Usability,"xlo, . double ; xhi . ); const. overridevirtual . Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ; Reimplemented from RooAbsReal.; Definition at line 130 of file RooParamHistFunc.cxx. ◆ setActual(). void RooParamHistFunc::setActual ; (; Int_t ; ibin, . double ; newVal . ). Definition at line 104 of file RooParamHistFunc.cxx. ◆ Streamer(). void RooParamHistFunc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooParamHistFunc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file RooParamHistFunc.h. ◆ translate(). void RooParamHistFunc::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 80 of file RooParamHistFunc.cxx. Friends And Related Symbol Documentation. ◆ RooHistConstraint. friend class RooHistConstraint. friend . Definition at line 52 of file RooParamHistFunc.h. Member Data Documentation. ◆ _dh. RooDataHist RooParamHistFunc::_dh. protected . Definition at line 56 of file RooParamHistFunc.h. ◆ _p. RooListProxy RooParamHistFunc::_p. protected . Definition at line 55 of file RooParamHistFunc.h. ◆ _relPar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamHistFunc.html:66133,simpl,simple,66133,doc/master/classRooParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooParamHistFunc.html,1,['simpl'],['simple']
Usability,"xpensiveObjectCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooExpensiveObjectCache Class ReferenceRooFit » RooFit Core. ; Singleton class that serves as repository for objects that are expensive to calculate. ; Owners of such objects can registers these here with associated parameter values for which the object is valid, so that other instances can, at a later moment retrieve these precalculated objects. ; Definition at line 24 of file RooExpensiveObjectCache.h. Classes; class  ExpensiveObject;  . Public Member Functions;  RooExpensiveObjectCache ();  ;  RooExpensiveObjectCache (const RooExpensiveObjectCache &other);  ;  ~RooExpensiveObjectCache () override;  Destructor. ;  ; void clearAll ();  Clear all cache elements. ;  ; bool clearObj (Int_t uniqueID);  Clear cache element with given unique ID Retrieve payload object of cache element with given unique ID. ;  ; bool empty () const;  ; const TObject * getObj (Int_t uniqueID);  Retrieve payload object of cache element with given unique ID. ;  ; void importCacheObjects (RooExpensiveObjectCache &other, const char *ownerName, bool verbose=false);  ; TClass * IsA () const override;  ; void print () const;  ; bool registerObject (const char *ownerName, const char *objectName, TObject &cacheObject, const RooArgSet &params);  Register object associated with given name and given associated parameters with given values in cache. ;  ; const TObject * retrieveObject (const char *name, TClass *tclass, const RooArgSet &params);  Retrieve object from cache that was registered under given name with given parameters, if current parameter values match those that were stored in the registry for this object. ;  ; bool setObj (Int_t uniqueID, TObject *obj);  Place new payload object in cache element with given unique ID. ;  ; Int_t size (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:952,clear,clearObj,952,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,2,"['Clear', 'clear']","['Clear', 'clearObj']"
Usability,"xplained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1176 of file TUnfoldSys.cxx. ◆ GetEmatrixSysUncorr(). void TUnfoldSys::GetEmatrixSysUncorr ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). Covariance contribution from uncorrelated uncertainties of the response matrix. ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]binMapmapping of histogram bins ; [in]clearEmatif true, ematrix is cleared prior to adding this covariance matrix contribution. This method propagates the uncertainties of the response matrix histogram, specified with the constructor, to the unfolding result. It is assumed that the entries of that histogram are bin-to-bin uncorrelated. In many cases this corresponds to the ""Monte Carlo statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 760 of file TUnfoldSys.cxx. ◆ GetEmatrixTotal(). void TUnfoldSys::GetEmatrixTotal ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr . ). Get total error matrix, summing up all contributions. ; Parameters. [out]ematrixhistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins. the array binMap is explained with the method GetOutput(). ; Definition at line 1276 of file TUnfoldSys.cxx. ◆ GetRhoItotal(). void TUnfoldSys::GetRhoItotal ; (; TH1 * ; rhoi, . const Int_t * ; binMap = nullptr, . TH2 * ; invEmat = nullptr . ). Get global correlatiocn coefficients, summing up all contributions. ; Parameters. [out]rhoihistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins ; [out]invEmat(default=nullptr) inverse of error matrix. return the global correlation coefficients, including all error sources. If invEmat is nonzero, the inverse of the error matrix is retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:42453,clear,clearEmat,42453,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,xt {-1}. protected . ! next entry number where cache must be filled ; Definition at line 41 of file TTreeCache.h. ◆ fFillTimes. Int_t TTreeCache::fFillTimes {0}. protected . ! how many times we can fill the current buffer ; Definition at line 59 of file TTreeCache.h. ◆ fFirstBuffer. bool TTreeCache::fFirstBuffer {true}. protected . ! true if first buffer is used for prefetching ; Definition at line 56 of file TTreeCache.h. ◆ fFirstEntry. Long64_t TTreeCache::fFirstEntry {-1}. protected . ! save the value of the first entry ; Definition at line 61 of file TTreeCache.h. ◆ fFirstMiss. Long64_t TTreeCache::fFirstMiss {-1}. protected . ! set to the event # of the first miss. ; Definition at line 73 of file TTreeCache.h. ◆ fFirstTime. bool TTreeCache::fFirstTime {true}. protected . ! save the fact that we processes the first entry ; Definition at line 60 of file TTreeCache.h. ◆ fgLearnEntries. Int_t TTreeCache::fgLearnEntries = 100. staticprotected . number of entries used for learning mode ; Definition at line 65 of file TTreeCache.h. ◆ fIsLearning. bool TTreeCache::fIsLearning {true}. protected . ! true if cache is in learning mode ; Definition at line 54 of file TTreeCache.h. ◆ fIsManual. bool TTreeCache::fIsManual {false}. protected . ! true if cache is StopLearningPhase was used ; Definition at line 55 of file TTreeCache.h. ◆ fLastMiss. Long64_t TTreeCache::fLastMiss {-1}. protected . ! set to the event # of the last miss. ; Definition at line 74 of file TTreeCache.h. ◆ fLearnPrefilling. bool TTreeCache::fLearnPrefilling {false}. protected . ! true if we are in the process of executing LearnPrefill ; Definition at line 68 of file TTreeCache.h. ◆ fMissCache. std::unique_ptr<MissCache> TTreeCache::fMissCache. protected . ! Cache contents for misses ; Definition at line 105 of file TTreeCache.h. ◆ fNbranches. Int_t TTreeCache::fNbranches {0}. protected . ! Number of branches in the cache ; Definition at line 44 of file TTreeCache.h. ◆ fNextClusterStart. Long64_t TTreeCac,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:54151,learn,learning,54151,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"xt, including all inherited members. AbstractMethod(const char *method) constTObject; AddBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TPaveTextvirtual; AddLine(Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0)TPaveTextvirtual; AddText(Double_t x1, Double_t y1, const char *label)TPaveTextvirtual; AddText(const char *label)TPaveTextvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TPavesTextstatic; Class_Name()TPavesTextstatic; Class_Version()TPavesTextinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTPaveTextvirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; ConvertNDCtoPad()TPavevirtual; TPave::Copy(TObject &pave) const overrideTPavevirtual; TPave::TBox::TAttLine::Copy(TAttLine &attline) constTAttLine; TPave::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TPavesTextinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteText()TPaveTextvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPavevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTPavesTextvirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawFile(const char *filename, Option_t *option="""")TPaveTextvirtual; DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPavevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditText()TPaveTextvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPavesText-members.html:822,Clear,Clear,822,doc/master/classTPavesText-members.html,https://root.cern,https://root.cern/doc/master/classTPavesText-members.html,1,['Clear'],['Clear']
Usability,"xt.Definition TGX11.cxx:3125; TGX11::UpdateWindowvoid UpdateWindow(Int_t mode) overrideUpdate display.Definition TGX11.cxx:3238; TGX11::fHasXftBool_t fHasXftTrue when XftFonts are used.Definition TGX11.h:147; TGX11::SupportsExtensionInt_t SupportsExtension(const char *ext) const overrideReturns 1 if window system server supports extension given by the argument, returns 0 in case extensi...Definition TGX11.cxx:3692; TGX11::InitWindowInt_t InitWindow(ULong_t window) overrideOpen window and return window number.Definition TGX11.cxx:1301; TGX11::~TGX11~TGX11() overrideDestructor.Definition TGX11.cxx:324; TGX11::MoveWindowvoid MoveWindow(Int_t wid, Int_t x, Int_t y) overrideMove the window wid.Definition TGX11.cxx:1080; TGX11::SetTextFontInt_t SetTextFont(char *fontname, ETextSetMode mode) overrideSet text font to specified name.Definition TGX11.cxx:3154; TGX11::SetFillStylevoid SetFillStyle(Style_t style) overrideSet fill area style.Definition TGX11.cxx:2202; TGX11::ClearPixmapvoid ClearPixmap(Drawable *pix)Clear the pixmap pix.Definition TGX11.cxx:407; TGX11::fTextMagnitudeFloat_t fTextMagnitudeText Magnitude.Definition TGX11.h:138; TGX11::SetCharacterUpvoid SetCharacterUp(Float_t chupx, Float_t chupy) overrideSet character up vector.Definition TGX11.cxx:1983; TGX11::fRootWinDrawable fRootWinRoot window used as parent of all windows.Definition TGX11.h:127; TGX11::WritePixmapvoid WritePixmap(Int_t wid, UInt_t w, UInt_t h, char *pxname) overrideWrite the pixmap wid in the bitmap file pxname.Definition TGX11.cxx:3278; TGX11::SetInputvoid SetInput(Int_t inp)Set input on or off.Definition TGX11.cxx:2257; TGX11::GetPlanesvoid GetPlanes(Int_t &nplanes) overrideGet maximum number of planes.Definition TGX11.cxx:1019; TGX11::fTextAlignHInt_t fTextAlignHText Alignment Horizontal.Definition TGX11.h:133; TGX11::ClearWindowvoid ClearWindow() overrideClear current window.Definition TGX11.cxx:422; TGX11::fXEventvoid * fXEventCurrent native (X11) event.Definition TGX11.h:87; TGX11::fGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:148994,Clear,ClearPixmapvoid,148994,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,3,['Clear'],"['Clear', 'ClearPixmap', 'ClearPixmapvoid']"
Usability,"xt2int (double value, double lower, double upper) const override;  ; double Int2ext (double value, double lower, double upper) const override;  ;  Public Member Functions inherited from ROOT::Math::MinimizerVariableTransformation; virtual ~MinimizerVariableTransformation ();  . #include <Math/MinimizerVariableTransformation.h>. Inheritance diagram for ROOT::Math::SqrtUpVariableTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~SqrtUpVariableTransformation(). ROOT::Math::SqrtUpVariableTransformation::~SqrtUpVariableTransformation ; (; ). inlineoverride . Definition at line 77 of file MinimizerVariableTransformation.h. Member Function Documentation. ◆ DInt2Ext(). double ROOT::Math::SqrtUpVariableTransformation::DInt2Ext ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 100 of file MinimizerVariableTransformation.cxx. ◆ Ext2int(). double ROOT::Math::SqrtUpVariableTransformation::Ext2int ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 92 of file MinimizerVariableTransformation.cxx. ◆ Int2ext(). double ROOT::Math::SqrtUpVariableTransformation::Int2ext ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 85 of file MinimizerVariableTransformation.cxx. Libraries for ROOT::Math::SqrtUpVariableTransformation:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/MinimizerVariableTransformation.h; math/mathcore/src/MinimizerVariableTransformation.cxx. ROOTMathSqrtUpVariableTransformation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtUpVariableTransformation.html:2581,Guid,Guide,2581,doc/master/classROOT_1_1Math_1_1SqrtUpVariableTransformation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtUpVariableTransformation.html,1,['Guid'],['Guide']
Usability,"xtEntry.h. Constructor & Destructor Documentation. ◆ TGTextEntry() [1/4]. TGTextEntry::TGTextEntry ; (; const TGTextEntry & ; ). privatedelete . ◆ TGTextEntry() [2/4]. TGTextEntry::TGTextEntry ; (; const TGWindow * ; p, . TGTextBuffer * ; text, . Int_t ; id = -1, . GContext_t ; norm = GetDefaultGC()(), . FontStruct_t ; font = GetDefaultFontStruct(), . UInt_t ; options = kSunkenFrame | kDoubleBorder, . Pixel_t ; back = GetWhitePixel() . ). Create a text entry widget. ; It will adopt the TGTextBuffer object (i.e. the text buffer will be deleted by the text entry widget). ; Definition at line 247 of file TGTextEntry.cxx. ◆ TGTextEntry() [3/4]. TGTextEntry::TGTextEntry ; (; const TGWindow * ; parent = nullptr, . const char * ; text = nullptr, . Int_t ; id = -1 . ). Simple text entry constructor. ; Definition at line 269 of file TGTextEntry.cxx. ◆ TGTextEntry() [4/4]. TGTextEntry::TGTextEntry ; (; const TString & ; contents, . const TGWindow * ; parent, . Int_t ; id = -1 . ). Simple test entry constructor. ; Notice TString argument comes before the parent argument (to make this ctor different from the first one taking a const char*). ; Definition at line 287 of file TGTextEntry.cxx. ◆ ~TGTextEntry(). TGTextEntry::~TGTextEntry ; (; ). override . Delete a text entry widget. ; Definition at line 303 of file TGTextEntry.cxx. Member Function Documentation. ◆ AppendText(). void TGTextEntry::AppendText ; (; const char * ; text). virtual . Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ; If necessary the text is truncated to fit MaxLength(). See also GetText(), InsertText(), SetText(), RemoveText(). ; Definition at line 1689 of file TGTextEntry.cxx. ◆ Backspace(). void TGTextEntry::Backspace ; (; ). Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ; If a text has been marked by the user (e.g. by clicking and dragging) the cursor will be put at the beginning of the mar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:43170,Simpl,Simple,43170,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['Simpl'],['Simple']
Usability,"xtEvent. Reads both from CmdTree and GuiTree and chooses that event that becomes; earlier; - fCmdTreeCounter determines actual position in fCmdTree; - fGuiTreeCounter determines actual position in fCmdTree. If GUI event should be replayed, we must first make sure that there is; appropriate mapping for this event. RETURN VALUE:; kFALSE = there is no event to be replayed; kTRUE = there is still at least one event to be replayed. Cases:; - fNextEvent = 0 => We are waiting for the appropriate; window to be registered; - fNextEvent != 0 => fNextEvent can be replayed (windows are; ready). Bool_t CanOverlap(); ButtonPress and ButtonRelease must be sometimes replayed more times; Example: pressing of a button opens small window and user chooses; something from that window (color); Window must be opened while user is choosing. void ReplayRealtime(); Replays the next event. It is called when fTimer times out.; Every time fTimer is set again to time equal to time difference between; current two events being replayed. It can happen that execution of an event lasts different time during the; recording and during the replaying.; If fTimer times out too early and the previous event has not been yet; replayed, it is usually postponed in order; to keep events execution in the right order.; The excpetions are determined by TRecorderReplaying::CanOverlap(). void Pause(TRecorder* r); Pauses replaying. void ReplayStop(TRecorder* r); Cancels replaying. void Continue(); Continues previously paused replaying. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderReplaying(const char* filename). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderReplaying.html:5976,Pause,Pause,5976,root/html528/TRecorderReplaying.html,https://root.cern,https://root.cern/root/html528/TRecorderReplaying.html,3,"['Pause', 'pause']","['Pause', 'Pauses', 'paused']"
Usability,"xtEvent. Reads both from CmdTree and GuiTree and chooses that event that becomes; earlier; - fCmdTreeCounter determines actual position in fCmdTree; - fGuiTreeCounter determines actual position in fCmdTree. If GUI event should be replayed, we must first make sure that there is; appropriate mapping for this event. RETURN VALUE:; kFALSE = there is no event to be replayed; kTRUE = there is still at least one event to be replayed. Cases:; - fNextEvent = 0 => We are waiting for the appropriate; window to be registered; - fNextEvent != 0 => fNextEvent can be replayed (windows are; ready). Bool_t CanOverlap(); ButtonPress and ButtonRelease must be sometimes replayed more times; Example: pressing of a button opens small window and user chooses; something from that window (color); Window must be opened while user is choosing. void ReplayRealtime(); Replays the next event. It is called when fTimer times out.; Every time fTimer is set again to time equal to time difference between; current two events being replayed. It can happen that execution of an event lasts different time during the; recording and during the replaying.; If fTimer times out too early and the previous event has not been yet; replayed, it is usually postponed in order; to keep events execution in the right order.; The excpetions are determined by TRecorderReplaying::CanOverlap(). void Pause(TRecorder* r); Pauses replaying. void ReplayStop(TRecorder* r); Cancels replaying. void Continue(); Continues previously paused replaying. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderReplaying(const char* filename). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRecorderReplaying.html:5976,Pause,Pause,5976,root/html530/TRecorderReplaying.html,https://root.cern,https://root.cern/root/html530/TRecorderReplaying.html,3,"['Pause', 'pause']","['Pause', 'Pauses', 'paused']"
Usability,"xtEvent. Reads both from CmdTree and GuiTree and chooses that event that becomes; earlier; - fCmdTreeCounter determines actual position in fCmdTree; - fGuiTreeCounter determines actual position in fCmdTree. If GUI event should be replayed, we must first make sure that there is; appropriate mapping for this event. RETURN VALUE:; kFALSE = there is no event to be replayed; kTRUE = there is still at least one event to be replayed. Cases:; - fNextEvent = 0 => We are waiting for the appropriate; window to be registered; - fNextEvent != 0 => fNextEvent can be replayed (windows are; ready). Bool_t CanOverlap(); ButtonPress and ButtonRelease must be sometimes replayed more times; Example: pressing of a button opens small window and user chooses; something from that window (color); Window must be opened while user is choosing. void ReplayRealtime(); Replays the next event. It is called when fTimer times out.; Every time fTimer is set again to time equal to time difference between; current two events being replayed. It can happen that execution of an event lasts different time during the; recording and during the replaying.; If fTimer times out too early and the previous event has not been yet; replayed, it is usually postponed in order; to keep events execution in the right order.; The excpetions are determined by TRecorderReplaying::CanOverlap(). void Pause(TRecorder* r); Pauses replaying. void ReplayStop(TRecorder* r); Cancels replaying. void Continue(); Continues previously paused replaying. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderReplaying(const char* filename). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRecorderReplaying.html:5976,Pause,Pause,5976,root/html532/TRecorderReplaying.html,https://root.cern,https://root.cern/root/html532/TRecorderReplaying.html,3,"['Pause', 'pause']","['Pause', 'Pauses', 'paused']"
Usability,"xtMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG0 (VirtualX, CloseWindow, 1) VOID_METHOD_ARG0(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG0 (VirtualX, SetDoubleBufferON, 1) VOID_METHOD_ARG1(VirtualX;  ;  VOID_METHOD_ARG0 (VirtualX, SetMarkerAttributes, 1) VOID_METHOD_ARG0(VirtualX;  ;  VOID_METHOD_ARG0 (VirtualX, SetTextAttributes, 1) VOID_METHOD_ARG1(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG1 (VirtualX, Bell, Int_t, percent, 1) VOID_METHOD_ARG0(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void VOID_METHOD_ARG1 (VirtualX, ClearWindow, Window_t, id, 1) VOID_METHOD_ARG1(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG1 (VirtualX, DeleteGC, GContext_t, gc, 1) VOID_METHOD_ARG1(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void VOID_METHOD_ARG1 (VirtualX, DeleteImage, Drawable_t, img, 1) VOID_METHOD_ARG1(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG1 (VirtualX, DeletePixmap, Pixmap_t, pmap, 1) VOID_METHOD_ARG1(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG1 (VirtualX, DestroyWindow, Window_t, id, 1) VOID",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:19920,Clear,ClearWindow,19920,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['Clear'],['ClearWindow']
Usability,"xt_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; TClass * IsA () const override;  ; virtual void Percent (Bool_t on);  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save progress bar parameters as a C++ statement(s) on output stream out. ;  ; void SetBarColor (const char *color=""blue"");  Set progress bar color. ;  ; virtual void SetBarColor (Pixel_t color);  Set progress bar color. ;  ; void SetBarType (EBarType type);  Set bar type. ;  ; void SetFillType (EFillType type);  Set fill type. ;  ; void SetForegroundColor (Pixel_t pixel) override;  Change text color drawing. ;  ; void SetMax (Float_t max);  ; void SetMin (Float_t min);  ; void SetPosition (Float_t pos);  Set progress position between [min,max]. ;  ; void SetRange (Float_t min, Float_t max);  Set min and max of progress bar. ;  ; virtual void ShowPos (Bool_t on);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsePercent () const;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:3319,progress bar,progress bar,3319,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,2,['progress bar'],['progress bar']
Usability,"xtra day is added to February to make the year; 366 days long. If the year is the last year of a century, eg. 1700, 1800,; 1900, 2000, then it is only a leap year if it is exactly divisible by; 400. Therefore, 1900 wasn't a leap year but 2000 was. The reason for; these rules is to bring the average length of the calendar year into; line with the length of the Earth's orbit around the Sun, so that the; seasons always occur during the same months each year. Int_t GetZoneOffset(); Static method returning local (current) time zone offset from UTC.; This is the value in seconds one must add to the local time to arrive at; Coordinated Universal Time, so it is negative east of the Prime Meridian. void Add(const TTimeStamp& offset); Add ""offset"" as a delta time. void Print(const Option_t* option = """") const; Print date and time. void Set(); Set Date/Time to current time as reported by the system.; No accounting for nanoseconds with std ANSI functions,; ns part faked so that subsequent calls simply add 1 to it; this ensures that calls within the same second come back; distinct (and sortable). Time is since Jan 1, 1970. void Set(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t nsec, Bool_t isUTC, Int_t secOffset); Set Date/Time from components. Month & day both use normal 1..12 and 1..31 counting,; hours, min, sec run from 0 to 23, 59, 59 respectively,; secOffset provides method for adjusting for alternative timezones. ""year"" | 0 1 ... 37 | 38...69 | 70 .. 100 101 .. 137; true | 2000 2001 2037 | undefined | 1970 2000 2001 .. 2037. ""year"" | 138...1969 | 1970 .. 2037 | ...; true | undefined | 1970 .. 2037 | undefined. void Set(Int_t date, Int_t time, Int_t nsec, Bool_t isUTC, Int_t secOffset); Set date/time from integers of the form [yy]YYMMDD and HHMMSS,; assume UTC (UTC) components:. MM: 01=January .. 12=December; DD: 01 .. 31. HH: 00=midnight .. 23; MM: 00 .. 59; SS: 00 .. 69. Date must be in format 980418 or 19980418; 1001127 or 20001127 (i.e. year",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTimeStamp.html:8525,simpl,simply,8525,root/html602/TTimeStamp.html,https://root.cern,https://root.cern/root/html602/TTimeStamp.html,2,['simpl'],['simply']
Usability,xtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative tolerance ; Definition at line 80 of file IntegratorOptions.h. ◆ SetWKSize(). void ROOT::Math::BaseIntegratorOptions::SetWKSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 83 of file IntegratorOptions.h. ◆ WKSize(). unsigned int ROOT::Math::BaseIntegratorOptions::WKSize ; (; ); const. inline . size of the workspace ; Definition at line 67 of file IntegratorOptions.h. Member Data Documentation. ◆ fAbsTolerance. double ROOT::Math::BaseIntegratorOptions::fAbsTolerance. protected . absolute tolerance ; Definition at line 97 of file IntegratorOptions.h. ◆ fExtraOptions. ROOT::Math::IOptions* ROOT::Math::BaseIntegratorOptions::fExtraOptions. protected . Definition at line 102 of file IntegratorOptions.h. ◆ fIntegType. int ROOT::Math::BaseIntegratorOptions::fIntegType. protected . Integrator type (value converted from enum) ; Definition at line 93 of file IntegratorOptions.h. ◆ fNCalls. unsigned int ROOT::Math::BaseIntegratorOptions::fNCalls. protected . (max) function calls ; Definition at line 96 of file IntegratorOptions.h. ◆ fRelTolerance. double ROOT::Math::BaseIntegratorOptions::fRelTolerance. protected . relative tolerance ; Definition at line 98 of file IntegratorOptions.h. ◆ fWKSize. unsigned int ROOT::Math::BaseIntegratorOptions::fWKSize. protected . workspace size ; Definition at line 95 of file IntegratorOptions.h. Libraries for ROOT::Math::BaseIntegratorOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathBaseIntegratorOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:6286,Guid,Guide,6286,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,1,['Guid'],['Guide']
Usability,"xtract the correlation matrix and the; global correlation coefficients from the MINUIT memory buffer and; fill the internal arrays. Bool_t isIdentical(const RooFitResult& other, Double_t tol = 5e-5, Double_t tolCorr = 1e-4, Bool_t verbose = kTRUE) const; Return true if this fit result is identical to other within tolerance 'tol' on fitted values; and tolerance 'tolCor' on correlation coefficients. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed by gMinuit, interpreting; the fit parameters as the given varList of parameters. void setCovarianceMatrix(TMatrixDSym& V); Store externally provided correlation matrix in his RooFitResult ;. TH2* correlationHist(const char* name = ""correlation_matrix"") const; Return TH2D of correlation matrix. const TMatrixDSym& covarianceMatrix() const; Return covariance matrix. TMatrixDSym reducedCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix (Note that Vred _is_ a simple sub-matrix of V,; row/columns are ordered to matched the convention given in input argument 'params'. TMatrixDSym conditionalCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix, which is calculated as; ___ -1; Vred = V22 = V11 - V12 * V22 * V21. Where V11,V12,V21,V22 represent a block decomposition of the covariance matrix into observables that; are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and V22bar; is the Shur complement of V22, calculated as shown above. (Note that Vred is _not_ a simple sub-matrix of V). const TMatrixDSym& correlationMatrix() const; Return correlation matrix ;. RooAbsPdf* createHessePdf(const RooArgSet& params) const; Return a p.d.f that represents the fit result as a multi-variate probability densisty; function on the floating fit parameters, including correlations. void SetName(const char* name); Change name of RooFitResult object. void SetNameTitle(const char* name, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFitResult.html:14901,simpl,simple,14901,root/html532/RooFitResult.html,https://root.cern,https://root.cern/root/html532/RooFitResult.html,2,['simpl'],['simple']
Usability,"xx. ◆ GetEtaLimits(). void TEveCaloDataHist::GetEtaLimits ; (; Double_t & ; min, . Double_t & ; max . ); const. overridevirtual . Get eta limits. ; Implements TEveCaloData.; Definition at line 924 of file TEveCaloData.cxx. ◆ GetHist(). TH2F * TEveCaloDataHist::GetHist ; (; Int_t ; slice); const. Get histogram in given slice. ; Definition at line 915 of file TEveCaloData.cxx. ◆ GetPhiLimits(). void TEveCaloDataHist::GetPhiLimits ; (; Double_t & ; min, . Double_t & ; max . ); const. overridevirtual . Get phi limits. ; Implements TEveCaloData.; Definition at line 933 of file TEveCaloData.cxx. ◆ GetStack(). THStack * TEveCaloDataHist::GetStack ; (; ). inline . Definition at line 323 of file TEveCaloData.h. ◆ IsA(). TClass * TEveCaloDataHist::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveCaloData.; Definition at line 329 of file TEveCaloData.h. ◆ operator=(). TEveCaloDataHist & TEveCaloDataHist::operator= ; (; const TEveCaloDataHist & ; ). private . ◆ Rebin(). void TEveCaloDataHist::Rebin ; (; TAxis * ; ax, . TAxis * ; ay, . TEveCaloData::vCellId_t & ; ids, . Bool_t ; et, . RebinData_t & ; out . ); const. overridevirtual . Rebin. ; Implements TEveCaloData.; Definition at line 852 of file TEveCaloData.cxx. ◆ Streamer(). void TEveCaloDataHist::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveCaloData. ◆ StreamerNVirtual(). void TEveCaloDataHist::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 329 of file TEveCaloData.h. Member Data Documentation. ◆ fHStack. THStack* TEveCaloDataHist::fHStack. protected . Definition at line 304 of file TEveCaloData.h. Libraries for TEveCaloDataHist:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveCaloData.h; graf3d/eve/src/TEveCaloData.cxx. TEveCaloDataHist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloDataHist.html:37973,Guid,Guide,37973,doc/master/classTEveCaloDataHist.html,https://root.cern,https://root.cern/doc/master/classTEveCaloDataHist.html,1,['Guid'],['Guide']
Usability,"xx. ◆ GetMap(). TCollection * TOutputListSelectorDataMap::GetMap ; (; ); const. inline . Definition at line 44 of file TOutputListSelectorDataMap.h. ◆ GetName(). const char * TOutputListSelectorDataMap::GetName ; (; ); const. overridevirtual . Return static name for TOutputListSelectorDataMap objects. ; Reimplemented from TObject.; Definition at line 199 of file TOutputListSelectorDataMap.cxx. ◆ Init(). Bool_t TOutputListSelectorDataMap::Init ; (; TSelector * ; sel). Initialize the data member <-> output list mapping from a selector. ; Definition at line 207 of file TOutputListSelectorDataMap.cxx. ◆ IsA(). TClass * TOutputListSelectorDataMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 48 of file TOutputListSelectorDataMap.h. ◆ Merge(). Bool_t TOutputListSelectorDataMap::Merge ; (; TObject * ; obj). Merge another TOutputListSelectorDataMap object, check consistency. ; Definition at line 287 of file TOutputListSelectorDataMap.cxx. ◆ SetDataMembers(). Bool_t TOutputListSelectorDataMap::SetDataMembers ; (; TSelector * ; sel); const. Given an output list, set the data members of a TSelector. ; Definition at line 270 of file TOutputListSelectorDataMap.cxx. ◆ Streamer(). void TOutputListSelectorDataMap::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TOutputListSelectorDataMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TOutputListSelectorDataMap.h. Member Data Documentation. ◆ fMap. TCollection* TOutputListSelectorDataMap::fMap. private . Definition at line 47 of file TOutputListSelectorDataMap.h. proof/proofplayer/inc/TOutputListSelectorDataMap.h; proof/proofplayer/src/TOutputListSelectorDataMap.cxx. TOutputListSelectorDataMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOutputListSelectorDataMap.html:14139,Guid,Guide,14139,doc/master/classTOutputListSelectorDataMap.html,https://root.cern,https://root.cern/doc/master/classTOutputListSelectorDataMap.html,1,['Guid'],['Guide']
Usability,"xx. ◆ GetXYZ() [2/2]. virtual const Float_t * TPoints3DABC::GetXYZ ; (; Int_t ; idx). pure virtual . ◆ GetY(). virtual Float_t TPoints3DABC::GetY ; (; Int_t ; idx); const. pure virtual . ◆ GetZ(). virtual Float_t TPoints3DABC::GetZ ; (; Int_t ; idx); const. pure virtual . ◆ IsA(). TClass * TPoints3DABC::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 57 of file TPoints3DABC.h. ◆ PaintPoints(). virtual void TPoints3DABC::PaintPoints ; (; Int_t ; n, . Float_t * ; p, . Option_t * ; option = """" . ). pure virtual . ◆ SetLastPosition(). virtual Int_t TPoints3DABC::SetLastPosition ; (; Int_t ; idx). pure virtual . ◆ SetNextPoint(). Int_t TPoints3DABC::SetNextPoint ; (; Float_t ; x, . Float_t ; y, . Float_t ; z . ). virtual . Add one 3D point defined by x,y,z to the array of the points as its last element. ; Definition at line 108 of file TPoints3DABC.cxx. ◆ SetOption(). virtual void TPoints3DABC::SetOption ; (; Option_t * ; option = """"). pure virtual . ◆ SetPoint(). virtual Int_t TPoints3DABC::SetPoint ; (; Int_t ; point, . Float_t ; x, . Float_t ; y, . Float_t ; z . ). pure virtual . ◆ SetPoints(). virtual Int_t TPoints3DABC::SetPoints ; (; Int_t ; n, . Float_t * ; p = nullptr, . Option_t * ; option = """" . ). pure virtual . ◆ Size(). virtual Int_t TPoints3DABC::Size ; (; ); const. pure virtual . ◆ Streamer(). void TPoints3DABC::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPoints3DABC::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TPoints3DABC.h. Libraries for TPoints3DABC:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TPoints3DABC.h; graf3d/g3d/src/TPoints3DABC.cxx. TPoints3DABC. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoints3DABC.html:18624,Guid,Guide,18624,doc/master/classTPoints3DABC.html,https://root.cern,https://root.cern/doc/master/classTPoints3DABC.html,1,['Guid'],['Guide']
Usability,xx. ◆ HasNextNode(). Bool_t TXMLNode::HasNextNode ; (; ); const. Returns true if has next node. ; Definition at line 174 of file TXMLNode.cxx. ◆ HasParent(). Bool_t TXMLNode::HasParent ; (; ); const. Returns true if node has parent. ; Definition at line 182 of file TXMLNode.cxx. ◆ HasPreviousNode(). Bool_t TXMLNode::HasPreviousNode ; (; ); const. Returns true if has previous node. ; Definition at line 190 of file TXMLNode.cxx. ◆ IsA(). TClass * TXMLNode::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 66 of file TXMLNode.h. ◆ operator=(). TXMLNode & TXMLNode::operator= ; (; const TXMLNode & ; ). privatedelete . ◆ Streamer(). void TXMLNode::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TXMLNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file TXMLNode.h. Member Data Documentation. ◆ fAttrList. TList* TXMLNode::fAttrList. private . List of Attributes. ; Definition at line 32 of file TXMLNode.h. ◆ fChildren. TXMLNode* TXMLNode::fChildren. private . Children node. ; Definition at line 29 of file TXMLNode.h. ◆ fNextNode. TXMLNode* TXMLNode::fNextNode. private . Next sibling node. ; Definition at line 30 of file TXMLNode.h. ◆ fParent. TXMLNode* TXMLNode::fParent. private . Parent node. ; Definition at line 28 of file TXMLNode.h. ◆ fPreviousNode. TXMLNode* TXMLNode::fPreviousNode. private . Previous sibling node. ; Definition at line 31 of file TXMLNode.h. ◆ fXMLNode. _xmlNode* TXMLNode::fXMLNode. private . libxml node ; Definition at line 26 of file TXMLNode.h. Libraries for TXMLNode:. [legend]; The documentation for this class was generated from the following files:; io/xmlparser/inc/TXMLNode.h; io/xmlparser/src/TXMLNode.cxx. TXMLNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLNode.html:17876,Guid,Guide,17876,doc/master/classTXMLNode.html,https://root.cern,https://root.cern/doc/master/classTXMLNode.html,1,['Guid'],['Guide']
Usability,"xx. ◆ RemoveAt(). TObject * TRefArray::RemoveAt ; (; Int_t ; idx). overridevirtual . Remove object at index idx. ; Reimplemented from TSeqCollection.; Definition at line 726 of file TRefArray.cxx. ◆ SetLast(). void TRefArray::SetLast ; (; Int_t ; last). Set index of last object in array, effectively truncating the array. ; Use carefully since whenever last position has to be recalculated, e.g. after a Remove() or Sort() it will be reset to the last non-empty slot. If last is -2 this will force the recalculation of the last used slot. ; Definition at line 777 of file TRefArray.cxx. ◆ Sort(). void TRefArray::Sort ; (; Int_t ; upto = kMaxInt). virtual . If objects in array are sortable (i.e. ; IsSortable() returns true for all objects) then sort array. ; Definition at line 789 of file TRefArray.cxx. ◆ Streamer(). void TRefArray::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream all objects in the array to or from the I/O buffer. ; Reimplemented from TCollection.; Definition at line 517 of file TRefArray.cxx. ◆ StreamerNVirtual(). void TRefArray::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TRefArray.h. Friends And Related Symbol Documentation. ◆ TRefArrayIter. friend class TRefArrayIter. friend . Definition at line 35 of file TRefArray.h. Member Data Documentation. ◆ fLast. Int_t TRefArray::fLast. protected . Definition at line 41 of file TRefArray.h. ◆ fLowerBound. Int_t TRefArray::fLowerBound. protected . Definition at line 40 of file TRefArray.h. ◆ fPID. TProcessID* TRefArray::fPID. protected . Definition at line 38 of file TRefArray.h. ◆ fUIDs. UInt_t* TRefArray::fUIDs. protected . Definition at line 39 of file TRefArray.h. Libraries for TRefArray:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TRefArray.h; core/cont/src/TRefArray.cxx. TRefArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefArray.html:35444,Guid,Guide,35444,doc/master/classTRefArray.html,https://root.cern,https://root.cern/doc/master/classTRefArray.html,1,['Guid'],['Guide']
Usability,"xx:142. Clock Sequence; The clock sequence value must be changed whenever:; The UUID generator detects that the local value of UTC has gone backward; this may be due to re-syncing of the system clock.; While a node is operational, the UUID service always saves the last UTC used to create a UUID. Each time a new UUID is created, the current UTC is compared to the saved value and if either the current value is less or the saved value was lost, then the clock sequence is incremented modulo 16,384, thus avoiding production of duplicated UUIDs.; The clock sequence must be initialized to a random number to minimize the correlation across system. This provides maximum protection against node identifiers that may move or switch from system to system rapidly. Clock Adjustment; UUIDs may be created at a rate greater than the system clock resolution. Therefore, the system must also maintain an adjustment value to be added to the lower-order bits of the time. Logically, each time the system clock ticks, the adjustment value is cleared. Every time a UUID is generated, the current adjustment value is read and incremented, and then added to the UTC time field of the UUID. Clock Overrun; The 100-nanosecond granularity of time should prove sufficient even for bursts of UUID production in the next generation of high-performance multiprocessors. If a system overruns the clock adjustment by requesting too many UUIDs within a single system clock tick, the UUID generator will stall until the system clock catches up. ; Definition at line 42 of file TUUID.h. Classes; struct  uuid_time_t;  . Public Member Functions;  TUUID ();  Create a UUID. ;  ;  TUUID (const char *uuid_str);  Initialize a TUUID with uuid (which must be in TUUID::AsString() format). ;  ; virtual ~TUUID ();  delete this TUUID ;  ; const char * AsString () const;  Return UUID as string. Copy string immediately since it will be reused. ;  ; Int_t Compare (const TUUID &u) const;  Compare two UUIDs ""lexically"" and return. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUUID.html:4018,clear,cleared,4018,doc/master/classTUUID.html,https://root.cern,https://root.cern/doc/master/classTUUID.html,1,['clear'],['cleared']
Usability,"xx:1543; TCanvas::kResizeOpaque@ kResizeOpaqueDefinition TCanvas.h:95; TCanvas::kShowToolTips@ kShowToolTipsDefinition TCanvas.h:97; TCanvas::kShowToolBar@ kShowToolBarDefinition TCanvas.h:92; TCanvas::kMoveOpaque@ kMoveOpaqueDefinition TCanvas.h:94; TCanvas::kIsGrayscale@ kIsGrayscaleDefinition TCanvas.h:96; TCanvas::kShowEventStatus@ kShowEventStatusDefinition TCanvas.h:89; TCanvas::kAutoExec@ kAutoExecDefinition TCanvas.h:90; TCanvas::kMenuBar@ kMenuBarDefinition TCanvas.h:91; TCanvas::kShowEditor@ kShowEditorDefinition TCanvas.h:93; TCanvas::IsATClass * IsA() const overrideDefinition TCanvas.h:238; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TCanvas::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TCanvas.cxx:1110; TCanvas::RunAutoExecvoid RunAutoExec()Execute the list of TExecs in the current pad.Definition TCanvas.cxx:1767; TCanvas::Clearedvirtual void Cleared(TVirtualPad *pad)Emit pad Cleared signal.Definition TCanvas.cxx:770; TCanvas::GetWwUInt_t GetWw() const overrideDefinition TCanvas.h:163; TCanvas::fCanvasImpTCanvasImp * fCanvasImp! Window system specific canvas implementationDefinition TCanvas.h:57; TCanvas::GetWhUInt_t GetWh() const overrideDefinition TCanvas.h:164; TCanvas::Highlightedvirtual void Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)Emit Highlighted() signal.Definition TCanvas.cxx:1612; TCanvas::Flushvoid Flush()Flush canvas buffers.Definition TCanvas.cxx:1145; TCanvas::fYsizeUserSize_t fYsizeUserUser specified size of canvas along Y in CM.Definition TCanvas.h:34; TCanvas::fDoubleBufferInt_t fDoubleBufferDouble buffer flag (0=off, 1=on)Definition TCanvas.h:38; TCanvas::ForceUpdatevoid ForceUpdate()Force canvas update.Definition TCanvas.cxx:1177; TCanvas::CreatePaintervoid CreatePainter()Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpaint...Definition TCanv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:112955,Clear,Clearedvirtual,112955,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,3,['Clear'],"['Cleared', 'Clearedvirtual']"
Usability,"xx:3344; TH1::GetFunctionvirtual TF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TH1.cxx:9051; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::RealTimeDouble_t RealTime()Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStringBasic string class.Definition TString.h:139; TStyle::SetStatYvoid SetStatY(Float_t y=0)Definition TStyle.h:398; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::SetGridvirtual void SetGrid(Int_t valuex=1, Int_t valuey=1)=0; TVirtualPad::Updatevirtual void Update()=0; TVirtualPad::SetLogyvirtual void SetLogy(Int_t value=1)=0; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; AuthorLorenzo Moneta ; Definition in file minuit2FitBench.C. tutorialsfitminuit2FitBench.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/minuit2FitBench_8C.html:10323,Guid,Guide,10323,doc/master/minuit2FitBench_8C.html,https://root.cern,https://root.cern/doc/master/minuit2FitBench_8C.html,1,['Guid'],['Guide']
Usability,"xx:547; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; RooFit::NumCPURooCmdArg NumCPU(Int_t nCPU, Int_t interleave=0)Definition RooGlobalFunc.cxx:474; RooFit::ProjWDataRooCmdArg ProjWData(const RooAbsData &projData, bool binData=false)Definition RooGlobalFunc.cxx:179; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf603_multicpuDefinition rf603_multicpu.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; TimerDefinition histspeedtest.cxx:54; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- Command timer: Real time 0:00:00, CP time 0.140; [#1] INFO:Minimization -- Session timer: Real time 0:00:00, CP time 0.140; [#1] INFO:Minimization -- Command timer: Real time 0:00:00, CP time 0.010; [#1] INFO:Minimization -- Session timer: Real time 0:00:00, CP time 0.150, 2 slices; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x averages using data variables (y,z); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) only the following components of the projection data will be used: (y,z); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf603_multicpu.C. tutorialsroofitrf603_multicpu.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf603__multicpu_8C.html:7372,Guid,Guide,7372,doc/master/rf603__multicpu_8C.html,https://root.cern,https://root.cern/doc/master/rf603__multicpu_8C.html,1,['Guid'],['Guide']
Usability,"y (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:24139,Clear,Clear,24139,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['Clear'],['Clear']
Usability,"y (const Double_t *point, Bool_t in=kTRUE) const override;  Compute safety distance for a union node;. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Sizeof3D () const override;  Register 3D size of this shape. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBoolNode;  TGeoBoolNode ();  Default constructor. ;  ;  TGeoBoolNode (const char *expr1, const char *expr2);  Constructor called by TGeoCompositeShape providing 2 subexpressions for the 2 branches. ;  ;  TGeoBoolNode (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing left and right shapes and matrices (in the Boolean operation). ;  ;  ~TGeoBoolNode () override;  Destructor. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; TGeoMatrix * GetLeftMatrix () const;  ; TGeoShape * GetLeftShape () const;  ; TGeoMatrix * GetRightMatrix () const;  ; TGeoShape * GetRightShape () const;  ; ThreadData_t & GetThreadData () const;  ; void RegisterMatrices ();  Register all matrices of the boolean node and descendents. ;  ; Bool_t ReplaceMatrix (TGeoMatrix *mat, TGeoMatrix *newmat);  Replace one of the matrices. ;  ; virtual void SetPoints (Double_t *points) const;  Fill buffer with shape vertices. ;  ; virtual void SetPoints (Float_t *points) const;  Fill buffer with shape vertices. ;  ; void SetSelected (Int_t sel);  Set the selected branch. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIntersection.html:3040,Clear,ClearThreadData,3040,doc/master/classTGeoIntersection.html,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html,3,['Clear'],['ClearThreadData']
Usability,"y (mode) only the ; applicable states are built (A,C for pdfA, B,D for pdfB); ; Advanced options; Partial splits. You can request to limit the list of states of each splitCat that; will be considered in the build. This limitation is requested in the ; each build as follows:; . splitCats = tagCat(Lep,Kao) RunBlock(Run1); . In this example the splitting of tagCat is limited to states Lep,Kao; and the splitting of runBlock is limited to Run1. The splits apply; globally to each build, i.e. every parameter split requested in this; build will be limited according to these specifications. ; ; ; NB: Partial builds have no pdf associated with the unbuilt states of the ; limited splits. Running such a pdf on a dataset that contains data with ; unbuilt states will result in this data being ignored completely.; ; Non-trivial splits. It is possible to make non-trivial parameter splits with RooSimPdfBuilder.; Trivial splits are considered simple splits in one (fundamental) category; in the dataset or a split in a RooSuperCategory 'product' of multiple; fundamental categories in the dataset. Non-trivial splits can be performed; using an intermediate 'category function' (RooMappedCategory,; RooGenericCategory,RooThresholdCategory etc), i.e. any RooAbsCategory; derived objects that calculates its output as function of one or more; input RooRealVars and/or RooCategories.; . Such 'function categories' objects must be constructed by the user prior; to building the PDF. In the RooSimPdfBuilder::buildPdf() function these; objects can be passed in an optional RooArgSet called 'auxiliary categories':; . const RooSimultaneous* buildPdf(const RooArgSet& buildConfig, const RooAbsData* dataSet, ; const RooArgSet& auxSplitCats, Bool_t verbose=kFALSE) {; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; . Objects passed in this argset can subsequently be used in the build configuration, e.g.; . RooMappedCategory tagMap(""tagMap"",""Mapped tagging category"",tagCat,""CutBased"") ;; tagMap.map(""Lep"",""CutBased"") ;; tagMap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimPdfBuilder.html:10537,simpl,simple,10537,root/html526/RooSimPdfBuilder.html,https://root.cern,https://root.cern/root/html526/RooSimPdfBuilder.html,7,['simpl'],['simple']
Usability,"y : Training finished; : ; Factory : Train method: FDA_GA for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ FDA_GA ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The function discriminant analysis (FDA) is a classifier suitable ; : to solve linear or simple nonlinear discrimination problems.; : ; : The user provides the desired function with adjustable parameters; : via the configuration option string, and FDA fits the parameters to; : it, requiring the signal (background) function value to be as close; : as possible to 1 (0). Its advantage over the more involved and; : automatic nonlinear discriminators is the simplicity and transparency ; : of the discrimination expression. A shortcoming is that FDA will; : underperform for involved problems with complicated, phase space; : dependent nonlinear correlations.; : ; : Please consult the Users Guide for the format of the formula string; : and the allowed parameter ranges:; : documentation/tmva/UsersGuide/TMVAUsersGuide.pdf; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : The FDA performance depends on the complexity and fidelity of the; : user-defined discriminator function. As a general rule, it should; : be able to reproduce the discrimination power of any linear; : discriminant analysis. To reach into the nonlinear domain, it is; : useful to inspect the correlation profiles of the input variables,; : and add quadratic and higher polynomial terms between variables as; : necessary. Comparison with more involved nonlinear classifiers can; : be used as a guide.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : Depending on the function used, the choice of ""FitMethod"" is; : crucial for getting valuable solutions with FDA. As a guideline it; : is recommended to start with ""FitMethod=MINUIT"". When more complex; : functions are used where MINUIT does not converge to reasonable; : results, the user shou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:39050,Guid,Guide,39050,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Guid'],['Guide']
Usability,"y Calculation | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 8. Efficiency Calculation. Efficiency; Basically all analyses involve selections on parameters - as an example we will use the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/8-efficiency-calculation.html:1015,Guid,Guides,1015,d/8-efficiency-calculation.html,https://root.cern,https://root.cern/d/8-efficiency-calculation.html,1,['Guid'],['Guides']
Usability,"y Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * RooTreeData::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooTreeData::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooTreeData::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 36 of file RooTreeData.h. ◆ DeclFileName(). static const char * RooTreeData::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 36 of file RooTreeData.h. ◆ GetTree(). const TTree * RooTreeData::GetTree ; (; ); const. inline . Definition at line 28 of file RooTreeData.h. ◆ IsA(). TClass * RooTreeData::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsData.; Definition at line 36 of file RooTreeData.h. ◆ Streamer(). void RooTreeData::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class RooAbsData. ; Reimplemented from RooAbsData. ◆ StreamerNVirtual(). void RooTreeData::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 36 of file RooTreeData.h. Member Data Documentation. ◆ _blindString. TString RooTreeData::_blindString. private . Blinding string (optionally read from ASCII files) ; Definition at line 34 of file RooTreeData.h. ◆ _tree. TTree* RooTreeData::_tree = nullptr. private . TTree holding the data points. ; Definition at line 32 of file RooTreeData.h. ◆ _truth. RooArgSet RooTreeData::_truth. private . Truth variables. ; Definition at line 33 of file RooTreeData.h. Libraries for RooTreeData:. [legend]; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooFitLegacy/RooTreeData.h. RooTreeData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeData.html:30356,Guid,Guide,30356,doc/master/classRooTreeData.html,https://root.cern,https://root.cern/doc/master/classRooTreeData.html,1,['Guid'],['Guide']
Usability,"y ascending class ID's. ; Definition at line 857 of file TClassTable.cxx. ◆ Streamer(). void TClassTable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TClassTable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 101 of file TClassTable.h. ◆ Terminate(). void TClassTable::Terminate ; (; ). static . Deletes the class table (this static class function calls the dtor). ; Definition at line 878 of file TClassTable.cxx. Friends And Related Symbol Documentation. ◆ ROOT::ResetClassVersion. void ROOT::ResetClassVersion ; (; TClass * ; , . const char * ; , . Short_t ;  . ). friend . ◆ TROOT. friend class TROOT. friend . Definition at line 40 of file TClassTable.h. Member Data Documentation. ◆ fgAlternate. TClassAlt ** TClassTable::fgAlternate. staticprivate . Definition at line 46 of file TClassTable.h. ◆ fgCursor. UInt_t TClassTable::fgCursor. staticprivate . Definition at line 53 of file TClassTable.h. ◆ fgIdMap. TClassTable::IdMap_t * TClassTable::fgIdMap. staticprivate . Definition at line 49 of file TClassTable.h. ◆ fgSize. UInt_t TClassTable::fgSize. staticprivate . Definition at line 50 of file TClassTable.h. ◆ fgSorted. Bool_t TClassTable::fgSorted. staticprivate . Definition at line 52 of file TClassTable.h. ◆ fgSortedTable. TClassRec ** TClassTable::fgSortedTable. staticprivate . Definition at line 48 of file TClassTable.h. ◆ fgTable. TClassRec ** TClassTable::fgTable. staticprivate . Definition at line 47 of file TClassTable.h. ◆ fgTally. std::atomic< UInt_t > TClassTable::fgTally. staticprivate . Definition at line 51 of file TClassTable.h. Libraries for TClassTable:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TClassTable.h; core/cont/src/TClassTable.cxx. TClassTable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTable.html:21929,Guid,Guide,21929,doc/master/classTClassTable.html,https://root.cern,https://root.cern/doc/master/classTClassTable.html,1,['Guid'],['Guide']
Usability,"y constructor. TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); Initializing constructor. TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl). virtual ~TGenCollectionProxy(); Standard destructor. TClass * GetCollectionClass() const; Return a pointer to the TClass representing the container. Int_t GetCollectionType() const; Return the type of collection see TClassEdit::ESTLType. ULong_t GetIncrement() const; Return the offset between two consecutive value_types (memory layout). UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objstart); Push new proxy environment. void PopProxy(); Pop old proxy environment. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass() const; Return a pointer to the TClass representing the content. void SetValueClass(TClass* newcl); Set pointer to the TClass representing the content. EDataType GetType() const; If the content is a simple numerical value, return its type (see TDataType). void * At(UInt_t idx); Return the address of the value at index 'idx'. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete); Block allocation of containees. void Commit(void* env); Block commit of containees. void operator()(TBuffer& refBuffer, void* pObject); TClassStreamer I/O overload. void ReadBuffer(TBuffer& b, void* obj); Routine to read the content of the buffer into 'obj'. void ReadBuffer(TBuffer& b, void* obj, const TClass* onfileClass). void SetOnFileClass(TClass* cl); { fOnFileClass = cl; }. TClass* GetOnFileClass() const; { return fOnFileClass; }. TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(). CreateIterators_t GetFunctionCreateIterators(Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenCollectionProxy.html:7866,simpl,simple,7866,root/html534/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TGenCollectionProxy.html,1,['simpl'],['simple']
Usability,"y curve. This working point requires the knowledge of the expected yields, which is not the case in general. Note also that for rare signals, Poissonian statistics should be used, which modifies the significance criterion.; The rectangular cut of a volume in the variable space is performed using a binary tree to sort the training events. This provides a significant reduction in computing time (up to several orders of magnitudes, depending on the complexity of the problem at hand).; Technically, optimisation is achieved in TMVA by two methods:. Monte Carlo generation using uniform priors for the lower cut value, and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample. The GA is configurable by many external settings through the option string. For difficult cases (such as many variables), some tuning may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown superior results, and often failed due to convergence at local minima.; The tests we have performed so far showed that in generic applications, the GA is superior to MC sampling, and hence GA is the default method. It is worthwhile trying both anyway.; Decorrelated (or ""diagonalized"") Cuts**; See class description for Method Likelihood for a detailed explanation. ; Definition at line 61 of file MethodCuts.h. Public Member Functions;  MethodCuts (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""MC:150:10000:"");  standard constructor ;  ;  MethodCuts (DataSetInfo &theData, const TString &theWeightFile);  construction from weight file ;  ; virtual ~MethodCuts (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description for LD classification and regression (for arbitrary number of output classes/targets) ;  ; void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:1976,Simpl,Simplex,1976,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,1,['Simpl'],['Simplex']
Usability,"y explored with SWAN.; . 06-07-2016 ; CERN Summer Students' Course ; The CERN Summer Student program is in full swing and ROOT is part of it.; . 05-01-2016 ; Wanted: A tool to 'warn' user of inefficient (for I/O) construct in data model ; A tool to 'warn' user of inefficient (for I/O) construct in data model; . 16-12-2015 ; Try the new ROOTbooks on Binder (beta) ; Try the new ROOTbooks on Binder (Beta)! Use ROOT interactively in notebooks and explore to the examples.; . 05-12-2015 ; ROOT has its Jupyter Kernel! ; ROOT has its Jupyter kernel! More information here.; . 15-09-2015 ; ROOT Users' Workshop 2015 ; The next ROOT Users' Workshop will celebrate ROOT's 20th anniversary. It will take place on 15-18 Sept 2015 in Saas-Fee, Switzerland . 03-09-2015 ; The New ROOT Website is Online! ; The new ROOT website is online!; . 02-09-2015 ; Wanted: Storage of HEP data via key/value storage solutions ; Interface the ROOT I/O to key/value stores.; . 16-08-2015 ; ROOT Tutorial for Summer Students ; Four instances of the summer student tutorial took place this year: more than 140 people attended.; . 28-03-2015 ; Commandline tools for ROOT files inspection, modification and automated plotting ; Create a unix-like set of Python command line tools to explore, modify and display the content of ROOT files.; . . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/news.html:5943,Guid,Guides,5943,d/news.html,https://root.cern,https://root.cern/d/news.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"y for; // simple display modes algorithm group; float rainbow1_step; // determines the first component step for neighboring color; // levels, applies only for rainbowed display modes, it does not apply; // for simple display modes algorithm group; float rainbow2_step; // determines the second component step for neighboring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; float rainbow3_step; // determines the third component step for neighboring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; int color_alg; // applies only for rainbowed display modes (rgb smooth algorithm,; // rgb modulo color component, cmy smooth algorithm, cmy modulo; // color component, cie smooth algorithm, cie modulo color component,; // yiq smooth algorithm, yiq modulo color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // display modes algorithm group [15]; float l_h_weight; // weight between shading according to fictive light source and; // according to channels counts, applies only for; // PICTURE2_MODE_GROUP_LIGHT_HEIGHT modes group; int xlight; // x position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int ylight; // y position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int zlight; // z position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int shadow; // determines whether shadow will be drawn (no shadow, shadow),; // for rainbowed display modes with shading according to light; int shading; // determines whether the picture will shaded, smoothed (no shading,; // shading), for rainbowed display modes only; int bezier; // determines Bezier interpolation (applies only for simple display; // modes group for grid, x_lines, y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:74001,simpl,simple,74001,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"y implement (see later). User convenient typedefs are also provided. They derive from the common generic interface multi-dimensional for function evaluation, ROOT::Math::IBaseFunctionMultiDim. In addition the fitter classes make uses of the generic interfaces for parametric function evaluations, ROOT::Math::IParametricFunctionMultiDim to define the fit model function and use the ROOT::Math::Minimizer interface to perform the minimization of the objective function. More information about the function interface and the multi-dimensional minimization in ROOT is given in the Mathematical Library chapter.; Here we present a detailed description of the ROOT::Fit classes and how to use them. Using these classes instead of the interface provided directly in the ROOT data objects, like TH1::Fit allow are more fine control to configure and customise the fits. For example, using these classes a combined fit of several histograms can be performed.; To understand how these class work, let’s go through a simple example, such as fitting an histogram.; When fitting an histogram, instead of using TH1::Fit we will show in the following hot wo use the ROOT::Fit classes. We will show how to perform the following different type of fits with the histogram data: * a least square fit using the observed errors (Neyman chi-squared); * a least square fit using the expected errors from the function (Pearson chi-squared); * a binned likelihood fit; * an extended unbinned likelihood fits, if the histogram has been set to store in the buffer the original data used to fill it.; Let’s go through all the steps required for performing these fits using the ROOT::Fit::Fitter class. These steps are: 1. Create the input fit data object. 2. Create the input model function. 3. Configure the fit. 4. Perform the data fitting. 5. Examine the result.; 5.7.1 Creating the input fit data; We have two types of input data, binned data (class ROOT::Fit::BinData) used for least square (chi-square) fits of histograms ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:190575,simpl,simple,190575,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"y integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would be complicated as _norm->getVal() could spoil the cache and interfere with returning the cached return value. Since unnormalized calls are typically done in integration calls, there is no performance hit. ; Reimplemented from RooAbsPdf.; Definition at line 79 of file RooNormalizedPdf.h. ◆ selfNormalized(). bool RooNormalizedPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 44 of file RooNormalizedPdf.h. ◆ translate(). void RooNormalizedPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 51 of file RooNormalizedPdf.cxx. Member Data Documentation. ◆ _normIntegral. RooRealProxy RooNormalizedPdf::_normIntegral. private . Definition at line 86 of file RooNormalizedPdf.h. ◆ _normSet. RooArgSet RooNormalizedPdf::_normSet. private . Definition at line 87 of file RooNormalizedPdf.h. ◆ _pdf. RooTemplateProxy<RooAbsPdf> RooNormalizedPdf::_pdf. private . Definition at line 85 of file RooNormalizedPdf.h. roofit/roofitcore",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:77922,simpl,simple,77922,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['simpl'],['simple']
Usability,"y list. Redo is Undo for undo action. Use TQUndoManager::Redo method for that ; Definition at line 27 of file TQCommand.h. Public Member Functions;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);  Copy constructor. ;  ;  TQCommand (TObject *obj, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ; virtual ~TQCommand ();  dtor. ;  ; void Add (TObject *obj) override;  ; void Add (TObject *obj, Option_t *opt) override;  Add command to the list of merged commands. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual Bool_t CanRedo () const;  Returns kTRUE if Redo action is possible, kFALSE if it's not. ;  ; virtual Bool_t CanUndo () const;  Returns kTRUE if Undo action is possible, kFALSE if it's not. ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:5565,Undo,Undo,5565,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,"y medium; 49 TGeoPatternFinder *fFinder; // finder object for divisions; 50 TGeoVoxelFinder *fVoxels; // finder object for bounding boxes; 51 TGeoManager *fGeoManager; //! pointer to TGeoManager owning this volume; 52 ; 53 TObject *fField; //! just a hook for now; 54 TString fOption; //! option - if any; 55 Int_t fNumber; // volume serial number in the list of volumes; 56 Int_t fNtotal; // total number of physical nodes; 57 Int_t fRefCount; // reference counter; 58 Char_t fTransparency; // transparency setting; 59 TGeoExtension *fUserExtension; //! Transient user-defined extension to volumes; 60 TGeoExtension *fFWExtension; //! Transient framework-defined extension to volumes; 61 ; 62private:; 63 TGeoVolume(const TGeoVolume &) = delete;; 64 TGeoVolume &operator=(const TGeoVolume &) = delete;; 65 ; 66public:; 67 virtual void ClearThreadData() const;; 68 virtual void CreateThreadData(Int_t nthreads);; 69 ; 70public:; 71 enum EGeoVolumeTypes {; 72 kVolumeReplicated = BIT(14),; 73 kVolumeSelected = BIT(15),; 74 kVolumeDiv = BIT(16),; 75 kVolumeOverlap = BIT(17),; 76 kVolumeImportNodes = BIT(18),; 77 kVolumeMulti = BIT(19),; 78 kVoxelsXYZ = BIT(20), // not used; 79 kVoxelsCyl = BIT(21), // not used; 80 kVolumeClone = BIT(22),; 81 kVolumeAdded = BIT(23),; 82 kVolumeOC = BIT(21) // overlapping candidates; 83 };; 84 // constructors; 85 TGeoVolume();; 86 TGeoVolume(const char *name, const TGeoShape *shape, const TGeoMedium *med = nullptr);; 87 ; 88 // destructor; 89 ~TGeoVolume() override;; 90 // methods; 91 virtual void cd(Int_t inode) const;; 92 void Browse(TBrowser *b) override;; 93 Double_t Capacity() const;; 94 void CheckShapes();; 95 void ClearNodes() { fNodes = nullptr; }; 96 void ClearShape();; 97 void CleanAll();; 98 virtual TGeoVolume *CloneVolume() const;; 99 void CloneNodesAndConnect(TGeoVolume *newmother) const;; 100 void CheckGeometry(Int_t nrays = 1, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0) const;; 101 void CheckOverlaps(Double_t ovlp = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:3413,Clear,ClearNodes,3413,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,2,['Clear'],"['ClearNodes', 'ClearShape']"
Usability,y standard PDF previewer tools showed very thin white lines between the bins as well as in the color palette. This made very ugly the final output. This problem is due to bad implementation of anti-aliasing in these previewers. A way to bypass this issue was to turn off the anti-aliasing in the previewer but then the rest of the document does not look nice. This problem is now bypassed with a fix in both PDF and PostScript output.; Offer 0 as line width option. Useful to make a line invisible. TSVG. Use float numbers instead of integer to describe graphics paths to avoid rounding problems.; Implement missing math symbols.; Offer 0 as line width option. Useful to make a line invisible. TASImage. In the animated gif it is now possible to specify the delay between the last image and the fist image in case of infinite loop. (Fernando Hueso González f.gonzalez at hzdr dot de). TPadPainter. Offer 0 as line width option. Useful to make a line invisible. TPad. In TPad::ShowGuidelines the number of guide lines is limited to 15. Above that they become useless.; Print a warning if one of the pad limit is a NaN.; Fix https://sft.its.cern.ch/jira/browse/ROOT-6703. TCanvas. Make sure that “/” and “.” are not part of the method name when a canvas is saved as a .C file. TLatex. With the Cocoa backend the PDF and PS output produced miss-aligned exponents because the GetTextExtend method behaved differently in batch mode and “screen” mode. This is now fixed. See http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18883; Improve the square-root drawing in case it is small.; Better adjustment of the tilde accent position in case of Cocoa backend. TMathText. \mu is now working for Postscript output.; \splitline is now implemented. Cocoa backend. Line width and line style were not applied on boxes. 3D Graphics Libraries; GL Viewer. New option “Rotate scene” in the “Extras” tab of the GL Viewer. It allows to do a real rotation instead of a wobbling when the “Auto Rotator” is launched.; New met,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:23593,guid,guide,23593,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['guid'],['guide']
Usability,"y this profile2D by h1*-; *-* =============================. this = this*h1. void Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile2D by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH2D * ProjectionXY(const char* name = ""_pxy"", Option_t* option = ""e"") const; Project this profile2D into a 2-D histogram along X,Y*-*-; *-* =====================================================. The projection is always of the type TH2D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the profile. void PutStats(Double_t* stats); Replace current statistics with the values in array stats. void Reset(Option_t* option = """"); -*-*Reset contents of a Profile2D histogram; *-* =======================================. void RebinAxis(Double_t x, TAxis* axis); Profile histogram is resized along axis such that x is in the axis range.; The new axi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:40127,simpl,simply,40127,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,3,['simpl'],['simply']
Usability,"y to decode the dimensions of the variables. ;  ; Int_t RegisterDimensions (Int_t code, TLeaf *leaf);  This method is used internally to decode the dimensions of the variables. ;  ; void ResetDimensions ();  Populate the TTreeFormulaManager with the dimension information. ;  ; bool StringToNumber (Int_t code) override;  Try to 'demote' a string into an array bytes. ;  ; virtual bool SwitchToFormLeafInfo (Int_t code);  Convert the underlying lookup method from the direct technique (dereferencing the address held by the branch) to the method using TFormLeafInfo. ;  ;  Protected Member Functions inherited from ROOT::v5::TFormula; virtual Bool_t CheckOperands (Int_t leftoperand, Int_t rightoperartion, Int_t &err);  Check whether the operands at 'leftoper' and 'oper-1' are compatible with the operation at 'oper'. ;  ; virtual Bool_t CheckOperands (Int_t operation, Int_t &err);  Check whether the operand at 'oper-1' is compatible with the operation at 'oper'. ;  ; void ClearFormula (Option_t *option="""");  Resets the objects. ;  ; Double_t EvalParFast (const Double_t *x, const Double_t *params);  Evaluate this formula. ;  ; Double_t EvalPrimitive (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive0 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive1 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive2 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive3 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive4 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Short_t GetAction (Int_t code) const;  ; Short_t GetActionOptimized (Int_t code) const;  ; Int_t GetActionParam (Int_t code) const;  ; Int_t GetActionParamOptimized (Int_t code) const;  ; Int_t * GetOper () const;  ; Int_t * GetOperOptimized () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:25637,Clear,ClearFormula,25637,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['Clear'],['ClearFormula']
Usability,"y typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TDispatchTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDispatchTimer(). TDispatchTimer::TDispatchTimer ; (; TProofPlayer * ; p). inline . Definition at line 117 of file TProofPlayer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TDispatchTimer::Notify ; (; ). overridevirtual . Handle expiration of the timer associated with dispatching pending events while processing. ; We must act as fast as possible here, so we just set a flag submitting a request for dispatching pending events ; Implements TSysEvtHandler.; Definition at line 126 of file TProofPlayer.cxx. Member Data Documentation. ◆ fPlayer. TProofPlayer* TDispatchTimer::fPlayer. private . Definition at line 114 of file TProofPlayer.cxx. proof/proofplayer/src/TProofPlayer.cxx. TDispatchTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDispatchTimer.html:18057,Guid,Guide,18057,doc/master/classTDispatchTimer.html,https://root.cern,https://root.cern/doc/master/classTDispatchTimer.html,1,['Guid'],['Guide']
Usability,"y useful because of two theorems:; 1- A linear combination of sigmoids can approximate any continuous function.; 2- Trained with output=1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X.; 5.12.3 Learning Methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrate, divided by two, of the error on each individual output neuron. In all methods implemented in this library, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, one can express this derivative as the product of the local partial derivative by the weighted sum of the outputs derivatives (for a neuron) or as the product of the input value with the local partial derivative of the output neuron (for a synapse). This computation is called “back-propagation of the errors”. Six learning methods are implemented.; 5.12.3.1 Stochastic Minimization; This is the most trivial learning method. The Robbins-Monro stochastic approximation is applied to multilayer perceptrons. The weights are updated after each example according to the formula:; \[; w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t); \]; with:; \[; \Delta w_{ij}(t) = - \eta \left(; \frac{\partial e_p}{\partial w_{ij}} + \delta \right) +; \epsilon \Delta w_{ij}(t-1); \]; The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.2 Steepest Descent With Fixed Step Size (Batch Learning); It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.3 Steepest Descent Algorithm; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower Tau = higher precision = slower search. A value Tau=3 seems ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:232557,learn,learning,232557,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learning']
Usability,"y widget. ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler converts a key press to some line editor action. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in the text entry widget. ;  ; Bool_t HandleSelection (Event_t *event) override;  Handle text selection event. ;  ; Bool_t HandleSelectionClear (Event_t *event) override;  Handle selection clear event. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle request to send current clipboard contents to requestor window. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle cursor blink timer. ;  ; Bool_t HasMarkedText () const;  ; Bool_t HasOwnFont () const;  ; void Home (Bool_t mark=kFALSE);  Moves the text cursor to the left end of the line. ;  ; virtual void Insert (const char *);  Removes any currently selected text, inserts newText, sets it as the new contents of the text entry. ;  ; virtual void InsertText (const char *text, Int_t pos);  Inserts text at position pos, clears the selection and moves the cursor to the end of the line. ;  ; TClass * IsA () const override;  ; Bool_t IsEdited () const;  ; Bool_t IsFrameDrawn () const;  ; void Layout () override;  ; void MarkWord (Int_t pos);  Marks the word nearest to cursor position. ;  ; Int_t MaxMark () const;  ; Int_t MinMark () const;  ; void NewMark (Int_t pos);  New character mark at position pos. ;  ; void Remove ();  Deletes all characters on the right side of the cursor. ;  ; virtual void RemoveText (Int_t start, Int_t end);  Removes text at the range, clears the selection and moves the cursor to the end of the line. ;  ; virtual void ReturnPressed ();  This signal is emitted when the return or enter key is pressed. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a text entry widget as a C++ statement(s) on output stream out. ;  ; virtual void SelectAll ();  Selects all text (i.e. ;  ; virtual void SetAlignment (ETextJustification mode=kTextLeft);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:10062,clear,clears,10062,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clears']
Usability,"y widget. ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler converts a key press to some line editor action. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in the text entry widget. ;  ; Bool_t HandleSelection (Event_t *event) override;  Handle text selection event. ;  ; Bool_t HandleSelectionClear (Event_t *event) override;  Handle selection clear event. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle request to send current clipboard contents to requestor window. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle cursor blink timer. ;  ; Bool_t HasMarkedText () const;  ; Bool_t HasOwnFont () const;  ; void Home (Bool_t mark=kFALSE);  Moves the text cursor to the left end of the line. ;  ; virtual void Insert (const char *);  Removes any currently selected text, inserts newText, sets it as the new contents of the text entry. ;  ; virtual void InsertText (const char *text, Int_t pos);  Inserts text at position pos, clears the selection and moves the cursor to the end of the line. ;  ; TClass * IsA () const override;  ; Bool_t IsEdited () const;  ; Bool_t IsFrameDrawn () const;  ; void Layout () override;  ; void MarkWord (Int_t pos);  Marks the word nearest to cursor position. ;  ; Int_t MaxMark () const;  ; Int_t MinMark () const;  ; void NewMark (Int_t pos);  New character mark at position pos. ;  ; void Remove ();  Deletes all characters on the right side of the cursor. ;  ; virtual void RemoveText (Int_t start, Int_t end);  Removes text at the range, clears the selection and moves the cursor to the end of the line. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a text entry widget as a C++ statement(s) on output stream out. ;  ; virtual void SelectAll ();  Selects all text (i.e. ;  ; virtual void SetAlignment (ETextJustification mode=kTextLeft);  Sets the alignment of the text entry. ;  ; virtual void SetCursorPosition (Int_t pos);  Set the curso",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:8259,clear,clears,8259,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,1,['clear'],['clears']
Usability,"y(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. TFitResultPtr Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; the class is deleted. void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; Used internally to obtain the bin ranges according to the dimensionality of; the histogram and the limits set by hand. void ComputeFCN(Double_t& f, const Double_t* par, Int_t flag); Used internally to compute the likelihood value. void FindPrediction(int bin, double& t_i, int& k_0, double& A_ki) const; Function used internally to obtain the template prediction in the individual bins; 'bin' <=> 'i' (paper); 'par' <=> 'j' (paper). Double_t GetChisquare() const; Return the likelihood ratio Chi-squared (chi2) for the fit.; The value is computed when the fit is executed successfully.; Chi2 calculation is based on the ""likelihood ratio"" lambda,; lambda = L(y;n) / L(m;n),; where L(y;n) i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:18162,simpl,simply,18162,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,2,['simpl'],['simply']
Usability,"y(y); model = ROOT.RooProdPdf(""model"", ""gaussx(x|y)*gaussy(y)"", {gaussy}, Conditional=({gaussx}, {x})); ; # Sample, fit and plot product pdf; # ---------------------------------------------------------------; ; # Generate 1000 events in x and y from model; data = model.generate({x, y}, 10000); ; # Plot x distribution of data and projection of model x = Int(dy); # model(x,y); xframe = x.frame(); data.plotOn(xframe); model.plotOn(xframe); ; # Plot x distribution of data and projection of model y = Int(dx); # model(x,y); yframe = y.frame(); data.plotOn(yframe); model.plotOn(yframe); ; # Make two-dimensional plot in x vs y; hh_model = model.createHistogram(""hh_model"", x, ROOT.RooFit.Binning(50), ROOT.RooFit.YVar(y, ROOT.RooFit.Binning(50))); hh_model.SetLineColor(ROOT.kBlue); ; # Make canvas and draw ROOT.RooPlots; c = ROOT.TCanvas(""rf305_condcorrprod"", ""rf05_condcorrprod"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.6); xframe.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); yframe.GetYaxis().SetTitleOffset(1.6); yframe.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.20); hh_model.GetZaxis().SetTitleOffset(2.5); hh_model.Draw(""surf""); ; c.SaveAs(""rf305_condcorrprod.png""); [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y); [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on y integrates over variables (x); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf305_condcorrprod.py. tutorialsroofitrf305_condcorrprod.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf305__condcorrprod_8py.html:3197,Guid,Guide,3197,doc/master/rf305__condcorrprod_8py.html,https://root.cern,https://root.cern/doc/master/rf305__condcorrprod_8py.html,1,['Guid'],['Guide']
Usability,"y). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass *cl, Int_t s); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. NB: This function should not be called in the TClonesArray is already; initialized with a class. void SetClass(const char *classname, Int_t s); see TClonesArray::SetClass(const TClass*). void SetOwner(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:15955,simpl,simplified,15955,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,1,['simpl'],['simplified']
Usability,"y). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. NB: This function should not be called in the TClonesArray is already; initialized with a class. void SetClass(const char* classname, Int_t size = 1000); see TClonesArray::SetClass(const TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:18723,simpl,simplified,18723,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['simpl'],['simplified']
Usability,"y); Int_t; Int_t; Int_t px,py. User to absolute pixel; XtoAbsPixel(ux); YtoAbsPixel(uy); XYtoAbsPixel(ux,uy,&apx,&apy); Int_t; Int_t; Int_t apx,apy. Absolute pixel to user; AbsPixeltoX(apx); AbsPixeltoY(apy); AbsPixeltoXY(apx,apy,&ux,&uy); Double_t; Double_t; Double_t ux,uy. Note: all the pixel conversion functions along the Y axis consider that py=0 is at the top of the pad except PixeltoY() which assume that the position py=0 is at the bottom of the pad. To make PixeltoY() converting the same way as the other conversion functions, it should be used the following way (p is a pointer to a TPad):; p->PixeltoY(py - p->GetWh());; 9.3.4 Dividing a Pad into Sub-pads; Dividing a pad into sub pads in order for instance to draw a few histograms, may be done in two ways. The first is to build pad objects and to draw them into a parent pad, which may be a canvas. The second is to automatically divide a pad into horizontal and vertical sub pads.; 9.3.4.1 Creating a Single Sub-pad; The simplest way to divide a pad is to build sub-pads in it. However, this forces the user to explicitly indicate the size and position of those sub-pads. Suppose we want to build a sub-pad in the active pad (pointed by gPad). First, we build it, using a TPad constructor:; root[] spad1 = new TPad(""spad1"",""The first subpad"",.1,.1,.5,.5); One gives the coordinates of the lower left point (0.1, 0.1) and of the upper right one (0.5, 0.5). These coordinates are in NDC. This means that they are independent of the user coordinates system, in particular if you have already drawn for example a histogram in the mother pad. The only thing left is to draw the pad:; root[] spad1->Draw(); If you want more sub-pads, you have to repeat this procedure as many times as necessary.; 9.3.4.2 Dividing a Canvas into Sub-Pads; The manual way of dividing a pad into sub-pads is sometimes very tedious. There is a way to automatically generate horizontal and vertical sub-pads inside a given pad.; root[] pad1->Divide(3,2). Dividi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:311918,simpl,simplest,311918,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"y); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLVoxelPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. virtual voidDeInitGL() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFindVoxelColor(Double_t binContent, Float_t* rgba) const; Bool_tHasSections() const; virtual voidInitGL() const; TGLVoxelPainter&operator=(const TGLVoxelPainter&); voidPreparePalette() const; voidSetVoxelColor(const Float_t* rgba) const; TGLVoxelPainter(const TGLVoxelPainter&). Data Members; public:. static TGLPlotPainter::ECutAxisIDTGLPlotPainter::kXAxis; static TGLPlotPainter::ECutAxisIDTGLPlotPainter::kYAxis; static TGLPlotPainter::ECutAxisIDTGLPlotPainter::kZAxis. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLVoxelPainter.html:1661,Clear,ClearBuffers,1661,root/html602/TGLVoxelPainter.html,https://root.cern,https://root.cern/root/html602/TGLVoxelPainter.html,2,['Clear'],['ClearBuffers']
Usability,"y);  ; const char * GetPropertyRef (Int_t i) const;  ; Double_t GetSigmaAlpha () const;  ; ESurfaceType GetType () const;  ; Double_t GetValue () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void SetFinish (ESurfaceFinish finish);  ; void SetModel (ESurfaceModel model);  ; void SetPolish (Double_t polish);  ; void SetSigmaAlpha (Double_t sigmaalpha);  ; void SetType (ESurfaceType type);  ; void SetValue (Double_t value);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOpticalSurface.html:4315,Clear,Clear,4315,doc/master/classTGeoOpticalSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html,1,['Clear'],['Clear']
Usability,"y);; 155 }; 156 ; 157 /// Return the `sizeof()` of the collection object; 158 virtual UInt_t Sizeof() const = 0;; 159 ; 160 /// Set the address of the container being proxied and keep track of the previous one; 161 virtual void PushProxy(void *objectstart) = 0;; 162 ; 163 /// Reset the address of the container being proxied to the previous container; 164 virtual void PopProxy() = 0;; 165 ; 166 /// Return `true` if the content is of type 'pointer to'; 167 virtual Bool_t HasPointers() const = 0;; 168 ; 169 /// If the value type is a user-defined class, return a pointer to the `TClass` representing the; 170 /// value type of the container.; 171 virtual TClass *GetValueClass() const = 0;; 172 ; 173 /// If the value type is a fundamental data type, return its type (see enumeration EDataType).; 174 virtual EDataType GetType() const = 0;; 175 ; 176 /// Return the address of the value at index `idx`; 177 virtual void *At(UInt_t idx) = 0;; 178 ; 179 /// Clear the container; 180 virtual void Clear(const char *opt = """") = 0;; 181 ; 182 /// Return the current number of elements in the container; 183 virtual UInt_t Size() const = 0;; 184 ; 185 /// Allocates space for storing at least `n` elements. This function returns a pointer to the actual object on; 186 /// which insertions should take place. For associative collections, this function returns a pointer to a temporary; 187 /// buffer known as the staging area. If the insertion happened in a staging area (i.e. the returned pointer !=; 188 /// proxied object), `Commit()` should be called on the value returned by this function.; 189 virtual void* Allocate(UInt_t n, Bool_t forceDelete) = 0;; 190 ; 191 /// Commits pending elements in a staging area (see Allocate() for more information).; 192 virtual void Commit(void*) = 0;; 193 ; 194 /// Insert elements into the proxied container. `data` is a C-style array of the value type of the given `size`.; 195 /// For associative containers, e.g. `std::map`, the data type should be `std::pair",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html:8017,Clear,Clear,8017,doc/master/TVirtualCollectionProxy_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html,2,['Clear'],['Clear']
Usability,"y* Generate() const; Virtual copy constructor. TGenCollectionProxy * Initialize(Bool_t silent) const; Proxy initializer. void CheckFunctions() const; Check existence of function pointers. TGenCollectionProxy * InitializeEx(Bool_t silent); Proxy initializer. TClass * GetCollectionClass() const; Return a pointer to the TClass representing the container. Int_t GetCollectionType() const; Return the type of collection see TClassEdit::ESTLType. ULong_t GetIncrement() const; Return the offset between two consecutive value_types (memory layout). UInt_t Sizeof() const; Return the sizeof the collection object. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass() const; Return a pointer to the TClass representing the content. void UpdateValueClass(const TClass* oldcl, TClass* newcl); Update the internal ValueClass when a TClass constructor need to; replace an emulated TClass by the real TClass. EDataType GetType() const; If the content is a simple numerical value, return its type (see TDataType). void* At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the emulated collection. UInt_t Size() const; Return the current size of the container. void Resize(UInt_t n, Bool_t force_delete); Resize the container. void* Allocate(UInt_t n, Bool_t forceDelete); Allocate the needed space.; For associative collection, this returns a TStaging object that; need to be deleted manually __or__ returned by calling Commit(TStaging*). void Insert(const void* data, void* container, size_t size); Insert data into the container where data is a C-style array of the actual type contained in the collection; of the given size. For associative container (map, etc.), the data type is the pair<key,value>. void Commit(void* env); Commit the change. void PushProxy(void* objstart); Add an object. void PopProxy(); Remove the last object. void DeleteItem(Bool_t force, void* ptr) const; Call to delete/destruct i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy.html:8146,simpl,simple,8146,root/html602/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy.html,2,['simpl'],['simple']
Usability,"y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); voidValueSet(Double_t)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tCalcSliderPos(Float_t v); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TEveGValuator(const TEveGValuator&); TEveGValuator&operator=(const TEveGValuator&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReference",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGValuator.html:15974,Clear,ClearFlags,15974,root/html528/TEveGValuator.html,https://root.cern,https://root.cern/root/html528/TEveGValuator.html,4,['Clear'],['ClearFlags']
Usability,"y, TWebPS, TPrincipal, TProfile, TProfile2D, TProfile2Poly, TProfile3D, TScatter, TSpline, TSpline3, TSpline5, TVirtualFitter, TSpectrum, TSpectrum2, TSpectrum2Fit, TSpectrum3, TSpectrumFit, TSpectrumTransform, TSpectrum2Painter, TUnfoldBinning, TUnfoldBinningXML, TStreamerInfo, TSQLFile, TXMLFile, TRandom, TRandom1, TRandom2, TRandom3, TRandomGen< Engine >, TNeuron, TParticleClassPDG, TParticlePDG, TRootSniffer, TNetFile, TNetSystem, TNetFileStager, TParallelMergingFile, TPServerSocket, TPSocket, TS3WebFile, TServerSocket, TSocket, TSQLColumnInfo, TSQLMonitoringWriter, TSQLTableInfo, TSSLSocket, TUDPSocket, TWebFile, TWebSystem, TNetXNGFile, TNetXNGSystem, TPackMgr, TProof, TProofChain, TProofCondor, TProofLite, TProofLog, TProofLogElem, TProofMgr, TProofDesc, TProofMgrLite, TProofOutputFile, TProofQueryResult, TProofSuperMaster, TProofPerfAnalysis, TProofVectorContainer< T >, TProofVectorContainer< TProofDrawListOfGraphs::Point3D_t >, TProofVectorContainer< TProofDrawListOfPolyMarkers3D::Point4D_t >, TProofMonSender, TProofMonSenderML, TProofMonSenderSQL, TStatus, TXProofMgr, TXSocket, TXUnixSocket, RooWorkspace::WSDir, RooStats::ToyMCStudy, RooStats::ToyMCPayload, RooStats::UpperLimitMCSModule, ROOT::Experimental::XRooFit::xRooBrowser, ROOT::Experimental::XRooFit::xRooNode, TVirtualBranchBrowsable, TNonSplitBrowsable, TNtuple, TNtupleD, TQueryResult, TTree, TTreeSQL, TVirtualIndex, TTreeFormula, TTreeIndex, TParallelCoord, TParallelCoordRange, and TParallelCoordVar. ◆ StreamerNVirtual(). void TNamed::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TNamed.h. Member Data Documentation. ◆ fName. TString TNamed::fName. protected . Definition at line 32 of file TNamed.h. ◆ fTitle. TString TNamed::fTitle. protected . Definition at line 33 of file TNamed.h. core/base/inc/TNamed.h; core/base/src/TNamed.cxx. TNamed. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:12:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTNamed.html:28931,Guid,Guide,28931,doc/v632/classTNamed.html,https://root.cern,https://root.cern/doc/v632/classTNamed.html,1,['Guid'],['Guide']
Usability,"y, if action == 1 clean related; output file settings.; If the final target file is local then 'target' is set to the final local path; when action == 0 and used to retrieve the file with TFile::Cp when action == 1. Output file settings are in the form. <previous_option>of=name <next_option>; <previous_option>outfile=name,...;<next_option>. The separator from the next option is either a ' ' or a ';'; Called interanally by TProof::Process. Returns 0 on success, -1 on error. void SetFeedback(TString& opt, TString& optfb, Int_t action); Extract from opt in optfb information about wanted feedback settings.; Feedback are removed from the input string opt.; If action == 0, set up feedback accordingly, if action == 1 clean related; feedback settings (using info in optfb, if available, or reparsing opt). Feedback requirements are in the form. <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>. The special name 'stats' triggers feedback about events and packets.; The separator from the next option is either a ' ' or a ';'.; Called interanally by TProof::Process. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file or; Tselector object; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector (.C) file; or TSelector object.; The default tree is analyzed (i.e. the first one found). To specify another; tree, the default tree can be changed using TFileCollection::SetDefaultMetaData .; The return value is -1 in case of error and TSelector::GetStatus() in; in case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:51381,feedback,feedback,51381,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['feedback'],['feedback']
Usability,"y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; POINT point;; EVENTN eventn;; ; // Create a ROOT Tree; TTree tree(""T"",""An example of ROOT tree with a few branches"");; tree.Branch(""point"",&point,""x:y:z"");; tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);; ; Float_t px,py,pz;; ; // Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; const auto random = gRandom->::Rndm(1);; ; // Fill histograms; hpx.Fill(px);; hpxpy.Fill(px,py,1);; hprof.Fill(px,pz,1);; ; // Fill structures; point.x = 10*(random-1);; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;; ; // Fill the tree. For each event, save the 2 structures and 3 objects; // In this simple example, the objects hpx, hprof and hpxpy are slightly; // different from event to event. We expect a big compression factor!; tree->Fill();; }; // End of the loop; ; tree.Print();; ; // Save all objects in this file; hfile.Write();; ; // Close the file. Note that this is automatically done when you leave; // the application upon file destruction.; hfile.Close();; ; return 0;; }; mainint main()Definition Prototype.cxx:12; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; TFile.h; TH1.h; TH2.h; TProfile.h; TRandom.h; TTree.h; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:621; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDoubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:13658,simpl,simple,13658,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['simpl'],['simple']
Usability,"y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; POINT point;; EVENTN eventn;; ; // Create a ROOT Tree; TTree tree(""T"",""An example of ROOT tree with a few branches"");; tree.Branch(""point"",&point,""x:y:z"");; tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);; ; Float_t px,py,pz;; ; // Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; const auto random = gRandom->::Rndm(1);; ; // Fill histograms; hpx.Fill(px);; hpxpy.Fill(px,py,1);; hprof.Fill(px,pz,1);; ; // Fill structures; point.x = 10*(random-1);; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;; ; // Fill the tree. For each event, save the 2 structures and 3 objects; // In this simple example, the objects hpx, hprof and hpxpy are slightly; // different from event to event. We expect a big compression factor!; tree->Fill();; }; // End of the loop; ; tree.Print();; ; // Save all objects in this file; hfile.Write();; ; // Close the file. Note that this is automatically done when you leave; // the application upon file destruction.; hfile.Close();; ; return 0;; }; mainint main()Definition Prototype.cxx:12; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; TFile.h; TH1.h; TH2.h; TProfile.h; TRandom.h; TTree.h; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDoubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:13659,simpl,simple,13659,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['simpl'],['simple']
Usability,"y. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderRecording. class TRecorderRecording: public TRecorderState. Represents state of TRecorder when recording events. Function Members (Methods); public:. static TClass*Class(); voidFilterEventPave(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderRecording&operator=(const TRecorderRecording&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); voidRecordCmdEvent(const char* line); voidRecordExtraEvent(TString line, TTime extTime); voidRecordGuiBldEvent(Event_t* e); voidRecordGuiCNEvent(Event_t* e); voidRecordGuiEvent(Event_t* e, Window_t wid); voidRecordMousePosition(); voidRecordPave(const TObject* obj); voidRecordText(const TObject* obj); voidRegisterWindow(Window_t w); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidTRecorderState::ReplayStop(TRecorder*); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); voidStartEditing(); virtual voidStop(TRecorder* r, Bool_t guiCommand); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRecorderRecording(const TRecorderRecording&). protected:. voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); Bool_tStartRecording(); TRecorderRecording(TRecorder* r, const char* filename, Option_t* option, Window_t* w, Int_t winCount). private:. virtual~TRecorderRecording(); voidCopyEvent(Event_t* e, Window_t wid); Bool_tIsFiltered(Window_t id); voidSetTypeOfC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderRecording.html:749,Pause,Pause,749,root/html602/TRecorderRecording.html,https://root.cern,https://root.cern/root/html602/TRecorderRecording.html,4,"['Pause', 'Resume']","['Pause', 'Resume']"
Usability,"y.cxx. Member Function Documentation. ◆ DeleteItem(). void TGenCollectionProxy::Value::DeleteItem ; (; void * ; ptr). Definition at line 518 of file TGenCollectionProxy.cxx. ◆ IsValid(). Bool_t TGenCollectionProxy::Value::IsValid ; (; ). Return true if the Value has been properly initialized. ; Definition at line 511 of file TGenCollectionProxy.cxx. Member Data Documentation. ◆ fCase. UInt_t TGenCollectionProxy::Value::fCase. type of data of Value_type ; Definition at line 64 of file TGenCollectionProxy.h. ◆ fCtor. ROOT::NewFunc_t TGenCollectionProxy::Value::fCtor. Method cache for containee constructor. ; Definition at line 61 of file TGenCollectionProxy.h. ◆ fDelete. ROOT::DelFunc_t TGenCollectionProxy::Value::fDelete. Method cache for containee delete. ; Definition at line 63 of file TGenCollectionProxy.h. ◆ fDtor. ROOT::DesFunc_t TGenCollectionProxy::Value::fDtor. Method cache for containee destructor. ; Definition at line 62 of file TGenCollectionProxy.h. ◆ fKind. EDataType TGenCollectionProxy::Value::fKind. kind of ROOT-fundamental type ; Definition at line 67 of file TGenCollectionProxy.h. ◆ fProperties. UInt_t TGenCollectionProxy::Value::fProperties. Additional properties of the value type (kNeedDelete) ; Definition at line 65 of file TGenCollectionProxy.h. ◆ fSize. size_t TGenCollectionProxy::Value::fSize. fSize of the contained object ; Definition at line 68 of file TGenCollectionProxy.h. ◆ fType. TClassRef TGenCollectionProxy::Value::fType. TClass reference of Value_type in collection. ; Definition at line 66 of file TGenCollectionProxy.h. Collaboration diagram for TGenCollectionProxy::Value:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following files:; io/io/inc/TGenCollectionProxy.h; io/io/src/TGenCollectionProxy.cxx. TGenCollectionProxyValue. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTGenCollectionProxy_1_1Value.html:3452,Guid,Guide,3452,doc/master/structTGenCollectionProxy_1_1Value.html,https://root.cern,https://root.cern/doc/master/structTGenCollectionProxy_1_1Value.html,1,['Guid'],['Guide']
Usability,"y0, scale0); // Z position, offset and scale for first section; DefineSection(1, z1, x1, y1, scale1); // -''- secons section. DefineSection(nz-1, zn, xn, yn, scalen); // parameters for last section. *NOTES*; Currently navigation functionality not fully implemented (only Contains()).; Decomposition in concave polygons not implemented - drawing in solid mode; within x3d produces incorrect end-faces. Function Members (Methods); public:. TGeoXtru(); TGeoXtru(Int_t nz); TGeoXtru(Double_t* param); virtual~TGeoXtru(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; Bool_tDefinePolygon(Int_t nvert, const Double_t* xv, const Double_t* yv); virtual voidDefineSection(Int_t snum, Double_t z, Double_t x0 = 0., Double_t y0 = 0., Double_t scale = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoXtru.html:2382,Clear,Clear,2382,root/html528/TGeoXtru.html,https://root.cern,https://root.cern/root/html528/TGeoXtru.html,1,['Clear'],['Clear']
Usability,"y1) overrideTPavevirtual; SetY1NDC(Double_t y1)TPaveinlinevirtual; SetY2(Double_t y2) overrideTPavevirtual; SetY2NDC(Double_t y2)TPaveinlinevirtual; Streamer(TBuffer &) overrideTPavesTextvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TPavesTextinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TBox()TBox; TBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBox; TBox(const TBox &box)TBox; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TPave()TPave; TPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPave; TPave(const TPave &pave)TPave; TPavesText()TPavesText; TPavesText(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t npaves=5, Option_t *option=""br"")TPavesText; TPavesText(const TPavesText &pavestext)TPavesText; TPaveText()TPaveText; TPaveText(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option=""br"")TPaveText; TPaveText(const TPaveText &pavetext)TPaveText; UseCurrentStyle() overrideTPaveTextvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttText()TAttTextvirtual; ~TBox() overrideTBox; ~TObject()TObjectvirtual; ~TPave() overrideTPave; ~TPavesText() overrideTPavesText; ~TPaveText() overrideTPaveText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPavesText-members.html:12993,Guid,Guide,12993,doc/master/classTPavesText-members.html,https://root.cern,https://root.cern/doc/master/classTPavesText-members.html,1,['Guid'],['Guide']
Usability,y2D::fX. protected . ! Pointer to X array (managed externally) ; Definition at line 197 of file Delaunay2D.h. ◆ fXCellStep. double ROOT::Math::Delaunay2D::fXCellStep. protected . ! inverse denominator to calculate X cell = fNCells / (fXNmax - fXNmin) ; Definition at line 227 of file Delaunay2D.h. ◆ fXN. std::vector<double> ROOT::Math::Delaunay2D::fXN. protected . ! normalized X ; Definition at line 223 of file Delaunay2D.h. ◆ fXNmax. double ROOT::Math::Delaunay2D::fXNmax. protected . ! Maximum value of fXN ; Definition at line 202 of file Delaunay2D.h. ◆ fXNmin. double ROOT::Math::Delaunay2D::fXNmin. protected . ! Minimum value of fXN ; Definition at line 201 of file Delaunay2D.h. ◆ fY. const double* ROOT::Math::Delaunay2D::fY. protected . ! Pointer to Y array ; Definition at line 198 of file Delaunay2D.h. ◆ fYCellStep. double ROOT::Math::Delaunay2D::fYCellStep. protected . ! inverse denominator to calculate X cell = fNCells / (fYNmax - fYNmin) ; Definition at line 228 of file Delaunay2D.h. ◆ fYN. std::vector<double> ROOT::Math::Delaunay2D::fYN. protected . ! normalized Y ; Definition at line 224 of file Delaunay2D.h. ◆ fYNmax. double ROOT::Math::Delaunay2D::fYNmax. protected . ! Maximum value of fYN ; Definition at line 204 of file Delaunay2D.h. ◆ fYNmin. double ROOT::Math::Delaunay2D::fYNmin. protected . ! Minimum value of fYN ; Definition at line 203 of file Delaunay2D.h. ◆ fZ. const double* ROOT::Math::Delaunay2D::fZ. protected . ! Pointer to Z array ; Definition at line 199 of file Delaunay2D.h. ◆ fZout. double ROOT::Math::Delaunay2D::fZout. protected . ! Height for points lying outside the convex hull ; Definition at line 212 of file Delaunay2D.h. Libraries for ROOT::Math::Delaunay2D:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/Delaunay2D.h; math/mathcore/src/Delaunay2D.cxx. ROOTMathDelaunay2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html:13508,Guid,Guide,13508,doc/master/classROOT_1_1Math_1_1Delaunay2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html,1,['Guid'],['Guide']
Usability,"y::Density ; (; std::vector< Double_t > & ; Xarg, . Double_t & ; event_density . ). virtual . This function is not used in the decision tree like PDEFoam, instead FillHist() is used. ; Implements TMVA::PDEFoamDensityBase.; Definition at line 94 of file PDEFoamDecisionTreeDensity.cxx. ◆ FillHistograms(). void TMVA::PDEFoamDecisionTreeDensity::FillHistograms ; (; TMVA::Volume & ; volume, . std::vector< TH1D * > & ; hsig, . std::vector< TH1D * > & ; hbkg, . std::vector< TH1D * > & ; hsig_unw, . std::vector< TH1D * > & ; hbkg_unw . ). virtual . Fill the given histograms with signal and background events, which are found in the volume. ; Parameters:. volume - volume box to search in; hsig, hbkg, hsig_unw, hbkg_unw - histograms with weighted and unweighted signal and background events . Definition at line 111 of file PDEFoamDecisionTreeDensity.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamDecisionTreeDensity::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamDensityBase.; Definition at line 64 of file PDEFoamDecisionTreeDensity.h. ◆ Streamer(). virtual void TMVA::PDEFoamDecisionTreeDensity::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamDensityBase. ◆ StreamerNVirtual(). void TMVA::PDEFoamDecisionTreeDensity::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file PDEFoamDecisionTreeDensity.h. Member Data Documentation. ◆ fClass. UInt_t TMVA::PDEFoamDecisionTreeDensity::fClass. protected . Definition at line 50 of file PDEFoamDecisionTreeDensity.h. Libraries for TMVA::PDEFoamDecisionTreeDensity:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamDecisionTreeDensity.h; tmva/tmva/src/PDEFoamDecisionTreeDensity.cxx. TMVAPDEFoamDecisionTreeDensity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTreeDensity.html:15775,Guid,Guide,15775,doc/master/classTMVA_1_1PDEFoamDecisionTreeDensity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTreeDensity.html,1,['Guid'],['Guide']
Usability,"y; TGLVContainer*fLVContainerand its container; TGListView*fListViewdataset files list view; TGTextEntry*fLocationURLlocation URL text entry; TGCheckButton*fOverwriteDSetoverwrite DataSet; TGCheckButton*fOverwriteFilesoverwrite All Files; TGTextButton*fRemoveButtonRemove button; TList*fSkippedFilesList of skipped files; TGTextButton*fUploadButtonUpload button; Bool_tfUploading; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUploadDataSetDlg(TSessionViewer* gui, Int_t w, Int_t h); Create a Upload DataSet dialog box. Used to create and upload a dataset. ~TUploadDataSetDlg(); Delete chain dialog. void CloseWindow(); Close upload dataset dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for upload dataset dialog. void AddFiles(const char* fileName); Add File name(s) from the file location URL to the list view. void AddFiles(TList* fileList); Add File name(s) from the file location URL to the list view. void BrowseFiles(); Opens the TGFileDialog to allow user to select local file(s) to be added; in the list view of dataset files. void ClearFiles(); Clear content of the list view. void OnOverwriteDataset(Bool_t on); Notification of Overwrite Dataset check button. void OnOverwriteFiles(Bool_t on); Notification of Overwrite Files check button. void OnAppendFiles(Bool_t on); Notification of Append Files check button. void RemoveFile(); Remove the selected entry from the list view. void UploadDataSet(); Upload the dataset to the server. TUploadDataSetDlg(TSessionViewer* gui, Int_t w, Int_t h). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUploadDataSetDlg.html:24856,Clear,ClearFiles,24856,root/html604/TUploadDataSetDlg.html,https://root.cern,https://root.cern/root/html604/TUploadDataSetDlg.html,2,['Clear'],"['Clear', 'ClearFiles']"
Usability,"y;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:7071,simpl,simple,7071,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['simpl'],['simple']
Usability,"y=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIERUNIFORM"",; ValidationSize=0.2,; RandomSeed=1234,; InputLayout=str(ntime) + ""|"" + str(ninput),; Layout=rnnLayout,; TrainingStrategy=trainingString1,; Architecture=archString; ); ; ; ## Book TMVA fully connected dense layer models; if useTMVA_DNN:; # Method DL with Dense Layer; # Training strategies.; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,""; ""ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,MaxEpochs=20""; ""DropConfig=0.0+0.+0.+0.,Optimizer=ADAM:""; ) # + ""|"" + trainingString2; # General Options.; trainingString1.Append(archString); dnnName = ""TMVA_DNN""; factory.BookMethod(; dataloader,; TMVA.Types.kDL,; dnnName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; RandomSeed=0,; InputLayout=""1|1|"" + str(ntime * ninput),; Layout=""DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"",; TrainingStrategy=trainingString1; ); ; ; ## Book Keras recurrent models; ; # Book the different types of recurrent models in Keras (SimpleRNN, LSTM or GRU); ; ; if useKeras:; for i in range(3):; if use_rnn_type[i]:; modelName = ""model_"" + rnn_types[i] + "".h5""; trainedModelName = ""trained_"" + modelName; print(""Building recurrent keras model using a"", rnn_types[i], ""layer""); # create python script which can be executed; # create 2 conv2d layer + maxpool + dense; from tensorflow.keras.models import Sequential; from tensorflow.keras.optimizers import Adam; ; # from keras.initializers import TruncatedNormal; # from keras import initializations; from tensorflow.keras.layers import Input, Dense, Dropout, Flatten, SimpleRNN, GRU, LSTM, Reshape, BatchNormalization; ; model = Sequential(); model.add(Reshape((10, 30), input_shape=(10 * 30,))); # add recurrent neural network depending on type / Use option to return the full output; if rnn_types[i] == ""LSTM"":; model.add(LSTM(units=10, return_sequences=True))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:58827,Simpl,SimpleRNN,58827,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Simpl'],['SimpleRNN']
Usability,"y=0., Double_t ez=0.)Add a point with errorbars to the graph.Definition TGraph2DErrors.cxx:196; TGraph2DErrors::Printvoid Print(Option_t *chopt="""") const overridePrint 2D graph and errors values.Definition TGraph2DErrors.cxx:307; TGraph2DErrors::GetZminEDouble_t GetZminE() const overrideReturns the Z minimum with errors.Definition TGraph2DErrors.cxx:296; TGraph2DErrors::operator=TGraph2DErrors & operator=(const TGraph2DErrors &)Assignment operator Copy everything except list of functions.Definition TGraph2DErrors.cxx:167; TGraph2DErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:218; TGraph2DErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraph2DErrors.h:29; TGraph2DErrors::TGraph2DErrorsTGraph2DErrors()TGraph2DErrors default constructor.Definition TGraph2DErrors.cxx:80; TGraph2DErrors::GetYmaxEDouble_t GetYmaxE() const overrideReturns the Y maximum with errors.Definition TGraph2DErrors.cxx:263; TGraph2DErrors::GetXmaxEDouble_t GetXmaxE() const overrideReturns the X maximum with errors.Definition TGraph2DErrors.cxx:241; TGraph2DErrors::GetZmaxEDouble_t GetZmaxE() const overrideReturns the Z maximum with errors.Definition TGraph2DErrors.cxx:285; TGraph2DErrors::Setvoid Set(Int_t n) overrideSet number of points in the 2D graph.Definition TGraph2DErrors.cxx:345; TGraph2DErrors::RemovePointInt_t RemovePoint(Int_t ipoint)Deletes point number ipoint.Definition TGraph2DErrors.cxx:356; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; double; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; exDouble_t ex[n]Definition legend1.C:17. histhistincTGraph2DErrors.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8h_source.html:6804,Guid,Guide,6804,doc/master/TGraph2DErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8h_source.html,1,['Guid'],['Guide']
Usability,"y=true) constUse RooAbsCollection::snapshot(), but return as RooArgSet.Definition RooArgSet.h:154; RooArgSet::selectByNameRooArgSet * selectByName(const char *nameList, bool verbose=false) constUse RooAbsCollection::selectByName(), but return as RooArgSet.Definition RooArgSet.h:144; RooArgSet::selectCommonRooArgSet * selectCommon(const RooAbsCollection &refColl) constUse RooAbsCollection::selecCommon(), but return as RooArgSet.Definition RooArgSet.h:149; RooCategoryObject to represent discrete states.Definition RooCategory.h:28; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooRealVar::cloneTObject * clone(const char *newname) const overrideDefinition RooRealVar.h:48; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf508_listsetmanipDefinition rf508_listsetmanip.py:1; lTLine lDefinition textangle.C:4; ; [#0] WARNING:InputArguments -- The parameter 'b' with range [-10, 10] of the RooGaussian 'g' exceeds the safe range of (0, inf). Advise to limit its range.; sclone = (a,b,c,d,e,g); RooArgSet::sclone = (a,b,c,d,e,g); 1) RooRealVar:: a = 1; 2) RooRealVar:: b = 2; 3) RooRealVar:: c = 3 +/- 0.5; 4) RooRealVar:: d = 4; 5) RooCategory:: e = sig(idx = 0); ; 6) RooGaussian:: g = 0.882497; 1) 0x5569466c3940 RooRealVar:: a = 1 C L(-10 - 10) ""a""; 2) 0x556948df5f70 RooRealVar:: b = 2 C L(-10 - 10) ""b""; 3) 0x556946cacdc0 RooRealVar:: c = 3 +/- 0.5 L(-10 - 10) ""c""; 4) 0x5569492af150 RooRealVar:: d = 4 L(-10 - 10) ""d""; 5) 0x5569468860e0 RooCategory:: e = sig(idx = 0); ""e""; 6) 0x5569458db0b0 RooGaussian:: g[ x=x mean=a sigma=b ] = 0.882497 ""g""; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf508_listsetmanip.C. tutorialsroofitrf508_listsetmanip.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf508__listsetmanip_8C.html:8029,Guid,Guide,8029,doc/master/rf508__listsetmanip_8C.html,https://root.cern,https://root.cern/doc/master/rf508__listsetmanip_8C.html,1,['Guid'],['Guide']
Usability,"yCovarianceMatrix(). void RooMinimizer::applyCovarianceMatrix ; (; TMatrixDSym const & ; V). Apply results of given external covariance matrix. ; i.e. propagate its errors to all RRV parameter representations and give this matrix instead of the HESSE matrix at the next save() call ; Definition at line 732 of file RooMinimizer.cxx. ◆ calculateHessErrors(). bool RooMinimizer::calculateHessErrors ; (; ). private . Definition at line 880 of file RooMinimizer.cxx. ◆ calculateMinosErrors(). bool RooMinimizer::calculateMinosErrors ; (; ). private . Definition at line 911 of file RooMinimizer.cxx. ◆ Class(). static TClass * RooMinimizer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooMinimizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooMinimizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 247 of file RooMinimizer.h. ◆ clearStatusHistory(). void RooMinimizer::clearStatusHistory ; (; ). inline . Clears the Minuit status history. ; Definition at line 182 of file RooMinimizer.h. ◆ contour(). RooPlot * RooMinimizer::contour ; (; RooRealVar & ; var1, . RooRealVar & ; var2, . double ; n1 = 1.0, . double ; n2 = 2.0, . double ; n3 = 0.0, . double ; n4 = 0.0, . double ; n5 = 0.0, . double ; n6 = 0.0, . unsigned int ; npoints = 50 . ). Create and draw a TH2 with the error contours in the parameters var1 and var2. ; Parameters. [in]var1The first parameter (x axis). ; [in]var2The second parameter (y axis). ; [in]n1First contour. ; [in]n2Optional contour. 0 means don't draw. ; [in]n3Optional contour. 0 means don't draw. ; [in]n4Optional contour. 0 means don't draw. ; [in]n5Optional contour. 0 means don't draw. ; [in]n6Optional contour. 0 means don't draw. ; [in]npointsNumber of points for evaluating the contour. Up to six contours can be drawn using the arguments n1 to n6 to request the desired coverage in units of \( \si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:18562,clear,clearStatusHistory,18562,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['clear'],['clearStatusHistory']
Usability,"yD.h:48; TArrayD::GetArrayDouble_t * GetArray()Definition TArrayD.h:44; TArrayD::GetAtDouble_t GetAt(Int_t i) const overrideDefinition TArrayD.h:45; TArrayD::AtDouble_t At(Int_t i) constDefinition TArrayD.h:79; TArrayD::fArrayDouble_t * fArrayDefinition TArrayD.h:30; TArrayD::Copyvoid Copy(TArrayD &array) constDefinition TArrayD.h:42; TArrayD::Adoptvoid Adopt(Int_t n, Double_t *array)Adopt array arr into TArrayD, i.e.Definition TArrayD.cxx:81; TArrayD::Setvoid Set(Int_t n) overrideSet size of this array to n doubles.Definition TArrayD.cxx:106; TArrayD::~TArrayDvirtual ~TArrayD()Delete TArrayD object.Definition TArrayD.cxx:71; TArrayD::operator=TArrayD & operator=(const TArrayD &rhs)TArrayD assignment operator.Definition TArrayD.cxx:61; TArrayD::AddAtvoid AddAt(Double_t c, Int_t i)Set the double c value at position i in the array.Definition TArrayD.cxx:94; TArrayD::TArrayDTArrayD()Default TArrayD ctor.Definition TArrayD.cxx:26; TArrayD::Classstatic TClass * Class(); TArrayD::GetArrayconst Double_t * GetArray() constDefinition TArrayD.h:43; TArrayD::GetSumStat_t GetSum() constDefinition TArrayD.h:46; TArrayD::SetAtvoid SetAt(Double_t v, Int_t i) overrideDefinition TArrayD.h:51; TArrayD::Resetvoid Reset()Definition TArrayD.h:47; TArrayD::operator[]Double_t & operator[](Int_t i)Definition TArrayD.h:85; TArrayAbstract array base class.Definition TArray.h:31; TArray::fNInt_t fNDefinition TArray.h:38; TArray::BoundsOkBool_t BoundsOk(const char *where, Int_t at) constDefinition TArray.h:77; TArray::ReadArraystatic TArray * ReadArray(TBuffer &b, const TClass *clReq)Read TArray object from buffer.Definition TArray.cxx:41; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; double; int; nconst Int_t nDefinition legend1.C:16; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. corecontincTArrayD.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TArrayD_8h_source.html:5450,Guid,Guide,5450,doc/master/TArrayD_8h_source.html,https://root.cern,https://root.cern/doc/master/TArrayD_8h_source.html,1,['Guid'],['Guide']
Usability,"yD::AddAt(Double_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1D.html:2011,Clear,Clear,2011,root/html534/TH1D.html,https://root.cern,https://root.cern/root/html534/TH1D.html,1,['Clear'],['Clear']
Usability,"yD::AddAt(Double_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2D.html:2358,Clear,Clear,2358,root/html534/TH2D.html,https://root.cern,https://root.cern/root/html534/TH2D.html,1,['Clear'],['Clear']
Usability,"yD::AddAt(Double_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3D.html:2199,Clear,Clear,2199,root/html534/TH3D.html,https://root.cern,https://root.cern/root/html534/TH3D.html,1,['Clear'],['Clear']
Usability,yInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; TMVA::Config&operator=(const TMVA::Config&); voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. (unknown)(); TMVA::ConfigConfig(); TMVA::MsgLogger&Log() const. Data Members; public:. TMVA::Config::IONamesfIONamesCustomisable weight file properties; TMVA::Config::VariablePlottingfVariablePlottingCustomisable plotting properties. private:. Bool_tfDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; Bool_tfSilentno output at all; Bool_tfUseColoredConsolecoloured standard output; Bool_tfWriteOptionsReferenceif set true: Configurable objects write file with option reference; static TMVA::Config*fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); { fSilent = s; }. Bool_t WriteOptionsReference() const; { return fWriteOptionsReference; }. void SetWriteOptionsReference(Bool_t w); { fWriteOptionsReference = w; }. Bool_t DrawProgressBar() const; { return fDrawProgressBar; }. void SetDrawProgressBar(Bool_t d); { fDrawProgressBar = d; }. VariablePlotting& GetVariablePlotting(); { return fVariablePlotting; }. IONames& GetIONames(); { retur,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Config.html:1259,progress bar,progress bar,1259,root/html534/TMVA__Config.html,https://root.cern,https://root.cern/root/html534/TMVA__Config.html,1,['progress bar'],['progress bar']
Usability,"yL, const Double_t *eyH)Set ey values for point i.Definition TGraphMultiErrors.cxx:1885; TGraphMultiErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exL)Set exL value for point i.Definition TGraphMultiErrors.cxx:1853; TGraphMultiErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Int_t ne, const Double_t *eyH)Set eyH values for point i.Definition TGraphMultiErrors.cxx:1907; TGraphMultiErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphMultiErrors.cxx:1379; TGraphMultiErrors::fNYErrorsInt_t fNYErrorsThe amount of different y-errors.Definition TGraphMultiErrors.h:32; TGraphMultiErrors::fEyLstd::vector< TArrayD > fEyLTwo dimensional array of Y low errors.Definition TGraphMultiErrors.h:37; TGraphMultiErrors::GetErrorYDouble_t GetErrorY(Int_t i) const overrideGet error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1454; TGraphMultiErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphMultiErrors.cxx:933; TGraphMultiErrors::DoMergeBool_t DoMerge(const TGraph *tg) overrideProtected function to perform the merge operation of a graph with multiple asymmetric errors.Definition TGraphMultiErrors.cxx:838; TGraphMultiErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t i) const overrideGet high error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1530; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TVectorTTVectorT.Definition TVectorT.h:27; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; mTMarker mDefinition textangle.C:8. histhistincTGraphMultiErrors.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:26344,Guid,Guide,26344,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['Guid'],['Guide']
Usability,"yList.h. ◆ fFileName. TString TEntryList::fFileName. protected . name of the file, where the tree is ; Definition at line 39 of file TEntryList.h. ◆ fLastIndexQueried. Long64_t TEntryList::fLastIndexQueried. protected . ! used to optimize GetEntry() function from a loop ; Definition at line 44 of file TEntryList.h. ◆ fLastIndexReturned. Long64_t TEntryList::fLastIndexReturned. protected . ! used to optimize GetEntry() function from a loop ; Definition at line 45 of file TEntryList.h. ◆ fLists. TList* TEntryList::fLists. protected . a list of underlying entry lists for each tree of a chain ; Definition at line 31 of file TEntryList.h. ◆ fN. Long64_t TEntryList::fN. protected . number of entries in the list ; Definition at line 36 of file TEntryList.h. ◆ fNBlocks. Int_t TEntryList::fNBlocks. protected . number of TEntryListBlocks ; Definition at line 34 of file TEntryList.h. ◆ fReapply. bool TEntryList::fReapply. protected . If true, TTree::Draw will 'reapply' the original cut. ; Definition at line 49 of file TEntryList.h. ◆ fShift. bool TEntryList::fShift. protected . ! true when some sub-lists don't correspond to trees (when the entry list is used as input in TChain) ; Definition at line 46 of file TEntryList.h. ◆ fStringHash. ULong_t TEntryList::fStringHash. protected . ! Hash value of a string of treename and filename ; Definition at line 40 of file TEntryList.h. ◆ fTreeName. TString TEntryList::fTreeName. protected . name of the tree ; Definition at line 38 of file TEntryList.h. ◆ fTreeNumber. Int_t TEntryList::fTreeNumber. protected . ! the index of the tree in the chain (used when the entry list is used as input (TTree::SetEntryList()) ; Definition at line 41 of file TEntryList.h. Libraries for TEntryList:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TEntryList.h; tree/tree/src/TEntryList.cxx. TEntryList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryList.html:44399,Guid,Guide,44399,doc/master/classTEntryList.html,https://root.cern,https://root.cern/doc/master/classTEntryList.html,1,['Guid'],['Guide']
Usability,"yPrepStep = (1ULL << ( 3 )); };  . #include <TGHtml.h>. Inheritance diagram for TGHtmlLayoutContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlLayoutContext(). TGHtmlLayoutContext::TGHtmlLayoutContext ; (; ). Html Layout Context constructor. ; Definition at line 38 of file TGHtmlLayout.cxx. Member Function Documentation. ◆ ClearMarginStack(). void TGHtmlLayoutContext::ClearMarginStack ; (; SHtmlMargin_t ** ; ppMargin). protected . Clear a margin stack to reclaim memory. ; This routine just blindly pops everything off the stack. Typically used when the screen is cleared or the widget is deleted, etc. ; Definition at line 165 of file TGHtmlLayout.cxx. ◆ ClearObstacle(). void TGHtmlLayoutContext::ClearObstacle ; (; int ; mode). protected . Clear a wrap-around obstacle. ; The second option determines the precise behavior.; CLEAR_Left Clear all obstacles on the left.; CLEAR_Right Clear all obstacles on the right.; CLEAR_Both Clear all obstacles on both sides.; CLEAR_First Clear only the first obstacle on either side. ; Definition at line 733 of file TGHtmlLayout.cxx. ◆ ComputeMargins(). void TGHtmlLayoutContext::ComputeMargins ; (; int * ; pX, . int * ; pY, . int * ; pW . ). protected . Compute the current margins for layout. ; Three values are returned:; *pY The top edge of the area in which we can put ink. This takes into account any requested headroom.; *pX The left edge of the inkable area. The takes into account any margin requests active at vertical position specified in pLC->bottom.; *pW The width of the inkable area. This takes into account an margin requests that are active at the vertical position pLC->bottom. ; Definition at line 696 of file TGHtmlLayout.cxx. ◆ DoBreakMarkup(). TGHtmlElement * TGHtmlLayoutContext::DoBreakMarkup ; (; TGHtmlElement * ; p). protected . Break markup is any kind of markup that might force a line-break. ; This routine handles a sing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:12974,Clear,Clear,12974,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Clear'],['Clear']
Usability,"yROOT.so needs to be loaded first with gSystem->Load() before use. Refer back to the other example of the use of TPython that was given in “Access to Python from ROOT”.; To show in detail how Python access can be used, an example Python module is needed, as follows:; print('creating class MyPyClass ... '); class MyPyClass:; def __init__(self):; print('in MyPyClass.__init__'); self._browser = None; def gime(self, what):; return what; This module can now be loaded into a Cling session, the class used to instantiate objects, and their member functions called for showing how different types can cross:; root[] TPython::LoadMacro(""MyPyClass.py"");; creating class MyPyClass ...; root[] MyPyClass m;; in MyPyClass.__init__; root[] char* s = m.gime(""aap"");; root[] s; (char* 0x41ee7754)""aap""; Note that the LoadMacro() call makes the class automatically available, such that it can be used directly. Otherwise, a gROOT->GetClass() call is required first.; 19.1.5.5 Callbacks; The simplest way of setting a callback to Python from Cling, e.g. for a button, is by providing the execution string. See for example tutorials/pyroot/demo.py that comes with the ROOT installation:; # [..]; bar = ROOT.TControlBar('vertical','Demos'); bar.AddButton('Help on Demos',r'TPython::Exec(""execfile('demoshelp.py')"");','Click Here For Help on Running the Demos'); bar.AddButton('browser',r'TPython::Exec(""b = Tbrowser()"");','Start the ROOT browser'); # [..]; Here, the callback is a string that will be interpreted by Cling to call TPython::Exec(), which will, in turn, interpret and execute the string given to it. Note the use of raw strings (the ‘r’ in front of the second argument string), in order to remove the need of escaping the backslashes.; 19.1.5.6 Cling Commands; In interactive mode, the Python exception hook is used to mimic some of the Cling commands available. These are: .q, .!, .x, .L, .cd, .ls, .pwd, .? and .help. Note that .x translates to Python ‘execfile()’ and thus accepts only Python files",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1058989,simpl,simplest,1058989,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"ySelect (Int_t x, Int_t y);  Secondary selection. ;  ; Bool_t DoSelect (Int_t x, Int_t y);  Perform GL selection, picking objects overlapping WINDOW area described by 'rect'. ;  ; virtual void DoubleClicked ();  ; void DrawDebugInfo ();  If in debug mode draw camera aids and overall bounding box. ;  ; void DrawGuides ();  Draw reference marker and coordinate axes. ;  ; void EndScene () override;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Process event of type 'event' - one of EEventType types, occurring at window location px, py This is provided for use when embedding GL viewer into pad. ;  ; TGLAutoRotator * GetAutoRotator ();  Get the auto-rotator for this viewer. ;  ; TGLCameraOverlay * GetCameraOverlay () const;  ; Bool_t GetClipAutoUpdate () const;  ; TGLClipSet * GetClipSet () const;  ; TGLOverlayElement * GetCurrentOvlElm () const;  ; Int_t GetDev () const;  ; EDragAction GetDragAction () const;  ; Bool_t GetDrawCameraCenter ();  ; TGEventHandler * GetEventHandler () const;  ; Float_t GetFader () const;  ; TGedEditor * GetGedEditor () const;  ; TGLWidget * GetGLWidget ();  ; void GetGuideState (Int_t &axesType, Bool_t &axesDepthTest, Bool_t &referenceOn, Double_t *referencePos) const;  Fetch the state of guides (axes & reference markers) into arguments. ;  ; Bool_t GetIgnoreSizesOnUpdate () const;  ; TGLLightSet * GetLightSet () const;  ; Float_t GetLineScale () const;  ; Float_t GetMaxSceneDrawTimeHQ () const;  ; Float_t GetMaxSceneDrawTimeLQ () const;  ; TGLOvlSelectRecord & GetOvlSelRec ();  ; const char * GetPictureFileName () const;  ; TImage * GetPictureUsingBB ();  Returns current image. ;  ; TImage * GetPictureUsingFBO (Int_t w, Int_t h, Float_t pixel_object_scale=0);  Returns current image. ;  ; Float_t GetPointScale () const;  ; EPushAction GetPushAction () const;  ; Bool_t GetResetCamerasOnUpdate () const;  ; const TGLPhysicalShape * GetSelected () const;  Return selected physical shape. ;  ; TGLSelectRecord & GetSelRec ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:4559,guid,guides,4559,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,3,['guid'],['guides']
Usability,"y_no, Double_t offset=0, Option_t *option="""");  Add a division node to the list of nodes. ;  ; void Browse (TBrowser *b) override;  How to browse a volume. ;  ; Double_t Capacity () const;  Computes the capacity of this [cm^3] as the capacity of its shape. ;  ; virtual void cd (Int_t inode) const;  Actualize matrix of node indexed <inode> ;  ; void CheckGeometry (Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""") const;  Overlap checking tool. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ;  ; void CheckShapes ();  check for negative parameters in shapes. ;  ; void CleanAll ();  Clean data of the volume. ;  ; void ClearNodes ();  ; void ClearShape ();  Clear the shape of this volume from the list held by the current manager. ;  ; virtual void ClearThreadData () const;  ; void CloneNodesAndConnect (TGeoVolume *newmother) const;  Clone the array of nodes. ;  ; virtual TGeoVolume * CloneVolume () const;  Clone this volume. ;  ; Bool_t Contains (const Double_t *point) const;  ; Int_t CountNodes (Int_t nlevels=1000, Int_t option=0);  Count total number of subnodes starting from this volume, nlevels down. ;  ; virtual void CreateThreadData (Int_t nthreads);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this volume ;  ; void Draw (Option_t *option="""") override;  draw top volume according to option ;  ; virtual void DrawOnly (Option_t *option="""");  draw only this volume ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this volume. ;  ; Int_t Export (const char *filename, const char *name="""", Option_t *option="""");  Export this volume to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:11808,Clear,ClearNodes,11808,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,3,['Clear'],"['Clear', 'ClearNodes', 'ClearShape']"
Usability,"y_no, Double_t offset=0, Option_t *option="""");  Add a division node to the list of nodes. ;  ; void Browse (TBrowser *b) override;  How to browse a volume. ;  ; Double_t Capacity () const;  Computes the capacity of this [cm^3] as the capacity of its shape. ;  ; virtual void cd (Int_t inode) const;  Actualize matrix of node indexed <inode> ;  ; void CheckGeometry (Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""") const;  Overlap checking tool. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ;  ; void CheckShapes ();  check for negative parameters in shapes. ;  ; void CleanAll ();  Clean data of the volume. ;  ; void ClearNodes ();  ; void ClearShape ();  Clear the shape of this volume from the list held by the current manager. ;  ; void CloneNodesAndConnect (TGeoVolume *newmother) const;  Clone the array of nodes. ;  ; Bool_t Contains (const Double_t *point) const;  ; Int_t CountNodes (Int_t nlevels=1000, Int_t option=0);  Count total number of subnodes starting from this volume, nlevels down. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this volume ;  ; void Draw (Option_t *option="""") override;  draw top volume according to option ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this volume. ;  ; Int_t Export (const char *filename, const char *name="""", Option_t *option="""");  Export this volume to a file. ;  ; Bool_t FindMatrixOfDaughterVolume (TGeoVolume *vol) const;  Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix with its global matrix. ;  ; TGeoNode * FindNode (const char *name) const;  search a da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:4056,Clear,ClearNodes,4056,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,3,['Clear'],"['Clear', 'ClearNodes', 'ClearShape']"
Usability,"ybridCalculator: public RooStats::HypoTestCalculator, public TNamed. HybridCalculator class: this class is a fresh rewrite in RooStats of; 	RooStatsCms/LimitCalculator developped by D. Piparo and G. Schott; Authors: D. Piparo, G. Schott - Universitaet Karlsruhe. The class is born from the need to have an implementation of the CLs; method that could take advantage from the RooFit Package.; The basic idea is the following:; - Instantiate an object specifying a signal+background model, a background model and a dataset.; - Perform toy MC experiments to know the distributions of -2lnQ; - Calculate the CLsb and CLs values as ""integrals"" of these distributions. The class allows the user to input models as RooAbsPdf ( TH1 object could be used; by using the RooHistPdf class); The pdfs must be ""extended"": for more information please refer to; http://roofit.sourceforge.net). The dataset can be entered as a; RooAbsData objects. Unlike the TLimit Class a complete MC generation is performed at each step; and not a simple Poisson fluctuation of the contents of the bins.; Another innovation is the treatment of the nuisance parameters. The user; can input in the constructor nuisance parameters.; To include the information that we have about the nuisance parameters a prior; PDF (RooAbsPdf) should be specified. Different test statistic can be used (likelihood ratio, number of events or; profile likelihood ratio. The default is the likelihood ratio.; See the method SetTestStatistic. The number of toys to be generated is controlled by SetNumberOfToys(n). The result of the calculations is returned as a HybridResult object pointer. see also the following interesting references:; - Alex Read, ""Presentation of search results: the CLs technique"",; Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; see http://www.iop.org/EJ/abstract/0954-3899/28/10/313/. - Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)"" CERN 2000-005 (30 May 2000). - V. Bartsch, G.Quas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:1328,simpl,simple,1328,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['simpl'],['simple']
Usability,"ycle one and add it to the prefetchBlocks list. ; Definition at line 214 of file TFilePrefetch.cxx. ◆ ReadBuffer(). Bool_t TFilePrefetch::ReadBuffer ; (; char * ; buf, . Long64_t ; offset, . Int_t ; len . ). Return a prefetched element. ; Definition at line 178 of file TFilePrefetch.cxx. ◆ ReadListOfBlocks(). void TFilePrefetch::ReadListOfBlocks ; (; ). Get blocks specified in prefetchBlocks. ; Definition at line 128 of file TFilePrefetch.cxx. ◆ SaveBlockInCache(). void TFilePrefetch::SaveBlockInCache ; (; TFPBlock * ; block). Save the block content in cache. ; Definition at line 474 of file TFilePrefetch.cxx. ◆ SetCache(). Bool_t TFilePrefetch::SetCache ; (; const char * ; path). Set the path of the cache directory. ; Definition at line 526 of file TFilePrefetch.cxx. ◆ SetFile(). void TFilePrefetch::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). Change the file. ; When prefetching is enabled we also need to:; make sure the async thread is not doing any work; clear all blocks from prefetching and read list; reset the file pointer . Definition at line 317 of file TFilePrefetch.cxx. ◆ Streamer(). void TFilePrefetch::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFilePrefetch::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file TFilePrefetch.h. ◆ SumHex(). Int_t TFilePrefetch::SumHex ; (; const char * ; hex). Sum up individual hex values to obtain a decimal value. ; Definition at line 381 of file TFilePrefetch.cxx. ◆ ThreadProc(). TThread::VoidRtnFunc_t TFilePrefetch::ThreadProc ; (; void * ; arg). staticprivate . Execution loop of the consumer thread. ; Definition at line 365 of file TFilePrefetch.cxx. ◆ ThreadStart(). Int_t TFilePrefetch::ThreadStart ; (; ). Used to start the consumer thread. ; Definition at line 349 of file TFilePrefetch.cxx. ◆ WaitFinishPrefetch(). void TFilePrefet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFilePrefetch.html:17898,clear,clear,17898,doc/master/classTFilePrefetch.html,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html,1,['clear'],['clear']
Usability,"yer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerSuperMaster.html:20248,feedback,feedback,20248,root/html604/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html,2,['feedback'],['feedback']
Usability,"yer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-04 16:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerSuperMaster.html:19373,feedback,feedback,19373,root/html534/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html534/TProofPlayerSuperMaster.html,2,['feedback'],['feedback']
Usability,"yer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSuperMaster.html:20038,feedback,feedback,20038,root/html602/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSuperMaster.html,2,['feedback'],['feedback']
Usability,"yerData ;  ;  LayerData (const_iterator_type itInputBegin, const_iterator_type itInputEnd, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (LayerData &&other);  move c'tor of LayerData ;  ;  LayerData (size_t inputSize);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, iterator_type itGradientBegin, std::shared_ptr< std::function< double(double)> > activationFunction, std::shared_ptr< std::function< double(double)> > inverseActivationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, std::shared_ptr< std::function< double(double)> > activationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  ~LayerData ();  ; std::shared_ptr< std::function< double(double)> > activationFunction () const;  ; void clear ();  clear the values and the deltas ;  ; void clearDropOut ();  clear the drop-out-data for this layer ;  ; iterator_type deltasBegin ();  returns iterator to the begin of the deltas (back-propagation) ;  ; const_iterator_type deltasBegin () const;  returns const iterator to the begin of the deltas (back-propagation) ;  ; iterator_type deltasEnd ();  returns iterator to the end of the deltas (back-propagation) ;  ; const_iterator_type deltasEnd () const;  returns const iterator to the end of the deltas (back-propagation) ;  ; const_dropout_iterator dropOut () const;  return the begin of the drop-out information ;  ; iterator_type gradientsBegin ();  returns iterator to the begin of the gradients ;  ; const_iterator_type gradientsBegin () const;  returns const iterator to the begin of the gradients ;  ; bool hasDropOut () const;  has this layer drop-out turned on? ;  ; std::shared_ptr< std::function< double(double)> > inverseActivationFunction () const;  ; ModeOutputValues outputMode () const;  returns the output mode ;  ; container_type probabilities ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:2000,clear,clear,2000,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['clear'],['clear']
Usability,"yield depending on M:; 0x55734057d9d0 RooAddPdf::model_Sample2 = 1000.67/1 [Auto,Clean] ; 0x55734180e980/V- RooGaussian::gauss_Sample2 = 0 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x55734182e1b0/V- RooRealVar::meanG_Sample2 = 100; 0x7ffc956b4810/V- RooRealVar::sigmaG = 3; 0x7ffc956b7628/V- RooFormulaVar::yieldSig_Sample2 = 0.5 [Auto,Clean] ; 0x7ffc956b66a0/V- RooRealVar::M = 1; 0x7ffc956b42c8/V- RooPolynomial::linear = 1501 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x7ffc956b4bf8/V- RooRealVar::pol1 = 1; 0x7ffc956b4fe0/V- RooRealVar::yieldBkg = 1; ; PDF 3 with a free yield:; 0x5573405818d0 RooAddPdf::model_Sample3 = 750.5/1 [Auto,Clean] ; 0x557340560070/V- RooGaussian::gauss_Sample3 = 0 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x55734055f270/V- RooRealVar::meanG_Sample3 = 100; 0x7ffc956b4810/V- RooRealVar::sigmaG = 3; 0x55734063c570/V- RooRealVar::yieldSig_Sample3 = 1; 0x7ffc956b42c8/V- RooPolynomial::linear = 1501 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x7ffc956b4bf8/V- RooRealVar::pol1 = 1; 0x7ffc956b4fe0/V- RooRealVar::yieldBkg = 1; ; The following leaves have been created automatically while customising:; 1) RooRealVar:: meanG_Sample1 = 100; 2) RooRealVar:: meanG_Sample2 = 100; 3) RooRealVar:: meanG_Sample3 = 100; 4) RooRealVar:: yieldSig_Sample3 = 1; ; The following leaves have been used while customising; (partial overlap with the set of automatically created leaves.; a new customiser for a different PDF could reuse them if necessary.):; 1) RooFormulaVar:: yieldSig_Sample1 = 0.29755; 2) RooFormulaVar:: yieldSig_Sample2 = 0.5; 3) RooRealVar:: meanG_Sample1 = 200; 4) RooRealVar:: meanG_Sample2 = 300; 5) RooRealVar:: meanG_Sample3 = 100; 6) RooRealVar:: yieldSig_Sample3 = 1; AuthorStephan Hageboeck, CERN ; Definition in file rf514_RooCustomizer.C. tutorialsroofitrf514_RooCustomizer.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf514__RooCustomizer_8C.html:9258,Guid,Guide,9258,doc/master/rf514__RooCustomizer_8C.html,https://root.cern,https://root.cern/doc/master/rf514__RooCustomizer_8C.html,1,['Guid'],['Guide']
Usability,"ying a specific operation to two prototypes. ;  ;  TMatrixTSparse (const TMatrixTSparse< Element > &another);  ;  TMatrixTSparse (EMatrixCreatorsOp1 op, const TMatrixTSparse< Element > &prototype);  Create a matrix applying a specific operation to the prototype. ;  ;  TMatrixTSparse (Int_t nrows, Int_t ncols);  Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ;  ;  TMatrixTSparse (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t *rowptr, Int_t *col, Element *data);  Space is allocated for row/column indices and data. ;  ;  TMatrixTSparse (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros, Int_t *row, Int_t *col, Element *data);  Space is allocated for row/column indices and data. ;  ;  TMatrixTSparse (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros=0);  Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ;  ;  ~TMatrixTSparse () override;  ; TClass * Class ();  ; void Clear (Option_t *="""") override;  ; Element ColNorm () const override;  Column matrix norm, MAX{ SUM{ |M(i,j)|, over i}, over j}. ;  ; void ExtractRow (Int_t row, Int_t col, Element *v, Int_t n=-1) const override;  Store in array v, n matrix elements of row rown starting at column coln. ;  ; const Int_t * GetColIndexArray () const override;  ; Int_t * GetColIndexArray () override;  ; void GetMatrix2Array (Element *data, Option_t *="""") const override;  Copy matrix data to array . It is assumed that array is of size >= fNelems. ;  ; const Element * GetMatrixArray () const override;  ; Element * GetMatrixArray () override;  ; const Int_t * GetRowIndexArray () const override;  ; Int_t * GetRowIndexArray () override;  ; TMatrixTSparse< Element > GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t *option=""S"") const;  ; TMatrixTBase< Element > & GetSub (Int_t row_lwb, Int_t row_upb, Int_t col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:7009,Clear,Clear,7009,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['Clear'],['Clear']
Usability,"yle format descriptor and return a TString.Definition TString.cxx:2378; TString::IsWhitespaceBool_t IsWhitespace() constDefinition TString.h:415; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TVirtualFitterAbstract Base Class for Fitting.Definition TVirtualFitter.h:29; TVirtualFitter::GetFitterstatic TVirtualFitter * GetFitter()static: return the current FitterDefinition TVirtualFitter.cxx:209; TVirtualFitter::GetUserFuncvirtual TObject * GetUserFunc() constDefinition TVirtualFitter.h:84; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::GetListOfPrimitivesvirtual TList * GetListOfPrimitives() const =0; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; TVirtualPad::Dividevirtual void Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0)=0; TVirtualPad::Classstatic TClass * Class(); TVirtualPad::Clearvoid Clear(Option_t *option="""") override=0; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ROOT::Fit::FitObjectTFitResultPtr FitObject(TH1 *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)fitting function for a TH1 (called from TH1::Fit)Definition HFitImpl.cxx:972; ROOT::Fit::FitOptionsMakevoid FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption)Decode list of options into fitOption.Definition HFitImpl.cxx:685; ROOT::Fit::EFitObjectType::kGraph@ kGraph; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::Log10Double_t Log10(Double_t x)Returns the common (bas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:70177,Clear,Clearvoid,70177,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"yle.Definition TAttFill.h:39; TAttLine::SetLineStylevirtual void SetLineStyle(Style_t lstyle)Set the line style.Definition TAttLine.h:42; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::AddLinevirtual TLine * AddLine(Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0)Add a new graphics line to this pavetext.Definition TPaveText.cxx:177; TPaveText::Drawvoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree_8C.html:11593,simpl,simple,11593,doc/master/tree_8C.html,https://root.cern,https://root.cern/doc/master/tree_8C.html,1,['simpl'],['simple']
Usability,"yle_tTAttFill::fFillStylefill area style; TGeoPatternFinder*fFinderfinder object for divisions; UInt_tTGeoAtt::fGeoAttoption flags; TGeoManager*fGeoManager! pointer to TGeoManager owning this volume; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TGeoMedium*fMediumtracking medium; TStringTNamed::fNameobject identifier; TObjArray*fNodesarray of nodes inside this volume; Int_tfNtotaltotal number of physical nodes; Int_tfNumbervolume serial number in the list of volumes; TStringfOption! option - if any; Int_tfRefCountreference counter; TGeoShape*fShapeshape; TStringTNamed::fTitleobject title; TGeoExtension*fUserExtension! Transient user-defined extension to volumes; TGeoVoxelFinder*fVoxelsfinder object for bounding boxes; static TGeoMedium*fgDummyMedium! dummy medium. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void CreateDummyMedium(); Create a dummy medium. void ClearThreadData() const. void CreateThreadData(Int_t nthreads). TGeoMedium * DummyMedium(). TGeoVolume(); dummy constructor. TGeoVolume(const char* name, const TGeoShape* shape, const TGeoMedium* med = 0); default constructor. TGeoVolume(const TGeoVolume& ); copy constructor. TGeoVolume& operator=(const TGeoVolume& ); assignment operator. ~TGeoVolume(); Destructor. void Browse(TBrowser* b); How to browse a volume. Double_t Capacity() const; Computes the capacity of this [cm^3] as the capacity of its shape.; In case of assemblies, the capacity is computed as the sum of daughter's capacities. void CheckGeometry(Int_t nrays = 1, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0) const; Shoot nrays with random directions from starting point (startx, starty, startz); in the reference frame of this volume. Track each ray until exiting geometry, then; shoot backwards from exiting point and compare boundary crossing points. void CheckOverlaps(Double_t ovlp = 0.1, Option_t* option = """") cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:31780,Clear,ClearThreadData,31780,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,1,['Clear'],['ClearThreadData']
Usability,"yle_tTAttFill::fFillStylefill area style; TGeoPatternFinder*fFinderfinder object for divisions; UInt_tTGeoAtt::fGeoAttoption flags; TGeoManager*fGeoManager! pointer to TGeoManager owning this volume; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TGeoMedium*fMediumtracking medium; TStringTNamed::fNameobject identifier; TObjArray*fNodesarray of nodes inside this volume; Int_tfNtotaltotal number of physical nodes; Int_tfNumbervolume serial number in the list of volumes; TStringfOption! option - if any; Int_tfRefCountreference counter; TGeoShape*fShapeshape; TStringTNamed::fTitleobject title; TGeoExtension*fUserExtension! Transient user-defined extension to volumes; TGeoVoxelFinder*fVoxelsfinder object for bounding boxes; static TGeoMedium*fgDummyMedium! dummy medium. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void CreateDummyMedium(); Create a dummy medium. void ClearThreadData() const. void CreateThreadData(Int_t nthreads). TGeoMedium * DummyMedium(). TGeoVolume(); dummy constructor. TGeoVolume(const char* name, const TGeoShape* shape, const TGeoMedium* med = 0); default constructor. TGeoVolume(const TGeoVolume& ); copy constructor. TGeoVolume& operator=(const TGeoVolume& ); assignment operator. ~TGeoVolume(); Destructor. void Browse(TBrowser* b); How to browse a volume. Double_t Capacity() const; Computes the capacity of this [cm^3] as the capacity of its shape.; In case of assemblies, the capacity is computed as the sum of daughter's capacities. void CheckGeometry(Int_t nrays = 1, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0) const; Shoot nrays with random directions from starting point (startx, starty, startz); in the reference frame of this volume. Track each ray until exiting geometry, then; shoot backwards from exiting point and compare boundary crossing points. void CheckOverlaps(Double_t ovlp = 0.10000000000000001, Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoVolume.html:33341,Clear,ClearThreadData,33341,root/html602/TGeoVolume.html,https://root.cern,https://root.cern/root/html602/TGeoVolume.html,2,['Clear'],['ClearThreadData']
Usability,"ym<Element> Use(Int_t nrows, const float* data) const; { return Use(0,nrows-1,data); }. template <class Element> inline TMatrixTSym<Element> &TMatrixTSym<Element> Use(TMatrixTSym<float>& a); { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline const TMatrixTSym<Element> &TMatrixTSym<Element> Use(const TMatrixTSym<float>& a) const; { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline TMatrixTSym<Element> TMatrixTSym<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixTSym<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixTSym<Element> operator()(Int_t rown, Int_t coln). void Mult(const TMatrixTSym<float>& a); { TMult(a); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). Bool_t IsSymmetric() const; { return kTRUE; }. TMatrixTSym <Element> & Use(Int_t row_lwb, Int_t row_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixTSym.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_float_.html:22278,Clear,Clear,22278,root/html528/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_float_.html,1,['Clear'],['Clear']
Usability,"ym<Element> Use(Int_t nrows, const float* data) const; { return Use(0,nrows-1,data); }. template <class Element> inline TMatrixTSym<Element> &TMatrixTSym<Element> Use(TMatrixTSym<float>& a); { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline const TMatrixTSym<Element> &TMatrixTSym<Element> Use(const TMatrixTSym<float>& a) const; { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline TMatrixTSym<Element> TMatrixTSym<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixTSym<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixTSym<Element> operator()(Int_t rown, Int_t coln). void Mult(const TMatrixTSym<float>& a); { TMult(a); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). Bool_t IsSymmetric() const; { return kTRUE; }. TMatrixTSym <Element> & Use(Int_t row_lwb, Int_t row_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixTSym.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMatrixTSym_float_.html:22347,Clear,Clear,22347,root/html530/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html530/TMatrixTSym_float_.html,1,['Clear'],['Clear']
Usability,"ym<Element> Use(Int_t nrows, const float* data) const; { return Use(0,nrows-1,data); }. template <class Element> inline TMatrixTSym<Element> &TMatrixTSym<Element> Use(TMatrixTSym<float>& a); { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline const TMatrixTSym<Element> &TMatrixTSym<Element> Use(const TMatrixTSym<float>& a) const; { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline TMatrixTSym<Element> TMatrixTSym<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixTSym<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixTSym<Element> operator()(Int_t rown, Int_t coln). void Mult(const TMatrixTSym<float>& a); { TMult(a); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). Bool_t IsSymmetric() const; { return kTRUE; }. TMatrixTSym <Element> & Use(Int_t row_lwb, Int_t row_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixTSym.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMatrixTSym_float_.html:22347,Clear,Clear,22347,root/html532/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html532/TMatrixTSym_float_.html,1,['Clear'],['Clear']
Usability,"ymin)*cy));; 11127 xx[0] = xaxis->GetXmax();; 11128 view->WCtoNDC(xx,u);; 11129 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11130 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11131 ; 11132 xx[0] = xaxis->GetXmin();; 11133 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11134 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11135 view->WCtoNDC(xx,u);; 11136 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11137 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11138 xx[0] = xaxis->GetXmax();; 11139 view->WCtoNDC(xx,u);; 11140 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11141 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11142 ; 11143 xx[0] = xaxis->GetXmin();; 11144 xx[2] = zaxis->GetBinCenter(binz);; 11145 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11146 view->WCtoNDC(xx,u);; 11147 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11148 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11149 xx[0] = xaxis->GetXmax();; 11150 view->WCtoNDC(xx,u);; 11151 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11152 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11153 ; 11154 endface1[0].SetX(line1[0].GetX());; 11155 endface1[0].SetY(line1[0].GetY());; 11156 endface1[1].SetX(line2[0].GetX());; 11157 endface1[1].SetY(line2[0].GetY());; 11158 endface1[2].SetX(line3[0].GetX());; 11159 endface1[2].SetY(line3[0].GetY());; 11160 endface1[3].SetX(line4[0].GetX());; 11161 endface1[3].SetY(line4[0].GetY());; 11162 endface1[4].SetX(line1[0].GetX());; 11163 endface1[4].SetY(line1[0].GetY());; 11164 ; 11165 endface2[0].SetX(line1[1].GetX());; 11166 endface2[0].SetY(line1[1].GetY());; 11167 endface2[1].SetX(line2[1].GetX());; 11168 endface2[1].SetY(line2[1].GetY());; 11169 endface2[2].SetX(line3[1].GetX());; 11170 endface2[2].SetY(line3[1].GetY());; 11171 endface2[3].SetX(line4[1].GetX());; 11172 endface2[3].SetY(line4[1].GetY());; 11173 endface2[4].SetX(line1[1].GetX());; 11174 endface2[4].SetY(line1[1].GetY());; 11175 ; 11176 gVirtualX->DrawPolyLine(2,line2);; 11177 gVirtualX->DrawPolyLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:403574,ux,uxmin,403574,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"ymin)*cy));; 11242 xx[1] = yaxis->GetXmax();; 11243 view->WCtoNDC(xx,u);; 11244 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11245 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11246 ; 11247 xx[1] = yaxis->GetXmin();; 11248 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11249 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11250 view->WCtoNDC(xx,u);; 11251 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11252 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11253 xx[1] = yaxis->GetXmax();; 11254 view->WCtoNDC(xx,u);; 11255 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11256 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11257 ; 11258 xx[1] = yaxis->GetXmin();; 11259 xx[2] = zaxis->GetBinCenter(binz);; 11260 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11261 view->WCtoNDC(xx,u);; 11262 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11263 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11264 xx[1] = yaxis->GetXmax();; 11265 view->WCtoNDC(xx,u);; 11266 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11267 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11268 ; 11269 endface1[0].SetX(line1[0].GetX());; 11270 endface1[0].SetY(line1[0].GetY());; 11271 endface1[1].SetX(line2[0].GetX());; 11272 endface1[1].SetY(line2[0].GetY());; 11273 endface1[2].SetX(line3[0].GetX());; 11274 endface1[2].SetY(line3[0].GetY());; 11275 endface1[3].SetX(line4[0].GetX());; 11276 endface1[3].SetY(line4[0].GetY());; 11277 endface1[4].SetX(line1[0].GetX());; 11278 endface1[4].SetY(line1[0].GetY());; 11279 ; 11280 endface2[0].SetX(line1[1].GetX());; 11281 endface2[0].SetY(line1[1].GetY());; 11282 endface2[1].SetX(line2[1].GetX());; 11283 endface2[1].SetY(line2[1].GetY());; 11284 endface2[2].SetX(line3[1].GetX());; 11285 endface2[2].SetY(line3[1].GetY());; 11286 endface2[3].SetX(line4[1].GetX());; 11287 endface2[3].SetY(line4[1].GetY());; 11288 endface2[4].SetX(line1[1].GetX());; 11289 endface2[4].SetY(line1[1].GetY());; 11290 ; 11291 gVirtualX->DrawPolyLine(2,line2);; 11292 gVirtualX->DrawPolyLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:408233,ux,uxmin,408233,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"ymin)*cy));; 11356 xx[2] = zaxis->GetXmax();; 11357 view->WCtoNDC(xx,u);; 11358 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11359 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11360 ; 11361 xx[2] = zaxis->GetXmin();; 11362 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11363 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11364 view->WCtoNDC(xx,u);; 11365 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11366 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11367 xx[2] = zaxis->GetXmax();; 11368 view->WCtoNDC(xx,u);; 11369 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11370 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11371 ; 11372 xx[2] = zaxis->GetXmin();; 11373 xx[1] = yaxis->GetBinCenter(biny);; 11374 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11375 view->WCtoNDC(xx,u);; 11376 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11377 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11378 xx[2] = zaxis->GetXmax();; 11379 view->WCtoNDC(xx,u);; 11380 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11381 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11382 ; 11383 endface1[0].SetX(line1[0].GetX());; 11384 endface1[0].SetY(line1[0].GetY());; 11385 endface1[1].SetX(line2[0].GetX());; 11386 endface1[1].SetY(line2[0].GetY());; 11387 endface1[2].SetX(line3[0].GetX());; 11388 endface1[2].SetY(line3[0].GetY());; 11389 endface1[3].SetX(line4[0].GetX());; 11390 endface1[3].SetY(line4[0].GetY());; 11391 endface1[4].SetX(line1[0].GetX());; 11392 endface1[4].SetY(line1[0].GetY());; 11393 ; 11394 endface2[0].SetX(line1[1].GetX());; 11395 endface2[0].SetY(line1[1].GetY());; 11396 endface2[1].SetX(line2[1].GetX());; 11397 endface2[1].SetY(line2[1].GetY());; 11398 endface2[2].SetX(line3[1].GetX());; 11399 endface2[2].SetY(line3[1].GetY());; 11400 endface2[3].SetX(line4[1].GetX());; 11401 endface2[3].SetY(line4[1].GetY());; 11402 endface2[4].SetX(line1[1].GetX());; 11403 endface2[4].SetY(line1[1].GetY());; 11404 ; 11405 gVirtualX->DrawPolyLine(2,line2);; 11406 gVirtualX->DrawPolyLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:412883,ux,uxmin,412883,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object.; As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. It already has the object internally cached .; The object falls outside; some 'interest' limits of the viewer camera.; The object is too small to; be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should; not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad; repaint; at; present),; and; thus; collect; these; objects if; the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. Physical IDs; TVirtualVie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:6755,simpl,simply,6755,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,13,['simpl'],['simply']
Usability,"you can use TTree::MakeClass. It creates a class that loops over the trees entries one by one. You can then expand it to do the logic of your analysis.; The TTree::MakeSelector is the recommended method for ROOT data analysis. It is especially important for large data set in a parallel processing configuration where the analysis is distributed over several processors and you can specify which entries to send to each processor. With MakeClass the user has control over the event loop, with MakeSelectorthe tree is in control of the event loop.; 12.20 Simple Analysis Using TTree::Draw; We will use the tree in cernstaff.root that was made by the macro in $ROOTSYS/tutorials/tree/staff.C.; First, open the file and lists its contents.; root[] TFile f (""cernstaff.root""); root[] f.ls(); TFile** cernstaff.root; TFile* cernstaff.root; KEY: TTree T;1 staff data from ascii file; We can see the TTree“T” in the file. We will use it to experiment with the TTree::Draw method, so let’s create a pointer to it:; root[] TTree *MyTree = T; Cling allows us to get simply the object by using it. Here we define a pointer to a TTree object and assign it the value of “T”, the TTree in the file. Cling looks for an object named “T” in the current ROOT file and returns it (this assumes that “T” has not previously been used to declare a variable or function).; In contrast, in compiled code, you can use:; TTree *MyTree;f.GetObject(""T"",MyTree);; To show the different Draw options, we create a canvas with four sub-pads. We will use one sub-pad for each Draw command.; root[] TCanvas *myCanvas = new TCanvas(); root[] myCanvas->Divide(2,2); We activate the first pad with the TCanvas::cd statement:; root[] myCanvas->cd(1); We then draw the variable Cost:; root[] MyTree->Draw(""C; As you can see, the last call TTree::Draw has only one parameter. It is a string containing the leaf name. A histogram is automatically created as a result of a TTree::Draw. The style of the histogram is inherited from the TTree a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:585374,simpl,simply,585374,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"yout::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGListLayout::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGListLayout::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 344 of file TGLayout.h. ◆ DeclFileName(). static const char * TGListLayout::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 344 of file TGLayout.h. ◆ GetDefaultSize(). TGDimension TGListLayout::GetDefaultSize ; (; ); const. overridevirtual . Return default dimension of the list layout. ; Implements TGLayoutManager.; Definition at line 883 of file TGLayout.cxx. ◆ IsA(). TClass * TGListLayout::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGLayoutManager.; Definition at line 344 of file TGLayout.h. ◆ Layout(). void TGListLayout::Layout ; (; ). overridevirtual . Make a tile layout of all frames in the list. ; Implements TGLayoutManager.; Definition at line 825 of file TGLayout.cxx. ◆ SavePrimitive(). void TGListLayout::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save list layout manager as a C++ statement(s) on output stream. ; Reimplemented from TObject.; Definition at line 1100 of file TGLayout.cxx. ◆ Streamer(). void TGListLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLayoutManager. ◆ StreamerNVirtual(). void TGListLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 344 of file TGLayout.h. Libraries for TGListLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGLayout.h; gui/gui/src/TGLayout.cxx. TGListLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListLayout.html:14057,Guid,Guide,14057,doc/master/classTGListLayout.html,https://root.cern,https://root.cern/doc/master/classTGListLayout.html,1,['Guid'],['Guide']
Usability,"yout::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file TGTab.h. ◆ DeclFileName(). static const char * TGTabLayout::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file TGTab.h. ◆ GetDefaultSize(). TGDimension TGTabLayout::GetDefaultSize ; (; ); const. overridevirtual . Get default size of tab widget. ; Implements TGLayoutManager.; Definition at line 298 of file TGTab.cxx. ◆ IsA(). TClass * TGTabLayout::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGLayoutManager.; Definition at line 41 of file TGTab.h. ◆ Layout(). void TGTabLayout::Layout ; (; ). overridevirtual . Layout the tab widget. ; Implements TGLayoutManager.; Definition at line 254 of file TGTab.cxx. ◆ operator=(). TGTabLayout & TGTabLayout::operator= ; (; const TGTabLayout & ; ). privatedelete . ◆ SavePrimitive(). void TGTabLayout::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 886 of file TGTab.cxx. ◆ Streamer(). void TGTabLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLayoutManager. ◆ StreamerNVirtual(). void TGTabLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file TGTab.h. Member Data Documentation. ◆ fList. TList* TGTabLayout::fList. protected . Definition at line 28 of file TGTab.h. ◆ fMain. TGTab* TGTabLayout::fMain. protected . Definition at line 27 of file TGTab.h. Libraries for TGTabLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTab.h; gui/gui/src/TGTab.cxx. TGTabLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTabLayout.html:13479,Guid,Guide,13479,doc/master/classTGTabLayout.html,https://root.cern,https://root.cern/doc/master/classTGTabLayout.html,1,['Guid'],['Guide']
Usability,"ype STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringRef ; TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer ; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform comand line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TText Text; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns sin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:121839,simpl,simple,121839,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['simpl'],['simple']
Usability,"ypedef ParentFunctor::EvalType ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::EvalType. private . Definition at line 68 of file ParamFunctor.h. Constructor & Destructor Documentation. ◆ ParamFunctorHandler(). template<class ParentFunctor , class Func > . ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::ParamFunctorHandler ; (; const Func & ; fun). inline . Definition at line 74 of file ParamFunctor.h. ◆ ~ParamFunctorHandler(). template<class ParentFunctor , class Func > . virtual ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::~ParamFunctorHandler ; (; ). inlinevirtual . Definition at line 77 of file ParamFunctor.h. Member Function Documentation. ◆ Clone(). template<class ParentFunctor , class Func > . ParamFunctorHandler * ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::Clone ; (; ); const. inline . Definition at line 100 of file ParamFunctor.h. ◆ operator()() [1/3]. template<class ParentFunctor , class Func > . EvalType ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::operator() ; (; const EvalType * ; x, . const double * ; p . ). inline . Definition at line 95 of file ParamFunctor.h. ◆ operator()() [2/3]. template<class ParentFunctor , class Func > . EvalType ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::operator() ; (; EvalType * ; x, . double * ; p . ). inline . Definition at line 91 of file ParamFunctor.h. ◆ operator()() [3/3]. template<class ParentFunctor , class Func > . EvalType ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::operator() ; (; EvalType ; x, . double * ; p . ). inline . Definition at line 81 of file ParamFunctor.h. Member Data Documentation. ◆ fFunc. template<class ParentFunctor , class Func > . Func ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::fFunc. private . Definition at line 107 of file ParamFunctor.h. math/mathcore/inc/Math/ParamFunctor.h. ROOTMathParamFunctorHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctorHandler.html:3730,Guid,Guide,3730,doc/master/classROOT_1_1Math_1_1ParamFunctorHandler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctorHandler.html,1,['Guid'],['Guide']
Usability,"ypes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStyle Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; TStyle objects may be created to define special styles. ; By default ROOT creates a default style that can be accessed via the gStyle pointer.; This class includes functions to set some of the following object attributes.; Canvas; Pad; Histogram axis; Lines; Fill areas; Text; Markers; Functions; Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their default attributes are taken from the current style. The current style is an object of the classTStyle and can be referenced via the global variable gStyle (in TStyle.h).; ROOT provides two styles called ""Default"" and ""Plain"". The ""Default"" style is created simply by:; auto default = new TStyle(""Default"",""Default Style"");; TStyle::TStyleTStyle()Default constructor.Definition TStyle.cxx:145; The Plain style can be used if you are working on a monochrome display or if you want to get a ""conventional"" Postscript output. These are the instructions in the ROOT constructor to create the Plain style.; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");; ; plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; You can set the current style with:; gROOT->SetStyle(style_name);; gROOT#define gROOTDefinition TROOT.h:406; You can get a pointer to an existing style with:; auto style = gROOT->GetStyle(style_name);; styleOption_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; You can create additional styles with:; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; gStyleR__EXTERN TStyle * gStyleDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:1106,simpl,simply,1106,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['simpl'],['simply']
Usability,ypes::EAnalysisType ; fAnalysisType . ). protected . method to save Train/Test information into the output file. ; Parameters. fDataSetInfoTMVA::DataSetInfo object reference ; fAnalysisTypeTypes::kMulticlass and Types::kRegression . Definition at line 235 of file Envelope.cxx. Member Data Documentation. ◆ fDataLoader. std::shared_ptr<DataLoader> TMVA::Envelope::fDataLoader. protected . ! data ; Definition at line 47 of file Envelope.h. ◆ fFile. std::shared_ptr<TFile> TMVA::Envelope::fFile. protected . ! file to save the results ; Definition at line 48 of file Envelope.h. ◆ fJobs. UInt_t TMVA::Envelope::fJobs. protected . ! number of jobs to run some high level algorithm in parallel ; Definition at line 56 of file Envelope.h. ◆ fMethods. std::vector<OptionMap> TMVA::Envelope::fMethods. protected . ! Booked method information ; Definition at line 46 of file Envelope.h. ◆ fModelPersistence. Bool_t TMVA::Envelope::fModelPersistence. protected . ! flag to save the trained model ; Definition at line 49 of file Envelope.h. ◆ fSilentFile. Bool_t TMVA::Envelope::fSilentFile. protected . ! if true dont produce file output ; Definition at line 52 of file Envelope.h. ◆ fTimer. TStopwatch TMVA::Envelope::fTimer. protected . ! timer to measure the time. ; Definition at line 57 of file Envelope.h. ◆ fTransformations. TString TMVA::Envelope::fTransformations. protected . ! List of transformations to test ; Definition at line 51 of file Envelope.h. ◆ fVerbose. Bool_t TMVA::Envelope::fVerbose. protected . ! flag for extra information ; Definition at line 50 of file Envelope.h. ◆ fWorkers. TProcPool TMVA::Envelope::fWorkers. protected . ! procpool object ; Definition at line 54 of file Envelope.h. Libraries for TMVA::Envelope:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Envelope.h; tmva/tmva/src/Envelope.cxx. TMVAEnvelope. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Envelope.html:26107,Guid,Guide,26107,doc/master/classTMVA_1_1Envelope.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html,1,['Guid'],['Guide']
Usability,"ypically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSelectedRows; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. TList * GetOutputList() const; { return fOutput; }. » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorEntries.html:9356,simpl,simple,9356,root/html602/TSelectorEntries.html,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html,2,['simpl'],['simple']
Usability,"ysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TagFile(TFile *fFile) overrideTStreamerInfovirtual; TCompInfo_t typedefTStreamerInfo; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TStreamerInfo(const TStreamerInfo &)=deleteTStreamerInfoprivate; TStreamerInfo()TStreamerInfo; TStreamerInfo(TClass *cl)TStreamerInfo; TStreamerInfoActions::TActionSequenceTStreamerInfofriend; TVirtualStreamerInfo(const TVirtualStreamerInfo &info)TVirtualStreamerInfoprotected; TVirtualStreamerInfo()TVirtualStreamerInfo; TVirtualStreamerInfo(TClass *)TVirtualStreamerInfo; Update(const TClass *oldClass, TClass *newClass) overrideTStreamerInfovirtual; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; WriteBuffer(TBuffer &b, char *pointer, Int_t first)TStreamerInfoprivate; WriteBufferAux(TBuffer &b, const T &arr, TCompInfo *const *const compinfo, Int_t first, Int_t last, Int_t narr, Int_t eoffset, Int_t mode)TStreamerInfo; WriteBufferClones(TBuffer &b, TClonesArray *clones, Int_t nc, Int_t first, Int_t eoffset)TStreamerInfoprivate; WriteBufferSTL(TBuffer &b, TVirtualCollectionProxy *cont, Int_t nc)TStreamerInfoprivate; WriteBufferSTLPtrs(TBuffer &b, TVirtualCollectionProxy *cont, Int_t nc, Int_t first, Int_t eoffset)TStreamerInfoprivate; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TStreamerInfo() overrideTStreamerInfo; ~TVirtualStreamerInfo()TVirtualStreamerInfovirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo-members.html:18944,Guid,Guide,18944,doc/master/classTStreamerInfo-members.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo-members.html,1,['Guid'],['Guide']
Usability,"ysics with mixing and/or CP violation ;  ; file  rf709_BarlowBeeston.C;   Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf709_BarlowBeeston.py;   Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf710_roopoly.C;   Taylor expansion of RooFit functions using the taylorExpand function with RooPolyFunc ;  ; file  rf710_roopoly.py;   Taylor expansion of RooFit functions using the taylorExpand function ;  ; file  rf711_lagrangianmorph.C;   Morphing effective field theory distributions with RooLagrangianMorphFunc A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:22673,simpl,simple,22673,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['simpl'],['simple']
Usability,"ysis Workshop | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome ROOT 6 Analysis Workshop. Abstract; This tutorial will guide you through an example analysis with ROOT 6. It shows the recommended practices for analyzing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-6-analysis-workshop-1.html:1014,Guid,Guides,1014,d/root-6-analysis-workshop-1.html,https://root.cern,https://root.cern/d/root-6-analysis-workshop-1.html,2,['Guid'],['Guides']
Usability,ystalBall.cxx. ◆ IsA(). TClass * RooCrystalBall::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 50 of file RooCrystalBall.h. ◆ maxVal(). double RooCrystalBall::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Definition at line 295 of file RooCrystalBall.cxx. ◆ Streamer(). void RooCrystalBall::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooCrystalBall::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file RooCrystalBall.h. Member Data Documentation. ◆ alphaL_. RooRealProxy RooCrystalBall::alphaL_. private . Definition at line 43 of file RooCrystalBall.h. ◆ alphaR_. std::unique_ptr<RooRealProxy> RooCrystalBall::alphaR_ = nullptr. private . Definition at line 47 of file RooCrystalBall.h. ◆ nL_. RooRealProxy RooCrystalBall::nL_. private . Definition at line 44 of file RooCrystalBall.h. ◆ nR_. std::unique_ptr<RooRealProxy> RooCrystalBall::nR_ = nullptr. private . Definition at line 48 of file RooCrystalBall.h. ◆ sigmaL_. RooRealProxy RooCrystalBall::sigmaL_. private . Definition at line 41 of file RooCrystalBall.h. ◆ sigmaR_. RooRealProxy RooCrystalBall::sigmaR_. private . Definition at line 42 of file RooCrystalBall.h. ◆ x0_. RooRealProxy RooCrystalBall::x0_. private . Definition at line 40 of file RooCrystalBall.h. ◆ x_. RooRealProxy RooCrystalBall::x_. private . Definition at line 39 of file RooCrystalBall.h. Libraries for RooCrystalBall:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooCrystalBall.h; roofit/roofit/src/RooCrystalBall.cxx. RooCrystalBall. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:82728,Guid,Guide,82728,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,1,['Guid'],['Guide']
Usability,"ystem_clock> tstart, tend;; 1400 tstart = std::chrono::system_clock::now();; 1401 ; 1402 // function building string with optimizer parameters values for logging; 1403 auto optimParametersString = [&]() {; 1404 TString optimParameters;; 1405 for ( auto & element : settings.optimizerParams) {; 1406 TString key = element.first;; 1407 key.ReplaceAll(settings.optimizerName + ""_"", """"); // strip optimizerName_; 1408 double value = element.second;; 1409 if (!optimParameters.IsNull()); 1410 optimParameters += "","";; 1411 else; 1412 optimParameters += "" ("";; 1413 optimParameters += TString::Format(""%s=%g"", key.Data(), value);; 1414 }; 1415 if (!optimParameters.IsNull()); 1416 optimParameters += "")"";; 1417 return optimParameters;; 1418 };; 1419 ; 1420 Log() << ""Training phase "" << trainingPhase << "" of "" << this->GetTrainingSettings().size() << "": ""; 1421 << "" Optimizer "" << settings.optimizerName; 1422 << optimParametersString(); 1423 << "" Learning rate = "" << settings.learningRate << "" regularization "" << (char)settings.regularization; 1424 << "" minimum error = "" << minValError << Endl;; 1425 if (!fInteractive) {; 1426 std::string separator(62, '-');; 1427 Log() << separator << Endl;; 1428 Log() << std::setw(10) << ""Epoch""; 1429 << "" | "" << std::setw(12) << ""Train Err."" << std::setw(12) << ""Val. Err."" << std::setw(12); 1430 << ""t(s)/epoch"" << std::setw(12) << ""t(s)/Loss"" << std::setw(12) << ""nEvents/s"" << std::setw(12); 1431 << ""Conv. Steps"" << Endl;; 1432 Log() << separator << Endl;; 1433 }; 1434 ; 1435 // set up generator for shuffling the batches; 1436 // if seed is zero we have always a different order in the batches; 1437 size_t shuffleSeed = 0;; 1438 if (fRandomSeed != 0) shuffleSeed = fRandomSeed + trainingPhase;; 1439 RandomGenerator<TRandom3> rng(shuffleSeed);; 1440 ; 1441 // print weights before; 1442 if (fBuildNet && debug) {; 1443 Log() << ""Initial Deep Net Weights "" << Endl;; 1444 auto & weights_tensor = deepNet.GetLayerAt(0)->GetWeights();; 1445 for (size_t l = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:56480,learn,learningRate,56480,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"yteCount () const;  ; Int_t GetId () const;  ; TGeoMaterial * GetMaterial () const;  ; Double_t GetParam (Int_t i) const;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; virtual void SetCerenkovProperties (TObject *cerenkov);  ; void SetId (Int_t id);  ; void SetMaterial (TGeoMaterial *mat);  ; void SetParam (Int_t i, Double_t val);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMedium.html:3106,Clear,Clear,3106,doc/master/classTGeoMedium.html,https://root.cern,https://root.cern/doc/master/classTGeoMedium.html,1,['Clear'],['Clear']
Usability,"ytes"");; p6->Draw();; TText text;; text.SetTextAlign(12);; text.SetTextSize(0.04);; text.SetTextFont(72);; text.DrawText(6.2,11.5,""Header:Event_flag"");; text.DrawText(7.2,9.5,""Trigger_Info"");; text.DrawText(8.2,7.5,""Muon_Detector: TOF"");; text.DrawText(9.2,5.5,""Calorimeters"");; text.DrawText(10.2,3.5,""Forward_Detectors"");; text.DrawText(11.2,1.5,""TPCs"");; }; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; lineTLine * lineDefinition entrylistblock_figure1.C:235; c1return c1Definition legend1.C:41; arrowDefinition RArrowDS.hxx:17; AuthorRene Brun ; Definition in file event.C. tutorialsgraphicsevent.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/event_8C.html:3733,Guid,Guide,3733,doc/master/event_8C.html,https://root.cern,https://root.cern/doc/master/event_8C.html,1,['Guid'],['Guide']
Usability,"ytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpalettecolor.C Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:116292,simpl,simple,116292,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"ywork[0] = ylow;; 1637 gxwork[1] = xhigh;; 1638 gywork[1] = yhigh;; 1639 ComputeLogs(2, optionZ);; 1640 if (gyworkl[0] < gPad->GetUymin()) gyworkl[0] = gPad->GetUymin();; 1641 if (gyworkl[1] < gPad->GetUymin()) continue;; 1642 if (gyworkl[1] > gPad->GetUymax()) gyworkl[1] = gPad->GetUymax();; 1643 if (gyworkl[0] > gPad->GetUymax()) continue;; 1644 ; 1645 gPad->PaintBox(gxworkl[0],gyworkl[0],gxworkl[1],gyworkl[1]);; 1646 }; 1647 } else {; 1648 for (i=1;i<=npoints;i++) {; 1649 xhigh = x[i-1];; 1650 ylow = y[i-1] - dbar;; 1651 yhigh = y[i-1] + dbar;; 1652 xlow = TMath::Max((Double_t)0, gPad->GetUxmin());; 1653 gxwork[0] = xlow;; 1654 gywork[0] = ylow;; 1655 gxwork[1] = xhigh;; 1656 gywork[1] = yhigh;; 1657 ComputeLogs(2, optionZ);; 1658 gPad->PaintBox(gxworkl[0],gyworkl[0],gxworkl[1],gyworkl[1]);; 1659 }; 1660 }; 1661 theGraph->SetFillColor(FillSave);; 1662 theGraph->TAttFill::Modify();; 1663 }; 1664 gPad->ResetBit(TGraph::kClipFrame);; 1665 ; 1666 gxwork.clear();; 1667 gywork.clear();; 1668 gxworkl.clear();; 1669 gyworkl.clear();; 1670}; 1671 ; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// This is a service method used by `THistPainter`; 1675/// to paint 1D histograms. It is not used to paint TGraph.; 1676///; 1677/// Input parameters:; 1678///; 1679/// - npoints : Number of points in X or in Y.; 1680/// - x[npoints] or x[0] : x coordinates or (xmin,xmax).; 1681/// - y[npoints] or y[0] : y coordinates or (ymin,ymax).; 1682/// - chopt : Option.; 1683///; 1684/// The aspect of the histogram is done according to the value of the chopt.; 1685///; 1686/// | Option | Description |; 1687/// |--------|-----------------------------------------------------------------|; 1688/// |""R"" | Graph is drawn horizontally, parallel to X axis. (default is vertically, parallel to Y axis).If option R is selected the user must give 2 values for Y (y[0]=YMIN and y[1]=YMAX) or N values for X, one for each channel. Otherwise the user must gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:60401,clear,clear,60401,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"z);; // or:; gGeoManager->SetCurrentPoint(Double_t *point[3]);; 18.5.3 Initializing the Direction; In order to move inside geometry starting with the current point, the modeller needs to know the current direction (nx,ny,nz). This direction is stored as Double_t fCurrentDirection[3] by the navigator and it represents a direction in the global frame. It can be retrieved with:; Const Double_t *cdir = gGeoManager->GetCurrentDirection();; The direction can be initialized in a similar manner as the current point:; gGeoManager->SetCurrentDirection(nx,ny,nz);; // or:; gGeoManager->SetCurrentDirection(Double_t *dir);; 18.5.4 Initializing the State; Setting the initial point and direction is not enough for initializing tracking. The modeller needs to find out where the initial point is located in the geometrical hierarchy. Due to the containment based architecture of the model, this is the deepest positioned object containing the point. For illustrating this, imagine that we have a simple structure with a top volume A and another one Bpositioned inside. Since Ais a top volume, its associated node A_1 will define MARS and our simple hierarchy of nodes (positioned volumes) will be: /A_1/B_1. Suppose now that the initial point is contained by B_1. This implies by default that the point is also contained by A_1, since B_1 have to be fully contained by this. After searching the point location, the modeller will consider that the point is located inside B_1, which will be considered as the representative object (node) for the current state. This is stored as: TGeoNode *TGeoManager::fCurrentNodeand can be asked from the manager class only after the 'Where am I?' was completed:; TGeoNode *current = gGeoManager->GetCurrentNode();; In order to find the location of the current point inside the hierarchy of nodes, after setting this point it is mandatory to call the ‘Where am I?' method:; gGeoManager->FindNode();; In order to have more flexibility, there are in fact several alternative w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:974788,simpl,simple,974788,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"zation -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range ''; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; result of fit on all data ; ; RooFitResult: minimized FCN value: 25939.4, estimated distance to minimum: 3.77183e-06; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; f 5.0441e-01 +/- 6.32e-03; mx -2.1605e-02 +/- 1.77e-02; ; result of fit in in signal region (note increased error on signal fraction); ; RooFitResult: minimized FCN value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf203__ranges_8C.html:7237,Clear,Clear,7237,doc/master/rf203__ranges_8C.html,https://root.cern,https://root.cern/doc/master/rf203__ranges_8C.html,1,['Clear'],['Clear']
Usability,"ze ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete Interval"" ; Reimplemented in TMVA::LogInterval.; Definition at line 135 of file Interval.cxx. ◆ GetWidth(). Double_t TMVA::Interval::GetWidth ; (; ); const. virtual . Reimplemented in TMVA::LogInterval.; Definition at line 155 of file Interval.cxx. ◆ IsA(). virtual TClass * TMVA::Interval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::LogInterval.; Definition at line 93 of file Interval.h. ◆ Log(). TMVA::MsgLogger & TMVA::Interval::Log ; (; ); const. private . Definition at line 171 of file Interval.cxx. ◆ Print(). void TMVA::Interval::Print ; (; std::ostream & ; os); const. virtual . Definition at line 164 of file Interval.cxx. ◆ SetMax(). void TMVA::Interval::SetMax ; (; Double_t ; m). inline . Definition at line 80 of file Interval.h. ◆ SetMin(). void TMVA::Interval::SetMin ; (; Double_t ; m). inline . Definition at line 81 of file Interval.h. ◆ Streamer(). virtual void TMVA::Interval::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::LogInterval. ◆ StreamerNVirtual(). void TMVA::Interval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file Interval.h. Member Data Documentation. ◆ fMax. Double_t TMVA::Interval::fMax. protected . the constraints of the Interval ; Definition at line 87 of file Interval.h. ◆ fMin. Double_t TMVA::Interval::fMin. protected . Definition at line 87 of file Interval.h. ◆ fNbins. Int_t TMVA::Interval::fNbins. protected . when >0 : number of bins (discrete interval); when ==0 continuous interval ; Definition at line 88 of file Interval.h. Libraries for TMVA::Interval:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Interval.h; tmva/tmva/src/Interval.cxx. TMVAInterval. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Interval.html:7207,Guid,Guide,7207,doc/master/classTMVA_1_1Interval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html,1,['Guid'],['Guide']
Usability,"ze = 0 . ); const. overridevirtual . Write all objects in this collection. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TObject.; Reimplemented in TMap.; Definition at line 648 of file TCollection.cxx. ◆ Write() [2/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ). overridevirtual . Write all objects in this collection. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TObject.; Reimplemented in TMap.; Definition at line 672 of file TCollection.cxx. Member Data Documentation. ◆ fgCurrentCollection. TCollection * TCollection::fgCurrentCollection = nullptr. staticprivate . Definition at line 134 of file TCollection.h. ◆ fgEmptyingGarbage. Bool_t TCollection::fgEmptyingGarbage = kFALSE. staticprivate . Definition at line 136 of file TCollection.h. ◆ fgGarbageCollection. TObjectTable * TCollection::fgGarbageCollection = nullptr. staticprivate . Definition at line 135 of file TCollection.h. ◆ fgGarbageStack. Int_t TCollection::fgGarbageStack = 0. staticprivate . Definition at line 137 of file TCollection.h. ◆ fName. TString TCollection::fName. protected . Definition at line 149 of file TCollection.h. ◆ fSize. Int_t TCollection::fSize. protected . Definition at line 150 of file TCollection.h. core/cont/inc/TCollection.h; core/cont/src/TCollection.cxx. TCollection. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:36683,Guid,Guide,36683,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,1,['Guid'],['Guide']
Usability,"ze fSelector using the selector files in the query result.; Needed when Finalize is called after a Process execution for the same; selector name. Int_t AddOutputObject(TObject* obj); Incorporate output object (may not be used in this class). void AddOutput(TList* out); Incorporate output list (may not be used in this class). void StoreOutput(TList* out); Store output list (may not be used in this class). void StoreFeedback(TObject* slave, TList* out); Store feedback list (may not be used in this class). void Progress(Long64_t total, Long64_t processed); Report progress (may not be used in this class). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress (may not be used in this class). void Progress(TProofProgressInfo* pi); Report progress (may not be used in this class). void Feedback(TList* objs); Set feedback list (may not be used in this class). TDrawFeedback * CreateDrawFeedback(TProof* p); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. Int_t SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); Save the partial results of this query to a dedicated file under the user; data directory. The file name has the form; <session_tag>.q<query_seq_num>.root; The file pat and the file are created if not existing already.; Only objects in the outputlist not being TProofOutputFile are saved.; The packets list 'packets' is saved if given.; Trees not attached to any file are attached to the open file.; If 'queryend' is kTRUE evrything is written out (TTrees included).; The actual saving action is controlled by 'force' and by fSavePartialResults; fSaveResultsPerPacket:. fSavePartialResults = kFALSE/kTRUE no-saving/saving; fSaveResultsPerPacket = kFALSE/kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayer.html:17606,feedback,feedback,17606,root/html534/TProofPlayer.html,https://root.cern,https://root.cern/root/html534/TProofPlayer.html,3,['feedback'],['feedback']
Usability,"ze fSelector using the selector files in the query result.; Needed when Finalize is called after a Process execution for the same; selector name. Int_t AddOutputObject(TObject* obj); Incorporate output object (may not be used in this class). void AddOutput(TList* out); Incorporate output list (may not be used in this class). void StoreOutput(TList* out); Store output list (may not be used in this class). void StoreFeedback(TObject* slave, TList* out); Store feedback list (may not be used in this class). void Progress(Long64_t total, Long64_t processed); Report progress (may not be used in this class). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress (may not be used in this class). void Progress(TProofProgressInfo* pi); Report progress (may not be used in this class). void Feedback(TList* objs); Set feedback list (may not be used in this class). TDrawFeedback * CreateDrawFeedback(TProof* p); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF worker.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Bool_t CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); Check the memory usage, if requested.; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or; resident limits are depassed. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize query (may not be used in this class). Long64_t Finalize(TQueryResult* qr); Finalize query (may not be used in this class). void MergeOutput(); Merge output (may not be used in thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayer.html:16247,feedback,feedback,16247,root/html528/TProofPlayer.html,https://root.cern,https://root.cern/root/html528/TProofPlayer.html,3,['feedback'],['feedback']
Usability,"ze void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; THashList.h; TInterpreter.h; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; TMethod.h; TPRegexp.h; TQClass.h; TQConnection.h; gTQSendervoid * gTQSenderDefinition TQObject.cxx:74; ConnectCINTBool_t ConnectCINT(TQObject *sender, const char *signal, const char *slot)Global function which simplifies making connection in interpreted ROOT session.Definition TQObject.cxx:1069; TQObject.h; ClassImpQ#define ClassImpQ(name)Definition TQObject.h:283; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TVirtualMutex.h; R__LOCKGUARD2#define R__LOCKGUARD2(mutex)Definition TVirtualMutex.h:96; protoconst char * protoDefinition civetweb.c:17535; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; TBaseClass::GetClassPointerTClass * GetClassPointer(Bool_t load=kTRUE)Get pointer to the base class TClass.Definition TBaseClass.cxx:63; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TBuffer::IsReadingBool_t IsReading() constDefinition TBuffer.h:86; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TQObject_8cxx_source.html:37230,simpl,simplifies,37230,doc/master/TQObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TQObject_8cxx_source.html,1,['simpl'],['simplifies']
Usability,"ze void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TBranch::SetFilevirtual void SetFile(TFile *file=nullptr)Set file where this branch writes/reads its buffers.Definition TBranch.cxx:2863; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TStringBasic string class.Definition TString.h:139; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetBranchStatusvirtual void SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)Set branch status to Process or DoNotProcess.Definition TTree.cxx:8534; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::CloneTreevirtual TTree * CloneTree(Long64_t nentries=-1, Option_t *option="""")Create a clone of this tree and copy nentries.Definition TTree.cxx:3139; AuthorRene Brun ; Definition in file copytree2.C. tutorialstreecopytree2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree2_8C.html:3500,Guid,Guide,3500,doc/master/copytree2_8C.html,https://root.cern,https://root.cern/doc/master/copytree2_8C.html,1,['Guid'],['Guide']
Usability,"ze(UInt_t w=0, UInt_t h=0) overrideResize the frame.Definition TGFrame.cxx:605; TGFrame::MapWindowvoid MapWindow() overridemap windowDefinition TGFrame.h:204; TGLayoutHintsThis class describes layout hints used by the layout classes.Definition TGLayout.h:50; TGMainFrameDefines top level windows that interact with the system Window Manager.Definition TGFrame.h:397; TGMainFrame::SetWindowNamevoid SetWindowName(const char *name=nullptr) overrideSet window name. This is typically done via the window manager.Definition TGFrame.cxx:1788; TGSimpleTableInterfaceTGSimpleTableInterface is a very simple implementation of a TVirtualTableInterface.Definition TGSimpleTableInterface.h:18; TGTableCreate an array to hold a bunch of numbers.Definition TGTable.h:34; TGTable::Updatevirtual void Update()Update the range of the available data and refresh the current view.Definition TGTable.cxx:1529; double; int; unsigned int; It is also possible to visualise data from a tree. A simple macro showing the use of a TTreeTableInterface follows.; {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");; ; // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);; ; // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);; ; // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));; ; // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();; ; // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;; ; return mainframe;; }; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:4515,simpl,simple,4515,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['simpl'],['simple']
Usability,"zeCurrentCamera(const TGLVector3& hAxis, const TGLVector3& vAxis, Bool_t redraw = kTRUE); Change base-vectors defining the camera-base transformation of current; camera. hAxis and vAxis are the default directions for forward; (inverted) and upwards. TGLAutoRotator* GetAutoRotator(); Get the auto-rotator for this viewer. void SetAutoRotator(TGLAutoRotator* ar); Set the auto-rotator for this viewer. The old rotator is deleted. void SetStereo(Bool_t stereo, Bool_t quad_buf = kTRUE); Enable stereo rendering.; If quad_buf is true rendering is done into separate left and right GL; buffers. This requires hardware support. Otherwise left and right images; get rendered into left and right half of the window.; Note that mouse highlighting and selection will not work exactly right; as image for each eye gets slightly shifted and there are two different; directions through the mouse pointer, one for each eye. void GetGuideState(Int_t& axesType, Bool_t& axesDepthTest, Bool_t& referenceOn, Double_t* referencePos) const; Fetch the state of guides (axes & reference markers) into arguments. void SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); Set the state of guides (axes & reference markers) from arguments. void SetDrawCameraCenter(Bool_t x); Draw camera look at and rotation point. const TGLPhysicalShape * GetSelected() const; Return selected physical shape. void MouseOver(TGLPhysicalShape* ); Emit MouseOver signal. void MouseOver(TGLPhysicalShape* , UInt_t state); Emit MouseOver signal. void MouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void ReMouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void UnMouseOver(TObject* obj, UInt_t state); Emit UnMouseOver signal. void Clicked(TObject* obj); Emit Clicked signal. void Clicked(TObject* obj, UInt_t button, UInt_t state); Emit Clicked signal with button id and modifier state. void ReClicked(TObject* obj, UInt_t button, UInt_t state); Emit ReClicked signal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLViewer.html:35621,guid,guides,35621,root/html604/TGLViewer.html,https://root.cern,https://root.cern/root/html604/TGLViewer.html,1,['guid'],['guides']
Usability,"zeWeights(WeightInitializationStrategy::XAVIERUNIFORM,; 826 std::back_inserter(weights));; 827 break;; 828 default:; 829 net.initializeWeights(WeightInitializationStrategy::XAVIER,; 830 std::back_inserter(weights));; 831 break;; 832 }; 833 ; 834 int idxSetting = 0;; 835 for (auto s : fTrainingSettings) {; 836 ; 837 EnumRegularization r = EnumRegularization::NONE;; 838 switch(s.regularization) {; 839 case ERegularization::kNone: r = EnumRegularization::NONE; break;; 840 case ERegularization::kL1: r = EnumRegularization::L1; break;; 841 case ERegularization::kL2: r = EnumRegularization::L2; break;; 842 }; 843 ; 844 Settings * settings = new Settings(TString(), s.convergenceSteps, s.batchSize,; 845 s.testInterval, s.weightDecay, r,; 846 MinimizerType::fSteepest, s.learningRate,; 847 s.momentum, 1, s.multithreading);; 848 std::shared_ptr<Settings> ptrSettings(settings);; 849 ptrSettings->setMonitoring (0);; 850 Log() << kINFO; 851 << ""Training with learning rate = "" << ptrSettings->learningRate (); 852 << "", momentum = "" << ptrSettings->momentum (); 853 << "", repetitions = "" << ptrSettings->repetitions (); 854 << Endl;; 855 ; 856 ptrSettings->setProgressLimits ((idxSetting)*100.0/(fSettings.size ()),; 857 (idxSetting+1)*100.0/(fSettings.size ()));; 858 ; 859 const std::vector<double>& dropConfig = ptrSettings->dropFractions ();; 860 if (!dropConfig.empty ()) {; 861 Log () << kINFO << ""Drop configuration"" << Endl; 862 << "" drop repetitions = "" << ptrSettings->dropRepetitions(); 863 << Endl;; 864 }; 865 ; 866 int idx = 0;; 867 for (auto f : dropConfig) {; 868 Log () << kINFO << "" Layer "" << idx << "" = "" << f << Endl;; 869 ++idx;; 870 }; 871 Log () << kINFO << Endl;; 872 ; 873 DNN::Steepest minimizer(ptrSettings->learningRate(),; 874 ptrSettings->momentum(),; 875 ptrSettings->repetitions());; 876 net.train(weights, trainPattern, testPattern, minimizer, *ptrSettings.get());; 877 ptrSettings.reset();; 878 Log () << kINFO << Endl;; 879 idxSetting++;; 880 }; 881 size_t weightIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:30476,learn,learning,30476,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['learn'],"['learning', 'learningRate']"
Usability,"ze_t > > > BasketList_tDefinition TTreePerfStats.h:48; TTreePerfStats::fPaveTPaveText * fPavePointer to annotation pavetext.Definition TTreePerfStats.h:71; TTreePerfStats::fTreeCacheSizeInt_t fTreeCacheSizeTTreeCache buffer size.Definition TTreePerfStats.h:51; TTreePerfStats::fGraphTimeTGraphErrors * fGraphTimePointer to the graph with timestamp info.Definition TTreePerfStats.h:70; TTreePerfStats::fHostInfoTextTText * fHostInfoTextGraphics Text object with the fHostInfo data.Definition TTreePerfStats.h:74; TTreePerfStats::fBytesReadExtraLong64_t fBytesReadExtraNumber of bytes (overhead) of the read-ahead cache.Definition TTreePerfStats.h:56; TTreePerfStats::UnzipEventvoid UnzipEvent(TObject *tree, Long64_t pos, Double_t start, Int_t complen, Int_t objlen) overrideRecord TTree unzip event.Definition TTreePerfStats.cxx:312; TTreePerfStats::TTreePerfStatsTTreePerfStats()default constructor (used when reading an object only)Definition TTreePerfStats.cxx:107; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetCurrentFileTFile * GetCurrentFile() constReturn pointer to the current file.Definition TTree.cxx:5479; TTree::GetDirectoryTDirectory * GetDirectory() constDefinition TTree.h:462; TTree::GetReadEntryvirtual Long64_t GetReadEntry() constDefinition TTree.h:549; TTree::GetTreevirtual TTree * GetTree() constDefinition TTree.h:557; TTree::IsATClass * IsA() const overrideDefinition TTree.h:705; TTree::GetCacheSizevirtual Long64_t GetCacheSize() constDefinition TTree.h:453; TVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing.Definition TVirtualPerfStats.h:32; double; int; TMath::MaxElementT MaxElement(Long64_t n, const T *a)Returns maximum of array a of length n.Definition TMath.h:968; TTreePerfStats::BasketInfoDefinition TTreePerfStats.h:41; Drawth1 Draw(). treetreeplayersrcTTreePerfStats.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreePerfStats_8cxx_source.html:45909,Guid,Guide,45909,doc/master/TTreePerfStats_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreePerfStats_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ze_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition NeuralNet.h:334; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (learningRate)Definition NeuralNet.h:371; TMVA::DNN::Steepest::m_localWeightsstd::vector< double > m_localWeightslocal weights for reuse in thread.Definition NeuralNet.h:375; TMVA::DNN::Steepest::operator()double operator()(Function &fitnessFunction, Weights &weights, PassThrough &passThrough)operator to call the steepest gradient descent algorithmDefinition NeuralNet.icc:271; TMVA::DNN::Steepest::SteepestSteepest(double learningRate=1e-4, double momentum=0.5, size_t repetitions=10)c'torDefinition NeuralNet.h:348; TMVA::IPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jup...Definition MethodBase.h:94; TMVA::TimerTiming information for training and evaluation of MVA methods.Definition Timer.h:58; TMVA::Timer::DrawProgressBarvoid DrawProgressBar(Int_t, const TString &comment="""")draws progress bar in color or B&W caution:Definition Timer.cxx:202; TStringBasic string class.Definition TString.h:139; double; u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:78823,learn,learningRate,78823,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['learn'],['learningRate']
Usability,"zed function has error status.; Returning maximum FCN so far (-775.389) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.72761 a1=-0.375581 mean=5.04879 nbkg=141.143 nsig=137.402 sig1frac=0.495257; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 60; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 50; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 40; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 30; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 20; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 10; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 0; [#0] WARNING:Generation -- Fit parameter 'sigma1' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#0] WARNING:Generation -- Fit parameter 'sigma2' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#1] INFO:ObjectHandling -- RooWorkspace::import() importing RooRealVar::meanpull; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pullGauss_over_pullGauss_Int[meanpull]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pullGauss_over_pullGauss_Int[meanpull]_fitParData_model) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateFebruary 2018 ; AuthorWouter Verkerke ; Definition in file rf801_mcstudy.C. tutorialsroofitrf801_mcstudy.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:29935,Guid,Guide,29935,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,1,['Guid'],['Guide']
Usability,"zer::IsValidErrorbool IsValidError() constreturn true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit)Definition Minimizer.h:320; ROOT::Math::Minimizer::Edmvirtual double Edm() constreturn expected distance reached from the minimum (re-implement if minimizer provides itDefinition Minimizer.h:222; ROOT::Math::Minimizer::GetMinosErrorvirtual bool GetMinosError(unsigned int ivar, double &errLow, double &errUp, int option=0)minos error for variable i, return false if Minos failed or not supported and the lower and upper err...Definition Minimizer.cxx:172; ROOT::Math::Minimizer::SetOptionsvoid SetOptions(const MinimizerOptions &opt)set all options in one goDefinition Minimizer.h:353; ROOT::Math::Minimizer::SetVariableValuesvirtual bool SetVariableValues(const double *x)set the values of all existing variables (array must be dimensioned to the size of the existing param...Definition Minimizer.h:187; ROOT::Math::Minimizer::Clearvirtual void Clear()reset for consecutive minimization - implement if neededDefinition Minimizer.h:136; ROOT::Math::Minimizer::SetExtraOptionsvoid SetExtraOptions(const IOptions &extraOptions)set only the extra optionsDefinition Minimizer.h:358; ROOT::Math::Minimizer::MinValuevirtual double MinValue() const =0return minimum function value; ROOT::Math::Minimizer::PrintLevelint PrintLevel() constminimizer configuration parametersDefinition Minimizer.h:291; ROOT::Math::Minimizer::PrintResultsvirtual void PrintResults()return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const ...Definition Minimizer.h:282; ROOT::Math::Minimizer::NDimvirtual unsigned int NDim() const =0this is <= Function().NDim() which is the total number of variables (free+ constrained ones); ROOT::Math::Minimizer::NFreevirtual unsigned int NFree() constnumber of free variables (real dimension of the problem) this is <= Function().NDim() which is the to...Definition Minimizer.h:240; ROOT::Math::Minimizer::SetV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:30638,Clear,Clearvirtual,30638,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,"zer::applyCovarianceMatrix ; (; TMatrixDSym const & ; V). Apply results of given external covariance matrix. ; i.e. propagate its errors to all RRV parameter representations and give this matrix instead of the HESSE matrix at the next save() call ; Definition at line 732 of file RooMinimizer.cxx. ◆ calculateHessErrors(). bool RooMinimizer::calculateHessErrors ; (; ). private . Definition at line 880 of file RooMinimizer.cxx. ◆ calculateMinosErrors(). bool RooMinimizer::calculateMinosErrors ; (; ). private . Definition at line 911 of file RooMinimizer.cxx. ◆ Class(). static TClass * RooMinimizer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooMinimizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooMinimizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 247 of file RooMinimizer.h. ◆ clearStatusHistory(). void RooMinimizer::clearStatusHistory ; (; ). inline . Clears the Minuit status history. ; Definition at line 182 of file RooMinimizer.h. ◆ contour(). RooPlot * RooMinimizer::contour ; (; RooRealVar & ; var1, . RooRealVar & ; var2, . double ; n1 = 1.0, . double ; n2 = 2.0, . double ; n3 = 0.0, . double ; n4 = 0.0, . double ; n5 = 0.0, . double ; n6 = 0.0, . unsigned int ; npoints = 50 . ). Create and draw a TH2 with the error contours in the parameters var1 and var2. ; Parameters. [in]var1The first parameter (x axis). ; [in]var2The second parameter (y axis). ; [in]n1First contour. ; [in]n2Optional contour. 0 means don't draw. ; [in]n3Optional contour. 0 means don't draw. ; [in]n4Optional contour. 0 means don't draw. ; [in]n5Optional contour. 0 means don't draw. ; [in]n6Optional contour. 0 means don't draw. ; [in]npointsNumber of points for evaluating the contour. Up to six contours can be drawn using the arguments n1 to n6 to request the desired coverage in units of \( \sigma = n^2 \cdot \mathrm{ErrorDef} \",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:18603,clear,clearStatusHistory,18603,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['clear'],['clearStatusHistory']
Usability,"zero, the result parameter will be swapped with a std::any variable on the Python side. You need to define this variable yourself, and it needs to be of type std::any and its name needs to be ""_anyresult"" by default. Like this, you can pass information from Python back to C++.; Parameters. cmdThe Python command to be executed as a string. ; resultOptional pointer to a std::any object that can be used to transfer results from Python to C++. ; resultNameName of the Python variable that is swapped over to the std::any result. The default value is ""_anyresult"". . Returnsbool Returns true if the command was successfully executed, otherwise returns false. ; Definition at line 425 of file TPython.cxx. ◆ ExecScript(). void TPython::ExecScript ; (; const char * ; name, . int ; argc = 0, . const char ** ; argv = nullptr . ). static . Execute a python stand-alone script, with argv CLI arguments. ; example of use: const char* argv[] = { ""1"", ""2"", ""3"" }; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv ); ; Definition at line 381 of file TPython.cxx. ◆ Import(). Bool_t TPython::Import ; (; const char * ; name). static . Import the named python module and create Cling equivalents for its classes and methods. ; Definition at line 237 of file TPython.cxx. ◆ Initialize(). Bool_t TPython::Initialize ; (; ). staticprivate . Initialization method: setup the python interpreter and load the ROOT module. ; Definition at line 137 of file TPython.cxx. ◆ LoadMacro(). void TPython::LoadMacro ; (; const char * ; name). static . Execute the give python script as if it were a macro (effectively an execfile in main), and create Cling equivalents for any newly available python classes. ; Definition at line 305 of file TPython.cxx. The documentation for this class was generated from the following files:; bindings/tpython/inc/TPython.h; bindings/tpython/src/TPython.cxx. TPython. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPython.html:6929,Guid,Guide,6929,doc/master/classTPython.html,https://root.cern,https://root.cern/doc/master/classTPython.html,1,['Guid'],['Guide']
Usability,"zes. std::map<RooFit::Detail::DataKey, std::size_t> RooFit::Detail::CodeSquashContext::_nodeOutputSizes. private . Map of node output sizes. ; Definition at line 179 of file CodeSquashContext.h. ◆ _scopePtr. int RooFit::Detail::CodeSquashContext::_scopePtr = -1. private . Keeps track of the position to go back and insert code to. ; Definition at line 187 of file CodeSquashContext.h. ◆ _tempScope. std::string RooFit::Detail::CodeSquashContext::_tempScope. private . Stores code that eventually gets injected into main code body. ; Mainly used for placing decls outside of loops. ; Definition at line 190 of file CodeSquashContext.h. ◆ _tmpVarIdx. int RooFit::Detail::CodeSquashContext::_tmpVarIdx = 0. mutableprivate . Index to get unique names for temporary variables. ; Definition at line 185 of file CodeSquashContext.h. ◆ _vecObsIndices. std::unordered_map<const TNamed *, int> RooFit::Detail::CodeSquashContext::_vecObsIndices. private . A map to keep track of the observable indices if they are non scalar. ; Definition at line 177 of file CodeSquashContext.h. ◆ _wrapper. Experimental::RooFuncWrapper* RooFit::Detail::CodeSquashContext::_wrapper = nullptr. Definition at line 118 of file CodeSquashContext.h. ◆ _xlArr. std::vector<double>& RooFit::Detail::CodeSquashContext::_xlArr. private . Definition at line 193 of file CodeSquashContext.h. ◆ listNames. std::unordered_map<RooFit::UniqueId<RooAbsCollection>::Value_t, std::string> RooFit::Detail::CodeSquashContext::listNames. private . A map to keep track of list names as assigned by addResult. ; Definition at line 192 of file CodeSquashContext.h. Libraries for RooFit::Detail::CodeSquashContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h; roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx. RooFitDetailCodeSquashContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html:17940,Guid,Guide,17940,doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,1,['Guid'],['Guide']
Usability,"zmax . ). inline . add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and [zmin,zmax] for the third coordinate ; Definition at line 173 of file DataRange.h. ◆ AddRange() [4/4]. void ROOT::Fit::DataRange::AddRange ; (; unsigned int ; icoord, . double ; xmin, . double ; xmax . ). add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one, but takes the OR with existing ranges. ; if want to replace range use method SetRange, which replace range with existing one ; Definition at line 94 of file DataRange.cxx. ◆ CleanRangeSet(). void ROOT::Fit::DataRange::CleanRangeSet ; (; unsigned int ; icoord, . double ; xmin, . double ; xmax . ). protected . internal function to remove all the existing ranges between xmin and xmax called when a new range is inserted ; Definition at line 165 of file DataRange.cxx. ◆ Clear(). void ROOT::Fit::DataRange::Clear ; (; unsigned int ; icoord = 0). clear all ranges in one coordinate (is now -inf, +inf) ; Definition at line 158 of file DataRange.cxx. ◆ GetInfRange(). void ROOT::Fit::DataRange::GetInfRange ; (; double & ; x1, . double & ; x2 . ). staticprotected . Definition at line 182 of file DataRange.cxx. ◆ GetRange() [1/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . double & ; ymin, . double & ; ymax, . double & ; zmin, . double & ; zmax, . unsigned int ; irange = 0 . ); const. inline . get range for the x and y and z coordinates ; Definition at line 135 of file DataRange.h. ◆ GetRange() [2/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . double & ; ymin, . double & ; ymax, . unsigned int ; irange = 0 . ); const. inline . get range for the x and y coordinates ; Definition at line 129 of file DataRange.h. ◆ GetRange() [3/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . unsigned int ; irange = 0 . ); const. inline . get first range for the x - coordinate ; Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html:7876,clear,clear,7876,doc/master/classROOT_1_1Fit_1_1DataRange.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html,1,['clear'],['clear']
Usability,"zontal scrolbar. ; Implements TGScrollBar.; Definition at line 487 of file TGScrollBar.cxx. ◆ HandleMotion(). Bool_t TGHScrollBar::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle mouse motion event in a horizontal scrollbar. ; Implements TGScrollBar.; Definition at line 608 of file TGScrollBar.cxx. ◆ IsA(). TClass * TGHScrollBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 160 of file TGScrollBar.h. ◆ Layout(). void TGHScrollBar::Layout ; (; ). overridevirtual . Layout and move horizontal scrollbar components. ; Implements TGScrollBar.; Definition at line 469 of file TGScrollBar.cxx. ◆ SavePrimitive(). void TGHScrollBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an horizontal scrollbar as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 948 of file TGScrollBar.cxx. ◆ SetPosition(). void TGHScrollBar::SetPosition ; (; Int_t ; pos). overridevirtual . Set logical slider position of horizontal scrollbar. ; Implements TGScrollBar.; Definition at line 665 of file TGScrollBar.cxx. ◆ SetRange(). void TGHScrollBar::SetRange ; (; Int_t ; range, . Int_t ; page_size . ). overridevirtual . Set range of horizontal scrollbar. ; Implements TGScrollBar.; Definition at line 632 of file TGScrollBar.cxx. ◆ Streamer(). void TGHScrollBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGHScrollBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 160 of file TGScrollBar.h. Libraries for TGHScrollBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGScrollBar.h; gui/gui/src/TGScrollBar.cxx. TGHScrollBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHScrollBar.html:34996,Guid,Guide,34996,doc/master/classTGHScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGHScrollBar.html,1,['Guid'],['Guide']
Usability,"{ kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TNotifyLink.h>. Inheritance diagram for TNotifyLinkBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TNotifyLinkBase::EStatusBits. EnumeratorkLinked . Definition at line 61 of file TNotifyLink.h. Member Function Documentation. ◆ Class(). static TClass * TNotifyLinkBase::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TNotifyLinkBase::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TNotifyLinkBase::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 123 of file TNotifyLink.h. ◆ Clear(). void TNotifyLinkBase::Clear ; (; Option_t * ; = """"). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 65 of file TNotifyLink.h. ◆ DeclFileName(). static const char * TNotifyLinkBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 123 of file TNotifyLink.h. ◆ GetNext(). TObject * TNotifyLinkBase::GetNext ; (; ); const. inline . Definition at line 121 of file TNotifyLink.h. ◆ IsA(). TClass * TNotifyLinkBase::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 123 of file TNotifyLink.h. ◆ IsLinked(). Bool_t TNotifyLinkBase::IsLinked ; (; ). inline . Definition at line 116 of file TNotifyLink.h. ◆ PrependLink(). template<class Chain > . void TNotifyLinkBase::PrependLink ; (; Chain & ; chain). inline . Set this link as the head of the chain's list of notify subscribers. ; Templated only to remove an include dependenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNotifyLinkBase.html:11132,Clear,Clear,11132,doc/master/classTNotifyLinkBase.html,https://root.cern,https://root.cern/doc/master/classTNotifyLinkBase.html,1,['Clear'],['Clear']
Usability,"{ kUseBoundingBox; kUseVoxels; kUseGsord; };; enum TGeoAtt::EGeoSavePrimitiveAtt { kSavePrimitiveAtt; kSaveNodesAtt; };. protected:. TObject*fField! just a hook for now; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TGeoPatternFinder*fFinderfinder object for divisions; UInt_tTGeoAtt::fGeoAttoption flags; TGeoManager*fGeoManager! pointer to TGeoManager owning this volume; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TGeoMedium*fMediumtracking medium; TStringTNamed::fNameobject identifier; TObjArray*fNodesarray of nodes inside this volume; Int_tfNtotaltotal number of physical nodes; Int_tfNumbervolume serial number in the list of volumes; TStringfOption! option - if any; TGeoShape*fShapeshape; TStringTNamed::fTitleobject title; TGeoVoxelFinder*fVoxelsfinder object for bounding boxes. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. TGeoVolume(); dummy constructor. TGeoVolume(const char* name, const TGeoShape* shape, const TGeoMedium* med = 0); default constructor. TGeoVolume(const TGeoVolume& ); copy constructor. TGeoVolume& operator=(const TGeoVolume& ); assignment operator. ~TGeoVolume(); Destructor. void Browse(TBrowser* b); How to browse a volume. Double_t Capacity() const; Computes the capacity of this [cm^3] as the capacity of its shape.; In case of assemblies, the capacity is computed as the sum of daughter's capacities. void CheckGeometry(Int_t nrays = 1, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0) const; Shoot nrays with random directions from starting point (startx, starty, startz); in the reference frame of this volume. Track each ray until exiting geometry, then; shoot backwards from exiting point and compare boundary crossing points. void CheckOverlaps(Double_t ovlp = 0.1, Option_t* option = """") const; Overlap checking tool. Check for illegal overlaps wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoVolume.html:21615,Clear,ClearThreadData,21615,root/html532/TGeoVolume.html,https://root.cern,https://root.cern/root/html532/TGeoVolume.html,1,['Clear'],['ClearThreadData']
Usability,"{; 28 ; 29/// Helper types to present an offset column as array of collection sizes.; 30/// See RField<RNTupleCardinality<SizeT>> for details.; 31template <typename SizeT>; 32struct RNTupleCardinality {; 33 static_assert(std::is_same_v<SizeT, std::uint32_t> || std::is_same_v<SizeT, std::uint64_t>,; 34 ""RNTupleCardinality is only supported with std::uint32_t or std::uint64_t template parameters"");; 35 ; 36 using ValueType = SizeT;; 37 ; 38 RNTupleCardinality() : fValue(0) {}; 39 explicit constexpr RNTupleCardinality(ValueType value) : fValue(value) {}; 40 RNTupleCardinality &operator=(const ValueType value); 41 {; 42 fValue = value;; 43 return *this;; 44 }; 45 operator ValueType() const { return fValue; }; 46 ; 47 ValueType fValue;; 48};; 49 ; 50namespace Experimental {; 51 ; 52class RLogChannel;; 53/// Log channel for RNTuple diagnostics.; 54RLogChannel &NTupleLog();; 55 ; 56// clang-format off; 57/**; 58\class ROOT::Experimental::EColumnType; 59\ingroup NTuple; 60\brief The available trivial, native content types of a column; 61 ; 62More complex types, such as classes, get translated into columns of such simple types by the RField.; 63When changed, remember to update; 64 - RColumnElement::Generate(); 65 - RColumnElement::GetTypeName(); 66 - RColumnElement::GetValidBitRange(); 67 - RColumnElement template specializations / packing & unpacking; 68 - If necessary, endianess handling for the packing + unit test in ntuple_endian; 69 - RNTupleSerializer::[Des|S]erializeColumnType; 70*/; 71// clang-format on; 72enum class EColumnType {; 73 kUnknown = 0,; 74 // type for root columns of (nested) collections; offsets are relative to the current cluster; 75 kIndex64,; 76 kIndex32,; 77 // 96 bit column that is a pair of a kIndex64 and a 32bit dispatch tag to a column ID;; 78 // used to serialize std::variant.; 79 kSwitch,; 80 kByte,; 81 kChar,; 82 kBit,; 83 kReal64,; 84 kReal32,; 85 kReal16,; 86 kInt64,; 87 kUInt64,; 88 kInt32,; 89 kUInt32,; 90 kInt16,; 91 kUInt16,; 92 kInt8,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:2208,simpl,simple,2208,doc/master/RNTupleUtil_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html,1,['simpl'],['simple']
Usability,"{; 928 case 0: //No pointer && No array; 929 dictStream << "" "" << stlType.c_str() << "" &R__stl = "" << stlName.c_str() << "";"" << std::endl;; 930 break;; 931 case 1: //No pointer && array; 932 dictStream << "" "" << stlType.c_str() << "" &R__stl = "" << stlName.c_str() << ""[R__l];"" << std::endl;; 933 break;; 934 case 2: //pointer && No array; 935 dictStream << "" delete *"" << stlName.c_str() << "";"" << std::endl; 936 << "" *"" << stlName.c_str() << "" = new "" << stlType.c_str() << "";"" << std::endl; 937 << "" "" << stlType.c_str() << "" &R__stl = **"" << stlName.c_str() << "";"" << std::endl;; 938 break;; 939 case 3: //pointer && array; 940 dictStream << "" delete "" << stlName.c_str() << ""[R__l];"" << std::endl; 941 << "" "" << stlName.c_str() << ""[R__l] = new "" << stlType.c_str() << "";"" << std::endl; 942 << "" "" << stlType.c_str() << "" &R__stl = *"" << stlName.c_str() << ""[R__l];"" << std::endl;; 943 break;; 944 }; 945 ; 946 dictStream << "" R__stl.clear();"" << std::endl;; 947 ; 948 if (tcl1) {; 949 dictStream << "" TClass *R__tcl1 = TBuffer::GetClass(typeid("" << fulName1.c_str() << ""));"" << std::endl; 950 << "" if (R__tcl1==0) {"" << std::endl; 951 << "" Error(\"""" << stlName.c_str() << "" streamer\"",\""Missing the TClass object for ""; 952 << fulName1.c_str() << ""!\"");"" << std::endl; 953 << "" return;"" << std::endl; 954 << "" }"" << std::endl;; 955 }; 956 if (tcl2) {; 957 dictStream << "" TClass *R__tcl2 = TBuffer::GetClass(typeid("" << fulName2.c_str() << ""));"" << std::endl; 958 << "" if (R__tcl2==0) {"" << std::endl; 959 << "" Error(\"""" << stlName.c_str() << "" streamer\"",\""Missing the TClass object for ""; 960 << fulName2.c_str() << ""!\"");"" << std::endl; 961 << "" return;"" << std::endl; 962 << "" }"" << std::endl;; 963 }; 964 ; 965 dictStream << "" int R__i, R__n;"" << std::endl; 966 << "" R__b >> R__n;"" << std::endl;; 967 ; 968 if (stltype == kSTLvector) {; 969 dictStream << "" R__stl.reserve(R__n);"" << std::endl;; 970 }; 971 dictStream << "" for (R__i = 0; R__i < R__n; R__i++) {"" << std::endl;; 972 ; 973 ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:33516,clear,clear,33516,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['clear'],['clear']
Usability,"| ""SCAT"" | Draw a scatter plot (legacy draw option).|; 2339| ""COL"" | Draw a color plot. All the bins are painted even the empty bins (default).|; 2340| ""COLZ"" | Same as ""COL"". In addition the color palette is also drawn.|; 2341| ""0"" | When used with any COL options, the empty bins are not drawn.|; 2342| ""TEXT"" | Draw bin contents as text (format set via `gStyle->SetPaintTextFormat`).|; 2343| ""TEXTN"" | Draw bin names as text.|; 2344| ""TEXTnn"" | Draw bin contents as text at angle nn (0 < nn <= 90).|; 2345| ""L"" | Draw the bins boundaries as lines. The lines attributes are the TGraphs ones.|; 2346| ""P"" | Draw the bins boundaries as markers. The markers attributes are the TGraphs ones.|; 2347| ""F"" | Draw the bins boundaries as filled polygons. The filled polygons attributes are the TGraphs ones.|; 2348 ; 2349 ; 2350 ; 2351`TH2Poly` can be drawn as a color plot (option COL). `TH2Poly` bins can have any; 2352shapes. The bins are defined as graphs. The following macro is a very simple; 2353example showing how to book a TH2Poly and draw it.; 2354 ; 2355Begin_Macro(source); 2356{; 2357 auto ch2p1 = new TCanvas(""ch2p1"",""ch2p1"",600,400);; 2358 auto h2p = new TH2Poly();; 2359 h2p->SetName(""h2poly_name"");; 2360 h2p->SetTitle(""h2poly_title"");; 2361 double px1[] = {0, 5, 6};; 2362 double py1[] = {0, 0, 5};; 2363 double px2[] = {0, -1, -1, 0};; 2364 double py2[] = {0, 0, -1, 3};; 2365 double px3[] = {4, 3, 0, 1, 2.4};; 2366 double py3[] = {4, 3.7, 1, 3.7, 2.5};; 2367 h2p->AddBin(3, px1, py1);; 2368 h2p->AddBin(4, px2, py2);; 2369 h2p->AddBin(5, px3, py3);; 2370 h2p->Fill(0.1, 0.01, 3);; 2371 h2p->Fill(-0.5, -0.5, 7);; 2372 h2p->Fill(-0.7, -0.5, 1);; 2373 h2p->Fill(1, 3, 1.5);; 2374 double fx[] = {0.1, -0.5, -0.7, 1};; 2375 double fy[] = {0.01, -0.5, -0.5, 3};; 2376 double fw[] = {3, 1, 1, 1.5};; 2377 h2p->FillN(4, fx, fy, fw);; 2378 h2p->Draw(""col"");; 2379}; 2380End_Macro; 2381 ; 2382Rectangular bins are a frequent case. The special version of; 2383the `AddBin` method allows to defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:96231,simpl,simple,96231,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"|; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. ROOT::TExecutorCRTP<SubC>::Reduce; These set of methods combine all elements from a std::vector into a single value. Parameters. redfunca callable object, such as a lambda expression, an std::function, a functor object or a function that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:1264,simpl,simply,1264,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,2,['simpl'],['simply']
Usability,"|; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RFrame Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Holds an area where drawing on user coordinate-system can be performed. ; AuthorsAxel Naumann axel@.nosp@m.cern.nosp@m..ch Sergey Linev s.lin.nosp@m.ev@g.nosp@m.si.de ; Date2017-09-26 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 38 of file RFrame.hxx. Classes; class  RUserRanges;  ; class  RZoomRequest;  . Public Member Functions;  RFrame (TRootIOCtor *);  ; void GetClientRanges (unsigned connid, RUserRanges &ranges);  Return ranges configured for the client. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  ; virtual void UseStyle (const std::shared_ptr< RStyle > &style);  . Public Attributes; RAttrBorder border {this, ""border""};  ! frame border attributes ;  ; RAttrValue< bool > drawAxes {this, ""drawAxes"", false};  ! draw axes by frame ;  ; RAttrFill fill {this, ""fill""};  ! frame fill attributes ;  ; RAttrValue< bool > gridX {this, ""gridX"", false};  ! show grid for X axis ;  ; RAttrValue< bool > gridY {this, ""gridY"", false};  ! show grid for Y axis ;  ; RAttrMargins margins {this, ""margins""};  ! frame margins relative to pad ;  ; RAttrValue< bool > swapX {this, ""swapX"", false};  ! swap position of X axis ;  ; RAttrValue< bool > swapY {this, ""swapY"", false};  ! swap position of Y axis ;  ; RAttrValue< int > ticksX {this, ""ticksX"", 1};  ! X ticks drawing: 0 - off, 1 - normal, 2 - both sides, 3 - both sides with labels ;  ; RAttrValue< int > ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html:1140,Clear,ClearStyle,1140,doc/master/classROOT_1_1Experimental_1_1RFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html,1,['Clear'],['ClearStyle']
Usability,"} EVENTN;; static POINT point;; static EVENTN eventn;. // Create a ROOT Tree; TTree *tree = new TTree(""T"",""An example of ROOT tree with a few branches"");; tree->Branch(""point"",&point,""x:y:z"");; tree->Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree->Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;; static Float_t p[3];. //--------------------Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->::Rndm(1);. // Fill histograms; hpx->Fill(px);; hpxpy->Fill(px,py,1);; hprof->Fill(px,pz,1);. // Fill structures; p[0] = px;; p[1] = py;; p[2] = pz;; point.x = 10*(random-1);;; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;. // Fill the tree. For each event, save the 2 structures and 3 objects; // In this simple example, the objects hpx, hprof and hpxpy are slightly; // different from event to event. We expect a big compression factor!; tree->Fill();; }; //--------------End of the loop. tree->Print();. // Save all objects in this file; hfile.Write();. // Close the file. Note that this is automatically done when you leave; // the application.; hfile.Close();. return 0;; }. Function Members (Methods); public:. TTree(); TTree(const char* name, const char* title, Int_t splitlevel = 99); virtual~TTree(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidAddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*AddFriend(const char* treename, TFile* file); virtual TFriendElement*AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidAddTotBytes(Int_t tot); virtual voidAddZipByte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:10804,simpl,simple,10804,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,4,['simpl'],['simple']
Usability,"} EVENTN;; static POINT point;; static EVENTN eventn;. // Create a ROOT Tree; TTree *tree = new TTree(""T"",""An example of ROOT tree with a few branches"");; tree->Branch(""point"",&point,""x:y:z"");; tree->Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree->Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;; static Float_t p[3];. //--------------------Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->::Rndm(1);. // Fill histograms; hpx->Fill(px);; hpxpy->Fill(px,py,1);; hprof->Fill(px,pz,1);. // Fill structures; p[0] = px;; p[1] = py;; p[2] = pz;; point.x = 10*(random-1);;; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;. // Fill the tree. For each event, save the 2 structures and 3 objects; // In this simple example, the objects hpx, hprof and hpxpy are slightly; // different from event to event. We expect a big compression factor!; tree->Fill();; }; //--------------End of the loop. tree->Print();. // Save all objects in this file; hfile.Write();. // Close the file. Note that this is automatically done when you leave; // the application.; hfile.Close();. return 0;; }. Function Members (Methods); public:. TTreePlayer(); virtual~TTreePlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TVirtualIndex*BuildIndex(const TTree* T, const char* majorname, const char* minorname); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TTree*CopyTree(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:6736,simpl,simple,6736,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['simpl'],['simple']
Usability,"} EVENTN;; static POINT point;; static EVENTN eventn;. // Create a ROOT Tree; TTree *tree = new TTree(""T"",""An example of ROOT tree with a few branches"");; tree->Branch(""point"",&point,""x:y:z"");; tree->Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree->Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;; static Float_t p[3];. //--------------------Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->::Rndm(1);. // Fill histograms; hpx->Fill(px);; hpxpy->Fill(px,py,1);; hprof->Fill(px,pz,1);. // Fill structures; p[0] = px;; p[1] = py;; p[2] = pz;; point.x = 10*(random-1);;; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;. // Fill the tree. For each event, save the 2 structures and 3 objects; // In this simple example, the objects hpx, hprof and hpxpy are slightly; // different from event to event. We expect a big compression factor!; tree->Fill();; }; //--------------End of the loop. tree->Print();. // Save all objects in this file; hfile.Write();. // Close the file. Note that this is automatically done when you leave; // the application.; hfile.Close();. return 0;; }. Function Members (Methods); public:. virtual~TTree(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tAddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*AddFriend(const char* treename, TFile* file); virtual TFriendElement*AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidAddTotBytes(Int_t tot); virtual voidAddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:11523,simpl,simple,11523,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['simpl'],['simple']
Usability,"} EVENTN;; static POINT point;; static EVENTN eventn;. // Create a ROOT Tree; TTree *tree = new TTree(""T"",""An example of ROOT tree with a few branches"");; tree->Branch(""point"",&point,""x:y:z"");; tree->Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree->Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;; static Float_t p[3];. //--------------------Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->::Rndm(1);. // Fill histograms; hpx->Fill(px);; hpxpy->Fill(px,py,1);; hprof->Fill(px,pz,1);. // Fill structures; p[0] = px;; p[1] = py;; p[2] = pz;; point.x = 10*(random-1);;; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;. // Fill the tree. For each event, save the 2 structures and 3 objects; // In this simple example, the objects hpx, hprof and hpxpy are slightly; // different from event to event. We expect a big compression factor!; tree->Fill();; }; //--------------End of the loop. tree->Print();. // Save all objects in this file; hfile.Write();. // Close the file. Note that this is automatically done when you leave; // the application.; hfile.Close();. return 0;; }. Function Members (Methods); public:. virtual~TTree(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidAddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*AddFriend(const char* treename, TFile* file); virtual TFriendElement*AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidAddTotBytes(Int_t tot); virtual voidAddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTree.html:11547,simpl,simple,11547,root/html602/TTree.html,https://root.cern,https://root.cern/root/html602/TTree.html,1,['simpl'],['simple']
Usability,"}; 135 ; 136 /** Returns color alpha (opacity) as float from 0..1 */; 137 float GetAlphaFloat() const; 138 {; 139 return GetAlpha() / 255.;; 140 }; 141 ; 142 /** Set color as plain SVG name like ""white"" or ""lightblue"" */; 143 bool SetName(const std::string &name); 144 {; 145 fColor = name;; 146 if (!IsName()) {; 147 Clear();; 148 return false;; 149 }; 150 return true;; 151 }; 152 ; 153 void SetOrdinal(float val);; 154 float GetOrdinal() const;; 155 ; 156 /** Returns color as it stored as string */; 157 const std::string& AsString() const { return fColor; }; 158 ; 159 /** Set color as string */; 160 void SetColor(const std::string &col) { fColor = col; }; 161 ; 162 /** Return the Hue, Light, Saturation (HLS) definition of this RColor */; 163 bool GetHLS(float &hue, float &light, float &satur) const;; 164 ; 165 /** Set the Red Green and Blue (RGB) values from the Hue, Light, Saturation (HLS). */; 166 void SetHLS(float hue, float light, float satur);; 167 ; 168 std::string AsHex(bool with_alpha = false) const;; 169 std::string AsSVG() const;; 170 ; 171 void Clear(); 172 {; 173 fColor.clear();; 174 }; 175 ; 176 static const RColor &AutoColor();; 177 ; 178 R__DLLEXPORT static constexpr RGB_t kBlack{{0, 0, 0}};; 179 R__DLLEXPORT static constexpr RGB_t kGreen{{0, 0x80, 0}};; 180 R__DLLEXPORT static constexpr RGB_t kLime{{0, 0xFF, 0}};; 181 R__DLLEXPORT static constexpr RGB_t kAqua{{0, 0xFF, 0xFF}};; 182 R__DLLEXPORT static constexpr RGB_t kPurple{{0x80, 0, 0x80}};; 183 R__DLLEXPORT static constexpr RGB_t kGrey{{0x80, 0x80, 0x80}};; 184 R__DLLEXPORT static constexpr RGB_t kFuchsia{{0xFF, 0, 0xFF}};; 185 R__DLLEXPORT static constexpr RGB_t kNavy{{0, 0, 0x80}};; 186 R__DLLEXPORT static constexpr RGB_t kBlue{{0, 0, 0xff}};; 187 R__DLLEXPORT static constexpr RGB_t kTeal{{0, 0x80, 0x80}};; 188 R__DLLEXPORT static constexpr RGB_t kOlive{{0x80, 0x80, 0}};; 189 R__DLLEXPORT static constexpr RGB_t kSilver{{0xc0, 0xc0, 0xc0}};; 190 R__DLLEXPORT static constexpr RGB_t kMaroon{{0x80, 0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RColor_8hxx_source.html:5196,Clear,Clear,5196,doc/master/RColor_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RColor_8hxx_source.html,1,['Clear'],['Clear']
Usability,"}; 3892 if (!changedBin) return;; 3893 ; 3894 // Info(""HighlightBin"", ""histo: %p '%s'\txbin: %d, ybin: %d"",; 3895 // (void *)fH, fH->GetName(), fXHighlightBin, fYHighlightBin);; 3896 ; 3897 // paint highlight bin as box (recursive calls PaintHighlightBin); 3898 gPad->Modified(kTRUE);; 3899 gPad->Update();; 3900 ; 3901 // emit Highlighted() signal; 3902 if (gPad->GetCanvas()) gPad->GetCanvas()->Highlighted(gPad, fH, fXHighlightBin, fYHighlightBin);; 3903}; 3904 ; 3905////////////////////////////////////////////////////////////////////////////////; 3906/// Paint highlight bin as TBox object; 3907 ; 3908void THistPainter::PaintHighlightBin(Option_t * /*option*/); 3909{; 3910 // call from PaintTitle; 3911 ; 3912 if (!fH->IsHighlight()) return;; 3913 ; 3914 Double_t uxmin = gPad->GetUxmin();; 3915 Double_t uxmax = gPad->GetUxmax();; 3916 Double_t uymin = gPad->GetUymin();; 3917 Double_t uymax = gPad->GetUymax();; 3918 if (gPad->GetLogx()) {; 3919 uxmin = TMath::Power(10.0, uxmin);; 3920 uxmax = TMath::Power(10.0, uxmax);; 3921 }; 3922 if (gPad->GetLogy()) {; 3923 uymin = TMath::Power(10.0, uymin);; 3924 uymax = TMath::Power(10.0, uymax);; 3925 }; 3926 ; 3927 // testing specific possibility (after zoom, draw with ""same"", log, etc.); 3928 Double_t hcenter;; 3929 if (gPad->IsVertical()) {; 3930 hcenter = fXaxis->GetBinCenter(fXHighlightBin);; 3931 if ((hcenter < uxmin) || (hcenter > uxmax)) return;; 3932 } else {; 3933 hcenter = fYaxis->GetBinCenter(fXHighlightBin);; 3934 if ((hcenter < uymin) || (hcenter > uymax)) return;; 3935 }; 3936 if (fH->GetDimension() == 2) {; 3937 hcenter = fYaxis->GetBinCenter(fYHighlightBin);; 3938 if ((hcenter < uymin) || (hcenter > uymax)) return;; 3939 }; 3940 ; 3941 // paint X highlight bin (for 1D or 2D); 3942 Double_t hbx1, hbx2, hby1, hby2;; 3943 if (gPad->IsVertical()) {; 3944 hbx1 = fXaxis->GetBinLowEdge(fXHighlightBin);; 3945 hbx2 = fXaxis->GetBinUpEdge(fXHighlightBin);; 3946 hby1 = uymin;; 3947 hby2 = uymax;; 3948 } else {; 3949 hbx1 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:151877,ux,uxmin,151877,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"}; 415 ; 416//_________________________________________________________________________________________________; 417template <typename Architecture_t>; 418auto VGeneralLayer<Architecture_t>::UpdateWeights(const std::vector<Matrix_t> &weightGradients,; 419 const Scalar_t learningRate) -> void; 420{; 421 for (size_t i = 0; i < fWeights.size(); i++) {; 422 Architecture_t::ScaleAdd(fWeights[i], weightGradients[i], -learningRate);; 423 }; 424}; 425 ; 426//_________________________________________________________________________________________________; 427template <typename Architecture_t>; 428auto VGeneralLayer<Architecture_t>::UpdateBiases(const std::vector<Matrix_t> &biasGradients,; 429 const Scalar_t learningRate) -> void; 430{; 431 for (size_t i = 0; i < fBiases.size(); i++) {; 432 Architecture_t::ScaleAdd(fBiases[i], biasGradients[i], -learningRate);; 433 }; 434}; 435 ; 436//_________________________________________________________________________________________________; 437template <typename Architecture_t>; 438auto VGeneralLayer<Architecture_t>::UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients,; 439 const Scalar_t learningRate) -> void; 440{; 441 for (size_t i = 0; i < fWeightGradients.size(); i++) {; 442 Architecture_t::ScaleAdd(fWeightGradients[i], weightGradients[i], -learningRate);; 443 }; 444}; 445 ; 446//_________________________________________________________________________________________________; 447template <typename Architecture_t>; 448auto VGeneralLayer<Architecture_t>::UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients,; 449 const Scalar_t learningRate) -> void; 450{; 451 for (size_t i = 0; i < fBiasGradients.size(); i++) {; 452 Architecture_t::ScaleAdd(fBiasGradients[i], biasGradients[i], -learningRate);; 453 }; 454}; 455 ; 456//_________________________________________________________________________________________________; 457template <typename Architecture_t>; 458auto VGeneralLayer<Architecture_t>::CopyWeights(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:19753,learn,learningRate,19753,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],['learningRate']
Usability,"}; 47 virtual void UpdateFormulaLeaves(const TTree *parent) = 0;; 48 virtual void SetTree(TTree *T) = 0;; 49 ; 50 ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index; 51};; 52 ; 53#endif; 54 ; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TNamed.h; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TTreeFormulaUsed to pass a selection expression to the Tree drawing routine.Definition TTreeFormula.h:58; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TVirtualIndexAbstract interface for Tree Index.Definition TVirtualIndex.h:30; TVirtualIndex::UpdateFormulaLeavesvirtual void UpdateFormulaLeaves(const TTree *parent)=0; TVirtualIndex::GetMajorNamevirtual const char * GetMajorName() const =0; TVirtualIndex::GetEntryNumberWithIndexvirtual Long64_t GetEntryNumberWithIndex(Long64_t major, Long64_t minor) const =0; TVirtualIndex::TVirtualIndexTVirtualIndex()pointer to TreeDefinition TVirtualIndex.cxx:25; TVirtualIndex::~TVirtualIndex~TVirtualIndex() overrideDefinition TVirtualIndex.cxx:32; TVirtualIndex::GetEntryNumberFriendvirtual Long64_t GetEntryNumberFriend(const TTree *)=0; TVirtualIndex::GetTreevirtual TTree * GetTree() constDefinition TVirtualIndex.h:46; TVirtualIndex::Appendvirtual void Append(const TVirtualIndex *, bool delaySort=false)=0; TVirtualIndex::GetMinorNamevirtual const char * GetMinorName() const =0; TVirtualIndex::SetTreevirtual void SetTree(TTree *T)=0; TVirtualIndex::GetNvirtual Long64_t GetN() const =0; TVirtualIndex::IsValidForvirtual bool IsValidFor(const TTree *parent)=0; TVirtualIndex::GetEntryNumberWithBestIndexvirtual Long64_t GetEntryNumberWithBestIndex(Long64_t major, Long64_t minor) const =0; TVirtualIndex::fTreeTTree * fTreeDefinition TVirtualIndex.h:33. treetreeincTVirtualIndex.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualIndex_8h_source.html:3682,Guid,Guide,3682,doc/master/TVirtualIndex_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualIndex_8h_source.html,1,['Guid'],['Guide']
Usability,"}; 713 ; 714////////////////////////////////////////////////////////////////////////////////; 715/// Set current canvas & pad. Returns the new current pad,; 716/// or 0 in case of failure.; 717/// See TPad::cd() for an explanation of the parameter.; 718 ; 719TVirtualPad *TCanvas::cd(Int_t subpadnumber); 720{; 721 if (fCanvasID == -1) return nullptr;; 722 ; 723 TPad::cd(subpadnumber);; 724 ; 725 // in case doublebuffer is off, draw directly onto display window; 726 if (!IsBatch() && !IsWeb() && !fDoubleBuffer); 727 gVirtualX->SelectWindow(fCanvasID);//Ok, does not matter for glpad.; 728 ; 729 return gPad;; 730}; 731 ; 732////////////////////////////////////////////////////////////////////////////////; 733/// Remove all primitives from the canvas.; 734/// If option ""D"" is specified, direct sub-pads are cleared but not deleted.; 735/// This option is not recursive, i.e. pads in direct sub-pads are deleted.; 736 ; 737void TCanvas::Clear(Option_t *option); 738{; 739 if (fCanvasID == -1) return;; 740 ; 741 R__LOCKGUARD(gROOTMutex);; 742 ; 743 TString opt = option;; 744 opt.ToLower();; 745 if (opt.Contains(""d"")) {; 746 // clear subpads, but do not delete pads in case the canvas; 747 // has been divided (note: option ""D"" is propagated so could cause; 748 // conflicts for primitives using option ""D"" for something else); 749 if (fPrimitives) {; 750 TIter next(fPrimitives);; 751 TObject *obj;; 752 while ((obj=next())) {; 753 obj->Clear(option);; 754 }; 755 }; 756 } else {; 757 //default, clear everything in the canvas. Subpads are deleted; 758 TPad::Clear(option); //Remove primitives from pad; 759 }; 760 ; 761 fSelected = nullptr;; 762 fClickSelected = nullptr;; 763 fSelectedPad = nullptr;; 764 fClickSelectedPad = nullptr;; 765}; 766 ; 767////////////////////////////////////////////////////////////////////////////////; 768/// Emit pad Cleared signal.; 769 ; 770void TCanvas::Cleared(TVirtualPad *pad); 771{; 772 Emit(""Cleared(TVirtualPad*)"", (Longptr_t)pad);; 773}; 774 ; 775////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:24110,Clear,Clear,24110,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Clear'],['Clear']
Usability,"}; 748 }; 749 ; 750 // use copy-constructor of TMethodCall; 751 // if c++-14 could use std::make_unique; 752 TMethodCall *m = (fMethod) ? new TMethodCall(*fMethod) : nullptr;; 753 fnew.fMethod.reset(m);; 754 ; 755 fnew.fFuncPtr = fFuncPtr;; 756 fnew.fGradGenerationInput = fGradGenerationInput;; 757 fnew.fHessGenerationInput = fHessGenerationInput;; 758 fnew.fGradFuncPtr = fGradFuncPtr;; 759 fnew.fHessFuncPtr = fHessFuncPtr;; 760 ; 761}; 762 ; 763////////////////////////////////////////////////////////////////////////////////; 764/// Clear the formula setting expression to empty and reset the variables and; 765/// parameters containers.; 766 ; 767void TFormula::Clear(Option_t * ); 768{; 769 fNdim = 0;; 770 fNpar = 0;; 771 fNumber = 0;; 772 fFormula = """";; 773 fClingName = """";; 774 ; 775 fMethod.reset();; 776 ; 777 fClingVariables.clear();; 778 fClingParameters.clear();; 779 fReadyToExecute = false;; 780 fClingInitialized = false;; 781 fAllParametersSetted = false;; 782 fFuncs.clear();; 783 fVars.clear();; 784 fParams.clear();; 785 fConsts.clear();; 786 fFunctionsShortcuts.clear();; 787 ; 788 // delete linear parts; 789 int nLinParts = fLinearParts.size();; 790 if (nLinParts > 0) {; 791 for (int i = 0; i < nLinParts; ++i) delete fLinearParts[i];; 792 }; 793 fLinearParts.clear();; 794 ; 795}; 796 ; 797// Returns nullptr on failure.; 798static std::unique_ptr<TMethodCall>; 799prepareMethod(bool HasParameters, bool HasVariables, const char* FuncName,; 800 bool IsVectorized, bool AddCladArrayRef = false) {; 801 std::unique_ptr<TMethodCall>; 802 Method = std::make_unique<TMethodCall>();; 803 ; 804 TString prototypeArguments = """";; 805 if (HasVariables || HasParameters) {; 806 if (IsVectorized); 807 prototypeArguments.Append(""ROOT::Double_v*"");; 808 else; 809 prototypeArguments.Append(""Double_t*"");; 810 }; 811 auto AddDoublePtrParam = [&prototypeArguments]() {; 812 prototypeArguments.Append("","");; 813 prototypeArguments.Append(""Double_t*"");; 814 };; 815 if (HasParameters); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:28517,clear,clear,28517,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['clear'],['clear']
Usability,"};  ; enum  EContext_t { ;   kUNKNOWN_CONTEXT =-1; , kSYS_UserName; , kSYS_EnvVar; , kCINT_stdout; , ;   kCINT_stderr; , kCINT_stdin; , kCINT_Edit; , kCINT_Load; , ;   kCINT_Exec; , kCINT_EXec; , kCINT_pragma; , kCINT_includeSYS; , ;   kCINT_includePWD; , kCINT_cpp; , kROOT_Load; , kSYS_FileName; , ;   kCXX_NewProto; , kCXX_ConstructorProto; , kCXX_ScopeProto; , kCXX_DirectProto; , ;   kCXX_IndirectProto; , kCXX_ScopeMember; , kCXX_DirectMember; , kCXX_IndirectMember; , ;   kCXX_Global; , kCXX_GlobalProto; , kNUM_PAT. };  ; typedef TList TContainer;  ; typedef TListIter TContIter;  . Public Member Functions;  TTabCom ();  Default constructor. ;  ; virtual ~TTabCom ();  ; void ClearAll ();  clears all lists except for user names and system include files. ;  ; void ClearClasses ();  Clear classes and namespace collections. ;  ; void ClearCppDirectives ();  Forget all Cpp directives seen so far. ;  ; void ClearEnvVars ();  Forget all environment variables seen so far. ;  ; void ClearFiles ();  Close all files. ;  ; void ClearGlobalFunctions ();  Forget all global functions seen so far. ;  ; void ClearGlobals ();  Forget all global variables seen so far. ;  ; void ClearPragmas ();  Forget all pragmas seen so far. ;  ; void ClearSysIncFiles ();  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path"" should be initialized with a colon separated list of system directories ;  ; TCollection * GetListOfGlobalFunctions ();  Return the list of global functions. ;  ; const TSeqCollection * GetListOfGlobals ();  Return the list of globals. ;  ; const TSeqCollection * GetListOfPragmas ();  Return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:1379,Clear,ClearFiles,1379,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearFiles']
Usability,"};  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TPacketizer::TFileStat:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFileStat(). TPacketizer::TFileStat::TFileStat ; (; TFileNode * ; node, . TDSetElement * ; elem . ). Definition at line 85 of file TPacketizer.cxx. Member Function Documentation. ◆ GetElement(). TDSetElement * TPacketizer::TFileStat::GetElement ; (; ); const. inline . Definition at line 79 of file TPacketizer.cxx. ◆ GetNextEntry(). Long64_t TPacketizer::TFileStat::GetNextEntry ; (; ); const. inline . Definition at line 80 of file TPacketizer.cxx. ◆ GetNode(). TFileNode * TPacketizer::TFileStat::GetNode ; (; ); const. inline . Definition at line 78 of file TPacketizer.cxx. ◆ IsDone(). Bool_t TPacketizer::TFileStat::IsDone ; (; ); const. inline . Definition at line 76 of file TPacketizer.cxx. ◆ MoveNextEntry(). void TPacketizer::TFileStat::MoveNextEntry ; (; Long64_t ; step). inline . Definition at line 81 of file TPacketizer.cxx. ◆ SetDone(). void TPacketizer::TFileStat::SetDone ; (; ). inline . Definition at line 77 of file TPacketizer.cxx. Member Data Documentation. ◆ fElement. TDSetElement* TPacketizer::TFileStat::fElement. private . Definition at line 70 of file TPacketizer.cxx. ◆ fIsDone. Bool_t TPacketizer::TFileStat::fIsDone. private . Definition at line 68 of file TPacketizer.cxx. ◆ fNextEntry. Long64_t TPacketizer::TFileStat::fNextEntry. private . Definition at line 71 of file TPacketizer.cxx. ◆ fNode. TFileNode* TPacketizer::TFileStat::fNode. private . Definition at line 69 of file TPacketizer.cxx. proof/proofplayer/src/TPacketizer.cxx. TPacketizerTFileStat. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileStat.html:11546,Guid,Guide,11546,doc/master/classTPacketizer_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileStat.html,1,['Guid'],['Guide']
Usability,"};; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char *pool); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char *cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char *vmname, const char *cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char *pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCondor.html:6836,Resume,Resume,6836,root/html526/TCondor.html,https://root.cern,https://root.cern/root/html526/TCondor.html,2,['Resume'],['Resume']
Usability,"}_{P-1}; \end{array}\right]; = \left[; \begin{array}{cccc}; \mathbf{e}_{0_0} & \mathbf{e}_{1_0} & \cdots & \mathbf{e}_{{P-1}_0}\\; \mathbf{e}_{0_1} & \mathbf{e}_{1_1} & \cdots & \mathbf{e}_{{P-1}_1}\\; \vdots & \vdots & \ddots & \vdots \\; \mathbf{e}_{0_{P-1}} & \mathbf{e}_{1_{P-1}} & \cdots & \mathbf{e}_{{P-1}_{P-1}}\\; \end{array}\right]; \]. This is an orthogonal transformation, or rotation, of the pattern space and feature selection results in ignoring certain coordinates in the transformed space.; Christian Holm August 2000, CERN ; Definition at line 21 of file TPrincipal.h. Public Member Functions;  TPrincipal ();  Empty constructor. Do not use. ;  ;  TPrincipal (Long64_t nVariables, Option_t *opt=""ND"");  Constructor. ;  ;  ~TPrincipal () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x);  Add a data point and update the covariance matrix. ;  ; void Browse (TBrowser *b) override;  Browse the TPrincipal object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear the data in Object. ;  ; const TMatrixD * GetCovarianceMatrix () const;  Return the covariance matrix. ;  ; const TVectorD * GetEigenValues () const;  ; const TMatrixD * GetEigenVectors () const;  ; TList * GetHistograms () const;  ; const TVectorD * GetMeanValues () const;  ; const Double_t * GetRow (Long64_t row);  Return a row of the user supplied data. ;  ; const TVectorD * GetSigmas () const;  ; const TVectorD * GetUserData () const;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual void MakeCode (const char *filename=""pca"", Option_t *option="""");  Generates the file <filename>, with .C appended if it does argument doesn't end in .cxx or .C. ;  ; virtual void MakeHistograms (const char *name=""pca"", Option_t *option=""epsdx"");  Make histograms of the result of the analysis. ;  ; virtual void MakeMethods (const char *classname=""PCA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:8348,Clear,Clear,8348,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,2,['Clear'],['Clear']
Usability,"~BinarySearchTree ; (; void ; ). virtual . destructor ; Definition at line 92 of file BinarySearchTree.cxx. Member Function Documentation. ◆ CalcStatistics(). void TMVA::BinarySearchTree::CalcStatistics ; (; TMVA::Node * ; n = nullptr). calculate basic statistics (mean, rms for each variable) ; Definition at line 430 of file BinarySearchTree.cxx. ◆ Class(). static TClass * TMVA::BinarySearchTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::BinarySearchTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::BinarySearchTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 173 of file BinarySearchTree.h. ◆ ClassName(). virtual const char * TMVA::BinarySearchTree::ClassName ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 81 of file BinarySearchTree.h. ◆ Clear(). void TMVA::BinarySearchTree::Clear ; (; TMVA::Node * ; n = nullptr). clear nodes ; Definition at line 354 of file BinarySearchTree.cxx. ◆ CreateFromXML(). TMVA::BinarySearchTree * TMVA::BinarySearchTree::CreateFromXML ; (; void * ; node, . UInt_t ; tmva_Version_Code = 262657 . ). static . re-create a new tree (decision tree or search tree) from XML ; Definition at line 103 of file BinarySearchTree.cxx. ◆ CreateNode(). virtual Node * TMVA::BinarySearchTree::CreateNode ; (; UInt_t ; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 78 of file BinarySearchTree.h. ◆ CreateTree(). virtual BinaryTree * TMVA::BinarySearchTree::CreateTree ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 79 of file BinarySearchTree.h. ◆ DeclFileName(). static const char * TMVA::BinarySearchTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file BinarySearchTree.h. ◆ DestroyNode(). void TMVA::BinarySearchTree::Destr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:9218,Clear,Clear,9218,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['Clear'],['Clear']
Usability,"~RCStringTransformation () override=default;  ; RResult< void > Transform (const RImportBranch &branch, RImportField &field) final;  ;  Public Member Functions inherited from ROOT::Experimental::RNTupleImporter::RImportTransformation;  RImportTransformation (std::size_t branchIdx, std::size_t fieldIdx);  ; virtual ~RImportTransformation ()=default;  . Additional Inherited Members;  Public Attributes inherited from ROOT::Experimental::RNTupleImporter::RImportTransformation; std::size_t fImportBranchIdx = 0;  ; std::size_t fImportFieldIdx = 0;  . Inheritance diagram for ROOT::Experimental::RNTupleImporter::RCStringTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RCStringTransformation(). ROOT::Experimental::RNTupleImporter::RCStringTransformation::RCStringTransformation ; (; std::size_t ; b, . std::size_t ; f . ). inline . Definition at line 197 of file RNTupleImporter.hxx. ◆ ~RCStringTransformation(). ROOT::Experimental::RNTupleImporter::RCStringTransformation::~RCStringTransformation ; (; ). overridedefault . Member Function Documentation. ◆ Transform(). ROOT::Experimental::RResult< void > ROOT::Experimental::RNTupleImporter::RCStringTransformation::Transform ; (; const RImportBranch & ; branch, . RImportField & ; field . ). finalvirtual . Implements ROOT::Experimental::RNTupleImporter::RImportTransformation.; Definition at line 73 of file RNTupleImporter.cxx. Collaboration diagram for ROOT::Experimental::RNTupleImporter::RCStringTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following files:; tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx; tree/ntupleutil/v7/src/RNTupleImporter.cxx. ROOTExperimentalRNTupleImporterRCStringTransformation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RCStringTransformation.html:2449,Guid,Guide,2449,doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RCStringTransformation.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RCStringTransformation.html,1,['Guid'],['Guide']
Usability,"~RooAbsArg(); Destructor. void setDirtyInhibit(Bool_t flag); Control global dirty inhibit mode. When set to true no value or shape dirty; flags are propagated and cache is always considered to be dirty. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's value and/or shape. void addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register a list of RooAbsArg as servers to us by calls; addServer() for each arg in the list. void removeServer(RooAbsArg& server, Bool_t force = kFALSE); Unregister another RooAbsArg as a server to us, ie, declare that; we no longer depend on its value and shape. void replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); Replace 'oldServer' with 'newServer'. void change",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:19076,clear,clear,19076,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,4,['clear'],['clear']
Usability,"~TF1Data () override;  TF1 default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void Streamer (TBuffer &b, Int_t version, UInt_t start, UInt_t count, const TClass *onfile_class=nullptr);  specialized streamer function being able to read old TF1 versions as TF1Data in memory ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::v5::TFormula;  TFormula ();  Formula default constructor. ;  ;  TFormula (const char *name, const char *formula);  Normal Formula constructor. ;  ;  TFormula (const TFormula &formula);  Default constructor. ;  ;  ~TFormula () override;  Formula default destructor. ;  ; virtual void Analyze (const char *schain, Int_t &err, Int_t offset=0);  Analyze a sub-expression in one formula. ;  ; virtual Bool_t AnalyzeFunction (TString &chaine, Int_t &err, Int_t offset=0);  Check if the chain as function call. ;  ; void Clear (Option_t *option="""") override;  Resets the objects. ;  ; virtual Int_t Compile (const char *expression="""");  Compile expression already stored in fTitle. ;  ; void Copy (TObject &formula) const override;  Copy this formula. ;  ; virtual char * DefinedString (Int_t code);  Return address of string corresponding to special code. ;  ; virtual Double_t DefinedValue (Int_t code);  Return value corresponding to special code. ;  ; virtual Int_t DefinedVariable (TString &variable, Int_t &action);  Check if expression is in the list of defined variables. ;  ; virtual Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  Evaluate this formula. ;  ; virtual Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr);  ; virtual Double_t EvalParOld (const Double_t *x, const Double_t *params=nullptr);  Evaluate this formula. ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  Reconstruct the formula expression from the internal TFormula member variables. ;  ; virtual con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html:1377,Clear,Clear,1377,doc/master/structROOT_1_1v5_1_1TF1Data.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html,1,['Clear'],['Clear']
Usability,"~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. TGWidget(const TGWidget& tgw); Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGWidget.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGWidget.html:1537,Clear,ClearFlags,1537,root/html528/TGWidget.html,https://root.cern,https://root.cern/root/html528/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. TGWidget(const TGWidget& tgw); Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGWidget.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGWidget.html:1537,Clear,ClearFlags,1537,root/html530/TGWidget.html,https://root.cern,https://root.cern/root/html530/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. TGWidget(const TGWidget& tgw); Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGWidget.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGWidget.html:1537,Clear,ClearFlags,1537,root/html532/TGWidget.html,https://root.cern,https://root.cern/root/html532/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,~TSessionQueryFrame ; (; ). override . Destructor. ; Definition at line 2388 of file TSessionViewer.cxx. Member Function Documentation. ◆ Build(). void TSessionQueryFrame::Build ; (; TSessionViewer * ; gui). Build query information frame. ; Definition at line 2396 of file TSessionViewer.cxx. ◆ Class(). static TClass * TSessionQueryFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSessionQueryFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSessionQueryFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 448 of file TSessionViewer.h. ◆ DeclFileName(). static const char * TSessionQueryFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 448 of file TSessionViewer.h. ◆ Feedback(). void TSessionQueryFrame::Feedback ; (; TList * ; objs). Feedback function connected to Feedback signal. ; Used to update feedback histograms. ; Definition at line 2550 of file TSessionViewer.cxx. ◆ GetQueryEditFrame(). TEditQueryFrame * TSessionQueryFrame::GetQueryEditFrame ; (; ); const. inline . Definition at line 419 of file TSessionViewer.h. ◆ GetStatsCanvas(). TCanvas * TSessionQueryFrame::GetStatsCanvas ; (; ); const. inline . Definition at line 418 of file TSessionViewer.h. ◆ GetTab(). TGTab * TSessionQueryFrame::GetTab ; (; ); const. inline . Definition at line 420 of file TSessionViewer.h. ◆ IndicateStop(). void TSessionQueryFrame::IndicateStop ; (; Bool_t ; aborted). Indicate that Cancel or Stop was clicked. ; Definition at line 2878 of file TSessionViewer.cxx. ◆ IsA(). TClass * TSessionQueryFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 448 of file TSessionViewer.h. ◆ Modified(). void TSessionQueryFrame::Modified ; (; Bool_t ; mod = kTRUE). Notify chan,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:34408,Feedback,Feedback,34408,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,2,['Feedback'],['Feedback']
Usability,  TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ;  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ;  TMVA_SOFIE_GNN.py;  ;  TMVA_SOFIE_GNN_Application.C;  ;  TMVA_SOFIE_GNN_Parser.py;  ;  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ;  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ;  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ;  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ;  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ;  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ;  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:3035,simpl,simple,3035,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['simpl'],['simple']
Usability," . ). Constructor from a translation specified by X,Y,Z and a pointer to a rotation. ; The rotation will not be owned by this. ; Definition at line 1746 of file TGeoMatrix.cxx. ◆ TGeoCombiTrans() [7/7]. TGeoCombiTrans::TGeoCombiTrans ; (; const char * ; name, . Double_t ; dx, . Double_t ; dy, . Double_t ; dz, . TGeoRotation * ; rot . ). Named ctor. ; Definition at line 1756 of file TGeoMatrix.cxx. ◆ ~TGeoCombiTrans(). TGeoCombiTrans::~TGeoCombiTrans ; (; ). override . destructor ; Definition at line 1841 of file TGeoMatrix.cxx. Member Function Documentation. ◆ Class(). static TClass * TGeoCombiTrans::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoCombiTrans::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoCombiTrans::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 365 of file TGeoMatrix.h. ◆ Clear(). void TGeoCombiTrans::Clear ; (; Option_t * ; option = """"). overridevirtual . Reset translation/rotation to identity. ; Reimplemented from TObject.; Reimplemented in TGeoGenTrans.; Definition at line 1852 of file TGeoMatrix.cxx. ◆ DeclFileName(). static const char * TGeoCombiTrans::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 365 of file TGeoMatrix.h. ◆ GetRotation(). TGeoRotation * TGeoCombiTrans::GetRotation ; (; ); const. inline . Definition at line 359 of file TGeoMatrix.h. ◆ GetRotationMatrix(). const Double_t * TGeoCombiTrans::GetRotationMatrix ; (; ); const. overridevirtual . get the rotation array ; Implements TGeoMatrix.; Definition at line 2213 of file TGeoMatrix.cxx. ◆ GetScale(). const Double_t * TGeoCombiTrans::GetScale ; (; ); const. inlineoverridevirtual . Implements TGeoMatrix.; Reimplemented in TGeoGenTrans.; Definition at line 363 of file TGeoMatrix.h. ◆ GetTranslation(). const Double_t * TGeoCombiTrans::GetTranslation ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCombiTrans.html:19639,Clear,Clear,19639,doc/master/classTGeoCombiTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html,1,['Clear'],['Clear']
Usability," . );    ROTL16(v, 16 - (n)). Definition at line 56 of file RSha256.hxx. ◆ ROTR32. #define ROTR32; (;  ; v, .  ; n . );    ROTL32(v, 32 - (n)). Definition at line 46 of file RSha256.hxx. ◆ ROTR64. #define ROTR64; (;  ; v, .  ; n . );    ROTL64(v, 64 - (n)). Definition at line 47 of file RSha256.hxx. ◆ ROTR8. #define ROTR8; (;  ; v, .  ; n . );    ROTL8(v, 8 - (n)). Definition at line 55 of file RSha256.hxx. ◆ RX_8. #define RX_8; (;  ; i). Value: R(a, b, c, d, e, f, g, h, i); \; R(h, a, b, c, d, e, f, g, (i + 1)); \; R(g, h, a, b, c, d, e, f, (i + 2)); \; R(f, g, h, a, b, c, d, e, (i + 3)); \; R(e, f, g, h, a, b, c, d, (i + 4)); \; R(d, e, f, g, h, a, b, c, (i + 5)); \; R(c, d, e, f, g, h, a, b, (i + 6)); \; R(b, c, d, e, f, g, h, a, (i + 7)); R#define R(a, b, c, d, e, f, g, h, i)Definition RSha256.hxx:110. Definition at line 115 of file RSha256.hxx. ◆ S0. #define S0; (;  ; x);    (ROTR32(x, 2) ^ ROTR32(x, 13) ^ ROTR32(x, 22)). Definition at line 88 of file RSha256.hxx. ◆ s0. #define s0; (;  ; x);    (ROTR32(x, 7) ^ ROTR32(x, 18) ^ (x >> 3)). Definition at line 90 of file RSha256.hxx. ◆ S1. #define S1; (;  ; x);    (ROTR32(x, 6) ^ ROTR32(x, 11) ^ ROTR32(x, 25)). Definition at line 89 of file RSha256.hxx. ◆ s1. #define s1; (;  ; x);    (ROTR32(x, 17) ^ ROTR32(x, 19) ^ (x >> 10)). Definition at line 91 of file RSha256.hxx. ◆ SHA256_DIGEST_SIZE. #define SHA256_DIGEST_SIZE   32. Definition at line 58 of file RSha256.hxx. ◆ U16V. #define U16V; (;  ; v);    ((uint16_t)(v)&0xFFFFU). Definition at line 37 of file RSha256.hxx. ◆ U32V. #define U32V; (;  ; v);    ((uint32_t)(v)&0xFFFFFFFFU). Definition at line 38 of file RSha256.hxx. ◆ U64V. #define U64V; (;  ; v);    ((uint64_t)(v)&0xFFFFFFFFFFFFFFFFU). Definition at line 39 of file RSha256.hxx. ◆ U8V. #define U8V; (;  ; v);    ((uint8_t)(v)&0xFFU). Definition at line 36 of file RSha256.hxx. corefoundationresROOTRSha256.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RSha256_8hxx.html:8225,Guid,Guide,8225,doc/v632/RSha256_8hxx.html,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx.html,1,['Guid'],['Guide']
Usability," . Protected Types; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  . Protected Member Functions; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the class being proxied. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:9978,clear,clear,9978,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['clear'],['clear']
Usability," ; B). static . Definition at line 128 of file ActivationFunctions.cu. ◆ TanhDerivative(). template<typename AReal = Float_t> . void TMVA::DNN::TCuda< AFloat >::TanhDerivative ; (; Tensor_t & ; B, . const Tensor_t & ; A . ). static . Definition at line 141 of file ActivationFunctions.cu. ◆ TransposeMultiply() [1/3]. template<typename AReal = Float_t> . static void TMVA::DNN::TCuda< AReal >::TransposeMultiply ; (; Matrix_t & ; output, . const Matrix_t & ; input, . const Matrix_t & ; Weights, . Scalar_t ; alpha = 1.0, . Scalar_t ; beta = 0. . ). static . Matrix multiplication of two matrices A and B^T (transposed) with the result being written into C. . ◆ TransposeMultiply() [2/3]. void TMVA::DNN::TCuda< double >::TransposeMultiply ; (; TCudaMatrix< double > & ; C, . const TCudaMatrix< double > & ; A, . const TCudaMatrix< double > & ; B, . double ; alpha, . double ; beta . ). Definition at line 109 of file Arithmetic.cu. ◆ TransposeMultiply() [3/3]. void TMVA::DNN::TCuda< float >::TransposeMultiply ; (; TCudaMatrix< float > & ; C, . const TCudaMatrix< float > & ; A, . const TCudaMatrix< float > & ; B, . float ; alpha, . float ; beta . ). Definition at line 82 of file Arithmetic.cu. Member Data Documentation. ◆ fgRandomGen. template<typename AFloat > . TRandom * TMVA::DNN::TCuda< AFloat >::fgRandomGen = nullptr. staticprivate . Definition at line 67 of file Cuda.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h; tmva/tmva/src/DNN/Architectures/Cuda/ActivationFunctions.cu; tmva/tmva/src/DNN/Architectures/Cuda/Arithmetic.cu; tmva/tmva/src/DNN/Architectures/Cuda/Initialization.cu; tmva/tmva/src/DNN/Architectures/Cuda/LossFunctions.cu; tmva/tmva/src/DNN/Architectures/Cuda/OutputFunctions.cu; tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu; tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu; tmva/tmva/src/DNN/Architectures/Cuda/Regularization.cu. TMVADNNTCuda. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html:74194,Guid,Guide,74194,doc/master/classTMVA_1_1DNN_1_1TCuda.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html,1,['Guid'],['Guide']
Usability," ; Bool_t HandleTimer (TTimer *t) override;  Handle cursor blink timer. ;  ; Bool_t HasMarkedText () const;  ; Bool_t HasOwnFont () const;  ; void Home (Bool_t mark=kFALSE);  Moves the text cursor to the left end of the line. ;  ; virtual void Insert (const char *);  Removes any currently selected text, inserts newText, sets it as the new contents of the text entry. ;  ; virtual void InsertText (const char *text, Int_t pos);  Inserts text at position pos, clears the selection and moves the cursor to the end of the line. ;  ; TClass * IsA () const override;  ; Bool_t IsEdited () const;  ; Bool_t IsFrameDrawn () const;  ; void Layout () override;  ; void MarkWord (Int_t pos);  Marks the word nearest to cursor position. ;  ; Int_t MaxMark () const;  ; Int_t MinMark () const;  ; void NewMark (Int_t pos);  New character mark at position pos. ;  ; void Remove ();  Deletes all characters on the right side of the cursor. ;  ; virtual void RemoveText (Int_t start, Int_t end);  Removes text at the range, clears the selection and moves the cursor to the end of the line. ;  ; virtual void ReturnPressed ();  This signal is emitted when the return or enter key is pressed. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a text entry widget as a C++ statement(s) on output stream out. ;  ; virtual void SelectAll ();  Selects all text (i.e. ;  ; virtual void SetAlignment (ETextJustification mode=kTextLeft);  Sets the alignment of the text entry. ;  ; virtual void SetCursorPosition (Int_t pos);  Set the cursor position to newPos. ;  ; virtual void SetDefaultSize (UInt_t w, UInt_t h);  Set the default / minimal size of the widget. ;  ; virtual void SetEchoMode (EEchoMode mode=kNormal);  The echo modes available are: ;  ; void SetEdited (Bool_t flag=kTRUE);  ; void SetEnabled (Bool_t flag=kTRUE);  ; virtual void SetFocus ();  Set focus to this text entry. ;  ; virtual void SetFont (const char *fontName, Bool_t local=kTRUE);  Changes text font specified by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:10612,clear,clears,10612,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clears']
Usability," ; Bool_t HandleTimer (TTimer *t) override;  Handle cursor blink timer. ;  ; Bool_t HasMarkedText () const;  ; Bool_t HasOwnFont () const;  ; void Home (Bool_t mark=kFALSE);  Moves the text cursor to the left end of the line. ;  ; virtual void Insert (const char *);  Removes any currently selected text, inserts newText, sets it as the new contents of the text entry. ;  ; virtual void InsertText (const char *text, Int_t pos);  Inserts text at position pos, clears the selection and moves the cursor to the end of the line. ;  ; TClass * IsA () const override;  ; Bool_t IsEdited () const;  ; Bool_t IsFrameDrawn () const;  ; void Layout () override;  ; void MarkWord (Int_t pos);  Marks the word nearest to cursor position. ;  ; Int_t MaxMark () const;  ; Int_t MinMark () const;  ; void NewMark (Int_t pos);  New character mark at position pos. ;  ; void Remove ();  Deletes all characters on the right side of the cursor. ;  ; virtual void RemoveText (Int_t start, Int_t end);  Removes text at the range, clears the selection and moves the cursor to the end of the line. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a text entry widget as a C++ statement(s) on output stream out. ;  ; virtual void SelectAll ();  Selects all text (i.e. ;  ; virtual void SetAlignment (ETextJustification mode=kTextLeft);  Sets the alignment of the text entry. ;  ; virtual void SetCursorPosition (Int_t pos);  Set the cursor position to newPos. ;  ; virtual void SetDefaultSize (UInt_t w, UInt_t h);  Set the default / minimal size of the widget. ;  ; virtual void SetEchoMode (EEchoMode mode=kNormal);  The echo modes available are: ;  ; void SetEdited (Bool_t flag=kTRUE);  ; void SetEnabled (Bool_t flag=kTRUE);  ; virtual void SetFocus ();  Set focus to this text entry. ;  ; virtual void SetFont (const char *fontName, Bool_t local=kTRUE);  Changes text font specified by name. ;  ; virtual void SetFont (FontStruct_t font, Bool_t local=kTRUE);  Changes text font. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:8809,clear,clears,8809,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,1,['clear'],['clears']
Usability," ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:4759,Undo,UndockWindow,4759,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,2,['Undo'],"['Undock', 'UndockWindow']"
Usability," ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:4843,Undo,UndockWindowDestroySlot,4843,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,2,['Undo'],"['Undock', 'UndockWindowDestroySlot']"
Usability," ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Double_t AdaBoost (MethodBase *method, Bool_t useYesNoLeaf);  the standard (discrete or real) AdaBoost algorithm ;  ; Double_t Bagging ();  Bagging or Bootstrap boosting, gives new random poisson weight for every event. ;  ; Double_t CalcMethodWeight ();  ; void CalcMVAValues ();  ; void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ClearAll ();  ; void CreateMVAHistorgrams ();  ; MethodBase * CurrentMethod ();  ; UInt_t CurrentMethodIdx ();  ; void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:26925,Clear,ClearAll,26925,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['Clear'],['ClearAll']
Usability," ; Long64_t GetFirst () const;  ; Long64_t GetLast () const;  ; const char * GetObject () const;  Get the object name, with path stripped off. ;  ; Long64_t GetTotBytes () const;  ; Long64_t GetZipBytes () const;  ; TClass * IsA () const override;  ; Bool_t IsTree () const;  ; void Print (Option_t *options="""") const override;  Print information about this object. ;  ; void SetEntries (Long64_t entries);  ; void SetFirst (Long64_t first);  ; void SetLast (Long64_t last);  ; void SetTotBytes (Long64_t tot);  ; void SetZipBytes (Long64_t zip);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileInfoMeta.html:2759,Clear,Clear,2759,doc/master/classTFileInfoMeta.html,https://root.cern,https://root.cern/doc/master/classTFileInfoMeta.html,1,['Clear'],['Clear']
Usability," ; TClass * IsA () const override;  ; bool IsIn (Double_t evtval);  Evaluate if the given value is within the range or not. ;  ; void Paint (Option_t *options) override;  Paint a TParallelCoordRange. ;  ; void Print (Option_t *options) const override;  Print info about the range. ;  ; virtual void SendToBack ();  Make the selection which owns the range to be drawn under all the others. ;  ; void SetLineColor (Color_t col) override;  Set the selection line color. ;  ; void SetLineWidth (Width_t wid) override;  Set the selection line width. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordRange.html:3026,Clear,Clear,3026,doc/master/classTParallelCoordRange.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordRange.html,1,['Clear'],['Clear']
Usability," ; TFileNode * GetNode () const;  ; Bool_t IsDone () const;  ; void MoveNextEntry (Long64_t step);  ; void SetDone ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileStat.html:1402,Clear,Clear,1402,doc/master/classTPacketizer_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileStat.html,1,['Clear'],['Clear']
Usability," ; TObjArray * InputFiles () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dependent eventloop via gSystem. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:4065,guid,guide,4065,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['guid'],['guide']
Usability," ; a). inline . scale by a scalar quantity - for polar coordinates r changes ; Definition at line 149 of file Polar2D.h. ◆ SetCoordinates(). template<class T > . void ROOT::Math::Polar2D< T >::SetCoordinates ; (; Scalar ; r, . Scalar ; phi . ). inline . Set internal data based on 2 Scalar numbers. ; Definition at line 92 of file Polar2D.h. ◆ SetPhi(). template<class T > . void ROOT::Math::Polar2D< T >::SetPhi ; (; const T & ; phi). inline . set the phi coordinate value keeping r constant ; Definition at line 122 of file Polar2D.h. ◆ SetR(). template<class T > . void ROOT::Math::Polar2D< T >::SetR ; (; const T & ; r). inline . set the r coordinate value keeping phi constant ; Definition at line 114 of file Polar2D.h. ◆ SetXY(). template<class T > . void ROOT::Math::Polar2D< T >::SetXY ; (; Scalar ; a, . Scalar ; b . ). set all values using cartesian coordinates ; Definition at line 238 of file Polar2D.h. ◆ X(). template<class T > . Scalar ROOT::Math::Polar2D< T >::X ; (; ); const. inline . Definition at line 103 of file Polar2D.h. ◆ x(). template<class T > . T ROOT::Math::Polar2D< T >::x ; (; ); const. inline . Definition at line 197 of file Polar2D.h. ◆ Y(). template<class T > . Scalar ROOT::Math::Polar2D< T >::Y ; (; ); const. inline . Definition at line 104 of file Polar2D.h. ◆ y(). template<class T > . T ROOT::Math::Polar2D< T >::y ; (; ); const. inline . Definition at line 198 of file Polar2D.h. Member Data Documentation. ◆ Dimension. template<class T > . constexpr unsigned int ROOT::Math::Polar2D< T >::Dimension = 2U. staticconstexpr . Definition at line 50 of file Polar2D.h. ◆ fPhi. template<class T > . T ROOT::Math::Polar2D< T >::fPhi. private . Definition at line 216 of file Polar2D.h. ◆ fR. template<class T > . T ROOT::Math::Polar2D< T >::fR. private . Definition at line 215 of file Polar2D.h. math/genvector/inc/Math/GenVector/Polar2D.h. ROOTMathPolar2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Polar2D.html:7629,Guid,Guide,7629,doc/master/classROOT_1_1Math_1_1Polar2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Polar2D.html,1,['Guid'],['Guide']
Usability," ; a, . double & ; b . ). Generate numbers distributed following a gaussian with mean=0 and sigma=1. ; Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.; Using the Box-Muller method ; Definition at line 312 of file RandomFunctions.cxx. ◆ Rndm(). double ROOT::Math::RandomFunctionsImpl< TRandomEngine >::Rndm ; (; ). inlineprivate . Definition at line 131 of file RandomFunctions.h. ◆ SetEngine(). void ROOT::Math::RandomFunctionsImpl< TRandomEngine >::SetEngine ; (; void * ; r). inline . Definition at line 77 of file RandomFunctions.h. ◆ Sphere(). void ROOT::Math::RandomFunctionsImpl< TRandomEngine >::Sphere ; (; double & ; x, . double & ; y, . double & ; z, . double ; r . ). Generates random vectors, uniformly distributed over the surface of a sphere of given radius. ; Input : r = sphere radius Output: x,y,z a random 3-d vector of length r Method: (based on algorithm suggested by Knuth and attributed to Robert E Knop) which uses less random numbers than the CERNLIB RN23DIM algorithm ; Definition at line 332 of file RandomFunctions.cxx. ◆ Uniform() [1/2]. double ROOT::Math::RandomFunctionsImpl< TRandomEngine >::Uniform ; (; double ; a). Returns a uniform deviate on the interval (0, x1). ; Definition at line 350 of file RandomFunctions.cxx. ◆ Uniform() [2/2]. double ROOT::Math::RandomFunctionsImpl< TRandomEngine >::Uniform ; (; double ; a, . double ; b . ). generate random numbers following a Uniform distribution in the [a,b] interval ; Returns a uniform deviate on the interval (x1, x2). ; Definition at line 359 of file RandomFunctions.cxx. Member Data Documentation. ◆ fBaseEngine. TRandomEngine* ROOT::Math::RandomFunctionsImpl< TRandomEngine >::fBaseEngine. protected . Definition at line 127 of file RandomFunctions.h. math/mathcore/inc/Math/RandomFunctions.h; math/mathcore/src/RandomFunctions.cxx. ROOTMathRandomFunctionsImpl< TRandomEngine >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl_3_01TRandomEngine_01_4.html:8273,Guid,Guide,8273,doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl_3_01TRandomEngine_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl_3_01TRandomEngine_01_4.html,1,['Guid'],['Guide']
Usability," ; b, . Bool_t & ; ok . ). inlineoverridevirtual . Implements TDecompBase.; Definition at line 54 of file TDecompBK.h. ◆ Solve() [2/3]. Bool_t TDecompBK::Solve ; (; TMatrixDColumn & ; b). overridevirtual . Solve Ax=b assuming the BK form of A is stored in fU . Solution returned in b. ; Implements TDecompBase.; Definition at line 473 of file TDecompBK.cxx. ◆ Solve() [3/3]. Bool_t TDecompBK::Solve ; (; TVectorD & ; b). overridevirtual . Solve Ax=b assuming the BK form of A is stored in fU . Solution returned in b. ; Implements TDecompBase.; Definition at line 339 of file TDecompBK.cxx. ◆ Streamer(). void TDecompBK::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDecompBase. ◆ StreamerNVirtual(). void TDecompBK::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file TDecompBK.h. ◆ TransSolve() [1/3]. TVectorD TDecompBK::TransSolve ; (; const TVectorD & ; b, . Bool_t & ; ok . ). inlineoverridevirtual . Implements TDecompBase.; Definition at line 57 of file TDecompBK.h. ◆ TransSolve() [2/3]. Bool_t TDecompBK::TransSolve ; (; TMatrixDColumn & ; b). inlineoverridevirtual . Implements TDecompBase.; Definition at line 58 of file TDecompBK.h. ◆ TransSolve() [3/3]. Bool_t TDecompBK::TransSolve ; (; TVectorD & ; b). inlineoverridevirtual . Implements TDecompBase.; Definition at line 56 of file TDecompBK.h. Member Data Documentation. ◆ fIpiv. Int_t* TDecompBK::fIpiv. protected . Definition at line 31 of file TDecompBK.h. ◆ fNIpiv. Int_t TDecompBK::fNIpiv. protected . Definition at line 30 of file TDecompBK.h. ◆ fU. TMatrixD TDecompBK::fU. protected . Definition at line 32 of file TDecompBK.h. Libraries for TDecompBK:. [legend]; The documentation for this class was generated from the following files:; math/matrix/inc/TDecompBK.h; math/matrix/src/TDecompBK.cxx. TDecompBK. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBK.html:20938,Guid,Guide,20938,doc/master/classTDecompBK.html,https://root.cern,https://root.cern/doc/master/classTDecompBK.html,1,['Guid'],['Guide']
Usability," ; back = GetDefaultFrameBackground() . ). Create a canvas object. ; Definition at line 2130 of file TGCanvas.cxx. ◆ ~TGCanvas(). TGCanvas::~TGCanvas ; (; ). override . Delete canvas. ; Definition at line 2155 of file TGCanvas.cxx. Member Function Documentation. ◆ AddFrame(). void TGCanvas::AddFrame ; (; TGFrame * ; f, . TGLayoutHints * ; l = nullptr . ). virtual . Adding a frame to a canvas is actually adding the frame to the viewport container. ; The viewport container must be at least a TGCompositeFrame for this method to succeed. ; Definition at line 2188 of file TGCanvas.cxx. ◆ Class(). static TClass * TGCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 239 of file TGCanvas.h. ◆ ClearViewPort(). void TGCanvas::ClearViewPort ; (; ). virtual . Clear view port and redraw content. ; Definition at line 2434 of file TGCanvas.cxx. ◆ DeclFileName(). static const char * TGCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 239 of file TGCanvas.h. ◆ DrawBorder(). void TGCanvas::DrawBorder ; (; ). overridevirtual . Draw canvas border. ; Reimplemented from TGFrame.; Definition at line 2204 of file TGCanvas.cxx. ◆ GetContainer(). TGFrame * TGCanvas::GetContainer ; (; ); const. inline . Definition at line 216 of file TGCanvas.h. ◆ GetDefaultSize(). TGDimension TGCanvas::GetDefaultSize ; (; ); const. inlineoverridevirtual . std::cout << fWidth << ""x"" << fHeight << std::endl; ; Reimplemented from TGFrame.; Definition at line 234 of file TGCanvas.h. ◆ GetHsbPosition(). Int_t TGCanvas::GetHsbPosition ; (; ); const. virtual . Get position of horizontal scrollbar. ; Definition at line 2374 of file TGCanvas.cxx. ◆ GetHScrollbar(). TGHScrollBar * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCanvas.html:30629,Clear,ClearViewPort,30629,doc/master/classTGCanvas.html,https://root.cern,https://root.cern/doc/master/classTGCanvas.html,1,['Clear'],['ClearViewPort']
Usability," ; bool ReInit () override;  re-initialize an existing the workspace ;  ; virtual void SetOptions (const ROOT::Math::IOptions &) override;  set options ;  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Attributes; gsl_monte_plain_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLPlainIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLPlainIntegrationWorkspace(). ROOT::Math::GSLPlainIntegrationWorkspace::GSLPlainIntegrationWorkspace ; (; ). inline . Definition at line 243 of file GSLMCIntegrationWorkspace.h. Member Function Documentation. ◆ Clear(). void ROOT::Math::GSLPlainIntegrationWorkspace::Clear ; (; ). inlineoverridevirtual . free the workspace deleting the GSL pointer ; Reimplemented from ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 259 of file GSLMCIntegrationWorkspace.h. ◆ GetWS(). gsl_monte_plain_state * ROOT::Math::GSLPlainIntegrationWorkspace::GetWS ; (; ). inline . Definition at line 264 of file GSLMCIntegrationWorkspace.h. ◆ Init(). bool ROOT::Math::GSLPlainIntegrationWorkspace::Init ; (; size_t ; dim). inlineoverridevirtual . initialize the workspace creating the GSL pointer if it is not there ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 247 of file GSLMCIntegrationWorkspace.h. ◆ NDim(). size_t ROOT::Math::GSLPlainIntegrationWorkspace::NDim ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 270 of file GSLMCIntegrationWorkspace.h. ◆ Options(). std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::GSLPlainIntegrationWorkspace::Options ; (; );",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html:1862,Clear,Clear,1862,doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html,1,['Clear'],['Clear']
Usability," ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (std::ostream &os) const override;  Print name of context. ;  ; void printTitle (std::ostream &os) const override;  Print title of context. ;  ; virtual void setExpectedData (bool);  ; void setVerbose (bool verbose=true);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvGenContext.html:4096,Clear,Clear,4096,doc/master/classRooConvGenContext.html,https://root.cern,https://root.cern/doc/master/classRooConvGenContext.html,4,['Clear'],['Clear']
Usability," ; const char * GetOrdinal () const;  ; Double_t GetProcTime () const;  ; TProofProgressStatus * GetProgressStatus ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html:1547,Clear,Clear,1547,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,1,['Clear'],['Clear']
Usability," ; dirp). overridevirtual . Get a directory entry. ; Reimplemented from TSystem.; Definition at line 676 of file TDCacheFile.cxx. ◆ GetDirPtr(). void * TDCacheSystem::GetDirPtr ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TSystem.; Definition at line 84 of file TDCacheFile.h. ◆ GetPathInfo(). int TDCacheSystem::GetPathInfo ; (; const char * ; path, . FileStat_t & ; buf . ). overridevirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 709 of file TDCacheFile.cxx. ◆ IsA(). TClass * TDCacheSystem::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 97 of file TDCacheFile.h. ◆ MakeDirectory(). int TDCacheSystem::MakeDirectory ; (; const char * ; name). overridevirtual . Create a directory. ; Reimplemented from TSystem.; Definition at line 621 of file TDCacheFile.cxx. ◆ OpenDirectory(). void * TDCacheSystem::OpenDirectory ; (; const char * ; name). overridevirtual . Open a directory. ; Reimplemented from TSystem.; Definition at line 640 of file TDCacheFile.cxx. ◆ Streamer(). void TDCacheSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDCacheSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 97 of file TDCacheFile.h. Member Data Documentation. ◆ fDirp. void* TDCacheSystem::fDirp. private . directory handler ; Definition at line 82 of file TDCacheFile.h. Libraries for TDCacheSystem:. [legend]; The documentation for this class was generated from the following files:; io/dcache/inc/TDCacheFile.h; io/dcache/src/TDCacheFile.cxx. TDCacheSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheSystem.html:37005,Guid,Guide,37005,doc/master/classTDCacheSystem.html,https://root.cern,https://root.cern/doc/master/classTDCacheSystem.html,1,['Guid'],['Guide']
Usability," ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Static Public Member Functions inherited from RooProjectedPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:66863,clear,clearEvalErrorLog,66863,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability," ; file  Deconvolution2_HR.C;   Example to illustrate boosted Gold deconvolution (class TSpectrum2). ;  ; file  Deconvolution_wide.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  Deconvolution_wide_boost.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  DeconvolutionRL_wide.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  DeconvolutionRL_wide_boost.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  FitAwmi.C;   This macro fits the source spectrum using the AWMI algorithm from the ""TSpectrumFit"" class (""TSpectrum"" class is used to find peaks). ;  ; file  peaks.C;   Illustrates how to find peaks in histograms. ;  ; file  peaks2.C;   Example to illustrate the 2-d peak finder (class TSpectrum2). ;  ; file  SearchHR1.C;   Example to illustrate high resolution peak searching function (class TSpectrum). ;  ; file  SearchHR3.C;   Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum). ;  ; file  Smooth.C;   Example to illustrate the Markov smoothing (class TSpectrum2). ;  ; file  Smoothing.C;   Example to illustrate smoothing using Markov algorithm (class TSpectrum). ;  ; file  spectrumpainter.C;   Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ; file  Src.C;   Example to illustrate high resolution peak searching function (class TSpectrum2). ;  ; file  Src2.C;   Example to illustrate high resolution peak searching function (class TSpectrum2). ;  ; file  Src3.C;   Example to illustrate high resolution peak searching function (class TSpectrum2). ;  ; file  Src4.C;   Example to illustrate high resolution peak searching function (class TSpectrum2). ;  ; file  Src5.C;   Example to illustrate high resolution peak searching function (class TSpectrum2). ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__spectrum.html:3568,Guid,Guide,3568,doc/master/group__tutorial__spectrum.html,https://root.cern,https://root.cern/doc/master/group__tutorial__spectrum.html,1,['Guid'],['Guide']
Usability," ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. virtual . See alsoRooPlot* plotOn(RooPlot* frame, const RooLinkedList& cmdList) const. PyROOT; The RooAbsData::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented from RooAbsData.; Definition at line 169 of file RooAbsData.cxx. ◆ plotOn() [2/4]. RooPlot * RooAbsData::plotOn ; (; RooPlot * ; frame, . const RooLinkedList & ; argList . ); const. virtual . Plot dataset on specified frame. ; By default:; An unbinned dataset will use the default binning of the target frame.; A binned dataset will retain its intrinsic binning. The following optional named arguments can be used to modify the behaviour: NotePlease follow the function links in the left column to learn about PyROOT specifics for a given option. Data representation options . RooFit::Asymmetry(const RooCategory& c) Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)]. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. . RooFit::Efficiency(const RooCategory& c) Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1 . RooFit::DataError(Int_t) Select the type of error drawn:; Auto(default) results in Poisson for unweighted data and SumW2 for weighted data; Poisson draws asymmetric Poisson confidence intervals.; SumW2 draws symmetric sum-of-weights error ( \( \left( \sum w \right)^2 / \sum\left(w^2\right) \) ); None draws no error bars . RooFit::Binning(int nbins, double xlo, double xhi) Use specified binning to draw dataset . RooFit::Binning(const RooAbsBinning&) Use specified binning to draw dataset . RooFit::Binning(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:67669,learn,learn,67669,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['learn'],['learn']
Usability," ; sboptions = 0, . Pixel_t ; back = GetWhitePixel() . ). Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ; Definition at line 92 of file TGView.cxx. ◆ ~TGView(). TGView::~TGView ; (; ). override . Delete view. ; Definition at line 149 of file TGView.cxx. Member Function Documentation. ◆ ChangeBackground(). void TGView::ChangeBackground ; (; Pixel_t ; col). overridevirtual . Change background color of the canvas frame. ; Reimplemented from TGFrame.; Definition at line 579 of file TGView.cxx. ◆ Class(). static TClass * TGView::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGView::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGView::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 105 of file TGView.h. ◆ Clear(). void TGView::Clear ; (; Option_t * ; = """"). overridevirtual . Clear view. ; Reimplemented from TObject.; Definition at line 161 of file TGView.cxx. ◆ DeclFileName(). static const char * TGView::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 105 of file TGView.h. ◆ DoRedraw(). void TGView::DoRedraw ; (; ). overrideprotectedvirtual . redraw ; Reimplemented from TGFrame.; Definition at line 270 of file TGView.cxx. ◆ DrawBorder(). void TGView::DrawBorder ; (; ). overridevirtual . Draw the border of the text edit widget. ; Reimplemented from TGFrame.; Definition at line 428 of file TGView.cxx. ◆ DrawRegion(). void TGView::DrawRegion ; (; Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height . ). virtual . Draw region. ; Reimplemented in TGTextView, TGHtml, and TGTextEdit.; Definition at line 196 of file TGView.cxx. ◆ GetCanvas(). TGViewFrame * TGView::GetCanvas ; (; ); const. inline . Definition at line 66 of file TGView.h. ◆ GetDefaultSize(). TGDimension TGView::GetDefaultSize ; (; )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGView.html:36324,Clear,Clear,36324,doc/master/classTGView.html,https://root.cern,https://root.cern/doc/master/classTGView.html,1,['Clear'],['Clear']
Usability," ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ; void MergeOutput (Bool_t savememvalues=kFALSE) override;  Merge output (may not be used in this class). ;  ; virtual void SetupFeedback ();  Set up feedback (may not be used in this class). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Bool_t fCreateSelObj;  the latest selector ;  ; TTimer * fDispatchTimer;  ; Int_t fDrawQueries;  ; TEventIter * fEvIter;  period (ms) for sending intermediate results ;  ; EExitStatus fExitStatus;  status of query in progress ;  ; Long_t fFeedbackPeriod;  timer for sending intermediate results ;  ; TTimer * fFeedbackTimer;  class of the latest selector ;  ; TList * fInput;  ; Int_t fMaxDrawQueries;  ; THashList * fOutput;  ; TFile * fOutputFile;  ; TString fOutputFilePath;  ; TQueryResult * fPreviousQuery;  ; Long64_t fProcessedRun;  Read calls in this run. ;  ; TStopwatch * fProcTime;  ; TTimer * fProcTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:20931,feedback,feedback,20931,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability," ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TProofPerfAnalysis::TWrkEntry:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TWrkEntry(). TProofPerfAnalysis::TWrkEntry::TWrkEntry ; (; Double_t ; xx, . Double_t ; er, . Double_t ; mbr, . Double_t ; pt . ). inline . Definition at line 137 of file TProofPerfAnalysis.cxx. Member Function Documentation. ◆ Print(). void TProofPerfAnalysis::TWrkEntry::Print ; (; Option_t * ; option = """"); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 142 of file TProofPerfAnalysis.cxx. Member Data Documentation. ◆ fEvtRate. Double_t TProofPerfAnalysis::TWrkEntry::fEvtRate. Definition at line 139 of file TProofPerfAnalysis.cxx. ◆ fMBRate. Double_t TProofPerfAnalysis::TWrkEntry::fMBRate. Definition at line 140 of file TProofPerfAnalysis.cxx. ◆ fProcTime. Double_t TProofPerfAnalysis::TWrkEntry::fProcTime. Definition at line 141 of file TProofPerfAnalysis.cxx. ◆ fXx. Double_t TProofPerfAnalysis::TWrkEntry::fXx. Definition at line 138 of file TProofPerfAnalysis.cxx. proof/proofbench/src/TProofPerfAnalysis.cxx. TProofPerfAnalysisTWrkEntry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html:10942,Guid,Guide,10942,doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,1,['Guid'],['Guide']
Usability," ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void syncCache (const RooArgSet *set=nullptr) override;  Force the internal value cache to be up to date. ;  ;  Protected Member Functions inherited from RooAbsRealLValue; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:57723,usab,usable,57723,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,1,['usab'],['usable']
Usability," ; std::map< TString, double > optimizerParams;  ; DNN::ERegularization regularization;  ; size_t testInterval;  ; Double_t weightDecay;  . #include <TMVA/MethodDL.h>; Member Data Documentation. ◆ batchSize. size_t TMVA::TTrainingSettings::batchSize. Definition at line 73 of file MethodDL.h. ◆ convergenceSteps. size_t TMVA::TTrainingSettings::convergenceSteps. Definition at line 75 of file MethodDL.h. ◆ dropoutProbabilities. std::vector<Double_t> TMVA::TTrainingSettings::dropoutProbabilities. Definition at line 83 of file MethodDL.h. ◆ learningRate. Double_t TMVA::TTrainingSettings::learningRate. Definition at line 80 of file MethodDL.h. ◆ maxEpochs. size_t TMVA::TTrainingSettings::maxEpochs. Definition at line 76 of file MethodDL.h. ◆ momentum. Double_t TMVA::TTrainingSettings::momentum. Definition at line 81 of file MethodDL.h. ◆ multithreading. bool TMVA::TTrainingSettings::multithreading. Definition at line 85 of file MethodDL.h. ◆ optimizer. DNN::EOptimizer TMVA::TTrainingSettings::optimizer. Definition at line 78 of file MethodDL.h. ◆ optimizerName. TString TMVA::TTrainingSettings::optimizerName. Definition at line 79 of file MethodDL.h. ◆ optimizerParams. std::map<TString,double> TMVA::TTrainingSettings::optimizerParams. Definition at line 84 of file MethodDL.h. ◆ regularization. DNN::ERegularization TMVA::TTrainingSettings::regularization. Definition at line 77 of file MethodDL.h. ◆ testInterval. size_t TMVA::TTrainingSettings::testInterval. Definition at line 74 of file MethodDL.h. ◆ weightDecay. Double_t TMVA::TTrainingSettings::weightDecay. Definition at line 82 of file MethodDL.h. Collaboration diagram for TMVA::TTrainingSettings:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/MethodDL.h. TMVATTrainingSettings. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html:2533,Guid,Guide,2533,doc/master/structTMVA_1_1TTrainingSettings.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html,1,['Guid'],['Guide']
Usability," ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primitive mesh. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:10343,Clear,Clear,10343,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,14,['Clear'],['Clear']
Usability," ; virtual Double_t Violation ();  The amount by which the current variables violate the non-negativity constraints. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:4731,Clear,Clear,4731,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['Clear'],['Clear']
Usability," ; virtual void MasterToLocalBomb (const Double_t *master, Double_t *local) const;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; virtual void MasterToLocalVect (const Double_t *master, Double_t *local) const;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void Print (Option_t *option="""") const override;  print the matrix in 4x4 format ;  ; void SetDefaultName ();  If no name was supplied in the ctor, the type of transformation is checked. ;  ; void SetShared (Bool_t flag=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCombiTrans.html:6336,Clear,Clear,6336,doc/master/classTGeoCombiTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html,2,['Clear'],['Clear']
Usability," ; virtual ~TObjArray ();  Delete an array. ;  ; void Add (TObject *obj) override;  ; void AddAfter (const TObject *after, TObject *obj) override;  Add object in the slot after object after. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add object at position ids. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add object in the slot before object before. ;  ; void AddFirst (TObject *obj) override;  Add object in the first slot of the array. ;  ; void AddLast (TObject *obj) override;  Add object in the next empty slot in the array. ;  ; TObject * After (const TObject *obj) const override;  Return the object after obj. Returns 0 if obj is last object. ;  ; TObject * At (Int_t idx) const override;  ; TObject * Before (const TObject *obj) const override;  Return the object before obj. Returns 0 if obj is first object. ;  ; virtual Int_t BinarySearch (TObject *obj, Int_t upto=kMaxInt);  Find object using a binary search. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the array. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the array AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this collection using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this collection using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the object in the first slot. ;  ; Int_t GetEntries () const override;  Return the number of objects in array (i.e. ;  ; Int_t GetEntriesFast () const;  ; Int_t GetEntriesUnsafe () const;  Return the number of objects in array (i.e. ;  ; Int_t GetLast () const override;  Return index of last object in array. ;  ; TObject ** GetObjectRef () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer obj. If obj is 0 returns address of container. ;  ; Int_t IndexOf (const TObject *obj) const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:10892,Clear,Clear,10892,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability," ; void Draw (const Option_t *options=nullptr) override;  ; void DrawChainScatter (RooRealVar &xVar, RooRealVar &yVar);  ; void DrawNLLHist (const Option_t *options=nullptr);  ; void DrawNLLVsTime ();  ; void DrawParameterVsTime (RooRealVar &param);  ; void DrawWeightHist (const Option_t *options=nullptr);  ; TClass * IsA () const override;  ; void SetLineColor (Color_t color);  ; void SetLineWidth (Int_t width);  ; void SetMCMCInterval (MCMCInterval &interval);  ; void SetShadeColor (Color_t color);  ; void SetShowBurnIn (bool showBurnIn);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html:2301,Clear,Clear,2301,doc/master/classRooStats_1_1MCMCIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html,1,['Clear'],['Clear']
Usability," ; void SetMerging (Bool_t on=kTRUE) override;  Switch on/off merge timer. ;  ; void StopProcess (Bool_t abort, Int_t timeout=-1) override;  Stop process after this event. ;  ; void StoreFeedback (TObject *slave, TList *out) override;  Store feedback results from the specified slave. ;  ; void StoreOutput (TList *out) override;  Store received output list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:5340,feedback,feedback,5340,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,2,['feedback'],['feedback']
Usability," ; void SetTimer (Long_t milliSec=100, Bool_t mode=kTRUE);  Create timer which will invoke ProcessRequests() function periodically. ;  ; void SetTopName (const char *top);  set name of top item in objects hierarchy ;  ; void SetWSOnly (Bool_t on=kTRUE);  Set websocket-only mode. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t SubmitHttp (std::shared_ptr< THttpCallArg > arg, Bool_t can_run_immediately=kFALSE);  Submit HTTP request. ;  ; Bool_t Unregister (TObject *obj);  Unregister object. ;  ; void UnregisterWS (std::shared_ptr< THttpWSHandler > ws);  Unregister WS handler. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpServer.html:6249,Clear,Clear,6249,doc/master/classTHttpServer.html,https://root.cern,https://root.cern/doc/master/classTHttpServer.html,1,['Clear'],['Clear']
Usability," ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TabCompletionHook (char *buf, int *pLoc, std::ostream &out);  What to do when tab is pressed. ;  ; const char * WorkingDirectory () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:7320,Clear,Clear,7320,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['Clear'],['Clear']
Usability," ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Timeout ();  Called on every timer timeout. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAutoRotator.html:3746,Clear,Clear,3746,doc/master/classTGLAutoRotator.html,https://root.cern,https://root.cern/doc/master/classTGLAutoRotator.html,1,['Clear'],['Clear']
Usability," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:31415,simpl,simple,31415,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['simpl'],['simple']
Usability," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:42238,simpl,simple,42238,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,112,['simpl'],['simple']
Usability," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; virtual void writeToStream (std::ostream &os, bool compact) const =0;  ; Client-Server Interface; These functions allow RooFit to figure out who is serving values to whom. . const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:16198,simpl,simple,16198,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['simpl'],['simple']
Usability," ; y1, . Int_t ; x2, . Int_t ; y2 . ). protected . Ensures hidden surface removal. ; Definition at line 799 of file TSpectrum2Painter.cxx. ◆ EnvelopeBars(). void TSpectrum2Painter::EnvelopeBars ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). protected . Ensures hidden surface removal for Bars, BarsX and BarsY display modes. ; Definition at line 912 of file TSpectrum2Painter.cxx. ◆ GetAngles(). void TSpectrum2Painter::GetAngles ; (; Int_t & ; alpha, . Int_t & ; beta, . Int_t & ; view . ). Gets angles of the view: . alpha - angle between base line of Canvas and right lower edge of picture base plane; beta - angle between base line of Canvas and left lower edge of picture base plane; view - rotation angle of the view, it can be 0, 90, 180, 270 degrees . Definition at line 7325 of file TSpectrum2Painter.cxx. ◆ GetBezier(). void TSpectrum2Painter::GetBezier ; (; Int_t & ; bezier). Gets Bezier smoothing switch: . bezier - determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes) . Definition at line 7393 of file TSpectrum2Painter.cxx. ◆ GetChanGrid(). void TSpectrum2Painter::GetChanGrid ; (; Int_t & ; enable, . Int_t & ; color . ). This function gets attributes for drawing channel: . enable - decides whether the channel grid is shown or not; color - color of channel grid . Definition at line 7439 of file TSpectrum2Painter.cxx. ◆ GetChanMarks(). void TSpectrum2Painter::GetChanMarks ; (; Int_t & ; enable, . Int_t & ; color, . Int_t & ; width, . Int_t & ; height, . Int_t & ; style . ). Gets drawing attributes for channel marks: . enable - decides whether the channel marks are shown or not; color - color of channel marks; width - width of channel marks in pixels; height - height of channel marks in pixels; style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle) . Definition at line 7427 of file TSpectrum2Painter.cxx. ◆ GetColorAlgorithm(). void TSpectrum2Painter::GetColorAlg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:26361,simpl,simple,26361,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability," ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for TXMLEntity:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TXMLEntity() [1/2]. TXMLEntity::TXMLEntity ; (; ). inline . is system (file) ; Definition at line 165 of file TXMLEngine.cxx. ◆ TXMLEntity() [2/2]. TXMLEntity::TXMLEntity ; (; const TString & ; name, . const TString & ; value, . Bool_t ; sys . ). inline . Definition at line 166 of file TXMLEngine.cxx. Member Function Documentation. ◆ IsSystem(). Bool_t TXMLEntity::IsSystem ; (; ); const. inline . Definition at line 167 of file TXMLEngine.cxx. Member Data Documentation. ◆ fSystem. Bool_t TXMLEntity::fSystem. private . Definition at line 163 of file TXMLEngine.cxx. io/xml/src/TXMLEngine.cxx. TXMLEntity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLEntity.html:11585,Guid,Guide,11585,doc/master/classTXMLEntity.html,https://root.cern,https://root.cern/doc/master/classTXMLEntity.html,1,['Guid'],['Guide']
Usability," ;  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ;  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ;  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ;  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ;  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ;  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ;  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ;  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ;  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ;  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ;  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ;  TMVARegressionApplication.C;   This macro provides a simple example on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:6073,simpl,simple,6073,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['simpl'],['simple']
Usability," AddHexagon (Float_t a, Float_t b, Float_t z, Float_t r);  Add a hexagon with given center (a,b,c) and radius. ;  ; void AddLine (Float_t a, Float_t b, Float_t w, Float_t h);  Add a line with starting coordinates and displacements. ;  ; void AddQuad (Float_t a, Float_t b);  Add a quad with a and b coordinates. ;  ; void AddQuad (Float_t a, Float_t b, Float_t c);  Add a quad with a, b and c coordinates. ;  ; void AddQuad (Float_t a, Float_t b, Float_t c, Float_t w, Float_t h);  Add a quad with a, b and c coordinates and sizes. ;  ; void AddQuad (Float_t a, Float_t b, Float_t w, Float_t h);  Add a quad with a and b coordinates and sizes. ;  ; void AddQuad (Float_t verts[12]);  Add a quad specified with 4 vertices. ;  ; void ComputeBBox () override;  Fill bounding-box information. ;  ; Float_t GetDefCoord () const;  ; Float_t GetDefHeight () const;  ; Float_t GetDefWidth () const;  ; TClass * IsA () const override;  ; void QuadColor (Color_t ci);  ; void QuadColor (UChar_t r, UChar_t g, UChar_t b, UChar_t a=255);  ; void QuadId (TObject *id);  ; void QuadValue (Int_t value);  ; void Reset (EQuadType_e quadType, Bool_t valIsCol, Int_t chunkSize);  Clear the quad-set and reset the basic parameters. ;  ; void SetDefCoord (Float_t v);  ; void SetDefHeight (Float_t v);  ; void SetDefWidth (Float_t v);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveDigitSet;  TEveDigitSet (const char *n=""TEveDigitSet"", const char *t="""");  ;  ~TEveDigitSet () override;  Destructor. ;  ; TEveRGBAPalette * AssertPalette ();  Make sure the TEveRGBAPalette pointer is not null. ;  ; void DigitColor (Color_t ci);  Set color for the last digit added. ;  ; void DigitColor (Color_t ci, Char_t transparency);  Set color for the last digit added. ;  ; void DigitColor (UChar_t *rgba);  Set color for the last digit added. ;  ; void DigitColor (UChar_t r, UChar_t g, UChar_t b, UChar_t a=255);  Set color f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveQuadSet.html:4858,Clear,Clear,4858,doc/master/classTEveQuadSet.html,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html,1,['Clear'],['Clear']
Usability," AddInput(). virtual void TVirtualProofPlayer::AddInput ; (; TObject * ; inp). pure virtual . Implemented in TProofPlayer. ◆ AddOutput(). virtual void TVirtualProofPlayer::AddOutput ; (; TList * ; out). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ AddOutputObject(). virtual Int_t TVirtualProofPlayer::AddOutputObject ; (; TObject * ; obj). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ AddQueryResult(). virtual void TVirtualProofPlayer::AddQueryResult ; (; TQueryResult * ; q). pure virtual . Implemented in TProofPlayer. ◆ Class(). static TClass * TVirtualProofPlayer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualProofPlayer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualProofPlayer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 142 of file TVirtualProofPlayer.h. ◆ ClearInput(). virtual void TVirtualProofPlayer::ClearInput ; (; ). pure virtual . Implemented in TProofPlayer. ◆ Create(). TVirtualProofPlayer * TVirtualProofPlayer::Create ; (; const char * ; player, . TProof * ; p, . TSocket * ; s = 0 . ). static . Create a PROOF player. ; Definition at line 28 of file TVirtualProofPlayer.cxx. ◆ CreateDrawFeedback(). virtual TDrawFeedback * TVirtualProofPlayer::CreateDrawFeedback ; (; TProof * ; p). pure virtual . Implemented in TProofPlayer. ◆ DeclFileName(). static const char * TVirtualProofPlayer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 142 of file TVirtualProofPlayer.h. ◆ DeleteDrawFeedback(). virtual void TVirtualProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). pure virtual . Implemented in TProofPlayer. ◆ DrawSelect(). virtual Long64_t TVirtualProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualProofPlayer.html:20396,Clear,ClearInput,20396,doc/master/classTVirtualProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html,1,['Clear'],['ClearInput']
Usability," AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; List_i BeginChildren ();  ; List_ci BeginChildren () const;  ; List_i BeginParents ();  ; List_ci BeginParents () const;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual void CheckReferenceCount (const TEveException &eh=""TEveElement::CheckReferenceCount "");  Check external references to this and eventually auto-destruct the render-element. ;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (TEveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual TEveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CollectSceneParents (List_t &scenes);  Collect all parents of class TEveScene. ;  ; virtual void CollectSceneParentsFromChildren (List_t &scenes, TEveElement *parent);  Collect scene-parents from all children. ;  ; virtual void CopyVizParams (const TEveElement *el);  Copy visualization parameters from element el. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeAnyParentAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTriangleSet.html:5256,Clear,ClearStamps,5256,doc/master/classTEveTriangleSet.html,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html,1,['Clear'],['ClearStamps']
Usability," Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TCollection;  Collection abstract base class. More...;  ; class  THashList;  THashList implements a hybrid collection class consisting of a hash table and a list to store TObject's. More...;  ; class  THashTable;  THashTable implements a hash table to store TObject's. More...;  ; class  TIterator;  Iterator abstract base class. More...;  ; class  TList;  A doubly linked list. More...;  ; class  TMap;  TMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries). More...;  ; class  TObjArray;  An array of TObjects. More...;  ; class  TObjectTable;  This class registers all instances of TObject and its derived classes in a hash table. More...;  ; class  TOrdCollection;  Ordered collection. More...;  ; class  TRefArray;  An array of references to TObjects. More...;  ; class  TRefTable;  A TRefTable maintains the association between a referenced object and the parent object supporting this referenced object. More...;  ; class  ROOT::TSeq< T >;  A pseudo container class which is a generator of indices. More...;  ; class  TSeqCollection;  Sequenceable collection abstract base class. More...;  ; class  TSortedList;  A sorted doubly linked list. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Containers.html:3288,Guid,Guide,3288,doc/master/group__Containers.html,https://root.cern,https://root.cern/doc/master/group__Containers.html,1,['Guid'],['Guide']
Usability," CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:54947,Simpl,Simplex,54947,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['Simpl'],['Simplex']
Usability," CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:61455,Simpl,Simplex,61455,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['Simpl'],['Simplex']
Usability," CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:171932,simpl,simple,171932,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['simpl'],['simple']
Usability," CTPointsArray3D;  CTPointSet3DTPolyMarker3D using TPointSet3DGL for direct OpenGL rendering ;  CTPointSet3DGLDirect OpenGL renderer for TPointSet3D ;  CTPolyLineDefined by an array on N points in a 2-D space ;  CTPolyLine3DA 3-dimensional polyline ;  CTPolyLineShape;  CTPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space ;  CTPolyMarker3DA 3D polymarker ;  CTPoolProcessor;  CTPoolWorkerThis class works together with TProcPool to allow the execution of functions in server processes ;  CTPoolWorker< F, T, void >;  CTPoolWorker< F, void, R >;  CTPosixCondition;  CTPosixMutex;  CTPosixThread;  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimary;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProcPoolThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProof;  CMD5Mod_t;  CTProofBench;  CTProofBenchDataSet;  CTProofBenchRun;  CTProofBenchRunCPU;  CTProofBenchRunDataRead;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDraw;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinder;  CTProofLite;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLog;  CTProofLogElem;  CTProofMergePrg;  CTProofMg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:148283,simpl,simple,148283,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simple']
Usability," Class(). static TClass * TGeoManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 605 of file TGeoManager.h. ◆ CleanGarbage(). void TGeoManager::CleanGarbage ; (; ). Clean temporary volumes and shapes from garbage collection. ; Definition at line 1627 of file TGeoManager.cxx. ◆ ClearAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attributes for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ ClearTracks(). void TGeoManager::ClearTracks ; (; ). inline . Definition at line 415 of file TGeoManager.h. ◆ CloseGeometry(). void TGeoM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:78014,Clear,Clear,78014,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['Clear']
Usability," Class(). static TClass * TThreadFactory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TThreadFactory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TThreadFactory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 42 of file TThreadFactory.h. ◆ CreateConditionImp(). virtual TConditionImp * TThreadFactory::CreateConditionImp ; (; TMutexImp * ; m). pure virtual . Implemented in TPosixThreadFactory, and TWin32ThreadFactory. ◆ CreateMutexImp(). virtual TMutexImp * TThreadFactory::CreateMutexImp ; (; Bool_t ; recursive). pure virtual . Implemented in TPosixThreadFactory, and TWin32ThreadFactory. ◆ CreateThreadImp(). virtual TThreadImp * TThreadFactory::CreateThreadImp ; (; ). pure virtual . Implemented in TPosixThreadFactory, and TWin32ThreadFactory. ◆ DeclFileName(). static const char * TThreadFactory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 42 of file TThreadFactory.h. ◆ IsA(). TClass * TThreadFactory::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TWin32ThreadFactory.; Definition at line 42 of file TThreadFactory.h. ◆ Streamer(). void TThreadFactory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed.; Reimplemented in TWin32ThreadFactory. ◆ StreamerNVirtual(). void TThreadFactory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file TThreadFactory.h. Libraries for TThreadFactory:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/TThreadFactory.h; core/thread/src/TThreadFactory.cxx. TThreadFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThreadFactory.html:13767,Guid,Guide,13767,doc/master/classTThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTThreadFactory.html,1,['Guid'],['Guide']
Usability," Class_Name(). static const char * TGHorizontalLayout::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGHorizontalLayout::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 195 of file TGLayout.h. ◆ DeclFileName(). static const char * TGHorizontalLayout::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 195 of file TGLayout.h. ◆ GetDefaultSize(). TGDimension TGHorizontalLayout::GetDefaultSize ; (; ); const. overridevirtual . Return default dimension of the horizontal layout. ; Implements TGLayoutManager.; Definition at line 477 of file TGLayout.cxx. ◆ IsA(). TClass * TGHorizontalLayout::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 195 of file TGLayout.h. ◆ Layout(). void TGHorizontalLayout::Layout ; (; ). overridevirtual . Make a horizontal layout of all frames in the list. ; Implements TGLayoutManager.; Definition at line 352 of file TGLayout.cxx. ◆ SavePrimitive(). void TGHorizontalLayout::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save horizontal layout manager as a C++ statement(s) on output stream. ; Reimplemented from TObject.; Definition at line 1045 of file TGLayout.cxx. ◆ Streamer(). void TGHorizontalLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGHorizontalLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 195 of file TGLayout.h. Libraries for TGHorizontalLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGLayout.h; gui/gui/src/TGLayout.cxx. TGHorizontalLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHorizontalLayout.html:14164,Guid,Guide,14164,doc/master/classTGHorizontalLayout.html,https://root.cern,https://root.cern/doc/master/classTGHorizontalLayout.html,1,['Guid'],['Guide']
Usability," Default rotation constructor with Euler angles. ;  ;  TGeoRotation (const char *name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3);  Rotation constructor a la GEANT3. ;  ;  TGeoRotation (const TGeoMatrix &other);  Copy ctor. ;  ;  TGeoRotation (const TGeoRotation &other);  Copy ctor. ;  ;  ~TGeoRotation () override;  ; void Clear (Option_t *option="""") override;  reset data members ;  ; Double_t Determinant () const;  computes determinant of the rotation matrix ;  ; void FastRotZ (const Double_t *sincos);  Perform a rotation about Z having the sine/cosine of the rotation angle. ;  ; void GetAngles (Double_t &phi, Double_t &theta, Double_t &psi) const;  Retrieve Euler angles. ;  ; void GetAngles (Double_t &theta1, Double_t &phi1, Double_t &theta2, Double_t &phi2, Double_t &theta3, Double_t &phi3) const;  Retrieve rotation angles. ;  ; void GetInverse (Double_t *invmat) const;  Get the inverse rotation matrix (which is simply the transpose) ;  ; Double_t GetPhiRotation (Bool_t fixX=kFALSE) const;  Returns rotation angle about Z axis in degrees. ;  ; const Double_t * GetRotationMatrix () const override;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  Perform orthogonality test for rotation. ;  ; void LocalToMaster (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterBomb (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const override;  convert a vector by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; TGeoMatrix * MakeClone () const override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRotation.html:1701,simpl,simply,1701,doc/master/classTGeoRotation.html,https://root.cern,https://root.cern/doc/master/classTGeoRotation.html,1,['simpl'],['simply']
Usability," Deprecated: use TPad::GetViewer3D() instead. ;  ;  Public Member Functions inherited from TCanvas;  TCanvas (Bool_t build=kTRUE);  Canvas default constructor. ;  ;  TCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ;  TCanvas (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ;  TCanvas (const char *name, const char *title="""", Int_t form=1);  Create a new canvas with a predefined size form. ;  ;  TCanvas (const char *name, Int_t ww, Int_t wh, Int_t winid);  Create an embedded canvas, i.e. ;  ;  ~TCanvas () override;  Canvas destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set current canvas & pad. ;  ; void Clear (Option_t *option="""") override;  Remove all primitives from the canvas. ;  ; virtual void Cleared (TVirtualPad *pad);  Emit pad Cleared signal. ;  ; void ClearPadSave ();  ; void Close (Option_t *option="""") override;  Close canvas. ;  ; void Closed () override;  Emit Closed signal. ;  ; void Constructor ();  Canvas default constructor. ;  ; void Constructor (const char *name, const char *title, Int_t form);  Create a new canvas with a predefined size form. ;  ; void Constructor (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ; void Constructor (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; void DeleteCanvasPainter ();  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:2639,Clear,ClearPadSave,2639,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,2,['Clear'],['ClearPadSave']
Usability, DoASavImageStart(). void TGLViewerEditor::DoASavImageStart ; (; ). Start auto-rotator image auto-save. ; Definition at line 848 of file TGLViewerEditor.cxx. ◆ DoASavImageStop(). void TGLViewerEditor::DoASavImageStop ; (; ). Stop auto-rotator image auto-save. ; Definition at line 863 of file TGLViewerEditor.cxx. ◆ DoCameraCenterExt(). void TGLViewerEditor::DoCameraCenterExt ; (; ). Set external camera center. ; Definition at line 354 of file TGLViewerEditor.cxx. ◆ DoCameraHome(). void TGLViewerEditor::DoCameraHome ; (; ). CameraHome was clicked. ; Definition at line 302 of file TGLViewerEditor.cxx. ◆ DoCameraOverlay(). void TGLViewerEditor::DoCameraOverlay ; (; ). Update viewer with GUI state. ; Definition at line 334 of file TGLViewerEditor.cxx. ◆ DoCaptureCenter(). void TGLViewerEditor::DoCaptureCenter ; (; ). Capture camera-center via picking. ; Definition at line 369 of file TGLViewerEditor.cxx. ◆ DoClearColor(). void TGLViewerEditor::DoClearColor ; (; Pixel_t ; color). Clear-color was changed. ; Definition at line 267 of file TGLViewerEditor.cxx. ◆ DoDrawCameraCenter(). void TGLViewerEditor::DoDrawCameraCenter ; (; ). Draw camera center. ; Definition at line 378 of file TGLViewerEditor.cxx. ◆ DoIgnoreSizesOnUpdate(). void TGLViewerEditor::DoIgnoreSizesOnUpdate ; (; ). ResetCamerasOnUpdate was toggled. ; Definition at line 276 of file TGLViewerEditor.cxx. ◆ DoResetCamerasOnUpdate(). void TGLViewerEditor::DoResetCamerasOnUpdate ; (; ). ResetCamerasOnUpdate was toggled. ; Definition at line 286 of file TGLViewerEditor.cxx. ◆ DoRotatorStart(). void TGLViewerEditor::DoRotatorStart ; (; ). Start auto-rotator. ; Definition at line 810 of file TGLViewerEditor.cxx. ◆ DoRotatorStop(). void TGLViewerEditor::DoRotatorStop ; (; ). Stop auto-rotator. ; Definition at line 822 of file TGLViewerEditor.cxx. ◆ DoUpdateScene(). void TGLViewerEditor::DoUpdateScene ; (; ). UpdateScene was clicked. ; Definition at line 294 of file TGLViewerEditor.cxx. ◆ IsA(). TClass * TGLViewerEditor,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewerEditor.html:40417,Clear,Clear-color,40417,doc/master/classTGLViewerEditor.html,https://root.cern,https://root.cern/doc/master/classTGLViewerEditor.html,1,['Clear'],['Clear-color']
Usability," Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (DataMemberInfo_t *info);  Update the TFunction to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnumConstant.html:2872,Clear,Clear,2872,doc/master/classTEnumConstant.html,https://root.cern,https://root.cern/doc/master/classTEnumConstant.html,2,['Clear'],['Clear']
Usability," GetAcceptanceRegionMax(). double ConfidenceBelt::GetAcceptanceRegionMax ; (; RooArgSet & ; parameterPoint, . double ; cl = -1., . double ; leftside = -1. . ). Definition at line 88 of file ConfidenceBelt.cxx. ◆ GetAcceptanceRegionMin(). double ConfidenceBelt::GetAcceptanceRegionMin ; (; RooArgSet & ; parameterPoint, . double ; cl = -1., . double ; leftside = -1. . ). Definition at line 80 of file ConfidenceBelt.cxx. ◆ GetParameters(). RooArgSet * ConfidenceBelt::GetParameters ; (; ); const. virtual . do we want it to return list of parameters ; returns list of parameters ; Definition at line 258 of file ConfidenceBelt.cxx. ◆ IsA(). TClass * RooStats::ConfidenceBelt::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 183 of file ConfidenceBelt.h. ◆ Streamer(). void RooStats::ConfidenceBelt::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::ConfidenceBelt::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file ConfidenceBelt.h. Member Data Documentation. ◆ fParameterPoints. RooAbsData* RooStats::ConfidenceBelt::fParameterPoints = nullptr. private . Definition at line 154 of file ConfidenceBelt.h. ◆ fSamplingSummaries. std::vector<SamplingSummary> RooStats::ConfidenceBelt::fSamplingSummaries. private . Definition at line 153 of file ConfidenceBelt.h. ◆ fSamplingSummaryLookup. SamplingSummaryLookup RooStats::ConfidenceBelt::fSamplingSummaryLookup. private . Definition at line 152 of file ConfidenceBelt.h. Libraries for RooStats::ConfidenceBelt:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/ConfidenceBelt.h; roofit/roostats/src/ConfidenceBelt.cxx. RooStatsConfidenceBelt. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfidenceBelt.html:17732,Guid,Guide,17732,doc/master/classRooStats_1_1ConfidenceBelt.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfidenceBelt.html,1,['Guid'],['Guide']
Usability," GetMethodNargs(). Int_t TQSlot::GetMethodNargs ; (; ). inline . Definition at line 67 of file TQConnection.cxx. ◆ GetName(). const char * TQSlot::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 65 of file TQConnection.cxx. ◆ GetOffset(). Longptr_t TQSlot::GetOffset ; (; ); const. inline . Definition at line 60 of file TQConnection.cxx. ◆ IsExecuting(). Bool_t TQSlot::IsExecuting ; (; ); const. inline . Definition at line 79 of file TQConnection.cxx. ◆ ls(). void TQSlot::ls ; (; Option_t * ; option = """"); const. inlineoverridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 77 of file TQConnection.cxx. ◆ Print(). void TQSlot::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print info about slot. ; Reimplemented from TObject.; Definition at line 354 of file TQConnection.cxx. ◆ StartExecuting(). CallFunc_t * TQSlot::StartExecuting ; (; ). Mark the slot as executing. ; Definition at line 277 of file TQConnection.cxx. Member Data Documentation. ◆ fClass. ClassInfo_t* TQSlot::fClass. protected . Definition at line 49 of file TQConnection.cxx. ◆ fExecuting. Int_t TQSlot::fExecuting. protected . Definition at line 53 of file TQConnection.cxx. ◆ fFunc. CallFunc_t* TQSlot::fFunc. protected . Definition at line 48 of file TQConnection.cxx. ◆ fMethod. TFunction* TQSlot::fMethod. protected . Definition at line 50 of file TQConnection.cxx. ◆ fName. TString TQSlot::fName. protected . Definition at line 52 of file TQConnection.cxx. ◆ fOffset. Longptr_t TQSlot::fOffset. protected . Definition at line 51 of file TQConnection.cxx. core/base/src/TQConnection.cxx. TQSlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQSlot.html:17331,Guid,Guide,17331,doc/master/classTQSlot.html,https://root.cern,https://root.cern/doc/master/classTQSlot.html,1,['Guid'],['Guide']
Usability," GetMinimum(). Int_t TLeafG::GetMinimum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 45 of file TLeafG.h. ◆ GetTypeName(). const char * TLeafG::GetTypeName ; (; ); const. overridevirtual . Returns name of leaf type. ; Reimplemented from TLeaf.; Definition at line 96 of file TLeafG.cxx. ◆ GetValue(). Double_t TLeafG::GetValue ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 107 of file TLeafG.cxx. ◆ GetValueLong64(). Long64_t TLeafG::GetValueLong64 ; (; Int_t ; i = 0); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 66 of file TLeafG.h. ◆ GetValueLongDouble(). LongDouble_t TLeafG::GetValueLongDouble ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 118 of file TLeafG.cxx. ◆ GetValuePointer(). void * TLeafG::GetValuePointer ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 49 of file TLeafG.h. ◆ Import(). void TLeafG::Import ; (; TClonesArray * ; list, . Int_t ; n . ). overridevirtual . Import element from ClonesArray into local leaf buffer. ; Reimplemented from TLeaf.; Definition at line 143 of file TLeafG.cxx. ◆ IncludeRange(). bool TLeafG::IncludeRange ; (; TLeaf * ; input). overridevirtual . Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ; Reimplemented from TLeaf.; Definition at line 127 of file TLeafG.cxx. ◆ IsA(). TClass * TLeafG::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TLeaf.; Definition at line 61 of file TLeafG.h. ◆ PrintValue(). void TLeafG::PrintValue ; (; Int_t ; i = 0); const. overridev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafG.html:19741,simpl,simple,19741,doc/master/classTLeafG.html,https://root.cern,https://root.cern/doc/master/classTLeafG.html,1,['simpl'],['simple']
Usability," GetMinimum(). Int_t TLeafL::GetMinimum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 45 of file TLeafL.h. ◆ GetTypeName(). const char * TLeafL::GetTypeName ; (; ); const. overridevirtual . Returns name of leaf type. ; Reimplemented from TLeaf.; Definition at line 96 of file TLeafL.cxx. ◆ GetValue(). Double_t TLeafL::GetValue ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 107 of file TLeafL.cxx. ◆ GetValueLong64(). Long64_t TLeafL::GetValueLong64 ; (; Int_t ; i = 0); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 66 of file TLeafL.h. ◆ GetValueLongDouble(). LongDouble_t TLeafL::GetValueLongDouble ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 118 of file TLeafL.cxx. ◆ GetValuePointer(). void * TLeafL::GetValuePointer ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 49 of file TLeafL.h. ◆ Import(). void TLeafL::Import ; (; TClonesArray * ; list, . Int_t ; n . ). overridevirtual . Import element from ClonesArray into local leaf buffer. ; Reimplemented from TLeaf.; Definition at line 143 of file TLeafL.cxx. ◆ IncludeRange(). bool TLeafL::IncludeRange ; (; TLeaf * ; input). overridevirtual . Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ; Reimplemented from TLeaf.; Definition at line 127 of file TLeafL.cxx. ◆ IsA(). TClass * TLeafL::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TLeaf.; Definition at line 61 of file TLeafL.h. ◆ PrintValue(). void TLeafL::PrintValue ; (; Int_t ; i = 0); const. overridev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafL.html:19753,simpl,simple,19753,doc/master/classTLeafL.html,https://root.cern,https://root.cern/doc/master/classTLeafL.html,1,['simpl'],['simple']
Usability," GetNbins () const;  ; Int_t GetNdimensions () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNDArrayT.html:2337,Clear,Clear,2337,doc/master/classTNDArrayT.html,https://root.cern,https://root.cern/doc/master/classTNDArrayT.html,1,['Clear'],['Clear']
Usability," GetTime () const;  ; virtual void SetTime (TTime t);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecExtraEvent.html:1866,Clear,Clear,1866,doc/master/classTRecExtraEvent.html,https://root.cern,https://root.cern/doc/master/classTRecExtraEvent.html,2,['Clear'],['Clear']
Usability," Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/modules.html:11074,simpl,simple,11074,doc/v608/modules.html,https://root.cern,https://root.cern/doc/v608/modules.html,1,['simpl'],['simple']
Usability," Implements a native ROOT-GL representation of an arbitrary set of polygons. More...;  ; class  TGLFBO;  Frame-buffer object. More...;  ; class  TGLFont;  A wrapper class for FTFont. More...;  ; class  TGLFontManager;  A FreeType GL font manager. More...;  ; class  TGLFormat;  Encapsulation of format / contents of an OpenGL buffer. More...;  ; class  TGLH2PolyPainter;  Paint TH2Poly. More...;  ; class  TGLHistPainter;  The histogram painter class using OpenGL. More...;  ; class  TGLIsoPainter;  ""gliso"" option for TH3. More...;  ; class  TGLLegoPainter;  Plot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates. More...;  ; class  TGLLightSet;  Encapsulates a set of lights for OpenGL. More...;  ; class  TGLLightSetSubEditor;  Sub-editor for TGLLightSet. More...;  ; class  TGLLine3;  3D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex'. More...;  ; class  TGLLockable;  Simple locking interface used by viewer and scene. More...;  ; class  TGLLogicalShape;  Abstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc. More...;  ; class  TGLManip;  Abstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes. More...;  ; class  TGLManipSet;  Combine all available manipulators in a collection. More...;  ; class  TGLMatrix;  16 component (4x4) transform matrix - column MAJOR as per GL. More...;  ; class  TGLObject;  Base-class for direct OpenGL renderers. More...;  ; class  TGLOrthoCamera;  Orthographic projection camera. More...;  ; class  TGLOutput;  Wrapper class for GL capture & output routines. More...;  ; class  TGLOverlayButton;  GL-overlay button. More...;  ; class  TGLOverlayElement;  An overlay element. More...;  ; class  TGLOverlayList;  Manage a collection of overlay elements. More...;  ; class  TGLOv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:4631,Simpl,Simple,4631,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['Simpl'],['Simple']
Usability," Interpolate (Double_t x, Double_t y);  Finds the Delaunay triangle that the point (xi,yi) sits in (if any) and calculate a z-value for it by linearly interpolating the z-values that make up that triangle. ;  ; TClass * IsA () const override;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the convex hull ie: the bins in the margin. ;  ; void SetMaxIter (Int_t n=100000);  Defines the number of triangles tested for a Delaunay triangle (number of iterations) before abandoning the search. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphDelaunay.html:3295,Clear,Clear,3295,doc/master/classTGraphDelaunay.html,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html,1,['Clear'],['Clear']
Usability," IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; SimpleInterval & operator= (const SimpleInterval &other);  default constructor ;  ; void SetConfidenceLevel (double) override;  set the confidence level for the interval. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::ConfInterval;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; ConfInterval & operator= (const ConfInterval &other);  operator= ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:8505,Clear,Clear,8505,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['Clear'],['Clear']
Usability," Log(). MsgLogger & TMVA::VarTransformHandler::Log ; (; ); const. inline . message logger ; Definition at line 49 of file VarTransformHandler.h. ◆ UpdateNorm(). void TMVA::VarTransformHandler::UpdateNorm ; (; Int_t ; ivar, . Double_t ; x . ). private . Updates maximum and minimum value of a variable or target. ; Definition at line 129 of file VarTransformHandler.cxx. ◆ VarianceThreshold(). TMVA::DataLoader * TMVA::VarTransformHandler::VarianceThreshold ; (; Double_t ; threshold). Computes variance of all the variables and returns a new DataLoader with the selected variables whose variance is above a specific threshold. ; Threshold can be provided by user otherwise default value is 0 i.e. remove the variables which have same value in all the events.; Parameters. [in]thresholdvalue (Double). Transformation Definition String Format: ""VT(optional float value)""; Usage examples:. String Description . ""VT"" Select variables whose variance is above threshold value = 0 (Default) . ""VT(1.5)"" Select variables whose variance is above threshold value = 1.5 . Definition at line 84 of file VarTransformHandler.cxx. Member Data Documentation. ◆ fDataLoader. DataLoader* TMVA::VarTransformHandler::fDataLoader. private . Definition at line 54 of file VarTransformHandler.h. ◆ fDataSetInfo. DataSetInfo& TMVA::VarTransformHandler::fDataSetInfo. private . Definition at line 53 of file VarTransformHandler.h. ◆ fEvents. const std::vector<Event*>& TMVA::VarTransformHandler::fEvents. private . Definition at line 55 of file VarTransformHandler.h. ◆ fLogger. MsgLogger* TMVA::VarTransformHandler::fLogger. mutable . Definition at line 48 of file VarTransformHandler.h. Libraries for TMVA::VarTransformHandler:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VarTransformHandler.h; tmva/tmva/src/VarTransformHandler.cxx. TMVAVarTransformHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html:3980,Guid,Guide,3980,doc/master/classTMVA_1_1VarTransformHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html,1,['Guid'],['Guide']
Usability, MinimumParameters.h;  MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  LinkDef.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:52907,Simpl,SimplexParameters,52907,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimplexParameters']
Usability, MinimumParameters.h;  MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  BFGSErrorUpdator.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:51456,Simpl,SimplexParameters,51456,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['Simpl'],['SimplexParameters']
Usability, MinimumParameters.h;  MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  Mn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:51461,Simpl,SimplexParameters,51461,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,2,['Simpl'],['SimplexParameters']
Usability," ReadMap (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadMapHelper (StreamHelper *i, Value *v, Bool_t vsn3, TBuffer &b);  ; void ReadObjects (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadPairFromMap (int nElements, TBuffer &b);  ; void ReadPrimitives (int nElements, TBuffer &b, const TClass *onfileClass);  ; void WriteMap (int nElements, TBuffer &b);  ; void WriteObjects (int nElements, TBuffer &b);  ; void WritePrimitives (int nElements, TBuffer &b);  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; ReadBuffer_t fReadBufferFunc;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionStreamer.html:9916,clear,clear,9916,doc/master/classTGenCollectionStreamer.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html,1,['clear'],['clear']
Usability," Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProofServ.h>. Inheritance diagram for TIdleTOTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TIdleTOTimer(). TIdleTOTimer::TIdleTOTimer ; (; TProofServ * ; p, . Int_t ; delay . ). inline . Definition at line 448 of file TProofServ.h. Member Function Documentation. ◆ Notify(). Bool_t TIdleTOTimer::Notify ; (; ). overridevirtual . Handle expiration of the idle timer. The session will just be terminated. ; Implements TSysEvtHandler.; Definition at line 515 of file TProofServ.cxx. Member Data Documentation. ◆ fProofServ. TProofServ* TIdleTOTimer::fProofServ. private . Definition at line 445 of file TProofServ.h. proof/proof/inc/TProofServ.h; proof/proof/src/TProofServ.cxx. TIdleTOTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIdleTOTimer.html:17954,Guid,Guide,17954,doc/master/classTIdleTOTimer.html,https://root.cern,https://root.cern/doc/master/classTIdleTOTimer.html,1,['Guid'],['Guide']
Usability," RooDouble ();  Default constructor. ;  ;  RooDouble (const RooDouble &other);  ;  RooDouble (double value);  ; Int_t Compare (const TObject *other) const override;  Implement comparison to other TObjects that are also RooDouble to facilitate sorting of RooDoubles in a ROOT container. ;  ; TClass * IsA () const override;  ; bool IsSortable () const override;  We are a sortable object. ;  ;  operator double () const;  Return value of contained double. ;  ; RooDouble & operator= (double value);  Return true if contained double equals value. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDouble.html:1391,Clear,Clear,1391,doc/master/classRooDouble.html,https://root.cern,https://root.cern/doc/master/classRooDouble.html,1,['Clear'],['Clear']
Usability," SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:1820,Clear,Clear,1820,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html,2,['Clear'],['Clear']
Usability," SetCssType (const char *csstype);  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Experimental::RCanvas:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RCanvas() [1/2]. ROOT::Experimental::RCanvas::RCanvas ; (; const RCanvas & ; ). privatedelete . Disable copy construction for now. . ◆ RCanvas() [2/2]. ROOT::Experimental::RCanvas::RCanvas ; (; ). inline . Create a temporary RCanvas; for long-lived ones please use Create(). ; Definition at line 88 of file RCanvas.hxx. ◆ ~RCanvas(). ROOT::Experimental::RCanvas::~RCanvas ; (; ). overridedefault . Member Function Documentation. ◆ AddPanel(). template<class PANEL > . bool ROOT::Experimental::RCanvas::AddPanel ; (; std::shared_ptr< PANEL > & ; panel). inline . Insert panel into the canvas, canvas should be shown at this moment. ; Definition at line 139 of file RCanvas.hxx. ◆ ClearOnClose(). void ROOT::Experimental::RCanvas::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 239 of file RCanvas.cxx. ◆ ClearShown(). void ROOT::Experimental::RCanvas::ClearShown ; (; ). inline . clear IsShown() flag ; Definition at line 123 of file RCanvas.hxx. ◆ ClearUpdated(). void ROOT::Experimental::RCanvas::ClearUpdated ; (; ). inline . clear IsUpdated() flag ; Definition at line 169 of file RCanvas.hxx. ◆ Create(). std::shared_ptr< ROOT::Experimental::RCanvas > ROOT::Experimental::RCanvas::Create ; (; const std::string & ; title). static . Create new canvas instance. ; Definition at line 89 of file RCanvas.cxx. ◆ CreateJSON(). std::string ROOT::Experimental::RCanvas::CreateJSON ; (; ). Provide JSON which can be used for offline display. ; Create JSON data for the canvas Can be used of offline display with JSROOT. ; Definition at line 211 of file RCanvas.cxx. ◆ GetCanvas() [1/2]. const RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:10262,Clear,ClearOnClose,10262,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html,1,['Clear'],['ClearOnClose']
Usability," SetFocus ();  Set focus to this text entry. ;  ; virtual void SetFont (const char *fontName, Bool_t local=kTRUE);  Changes text font specified by name. ;  ; virtual void SetFont (FontStruct_t font, Bool_t local=kTRUE);  Changes text font. ;  ; virtual void SetFont (TGFont *font, Bool_t local=kTRUE);  Changes text font specified by pointer to TGFont object. ;  ; void SetForegroundColor (Pixel_t fore) override;  ; virtual void SetFrameDrawn (Bool_t flag=kTRUE);  Sets the text entry to draw itself inside a two-pixel frame if enable is kTRUE, and to draw itself without any frame if enable is kFALSE. ;  ; virtual void SetInsertMode (EInsertMode mode=kInsert);  Sets the mode how characters are entered to the text entry. ;  ; virtual void SetMaxLength (Int_t maxlen);  Set the maximum length of the text in the editor. ;  ; virtual void SetState (Bool_t state);  Set state of widget. If kTRUE=enabled, kFALSE=disabled. ;  ; virtual void SetText (const char *text, Bool_t emit=kTRUE);  Sets text entry to text, clears the selection and moves the cursor to the end of the line. ;  ; virtual void SetTextColor (Pixel_t color, Bool_t local=kTRUE);  Changes text color. ;  ; virtual void SetTextColor (TColor *color, Bool_t local=kTRUE);  Changes text color. ;  ; virtual void SetTitle (const char *label);  ; virtual void SetToolTipText (const char *text, Long_t delayms=500);  Set tool tip text associated with this text entry. ;  ; virtual void ShiftTabPressed ();  This signal is emitted when SHIFT and TAB keys are pressed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TabPressed ();  This signal is emitted when the <TAB> key is pressed. ;  ; virtual void TextChanged (const char *text=nullptr);  This signal is emitted every time the text has changed. ;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:12471,clear,clears,12471,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clears']
Usability," SetLikelihoodInterval (LikelihoodInterval *theInterval);  ; void SetLineColor (const Color_t color);  set the line color for the 1D interval lines or contours (2D) ;  ; void SetMaximum (const double theMaximum);  ; void SetNPoints (Int_t np);  ; void SetPlotParameters (const RooArgSet *params);  ; void SetPrecision (double eps);  set plot precision (when drawing a RooPlot) ;  ; void SetRange (double x1, double x2);  set plot range (for 1D plot) ;  ; void SetRange (double x1, double y1, double x2, double y2);  set plot range (for 2D plot) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html:2352,Clear,Clear,2352,doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,1,['Clear'],['Clear']
Usability," SetPoints (Double_t *points) const =0;  ; virtual void SetPoints (Float_t *points) const =0;  ; void SetRuntime (Bool_t flag=kTRUE);  ; virtual void SetSegsAndPols (TBuffer3D &buff) const =0;  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primitive mesh. ;  ; virtual void Sizeof3D () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:13702,Clear,Clear,13702,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['Clear'],['Clear']
Usability," SetRight(). virtual void TMVA::Node::SetRight ; (; Node * ; r). inlinevirtual . Reimplemented in TMVA::DecisionTreeNode.; Definition at line 95 of file Node.h. ◆ Streamer(). virtual void TMVA::Node::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::BinarySearchTreeNode, and TMVA::DecisionTreeNode. ◆ StreamerNVirtual(). void TMVA::Node::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file Node.h. Friends And Related Symbol Documentation. ◆ operator<< [1/2]. std::ostream & operator<< ; (; std::ostream & ; os, . const Node & ; node . ). friend . ◆ operator<< [2/2]. std::ostream & operator<< ; (; std::ostream & ; os, . const Node * ; node . ). friend . Member Data Documentation. ◆ fDepth. UInt_t TMVA::Node::fDepth. protected . depth of the node within the tree (seen from root node) ; Definition at line 143 of file Node.h. ◆ fgCount. Int_t TMVA::Node::fgCount = 0. staticprivate . counter of all nodes present.. for debug.. to spot memory leaks... ; Definition at line 148 of file Node.h. ◆ fLeft. Node* TMVA::Node::fLeft. protected . pointers to the two ""daughter"" nodes ; Definition at line 139 of file Node.h. ◆ fParent. Node* TMVA::Node::fParent. protected . the previous (parent) node ; Definition at line 138 of file Node.h. ◆ fParentTree. BinaryTree* TMVA::Node::fParentTree. protected . pointer to the parent tree to which the Node belongs ; Definition at line 145 of file Node.h. ◆ fPos. char TMVA::Node::fPos. protected . position, i.e. it is a left (l) or right (r) daughter ; Definition at line 142 of file Node.h. ◆ fRight. Node* TMVA::Node::fRight. protected . pointers to the two ""daughter"" nodes ; Definition at line 140 of file Node.h. Libraries for TMVA::Node:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Node.h; tmva/tmva/src/Node.cxx. TMVANode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Node.html:11309,Guid,Guide,11309,doc/master/classTMVA_1_1Node.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Node.html,1,['Guid'],['Guide']
Usability," SetSelected (Int_t sel);  Set the selected branch. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIntersection.html:4659,Clear,Clear,4659,doc/master/classTGeoIntersection.html,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html,3,['Clear'],['Clear']
Usability," Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void Begin1D (TTree *t);  Initialization for 1D Histogram. ;  ; virtual void Begin2D (TTree *t);  Initialization for 2D histogram. ;  ; virtual void Begin3D (TTree *t);  Initialization for 3D histogram. ;  ; void DefVar () override;  Define variables according to arguments. ;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the histgram with given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TH1 * fHistogram;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawHist.html:12062,Clear,ClearFormula,12062,doc/master/classTProofDrawHist.html,https://root.cern,https://root.cern/doc/master/classTProofDrawHist.html,1,['Clear'],['ClearFormula']
Usability," StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMutexImp.html:1456,Clear,Clear,1456,doc/master/classTMutexImp.html,https://root.cern,https://root.cern/doc/master/classTMutexImp.html,1,['Clear'],['Clear']
Usability," StreamerNVirtual(). void TVirtualStreamerInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 216 of file TVirtualStreamerInfo.h. ◆ TagFile(). virtual void TVirtualStreamerInfo::TagFile ; (; TFile * ; fFile). pure virtual . Implemented in TStreamerInfo. ◆ Update(). virtual void TVirtualStreamerInfo::Update ; (; const TClass * ; oldClass, . TClass * ; newClass . ). pure virtual . Implemented in TStreamerInfo. Member Data Documentation. ◆ fgCanDelete. Bool_t TVirtualStreamerInfo::fgCanDelete = kTRUE. staticprotected . true if the StreamerInfo has been compiled (i.e. fully built, ready to use for streaming). ; Definition at line 52 of file TVirtualStreamerInfo.h. ◆ fgInfoFactory. TVirtualStreamerInfo * TVirtualStreamerInfo::fgInfoFactory = nullptr. staticprotected . Definition at line 55 of file TVirtualStreamerInfo.h. ◆ fgOptimize. Bool_t TVirtualStreamerInfo::fgOptimize = kTRUE. staticprotected . Definition at line 53 of file TVirtualStreamerInfo.h. ◆ fgStreamMemberWise. Bool_t TVirtualStreamerInfo::fgStreamMemberWise = kTRUE. staticprotected . Definition at line 54 of file TVirtualStreamerInfo.h. ◆ fIsBuilt. Bool_t TVirtualStreamerInfo::fIsBuilt. protected . true if the StreamerInfo has been optimized ; Definition at line 48 of file TVirtualStreamerInfo.h. ◆ fIsCompiled. std::atomic<Bool_t> TVirtualStreamerInfo::fIsCompiled. protected . true if the StreamerInfo has been 'built' (i.e. has all the StreamerElements it should have) ; Definition at line 49 of file TVirtualStreamerInfo.h. ◆ fOptimized. Bool_t TVirtualStreamerInfo::fOptimized. protected . Definition at line 47 of file TVirtualStreamerInfo.h. Libraries for TVirtualStreamerInfo:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TVirtualStreamerInfo.h; core/meta/src/TVirtualStreamerInfo.cxx. TVirtualStreamerInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:35686,Guid,Guide,35686,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['Guid'],['Guide']
Usability," TBuffer3D() [1/2]. TBuffer3D::TBuffer3D ; (; const TBuffer3D & ; ). privatedelete . ◆ TBuffer3D() [2/2]. TBuffer3D::TBuffer3D ; (; Int_t ; type, . UInt_t ; reqPnts = 0, . UInt_t ; reqPntsCapacity = 0, . UInt_t ; reqSegs = 0, . UInt_t ; reqSegsCapacity = 0, . UInt_t ; reqPols = 0, . UInt_t ; reqPolsCapacity = 0 . ). Destructor. ; Construct from supplied shape type and raw sizes ; Definition at line 222 of file TBuffer3D.cxx. ◆ ~TBuffer3D(). TBuffer3D::~TBuffer3D ; (; ). virtual . Destructor. ; Definition at line 235 of file TBuffer3D.cxx. Member Function Documentation. ◆ Class(). static TClass * TBuffer3D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBuffer3D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBuffer3D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 122 of file TBuffer3D.h. ◆ ClearSectionsValid(). void TBuffer3D::ClearSectionsValid ; (; ). Clear any sections marked valid. ; Definition at line 287 of file TBuffer3D.cxx. ◆ DecCSLevel(). UInt_t TBuffer3D::DecCSLevel ; (; ). static . Decrement CS level. ; Definition at line 513 of file TBuffer3D.cxx. ◆ DeclFileName(). static const char * TBuffer3D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 122 of file TBuffer3D.h. ◆ GetCSLevel(). UInt_t TBuffer3D::GetCSLevel ; (; ). static . Return CS level. ; Definition at line 497 of file TBuffer3D.cxx. ◆ GetSections(). UInt_t TBuffer3D::GetSections ; (; UInt_t ; mask); const. inline . Definition at line 68 of file TBuffer3D.h. ◆ IncCSLevel(). void TBuffer3D::IncCSLevel ; (; ). static . Increment CS level. ; Definition at line 505 of file TBuffer3D.cxx. ◆ Init(). void TBuffer3D::Init ; (; ). private . Initialise buffer. ; Definition at line 245 of file TBuffer3D.cxx. ◆ IsA(). TClass * TBuffer3D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:22704,Clear,ClearSectionsValid,22704,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['Clear'],['ClearSectionsValid']
Usability," TDrawFeedback(). TDrawFeedback::TDrawFeedback ; (; TProof * ; proof = 0, . TSeqCollection * ; names = 0 . ). Constructor. ; Definition at line 41 of file TDrawFeedback.cxx. ◆ ~TDrawFeedback(). TDrawFeedback::~TDrawFeedback ; (; ). override . Destructor. ; Definition at line 80 of file TDrawFeedback.cxx. Member Function Documentation. ◆ Class(). static TClass * TDrawFeedback::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDrawFeedback::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDrawFeedback::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 54 of file TDrawFeedback.h. ◆ DeclFileName(). static const char * TDrawFeedback::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 54 of file TDrawFeedback.h. ◆ Feedback(). void TDrawFeedback::Feedback ; (; TList * ; objs). Display feedback. ; Definition at line 93 of file TDrawFeedback.cxx. ◆ GetName(). const char * TDrawFeedback::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 50 of file TDrawFeedback.h. ◆ Hash(). ULong_t TDrawFeedback::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:16129,feedback,feedback,16129,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,1,['feedback'],['feedback']
Usability," TEveRGBAPalette() [2/3]. TEveRGBAPalette::TEveRGBAPalette ; (; ). Constructor. ; Definition at line 33 of file TEveRGBAPalette.cxx. ◆ TEveRGBAPalette() [3/3]. TEveRGBAPalette::TEveRGBAPalette ; (; Int_t ; min, . Int_t ; max, . Bool_t ; interp = kTRUE, . Bool_t ; showdef = kTRUE, . Bool_t ; fixcolrng = kFALSE . ). Constructor. ; Definition at line 65 of file TEveRGBAPalette.cxx. ◆ ~TEveRGBAPalette(). TEveRGBAPalette::~TEveRGBAPalette ; (; ). override . Destructor. ; Definition at line 98 of file TEveRGBAPalette.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveRGBAPalette::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveRGBAPalette::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveRGBAPalette::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 160 of file TEveRGBAPalette.h. ◆ ClearColorArray(). void TEveRGBAPalette::ClearColorArray ; (; ). Clear internal color array. ; Definition at line 152 of file TEveRGBAPalette.cxx. ◆ ColorFromValue() [1/3]. const UChar_t * TEveRGBAPalette::ColorFromValue ; (; Int_t ; val); const. inline . Definition at line 179 of file TEveRGBAPalette.h. ◆ ColorFromValue() [2/3]. Bool_t TEveRGBAPalette::ColorFromValue ; (; Int_t ; val, . Int_t ; defVal, . UChar_t * ; pix, . Bool_t ; alpha = kTRUE . ); const. inline . Definition at line 217 of file TEveRGBAPalette.h. ◆ ColorFromValue() [3/3]. void TEveRGBAPalette::ColorFromValue ; (; Int_t ; val, . UChar_t * ; pix, . Bool_t ; alpha = kTRUE . ); const. inline . Definition at line 209 of file TEveRGBAPalette.h. ◆ DeclFileName(). static const char * TEveRGBAPalette::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 160 of file TEveRGBAPalette.h. ◆ DoubleToInt(). Int_t TEveRGBAPalette::DoubleToInt ; (; Double_t ; d); const. inlineprotected . Definition at line 69 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRGBAPalette.html:21095,Clear,ClearColorArray,21095,doc/master/classTEveRGBAPalette.html,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html,1,['Clear'],['ClearColorArray']
Usability, TReadLockGuard() [2/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 122 of file TVirtualRWMutex.h. ◆ ~TReadLockGuard(). ROOT::TReadLockGuard::~TReadLockGuard ; (; ). inline . Definition at line 126 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TReadLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TReadLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TReadLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TReadLockGuard::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 128 of file TVirtualRWMutex.h. ◆ IsA(). TClass * ROOT::TReadLockGuard::IsA ; (; ); const. inline . ReturnsTClass describing current object ; Definition at line 128 of file TVirtualRWMutex.h. ◆ operator=(). TReadLockGuard & ROOT::TReadLockGuard::operator= ; (; const TReadLockGuard & ; ). privatedelete . ◆ Streamer(). void ROOT::TReadLockGuard::Streamer ; (; TBuffer & ; ). ◆ StreamerNVirtual(). void ROOT::TReadLockGuard::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TVirtualRWMutex.h. Member Data Documentation. ◆ fHint. TVirtualRWMutex::Hint_t* ROOT::TReadLockGuard::fHint. private . Definition at line 116 of file TVirtualRWMutex.h. ◆ fMutex. TVirtualRWMutex* const ROOT::TReadLockGuard::fMutex. private . Definition at line 115 of file TVirtualRWMutex.h. Libraries for ROOT::TReadLockGuard:. [legend]; The documentation for this class was generated from the following file:; core/base/inc/TVirtualRWMutex.h. ROOTTReadLockGuard. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TReadLockGuard.html:3109,Guid,Guide,3109,doc/master/classROOT_1_1TReadLockGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReadLockGuard.html,1,['Guid'],['Guide']
Usability," The default error handler function. ;  ; void Error (const char *location, const char *msgfmt,...);  Use this function in case an error occurred. ;  ; void ErrorHandler (int level, const char *location, const char *fmt, std::va_list va);  General error handler function. It calls the user set error handler. ;  ; void Fatal (const char *location, const char *msgfmt,...);  Use this function in case of a fatal error. It will abort the program. ;  ; ErrorHandlerFunc_t GetErrorHandler ();  Returns the current error handler function. ;  ; ErrorSystemMsgHandlerFunc_t ROOT::Internal::GetErrorSystemMsgHandler ();  ; void Info (const char *location, const char *msgfmt,...);  Use this function for informational messages. ;  ; void MayNotUse (const char *method);  This function can be used in classes that should override a certain function, but in the inherited class the function makes no sense. ;  ; void ROOT::Internal::MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void Obsolete (const char *function, const char *asOfVers, const char *removedFromVers);  Use this function to declare a function obsolete. ;  ; ErrorHandlerFunc_t SetErrorHandler (ErrorHandlerFunc_t newhandler);  Set an errorhandler function. Returns the old handler. ;  ; ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SysError (const char *location, const char *msgfmt,...);  Use this function in case a system (OS or GUI) related error occurred. ;  ; void Warning (const char *location, const char *msgfmt,...);  Use this function in warning situations. ;  . Variables; Int_t gErrorAbortLevel;  ; Int_t gErrorIgnoreLevel;  Error handling routines. ;  ; Bool_t gPrintViaErrorHandler;  ; const char * kAssertMsg;  ; constexpr Int_t kBreak = 4000;  ; const char * kCheckMs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:2553,simpl,simple,2553,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['simpl'],['simple']
Usability," createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:2951,intuit,intuitively,2951,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['intuit'],['intuitively']
Usability," exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:119410,simpl,simple,119410,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability," fIntHandler;  ; TString fLogFilePath;  ; TMonitor * fMonitor;  ; TString fName;  ; Int_t fProtocol;  ; TObject * fReceivedObject;  ; TSeqCollection * fRootFiles;  ; TSocket * fSocket;  ; TUrl fUrl;  ; TRemoteObject * fWorkingDir;  . Static Private Attributes; static Int_t fgPortAttempts = 100;  ; static Int_t fgPortLower = 49152;  ; static Int_t fgPortUpper = 65535;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web browser. ;  ; virtual void Help (const char *line);  The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ;  ; virtual void LoadGraphicsLibs ();  Load shared libs necessary for graphics. ;  ; virtual void MakeBatch ();  Switch to batch mode. ;  ; virtual Longptr_t ProcessRemote (const char *line, Int_t *error=nullptr);  Process the content of a line starting with "".R"" (already stripped-off) The format is. ;  ; void SetSignalHandler (TSignalHandler *sh);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TApplication; static void Close (TApplication *app);  Static function used to close a remote application. ;  ; static TApplication * Open (const char *url, Int_t debug, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:20309,guid,guide,20309,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['guid'],['guide']
Usability," fNMissReadOk. Int_t TTreeCache::fNMissReadOk {0}. protected . Number of blocks read, not found in the primary cache, and found in the secondary cache. ; Definition at line 46 of file TTreeCache.h. ◆ fNMissReadPref. Int_t TTreeCache::fNMissReadPref {0}. protected . Number of blocks read into the secondary (""miss"") cache. ; Definition at line 50 of file TTreeCache.h. ◆ fNReadMiss. Int_t TTreeCache::fNReadMiss {0}. protected . Number of blocks read and not found in the cache. ; Definition at line 47 of file TTreeCache.h. ◆ fNReadOk. Int_t TTreeCache::fNReadOk {0}. protected . Number of blocks read and found in the cache. ; Definition at line 45 of file TTreeCache.h. ◆ fNReadPref. Int_t TTreeCache::fNReadPref {0}. protected . Number of blocks that were prefetched. ; Definition at line 49 of file TTreeCache.h. ◆ fOneTime. bool TTreeCache::fOneTime {false}. protected . ! used in the learning phase ; Definition at line 57 of file TTreeCache.h. ◆ fOptimizeMisses. bool TTreeCache::fOptimizeMisses {false}. protected . ! true if we should optimize cache misses. ; Definition at line 72 of file TTreeCache.h. ◆ fPrefillType. EPrefillType TTreeCache::fPrefillType. protected . Whether a pre-filling is enabled (and if applicable which type) ; Definition at line 64 of file TTreeCache.h. ◆ fReadDirectionSet. bool TTreeCache::fReadDirectionSet {false}. protected . ! read direction established ; Definition at line 62 of file TTreeCache.h. ◆ fReverseRead. bool TTreeCache::fReverseRead {false}. protected . ! reading in reverse mode ; Definition at line 58 of file TTreeCache.h. ◆ fTree. TTree* TTreeCache::fTree {nullptr}. protected . ! pointer to the current Tree ; Definition at line 53 of file TTreeCache.h. Libraries for TTreeCache:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTreeCache.h; tree/tree/src/TTreeCache.cxx. TTreeCache. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:57407,Guid,Guide,57407,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['Guid'],['Guide']
Usability," fProxyList;  Stack of recursive proxies. ;  ; TObjArray * fReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) ;  ; Sizing_t fResize;  Container accessors: resize container. ;  ; Method fSize;  Container accessors: size of container. ;  ; Staged_t fStaged;  Optimization: Keep staged array once they were created. ;  ; int fSTL_type;  STL container type. ;  ; Info_t fTypeinfo;  Type information. ;  ; Value * fVal;  Descriptor of the Value_type. ;  ; int fValDiff;  Offset between two consecutive value_types (memory layout). ;  ; int fValOffset;  Offset from key to value (in maps) ;  ; std::atomic< Value * > fValue;  Descriptor of the container value type. ;  ; TStreamerInfoActions::TActionSequence * fWriteMemberWise;  ;  Protected Attributes inherited from TVirtualCollectionProxy; TClassRef fClass;  ; UInt_t fProperties;  . Inheritance diagram for TGenBitsetProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGenBitsetProxy(). TGenBitsetProxy::TGenBitsetProxy ; (; const TGenCollectionProxy & ; c). inline . Definition at line 138 of file TGenCollectionProxy.cxx. ◆ ~TGenBitsetProxy(). TGenBitsetProxy::~TGenBitsetProxy ; (; ). inlineoverride . Definition at line 142 of file TGenCollectionProxy.cxx. Member Function Documentation. ◆ At(). void * TGenBitsetProxy::At ; (; UInt_t ; idx). inlineoverridevirtual . Return the address of the value at index idx ; Implements TVirtualCollectionProxy.; Definition at line 146 of file TGenCollectionProxy.cxx. ◆ DeleteItem(). void TGenBitsetProxy::DeleteItem ; (; Bool_t ; force, . void * ; ptr . ); const. inlineoverridevirtual . Call to delete/destruct individual item. ; Reimplemented from TGenCollectionProxy.; Definition at line 171 of file TGenCollectionProxy.cxx. io/io/src/TGenCollectionProxy.cxx. TGenBitsetProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenBitsetProxy.html:12602,Guid,Guide,12602,doc/master/classTGenBitsetProxy.html,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html,1,['Guid'],['Guide']
Usability," fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGInputDialog.h>. Inheritance diagram for TGInputDialog:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGInputDialog() [1/2]. TGInputDialog::TGInputDialog ; (; const TGInputDialog & ; ). privatedelete . ◆ TGInputDialog() [2/2]. TGInputDialog::TGInputDialog ; (; const TGWindow * ; p = nullptr, . const TGWindow * ; main = nullptr, . const char * ; prompt = nullptr, . const char * ; defval = nullptr, . char * ; retstr = nullptr, . UInt_t ; options = kVerticalFrame . ). Create simple input dialog. ; It is important to know that the case where the constructor in which all the variables are initialized to their default values is only used for the TBrowser to inspect on the classes. For normal use the only variable that should be free is options.; Variables prompt, defval are the content of the input dialog while retstr has to be initialized to a char[256]. In case these are not initialized, they will show default values while retstr will be automatically allocated by the dialog. However this will make impossible to retrieve the value entered by the dialog.; To see TGInputDialog in use see: $ROOTSYS/tutorials/testInputDialog.cxx ; Definition at line 48 of file TGInputDialog.cxx. ◆ ~TGInputDialog(). TGInputDialog::~TGInputDialog ; (; ). override . Cleanup dialog. ; Definition at line 134 of file TGInputDialog.cxx. Member Function Documentation. ◆ Class(). static TClass * TGInputDialog::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGInputDialog.html:37216,simpl,simple,37216,doc/master/classTGInputDialog.html,https://root.cern,https://root.cern/doc/master/classTGInputDialog.html,1,['simpl'],['simple']
Usability," hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;   Display the Tree data structures ;  ; file  tree0.C;   Simple Event class example ;  ; file  tree1.C;   This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ;  ; file  tree2.C;   This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ;  ; file  tree2a.C;   This example is the same as tree2.C, but uses a class instead of a C-struct. ;  ; file  tree3.C;   Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel. ;  ; file  tree4.C;   This example writes a tree with objects of the class Event. ;  ; file  treefriend.C;   Illustrates how to use Tree friends: ;  ; file  treegetval.C;   Illustrates how to retrieve TTree variables in arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tree.html:2930,Simpl,Simple,2930,doc/master/group__tutorial__tree.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability," kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <RooHelpers.h>. Inheritance diagram for RooHelpers::WrapIntoTObject< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ WrapIntoTObject(). template<typename T > . RooHelpers::WrapIntoTObject< T >::WrapIntoTObject ; (; T & ; obj). inline . Definition at line 58 of file RooHelpers.h. Member Data Documentation. ◆ _payload. template<typename T > . T* RooHelpers::WrapIntoTObject< T >::_payload. Definition at line 59 of file RooHelpers.h. Collaboration diagram for RooHelpers::WrapIntoTObject< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; roofit/roofitcore/inc/RooHelpers.h. RooHelpersWrapIntoTObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html:10596,Guid,Guide,10596,doc/master/structRooHelpers_1_1WrapIntoTObject.html,https://root.cern,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html,1,['Guid'],['Guide']
Usability, operator()() [2/3]. template<class CoordSystem > . LorentzVector< CoordSystem > ROOT::Math::BoostY::operator() ; (; const LorentzVector< CoordSystem > & ; v); const. inline . Lorentz transformation operation on a LorentzVector in any coordinate system. ; Definition at line 140 of file BoostY.h. ◆ operator()() [3/3]. LorentzVector< PxPyPzE4D< double > > ROOT::Math::BoostY::operator() ; (; const LorentzVector< ROOT::Math::PxPyPzE4D< double > > & ; v); const. Lorentz transformation operation on a Minkowski ('Cartesian') LorentzVector. ; Definition at line 82 of file BoostY.cxx. ◆ operator*(). template<class A4Vector > . A4Vector ROOT::Math::BoostY::operator* ; (; const A4Vector & ; v); const. inline . Overload operator * for rotation on a vector. ; Definition at line 164 of file BoostY.h. ◆ operator==(). bool ROOT::Math::BoostY::operator== ; (; const BoostY & ; rhs); const. inline . Equality/inequality operators. ; Definition at line 182 of file BoostY.h. ◆ Rectify(). void ROOT::Math::BoostY::Rectify ; (; ). Re-adjust components to eliminate small deviations from a perfect orthosyplectic matrix. ; Definition at line 63 of file BoostY.cxx. ◆ SetBeta(). void ROOT::Math::BoostY::SetBeta ; (; Scalar ; beta). inline . Set the given beta of the Boost. ; Definition at line 108 of file BoostY.h. ◆ SetComponents(). void ROOT::Math::BoostY::SetComponents ; (; Scalar ; beta_y). Set components from a Scalar beta_y. ; Definition at line 32 of file BoostY.cxx. Member Data Documentation. ◆ fBeta. Scalar ROOT::Math::BoostY::fBeta. private . Definition at line 193 of file BoostY.h. ◆ fGamma. Scalar ROOT::Math::BoostY::fGamma. private . Definition at line 194 of file BoostY.h. Libraries for ROOT::Math::BoostY:. [legend]; The documentation for this class was generated from the following files:; math/genvector/inc/Math/GenVector/BoostY.h; math/genvector/src/BoostY.cxx. ROOTMathBoostY. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BoostY.html:7926,Guid,Guide,7926,doc/master/classROOT_1_1Math_1_1BoostY.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BoostY.html,1,['Guid'],['Guide']
Usability," operator= (const TMVA::VariableInfo &rhs);  comparison operator ;  ; void ReadFromStream (std::istream &istr);  read VariableInfo from stream ;  ; void ReadFromXML (void *varnode);  read VariableInfo from stream ;  ; void ResetMinMax ();  ; void SetExternalLink (void *p);  ; void SetInternalName (const char *name);  ; void SetMax (Double_t v);  ; void SetMean (Double_t v);  ; void SetMin (Double_t v);  ; void SetRMS (Double_t v);  ; void SetVariance (Double_t v);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteToStream (std::ostream &o) const;  write VariableInfo to stream ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableInfo.html:2241,Clear,Clear,2241,doc/master/classTMVA_1_1VariableInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableInfo.html,1,['Clear'],['Clear']
Usability," set options ;  ; void SetParameters (const MiserParameters &p);  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Member Functions; void SetMiserParameters ();  . Private Attributes; bool fHaveNewParams;  ; MiserParameters fParams;  ; gsl_monte_miser_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLMiserIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMiserIntegrationWorkspace(). ROOT::Math::GSLMiserIntegrationWorkspace::GSLMiserIntegrationWorkspace ; (; size_t ; dim = 0). inline . Definition at line 166 of file GSLMCIntegrationWorkspace.h. Member Function Documentation. ◆ Clear(). void ROOT::Math::GSLMiserIntegrationWorkspace::Clear ; (; ). inlineoverridevirtual . free the workspace deleting the GSL pointer ; Reimplemented from ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 190 of file GSLMCIntegrationWorkspace.h. ◆ GetWS(). gsl_monte_miser_state * ROOT::Math::GSLMiserIntegrationWorkspace::GetWS ; (; ). inline . Definition at line 195 of file GSLMCIntegrationWorkspace.h. ◆ Init(). bool ROOT::Math::GSLMiserIntegrationWorkspace::Init ; (; size_t ; dim). inlineoverridevirtual . initialize the workspace creating the GSL pointer if it is not there ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 174 of file GSLMCIntegrationWorkspace.h. ◆ NDim(). size_t ROOT::Math::GSLMiserIntegrationWorkspace::NDim ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 203 of file GSLMCIntegrationWorkspace.h. ◆ Options(). std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::GSLMiserI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html:2131,Clear,Clear,2131,doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html,1,['Clear'],['Clear']
Usability, sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:153090,simpl,simple,153090,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['simpl'],['simple']
Usability," stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:153371,simpl,simple,153371,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['simpl'],['simple']
Usability," this is a stack variable. The value of the pointer is set equal to; new Quad(1.,2.,-3.);; new, despite its looks, is an operator and creates an object or variable of the type that comes next, Quad in this case, on the heap. Just as with stack objects it has to be initialized by calling its constructor. The syntax requires that the argument list follows the type. This one statement has brought two items into existence, one on the heap and one on the stack. The heap object will live until the delete operator is applied to it.; There is no FORTRAN parallel to a heap object; variables either come or go as control passes in and out of a function or subroutine, or, like a COMMON block variables, live for the lifetime of the program. However, most people in HEP who use FORTRAN will have experience of a memory manager and the act of creating a bank is a good equivalent of a heap object. For those who know systems like ZEBRA, it will come as a relief to learn that objects do not move, C++ does not garbage collect, so there is never a danger that a pointer to an object becomes invalid for that reason. However, having created an object, it is the user’s responsibility to ensure that it is deleted when no longer needed, or to pass that responsibility onto to some other object. Failing to do that will result in a memory leak, one of the most common and most hard-to-find C++ bugs.; To send a message to an object via a pointer to it, you need to use the “->” operator e.g.:; root[] my_objptr->Solve();; Although we chose to call our pointer my_objptr, to emphasize that it is a pointer, heap objects are so common in an object-oriented program that pointer names rarely reflect the fact - you have to be careful that you know if you are dealing with an object or its pointer! Fortunately, the compiler won’t tolerate an attempt to do something like:; root[] my_objptr.Solve();; As we have seen, heap objects have to be accessed via pointers, whereas stack objects can be accessed directly. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:251469,learn,learn,251469,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learn']
Usability," { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TBits.h>. Inheritance diagram for TBits:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBits() [1/2]. TBits::TBits ; (; UInt_t ; nbits = 8). TBits constructor. All bits set to 0. ; Definition at line 33 of file TBits.cxx. ◆ TBits() [2/2]. TBits::TBits ; (; const TBits & ; original). TBits copy constructor. ; Definition at line 45 of file TBits.cxx. ◆ ~TBits(). TBits::~TBits ; (; ). virtual . TBits destructor. ; Definition at line 76 of file TBits.cxx. Member Function Documentation. ◆ Class(). static TClass * TBits::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBits::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBits::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 144 of file TBits.h. ◆ Clear(). void TBits::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the value. ; Reimplemented from TObject.; Definition at line 84 of file TBits.cxx. ◆ Compact(). void TBits::Compact ; (; ). Reduce the storage used by the object to a minimun. ; Definition at line 95 of file TBits.cxx. ◆ CountBits(). UInt_t TBits::CountBits ; (; UInt_t ; startBit = 0); const. Return number of bits set to 1 starting at bit startBit. ; Definition at line 118 of file TBits.cxx. ◆ DeclFileName(). static const char * TBits::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 144 of file TBits.h. ◆ DoAndEqual(). void TBits::DoAndEqual ; (; const TBits & ; rhs). protected . Execute (*this) &= rhs; Extra bits in rhs are ignored Missing bits in rhs are assumed to be zero. ; Definition at line 165 of file TBits.cxx. ◆ DoFlip(). void TBits::DoFlip ; (; ). protected . Execute ~(*this) ; Definition at line 205 of file TBits.cxx. ◆ DoLeftShift",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:14528,Clear,Clear,14528,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,1,['Clear'],['Clear']
Usability," ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveCaloViz; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo3D.html:30439,Clear,ClearProjectedList,30439,doc/master/classTEveCalo3D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo3D.html,2,['Clear'],['ClearProjectedList']
Usability," ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjected;  TEveProjected ();  Constructor. ;  ; virtual ~TEveProjected ();  Destructor. ;  ; Float_t GetDepth () const;  ; TEveProjectionManager * GetManager () const;  ; TEveProjectable * GetProjectable () const;  ; virtual TEveElement * GetProjectedAsElement ();  Returns this projected dynamic-casted to TE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo2D.html:32094,Clear,ClearProjectedList,32094,doc/master/classTEveCalo2D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo2D.html,1,['Clear'],['ClearProjectedList']
Usability,"  kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGTextEntry (const TGWindow *p, TGTextBuffer *text, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a text entry widget. ;  ;  TGTextEntry (const TGWindow *parent=nullptr, const char *text=nullptr, Int_t id=-1);  Simple text entry constructor. ;  ;  TGTextEntry (const TString &contents, const TGWindow *parent, Int_t id=-1);  Simple test entry constructor. ;  ;  ~TGTextEntry () override;  Delete a text entry widget. ;  ; virtual void AppendText (const char *text);  Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ;  ; void Backspace ();  Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ;  ; void Clear (Option_t *option="""") override;  Clears up the text entry. ;  ; void CursorLeft (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor leftwards one or more characters. ;  ; virtual void CursorOutDown ();  This signal is emitted when cursor is going out of bottom side. ;  ; virtual void CursorOutLeft ();  This signal is emitted when cursor is going out of left side. ;  ; virtual void CursorOutRight ();  This signal is emitted when cursor is going out of right side. ;  ; virtual void CursorOutUp ();  This signal is emitted when cursor is going out of upper side. ;  ; void CursorRight (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor rightwards one or more characters. ;  ; void CursorWordBackward (Bool_t mark=kFALSE);  Moves the cursor one word to the left. ;  ; void CursorWordForward (Bool_t mark=kFALSE);  Moves the cursor one word to the right. ;  ; void Cut ();  Copies the marked text to the clipboard and deletes it, if there is any. ;  ; void Del ();  Deletes the character on the right side of the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:6412,Clear,Clear,6412,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,2,['Clear'],"['Clear', 'Clears']"
Usability,"  kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualStreamerInfo ();  Default constructor. ;  ;  TVirtualStreamerInfo (TClass *);  Default constructor. ;  ; virtual ~TVirtualStreamerInfo ();  Destructor. ;  ; virtual void Build (Bool_t isTransient=kFALSE)=0;  ; virtual void BuildCheck (TFile *file=nullptr, Bool_t load=kTRUE)=0;  ; virtual void BuildEmulated (TFile *file)=0;  ; virtual Bool_t BuildFor (const TClass *cl)=0;  ; virtual void BuildOld ()=0;  ; virtual void CallShowMembers (const void *obj, TMemberInspector &insp, Bool_t isTransient) const =0;  ; virtual void Clear (Option_t *="""") override=0;  Set name and title to empty strings (""""). ;  ; virtual Bool_t CompareContent (TClass *cl, TVirtualStreamerInfo *info, Bool_t warn, Bool_t complete, TFile *file)=0;  ; virtual void Compile ()=0;  ; virtual void DeleteArray (void *p, Bool_t dtorOnly=kFALSE)=0;  ; virtual void Destructor (void *p, Bool_t dtorOnly=kFALSE)=0;  ; virtual void ForceWriteInfo (TFile *file, Bool_t force=kFALSE)=0;  ; virtual TClassStreamer * GenEmulatedClassStreamer (const char *class_name, Bool_t silent)=0;  ; virtual TVirtualCollectionProxy * GenEmulatedProxy (const char *class_name, Bool_t silent)=0;  ; virtual Int_t GenerateHeaderFile (const char *dirname, const TList *subClasses=nullptr, const TList *extrainfos=nullptr)=0;  ; virtual TVirtualStreamerInfo * GenerateInfoForPair (const std::string &firstname, const std::string &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:3137,Clear,Clear,3137,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['Clear'],['Clear']
Usability,"» TFitterFumili. class TFitterFumili: public TFitterMinuit. Function Members (Methods); public:. TFitterFumili(); TFitterFumili(Int_t maxpar); TFitterFumili(const TFitterFumili&); virtual~TFitterFumili(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Double_tChisquare(Int_t npar, Double_t* params) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTFitterMinuit::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual Int_tTFitterMinuit::ExecuteCommand(const char* command, Double_t* args, Int_t nargs); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static TVirtualFitter*TVirtualFitter::Fitter(TObject* obj, Int_t maxpar = 25); virtual voidTFitterMinuit::FixParameter(Int_t ipar); virtual voidTVirtualFitter::GetConfidenceIntervals(TObject* obj, Double_t cl = 0.95); virtual voidTVirtualFitter::GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitterFumili.html:740,Clear,Clear,740,root/html528/TFitterFumili.html,https://root.cern,https://root.cern/root/html528/TFitterFumili.html,4,['Clear'],['Clear']
Usability,←. RooDataProjBinding. RooRealAnalytic. RooRealIntegral. RooRealMPFE. RooRealProxy. RooRealSumPdf. RooRealVar. RooRealVarSharedProperties. RooRecursiveFraction. RooRefArray. RooRefCountList. RooResolutionModel←. RooAddModel. RooGExpModel. RooGaussModel. RooTruthModel. RooScaledFunc. RooSecondMoment. RooSegmentedIntegrator1D←. RooSegmentedIntegrator2D. RooSegmentedIntegrator2D. RooSetPair. RooSetProxy. RooSharedProperties←. RooCategorySharedProperties. RooRealVarSharedProperties. RooSharedPropertiesList. RooSimGenContext. RooSimPdfBuilder. RooSimSplitGenContext. RooSimWSTool. RooSimWSTool::MultiBuildConfig. RooSimWSTool::SplitRule. RooSimultaneous←. RooStats::HistFactory::HistFactorySimultaneous. RooSpHarmonic. RooStats::AcceptanceRegion. RooStats::AsymptoticCalculator. RooStats::BayesianCalculator. RooStats::CombinedCalculator←. RooStats::ProfileLikelihoodCalculator. RooStats::ConfInterval←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::DebuggingSampler. RooStats::DebuggingTestStat. RooStats::FeldmanCousins. RooStats::FrequentistCalculator. RooStats::HLFactory. RooStats::Heaviside. RooStats::HistFactory::EstimateSummary. RooStats::HistFactory::FlexibleInterpVar. RooStats::HistFactory::HistFactorySimultaneous. RooStats::HistFactory::HistoToWorkspaceFactory. RooStats::HistFactory::HistoToWorkspaceFactoryFast. RooStats::HistFactory::LinInterpVar. RooStats::HistFactory::Measurement. RooStats::HistFactory::RooBarlowBeestonLL. RooStats::HybridCalculator. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HybridResult. RooStats::HypoTestCalculatorGeneric←. RooStats::AsymptoticCalculator. RooStats::FrequentistCalculator. RooStats::HybridCalculator. RooStats::HypoTestInverter. RooStats::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassHierarchy.html:25176,Simpl,SimpleInterval,25176,root/html534/ClassHierarchy.html,https://root.cern,https://root.cern/root/html534/ClassHierarchy.html,3,['Simpl'],['SimpleInterval']
Usability,␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 144/200 [====================>.........] - ETA: 0s - loss: 0.5963 - accuracy: 0.6772␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 173/200 [========================>.....] - ETA: 0s - loss: 0.5985 - accuracy: 0.6761␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 200/200 [==============================] - 0s 2ms/step - loss: 0.5974 - accuracy: 0.6774; Epoch 10/10; ; 1/200 [..............................] - ETA: 0s - loss: 0.6212 - accuracy: 0.6800␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 31/200 [===>..........................] - ETA: 0s - loss: 0.5971 - accuracy: 0.6710␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 59/200 [=======>......................] - ETA: 0s - loss: 0.5985 - accuracy: 0.6705␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 87/200 [============>.................] - ETA: 0s - loss: 0.6031 - accuracy: 0.6651␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 114/200 [================>.............] - ETA: 0s - loss: 0.6001 - accuracy: 0.6707␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 143/200 [====================>.........] - ETA: 0s - loss: 0.5959 - accuracy: 0.6761␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 172/200 [========================>.....] - ETA: 0s - loss: 0.5978 - accuracy: 0.6760␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 200/200 [==============================] - 0s 2ms/step - loss: 0.5992 - accuracy: 0.6754; removing existing files Higgs_Model.hxx Higgs_Model.root; AuthorLorenzo Moneta ; Definition in file TMVA_SOFIE_Models.py. tutorialstmvaTMVA_SOFIE_Models.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html:53705,Guid,Guide,53705,doc/master/TMVA__SOFIE__Models_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html,1,['Guid'],['Guide']
Usability,"◆ Chi2. int Foption_t::Chi2. Definition at line 32 of file Foption.h. ◆ Errors. int Foption_t::Errors. Definition at line 37 of file Foption.h. ◆ ExecPolicy. ROOT::EExecutionPolicy Foption_t::ExecPolicy. Definition at line 52 of file Foption.h. ◆ Gradient. int Foption_t::Gradient. Definition at line 40 of file Foption.h. ◆ hRobust. double Foption_t::hRobust. Definition at line 51 of file Foption.h. ◆ Integral. int Foption_t::Integral. Definition at line 44 of file Foption.h. ◆ Like. int Foption_t::Like. Definition at line 34 of file Foption.h. ◆ Minuit. int Foption_t::Minuit. Definition at line 46 of file Foption.h. ◆ More. int Foption_t::More. Definition at line 38 of file Foption.h. ◆ Nochisq. int Foption_t::Nochisq. Definition at line 45 of file Foption.h. ◆ NoErrX. int Foption_t::NoErrX. Definition at line 47 of file Foption.h. ◆ Nograph. int Foption_t::Nograph. Definition at line 42 of file Foption.h. ◆ Nostore. int Foption_t::Nostore. Definition at line 41 of file Foption.h. ◆ PChi2. int Foption_t::PChi2. Definition at line 33 of file Foption.h. ◆ Plus. int Foption_t::Plus. Definition at line 43 of file Foption.h. ◆ Quiet. int Foption_t::Quiet. Definition at line 29 of file Foption.h. ◆ Range. int Foption_t::Range. Definition at line 39 of file Foption.h. ◆ Robust. int Foption_t::Robust. Definition at line 48 of file Foption.h. ◆ StoreResult. int Foption_t::StoreResult. Definition at line 49 of file Foption.h. ◆ User. int Foption_t::User. Definition at line 35 of file Foption.h. ◆ Verbose. int Foption_t::Verbose. Definition at line 30 of file Foption.h. ◆ W1. int Foption_t::W1. Definition at line 36 of file Foption.h. Collaboration diagram for Foption_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; hist/hist/inc/Foption.h. Foption_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structFoption__t.html:2983,Guid,Guide,2983,doc/master/structFoption__t.html,https://root.cern,https://root.cern/doc/master/structFoption__t.html,1,['Guid'],['Guide']
Usability,◆ Class_Name(). static const char * TSecContextCleanup::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSecContextCleanup::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 124 of file TSecContext.h. ◆ DeclFileName(). static const char * TSecContextCleanup::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 124 of file TSecContext.h. ◆ GetPort(). Int_t TSecContextCleanup::GetPort ; (; ); const. inline . Definition at line 120 of file TSecContext.h. ◆ GetProtocol(). Int_t TSecContextCleanup::GetProtocol ; (; ); const. inline . Definition at line 121 of file TSecContext.h. ◆ GetType(). Int_t TSecContextCleanup::GetType ; (; ); const. inline . Definition at line 122 of file TSecContext.h. ◆ IsA(). TClass * TSecContextCleanup::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 124 of file TSecContext.h. ◆ Streamer(). void TSecContextCleanup::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSecContextCleanup::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 124 of file TSecContext.h. Member Data Documentation. ◆ fPort. Int_t TSecContextCleanup::fPort. private . Definition at line 111 of file TSecContext.h. ◆ fServerProtocol. Int_t TSecContextCleanup::fServerProtocol. private . Definition at line 112 of file TSecContext.h. ◆ fServerType. Int_t TSecContextCleanup::fServerType. private . Definition at line 113 of file TSecContext.h. Libraries for TSecContextCleanup:. [legend]; The documentation for this class was generated from the following file:; net/net/inc/TSecContext.h. TSecContextCleanup. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSecContextCleanup.html:12612,Guid,Guide,12612,doc/master/classTSecContextCleanup.html,https://root.cern,https://root.cern/doc/master/classTSecContextCleanup.html,1,['Guid'],['Guide']
Usability,"◆ DeclFileName(). static const char * TExec::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 39 of file TExec.h. ◆ Exec(). void TExec::Exec ; (; const char * ; command = """"). virtual . Execute the command referenced by this object. ; if command is given, this command is executed otherwise the default command of the object is executed; if the default command (in the exec title) is empty, an attempt is made to execute the exec name if it contains a ""."" or a ""("", otherwise the command "".x execname.C"" is executed. The function returns the result of the user function/script. ; Definition at line 143 of file TExec.cxx. ◆ IsA(). TClass * TExec::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 39 of file TExec.h. ◆ Paint(). void TExec::Paint ; (; Option_t * ; option = """"). overridevirtual . Execute the command referenced by this object. ; Reimplemented from TObject.; Definition at line 160 of file TExec.cxx. ◆ SavePrimitive(). void TExec::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 168 of file TExec.cxx. ◆ SetAction(). virtual void TExec::SetAction ; (; const char * ; action). inlinevirtual . Definition at line 37 of file TExec.h. ◆ Streamer(). void TExec::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TExec::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TExec.h. Libraries for TExec:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TExec.h; core/base/src/TExec.cxx. TExec. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExec.html:18114,Guid,Guide,18114,doc/master/classTExec.html,https://root.cern,https://root.cern/doc/master/classTExec.html,1,['Guid'],['Guide']
Usability,◆ DeclFileName(). static const char * TGDockableFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 139 of file TGDockableFrame.h. ◆ DockContainer(). void TGDockableFrame::DockContainer ; (; Int_t ; del = kTRUE). Dock container back to TGDockableFrame. ; Definition at line 325 of file TGDockableFrame.cxx. ◆ Docked(). virtual void TGDockableFrame::Docked ; (; ). inlinevirtual . Definition at line 112 of file TGDockableFrame.h. ◆ EnableHide() [1/2]. Bool_t TGDockableFrame::EnableHide ; (; ); const. inline . Definition at line 124 of file TGDockableFrame.h. ◆ EnableHide() [2/2]. void TGDockableFrame::EnableHide ; (; Bool_t ; onoff). Enable hiding. ; Definition at line 432 of file TGDockableFrame.cxx. ◆ EnableUndock() [1/2]. Bool_t TGDockableFrame::EnableUndock ; (; ); const. inline . Definition at line 122 of file TGDockableFrame.h. ◆ EnableUndock() [2/2]. void TGDockableFrame::EnableUndock ; (; Bool_t ; onoff). Enable undocking. ; Definition at line 419 of file TGDockableFrame.cxx. ◆ GetContainer(). TGCompositeFrame * TGDockableFrame::GetContainer ; (; ); const. inline . Definition at line 134 of file TGDockableFrame.h. ◆ GetUndocked(). TGUndockedFrame * TGDockableFrame::GetUndocked ; (; ); const. inline . Definition at line 135 of file TGDockableFrame.h. ◆ HideContainer(). void TGDockableFrame::HideContainer ; (; ). Hide dock container. ; Definition at line 374 of file TGDockableFrame.cxx. ◆ IsA(). TClass * TGDockableFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 139 of file TGDockableFrame.h. ◆ IsFixedSize(). Bool_t TGDockableFrame::IsFixedSize ; (; ); const. inline . Definition at line 131 of file TGDockableFrame.h. ◆ IsHidden(). Bool_t TGDockableFrame::IsHidden ; (; ); const. inline . Definition at line 129 of file TGDockableFrame.h. ◆ IsUndocked(). Bool_t TGDockableFrame::IsUndocked ; (; ); cons,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:36160,undo,undocking,36160,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['undo'],['undocking']
Usability,"◆ ESQLDataTypes. enum TSQLServer::ESQLDataTypes. printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on . EnumeratorkSQL_NONE ; kSQL_CHAR ; kSQL_VARCHAR ; kSQL_INTEGER ; kSQL_FLOAT ; kSQL_DOUBLE ; kSQL_NUMERIC ; kSQL_BINARY ; kSQL_TIMESTAMP . Definition at line 60 of file TSQLServer.h. Constructor & Destructor Documentation. ◆ TSQLServer(). TSQLServer::TSQLServer ; (; ). inlineprotected . Definition at line 52 of file TSQLServer.h. ◆ ~TSQLServer(). virtual TSQLServer::~TSQLServer ; (; ). inlinevirtual . Definition at line 72 of file TSQLServer.h. Member Function Documentation. ◆ Class(). static TClass * TSQLServer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSQLServer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSQLServer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TSQLServer.h. ◆ ClearError(). void TSQLServer::ClearError ; (; ). protected . reset error fields ; Definition at line 119 of file TSQLServer.cxx. ◆ Close(). virtual void TSQLServer::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ Commit(). Bool_t TSQLServer::Commit ; (; ). virtual . submit ""COMMIT"" query to database return kTRUE, if successful ; Reimplemented in TMySQLServer, TODBCServer, and TSQLiteServer.; Definition at line 160 of file TSQLServer.cxx. ◆ Connect(). TSQLServer * TSQLServer::Connect ; (; const char * ; db, . const char * ; uid, . const char * ; pw . ). static . The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ; Depending on the <dbms> the shared library (plugin) for the selected system will be loaded. W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:14835,Clear,ClearError,14835,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['Clear'],['ClearError']
Usability,"◆ GetValue() [2/2]. template<class T > . T TMVA::OptionMap::GetValue ; (; const TString & ; key); const. inline . Definition at line 141 of file OptionMap.h. ◆ HasKey(). Bool_t TMVA::OptionMap::HasKey ; (; TString ; key). inline . Definition at line 107 of file OptionMap.h. ◆ IsA(). virtual TClass * TMVA::OptionMap::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 176 of file OptionMap.h. ◆ IsEmpty(). Bool_t TMVA::OptionMap::IsEmpty ; (; ). inline . Definition at line 105 of file OptionMap.h. ◆ operator=(). OptionMap & TMVA::OptionMap::operator= ; (; TString ; options). inline . Definition at line 118 of file OptionMap.h. ◆ operator[](). Binding & TMVA::OptionMap::operator[] ; (; TString ; key). inline . Definition at line 112 of file OptionMap.h. ◆ ParseOption(). void TMVA::OptionMap::ParseOption ; (; TString ; options). inline . Definition at line 149 of file OptionMap.h. ◆ Print(). void TMVA::OptionMap::Print ; (; ); const. inline . Definition at line 124 of file OptionMap.h. ◆ Streamer(). virtual void TMVA::OptionMap::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::OptionMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 176 of file OptionMap.h. Member Data Documentation. ◆ fBinder. Binding TMVA::OptionMap::fBinder. protected . Definition at line 93 of file OptionMap.h. ◆ fLogger. TMVA::MsgLogger TMVA::OptionMap::fLogger. protected . Definition at line 38 of file OptionMap.h. ◆ fName. TString TMVA::OptionMap::fName. protected . Definition at line 36 of file OptionMap.h. ◆ fOptMap. std::map<TString,TString> TMVA::OptionMap::fOptMap. protected . Definition at line 37 of file OptionMap.h. Libraries for TMVA::OptionMap:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/OptionMap.h. TMVAOptionMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptionMap.html:4617,Guid,Guide,4617,doc/master/classTMVA_1_1OptionMap.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptionMap.html,1,['Guid'],['Guide']
Usability,"◆ GetVirtualMachines(). TList * TCondor::GetVirtualMachines ; (; ); const. Get the names of the virtual machines in the pool. ; Return a TList of TObjString or 0 in case of failure ; Definition at line 194 of file TCondor.cxx. ◆ GetVmInfo(). Bool_t TCondor::GetVmInfo ; (; const char * ; vm, . TString & ; image, . Int_t & ; perfidx . ); const. Get info about worker status. ; Definition at line 401 of file TCondor.cxx. ◆ IsA(). TClass * TCondor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 88 of file TCondor.h. ◆ IsValid(). Bool_t TCondor::IsValid ; (; ); const. inline . Definition at line 72 of file TCondor.h. ◆ Print(). void TCondor::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print master status. ; Reimplemented from TObject.; Definition at line 89 of file TCondor.cxx. ◆ Release(). Bool_t TCondor::Release ; (; ). Release worker. ; Definition at line 357 of file TCondor.cxx. ◆ Resume(). Bool_t TCondor::Resume ; (; ). Resume worker. ; Definition at line 343 of file TCondor.cxx. ◆ SetState(). Bool_t TCondor::SetState ; (; EState ; state). Set the state of workers. ; Definition at line 288 of file TCondor.cxx. ◆ Streamer(). void TCondor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCondor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 88 of file TCondor.h. ◆ Suspend(). Bool_t TCondor::Suspend ; (; ). Suspend worker. ; Definition at line 329 of file TCondor.cxx. Member Data Documentation. ◆ fClaims. TList* TCondor::fClaims. private . Definition at line 61 of file TCondor.h. ◆ fPool. TString TCondor::fPool. private . Definition at line 59 of file TCondor.h. ◆ fState. EState TCondor::fState. private . Definition at line 60 of file TCondor.h. ◆ fValid. Bool_t TCondor::fValid. private . Definition at line 58 of file TCondor.h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondor.html:14268,Resume,Resume,14268,doc/master/classTCondor.html,https://root.cern,https://root.cern/doc/master/classTCondor.html,1,['Resume'],['Resume']
Usability,"◆ HasFitFunction(). TF1 * TFitEditor::HasFitFunction ; (; ). protected . Look in the list of function for TF1. ; If a TF1 is found in the list of functions, it will be returned ; Definition at line 3281 of file TFitEditor.cxx. ◆ Hide(). void TFitEditor::Hide ; (; ). virtual . Hide the fit panel and set it to non-active state. ; Definition at line 1207 of file TFitEditor.cxx. ◆ MakeTitle(). void TFitEditor::MakeTitle ; (; TGCompositeFrame * ; parent, . const char * ; title . ). protected . Create section title in the GUI. ; Definition at line 3266 of file TFitEditor.cxx. ◆ operator=(). TFitEditor & TFitEditor::operator= ; (; const TFitEditor & ; ). private . ◆ ProcessTreeInput(). void TFitEditor::ProcessTreeInput ; (; TObject * ; objSelected, . Int_t ; selected, . TString ; variables, . TString ; cuts . ). protected . Definition at line 2401 of file TFitEditor.cxx. ◆ RecursiveRemove(). void TFitEditor::RecursiveRemove ; (; TObject * ; obj). overridevirtual . When obj is deleted, clear fFitObject if fFitObject = obj. ; Reimplemented from TObject.; Definition at line 1571 of file TFitEditor.cxx. ◆ RetrieveOptions(). void TFitEditor::RetrieveOptions ; (; Foption_t & ; fitOpts, . TString & ; drawOpts, . ROOT::Math::MinimizerOptions & ; minOpts, . Int_t ;  . ). private . Retrieve the fitting options from all the widgets. ; Definition at line 3344 of file TFitEditor.cxx. ◆ SetCanvas(). void TFitEditor::SetCanvas ; (; TCanvas * ; c). protectedvirtual . Connect to another canvas. ; Definition at line 1185 of file TFitEditor.cxx. ◆ SetEditable(). void TFitEditor::SetEditable ; (; Bool_t ; state). overrideprotectedvirtual . Reimplemented from TGWindow.; Definition at line 3445 of file TFitEditor.cxx. ◆ SetFitObject(). void TFitEditor::SetFitObject ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; event . ). virtual . Slot called when the user clicks on an object inside a canvas. ; Updates pointers to the parent pad and the selected object for fitting (if suitable). ; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitEditor.html:59522,clear,clear,59522,doc/master/classTFitEditor.html,https://root.cern,https://root.cern/doc/master/classTFitEditor.html,1,['clear'],['clear']
Usability,"◆ IsA(). TClass * TProofQueryResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 52 of file TProofQueryResult.h. ◆ RecordEnd(). void TProofQueryResult::RecordEnd ; (; EQueryStatus ; status, . TList * ; outlist = 0 . ). inlineoverrideprivatevirtual . End of query settings. ; Reimplemented from TQueryResult.; Definition at line 41 of file TProofQueryResult.h. ◆ SetFinalized(). void TProofQueryResult::SetFinalized ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQueryResult.; Definition at line 44 of file TProofQueryResult.h. ◆ SetResultFile(). void TProofQueryResult::SetResultFile ; (; const char * ; rf). inlineprivate . Definition at line 45 of file TProofQueryResult.h. ◆ SetRunning(). void TProofQueryResult::SetRunning ; (; Int_t ; startlog, . const char * ; par, . Int_t ; nwrks . ). private . Call when running starts. ; Definition at line 49 of file TProofQueryResult.cxx. ◆ Streamer(). void TProofQueryResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TProofQueryResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file TProofQueryResult.h. Friends And Related Symbol Documentation. ◆ TProofLite. friend class TProofLite. friend . Definition at line 30 of file TProofQueryResult.h. ◆ TProofServ. friend class TProofServ. friend . Definition at line 31 of file TProofQueryResult.h. ◆ TQueryResultManager. friend class TQueryResultManager. friend . Definition at line 32 of file TProofQueryResult.h. Member Data Documentation. ◆ fStartLog. Int_t TProofQueryResult::fStartLog. private . Definition at line 35 of file TProofQueryResult.h. proof/proof/inc/TProofQueryResult.h; proof/proof/src/TProofQueryResult.cxx. TProofQueryResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofQueryResult.html:19745,Guid,Guide,19745,doc/master/classTProofQueryResult.html,https://root.cern,https://root.cern/doc/master/classTProofQueryResult.html,1,['Guid'],['Guide']
Usability,◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 93 of file SimpleInterval.cxx. ◆ LowerLimit(). virtual double RooStats::SimpleInterval::LowerLimit ; (; ). inlinevirtual . return the interval lower limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterval.; Definition at line 40 of file SimpleInterval.h. ◆ Streamer(). void RooStats::SimpleInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::SimpleInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file SimpleInterval.h. ◆ UpperLimit(). virtual double RooStats::SimpleInterval::UpperLimit ; (; ). inlinevirtual . return the interval upper limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 48 of file SimpleInterval.h. Member Data Documentation. ◆ fConfidenceLevel. double RooStats::SimpleInterval::fConfidenceLevel. confidence level ; Definition at line 65 of file SimpleInterval.h. ◆ fLowerLimit. double RooStats::SimpleInterval::fLowerLimit. lower interval limit ; Definition at line 63 of file SimpleInterval.h. ◆ fParameters. RooArgSet RooStats::SimpleInterval::fParameters. set containing the parameter of inter,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:16709,Simpl,SimpleInterval,16709,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"◆ ReadSpecialObject(). TObject * TSQLFile::ReadSpecialObject ; (; Long64_t ; keyid, . TObject * ; obj = nullptr . ). protected . Read data of special kind of objects. ; Definition at line 851 of file TSQLFile.cxx. ◆ ReadSQLClassInfos(). void TSQLFile::ReadSQLClassInfos ; (; ). protected . Read all class infos from IdsTable. ; Definition at line 1911 of file TSQLFile.cxx. ◆ Recover(). Int_t TSQLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented from TFile.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:85000,usab,usable,85000,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['usab'],['usable']
Usability,"◆ Safety_v(). void TGeoTrap::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ SavePrimitive(). void TGeoTrap::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoArb8. ◆ SetDimensions(). void TGeoTrap::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoArb8. ◆ Streamer(). void TGeoTrap::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoArb8. ◆ StreamerNVirtual(). void TGeoTrap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 146 of file TGeoArb8.h. Member Data Documentation. ◆ fAlpha1. Double_t TGeoTrap::fAlpha1. protected . Definition at line 104 of file TGeoArb8.h. ◆ fAlpha2. Double_t TGeoTrap::fAlpha2. protected . Definition at line 108 of file TGeoArb8.h. ◆ fBl1. Double_t TGeoTrap::fBl1. protected . Definition at line 102 of file TGeoArb8.h. ◆ fBl2. Double_t TGeoTrap::fBl2. protected . Definition at line 106 of file TGeoArb8.h. ◆ fH1. Double_t TGeoTrap::fH1. protected . Definition at line 101 of file TGeoArb8.h. ◆ fH2. Double_t TGeoTrap::fH2. protected . Definition at line 105 of file TGeoArb8.h. ◆ fPhi. Double_t TGeoTrap::fPhi. protected . Definition at line 100 of file TGeoArb8.h. ◆ fTheta. Double_t TGeoTrap::fTheta. protected . Definition at line 99 of file TGeoArb8.h. ◆ fTl1. Double_t TGeoTrap::fTl1. protected . Definition at line 103 of file TGeoArb8.h. ◆ fTl2. Double_t TGeoTrap::fTl2. protected . Definition at line 107 of file TGeoArb8.h. Libraries for TGeoTrap:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoArb8.h. TGeoTrap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrap.html:31186,Guid,Guide,31186,doc/master/classTGeoTrap.html,https://root.cern,https://root.cern/doc/master/classTGeoTrap.html,1,['Guid'],['Guide']
Usability,"◆ SetKappaBeta2(). virtual void ROOT::Math::Vavilov::SetKappaBeta2 ; (; double ; kappa, . double ; beta2 . ). pure virtual . Change \(\kappa\) and \(\beta^2\) and recalculate coefficients if necessary. ; Parameters. kappaThe parameter \(\kappa\), which should be in the range \(0.01 \le \kappa \le 10 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Implemented in ROOT::Math::VavilovAccurate, and ROOT::Math::VavilovFast. ◆ Skewness() [1/2]. double ROOT::Math::Vavilov::Skewness ; (; ); const. virtual . Return the theoretical skewness \(\gamma_1 = \frac{1/2 - \beta^2/3}{\kappa^2 \sigma^3} \). ; Definition at line 96 of file Vavilov.cxx. ◆ Skewness() [2/2]. double ROOT::Math::Vavilov::Skewness ; (; double ; kappa, . double ; beta2 . ). static . Return the theoretical skewness \(\gamma_1 = \frac{1/2 - \beta^2/3}{\kappa^2 \sigma^3} \). ; Parameters. kappaThe parameter \(\kappa\), which should be in the range \(0.01 \le \kappa \le 10 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 100 of file Vavilov.cxx. ◆ Variance() [1/2]. double ROOT::Math::Vavilov::Variance ; (; ); const. virtual . Return the theoretical variance \(\sigma^2 = \frac{1 - \beta^2/2}{\kappa}\). ; Definition at line 88 of file Vavilov.cxx. ◆ Variance() [2/2]. double ROOT::Math::Vavilov::Variance ; (; double ; kappa, . double ; beta2 . ). static . Return the theoretical Variance \(\sigma^2 = \frac{1 - \beta^2/2}{\kappa}\). ; Parameters. kappaThe parameter \(\kappa\), which should be in the range \(0.01 \le \kappa \le 10 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 92 of file Vavilov.cxx. The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Vavilov.h; math/mathmore/src/Vavilov.cxx. ROOTMathVavilov. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html:16529,Guid,Guide,16529,doc/master/classROOT_1_1Math_1_1Vavilov.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html,1,['Guid'],['Guide']
Usability,"◆ TGeoRegionCut() [2/2]. TGeoRegionCut::TGeoRegionCut ; (; const char * ; name, . Double_t ; cut . ). inline . Definition at line 26 of file TGeoRegion.h. ◆ ~TGeoRegionCut(). TGeoRegionCut::~TGeoRegionCut ; (; ). inlineoverride . Definition at line 28 of file TGeoRegion.h. Member Function Documentation. ◆ Class(). static TClass * TGeoRegionCut::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoRegionCut::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoRegionCut::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 33 of file TGeoRegion.h. ◆ DeclFileName(). static const char * TGeoRegionCut::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 33 of file TGeoRegion.h. ◆ GetCut(). Double_t TGeoRegionCut::GetCut ; (; ); const. inline . Definition at line 30 of file TGeoRegion.h. ◆ IsA(). TClass * TGeoRegionCut::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 33 of file TGeoRegion.h. ◆ SetCut(). void TGeoRegionCut::SetCut ; (; Double_t ; cut). inline . Definition at line 31 of file TGeoRegion.h. ◆ Streamer(). void TGeoRegionCut::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoRegionCut::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 33 of file TGeoRegion.h. Member Data Documentation. ◆ fCut. Double_t TGeoRegionCut::fCut {0.}. protected . Definition at line 22 of file TGeoRegion.h. Libraries for TGeoRegionCut:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoRegion.h. TGeoRegionCut. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegionCut.html:13448,Guid,Guide,13448,doc/master/classTGeoRegionCut.html,https://root.cern,https://root.cern/doc/master/classTGeoRegionCut.html,1,['Guid'],['Guide']
Usability,"◆ TQCommand() [1/3]. TQCommand::TQCommand ; (; const char * ; clname = nullptr, . void * ; obj = nullptr, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; clname - class name.; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments:; if either clname or obj is NULL that means that redo/undo is function; to specify default arguments for redo/undo method/function '=' must precede to argument value. Example: TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case undo parameter can be omitted.; Example: TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. Definition at line 168 of file TQCommand.cxx. ◆ TQCommand() [2/3]. TQCommand::TQCommand ; (; TObject * ; obj, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments: to specify default arguments for redo/undo method/function '=' must precede to argument value.; Example: TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case ""undo"" can parameter be omitted.; Example: TQCommand(gPad, ""SetFillStyle(Style_t)"");. Definition at line 199 of file TQCommand.cxx. ◆ TQCommand() [3/3]. TQCommand::TQCommand ; (; const TQCommand & ; com). Copy constructor. ; Definition at line 209 of file TQCommand.cxx. ◆ ~TQCommand(). TQCommand::~TQCommand ; (; ). virtual . dtor. ; Definition at line 249 of file TQCommand.cxx. Member Function Documentation. ◆ Add() [1/2]. void TQCommand::Add ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 91 of file TQCommand.h. ◆ Add() [2/2]. void TQCommand::Add ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add comm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:32826,undo,undo,32826,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,2,['undo'],['undo']
Usability,"◆ X(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::X ; (; ); const. inline . Definition at line 126 of file PxPyPzE4D.h. ◆ x(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::x ; (; ); const. inline . Definition at line 320 of file PxPyPzE4D.h. ◆ Y(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::Y ; (; ); const. inline . Definition at line 127 of file PxPyPzE4D.h. ◆ y(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::y ; (; ); const. inline . Definition at line 321 of file PxPyPzE4D.h. ◆ Z(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::Z ; (; ); const. inline . Definition at line 128 of file PxPyPzE4D.h. ◆ z(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::z ; (; ); const. inline . Definition at line 322 of file PxPyPzE4D.h. Member Data Documentation. ◆ Dimension. template<class ScalarType = double> . constexpr unsigned int ROOT::Math::PxPyPzE4D< ScalarType >::Dimension = 4U. staticconstexpr . Definition at line 49 of file PxPyPzE4D.h. ◆ fT. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzE4D< ScalarType >::fT. private . Definition at line 350 of file PxPyPzE4D.h. ◆ fX. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzE4D< ScalarType >::fX. private . (contiguous) data containing the coordinate values x,y,z,t ; Definition at line 347 of file PxPyPzE4D.h. ◆ fY. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzE4D< ScalarType >::fY. private . Definition at line 348 of file PxPyPzE4D.h. ◆ fZ. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzE4D< ScalarType >::fZ. private . Definition at line 349 of file PxPyPzE4D.h. math/genvector/inc/Math/GenVector/PxPyPzE4D.h. ROOTMathPxPyPzE4D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html:14897,Guid,Guide,14897,doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html,1,['Guid'],['Guide']
Usability,"◆ X(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::X ; (; ); const. inline . Definition at line 152 of file PxPyPzM4D.h. ◆ x(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::x ; (; ); const. inline . Definition at line 336 of file PxPyPzM4D.h. ◆ Y(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Y ; (; ); const. inline . Definition at line 153 of file PxPyPzM4D.h. ◆ y(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::y ; (; ); const. inline . Definition at line 337 of file PxPyPzM4D.h. ◆ Z(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Z ; (; ); const. inline . Definition at line 154 of file PxPyPzM4D.h. ◆ z(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::z ; (; ); const. inline . Definition at line 338 of file PxPyPzM4D.h. Member Data Documentation. ◆ Dimension. template<class ScalarType = double> . constexpr unsigned int ROOT::Math::PxPyPzM4D< ScalarType >::Dimension = 4U. staticconstexpr . Definition at line 54 of file PxPyPzM4D.h. ◆ fM. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzM4D< ScalarType >::fM. private . Definition at line 378 of file PxPyPzM4D.h. ◆ fX. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzM4D< ScalarType >::fX. private . (contiguous) data containing the coordinate values x,y,z,t ; Definition at line 375 of file PxPyPzM4D.h. ◆ fY. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzM4D< ScalarType >::fY. private . Definition at line 376 of file PxPyPzM4D.h. ◆ fZ. template<class ScalarType = double> . ScalarType ROOT::Math::PxPyPzM4D< ScalarType >::fZ. private . Definition at line 377 of file PxPyPzM4D.h. math/genvector/inc/Math/GenVector/PxPyPzM4D.h. ROOTMathPxPyPzM4D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html:16053,Guid,Guide,16053,doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,1,['Guid'],['Guide']
Usability,"◆ _wMap. std::map<Int_t,double> RooNDKeysPdf::_wMap. protected . Definition at line 183 of file RooNDKeysPdf.h. ◆ _x. std::vector<double> RooNDKeysPdf::_x. mutableprotected . Definition at line 159 of file RooNDKeysPdf.h. ◆ _x0. std::vector<double> RooNDKeysPdf::_x0. protected . Definition at line 160 of file RooNDKeysPdf.h. ◆ _x1. std::vector<double> RooNDKeysPdf::_x1. protected . Definition at line 160 of file RooNDKeysPdf.h. ◆ _x2. std::vector<double> RooNDKeysPdf::_x2. protected . Definition at line 160 of file RooNDKeysPdf.h. ◆ _xDatHi. std::vector<double> RooNDKeysPdf::_xDatHi. protected . Definition at line 162 of file RooNDKeysPdf.h. ◆ _xDatHi3s. std::vector<double> RooNDKeysPdf::_xDatHi3s. protected . Definition at line 163 of file RooNDKeysPdf.h. ◆ _xDatLo. std::vector<double> RooNDKeysPdf::_xDatLo. protected . Definition at line 162 of file RooNDKeysPdf.h. ◆ _xDatLo3s. std::vector<double> RooNDKeysPdf::_xDatLo3s. protected . Definition at line 163 of file RooNDKeysPdf.h. ◆ _xVarHi. std::vector<double> RooNDKeysPdf::_xVarHi. protected . Definition at line 168 of file RooNDKeysPdf.h. ◆ _xVarHiM3s. std::vector<double> RooNDKeysPdf::_xVarHiM3s. protected . Definition at line 169 of file RooNDKeysPdf.h. ◆ _xVarHiP3s. std::vector<double> RooNDKeysPdf::_xVarHiP3s. protected . Definition at line 169 of file RooNDKeysPdf.h. ◆ _xVarLo. std::vector<double> RooNDKeysPdf::_xVarLo. protected . Definition at line 168 of file RooNDKeysPdf.h. ◆ _xVarLoM3s. std::vector<double> RooNDKeysPdf::_xVarLoM3s. protected . Definition at line 169 of file RooNDKeysPdf.h. ◆ _xVarLoP3s. std::vector<double> RooNDKeysPdf::_xVarLoP3s. protected . Definition at line 169 of file RooNDKeysPdf.h. Libraries for RooNDKeysPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooNDKeysPdf.h; roofit/roofit/src/RooNDKeysPdf.cxx. RooNDKeysPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:97149,Guid,Guide,97149,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['Guid'],['Guide']
Usability,"◆ begin(). const_iterator RooAbsCollection::begin ; (; ); const. inline . Definition at line 253 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 432 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 282 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 392 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 76 of file RooAbsCollection.h. ◆ contains(). bool RooAbsCollection::contains ; (; const RooAbsArg & ; var); const. inlin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:36131,clear,clearStructureTags,36131,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,◆ fCloIndex. TVectorD TQpLinSolverBase::fCloIndex. protected . Definition at line 84 of file TQpLinSolverBase.h. ◆ fCupIndex. TVectorD TQpLinSolverBase::fCupIndex. protected . Definition at line 82 of file TQpLinSolverBase.h. ◆ fDd. TVectorD TQpLinSolverBase::fDd. protected . Definition at line 78 of file TQpLinSolverBase.h. ◆ fDq. TVectorD TQpLinSolverBase::fDq. protected . Definition at line 79 of file TQpLinSolverBase.h. ◆ fFactory. TQpProbBase* TQpLinSolverBase::fFactory. protected . Definition at line 91 of file TQpLinSolverBase.h. ◆ fMclo. Int_t TQpLinSolverBase::fMclo. protected . Definition at line 89 of file TQpLinSolverBase.h. ◆ fMcup. Int_t TQpLinSolverBase::fMcup. protected . Definition at line 88 of file TQpLinSolverBase.h. ◆ fMy. Int_t TQpLinSolverBase::fMy. protected . Definition at line 75 of file TQpLinSolverBase.h. ◆ fMz. Int_t TQpLinSolverBase::fMz. protected . Definition at line 76 of file TQpLinSolverBase.h. ◆ fNomegaInv. TVectorD TQpLinSolverBase::fNomegaInv. protected . Definition at line 71 of file TQpLinSolverBase.h. ◆ fNx. Int_t TQpLinSolverBase::fNx. protected . Definition at line 74 of file TQpLinSolverBase.h. ◆ fNxlo. Int_t TQpLinSolverBase::fNxlo. protected . Definition at line 87 of file TQpLinSolverBase.h. ◆ fNxup. Int_t TQpLinSolverBase::fNxup. protected . Definition at line 86 of file TQpLinSolverBase.h. ◆ fRhs. TVectorD TQpLinSolverBase::fRhs. protected . Definition at line 72 of file TQpLinSolverBase.h. ◆ fXloIndex. TVectorD TQpLinSolverBase::fXloIndex. protected . Definition at line 83 of file TQpLinSolverBase.h. ◆ fXupIndex. TVectorD TQpLinSolverBase::fXupIndex. protected . Definition at line 81 of file TQpLinSolverBase.h. Libraries for TQpLinSolverBase:. [legend]; The documentation for this class was generated from the following files:; math/quadp/inc/TQpLinSolverBase.h; math/quadp/src/TQpLinSolverBase.cxx. TQpLinSolverBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpLinSolverBase.html:17452,Guid,Guide,17452,doc/master/classTQpLinSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpLinSolverBase.html,1,['Guid'],['Guide']
Usability,"◆ fNMissReadOk. Int_t TTreeCache::fNMissReadOk {0}. protected . Number of blocks read, not found in the primary cache, and found in the secondary cache. ; Definition at line 46 of file TTreeCache.h. ◆ fNMissReadPref. Int_t TTreeCache::fNMissReadPref {0}. protected . Number of blocks read into the secondary (""miss"") cache. ; Definition at line 50 of file TTreeCache.h. ◆ fNReadMiss. Int_t TTreeCache::fNReadMiss {0}. protected . Number of blocks read and not found in the cache. ; Definition at line 47 of file TTreeCache.h. ◆ fNReadOk. Int_t TTreeCache::fNReadOk {0}. protected . Number of blocks read and found in the cache. ; Definition at line 45 of file TTreeCache.h. ◆ fNReadPref. Int_t TTreeCache::fNReadPref {0}. protected . Number of blocks that were prefetched. ; Definition at line 49 of file TTreeCache.h. ◆ fOneTime. bool TTreeCache::fOneTime {false}. protected . ! used in the learning phase ; Definition at line 57 of file TTreeCache.h. ◆ fOptimizeMisses. bool TTreeCache::fOptimizeMisses {false}. protected . ! true if we should optimize cache misses. ; Definition at line 72 of file TTreeCache.h. ◆ fPrefillType. EPrefillType TTreeCache::fPrefillType. protected . Whether a pre-filling is enabled (and if applicable which type) ; Definition at line 64 of file TTreeCache.h. ◆ fReadDirectionSet. bool TTreeCache::fReadDirectionSet {false}. protected . ! read direction established ; Definition at line 62 of file TTreeCache.h. ◆ fReverseRead. bool TTreeCache::fReverseRead {false}. protected . ! reading in reverse mode ; Definition at line 58 of file TTreeCache.h. ◆ fTree. TTree* TTreeCache::fTree {nullptr}. protected . ! pointer to the current Tree ; Definition at line 53 of file TTreeCache.h. Libraries for TTreeCache:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTreeCache.h; tree/tree/src/TTreeCache.cxx. TTreeCache. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:57336,Guid,Guide,57336,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['Guid'],['Guide']
Usability,"◆ operator=(). TArrayC & TArrayC::operator= ; (; const TArrayC & ; rhs). TArrayC assignment operator. ; Definition at line 61 of file TArrayC.cxx. ◆ operator[]() [1/2]. Char_t & TArrayC::operator[] ; (; Int_t ; i). inline . Definition at line 84 of file TArrayC.h. ◆ operator[]() [2/2]. Char_t TArrayC::operator[] ; (; Int_t ; i); const. inline . Definition at line 91 of file TArrayC.h. ◆ Reset(). void TArrayC::Reset ; (; Char_t ; val = 0). inline . Definition at line 47 of file TArrayC.h. ◆ Set() [1/2]. void TArrayC::Set ; (; Int_t ; n). overridevirtual . Set size of this array to n chars. ; A new array is created, the old contents copied to the new array, then the old array is deleted. This function should not be called if the array was declared via Adopt. ; Implements TArray.; Definition at line 105 of file TArrayC.cxx. ◆ Set() [2/2]. void TArrayC::Set ; (; Int_t ; n, . const Char_t * ; array . ). Set size of this array to n chars and set the contents. ; This function should not be called if the array was declared via Adopt. ; Definition at line 132 of file TArrayC.cxx. ◆ SetAt(). void TArrayC::SetAt ; (; Double_t ; v, . Int_t ; i . ). inlineoverridevirtual . Implements TArray.; Definition at line 50 of file TArrayC.h. ◆ Streamer(). void TArrayC::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TArrayC object. ; Reimplemented from TArray.; Reimplemented in TGLTH3Composition, TH1C, TH2C, and TH3C.; Definition at line 148 of file TArrayC.cxx. ◆ StreamerNVirtual(). void TArrayC::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file TArrayC.h. Member Data Documentation. ◆ fArray. Char_t* TArrayC::fArray. Definition at line 30 of file TArrayC.h. Libraries for TArrayC:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TArrayC.h; core/cont/src/TArrayC.cxx. TArrayC. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayC.html:7616,Guid,Guide,7616,doc/master/classTArrayC.html,https://root.cern,https://root.cern/doc/master/classTArrayC.html,1,['Guid'],['Guide']
Usability,"◆ redirectServersHook(). bool RooDerivative::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overridevirtual . Zap functor and derivator ;. ; Reimplemented from RooAbsReal.; Definition at line 113 of file RooDerivative.cxx. ◆ setEps(). void RooDerivative::setEps ; (; double ; e). inline . Definition at line 43 of file RooDerivative.h. ◆ Streamer(). void RooDerivative::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooDerivative::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file RooDerivative.h. Member Data Documentation. ◆ _eps. double RooDerivative::_eps = 1e-7. protected . Precision. ; Definition at line 50 of file RooDerivative.h. ◆ _ftor. std::unique_ptr<RooFunctor> RooDerivative::_ftor. mutableprotected . ! Functor binding of RooAbsReal ; Definition at line 54 of file RooDerivative.h. ◆ _func. RooRealProxy RooDerivative::_func. protected . Input function. ; Definition at line 52 of file RooDerivative.h. ◆ _nset. RooSetProxy RooDerivative::_nset. protected . Normalization set (optional) ; Definition at line 51 of file RooDerivative.h. ◆ _order. Int_t RooDerivative::_order = 1. protected . Derivation order. ; Definition at line 49 of file RooDerivative.h. ◆ _rd. std::unique_ptr<ROOT::Math::RichardsonDerivator> RooDerivative::_rd. mutableprotected . ! Derivator ; Definition at line 55 of file RooDerivative.h. ◆ _x. RooRealProxy RooDerivative::_x. protected . Observable. ; Definition at line 53 of file RooDerivative.h. Libraries for RooDerivative:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooDerivative.h; roofit/roofitcore/src/RooDerivative.cxx. RooDerivative. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDerivative.html:64514,Guid,Guide,64514,doc/master/classRooDerivative.html,https://root.cern,https://root.cern/doc/master/classRooDerivative.html,1,['Guid'],['Guide']
