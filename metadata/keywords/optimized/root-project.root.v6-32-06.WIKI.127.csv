quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Performance," 1723 ; 1724 if (fClassMenuList); 1725 fClassMenuList->Delete();; 1726 delete fClassMenuList; fClassMenuList=nullptr;; 1727 ; 1728 fIsOffsetStreamerSet=kFALSE;; 1729 ; 1730 if ( fIsA ) delete fIsA;; 1731 ; 1732 if ( fRefProxy ) fRefProxy->Release();; 1733 fRefProxy = nullptr;; 1734 ; 1735 delete fStreamer;; 1736 delete fCollectionProxy;; 1737 delete fIsAMethod.load();; 1738 delete fSchemaRules;; 1739 if (fConversionStreamerInfo.load()) {; 1740 std::map<std::string, TObjArray*>::iterator it;; 1741 std::map<std::string, TObjArray*>::iterator end = (*fConversionStreamerInfo).end();; 1742 for( it = (*fConversionStreamerInfo).begin(); it != end; ++it ) {; 1743 delete it->second;; 1744 }; 1745 delete fConversionStreamerInfo.load();; 1746 }; 1747}; 1748 ; 1749////////////////////////////////////////////////////////////////////////////////; 1750 ; 1751namespace {; 1752 Int_t ReadRulesContent(FILE *f); 1753 {; 1754 // Read a class.rules file which contains one rule per line with comment; 1755 // starting with a #; 1756 // Returns the number of rules loaded.; 1757 // Returns -1 in case of error.; 1758 ; 1759 R__ASSERT(f!=nullptr);; 1760 TString rule(1024);; 1761 int c, state = 0;; 1762 Int_t count = 0;; 1763 ; 1764 while ((c = fgetc(f)) != EOF) {; 1765 if (c == 13) // ignore CR; 1766 continue;; 1767 if (c == '\n') {; 1768 if (state != 3) {; 1769 state = 0;; 1770 if (rule.Length() > 0) {; 1771 if (TClass::AddRule(rule)) {; 1772 ++count;; 1773 }; 1774 rule.Clear();; 1775 }; 1776 }; 1777 continue;; 1778 }; 1779 switch (state) {; 1780 case 0: // start of line; 1781 switch (c) {; 1782 case ' ':; 1783 case '\t':; 1784 break;; 1785 case '#':; 1786 state = 1;; 1787 break;; 1788 default:; 1789 state = 2;; 1790 break;; 1791 }; 1792 break;; 1793 ; 1794 case 1: // comment; 1795 break;; 1796 ; 1797 case 2: // rule; 1798 switch (c) {; 1799 case '\\':; 1800 state = 3; // Continuation request; 1801 default:; 1802 break;; 1803 }; 1804 break;; 1805 }; 1806 switch (state) {; 1807 case 2:; 1808 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:67039,load,loaded,67039,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," 1735 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1736 if (resolvedThis == htmp->String() && htmp->fOrigName == GetName()) {; 1737 fgClassTypedefHash->Remove (htmp);; 1738 delete htmp;; 1739 break;; 1740 }; 1741 }; 1742 }; 1743 ; 1744 // Not owning lists, don't call Delete(); 1745 // But this still need to be done first because the TList destructor; 1746 // does access the object contained (via GetObject()->TestBit(kCanDelete)); 1747 delete fStreamer; fStreamer =nullptr;; 1748 delete fAllPubData; fAllPubData =nullptr;; 1749 delete fAllPubMethod; fAllPubMethod=nullptr;; 1750 ; 1751 delete fPersistentRef.load();; 1752 ; 1753 if (fBase.load()); 1754 (*fBase).Delete();; 1755 delete fBase.load(); fBase = nullptr;; 1756 ; 1757 if (fData.load()); 1758 (*fData).Delete();; 1759 delete fData.load(); fData = nullptr;; 1760 ; 1761 if (fUsingData.load()); 1762 (*fUsingData).Delete();; 1763 delete fUsingData.load(); fUsingData = nullptr;; 1764 ; 1765 if (fEnums.load()); 1766 (*fEnums).Delete();; 1767 delete fEnums.load(); fEnums = nullptr;; 1768 ; 1769 if (fFuncTemplate); 1770 fFuncTemplate->Delete();; 1771 delete fFuncTemplate; fFuncTemplate = nullptr;; 1772 ; 1773 if (fMethod.load()); 1774 (*fMethod).Delete();; 1775 delete fMethod.load(); fMethod=nullptr;; 1776 ; 1777 if (fRealData); 1778 fRealData->Delete();; 1779 delete fRealData; fRealData=nullptr;; 1780 ; 1781 if (fStreamerInfo); 1782 fStreamerInfo->Delete();; 1783 delete fStreamerInfo; fStreamerInfo = nullptr;; 1784 ; 1785 if (fDeclFileLine >= -1); 1786 TClass::RemoveClass(this);; 1787 ; 1788 gCling->ClassInfo_Delete(fClassInfo);; 1789 fClassInfo=nullptr;; 1790 ; 1791 if (fClassMenuList); 1792 fClassMenuList->Delete();; 1793 delete fClassMenuList; fClassMenuList=nullptr;; 1794 ; 1795 fIsOffsetStreamerSet=kFALSE;; 1796 ; 1797 if ( fIsA ) delete fIsA;; 1798 ; 1799 if ( fRefProxy ) fRefProxy->Release();; 1800 fRefProxy = nullptr;; 1801 ; 1802 delete fStreamer;; 1803 delete fCollectionProxy;; 1804 del",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:68069,load,load,68069,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['load']
Performance," 1790 ; 1791 if (fClassMenuList); 1792 fClassMenuList->Delete();; 1793 delete fClassMenuList; fClassMenuList=nullptr;; 1794 ; 1795 fIsOffsetStreamerSet=kFALSE;; 1796 ; 1797 if ( fIsA ) delete fIsA;; 1798 ; 1799 if ( fRefProxy ) fRefProxy->Release();; 1800 fRefProxy = nullptr;; 1801 ; 1802 delete fStreamer;; 1803 delete fCollectionProxy;; 1804 delete fIsAMethod.load();; 1805 delete fSchemaRules;; 1806 if (fConversionStreamerInfo.load()) {; 1807 std::map<std::string, TObjArray*>::iterator it;; 1808 std::map<std::string, TObjArray*>::iterator end = (*fConversionStreamerInfo).end();; 1809 for( it = (*fConversionStreamerInfo).begin(); it != end; ++it ) {; 1810 delete it->second;; 1811 }; 1812 delete fConversionStreamerInfo.load();; 1813 }; 1814}; 1815 ; 1816////////////////////////////////////////////////////////////////////////////////; 1817 ; 1818namespace {; 1819 Int_t ReadRulesContent(FILE *f); 1820 {; 1821 // Read a class.rules file which contains one rule per line with comment; 1822 // starting with a #; 1823 // Returns the number of rules loaded.; 1824 // Returns -1 in case of error.; 1825 ; 1826 R__ASSERT(f!=nullptr);; 1827 TString rule(1024);; 1828 int c, state = 0;; 1829 Int_t count = 0;; 1830 ; 1831 while ((c = fgetc(f)) != EOF) {; 1832 if (c == 13) // ignore CR; 1833 continue;; 1834 if (c == '\n') {; 1835 if (state != 3) {; 1836 state = 0;; 1837 if (rule.Length() > 0) {; 1838 if (TClass::AddRule(rule)) {; 1839 ++count;; 1840 }; 1841 rule.Clear();; 1842 }; 1843 }; 1844 continue;; 1845 }; 1846 switch (state) {; 1847 case 0: // start of line; 1848 switch (c) {; 1849 case ' ':; 1850 case '\t':; 1851 break;; 1852 case '#':; 1853 state = 1;; 1854 break;; 1855 default:; 1856 state = 2;; 1857 break;; 1858 }; 1859 break;; 1860 ; 1861 case 1: // comment; 1862 break;; 1863 ; 1864 case 2: // rule; 1865 switch (c) {; 1866 case '\\':; 1867 state = 3; // Continuation request; 1868 default:; 1869 break;; 1870 }; 1871 break;; 1872 }; 1873 switch (state) {; 1874 case 2:; 1875 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:69790,load,loaded,69790,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," 1821/// program, we need to update the list of functions every time we; 1822/// execute this method. However, when calling this function in; 1823/// a (tight) loop where no interpreter symbols will be created; 1824/// you can set load=kFALSE (default).; 1825 ; 1826TCollection *TROOT::GetListOfGlobalFunctions(Bool_t load); 1827{; 1828 R__LOCKGUARD(gROOTMutex);; 1829 ; 1830 if (!fGlobalFunctions) {; 1831 fGlobalFunctions = new TListOfFunctions(nullptr);; 1832 }; 1833 ; 1834 if (!fInterpreter); 1835 Fatal(""GetListOfGlobalFunctions"", ""fInterpreter not initialized"");; 1836 ; 1837 // A thread that calls with load==true and a thread that calls with load==false; 1838 // will conflict here (the load==true will be updating the list while the; 1839 // other is reading it). To solve the problem, we could use a read-write lock; 1840 // inside the list itself.; 1841 if (load) fGlobalFunctions->Load();; 1842 ; 1843 return fGlobalFunctions;; 1844}; 1845 ; 1846////////////////////////////////////////////////////////////////////////////////; 1847/// Return a dynamic list giving access to all TDataTypes (typedefs); 1848/// currently defined.; 1849///; 1850/// The list is populated on demand. Calling; 1851/// ~~~ {.cpp}; 1852/// gROOT->GetListOfTypes()->FindObject(nameoftype);; 1853/// ~~~; 1854/// will return the TDataType corresponding to 'nameoftype'. If the; 1855/// TDataType is not already in the list itself and the type does exist,; 1856/// a new TDataType will be created and added to the list.; 1857///; 1858/// Calling; 1859/// ~~~ {.cpp}; 1860/// gROOT->GetListOfTypes()->ls(); // or Print(); 1861/// ~~~; 1862/// list only the typedefs that have been previously accessed through the; 1863/// list (plus the builtins types).; 1864 ; 1865TCollection *TROOT::GetListOfTypes(Bool_t /* load */); 1866{; 1867 if (!fInterpreter); 1868 Fatal(""GetListOfTypes"", ""fInterpreter not initialized"");; 1869 ; 1870 return fTypes;; 1871}; 1872 ; 1873////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:71038,load,load,71038,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,"['Load', 'load']","['Load', 'load']"
Performance," 183 ; 184The precision can be:; 185 ; 186 - `precision = 0` fast hardware fonts (steps in the size); 187 - `precision = 1` scalable and rotatable hardware fonts (see below); 188 - `precision = 2` scalable and rotatable hardware fonts; 189 - `precision = 3` scalable and rotatable hardware fonts. Text size; 190 is given in pixels.; 191 ; 192The text font and precision of any class inheriting from `TAttText` can; 193be changed using the method `SetTextFont` and retrieved using the; 194method `GetTextFont`.; 195 ; 196\anchor ATTTEXT51; 197### Font quality and speed; 198 ; 199When precision 0 is used, only the original non-scaled X11 system fonts are; 200used. The fonts have a minimum (4) and maximum (37) size in pixels. These; 201fonts are fast and are of good quality. Their size varies with large steps; 202and they cannot be rotated.; 203Precision 1 and 2 fonts have a different behaviour depending if the; 204True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; 205quality scalable and rotatable fonts.; 206These days TTF fonts are rendered fast enough and can be used in all cases.; 207 ; 208\anchor ATTTEXT52; 209### How to use True Type Fonts; 210 ; 211TTF fonts are used by default. They can be deactivated via the following line; 212in the `.rootrc` file:; 213 ; 214~~~ {.cpp}; 215 Unix.*.Root.UseTTFonts: false; 216~~~; 217 ; 218\anchor ATTTEXT53; 219### List of the currently supported fonts; 220 ; 221~~~ {.cpp}; 222 Font number TTF Names PostScript/PDF Names; 223 1 : ""Free Serif Italic"" ""Times-Italic""; 224 2 : ""Free Serif Bold"" ""Times-Bold""; 225 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 226 4 : ""Tex Gyre Regular"" ""Helvetica""; 227 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 228 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 229 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 230 8 : ""Free Mono"" ""Courier""; 231 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 232 10 : ""Free Mono Bold"" ""Courier-Bold""; 233 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8cxx_source.html:6963,scalab,scalable,6963,doc/master/TAttText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8cxx_source.html,1,['scalab'],['scalable']
Performance," 1877///; 1878/// Default method (function evaluated at center of bin); 1879/// for each point the cache contains the following info; 1880/// - 1D : bc,e,xc (bin content, error, x of center of bin); 1881/// - 2D : bc,e,xc,yc; 1882/// - 3D : bc,e,xc,yc,zc; 1883 ; 1884void TFumili::FitLikelihood(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag); 1885{; 1886 Foption_t fitOption = GetFitOption();; 1887 if (fitOption.Integral) {; 1888 FitLikelihoodI(npar,gin,f,u,flag);; 1889 return;; 1890 }; 1891 Double_t cu,fu,fobs,fsub;; 1892 Double_t dersum[100];; 1893 Double_t x[3];; 1894 Int_t icu;; 1895 ; 1896 TH1 *hfit = (TH1*)GetObjectFit();; 1897 TF1 *f1 = (TF1*)GetUserFunc();; 1898 Int_t nd = hfit->GetDimension();; 1899 Int_t j;; 1900 Double_t *zik = GetZ();; 1901 Double_t *pl0 = GetPL0();; 1902 ; 1903 npar = f1->GetNpar();; 1904 SetParNumber(npar);; 1905 if(flag == 9) return;; 1906 Double_t *df=new Double_t[npar];; 1907 if (flag == 2) for (j=0;j<npar;j++) dersum[j] = gin[j] = 0;; 1908 f1->InitArgs(x,u);; 1909 f = 0;; 1910 ; 1911 Int_t npfit = 0;; 1912 Double_t *cache = fCache;; 1913 for (Int_t i=0;i<fNpoints;i++) {; 1914 if (nd > 2) x[2] = cache[4];; 1915 if (nd > 1) x[1] = cache[3];; 1916 x[0] = cache[2];; 1917 cu = cache[0];; 1918 TF1::RejectPoint(kFALSE);; 1919 fu = f1->EvalPar(x,u);; 1920 if (TF1::RejectedPoint()) {cache += fPointSize; continue;}; 1921 if (flag == 2) {; 1922 for (j=0;j<npar;j++) {; 1923 dersum[j] += 1; //should be the derivative; 1924 //grad[j] += dersum[j]*(fu-cu)/eu; dersum[j] = 0;; 1925 }; 1926 }; 1927 if (fu < 1.e-9) fu = 1.e-9;; 1928 icu = Int_t(cu);; 1929 fsub = -fu +icu*TMath::Log(fu);; 1930 fobs = GetSumLog(icu);; 1931 fsub -= fobs;; 1932 Derivatives(df,x);; 1933 int n=0;; 1934 // Here we need gradients of Log likelihood function; 1935 //; 1936 for (j=0;j<npar;j++) {; 1937 if (pl0[j]>0){; 1938 df[n] = df[j]*(icu/fu-1);; 1939 gin[j] -= df[n];; 1940 n++;; 1941 }; 1942 }; 1943 Int_t l = 0;; 1944 // Z-matrix here - production of first d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:55179,cache,cache,55179,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,6,['cache'],['cache']
Performance," 19855 /* Document root */; 19856#if defined(NO_FILES); 19857 if (ctx->dd.config[DOCUMENT_ROOT] != NULL) {; 19858 mg_cry_ctx_internal(ctx, ""%s"", ""Document root must not be set"");; 19859 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19860 mg_snprintf(NULL,; 19861 NULL, /* No truncation check for error buffers */; 19862 error->text,; 19863 error->text_buffer_size,; 19864 ""Invalid configuration option value: %s"",; 19865 config_options[DOCUMENT_ROOT].name);; 19866 }; 19867 free_context(ctx);; 19868 pthread_setspecific(sTlsKey, NULL);; 19869 return NULL;; 19870 }; 19871#endif; 19872 ; 19873 get_system_name(&ctx->systemName);; 19874 ; 19875#if defined(USE_LUA); 19876 /* If a Lua background script has been configured, start it. */; 19877 ctx->lua_bg_log_available = 0;; 19878 if (ctx->dd.config[LUA_BACKGROUND_SCRIPT] != NULL) {; 19879 char ebuf[256];; 19880 struct vec opt_vec;; 19881 struct vec eq_vec;; 19882 const char *sparams;; 19883 ; 19884 memset(ebuf, 0, sizeof(ebuf));; 19885 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19886 ; 19887 /* Create a Lua state, load all standard libraries and the mg table */; 19888 lua_State *state = mg_lua_context_script_prepare(; 19889 ctx->dd.config[LUA_BACKGROUND_SCRIPT], ctx, ebuf, sizeof(ebuf));; 19890 if (!state) {; 19891 mg_cry_ctx_internal(ctx,; 19892 ""lua_background_script load error: %s"",; 19893 ebuf);; 19894 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19895 mg_snprintf(NULL,; 19896 NULL, /* No truncation check for error buffers */; 19897 error->text,; 19898 error->text_buffer_size,; 19899 ""Error in script %s: %s"",; 19900 config_options[LUA_BACKGROUND_SCRIPT].name,; 19901 ebuf);; 19902 }; 19903 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19904 ; 19905 free_context(ctx);; 19906 pthread_setspecific(sTlsKey, NULL);; 19907 return NULL;; 19908 }; 19909 ; 19910 /* Add a table with parameters into mg.params */; 19911 sparams = ctx->dd.config[LUA_BACKGROUND_SCRIPT_PARAMS];; 19912 if (sparams && sparams[0]) {; 19913 lu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:594133,load,load,594133,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['load'],['load']
Performance," 19856 /* Document root */; 19857#if defined(NO_FILES); 19858 if (ctx->dd.config[DOCUMENT_ROOT] != NULL) {; 19859 mg_cry_ctx_internal(ctx, ""%s"", ""Document root must not be set"");; 19860 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19861 mg_snprintf(NULL,; 19862 NULL, /* No truncation check for error buffers */; 19863 error->text,; 19864 error->text_buffer_size,; 19865 ""Invalid configuration option value: %s"",; 19866 config_options[DOCUMENT_ROOT].name);; 19867 }; 19868 free_context(ctx);; 19869 pthread_setspecific(sTlsKey, NULL);; 19870 return NULL;; 19871 }; 19872#endif; 19873 ; 19874 get_system_name(&ctx->systemName);; 19875 ; 19876#if defined(USE_LUA); 19877 /* If a Lua background script has been configured, start it. */; 19878 ctx->lua_bg_log_available = 0;; 19879 if (ctx->dd.config[LUA_BACKGROUND_SCRIPT] != NULL) {; 19880 char ebuf[256];; 19881 struct vec opt_vec;; 19882 struct vec eq_vec;; 19883 const char *sparams;; 19884 ; 19885 memset(ebuf, 0, sizeof(ebuf));; 19886 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19887 ; 19888 /* Create a Lua state, load all standard libraries and the mg table */; 19889 lua_State *state = mg_lua_context_script_prepare(; 19890 ctx->dd.config[LUA_BACKGROUND_SCRIPT], ctx, ebuf, sizeof(ebuf));; 19891 if (!state) {; 19892 mg_cry_ctx_internal(ctx,; 19893 ""lua_background_script load error: %s"",; 19894 ebuf);; 19895 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19896 mg_snprintf(NULL,; 19897 NULL, /* No truncation check for error buffers */; 19898 error->text,; 19899 error->text_buffer_size,; 19900 ""Error in script %s: %s"",; 19901 config_options[LUA_BACKGROUND_SCRIPT].name,; 19902 ebuf);; 19903 }; 19904 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19905 ; 19906 free_context(ctx);; 19907 pthread_setspecific(sTlsKey, NULL);; 19908 return NULL;; 19909 }; 19910 ; 19911 /* Add a table with parameters into mg.params */; 19912 sparams = ctx->dd.config[LUA_BACKGROUND_SCRIPT_PARAMS];; 19913 if (sparams && sparams[0]) {; 19914 lu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:594166,load,load,594166,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['load'],['load']
Performance," 2000 values; : <Fill> Class 1 has 1000 events; : <Fill> Class 2 has 1000 events; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_LD.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_FDA_GA.weights.xml␛[0m; : User-defined formula string : ""(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3""; : TFormula-compatible formula string: ""[0]+[1]*[5]+[2]*[6]+[3]*[7]+[4]*[8]""; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_MLPBNN.weights.xml␛[0m; MLPBNN : Building Network. ; : Initializing weights; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_SVM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_BDT.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_RuleFit.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: Cuts for Classification performance; : ; Cuts : [dataset] : Evaluation of Cuts on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00226 sec ; Factory : Test method: CutsD for Classification performance; : ; CutsD : [dataset] : Evaluation of CutsD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00756 sec ; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0108 sec ; Factory : Test method: LikelihoodPCA for Classification performance; : ; LikelihoodPCA : [dataset] : Evaluation of LikelihoodPCA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0197 sec ; Factory : Test method: PDERS for Classification performance; : ; PDERS : [dataset] : Evaluation of PDERS on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.937 sec ; Factory : Test method: PDEFoam for Cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:65316,perform,performance,65316,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['perform'],['performance']
Performance," 2324 rootmapFile << ""# List of selected typedefs and outer classes\n"";; 2325 for (const auto & autoloadKey : tdNames); 2326 if (classesKeys.insert(autoloadKey).second); 2327 rootmapFile << ""typedef "" << autoloadKey << std::endl;; 2328 }; 2329 ; 2330 // And Enums. There is no incomplete type for an enum but we can nevertheless; 2331 // have the key for the cases where the root typesystem is interrogated.; 2332 if (!enNames.empty()){; 2333 rootmapFile << ""# List of selected enums and outer classes\n"";; 2334 for (const auto & autoloadKey : enNames); 2335 if (classesKeys.insert(autoloadKey).second); 2336 rootmapFile << ""enum "" << autoloadKey << std::endl;; 2337 }; 2338 ; 2339 // And variables.; 2340 if (!varNames.empty()){; 2341 rootmapFile << ""# List of selected vars\n"";; 2342 for (const auto & autoloadKey : varNames); 2343 if (classesKeys.insert(autoloadKey).second); 2344 rootmapFile << ""var "" << autoloadKey << std::endl;; 2345 }; 2346 ; 2347 }; 2348 ; 2349 return 0;; 2350 ; 2351}; 2352 ; 2353////////////////////////////////////////////////////////////////////////////////; 2354/// Performance is not critical here.; 2355 ; 2356std::pair<std::string,std::string> GetExternalNamespaceAndContainedEntities(const std::string line); 2357{; 2358 auto nsPattern = '{'; auto nsPatternLength = 1;; 2359 auto foundNsPos = line.find_last_of(nsPattern);; 2360 if (foundNsPos == std::string::npos) return {"""",""""};; 2361 foundNsPos+=nsPatternLength;; 2362 auto extNs = line.substr(0,foundNsPos);; 2363 ; 2364 auto nsEndPattern = '}';; 2365 auto foundEndNsPos = line.find(nsEndPattern);; 2366 auto contained = line.substr(foundNsPos, foundEndNsPos-foundNsPos);; 2367 ; 2368 return {extNs, contained};; 2369 ; 2370 ; 2371}; 2372 ; 2373////////////////////////////////////////////////////////////////////////////////; 2374/// If two identical namespaces are there, just declare one only; 2375/// Example:; 2376/// namespace A { namespace B { fwd1; }}; 2377/// namespace A { namespace B { fwd2; }}; 237",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:92996,Perform,Performance,92996,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['Perform'],['Performance']
Performance," 247 ; 248 Specialized Gradient interface(abstract class) for one dimensional functions; 249 It provides a method to evaluate the derivative of the function, Derivative and a; 250 method to evaluate at the same time the function and the derivative FdF; 251 ; 252 @ingroup GenFunc; 253 */; 254 class IGradientFunctionOneDim : virtual public IBaseFunctionOneDim {; 255 ; 256 public:; 257 ; 258 typedef IBaseFunctionOneDim BaseFunc;; 259 typedef IGradientFunctionOneDim BaseGrad;; 260 ; 261 /// Return the derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at the same time.; 275 virtual void FdF(double x, double &f, double &df) const; 276 {; 277 f = operator()(x);; 278 df = Derivative(x);; 279 }; 280 ; 281 /// Compatibility method with multi-dimensional interface for Gradient and function evaluation.; 282 void FdF(const double *x, double &f, double *df) const { FdF(*x, f, *df); }; 283 ; 284 bool HasGradient() const override { return true; }; 285 ; 286 private:; 287 ; 288 /// Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class.; 289 virtual double DoDerivative(double x) const = 0;; 290 };; 291 ; 292 ; 293 ; 294 } // namespace ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:11916,Optimiz,Optimized,11916,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['Optimiz'],['Optimized']
Performance," 259/// canvas->Draw(hist)->SetLineColor(RColor::kBlue);; 260/// canvas->Show();; 261/// while (run_loop) {; 262/// pHist->Fill(1);; 263/// canvas->Modified();; 264/// canvas->Update();; 265/// canvas->Run(0.1); // process canvas events; 266/// }; 267///; 268/// canvas->Remove();; 269/// }; 270///; 271/// int main(); 272/// {; 273/// RAxisConfig xaxis(100, -10., 10.);; 274/// auto pHist = std::make_shared<RH1D>(xaxis);; 275/// bool run_loop = true;; 276///; 277/// std::thread thrd(draw_canvas, run_loop, pHist);; 278/// std::this_thread::sleep_for(std::chrono::seconds(100));; 279/// run_loop = false;; 280/// thrd.join();; 281/// return 0;; 282/// }; 283/// ~~~; 284 ; 285void ROOT::Experimental::RCanvas::Run(double tm); 286{; 287 if (fPainter) {; 288 fPainter->Run(tm);; 289 } else if (tm>0) {; 290 std::this_thread::sleep_for(std::chrono::milliseconds(int(tm*1000)));; 291 }; 292}; 293 ; 294//////////////////////////////////////////////////////////////////////////; 295/// To resolve problem with storing of shared pointers; 296/// Call this method when reading canvas from the file; 297/// Can be called many times - after reinitialization of shared pointers no changes will be performed; 298 ; 299void ROOT::Experimental::RCanvas::ResolveSharedPtrs(); 300{; 301 Internal::RIOSharedVector_t vect;; 302 ; 303 CollectShared(vect);; 304 ; 305 for (unsigned n = 0; n < vect.size(); ++n) {; 306 if (vect[n]->HasShared() || !vect[n]->GetIOPtr()) continue;; 307 ; 308 auto shrd_ptr = vect[n]->MakeShared();; 309 ; 310 for (auto n2 = n+1; n2 < vect.size(); ++n2) {; 311 if (vect[n2]->GetIOPtr() == vect[n]->GetIOPtr()) {; 312 if (vect[n2]->HasShared()); 313 R__LOG_ERROR(GPadLog()) << ""FATAL Shared pointer for same IO ptr already exists"";; 314 else; 315 vect[n2]->SetShared(shrd_ptr);; 316 }; 317 }; 318 ; 319 }; 320}; 321 ; 322 ; 323/////////////////////////////////////////////////////////////////////////////////////////////////; 324/// Apply attributes changes to the drawable; 325/// Return m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8cxx_source.html:9867,perform,performed,9867,doc/master/RCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8cxx_source.html,1,['perform'],['performed']
Performance," 275{; 276 return (Window_t)gdk_window_get_parent((GdkWindow *) id);; 277}; 278 ; 279////////////////////////////////////////////////////////////////////////////////; 280/// Convert the keycode from the event structure to a key symbol (according; 281/// to the modifiers specified in the event structure and the current; 282/// keyboard mapping). In buf a null terminated ASCII string is returned; 283/// representing the string that is currently mapped to the key code.; 284 ; 285void TGWin32VirtualXProxy::LookupString(Event_t * event, char *buf, Int_t buflen,; 286 UInt_t & keysym); 287{; 288 DEBUG_PROFILE_PROXY_START(LookupString); 289 fgRealObject->LookupString(event,buf,buflen,keysym);; 290 DEBUG_PROFILE_PROXY_STOP(LookupString); 291}; 292 ; 293////////////////////////////////////////////////////////////////////////////////; 294/// Return number of pending events.; 295 ; 296Int_t TGWin32VirtualXProxy::EventsPending(); 297{ ; 298 return fgRealObject->EventsPending();; 299}; 300 ; 301////////////////////////////////////////////////////////////////////////////////; 302/// Process next event in the queue - if any.; 303 ; 304void TGWin32VirtualXProxy::NextEvent(Event_t & event); 305{; 306 fgRealObject->NextEvent(event);; 307}; 308 ; 309////////////////////////////////////////////////////////////////////////////////; 310/// Check if there is for window ""id"" an event of type ""type"".; 311 ; 312Bool_t TGWin32VirtualXProxy::CheckEvent(Window_t id, EGEventType type, Event_t &ev); 313{; 314 return fgRealObject->CheckEvent(id,type,ev);; 315}; 316 ; 317////////////////////////////////////////////////////////////////////////////////; 318/// Send event ev to window id.; 319 ; 320void TGWin32VirtualXProxy::SendEvent(Window_t id, Event_t *ev); 321{; 322 fgRealObject->SendEvent(id,ev);; 323}; 324 ; 325////////////////////////////////////////////////////////////////////////////////; 326/// Return kTRUE if we are inside cmd/server thread.; 327 ; 328Bool_t TGWin32VirtualXProxy::IsCmdThread",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html:20379,queue,queue,20379,doc/master/TGWin32VirtualXProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html,1,['queue'],['queue']
Performance," 292 SetSamples(std::vector<const Double_t*>(1, sample), std::vector<size_t>(1, sampleSize));; 293 }; 294 ; 295 Double_t GoFTest::GaussianCDF(Double_t x) const {; 296 return ROOT::Math::normal_cdf(x, fParams[1], fParams[0]);; 297 }; 298 ; 299 Double_t GoFTest::ExponentialCDF(Double_t x) const {; 300 return ROOT::Math::exponential_cdf(x, fParams[0]);; 301 }; 302 ; 303 void GoFTest::LogSample() {; 304 transform(fSamples[0].begin(), fSamples[0].end(), fSamples[0].begin(),; 305 std::function<Double_t(Double_t)>(TMath::Log));; 306 }; 307 ; 308/* ; 309 Taken from (1); 310*/ ; 311 Double_t GoFTest::GetSigmaN(const std::vector<size_t> & ns, size_t N) {; 312 // compute moments of AD distribution (from Scholz-Stephen paper, paragraph 3); 313 ; 314 Double_t sigmaN = 0.0, h = 0.0, H = 0.0, g = 0.0, a, b, c, d, k = ns.size();; 315 ; 316 for (size_t i = 0; i < ns.size(); ++i) {; 317 H += 1.0 / double( ns[i] );; 318 }; 319 ; 320 // use approximate formulas for large N; 321 // cache Sum( 1 / i); 322 if (N < 2000) { ; 323 std::vector<double> invI(N); ; 324 for (size_t i = 1; i <= N - 1; ++i) {; 325 invI[i] = 1.0 / i; ; 326 h += invI[i]; ; 327 }; 328 for (size_t i = 1; i <= N - 2; ++i) {; 329 double tmp = invI[N-i];; 330 for (size_t j = i + 1; j <= N - 1; ++j) {; 331 g += tmp * invI[j];; 332 }; 333 }; 334 }; 335 else {; 336 // for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5; 337 const double emc = 0.5772156649015328606065120900824024; // Euler-Mascheroni constant; 338 h = std::log(double(N-1) ) + emc;; 339 g = (M_PI)*(M_PI)/6.0;; 340 }; 341 double k2 = std::pow(k,2);; 342 a = (4 * g - 6) * k + (10 - 6 * g) * H - 4 * g + 6;; 343 b = (2 * g - 4) * k2 + 8 * h * k + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;; 344 c = (6 * h + 2 * g - 2) * k2 + (4 * h - 4 *g + 6) * k + (2 * h - 6) * H + 4 * h;; 345 d = (2 * h + 6) * k2 - 4 * h * k;; 346 sigmaN += a * std::pow(double(N),3) + b * std::pow(double(N),2) + c * N + d;; 347 sigmaN /= ( double(N - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:10825,cache,cache,10825,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['cache'],['cache']
Performance," 3) option allowing to choose between the global fgFFT and a new TVirtualFFT object; """" - default, changes and returns the global fgFFT variable; ""K"" (from ""keep"")- without touching the global fgFFT,; creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc. TVirtualFFT* SineCosine(Int_t ndim, Int_t* n, Int_t* r2rkind, Option_t* option); Returns a pointer to a sine or cosine transform of requested size and kind. Parameters:; -ndim : number of transform dimensions; -n : sizes of each dimension (an array at least ndim long); -r2rkind : transform kind for each dimension; 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DST-III - kind=6; DST-IV - kind=7; -option : consists of 2 parts - flag option and an option to create a new TVirtualFFT; - flag option: choosing how much time should be spent in planning the transform:; Possible options:; ""ES"" (from ""estimate"") - no time in preparing the transform,; but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way; to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way; to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the; same size and type are going to be done.; Planning is only done once, for the first transform of this size and type.; - option allowing to choose between the global fgFFT and a new TVirtualFFT object; """" - default, changes and returns the global fgFFT variable; ""K"" (from ""keep"")- without touching the global fgFFT,; creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; Examples of valid options: ""ES K"", ""EX"", etc. TVirtualFFT* GetCurrentTransform(); static: return current fgFFT. void SetTransform(TVirtualFFT* ff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualFFT.html:11804,perform,performance,11804,root/html528/TVirtualFFT.html,https://root.cern,https://root.cern/root/html528/TVirtualFFT.html,6,['perform'],['performance']
Performance," 30 // combination with a RotationX; 31 Quaternion q(rx);; 32 return Quaternion (; 33 U()*q.U() - I()*q.I(); 34 , I()*q.U() + U()*q.I(); 35 , J()*q.U() + K()*q.I(); 36 , K()*q.U() - J()*q.I(); 37 );; 38}; 39 ; 40Quaternion Quaternion::operator * (const RotationY & ry) const {; 41 // combination with a RotationY; 42 Quaternion q(ry);; 43 return Quaternion (; 44 U()*q.U() - J()*q.J(); 45 , I()*q.U() - K()*q.J(); 46 , J()*q.U() + U()*q.J(); 47 , K()*q.U() + I()*q.J(); 48 );; 49}; 50 ; 51Quaternion Quaternion::operator * (const RotationZ & rz) const {; 52 // combination with a RotationZ; 53 Quaternion q(rz);; 54 return Quaternion (; 55 U()*q.U() - K()*q.K(); 56 , I()*q.U() + J()*q.K(); 57 , J()*q.U() - I()*q.K(); 58 , K()*q.U() + U()*q.K(); 59 );; 60}; 61 ; 62Quaternion; 63operator * ( RotationX const & r, Quaternion const & q ) {; 64 return Quaternion(r) * q; // TODO: improve performance; 65}; 66 ; 67Quaternion; 68operator * ( RotationY const & r, Quaternion const & q ) {; 69 return Quaternion(r) * q; // TODO: improve performance; 70}; 71 ; 72Quaternion; 73operator * ( RotationZ const & r, Quaternion const & q ) {; 74 return Quaternion(r) * q; // TODO: improve performance; 75}; 76 ; 77 ; 78} //namespace Math; 79} //namespace ROOT; Quaternion.h; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; qfloat * qDefinition THbookFile.cxx:89; ROOT::Math::QuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k).Definition Quaternion.h:49; ROOT::Math::Quaternion::QuaternionQuaternion()Default constructor (identity rotation)Definition Quaternion.h:60; ROOT::Math::Quaternion::UScalar U() constAccess to the four quaternion components: U() is the coefficient of the identity Pauli matrix,...Definition Quaternion.h:167; ROOT::Math::Quaternion::operator*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/QuaternionXaxial_8cxx_source.html:1973,perform,performance,1973,doc/master/QuaternionXaxial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/QuaternionXaxial_8cxx_source.html,3,['perform'],['performance']
Performance," 304 // Re-compute bounding box of mother(s) if needed; 305 for (i = fLevel - 1; i > 0; i--) {; 306 Bool_t dassm = vd->IsAssembly(); // is daughter assembly ?; 307 vd = GetVolume(i);; 308 if (!vd); 309 break;; 310 Bool_t cassm = vd->IsAssembly(); // is current assembly ?; 311 if (cassm); 312 ((TGeoShapeAssembly *)vd->GetShape())->NeedsBBoxRecompute();; 313 if ((cassm || dassm) && vd->GetVoxels()); 314 vd->GetVoxels()->SetNeedRebuild();; 315 if (!cassm); 316 break;; 317 }; 318 ; 319 // Now we have to re-voxelize the mother volume; 320 TGeoVoxelFinder *voxels = vm->GetVoxels();; 321 if (voxels); 322 voxels->SetNeedRebuild();; 323 // Eventually check for overlaps; 324 if (check) {; 325 if (voxels) {; 326 voxels->Voxelize();; 327 vm->FindOverlaps();; 328 }; 329 // Set aligned node to be checked; 330 i = fLevel;; 331 node = GetNode(i);; 332 if (!node); 333 return kTRUE;; 334 if (node->IsOverlapping()) {; 335 Info(""Align"",; 336 ""The check for overlaps for node: \n%s\n cannot be performed since the node is declared possibly ""; 337 ""overlapping"",; 338 GetName());; 339 } else {; 340 gGeoManager->SetCheckedNode(node);; 341 // Check overlaps for the first non-assembly parent node; 342 while ((node = GetNode(--i))) {; 343 if (!node->GetVolume()->IsAssembly()); 344 break;; 345 }; 346 if (node && node->IsOverlapping()) {; 347 Info(""Align"",; 348 ""The check for overlaps for assembly node: \n%s\n cannot be performed since the parent %s is declared ""; 349 ""possibly overlapping"",; 350 GetName(), node->GetName());; 351 node = nullptr;; 352 }; 353 if (node); 354 node->CheckOverlaps(ovlp);; 355 gGeoManager->SetCheckedNode(nullptr);; 356 }; 357 }; 358 // Clean current matrices from cache; 359 gGeoManager->CdTop();; 360 SetAligned(kTRUE);; 361 return kTRUE;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365 ; 366void TGeoPhysicalNode::cd() const; 367{; 368 if (GetNode(0) != gGeoManager->GetTopNode()); 369 return;; 370 gGeoManager->cd(fName.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html:12145,perform,performed,12145,doc/master/TGeoPhysicalNode_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html,2,"['cache', 'perform']","['cache', 'performed']"
Performance," 3115 }; 3116 loadedcl = LoadClassDefault(normalizedName.c_str(),silent);; 3117 }; 3118 auto e = TEnum::GetEnum(normalizedName.c_str(), TEnum::kNone);; 3119 if (e); 3120 return nullptr;; 3121 // Maybe this was a typedef: let's try to see if this is the case; 3122 if (!loadedcl && !ispair && !ispairbase) {; 3123 if (TDataType* theDataType = gROOT->GetType(normalizedName.c_str())){; 3124 // We have a typedef: we get the name of the underlying type; 3125 auto underlyingTypeName = theDataType->GetTypeName();; 3126 // We see if we can bootstrap a class with it; 3127 auto underlyingTypeDict = TClassTable::GetDictNorm(underlyingTypeName.Data());; 3128 if (underlyingTypeDict){; 3129 loadedcl = underlyingTypeDict();; 3130 }; 3131 ; 3132 }; 3133 }; 3134 }; 3135 if (loadedcl) return loadedcl;; 3136 ; 3137 // See if the TClassGenerator can produce the TClass we need.; 3138 loadedcl = LoadClassCustom(normalizedName.c_str(),silent);; 3139 if (loadedcl) return loadedcl;; 3140 ; 3141 // We have not been able to find a loaded TClass, return the Emulated; 3142 // TClass if we have one.; 3143 if (cl) return cl;; 3144 ; 3145 if (ispair) {; 3146 if (hint_pair_offset && hint_pair_size) {; 3147 auto pairinfo = TVirtualStreamerInfo::Factory()->GenerateInfoForPair(normalizedName, silent, hint_pair_offset, hint_pair_size);; 3148 // Fall-through to allow TClass to be created when known by the interpreter; 3149 // This is used in the case where TStreamerInfo can not handle them.; 3150 if (pairinfo); 3151 return pairinfo->GetClass();; 3152 } else {; 3153 // Check if we have an STL container that might provide it.; 3154 static const size_t slen = strlen(""pair"");; 3155 static const char *associativeContainer[] = { ""map"", ""unordered_map"", ""multimap"",; 3156 ""unordered_multimap"", ""set"", ""unordered_set"", ""multiset"", ""unordered_multiset"" };; 3157 for(auto contname : associativeContainer) {; 3158 std::string collname = contname;; 3159 collname.append( normalizedName.c_str() + slen );; 3160 TClass *coll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:119051,load,loadedcl,119051,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,3,['load'],"['loaded', 'loadedcl']"
Performance," 3182 }; 3183 loadedcl = LoadClassDefault(normalizedName.c_str(),silent);; 3184 }; 3185 auto e = TEnum::GetEnum(normalizedName.c_str(), TEnum::kNone);; 3186 if (e); 3187 return nullptr;; 3188 // Maybe this was a typedef: let's try to see if this is the case; 3189 if (!loadedcl && !ispair && !ispairbase) {; 3190 if (TDataType* theDataType = gROOT->GetType(normalizedName.c_str())){; 3191 // We have a typedef: we get the name of the underlying type; 3192 auto underlyingTypeName = theDataType->GetTypeName();; 3193 // We see if we can bootstrap a class with it; 3194 auto underlyingTypeDict = TClassTable::GetDictNorm(underlyingTypeName.Data());; 3195 if (underlyingTypeDict){; 3196 loadedcl = underlyingTypeDict();; 3197 }; 3198 ; 3199 }; 3200 }; 3201 }; 3202 if (loadedcl) return loadedcl;; 3203 ; 3204 // See if the TClassGenerator can produce the TClass we need.; 3205 loadedcl = LoadClassCustom(normalizedName.c_str(),silent);; 3206 if (loadedcl) return loadedcl;; 3207 ; 3208 // We have not been able to find a loaded TClass, return the Emulated; 3209 // TClass if we have one.; 3210 if (cl) return cl;; 3211 ; 3212 if (ispair) {; 3213 if (hint_pair_offset && hint_pair_size) {; 3214 auto pairinfo = TVirtualStreamerInfo::Factory()->GenerateInfoForPair(normalizedName, silent, hint_pair_offset, hint_pair_size);; 3215 // Fall-through to allow TClass to be created when known by the interpreter; 3216 // This is used in the case where TStreamerInfo can not handle them.; 3217 if (pairinfo); 3218 return pairinfo->GetClass();; 3219 } else {; 3220 // Check if we have an STL container that might provide it.; 3221 static const size_t slen = strlen(""pair"");; 3222 static const char *associativeContainer[] = { ""map"", ""unordered_map"", ""multimap"",; 3223 ""unordered_multimap"", ""set"", ""unordered_set"", ""multiset"", ""unordered_multiset"" };; 3224 for(auto contname : associativeContainer) {; 3225 std::string collname = contname;; 3226 collname.append( normalizedName.c_str() + slen );; 3227 TClass *coll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:121802,load,loadedcl,121802,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,3,['load'],"['loaded', 'loadedcl']"
Performance," 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:13844,perform,perform,13844,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['perform'],['perform']
Performance," 363 } else if (loader->GetDataSetInfo().GetNClasses() >= 2) {; 364 fAnalysisType = Types::kMulticlass; // if two classes, but not named ""Signal"" and ""Background""; 365 } else; 366 Log() << kFATAL << ""No analysis type for "" << loader->GetDataSetInfo().GetNClasses() << "" classes and ""; 367 << loader->GetDataSetInfo().GetNTargets() << "" regression targets."" << Endl;; 368 }; 369 ; 370 // booking via name; the names are translated into enums and the; 371 // corresponding overloaded BookMethod is called; 372 ; 373 if (fMethodsMap.find(datasetname) != fMethodsMap.end()) {; 374 if (GetMethod(datasetname, methodTitle) != 0) {; 375 Log() << kFATAL << ""Booking failed since method with title <"" << methodTitle << ""> already exists ""; 376 << ""in with DataSet Name <"" << loader->GetName() << ""> "" << Endl;; 377 }; 378 }; 379 ; 380 Log() << kHEADER << ""Booking method: "" << gTools().Color(""bold""); 381 << methodTitle; 382 // << gTools().Color(""reset"")<<"" DataSet Name: ""<<gTools().Color(""bold"")<<loader->GetName(); 383 << gTools().Color(""reset"") << Endl << Endl;; 384 ; 385 // interpret option string with respect to a request for boosting (i.e., BostNum > 0); 386 Int_t boostNum = 0;; 387 TMVA::Configurable *conf = new TMVA::Configurable(theOption);; 388 conf->DeclareOptionRef(boostNum = 0, ""Boost_num"", ""Number of times the classifier will be boosted"");; 389 conf->ParseOptions();; 390 delete conf;; 391 // this is name of weight file directory; 392 TString fileDir;; 393 if (fModelPersistence) {; 394 // find prefix in fWeightFileDir;; 395 TString prefix = gConfig().GetIONames().fWeightFileDirPrefix;; 396 fileDir = prefix;; 397 if (!prefix.IsNull()); 398 if (fileDir[fileDir.Length() - 1] != '/'); 399 fileDir += ""/"";; 400 fileDir += loader->GetName();; 401 fileDir += ""/"" + gConfig().GetIONames().fWeightFileDir;; 402 }; 403 // initialize methods; 404 IMethod *im;; 405 if (!boostNum) {; 406 im = ClassifierFactory::Instance().Create(theMethodName.Data(), fJobName, methodTitle, loader->GetDataSetI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:15322,load,loader,15322,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub-paths) from cache; 404/// Returns true if any element was removed; 405 ; 406bool RBrowserData::RemoveFromCache(const Browsable::RElementPath_t &path); 407{; 408 if (path.size() == 0); 409 return false;; 410 ; 411 bool isany = false;; 412 unsigned pos = 0;; 413 while (pos < fCache.size()) {; 414 if (Browsable::RElement::ComparePaths(path, fCache[pos].first) == (int) path.size()) {; 415 fCache.erase(fCache.begin() + pos);; 416 isany = true;; 417 } else {; 418 pos++;; 419 }; 420 }; 421 return isany;; 422}; RBrowserData.hxx; RGroup.hxx; RLevelIter.hxx; RLogger.hxx; RProvider.hxx; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; RSysFile.hxx; RWrapper.hxx; _dataRooAbsData * _dataPointer to original input dataset.Definition RooAbsTestStatistic.h:84; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:101; TBufferJSON.h; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TFolder.h; idOption_t Option_t TPoint TPoint ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RBrowserData_8cxx_source.html:12315,cache,cache,12315,doc/v632/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html,1,['cache'],['cache']
Performance," 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub-paths) from cache; 404/// Returns true if any element was removed; 405 ; 406bool RBrowserData::RemoveFromCache(const Browsable::RElementPath_t &path); 407{; 408 if (path.size() == 0); 409 return false;; 410 ; 411 bool isany = false;; 412 unsigned pos = 0;; 413 while (pos < fCache.size()) {; 414 if (Browsable::RElement::ComparePaths(path, fCache[pos].first) == (int) path.size()) {; 415 fCache.erase(fCache.begin() + pos);; 416 isany = true;; 417 } else {; 418 pos++;; 419 }; 420 }; 421 return isany;; 422}; RBrowserData.hxx; RGroup.hxx; RLevelIter.hxx; RLogger.hxx; RProvider.hxx; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; RSysFile.hxx; RWrapper.hxx; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; TBufferJSON.h; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TFolder.h; idOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:12316,cache,cache,12316,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,1,['cache'],['cache']
Performance," 3779 ; 3780 return CreateListOfDataMembers(fData, TDictionary::EMemberSelection::kNoUsingDecls, load);; 3781}; 3782 ; 3783////////////////////////////////////////////////////////////////////////////////; 3784/// Return list containing the TDataMembers of using declarations of a class.; 3785 ; 3786TList *TClass::GetListOfUsingDataMembers(Bool_t load /* = kTRUE */); 3787{; 3788 // Fast path, no lock? Classes load at creation time.; 3789 if ((!load || IsClassStructOrUnion()) && fUsingData); 3790 return fUsingData;; 3791 ; 3792 return CreateListOfDataMembers(fUsingData, TDictionary::EMemberSelection::kOnlyUsingDecls, load);; 3793}; 3794 ; 3795////////////////////////////////////////////////////////////////////////////////; 3796/// Return TListOfFunctionTemplates for a class.; 3797 ; 3798TList *TClass::GetListOfFunctionTemplates(Bool_t load /* = kTRUE */); 3799{; 3800 R__LOCKGUARD(gInterpreterMutex);; 3801 ; 3802 if (!fFuncTemplate) fFuncTemplate = new TListOfFunctionTemplates(this);; 3803 if (load) fFuncTemplate->Load();; 3804 return fFuncTemplate;; 3805}; 3806 ; 3807////////////////////////////////////////////////////////////////////////////////; 3808/// Return list containing the TMethods of a class.; 3809/// If load is true, the list is populated with all the defined function; 3810/// and currently instantiated function template.; 3811 ; 3812TList *TClass::GetListOfMethods(Bool_t load /* = kTRUE */); 3813{; 3814 R__LOCKGUARD(gInterpreterMutex);; 3815 ; 3816 if (!fMethod.load()) GetMethodList();; 3817 if (load) {; 3818 if (gDebug>0) Info(""GetListOfMethods"",""Header Parsing - Asking for all the methods of class %s: this can involve parsing."",GetName());; 3819 (*fMethod).Load();; 3820 }; 3821 return fMethod;; 3822}; 3823 ; 3824////////////////////////////////////////////////////////////////////////////////; 3825/// Return the collection of functions named ""name"".; 3826 ; 3827TCollection *TClass::GetListOfMethodOverloads(const char* name) const; 3828{; 3829 return const_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:143650,load,load,143650,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,3,"['Load', 'load']","['Load', 'load']"
Performance," 3846 ; 3847 return CreateListOfDataMembers(fData, TDictionary::EMemberSelection::kNoUsingDecls, load);; 3848}; 3849 ; 3850////////////////////////////////////////////////////////////////////////////////; 3851/// Return list containing the TDataMembers of using declarations of a class.; 3852 ; 3853TList *TClass::GetListOfUsingDataMembers(Bool_t load /* = kTRUE */); 3854{; 3855 // Fast path, no lock? Classes load at creation time.; 3856 if ((!load || IsClassStructOrUnion()) && fUsingData); 3857 return fUsingData;; 3858 ; 3859 return CreateListOfDataMembers(fUsingData, TDictionary::EMemberSelection::kOnlyUsingDecls, load);; 3860}; 3861 ; 3862////////////////////////////////////////////////////////////////////////////////; 3863/// Return TListOfFunctionTemplates for a class.; 3864 ; 3865TList *TClass::GetListOfFunctionTemplates(Bool_t load /* = kTRUE */); 3866{; 3867 R__LOCKGUARD(gInterpreterMutex);; 3868 ; 3869 if (!fFuncTemplate) fFuncTemplate = new TListOfFunctionTemplates(this);; 3870 if (load) fFuncTemplate->Load();; 3871 return fFuncTemplate;; 3872}; 3873 ; 3874////////////////////////////////////////////////////////////////////////////////; 3875/// Return list containing the TMethods of a class.; 3876/// If load is true, the list is populated with all the defined function; 3877/// and currently instantiated function template.; 3878 ; 3879TList *TClass::GetListOfMethods(Bool_t load /* = kTRUE */); 3880{; 3881 R__LOCKGUARD(gInterpreterMutex);; 3882 ; 3883 if (!fMethod.load()) GetMethodList();; 3884 if (load) {; 3885 if (gDebug>0) Info(""GetListOfMethods"",""Header Parsing - Asking for all the methods of class %s: this can involve parsing."",GetName());; 3886 (*fMethod).Load();; 3887 }; 3888 return fMethod;; 3889}; 3890 ; 3891////////////////////////////////////////////////////////////////////////////////; 3892/// Return the collection of functions named ""name"".; 3893 ; 3894TCollection *TClass::GetListOfMethodOverloads(const char* name) const; 3895{; 3896 return const_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:146401,load,load,146401,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,3,"['Load', 'load']","['Load', 'load']"
Performance," 4 )); , kVisStreamed = (1ULL << ( 5 )); , kVisTouched = (1ULL << ( 6 )); , kVisOnScreen = (1ULL << ( 7 )); , ;   kVisContainers = (1ULL << ( 12 )); , kVisOnly = (1ULL << ( 13 )); , kVisBranch = (1ULL << ( 14 )); , kVisRaytrace = (1ULL << ( 15 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TGeoVolume; static TGeoMedium * fgDummyMedium = nullptr;  . #include <TGeoVolume.h>. Inheritance diagram for TGeoVolumeAssembly:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoVolumeAssembly() [1/3]. TGeoVolumeAssembly::TGeoVolumeAssembly ; (; const TGeoVolumeAssembly & ; ). privatedelete . Mutex for concurrent operations. . ◆ TGeoVolumeAssembly() [2/3]. TGeoVolumeAssembly::TGeoVolumeAssembly ; (; ). Default constructor. ; Definition at line 2944 of file TGeoVolume.cxx. ◆ TGeoVolumeAssembly() [3/3]. TGeoVolumeAssembly::TGeoVolumeAssembly ; (; const char * ; name). Constructor. ; Just the name has to be provided. Assemblies does not have their own shape or medium. ; Definition at line 2954 of file TGeoVolume.cxx. ◆ ~TGeoVolumeAssembly(). TGeoVolumeAssembly::~TGeoVolumeAssembly ; (; ). override . Destructor. The assembly is owner of its ""shape"". ; Definition at line 2968 of file TGeoVolume.cxx. Member Function Documentation. ◆ AddNode(). TGeoNode * TGeoVolumeAssembly::AddNode ; (; TGeoVolume * ; vol, . Int_t ; copy_no, . TGeoMatrix * ; mat = nullptr, . Option_t * ; option = """" . ). overridevirtual . Add a component to the assembly. ; Reimplemented from TGeoVolume.; Definition at line 2978 of file TGeoVolume.cxx. ◆ AddNodeOverlap(). void TGeoVolumeAssembly::AddNodeOverlap ; (; TGeoVolume * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:30909,concurren,concurrent,30909,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,1,['concurren'],['concurrent']
Performance," 4.8. Original spectrum before unfolding. Contents of the responses in the original spectrum. Another example where we have used the unfolding method is the decomposition of continuum of gamma-ray spectra. Using simulation and interpolation techniques, we have synthesized the response matrix (size 3400x3400 channels) of Gammasphere spectrometer (Figure 4.9). Its details are presented in Figure 4.10. The original spectrum of Co^56 before and after continuum decomposition are presented in Figures 4.11, 4.12, respectively. Response matrix (size 3400x3400 channels) of Gammasphere spectrometer. Detail of Figure 4.9. Original spectrum of Co56 before continuum decomposition. Original spectrum of Co56 after continuum decomposition. 4.3 2-DIMENSIONAL SPECTRA; We have extended the method of Gold deconvolution also for 2-dimensional data. Again, the goal of the deconvolution methods is to improve the resolution in the spectrum and to decompose multiplets. The method of optimized 2-dimensional deconvolution is described in details in [8].; Mathematical formulation of 2-dimensional convolution system is as follows:; \[ y(i_1,i_2) = \sum_{k_1=0}^{N_1-1}\sum_{k_2=0}^{N_2-1}h(i_1-k_1,i_2-k_2)x(k_1,k_2), i_1=0,1,2,...,N_1-1, i_2=0,1,2,...,N_2-1 \]; Assuming we know the output spectrum y and the response spectrum h, the task is to calculate the matrix x.; The basic function has the form of; char *Deconvolution2(float **source,; const float **resp,; int sizex,; int sizey,; int niter);; This function calculates deconvolution from the source spectrum according to the response spectrum. The result is placed in the matrix pointed by the source pointer.; Function parameters:. source: pointer to the matrix of the source spectrum; resp: pointer to the matrix of the response spectrum; sizex: x length of source and the response spectra; sizey: y length of source and the response spectra; number_of_iterations: see [8] for details. The example of 2-dimensional spectrum before deconvolution is pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:30909,optimiz,optimized,30909,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['optimiz'],['optimized']
Performance," 406 if (!gClassTable); 407 new TClassTable;; 408 ; 409 std::unique_lock<std::mutex> lock(GetClassTableMutex());; 410 ; 411 // check if already in table, if so return; 412 TClassRec *r = FindElement(cname, kTRUE);; 413 if (r->fName && r->fInfo) {; 414 if ( strcmp(r->fInfo->name(), typeid(ROOT::TForNamespace).name()) ==0; 415 && strcmp(info.name(), typeid(ROOT::TForNamespace).name()) ==0 ) {; 416 // We have a namespace being reloaded.; 417 // This okay we just keep the old one.; 418 return;; 419 }; 420 if (!TClassEdit::IsStdClass(cname)) {; 421 lock.unlock(); // Warning might recursively call TClassTable during gROOT init; 422 // Warn only for class that are not STD classes; 423 ::Warning(""TClassTable::Add"", ""class %s already in TClassTable"", cname);; 424 }; 425 return;; 426 } else if (ROOT::Internal::gROOTLocal && gCling) {; 427 TClass *oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(cname);; 428 if (oldcl) { // && oldcl->GetClassInfo()) {; 429 // As a work-around to ROOT-6012, we need to register the class even if; 430 // it is not a template instance, because a forward declaration in the header; 431 // files loaded by the current dictionary wil also de-activate the update; 432 // class info mechanism!; 433 ; 434 // The TClass exist and already has a class info, so it must; 435 // correspond to a class template instantiation which the interpreter; 436 // was able to make with the library containing the TClass Init.; 437 // Because it is already known to the interpreter, the update class info; 438 // will not be triggered, we need to force it.; 439 gCling->RegisterTClassUpdate(oldcl, dict);; 440 }; 441 }; 442 ; 443 if (!r->fName); 444 r->fName = StrDup(cname);; 445 r->fId = id;; 446 r->fBits = pragmabits;; 447 r->fDict = dict;; 448 r->fInfo = &info;; 449 ; 450 fgIdMap->Add(info.name(),r);; 451 ; 452 fgSorted = kFALSE;; 453}; 454 ; 455////////////////////////////////////////////////////////////////////////////////; 456/// Add a class to the class table (this is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:14116,load,loaded,14116,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['load'],['loaded']
Performance," 418 methBoost->SetWeightFileDir(fileDir);; 419 methBoost->SetModelPersistence(fModelPersistence);; 420 methBoost->SetBoostedMethodName(theMethodName); // DSMTEST divided into two lines; 421 methBoost->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 422 methBoost->SetFile(fgTargetFile);; 423 methBoost->SetSilentFile(IsSilentFile());; 424 }; 425 ; 426 MethodBase *method = dynamic_cast<MethodBase *>(im);; 427 if (method == 0); 428 return 0; // could not create method; 429 ; 430 // set fDataSetManager if MethodCategory (to enable Category to create datasetinfo objects) // DSMTEST; 431 if (method->GetMethodType() == Types::kCategory) { // DSMTEST; 432 MethodCategory *methCat = (dynamic_cast<MethodCategory *>(im)); // DSMTEST; 433 if (!methCat) { // DSMTEST; 434 Log() << kFATAL << ""Method with type kCategory cannot be casted to MethodCategory. /Factory""; 435 << Endl; // DSMTEST; 436 return nullptr;; 437 }; 438 if (fModelPersistence); 439 methCat->SetWeightFileDir(fileDir);; 440 methCat->SetModelPersistence(fModelPersistence);; 441 methCat->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 442 methCat->SetFile(fgTargetFile);; 443 methCat->SetSilentFile(IsSilentFile());; 444 } // DSMTEST; 445 ; 446 if (!method->HasAnalysisType(fAnalysisType, loader->GetDataSetInfo().GetNClasses(),; 447 loader->GetDataSetInfo().GetNTargets())) {; 448 Log() << kWARNING << ""Method "" << method->GetMethodTypeName() << "" is not capable of handling "";; 449 if (fAnalysisType == Types::kRegression) {; 450 Log() << ""regression with "" << loader->GetDataSetInfo().GetNTargets() << "" targets."" << Endl;; 451 } else if (fAnalysisType == Types::kMulticlass) {; 452 Log() << ""multiclass classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 453 } else {; 454 Log() << ""classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 455 }; 456 return 0;; 457 }; 458 ; 459 if (fModelPersistence); 460 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:18081,load,loader,18081,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," 425 ; 426//---- ClassDefT macros for templates with two template arguments --------------; 427// ClassDef2T2 goes in the same header as ClassDefT but must be; 428// outside the class scope; 429// ClassImp2T corresponds to ClassImpT; 430 ; 431#define ClassDef2T2(name,Tmpl1,Tmpl2); 432#define ClassImp2T(name,Tmpl1,Tmpl2) templateClassImp(name); 433 ; 434 ; 435//---- ClassDefT macros for templates with three template arguments ------------; 436// ClassDef3T2 goes in the same header as ClassDefT but must be; 437// outside the class scope; 438// ClassImp3T corresponds to ClassImpT; 439 ; 440#define ClassDef3T2(name,Tmpl1,Tmpl2,Tmpl3); 441#define ClassImp3T(name,Tmpl1,Tmpl2,Tmpl3) templateClassImp(name); 442 ; 443 ; 444//---- Macro to set the class version of non instrumented classes --------------; 445 ; 446#define RootClassVersion(name,VersionNumber) \; 447namespace ROOT { /** \cond HIDDEN_SYMBOLS */ \; 448 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 449 /** \cond HIDDEN_SYMBOLS */ \; 450 static Short_t _R__UNIQUE_(R__dummyVersionNumber) = \; 451 GenerateInitInstance((name*)0x0)->SetVersion(VersionNumber); \; 452 /** \endcond */ \; 453 R__UseDummy(_R__UNIQUE_(R__dummyVersionNumber)); \; 454}; 455 ; 456#define RootStreamer(name,STREAMER) \; 457namespace ROOT { \; 458 /** \cond HIDDEN_SYMBOLS */ \; 459 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 460 /** \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h_source.html:19802,load,load,19802,doc/v632/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html,1,['load'],['load']
Performance," 4269 ; 4270 // create range and minimizer options with default values; 4271 ROOT::Fit::DataRange range(xxmin,xxmax);; 4272 ROOT::Math::MinimizerOptions minOption;; 4273 ; 4274 // need to empty the buffer before; 4275 // (t.b.d. do a ML unbinned fit with buffer data); 4276 if (fBuffer) BufferEmpty();; 4277 ; 4278 return ROOT::Fit::FitObject(this, f1 , fitOption , minOption, goption, range);; 4279}; 4280 ; 4281////////////////////////////////////////////////////////////////////////////////; 4282/// Display a panel with all histogram fit options.; 4283///; 4284/// See class TFitPanel for example; 4285 ; 4286void TH1::FitPanel(); 4287{; 4288 if (!gPad); 4289 gROOT->MakeDefCanvas();; 4290 ; 4291 if (!gPad) {; 4292 Error(""FitPanel"", ""Unable to create a default canvas"");; 4293 return;; 4294 }; 4295 ; 4296 ; 4297 // use plugin manager to create instance of TFitEditor; 4298 TPluginHandler *handler = gROOT->GetPluginManager()->FindHandler(""TFitEditor"");; 4299 if (handler && handler->LoadPlugin() != -1) {; 4300 if (handler->ExecPlugin(2, gPad, this) == 0); 4301 Error(""FitPanel"", ""Unable to create the FitPanel"");; 4302 }; 4303 else; 4304 Error(""FitPanel"", ""Unable to find the FitPanel plug-in"");; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Return a histogram containing the asymmetry of this histogram with h2,; 4309/// where the asymmetry is defined as:; 4310///; 4311/// ~~~ {.cpp}; 4312/// Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; 4313/// ~~~; 4314///; 4315/// works for 1D, 2D, etc. histograms; 4316/// c2 is an optional argument that gives a relative weight between the two; 4317/// histograms, and dc2 is the error on this weight. This is useful, for example,; 4318/// when forming an asymmetry between two histograms from 2 different data sets that; 4319/// need to be normalized to each other in some way. The function calculates; 4320/// the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:177768,Load,LoadPlugin,177768,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Load'],['LoadPlugin']
Performance," 430 ; 431//---- ClassDefT macros for templates with two template arguments --------------; 432// ClassDef2T2 goes in the same header as ClassDefT but must be; 433// outside the class scope; 434// ClassImp2T corresponds to ClassImpT; 435 ; 436#define ClassDef2T2(name,Tmpl1,Tmpl2); 437#define ClassImp2T(name,Tmpl1,Tmpl2) templateClassImp(name); 438 ; 439 ; 440//---- ClassDefT macros for templates with three template arguments ------------; 441// ClassDef3T2 goes in the same header as ClassDefT but must be; 442// outside the class scope; 443// ClassImp3T corresponds to ClassImpT; 444 ; 445#define ClassDef3T2(name,Tmpl1,Tmpl2,Tmpl3); 446#define ClassImp3T(name,Tmpl1,Tmpl2,Tmpl3) templateClassImp(name); 447 ; 448 ; 449//---- Macro to set the class version of non instrumented classes --------------; 450 ; 451#define RootClassVersion(name,VersionNumber) \; 452namespace ROOT { /** \cond HIDDEN_SYMBOLS */ \; 453 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 454 /** \cond HIDDEN_SYMBOLS */ \; 455 static Short_t _R__UNIQUE_(R__dummyVersionNumber) = \; 456 GenerateInitInstance((name*)0x0)->SetVersion(VersionNumber); \; 457 /** \endcond */ \; 458 R__UseDummy(_R__UNIQUE_(R__dummyVersionNumber)); \; 459}; 460 ; 461#define RootStreamer(name,STREAMER) \; 462namespace ROOT { \; 463 /** \cond HIDDEN_SYMBOLS */ \; 464 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 465 /** \cond HIDDEN_SYMBOLS */ \; 466 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 467 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 468 /** \endcond */ \; 469 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 470}; 471 ; 472//---- Macro to load a library into the interpreter --------------; 473// Call as R__LOAD_LIBRARY(libEvent); 474// This macro intentionally does not take string as argument, to; 475// prevent compilation errors with complex diagnostics due to; 476// TString BAD_DO_NOT_TRY = ""lib"";; 477// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h_source.html:20223,load,load,20223,doc/master/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h_source.html,1,['load'],['load']
Performance," 4382/// tree.Draw("">>+yplus"",""y>0""); 4383/// ~~~; 4384/// will not reset yplus, but will enter the selected entries at the end; 4385/// of the existing list.; 4386///; 4387/// ### Using a TEventList, TEntryList or TEntryListArray as Input; 4388///; 4389/// Once a TEventList or a TEntryList object has been generated, it can be used as input; 4390/// for TTree::Draw. Use TTree::SetEventList or TTree::SetEntryList to set the; 4391/// current event list; 4392///; 4393/// Example 1:; 4394/// ~~~ {.cpp}; 4395/// TEventList *elist = (TEventList*)gDirectory->Get(""yplus"");; 4396/// tree->SetEventList(elist);; 4397/// tree->Draw(""py"");; 4398/// ~~~; 4399/// Example 2:; 4400/// ~~~ {.cpp}; 4401/// TEntryList *elist = (TEntryList*)gDirectory->Get(""yplus"");; 4402/// tree->SetEntryList(elist);; 4403/// tree->Draw(""py"");; 4404/// ~~~; 4405/// If a TEventList object is used as input, a new TEntryList object is created; 4406/// inside the SetEventList function. In case of a TChain, all tree headers are loaded; 4407/// for this transformation. This new object is owned by the chain and is deleted; 4408/// with it, unless the user extracts it by calling GetEntryList() function.; 4409/// See also comments to SetEventList() function of TTree and TChain.; 4410///; 4411/// If arrays are used in the selection criteria and TEntryListArray is not used,; 4412/// all the entries that have at least one element of the array that satisfy the selection; 4413/// are entered in the list.; 4414///; 4415/// Example:; 4416/// ~~~ {.cpp}; 4417/// tree.Draw("">>pyplus"",""fTracks.fPy>0"");; 4418/// tree->SetEventList(pyplus);; 4419/// tree->Draw(""fTracks.fPy"");; 4420/// ~~~; 4421/// will draw the fPy of ALL tracks in event with at least one track with; 4422/// a positive fPy.; 4423///; 4424/// To select only the elements that did match the original selection; 4425/// use TEventList::SetReapplyCut or TEntryList::SetReapplyCut.; 4426///; 4427/// Example:; 4428/// ~~~ {.cpp}; 4429/// tree.Draw("">>pyplus"",""fTrack",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:178034,load,loaded,178034,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['load'],['loaded']
Performance," 4649 Int_t loc = -1;; 4650 while( TObjString *s = (TObjString*)s_iter() ) {; 4651 for(Int_t i = fElements->GetLast(); i >= 0 && (i+1) >= loc; --i) {; 4652 if (s->String() == fElements->UncheckedAt(i)->GetName()) {; 4653 if (loc == -1 || (i+1)>loc) {; 4654 loc = i+1;; 4655 }; 4656 }; 4657 }; 4658 }; 4659 if (loc == -1) {; 4660 // Verify if the last one is not 'skipped'.; 4661 for(Int_t i = fElements->GetLast(); i >= 0 && (i+1) >= loc; --i) {; 4662 if (((TStreamerElement *)fElements->UncheckedAt(i))->GetNewType() !=; 4663 TVirtualStreamerInfo::kUnsupportedConversion) {; 4664 break;; 4665 }; 4666 loc = i;; 4667 }; 4668 }; 4669 if (loc == -1) {; 4670 for(auto &el : toAdd) {; 4671 fElements->Add(el);; 4672 }; 4673 } else {; 4674 R__TObjArray_InsertAt(fElements, toAdd, loc);; 4675 }; 4676 } // None of the target of the rule are on file.; 4677}; 4678 ; 4679////////////////////////////////////////////////////////////////////////////////; 4680/// List the TStreamerElement list and also the precomputed tables; 4681/// if option contains the string ""incOrig"", also prints the original; 4682/// (non-optimized elements in the list of compiled elements.; 4683 ; 4684void TStreamerInfo::ls(Option_t *option) const; 4685{; 4686 if (fClass && (fName != fClass->GetName())) {; 4687 if (fClass->IsVersioned()) {; 4688 Printf(""\nStreamerInfo for conversion to %s from: %s, version=%d, checksum=0x%x"",fClass->GetName(),GetName(),fClassVersion,GetCheckSum());; 4689 } else {; 4690 Printf(""\nStreamerInfo for conversion to %s from: %s, checksum=0x%x"",fClass->GetName(),GetName(),GetCheckSum());; 4691 }; 4692 } else {; 4693 if (!fClass || fClass->IsVersioned()) {; 4694 Printf(""\nStreamerInfo for class: %s, version=%d, checksum=0x%x"",GetName(),fClassVersion,GetCheckSum());; 4695 } else {; 4696 Printf(""\nStreamerInfo for class: %s, checksum=0x%x"",GetName(),GetCheckSum());; 4697 }; 4698 }; 4699 ; 4700 if (fElements) {; 4701 TIter next(fElements);; 4702 TObject *obj;; 4703 while ((obj = next())); 4704 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:188905,optimiz,optimized,188905,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['optimiz'],['optimized']
Performance," 4704 if (autoFlush || autoSave) {; 4705 // First call FlushBasket to make sure that fTotBytes is up to date.; 4706 FlushBasketsImpl();; 4707 autoFlush = false; // avoid auto flushing again later; 4708 ; 4709 // When we are in one-basket-per-cluster mode, there is no need to optimize basket:; 4710 // they will automatically grow to the size needed for an event cluster (with the basket; 4711 // shrinking preventing them from growing too much larger than the actually-used space).; 4712 if (!TestBit(TTree::kOnlyFlushAtCluster)) {; 4713 OptimizeBaskets(GetTotBytes(), 1, """");; 4714 if (gDebug > 0); 4715 Info(""TTree::Fill"", ""OptimizeBaskets called at entry %lld, fZipBytes=%lld, fFlushedBytes=%lld\n"",; 4716 fEntries, GetZipBytes(), fFlushedBytes);; 4717 }; 4718 fFlushedBytes = GetZipBytes();; 4719 fAutoFlush = fEntries; // Use test on entries rather than bytes; 4720 ; 4721 // subsequently in run; 4722 if (fAutoSave < 0) {; 4723 // Set fAutoSave to the largest integer multiple of; 4724 // fAutoFlush events such that fAutoSave*fFlushedBytes; 4725 // < (minus the input value of fAutoSave); 4726 Long64_t totBytes = GetTotBytes();; 4727 if (zipBytes != 0) {; 4728 fAutoSave = TMath::Max(fAutoFlush, fEntries * ((-fAutoSave / zipBytes) / fEntries));; 4729 } else if (totBytes != 0) {; 4730 fAutoSave = TMath::Max(fAutoFlush, fEntries * ((-fAutoSave / totBytes) / fEntries));; 4731 } else {; 4732 TBufferFile b(TBuffer::kWrite, 10000);; 4733 TTree::Class()->WriteBuffer(b, (TTree *)this);; 4734 Long64_t total = b.Length();; 4735 fAutoSave = TMath::Max(fAutoFlush, fEntries * ((-fAutoSave / total) / fEntries));; 4736 }; 4737 } else if (fAutoSave > 0) {; 4738 fAutoSave = fAutoFlush * (fAutoSave / fAutoFlush);; 4739 }; 4740 ; 4741 if (fAutoSave != 0 && fEntries >= fAutoSave); 4742 autoSave = true;; 4743 ; 4744 if (gDebug > 0); 4745 Info(""TTree::Fill"", ""First AutoFlush. fAutoFlush = %lld, fAutoSave = %lld\n"", fAutoFlush, fAutoSave);; 4746 }; 4747 } else {; 4748 // Check if we need to auto fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:190968,Optimiz,OptimizeBaskets,190968,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['Optimiz'],['OptimizeBaskets']
Performance," 4705#elif defined(R__MACOSX); 4706 cmd.Form(""perl -e 'my $cachepath = \""%s\""; my $cachesize = %lld;my $findcommand=\""find $cachepath -type f -exec stat -f \\\""\\%%a::\\%%N::\\%%z\\\"" \\{\\} \\\\\\;\"";my $totalsize=0;open FIND, \""$findcommand | sort -k 1 |\"";while (<FIND>) { my ($accesstime, $filename, $filesize) = split \""::\"",$_; $totalsize += $filesize;if ($totalsize > $cachesize) {if ( ( -e \""${filename}.ROOT.cachefile\"" ) || ( -e \""${filename}\"" ) ) {unlink \""$filename.ROOT.cachefile\"";unlink \""$filename\"";}}}close FIND;' "", fgCacheFileDir.Data(),shrinksize);; 4707#else; 4708 cmd.Form(""perl -e 'my $cachepath = \""%s\""; my $cachesize = %lld;my $findcommand=\""find $cachepath -type f -exec stat -c \\\""\\%%x::\\%%n::\\%%s\\\"" \\{\\} \\\\\\;\"";my $totalsize=0;open FIND, \""$findcommand | sort -k 1 |\"";while (<FIND>) { my ($accesstime, $filename, $filesize) = split \""::\"",$_; $totalsize += $filesize;if ($totalsize > $cachesize) {if ( ( -e \""${filename}.ROOT.cachefile\"" ) || ( -e \""${filename}\"" ) ) {unlink \""$filename.ROOT.cachefile\"";unlink \""$filename\"";}}}close FIND;' "", fgCacheFileDir.Data(),shrinksize);; 4709#endif; 4710 ; 4711 tagfile->WriteBuffer(cmd, 4096);; 4712 delete tagfile;; 4713 ; 4714 if ((gSystem->Exec(cmd)) != 0) {; 4715 ::Error(""TFile::ShrinkCacheFileDir"", ""error executing clean-up script"");; 4716 return kFALSE;; 4717 }; 4718 ; 4719 return kTRUE;; 4720}; 4721 ; 4722////////////////////////////////////////////////////////////////////////////////; 4723/// Sets open timeout time (in ms). Returns previous timeout value.; 4724 ; 4725UInt_t TFile::SetOpenTimeout(UInt_t timeout); 4726{; 4727 UInt_t to = fgOpenTimeout;; 4728 fgOpenTimeout = timeout;; 4729 return to;; 4730}; 4731 ; 4732////////////////////////////////////////////////////////////////////////////////; 4733/// Returns open timeout (in ms).; 4734 ; 4735UInt_t TFile::GetOpenTimeout(); 4736{; 4737 return fgOpenTimeout;; 4738}; 4739 ; 4740//////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:173044,cache,cachefile,173044,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cachefile']
Performance," 480 case kLong_t: return 'G';; 481 case kULong_t: return 'g';; 482 case kchar: return 0; // unsupported; 483 case kLong64_t: return 'L';; 484 case kULong64_t: return 'l';; 485 ; 486 case kCharStar: return 'C';; 487 case kBits: return 0; //unsupported; 488 ; 489 case kOther_t:; 490 case kNoType_t:; 491 default:; 492 return 0;; 493 }; 494 return 0;; 495}; 496 ; 497////////////////////////////////////////////////////////////////////////////////; 498/// \class TTree::TFriendLock; 499/// Helper class to prevent infinite recursion in the usage of TTree Friends.; 500 ; 501////////////////////////////////////////////////////////////////////////////////; 502/// Record in tree that it has been used while recursively looks through the friends.; 503 ; 504TTree::TFriendLock::TFriendLock(TTree* tree, UInt_t methodbit); 505: fTree(tree); 506{; 507 // We could also add some code to acquire an actual; 508 // lock to prevent multi-thread issues; 509 fMethodBit = methodbit;; 510 if (fTree) {; 511 fPrevious = fTree->fFriendLockStatus & fMethodBit;; 512 fTree->fFriendLockStatus |= fMethodBit;; 513 } else {; 514 fPrevious = false;; 515 }; 516}; 517 ; 518////////////////////////////////////////////////////////////////////////////////; 519/// Copy constructor.; 520 ; 521TTree::TFriendLock::TFriendLock(const TFriendLock& tfl) :; 522 fTree(tfl.fTree),; 523 fMethodBit(tfl.fMethodBit),; 524 fPrevious(tfl.fPrevious); 525{; 526}; 527 ; 528////////////////////////////////////////////////////////////////////////////////; 529/// Assignment operator.; 530 ; 531TTree::TFriendLock& TTree::TFriendLock::operator=(const TTree::TFriendLock& tfl); 532{; 533 if(this!=&tfl) {; 534 fTree=tfl.fTree;; 535 fMethodBit=tfl.fMethodBit;; 536 fPrevious=tfl.fPrevious;; 537 }; 538 return *this;; 539}; 540 ; 541////////////////////////////////////////////////////////////////////////////////; 542/// Restore the state of tree the same as before we set the lock.; 543 ; 544TTree::TFriendLock::~TFriendLock(); 545{; 546 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:20202,multi-thread,multi-thread,20202,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['multi-thread'],['multi-thread']
Performance," 481/// Books MVA method. The option configuration string is custom for each MVA; 482/// the TString field ""theNameAppendix"" serves to define (and distinguish); 483/// several instances of a given MVA, eg, when one wants to compare the; 484/// performance of various configurations; 485 ; 486TMVA::MethodBase *; 487TMVA::Factory::BookMethod(TMVA::DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption); 488{; 489 return BookMethod(loader, Types::Instance().GetMethodName(theMethod), methodTitle, theOption);; 490}; 491 ; 492////////////////////////////////////////////////////////////////////////////////; 493/// Adds an already constructed method to be managed by this factory.; 494///; 495/// \note Private.; 496/// \note Know what you are doing when using this method. The method that you; 497/// are loading could be trained already.; 498///; 499 ; 500TMVA::MethodBase *; 501TMVA::Factory::BookMethodWeightfile(DataLoader *loader, TMVA::Types::EMVA methodType, const TString &weightfile); 502{; 503 TString datasetname = loader->GetName();; 504 std::string methodTypeName = std::string(Types::Instance().GetMethodName(methodType).Data());; 505 DataSetInfo &dsi = loader->GetDataSetInfo();; 506 ; 507 IMethod *im = ClassifierFactory::Instance().Create(methodTypeName, dsi, weightfile);; 508 MethodBase *method = (dynamic_cast<MethodBase *>(im));; 509 ; 510 if (method == nullptr); 511 return nullptr;; 512 ; 513 if (method->GetMethodType() == Types::kCategory) {; 514 Log() << kERROR << ""Cannot handle category methods for now."" << Endl;; 515 }; 516 ; 517 TString fileDir;; 518 if (fModelPersistence) {; 519 // find prefix in fWeightFileDir;; 520 TString prefix = gConfig().GetIONames().fWeightFileDirPrefix;; 521 fileDir = prefix;; 522 if (!prefix.IsNull()); 523 if (fileDir[fileDir.Length() - 1] != '/'); 524 fileDir += ""/"";; 525 fileDir = loader->GetName();; 526 fileDir += ""/"" + gConfig().GetIONames().fWeightFileDir;; 527 }; 528 ; 529 if (fModelPersistence); 530 me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:20676,load,loader,20676,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['load'],['loader']
Performance," 5152 sURL.SetOptions(opt);; 5153 ; 5154 TFile *sfile = nullptr;; 5155 ; 5156 Bool_t success = kFALSE;; 5157 ; 5158 // Open source file; 5159 if (!(sfile = TFile::Open(sURL.GetUrl(), ""READ""))) {; 5160 ::Error(""TFile::Cp"", ""cannot open source file %s"", src);; 5161 } else {; 5162 success = sfile->Cp(dst, progressbar, buffersize);; 5163 }; 5164 ; 5165 if (sfile) {; 5166 sfile->Close();; 5167 delete sfile;; 5168 }; 5169 ; 5170 return success;; 5171}; 5172 ; 5173//______________________________________________________________________________; 5174//The next statement is not active anymore on Linux.; 5175//Using posix_fadvise introduces a performance penalty (10 %) on optimized files; 5176//and in addition it destroys the information of TTreePerfStats; 5177#if defined(R__neverLINUX) && !defined(R__WINGCC); 5178Bool_t TFile::ReadBufferAsync(Long64_t offset, Int_t len); 5179{; 5180 // Read specified byte range asynchronously. Actually we tell the kernel; 5181 // which blocks we are going to read so it can start loading these blocks; 5182 // in the buffer cache.; 5183 ; 5184 // Shortcut to avoid having to implement dummy ReadBufferAsync() in all; 5185 // I/O plugins. Override ReadBufferAsync() in plugins if async is supported.; 5186 if (IsA() != TFile::Class()); 5187 return kTRUE;; 5188 ; 5189 int advice = POSIX_FADV_WILLNEED;; 5190 if (len == 0) {; 5191 // according POSIX spec if len is zero, all data following offset; 5192 // is specified. Nevertheless ROOT uses zero to probe readahead; 5193 // capabilities.; 5194 advice = POSIX_FADV_NORMAL;; 5195 }; 5196 Double_t start = 0;; 5197 if (gPerfStats) start = TTimeStamp();; 5198#if defined(R__SEEK64); 5199 Int_t result = posix_fadvise64(fD, offset, len, advice);; 5200#else; 5201 Int_t result = posix_fadvise(fD, offset, len, advice);; 5202#endif; 5203 if (gPerfStats) {; 5204 gPerfStats->FileReadEvent(this, len, start);; 5205 }; 5206 return (result != 0);; 5207}; 5208#else; 5209Bool_t TFile::ReadBufferAsync(Long64_t, Int_t); 5210",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:188450,load,loading,188450,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,"['cache', 'load']","['cache', 'loading']"
Performance," 52/// root [3] TPython::Bind(&std::any_cast<TNamed&>(res1), ""n"");; 53/// root [4] std::any res2;; 54/// root [5] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed*', 'TNamed*'](n)"", &res2);; 55/// root [6] (&std::any_cast<TNamed&>(res1) == std::any_cast<TNamed*>(res2)); 56/// (bool) true; 57///; 58/// // Variables can cross-over by using an `std::any` with a specific name.; 59/// root [6] TPython::Exec(""_anyresult = ROOT.std.make_any['Int_t'](1 + 1)"", &res1);; 60/// root [7] std::any_cast<int>(res1); 61/// (int) 2; 62/// ~~~; 63///; 64/// And with a python file `MyPyClass.py` like this:; 65/// ~~~{.py}; 66/// print 'creating class MyPyClass ... '; 67///; 68/// class MyPyClass:; 69/// def __init__( self ):; 70/// print 'in MyPyClass.__init__'; 71///; 72/// def gime( self, what ):; 73/// return what; 74/// ~~~; 75/// one can load a python module, and use the class. Casts are; 76/// necessary as the type information can not be otherwise derived.; 77/// ~~~{.cpp}; 78/// root [6] TPython::LoadMacro( ""MyPyClass.py"" );; 79/// creating class MyPyClass ...; 80/// root [7] MyPyClass m;; 81/// in MyPyClass.__init__; 82/// root [8] std::string s = (char*)m.gime( ""aap"" );; 83/// root [9] s; 84/// (class TString)""aap""; 85/// ~~~; 86/// It is possible to switch between interpreters by calling `TPython::Prompt()`; 87/// on the Cling side, while returning with `^D` (EOF). State is preserved between; 88/// successive switches.; 89///; 90/// The API part provides (direct) C++ access to the bindings functionality of; 91/// PyROOT. It allows verifying that you deal with a PyROOT python object in the; 92/// first place (CPPInstance_Check for CPPInstance and any derived types, as well; 93/// as CPPInstance_CheckExact for CPPInstance's only); and it allows conversions; 94/// of `void*` to an CPPInstance and vice versa.; 95 ; 96//- data ---------------------------------------------------------------------; 97ClassImp(TPython);; 98static PyObject *gMainDict = 0;; 99 ; 100namespace {; 10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8cxx_source.html:2984,Load,LoadMacro,2984,doc/master/TPython_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPython_8cxx_source.html,1,['Load'],['LoadMacro']
Performance," 530 /// scenario allows it. For example, if ROOT is configured to use an external; 531 /// scheduler, setting a value for 'numthreads' might not have any effect.; 532 /// The maximum number of threads can be influenced by the environment; 533 /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; 534 /// the maximum number of active threads to 2, if the scheduling library; 535 /// (such as tbb) ""permits"".; 536 ///; 537 /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; 538 /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.; 539 void EnableImplicitMT(UInt_t numthreads); 540 {; 541#ifdef R__USE_IMT; 542 if (ROOT::Internal::IsImplicitMTEnabledImpl()); 543 return;; 544 EnableThreadSafety();; 545 static void (*sym)(UInt_t) = (void(*)(UInt_t))Internal::GetSymInLibImt(""ROOT_TImplicitMT_EnableImplicitMT"");; 546 if (sym); 547 sym(numthreads);; 548 ROOT::Internal::IsImplicitMTEnabledImpl() = true;; 549#else; 550 ::Warning(""EnableImplicitMT"", ""Cannot enable implicit multi-threading with %d threads, please build ROOT with -Dimt=ON"", numthreads);; 551#endif; 552 }; 553 ; 554 ////////////////////////////////////////////////////////////////////////////////; 555 /// Disables the implicit multi-threading in ROOT (see EnableImplicitMT).; 556 void DisableImplicitMT(); 557 {; 558#ifdef R__USE_IMT; 559 static void (*sym)() = (void(*)())Internal::GetSymInLibImt(""ROOT_TImplicitMT_DisableImplicitMT"");; 560 if (sym); 561 sym();; 562 ROOT::Internal::IsImplicitMTEnabledImpl() = kFALSE;; 563#else; 564 ::Warning(""DisableImplicitMT"", ""Cannot disable implicit multi-threading, please build ROOT with -Dimt=ON"");; 565#endif; 566 }; 567 ; 568 ////////////////////////////////////////////////////////////////////////////////; 569 /// Returns true if the implicit multi-threading in ROOT is enabled.; 570 Bool_t IsImplicitMTEnabled(); 571 {; 572 return ROOT::Internal::IsImplicitMTEnabledImpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:20925,multi-thread,multi-threading,20925,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,['multi-thread'],['multi-threading']
Performance," 5400 ; 5401////////////////////////////////////////////////////////////////////////////////; 5402/// Used for automatic sizing of the cache.; 5403///; 5404/// Estimates a suitable size for the tree cache based on AutoFlush.; 5405/// A cache sizing factor is taken from the configuration. If this yields zero; 5406/// and withDefault is true the historical algorithm for default size is used.; 5407 ; 5408Long64_t TTree::GetCacheAutoSize(bool withDefault /* = false */ ); 5409{; 5410 auto calculateCacheSize = [this](Double_t cacheFactor); 5411 {; 5412 Long64_t cacheSize = 0;; 5413 if (fAutoFlush < 0) {; 5414 cacheSize = Long64_t(-cacheFactor * fAutoFlush);; 5415 } else if (fAutoFlush == 0) {; 5416 const auto medianClusterSize = GetMedianClusterSize();; 5417 if (medianClusterSize > 0); 5418 cacheSize = Long64_t(cacheFactor * 1.5 * medianClusterSize * GetZipBytes() / (fEntries + 1));; 5419 else; 5420 cacheSize = Long64_t(cacheFactor * 1.5 * 30000000); // use the default value of fAutoFlush; 5421 } else {; 5422 cacheSize = Long64_t(cacheFactor * 1.5 * fAutoFlush * GetZipBytes() / (fEntries + 1));; 5423 }; 5424 if (cacheSize >= (INT_MAX / 4)) {; 5425 cacheSize = INT_MAX / 4;; 5426 }; 5427 return cacheSize;; 5428 };; 5429 ; 5430 const char *stcs;; 5431 Double_t cacheFactor = 0.0;; 5432 if (!(stcs = gSystem->Getenv(""ROOT_TTREECACHE_SIZE"")) || !*stcs) {; 5433 cacheFactor = gEnv->GetValue(""TTreeCache.Size"", 1.0);; 5434 } else {; 5435 cacheFactor = TString(stcs).Atof();; 5436 }; 5437 ; 5438 if (cacheFactor < 0.0) {; 5439 // ignore negative factors; 5440 cacheFactor = 0.0;; 5441 }; 5442 ; 5443 Long64_t cacheSize = calculateCacheSize(cacheFactor);; 5444 ; 5445 if (cacheSize < 0) {; 5446 cacheSize = 0;; 5447 }; 5448 ; 5449 if (cacheSize == 0 && withDefault) {; 5450 cacheSize = calculateCacheSize(1.0);; 5451 }; 5452 ; 5453 return cacheSize;; 5454}; 5455 ; 5456////////////////////////////////////////////////////////////////////////////////; 5457/// Return an iterator over the cluster ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:214992,cache,cacheSize,214992,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['cache'],"['cacheFactor', 'cacheSize']"
Performance," 555 of file TInterpreter.h. ◆ IsUnsignedIntegerType(). virtual Bool_t TInterpreter::IsUnsignedIntegerType ; (; const void * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 556 of file TInterpreter.h. ◆ IsVoidPointerType(). virtual Bool_t TInterpreter::IsVoidPointerType ; (; const void * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 559 of file TInterpreter.h. ◆ Load(). virtual Int_t TInterpreter::Load ; (; const char * ; filenam, . Bool_t ; system = kFALSE . ). pure virtual . Implemented in TCling. ◆ LoadEnums(). virtual void TInterpreter::LoadEnums ; (; TListOfEnums & ; cl); const. pure virtual . Implemented in TCling. ◆ LoadFile(). virtual int TInterpreter::LoadFile ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 259 of file TInterpreter.h. ◆ LoadFunctionTemplates(). virtual void TInterpreter::LoadFunctionTemplates ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ LoadLibraryMap(). virtual Int_t TInterpreter::LoadLibraryMap ; (; const char * ; rootmapfile = nullptr). pure virtual . Implemented in TCling. ◆ LoadMacro(). virtual void TInterpreter::LoadMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ LoadText(). virtual Bool_t TInterpreter::LoadText ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 260 of file TInterpreter.h. ◆ MakeInterpreterValue(). virtual std::unique_ptr< TInterpreterValue > TInterpreter::MakeInterpreterValue ; (; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 278 of file TInterpreter.h. ◆ MapCppName(). virtual const char * TInterpreter::MapCppName ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 261 of file TInterpreter.h. ◆ MethodArgInfo_DefaultValue(). virtual const char * TInterpreter::MethodArgInfo_DefaultValue ; (; MethodArgInfo_t * ; ); const. inlinevirtual .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:78887,Load,LoadLibraryMap,78887,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Load'],['LoadLibraryMap']
Performance," 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignment and copy creation only a shallow copy is; 87 * performed and no new element buffer allocated. To perform a deep copy use; 88 * the static Copy method of the TCuda architecture class.; 89 *; 90 * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; 91 * transferred to the device. This stream can be accessed through the; 92 * GetComputeStream member function and used to synchronize computations.; 93 *; 94 * The TCudaMatrix class also holds static references to CUDA resources.; 95 * Those are the cublas handle, a buffer of curand states for the generation; 96 * of random numbers as well as a vector containing ones, which is used for; 97 * summing column matrices using matrix-vector multiplication. The class also; 98 * has a static buffer for returning results from the device.; 99 *; 100 */; 101template<typename AFloat>; 102class TCudaMatrix; 103{; 104public:; 105 ; 106private:; 107 ; 108 static size_t fInstances; ///< Current number of matrix instances.; 109 static cublasHandle_t fCublasHandle;; 110 static AFloat * fDeviceReturn; ///< Buffer for kernel return values.; 111 static AFloat * fOnes; ///< Ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8h_source.html:3380,perform,perform,3380,doc/master/CudaMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html,1,['perform'],['perform']
Performance," 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_RQ_OBJECT; 13#define ROOT_RQ_OBJECT; 14 ; 15#include <TQObject.h>; 16#include <Varargs.h>; 17 ; 18 ; 19//---- RQ_OBJECT macro -----------------------------------------------; 20//; 21// Macro is used to delegate TQObject methods to other classes; 22// Example:; 23//; 24// #include ""RQ_OBJECT.h""; 25//; 26// class A {; 27// RQ_OBJECT(""A""); 28// private:; 29// Int_t fValue;; 30// public:; 31// A() : fValue(0) { }; 32// ~A() { }; 33//; 34// void SetValue(Int_t value); 35// void PrintValue() const { printf(""value=%d\n"", fValue); }; 36// Int_t GetValue() const { return fValue; }; 37// };; 38//; 39// void A::SetValue(Int_t value); 40// {; 41// // Sets new value; 42//; 43// // to prevent infinite looping in the case; 44// // of cyclic connections; 45// if (value != fValue) {; 46// fValue = value;; 47// Emit(""SetValue(Int_t)"", fValue);; 48// }; 49// }; 50//; 51// Load this class into root session and try the following:; 52//; 53// a = new A();; 54// b = new A();; 55//; 56// Here is one way to connect two of these objects together:; 57//; 58// a->Connect(""SetValue(Int_t)"", ""A"", b, ""SetValue(Int_t)"");; 59//; 60// Calling a->SetValue(79) will make a emit a signal, which b; 61// will receive, i.e. b->SetValue(79) is invoked. b will in; 62// turn emit the same signal, which nobody receives, since no; 63// slot has been connected to it, so it disappears into hyperspace.; 64//; 65 ; 66#define RQ_OBJECT1(sender_class)\; 67private:\; 68TQObjSender fQObject;\; 69public:\; 70TList *GetListOfSignals() const {return fQObject.GetListOfSignals();}\; 71Bool_t Connect(const char *sig,const char *cl,void *rcvr,const char *slt)\; 72{fQObject.SetSender(this);fQObject.SetSenderClassName(sender_class);return fQObject.Connect(sig,cl,rcvr,slt);}\; 73",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RQ__OBJECT_8h_source.html:1524,Load,Load,1524,doc/master/RQ__OBJECT_8h_source.html,https://root.cern,https://root.cern/doc/master/RQ__OBJECT_8h_source.html,1,['Load'],['Load']
Performance," 61 // Init Intrinsics, build all windows, and enter event loop; 62 theApp->Run();; 63 ; 64 return(0);; 65 }; 66~~~; 67*/; 68 ; 69#include <ROOT/RConfig.hxx>; 70#include <ROOT/TErrorDefaultHandler.hxx>; 71#include <ROOT/RVersion.hxx>; 72#include ""RConfigure.h""; 73#include ""RConfigOptions.h""; 74#include <string>; 75#include <map>; 76#include <set>; 77#include <cstdlib>; 78#ifdef WIN32; 79#include <io.h>; 80#include ""Windows4Root.h""; 81#include <Psapi.h>; 82#define RTLD_DEFAULT ((void *)::GetModuleHandle(NULL)); 83//#define dlsym(library, function_name) ::GetProcAddress((HMODULE)library, function_name); 84#define dlopen(library_name, flags) ::LoadLibrary(library_name); 85#define dlclose(library) ::FreeLibrary((HMODULE)library); 86char *dlerror() {; 87 static char Msg[1000];; 88 FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, NULL, GetLastError(),; 89 MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), Msg,; 90 sizeof(Msg), NULL);; 91 return Msg;; 92}; 93FARPROC dlsym(void *library, const char *function_name); 94{; 95 HMODULE hMods[1024];; 96 DWORD cbNeeded;; 97 FARPROC address = NULL;; 98 unsigned int i;; 99 if (library == RTLD_DEFAULT) {; 100 if (EnumProcessModules(::GetCurrentProcess(), hMods, sizeof(hMods), &cbNeeded)) {; 101 for (i = 0; i < (cbNeeded / sizeof(HMODULE)); i++) {; 102 address = ::GetProcAddress((HMODULE)hMods[i], function_name);; 103 if (address); 104 return address;; 105 }; 106 }; 107 return address;; 108 } else {; 109 return ::GetProcAddress((HMODULE)library, function_name);; 110 }; 111}; 112#else; 113#include <dlfcn.h>; 114#endif; 115 ; 116#include <iostream>; 117#include ""ROOT/FoundationUtils.hxx""; 118#include ""TROOT.h""; 119#include ""TClass.h""; 120#include ""TClassEdit.h""; 121#include ""TClassGenerator.h""; 122#include ""TDataType.h""; 123#include ""TStyle.h""; 124#include ""TObjectTable.h""; 125#include ""TClassTable.h""; 126#include ""TSystem.h""; 127#include ""THashList.h""; 128#include ""TObjArray.h""; 129#include ""TEnv.h""; 130#include ""TError.h""; 131#include ""TColor.h""; 13",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:2777,Load,LoadLibrary,2777,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['Load'],['LoadLibrary']
Performance," 7112 UInt_t newBsize = UInt_t(bsize);; 7113 if (pass) { // only on the second pass so that it doesn't interfere with scaling; 7114 // If there is an entry offset, it will be stored in the same buffer as the object data; hence,; 7115 // we must bump up the size of the branch to account for this extra footprint.; 7116 // If fAutoFlush is not set yet, let's assume that it is 'in the process of being set' to; 7117 // the value of GetEntries().; 7118 Long64_t clusterSize = (fAutoFlush > 0) ? fAutoFlush : branch->GetEntries();; 7119 if (branch->GetEntryOffsetLen()) {; 7120 newBsize = newBsize + (clusterSize * sizeof(Int_t) * 2);; 7121 }; 7122 // We used ATLAS fully-split xAOD for testing, which is a rather unbalanced TTree, 10K branches,; 7123 // with 8K having baskets smaller than 512 bytes. To achieve good I/O performance ATLAS uses auto-flush 100,; 7124 // resulting in the smallest baskets being ~300-400 bytes, so this change increases their memory by about 8k*150B =~ 1MB,; 7125 // at the same time it significantly reduces the number of total baskets because it ensures that all 100 entries can be; 7126 // stored in a single basket (the old optimization tended to make baskets too small). In a toy example with fixed sized; 7127 // structures we found a factor of 2 fewer baskets needed in the new scheme.; 7128 // rounds up, increases basket size to ensure all entries fit into single basket as intended; 7129 newBsize = newBsize - newBsize%512 + 512;; 7130 }; 7131 if (newBsize < sizeOfOneEntry) newBsize = sizeOfOneEntry;; 7132 if (newBsize < bmin) newBsize = bmin;; 7133 if (newBsize > 10000000) newBsize = bmax;; 7134 if (pass) {; 7135 if (pDebug) Info(""OptimizeBaskets"", ""Changing buffer size from %6d to %6d bytes for %s\n"",oldBsize,newBsize,branch->GetName());; 7136 branch->SetBasketSize(newBsize);; 7137 }; 7138 newMemsize += newBsize;; 7139 // For this number to be somewhat accurate when newBsize is 'low'; 7140 // we do not include any space for meta data in the requested ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:279155,perform,performance,279155,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance," 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); Update pointer to current Tree and recompute pointers to the branches in the cache. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). Bool_t IsLearning() const; {return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:22119,optimiz,optimize,22119,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['optimiz'],['optimize']
Performance," 7347 if (fBranchRef) fBranchRef->Print(option);; 7348 ; 7349 //print friends if option ""all""; 7350 if (!fFriends || !strstr(option,""all"")) return;; 7351 TIter nextf(fFriends);; 7352 TFriendLock lock(const_cast<TTree*>(this),kPrint);; 7353 TFriendElement *fr;; 7354 while ((fr = (TFriendElement*)nextf())) {; 7355 TTree * t = fr->GetTree();; 7356 if (t) t->Print(option);; 7357 }; 7358}; 7359 ; 7360////////////////////////////////////////////////////////////////////////////////; 7361/// Print statistics about the TreeCache for this tree.; 7362/// Like:; 7363/// ~~~ {.cpp}; 7364/// ******TreeCache statistics for file: cms2.root ******; 7365/// Reading 73921562 bytes in 716 transactions; 7366/// Average transaction = 103.242405 Kbytes; 7367/// Number of blocks in current cache: 202, total size : 6001193; 7368/// ~~~; 7369/// if option = ""a"" the list of blocks in the cache is printed; 7370 ; 7371void TTree::PrintCacheStats(Option_t* option) const; 7372{; 7373 TFile *f = GetCurrentFile();; 7374 if (!f) return;; 7375 TTreeCache *tc = GetReadCache(f);; 7376 if (tc) tc->Print(option);; 7377}; 7378 ; 7379////////////////////////////////////////////////////////////////////////////////; 7380/// Process this tree executing the TSelector code in the specified filename.; 7381/// The return value is -1 in case of error and TSelector::GetStatus() in; 7382/// in case of success.; 7383///; 7384/// The code in filename is loaded (interpreted or compiled, see below),; 7385/// filename must contain a valid class implementation derived from TSelector,; 7386/// where TSelector has the following member functions:; 7387///; 7388/// - `Begin()`: called every time a loop on the tree starts,; 7389/// a convenient place to create your histograms.; 7390/// - `SlaveBegin()`: called after Begin(), when on PROOF called only on the; 7391/// slave servers.; 7392/// - `Process()`: called for each event, in this function you decide what; 7393/// to read and fill your histograms.; 7394/// - `SlaveTerminat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:289471,cache,cache,289471,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['cache'],['cache']
Performance," 754 ; 755 for (auto proxy : m_builders); 756 {; 757 if (proxy->Collection()->GetItemList() == itemList); 758 {; 759 // printf(""Model changes check proxy %s: \n"", proxy->Type().c_str());; 760 proxy->ModelChanges(ids);; 761 }; 762 }; 763 }; 764 ; 765 void FillImpliedSelected(REveDataItemList* itemList, REveElement::Set_t& impSelSet, const std::set<int>& sec_idcs); 766 {; 767 if (m_inEventLoading) return;; 768 ; 769 for (auto proxy : m_builders); 770 {; 771 if (proxy->Collection()->GetItemList() == itemList); 772 {; 773 proxy->FillImpliedSelected(impSelSet, sec_idcs);; 774 }; 775 }; 776 }; 777 ; 778};; 779 ; 780 ; 781//==============================================================================; 782//== Event Manager =============================================================; 783//==============================================================================; 784 ; 785class EventManager : public REveElement; 786{; 787private:; 788 Event* fEvent;; 789 CollectionManager* fCMng;; 790 ; 791public:; 792 EventManager(Event* e, CollectionManager* m): fEvent(e), fCMng(m) {}; 793 ; 794 ~EventManager() override {}; 795 ; 796 virtual void NextEvent(); 797 {; 798 eveMng->GetSelection()->ClearSelection();; 799 eveMng->GetHighlight()->ClearSelection();; 800 fEvent->Create();; 801 fCMng->LoadEvent();; 802 }; 803};; 804 ; 805class FWSelectionDeviator : public REveSelection::Deviator {; 806public:; 807 FWSelectionDeviator() {}; 808 ; 809 using REveSelection::Deviator::DeviateSelection;; 810 bool DeviateSelection(REveSelection *selection, REveElement *el, bool multi, bool secondary,; 811 const std::set<int> &secondary_idcs) override; 812 {; 813 if (el) {; 814 auto *colItems = dynamic_cast<REveDataItemList *>(el);; 815 if (colItems) {; 816 // std::cout << ""Deviate RefSelected="" << colItems->RefSelectedSet().size() << "" passed set "" << secondary_idcs.size() << ""\n"";; 817 ExecuteNewElementPicked(selection, colItems, multi, true, colItems->RefSelectedSet());; 818 return true;; 819 }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/collection__proxies_8C_source.html:25767,Load,LoadEvent,25767,doc/master/collection__proxies_8C_source.html,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html,1,['Load'],['LoadEvent']
Performance," 8 pixels.; 175That is, a square marker with size 1 will be drawn with a side equal to 8; 176pixels on the screen.; 177 ; 178The marker size of any class inheriting from `TAttMarker` can; 179be changed using the method `SetMarkerSize` and retrieved using the; 180method `GetMarkerSize`.; 181 ; 182Begin_Macro; 183{; 184 auto c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; 185 TMarker marker;; 186 marker.SetMarkerStyle(3);; 187 Double_t x = 0;; 188 Double_t dx = 1/6.0;; 189 for (Int_t i=1; i<6; i++) {; 190 x += dx;; 191 marker.SetMarkerSize(i*0.2); marker.DrawMarker(x,.165);; 192 marker.SetMarkerSize(i*0.8); marker.DrawMarker(x,.495);; 193 marker.SetMarkerSize(i*1.0); marker.DrawMarker(x,.835);; 194 }; 195}; 196End_Macro; 197 ; 198Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They; 199are meant to be very fast to draw and are always drawn with the same number of; 200pixels; therefore `SetMarkerSize` does not apply on them. To have a; 201""scalable dot"" a filled circle should be used instead, i.e. the marker style; 202number 20. By default (if `SetMarkerStyle` is not specified), the marker; 203style used is 1. That's the most common one to draw scatter plots.; 204*/; 205 ; 206////////////////////////////////////////////////////////////////////////////////; 207/// TAttMarker default constructor.; 208///; 209/// Default text attributes are taking from the current style.; 210 ; 211TAttMarker::TAttMarker(); 212{; 213 if (!gStyle) {fMarkerColor=1; fMarkerStyle=1; fMarkerSize=1; return;}; 214 fMarkerColor = gStyle->GetMarkerColor();; 215 fMarkerStyle = gStyle->GetMarkerStyle();; 216 fMarkerSize = gStyle->GetMarkerSize();; 217}; 218 ; 219////////////////////////////////////////////////////////////////////////////////; 220/// TAttMarker normal constructor.; 221///; 222/// Text attributes are taking from the argument list; 223/// - color : Marker Color Index; 224/// - style : Marker style (from 1 to 30); 225/// - size : marker size (float); 226 ; 22",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttMarker_8cxx_source.html:6937,scalab,scalable,6937,doc/master/TAttMarker_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttMarker_8cxx_source.html,1,['scalab'],['scalable']
Performance," 8672 ; 8673////////////////////////////////////////////////////////////////////////////////; 8674/// Return location of bin with minimum value in the range.; 8675 ; 8676Int_t TH1::GetMinimumBin(Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const; 8677{; 8678 // empty the buffer; 8679 if (fBuffer) ((TH1*)this)->BufferEmpty();; 8680 ; 8681 Int_t bin, binx, biny, binz;; 8682 Int_t locm;; 8683 Int_t xfirst = fXaxis.GetFirst();; 8684 Int_t xlast = fXaxis.GetLast();; 8685 Int_t yfirst = fYaxis.GetFirst();; 8686 Int_t ylast = fYaxis.GetLast();; 8687 Int_t zfirst = fZaxis.GetFirst();; 8688 Int_t zlast = fZaxis.GetLast();; 8689 Double_t minimum = FLT_MAX, value;; 8690 locm = locmix = locmiy = locmiz = 0;; 8691 for (binz=zfirst;binz<=zlast;binz++) {; 8692 for (biny=yfirst;biny<=ylast;biny++) {; 8693 for (binx=xfirst;binx<=xlast;binx++) {; 8694 bin = GetBin(binx,biny,binz);; 8695 value = RetrieveBinContent(bin);; 8696 if (value < minimum) {; 8697 minimum = value;; 8698 locm = bin;; 8699 locmix = binx;; 8700 locmiy = biny;; 8701 locmiz = binz;; 8702 }; 8703 }; 8704 }; 8705 }; 8706 return locm;; 8707}; 8708 ; 8709///////////////////////////////////////////////////////////////////////////////; 8710/// Retrieve the minimum and maximum values in the histogram; 8711///; 8712/// This will not return a cached value and will always search the; 8713/// histogram for the min and max values. The user can condition whether; 8714/// or not to call this with the GetMinimumStored() and GetMaximumStored(); 8715/// methods. If the cache is empty, then the value will be -1111. Users; 8716/// can then use the SetMinimum() or SetMaximum() methods to cache the results.; 8717/// For example, the following recipe will make efficient use of this method; 8718/// and the cached minimum and maximum values.; 8719//; 8720/// \code{.cpp}; 8721/// Double_t currentMin = pHist->GetMinimumStored();; 8722/// Double_t currentMax = pHist->GetMaximumStored();; 8723/// if ((currentMin == -1111) || (currentMax == -111",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:340810,cache,cached,340810,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['cache'],['cached']
Performance," 942#ifdef R__COMPLETE_MEM_TERMINATION; 943 SafeDelete(fCanvases);; 944 SafeDelete(fTasks);; 945 SafeDelete(fProofs);; 946 SafeDelete(fDataSets);; 947 SafeDelete(fClipboard);; 948 ; 949 fCleanups->Clear();; 950 delete fPluginManager; gPluginMgr = fPluginManager = 0;; 951 delete gClassTable; gClassTable = 0;; 952 delete gEnv; gEnv = 0;; 953 ; 954 if (fTypes) fTypes->Delete();; 955 SafeDelete(fTypes);; 956 if (fGlobals) fGlobals->Delete();; 957 SafeDelete(fGlobals);; 958 if (fGlobalFunctions) fGlobalFunctions->Delete();; 959 SafeDelete(fGlobalFunctions);; 960 fEnums.load()->Delete();; 961 ; 962 // FIXME: Causes segfault in rootcling, debug and uncomment; 963 // fClasses->Delete(); SafeDelete(fClasses); // TClass'es must be deleted last; 964#endif; 965 ; 966 // Remove shared libraries produced by the TSystem::CompileMacro() call; 967 gSystem->CleanCompiledMacros();; 968 ; 969 // Cleanup system class; 970 ROOT::Internal::SetErrorSystemMsgHandler(ROOT::Internal::ErrorSystemMsgHandlerFunc_t());; 971 SetErrorHandler(ROOT::Internal::MinimalErrorHandler);; 972 ROOT::Internal::ReleaseDefaultErrorHandler();; 973 delete gSystem;; 974 ; 975 // ROOT-6022:; 976 // if (gInterpreterLib) dlclose(gInterpreterLib);; 977#ifdef R__COMPLETE_MEM_TERMINATION; 978 // On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; 979 // initialization order is (by default?) is 'wrong' and so we can't; 980 // delete the interpreter now .. because any of the static in the; 981 // interpreter's library have already been deleted.; 982 // On the link line, we must list the most dependent .o file; 983 // and end with the least dependent (LLVM libraries), unfortunately,; 984 // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; 985 // in the same order (hence doing libCore's before LLVM's and; 986 // vice et versa for both the destructor. We worked around the; 987 // initialization order by delay the TROOT creation until first use.; 988 // We can not do the same for destruction as we hav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:37824,load,load,37824,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['load'],['load']
Performance," 9461{; 9462 GetPlayer();; 9463 if (fPlayer) {; 9464 fPlayer->StartViewer(600, 400);; 9465 }; 9466}; 9467 ; 9468////////////////////////////////////////////////////////////////////////////////; 9469/// Stop the cache learning phase; 9470///; 9471/// Returns:; 9472/// - 0 learning phase stopped or not active; 9473/// - -1 on error; 9474 ; 9475Int_t TTree::StopCacheLearningPhase(); 9476{; 9477 if (!GetTree()) {; 9478 if (LoadTree(0)<0) {; 9479 Error(""StopCacheLearningPhase"",""Could not load a tree"");; 9480 return -1;; 9481 }; 9482 }; 9483 if (GetTree()) {; 9484 if (GetTree() != this) {; 9485 return GetTree()->StopCacheLearningPhase();; 9486 }; 9487 } else {; 9488 Error(""StopCacheLearningPhase"", ""No tree is available. Could not stop cache learning phase"");; 9489 return -1;; 9490 }; 9491 ; 9492 TFile *f = GetCurrentFile();; 9493 if (!f) {; 9494 Error(""StopCacheLearningPhase"", ""No file is available. Could not stop cache learning phase"");; 9495 return -1;; 9496 }; 9497 TTreeCache *tc = GetReadCache(f,true);; 9498 if (!tc) {; 9499 Error(""StopCacheLearningPhase"", ""No cache is available. Could not stop learning phase"");; 9500 return -1;; 9501 }; 9502 tc->StopLearningPhase();; 9503 return 0;; 9504}; 9505 ; 9506////////////////////////////////////////////////////////////////////////////////; 9507/// Set the fTree member for all branches and sub branches.; 9508 ; 9509static void TBranch__SetTree(TTree *tree, TObjArray &branches); 9510{; 9511 Int_t nb = branches.GetEntriesFast();; 9512 for (Int_t i = 0; i < nb; ++i) {; 9513 TBranch* br = (TBranch*) branches.UncheckedAt(i);; 9514 br->SetTree(tree);; 9515 ; 9516 Int_t writeBasket = br->GetWriteBasket();; 9517 for (Int_t j = writeBasket; j >= 0; --j) {; 9518 TBasket *bk = (TBasket*)br->GetListOfBaskets()->UncheckedAt(j);; 9519 if (bk) {; 9520 tree->IncrementTotalBuffers(bk->GetBufferSize());; 9521 }; 9522 }; 9523 ; 9524 TBranch__SetTree(tree,*br->GetListOfBranches());; 9525 }; 9526}; 9527 ; 9528//////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:365204,cache,cache,365204,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['cache'],['cache']
Performance," 9464 of file TTree.cxx. ◆ Streamer(). void TTree::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 9535 of file TTree.cxx. ◆ StreamerNVirtual(). void TTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 659 of file TTree.h. ◆ UnbinnedFit(). Int_t TTree::UnbinnedFit ; (; const char * ; funcname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Unbinned fit of one or more variable(s) from a tree. ; funcname is a TF1 function.; See alsoTTree::Draw for explanations of the other parameters.; Fit the variable varexp using the function funcname using the selection cuts given by selection.; The list of fit options is given in parameter option. option = ""Q"" Quiet mode (minimum printing); option = ""V"" Verbose mode (default is between Q and V); option = ""E"" Perform better Errors estimation using Minos technique; option = ""M"" More. Improve fit results. You can specify boundary limits for some or all parameters via func->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters. For example, if you fit a function with 6 parameters, you can do: func->SetParameters(0,3.1,1.e-6,0.1,-8,100);; func->SetParLimits(4,-10,-4);; func->SetParLimits(5, 1,1);; With this setup:. Parameters 0->3 can vary freely; Parameter 4 has boundaries [-10,-4] with initial value -8; Parameter 5 is fixed to 100. For the fit to be meaningful, the function must be self-normalized.; i.e. It must have the same integral regardless of the parameter settings. Otherwise the fit will effectively just maximize the area.; It is mandatory to have a normalization variable which is fixed for the fit. e.g. TF1* f1 = new TF1(""f1"", ""gaus(0)/sqrt(2*3.14159)/[2]"", 0, 5);; f1->S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:219962,Perform,Perform,219962,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['Perform'],['Perform']
Performance," 9474 of file TTree.cxx. ◆ Streamer(). void TTree::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 9545 of file TTree.cxx. ◆ StreamerNVirtual(). void TTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 705 of file TTree.h. ◆ UnbinnedFit(). Int_t TTree::UnbinnedFit ; (; const char * ; funcname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Unbinned fit of one or more variable(s) from a tree. ; funcname is a TF1 function.; See alsoTTree::Draw for explanations of the other parameters.; Fit the variable varexp using the function funcname using the selection cuts given by selection.; The list of fit options is given in parameter option. option = ""Q"" Quiet mode (minimum printing); option = ""V"" Verbose mode (default is between Q and V); option = ""E"" Perform better Errors estimation using Minos technique; option = ""M"" More. Improve fit results. You can specify boundary limits for some or all parameters via func->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters. For example, if you fit a function with 6 parameters, you can do: func->SetParameters(0,3.1,1.e-6,0.1,-8,100);; func->SetParLimits(4,-10,-4);; func->SetParLimits(5, 1,1);; With this setup:. Parameters 0->3 can vary freely; Parameter 4 has boundaries [-10,-4] with initial value -8; Parameter 5 is fixed to 100. For the fit to be meaningful, the function must be self-normalized.; i.e. It must have the same integral regardless of the parameter settings. Otherwise the fit will effectively just maximize the area.; It is mandatory to have a normalization variable which is fixed for the fit. e.g. TF1* f1 = new TF1(""f1"", ""gaus(0)/sqrt(2*3.14159)/[2]"", 0, 5);; f1->S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:222925,Perform,Perform,222925,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['Perform'],['Perform']
Performance," 980 array->Clear();; 981 ; 982 if( elems.empty() ); 983 return;; 984 ; 985 for( it = elems.begin(); it != elems.end(); ++it ) {; 986 TSources *type = new TSources( it->second.c_str(), it->first.fType.c_str(), it->first.fDimensions.c_str() ) ;; 987 array->Add( type );; 988 }; 989}; 990 ; 991#if 0; 992////////////////////////////////////////////////////////////////////////////////; 993/// Generate the actual function for the rule.; 994 ; 995Bool_t TSchemaRule::GenerateFor( TStreamerInfo *info ); 996{; 997 String funcname = fSourceClass + ""_to_"" + fTargetClass;; 998 if (info) funcname += ""_v"" + info->GetClassVersion();; 999 TString names = fSource + ""_"" + fTarget;; 1000 name.ReplaceAll(',','_');; 1001 name.ReplaceAll(':','_');; 1002 funcname += ""_"" + name;; 1003 ; 1004 String filename = funcname + "".C"";; 1005 if (!false) {; 1006 filename += '+';; 1007 }; 1008 ; 1009 std::ofstream fileout(filename);; 1010 ; 1011 ; 1012 ROOT::WriteReadRawRuleFunc( *rIt, 0, mappedname, nameTypeMap, fileout );; 1013 ROOT::WriteReadRuleFunc( *rIt, 0, mappedname, nameTypeMap, fileout );; 1014 ; 1015 gROOT->LoadMacro(filename);; 1016}; 1017 ; 1018#endif; kNoneconst Handle_t kNoneDefinition GuiTypes.h:88; RConversionRuleParser.h; c#define c(i)Definition RSha256.hxx:101; Bool_tbool Bool_tDefinition RtypesCore.h:63; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TClassEdit.h; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name curs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:33063,Load,LoadMacro,33063,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Load'],['LoadMacro']
Performance," : """"), fObj(obj), fClass(cl); 85 {; 86 if (!cl); 87 Fatal(""Constructor"", ""Class parameter should not be null"");; 88 SetBit(kCanDelete);; 89 }; 90 ; 91 ~TBrowserObject() {}; 92 ; 93 void Browse(TBrowser *b) override { fClass->Browse(fObj, b); }; 94 Bool_t IsFolder() const override { return fClass->IsFolder(fObj); }; 95 TClass *IsA() const override { return fClass; }; 96 ; 97private:; 98 void *fObj; ///<! pointer to the foreign object; 99 TClass *fClass; ///<! pointer to class of the foreign object; 100};; 101 ; 102ClassImp(TBrowser);; 103 ; 104////////////////////////////////////////////////////////////////////////////////; 105// Make sure the application environment exists and the GUI libs are loaded; 106 ; 107Bool_t TBrowser::InitGraphics(); 108{; 109 // Make sure the application environment exists. It is need for graphics; 110 // (colors are initialized in the TApplication ctor).; 111 if (!gApplication); 112 TApplication::CreateApplication();; 113 // make sure that the Gpad and GUI libs are loaded; 114 TApplication::NeedGraphicsLibs();; 115 ; 116 TString hname = gEnv->GetValue(""Browser.Name"", ""TRootBrowserLite"");; 117 ; 118 Bool_t isweb = gROOT->IsWebDisplay() || (hname == ""ROOT::RWebBrowserImp"");; 119 ; 120 if (gApplication); 121 gApplication->InitializeGraphics(isweb);; 122 ; 123 if (!gROOT->IsBatch() || (isweb && !gROOT->IsWebDisplayBatch())); 124 return kTRUE;; 125 ; 126 Warning(""TBrowser"", ""The ROOT browser cannot run in batch mode"");; 127 return kFALSE;; 128}; 129 ; 130////////////////////////////////////////////////////////////////////////////////; 131/// Create a new browser with a name, title. Width and height are by; 132/// default set to 640x400 and (optionally) adjusted by the screen factor; 133/// (depending on Rint.Canvas.UseScreenFactor to be true or false, default; 134/// is true).; 135 ; 136TBrowser::TBrowser(const char *name, const char *title, TBrowserImp *extimp, Option_t *opt); 137 : TNamed(name, title), fImp(extimp); 138{; 139 if (!InitGraphi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBrowser_8cxx_source.html:3673,load,loaded,3673,doc/master/TBrowser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBrowser_8cxx_source.html,1,['load'],['loaded']
Performance," : Creating multiclass response histograms...; : Creating multiclass performance histograms...; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAMulticlass_MLP.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAMulticlass_MLP.class.C␛[0m; : Write special histos to file: TMVAMulticlass.root:/dataset/Method_MLP/MLP; Factory : Training finished; : ; Factory : Train method: PDEFoam for Multiclass classification; : ; : Build up multiclass foam 0; : Elapsed time: 0.659 sec ; : Build up multiclass foam 1; : Elapsed time: 0.667 sec ; : Build up multiclass foam 2; : Elapsed time: 0.671 sec ; : Build up multiclass foam 3; : Elapsed time: 0.469 sec ; : Elapsed time for training with 4000 events: 2.63 sec ; : Dataset[dataset] : Create results for training; : Dataset[dataset] : Multiclass evaluation of PDEFoam on training sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.12 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAMulticlass_PDEFoam.weights.xml␛[0m; : writing foam MultiClassFoam0 to file; : writing foam MultiClassFoam1 to file; : writing foam MultiClassFoam2 to file; : writing foam MultiClassFoam3 to file; : Foams written to file: ␛[0;36mdataset/weights/TMVAMulticlass_PDEFoam.weights_foams.root␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAMulticlass_PDEFoam.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: DL_CPU for Multiclass classification; : ; TFHandler_DL_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.070769 0.28960 [ -1.0000 1.0000 ]; : var2: 0.074130 0.28477 [ -1.0000 1.0000 ]; : var3: 0.026106 0.24582 [ -1.0000 1.0000 ]; : var4: -0.034951 0.25587 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:12431,perform,performance,12431,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['perform'],['performance']
Performance, : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of BDTG on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 1.01 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : Test method: MLP for Multiclass classification performance; : ; : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of MLP on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.0114 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : Test method: PDEFoam for Multiclass classification performance; : ; : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of PDEFoam on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.122 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : Test method: DL_CPU for Multiclass classification performance; : ; : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of DL_CPU on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.105 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : ␛[1mEvaluate all methods␛[0m; : Evaluate multiclass classification method: BDTG; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.070153 1.0224 [ -4.0592 3.5808 ]; : var2: 0.30372 1.0460 [ -3.6952 3.7877 ]; : var3: 0.12152 1.1222 [ -3.6800 3.9200 ]; : var4: -0.072602 1.2766 [ -4.8486 4.2221 ]; : ----------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:20415,perform,performance,20415,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['perform'],['performance']
Performance," : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; (TString) ""python3""[7]; Factory : Booking method: ␛[1mPyKeras␛[0m; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Loading Keras Model ; : Loaded model from file: Higgs_model.h5; Factory : ␛[1mTrain all methods␛[0m; Factory : [dataset] : Create Transformation ""I"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <---> Output : variable 'm_jj'; : Input : variable 'm_jjj' <---> Output : variable 'm_jjj'; : Input : variable 'm_lv' <---> Output : variable 'm_lv'; : Input : variable 'm_jlv' <---> Output : variable 'm_jlv'; : Input : variable 'm_bb' <---> Output : variable 'm_bb'; : Input : variable 'm_wbb' <---> Output : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; TFHandler_Factory : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0318 0.65629 [ 0.15106 16.132 ]; : m_jjj: 1.0217 0.37420 [ 0.34247 8.9401 ]; : m_lv: 1.0507 0.16678 [ 0.26679 3.6823 ]; : m_jlv: 1.0161 0.40288 [ 0.38441 6.5831 ]; : m_bb: 0.97707 0.53961 [ 0.080986 8.2551 ]; : m_wbb: 1.0358 0.36856 [ 0.38503 6.4013 ]; : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:14646,Load,Loading,14646,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,['Load'],"['Loaded', 'Loading']"
Performance," : ␛[1mH e l p f o r M V A m e t h o d [ FDA_GA ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The function discriminant analysis (FDA) is a classifier suitable ; : to solve linear or simple nonlinear discrimination problems.; : ; : The user provides the desired function with adjustable parameters; : via the configuration option string, and FDA fits the parameters to; : it, requiring the signal (background) function value to be as close; : as possible to 1 (0). Its advantage over the more involved and; : automatic nonlinear discriminators is the simplicity and transparency ; : of the discrimination expression. A shortcoming is that FDA will; : underperform for involved problems with complicated, phase space; : dependent nonlinear correlations.; : ; : Please consult the Users Guide for the format of the formula string; : and the allowed parameter ranges:; : documentation/tmva/UsersGuide/TMVAUsersGuide.pdf; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : The FDA performance depends on the complexity and fidelity of the; : user-defined discriminator function. As a general rule, it should; : be able to reproduce the discrimination power of any linear; : discriminant analysis. To reach into the nonlinear domain, it is; : useful to inspect the correlation profiles of the input variables,; : and add quadratic and higher polynomial terms between variables as; : necessary. Comparison with more involved nonlinear classifiers can; : be used as a guide.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : Depending on the function used, the choice of ""FitMethod"" is; : crucial for getting valuable solutions with FDA. As a guideline it; : is recommended to start with ""FitMethod=MINUIT"". When more complex; : functions are used where MINUIT does not converge to reasonable; : results, the user should switch to non-gradient FitMethods such; : as GeneticAlgorithm (GA) or Monte Carlo (MC). It might prove to be; : useful to combine GA (or MC) with MINUIT by se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:39197,Perform,Performance,39197,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Perform', 'perform']","['Performance', 'performance']"
Performance," ; # w.pdf(""model"").setNormValueCaching(3); model = w[""model""]; model.setStringAttribute(""CACHEPARMINT"", ""x:y:z""); ; # Evaluate pdf once to trigger filling of cache; normSet = {w[""x""], w[""y""], w[""z""]}; model.getVal(normSet); w.writeToFile(""rf903_numintcache.root""); ; if mode == 2:; # Load preexisting workspace from file in mode==2; f = ROOT.TFile(""rf903_numintcache.root""); w = f.Get(""w""); ; # Return created or loaded workspace; return w; ; ; mode = 0; # Mode = 0 : Run plain fit (slow); # Mode = 1 : Generate workspace with precalculated integral and store it on file (prepare for accelerated running); # Mode = 2 : Run fit from previously stored workspace including cached; # integrals (fast, run in mode=1 first); ; # Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; ; # Make/load workspace, here in mode 1; w = getWorkspace(mode); if mode == 1:; # Show workspace that was created; w.Print(); ; # Show plot of cached integral values; hhcache = w.expensiveObjectCache().getObj(1); if hhcache:; ROOT.TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600); hhcache.createHistogram(""a"").Draw(); else:; ROOT.RooFit.Error(""rf903_numintcache"", ""Cached histogram is not existing in workspace""); sys.exit(); ; # Use pdf from workspace for generation and fitting; # -----------------------------------------------------------------------------------; ; # ROOT.This is always slow (need to find maximum function value; # empirically in 3D space); model = w[""model""]; d = model.generate({w[""x""], w[""y""], w[""z""]}, 1000); ; # ROOT.This is slow in mode 0, fast in mode 1; model.fitTo(d, Verbose=True, Timer=True, PrintLevel=-1); ; # Projection on x (always slow as 2D integral over Y, at fitted value of a; # is not cached); framex = w[""x""].frame(Title=""Projection of 3D model on X""); d.plotOn(framex); model.plotOn(framex); ; # Draw x projection on canvas; c = ROOT.TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8py.html:2407,cache,cached,2407,doc/master/rf903__numintcache_8py.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8py.html,1,['cache'],['cached']
Performance," ; (; ). Invokes goto dialog, and go to the specified line. ; Definition at line 754 of file TGTextEditor.cxx. ◆ HandleKey(). Bool_t TGTextEditor::HandleKey ; (; Event_t * ; event). overridevirtual . Keyboard event handler. ; Reimplemented from TGMainFrame.; Definition at line 672 of file TGTextEditor.cxx. ◆ HandleTimer(). Bool_t TGTextEditor::HandleTimer ; (; TTimer * ; t). overridevirtual . Handle timer event. ; Reimplemented from TObject.; Definition at line 863 of file TGTextEditor.cxx. ◆ InterruptMacro(). void TGTextEditor::InterruptMacro ; (; ). Interrupt execution of a macro. ; Definition at line 834 of file TGTextEditor.cxx. ◆ IsA(). TClass * TGTextEditor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGMainFrame.; Definition at line 93 of file TGTextEditor.h. ◆ IsSaved(). Int_t TGTextEditor::IsSaved ; (; ). Check if file has to be saved in case of modifications. ; Definition at line 596 of file TGTextEditor.cxx. ◆ LoadBuffer(). Bool_t TGTextEditor::LoadBuffer ; (; const char * ; buf). inline . Definition at line 67 of file TGTextEditor.h. ◆ LoadFile(). void TGTextEditor::LoadFile ; (; const char * ; fname = nullptr). Load a file into the editor. If fname is 0, a TGFileDialog will popup. ; Definition at line 497 of file TGTextEditor.cxx. ◆ PrintText(). void TGTextEditor::PrintText ; (; ). Open the print dialog and send current buffer to printer. ; Definition at line 618 of file TGTextEditor.cxx. ◆ ProcessMessage(). Bool_t TGTextEditor::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Handle menu and other command generated by the user. ; Reimplemented from TGCompositeFrame.; Definition at line 910 of file TGTextEditor.cxx. ◆ SaveFile(). void TGTextEditor::SaveFile ; (; const char * ; fname). Save the edited text in the file ""fname"". ; Definition at line 545 of file TGTextEditor.cxx. ◆ SaveFileAs(). Bool_t TGTextEditor::SaveFileAs ; (; ). Save the edi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:46731,Load,LoadBuffer,46731,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,1,['Load'],['LoadBuffer']
Performance," ; (; ). overridevirtual . Handle close button or when closed via window manager action. ; Reimplemented from TGMainFrame.; Definition at line 310 of file TProofProgressLog.cxx. ◆ DeclFileName(). static const char * TProofProgressLog::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TProofProgressLog.h. ◆ DoLog(). void TProofProgressLog::DoLog ; (; Bool_t ; grep = kFALSE). Display logs. ; 'grep' is set to kTRUE if it is invoked by pressing the 'Filter' button. ; Definition at line 388 of file TProofProgressLog.cxx. ◆ Init(). void TProofProgressLog::Init ; (; Int_t ; w = 700, . Int_t ; h = 600 . ). private . Init window frame for log messages. ; Definition at line 70 of file TProofProgressLog.cxx. ◆ IsA(). TClass * TProofProgressLog::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGTransientFrame.; Definition at line 93 of file TProofProgressLog.h. ◆ LoadBuffer(). void TProofProgressLog::LoadBuffer ; (; const char * ; buffer). Load a text buffer in the window. ; Definition at line 280 of file TProofProgressLog.cxx. ◆ LoadFile(). void TProofProgressLog::LoadFile ; (; const char * ; file). Load a file in the window. ; Definition at line 289 of file TProofProgressLog.cxx. ◆ LogMessage(). void TProofProgressLog::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Load/append a log msg in the log frame, if open. ; Definition at line 519 of file TProofProgressLog.cxx. ◆ NoLineEntry(). void TProofProgressLog::NoLineEntry ; (; ). Enable/disable the line number entry. ; Definition at line 599 of file TProofProgressLog.cxx. ◆ Popup(). void TProofProgressLog::Popup ; (; ). Show log window. ; Definition at line 263 of file TProofProgressLog.cxx. ◆ Rebuild(). void TProofProgressLog::Rebuild ; (; ). Rebuild the log info for a new entered session. ; Definition at line 635 of file TProofProgressLog.cxx. ◆ SaveToFile(). void TProofProgressLog::SaveT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:41038,Load,LoadBuffer,41038,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['Load'],['LoadBuffer']
Performance," ; (; ). protected . Set the TTree to be reloaded as soon as possible. ; In particular this is needed when adding a Friend.; If the tree has clones, copy them into the chain clone list so we can change their branch addresses when necessary.; This is to support the syntax: TTree* clone = chain->GetTree()->CloneTree(0);; cloneTObject * clone(const char *newname) const overrideDefinition RooChi2Var.h:9. Definition at line 1252 of file TChain.cxx. ◆ IsA(). TClass * TChain::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 173 of file TChain.h. ◆ LoadBaskets(). Int_t TChain::LoadBaskets ; (; Long64_t ; maxmemory). overridevirtual . Dummy function. ; It could be implemented and load all baskets of all trees in the chain. For the time being use TChain::Merge and TTree::LoadBasket on the resulting tree. ; Reimplemented from TTree.; Definition at line 1270 of file TChain.cxx. ◆ LoadTree(). Long64_t TChain::LoadTree ; (; Long64_t ; entry). overridevirtual . Find the tree which contains entry, and set it as the current tree. ; Returns the entry number in that tree.; The input argument entry is the entry serial number in the whole chain.; In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number is less than zero or too large for the chain.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or the TTree is missing from the file.; -5: Internal error, please report the circumstance when this happen as a ROOT issue.; -6: An error occurred within the notify callback. Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new sub-tree. See TNotifyLink for more information on the notification mechanism.; NoteThis is the only routine which sets the value of fTree to a non-zero pointer. ; Reimplemented from TTree.; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:80653,Load,LoadTree,80653,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['Load'],['LoadTree']
Performance," ; (; ); const. inline . De-duplicated pointer to this object's name. ; This can be used for fast name comparisons. like if (namePtr() == other.namePtr()). NoteTNamed::GetName() will return a pointer that's different for each object, but namePtr() always points to a unique instance. ; Definition at line 297 of file RooAbsData.h. ◆ numEntries(). Int_t RooAbsData::numEntries ; (; ); const. virtual . Return number of entries in dataset, i.e., count unweighted entries. ; Definition at line 323 of file RooAbsData.cxx. ◆ operator=(). RooAbsData & RooAbsData::operator= ; (; const RooAbsData & ; other). Definition at line 255 of file RooAbsData.cxx. ◆ optimizeReadingWithCaching(). void RooAbsData::optimizeReadingWithCaching ; (; RooAbsArg & ; arg, . const RooArgSet & ; cacheList, . const RooArgSet & ; keepObsList . ). protectedvirtual . Prepare dataset for use with cached constant terms listed in 'cacheList' of expression 'arg'. ; Deactivate tree branches for any dataset observable that is either not used at all, or is used exclusively by cached branch nodes. ; Definition at line 2262 of file RooAbsData.cxx. ◆ plotAsymOn(). RooPlot * RooAbsData::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Create and fill a histogram with the asymmetry N[+] - N[-] / ( N[+] + N[-] ), where N(+/-) is the number of data points with asymCat=+1 and asymCat=-1 as function of the frames variable. ; The asymmetry category 'asymCat' must have exactly 2 (or 3) states defined with index values +1,-1 (and 0); The plot range and the number of plot bins is determined by the parameters of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); The optional cut string expression can be used to select the events to be plotted. The cut specification may refer to any variable contained in the data set; The drawOptions are passed to the TH1::Draw() method ; Definition at line 1963 of file RooAbsData.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:52995,cache,cached,52995,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['cache'],['cached']
Performance," ; (; ); const. inlineoverridevirtual . Reimplemented from TEntryList.; Definition at line 77 of file TEntryListFromFile.h. ◆ GetN(). Long64_t TEntryListFromFile::GetN ; (; ); const. inlineoverridevirtual . Reimplemented from TEntryList.; Definition at line 75 of file TEntryListFromFile.h. ◆ GetTreeName(). const char * TEntryListFromFile::GetTreeName ; (; ); const. inlineoverridevirtual . Reimplemented from TEntryList.; Definition at line 76 of file TEntryListFromFile.h. ◆ GetTreeNumber(). Int_t TEntryListFromFile::GetTreeNumber ; (; ); const. inlineoverridevirtual . Reimplemented from TEntryList.; Definition at line 78 of file TEntryListFromFile.h. ◆ IsA(). TClass * TEntryListFromFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEntryList.; Definition at line 97 of file TEntryListFromFile.h. ◆ LoadList(). Int_t TEntryListFromFile::LoadList ; (; Int_t ; listnumber). virtual . Loads the list #listnumber This is the only function that can modify fCurrent and fFile data members. ; Definition at line 231 of file TEntryListFromFile.cxx. ◆ Merge(). Int_t TEntryListFromFile::Merge ; (; TCollection * ; list). inlineoverridevirtual . Merge this list with the lists from the collection. ; Reimplemented from TEntryList.; Definition at line 82 of file TEntryListFromFile.h. ◆ Next(). Long64_t TEntryListFromFile::Next ; (; ). overridevirtual . Returns the next entry in the list. ; Faster than GetEntry() ; Reimplemented from TEntryList.; Definition at line 184 of file TEntryListFromFile.cxx. ◆ operator=(). TEntryListFromFile & TEntryListFromFile::operator= ; (; const TEntryListFromFile & ; ). private . ◆ OptimizeStorage(). void TEntryListFromFile::OptimizeStorage ; (; ). inlineoverridevirtual . Checks if the array representation is more economical and if so, switches to it. ; Reimplemented from TEntryList.; Definition at line 85 of file TEntryListFromFile.h. ◆ Print(). void TEntryListFromFile::Print ; (; const Option_t * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListFromFile.html:26203,Load,Loads,26203,doc/master/classTEntryListFromFile.html,https://root.cern,https://root.cern/doc/master/classTEntryListFromFile.html,1,['Load'],['Loads']
Performance," ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file OptimizeConfigParameters.h. Member Data Documentation. ◆ fAlreadyTrainedParCombination. std::map< std::vector<Double_t> , Double_t> TMVA::OptimizeConfigParameters::fAlreadyTrainedParCombination. private . save parameters for which the FOM is already known (GA seems to evaluate the same parameters several times) ; Definition at line 86 of file OptimizeConfigParameters.h. ◆ fFOMType. TString TMVA::OptimizeConfigParameters::fFOMType. private . the FOM type (Separation, ROC integra.. whatever you implemented.. ; Definition at line 87 of file OptimizeConfigParameters.h. ◆ fFOMvsIter. std::vector<Float_t> TMVA::OptimizeConfigParameters::fFOMvsIter. private . graph showing the development of the Figure Of Merit values during the fit ; Definition at line 83 of file OptimizeConfigParameters.h. ◆ fLogger. MsgLogger* TMVA::OptimizeConfigParameters::fLogger. mutableprivate . ! message logger ; Definition at line 97 of file OptimizeConfigParameters.h. ◆ fMethod. MethodBase* const TMVA::OptimizeConfigParameters::fMethod. private . The MVA method to be evaluated. ; Definition at line 82 of file OptimizeConfigParameters.h. ◆ fMvaBkg. TH1D* TMVA::OptimizeConfigParameters::fMvaBkg. private . MVA distribution for bakgr. events, used for spline fit. ; Definition at line 90 of file OptimizeConfigParameters.h. ◆ fMvaBkgFineBin. TH1D* TMVA::OptimizeConfigParameters::fMvaBkgFineBin. private . MVA distribution for bakgr. events. ; Definition at line 93 of file OptimizeConfigParameters.h. ◆ fMvaSig. TH1D* TMVA::OptimizeConfigParameters::fMvaSig. private . MVA distribution for signal events, used for spline fit. ; Definition at line 89 of file OptimizeConfigParameters.h. ◆ fMvaSigFineBin. TH1D* TMVA::OptimizeConfigParameters::fMvaSigFineBin. private . MVA distribution for signal events. ; Definition at line 92 of file OptimizeConfigParameters.h. ◆ fNotDoneYet. Bool_t TMVA::OptimizeConfigParameters::fNotDone",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:11006,Optimiz,OptimizeConfigParameters,11006,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Optimiz'],['OptimizeConfigParameters']
Performance," ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset, . pRooArgList & ; compIntList, . Int_t & ; code, . const char * ; isetRangeName . ); const. protected . Check if this configuration was created before. ; Definition at line 477 of file RooAddModel.cxx. ◆ getGenerator(). Int_t RooAddModel::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Return pseud-code that indicates if all components can do internal generation (1) or not (0) ; Reimplemented from RooAbsPdf.; Definition at line 663 of file RooAddModel.cxx. ◆ getProjCache(). AddCacheElem * RooAddModel::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset in range 'rangeName'. ; If cache element does not exist, create and fill it on the fly. The cache contains suplemental normalization terms (in case not all added p.d.f.s have the same observables), projection integrals to calculated transformed fraction coefficients when a frozen reference frame is provided and projection integrals for similar transformations when a frozen reference range is provided. ; Definition at line 308 of file RooAddModel.cxx. ◆ IsA(). TClass * RooAddModel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 131 of file RooAddModel.h. ◆ isDirectGenSafe(). bool RooAddModel::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. overridevirtual . Direct generation is safe if all components say so. ; Reimplemented from RooAbsPdf.; Definition at line 646 of file RooAddModel.cxx. ◆ pdfList(). const RooArgList & RooAddModel::pdfList ; (; ); const. inline . Return list of component p.d.fs. ; Definition at line 66 of file RooAddModel.h. ◆ printMetaArgs(). void RooAddModel::printMetaArgs ; (; std::ostream & ; os);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:87648,cache,cache,87648,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['cache'],['cache']
Performance," ; (; const TGeoParallelWorld & ; ). protecteddelete . switch between different algorithm implementations . ◆ TGeoParallelWorld() [2/3]. TGeoParallelWorld::TGeoParallelWorld ; (; ). inline . Definition at line 62 of file TGeoParallelWorld.h. ◆ TGeoParallelWorld() [3/3]. TGeoParallelWorld::TGeoParallelWorld ; (; const char * ; name, . TGeoManager * ; mgr . ). Default constructor. ; Definition at line 61 of file TGeoParallelWorld.cxx. ◆ ~TGeoParallelWorld(). TGeoParallelWorld::~TGeoParallelWorld ; (; ). override . Destructor. ; Definition at line 76 of file TGeoParallelWorld.cxx. Member Function Documentation. ◆ AddNode(). void TGeoParallelWorld::AddNode ; (; const char * ; path). Add a node normally to this world. Overlapping nodes not allowed. ; Definition at line 92 of file TGeoParallelWorld.cxx. ◆ AddOverlap() [1/2]. void TGeoParallelWorld::AddOverlap ; (; const char * ; volname, . Bool_t ; activate = kTRUE . ). To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ; Better be done before misalignment ; Definition at line 120 of file TGeoParallelWorld.cxx. ◆ AddOverlap() [2/2]. void TGeoParallelWorld::AddOverlap ; (; TGeoVolume * ; vol, . Bool_t ; activate = kTRUE . ). To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ; Better be done before misalignment ; Definition at line 108 of file TGeoParallelWorld.cxx. ◆ BuildBVH(). void TGeoParallelWorld::BuildBVH ; (; ). Build the BVH acceleration structure. ; Definition at line 1315 of file TGeoParallelWorld.cxx. ◆ CheckBVH(). bool TGeoParallelWorld::CheckBVH ; (; void * ; bvh, . size_t ; expected_leaf_count . ); const. Check/validate the BVH acceleration structure. ; Definition at line 1261 of file TGeoParallelWorld.cxx. ◆ CheckOverlaps(). void TGeoParallelWorld::CheckOverlaps ; (; Double_t ; ovlp = 0.001). Check overlaps within a tol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:18436,optimiz,optimization,18436,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['optimiz'],['optimization']
Performance," ; (; std::ostream & ; os, . const char * ; indent . ). overridevirtual . Add details on cache contents when printing in tree mode. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 194 of file RooObjCacheManager.cxx. ◆ redirectServersHook(). bool RooObjCacheManager::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overridevirtual . Intercept server redirect calls. ; If clearOnRedirect was set, sterilize the cache (i.e. keep the structure but delete all contents). If not forward serverRedirect to cache elements ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 84 of file RooObjCacheManager.cxx. ◆ setClearOnRedirect(). void RooObjCacheManager::setClearOnRedirect ; (; bool ; flag). inline . Definition at line 50 of file RooObjCacheManager.h. ◆ sterilize(). void RooObjCacheManager::sterilize ; (; ). overridevirtual . Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 152 of file RooObjCacheManager.cxx. ◆ Streamer(). void RooObjCacheManager::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from RooCacheManager< RooAbsCacheElement >. ◆ StreamerNVirtual(). void RooObjCacheManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooObjCacheManager.h. Member Data Documentation. ◆ _allowOptimize. bool RooObjCacheManager::_allowOptimize. protected . Definition at line 55 of file RooObjCacheManager.h. ◆ _clearObsList. bool RooObjCacheManager::_clearObsList. staticprotected . Clear obslist on sterilize? ; Definition at line 60 of file RooObjCacheManager.h. ◆ _clearOnRedirect. bool RooObjCacheManager::_clearOnRedirect. protected . Definition at line 54 of file RooObjCacheManager.h. ◆ _optCacheModeSeen. bool RooObjCacheManager::_optCacheModeSeen. p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:11690,cache,cache,11690,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['cache'],['cache']
Performance," ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TEntryListBlock Class ReferenceTree Library. ; Used by TEntryList to store the entry numbers. ; There are 2 ways to represent entry numbers in a TEntryListBlock:. as bits, where passing entry numbers are assigned 1, not passing - 0; as a simple array of entry numbers; storing the numbers of entries that pass; storing the numbers of entries that don't pass. In both cases, a UShort_t* is used. The second option is better in case less than 1/16 or more than 15/16 of entries pass the selection, and the representation can be changed by calling OptimizeStorage() function. When the block is being filled, it's always stored as bits, and the OptimizeStorage() function is called by TEntryList when it starts filling the next block. If Enter() or Remove() is called after OptimizeStorage(), representation is again changed to 1). Operations on blocks (see also function comments). Merge() - adds all entries from one block to the other. If the first block uses array representation, it's changed to bits representation only if the total number of passing entries is still less than kBlockSize; GetEntry(n) - returns n-th non-zero entry.; Next() - return next non-zero entry. In case of representation 1), Next() is faster than GetEntry() . Definition at line 43 of file TEntryListBlock.h. Public Types; enum  { kBlockSize = 4000; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListBlock.html:1068,Optimiz,OptimizeStorage,1068,doc/master/classTEntryListBlock.html,https://root.cern,https://root.cern/doc/master/classTEntryListBlock.html,1,['Optimiz'],['OptimizeStorage']
Performance," ; 1220Long64_t TChain::GetReadEntry() const; 1221{; 1222 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 1223 // Make sure the element list is up to date; 1224 if (!TestBit(kProofUptodate)); 1225 Warning(""GetBranchStatus"", ""PROOF proxy not up-to-date:""; 1226 "" run TChain::SetProof(true, true) first"");; 1227 return fProofChain->GetReadEntry();; 1228 }; 1229 return TTree::GetReadEntry();; 1230}; 1231 ; 1232////////////////////////////////////////////////////////////////////////////////; 1233/// Return the chain weight.; 1234///; 1235/// By default the weight is the weight of the current tree.; 1236/// However, if the weight has been set in TChain::SetWeight(); 1237/// with the option ""global"", then that weight will be returned.; 1238///; 1239/// Warning: May set the current tree!; 1240 ; 1241Double_t TChain::GetWeight() const; 1242{; 1243 if (TestBit(kGlobalWeight)) {; 1244 return fWeight;; 1245 } else {; 1246 if (fTree) {; 1247 return fTree->GetWeight();; 1248 }; 1249 const_cast<TChain*>(this)->LoadTree(0);; 1250 if (fTree) {; 1251 return fTree->GetWeight();; 1252 }; 1253 return 0;; 1254 }; 1255}; 1256 ; 1257////////////////////////////////////////////////////////////////////////////////; 1258/// Move content to a new file. (NOT IMPLEMENTED for TChain); 1259bool TChain::InPlaceClone(TDirectory * /* new directory */, const char * /* options */); 1260{; 1261 Error(""InPlaceClone"", ""not implemented"");; 1262 return false;; 1263}; 1264 ; 1265////////////////////////////////////////////////////////////////////////////////; 1266/// Set the TTree to be reloaded as soon as possible. In particular this; 1267/// is needed when adding a Friend.; 1268///; 1269/// If the tree has clones, copy them into the chain; 1270/// clone list so we can change their branch addresses; 1271/// when necessary.; 1272///; 1273/// This is to support the syntax:; 1274/// ~~~ {.cpp}; 1275/// TTree* clone = chain->GetTree()->CloneTree(0);; 1276/// ~~~; 1277 ; 1278void TChain::InvalidateCurre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:45559,Load,LoadTree,45559,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['Load'],['LoadTree']
Performance," ; 160If the text precision is equal to 3, the text size doesn't depend on the pad's; 161dimensions. A given `textsize` value always generates the same absolute; 162size. The text size (`charheight`) is given in pixels:; 163 ; 164~~~ {.cpp}; 165 charheight = textsize;; 166~~~; 167 ; 168Note that to scale fonts to the same size as the old True Type package a; 169scale factor of `0.93376068` is apply to the text size before drawing.; 170 ; 171The text size of any class inheriting from `TAttText` can; 172be changed using the method `SetTextSize` and retrieved using the; 173method `GetTextSize`.; 174 ; 175\anchor ATTTEXT5; 176## Text Font and Precision; 177 ; 178The text font code is combination of the font number and the precision.; 179~~~ {.cpp}; 180 Text font code = 10*fontnumber + precision; 181~~~; 182Font numbers must be between 1 and 14.; 183 ; 184The precision can be:; 185 ; 186 - `precision = 0` fast hardware fonts (steps in the size); 187 - `precision = 1` scalable and rotatable hardware fonts (see below); 188 - `precision = 2` scalable and rotatable hardware fonts; 189 - `precision = 3` scalable and rotatable hardware fonts. Text size; 190 is given in pixels.; 191 ; 192The text font and precision of any class inheriting from `TAttText` can; 193be changed using the method `SetTextFont` and retrieved using the; 194method `GetTextFont`.; 195 ; 196\anchor ATTTEXT51; 197### Font quality and speed; 198 ; 199When precision 0 is used, only the original non-scaled X11 system fonts are; 200used. The fonts have a minimum (4) and maximum (37) size in pixels. These; 201fonts are fast and are of good quality. Their size varies with large steps; 202and they cannot be rotated.; 203Precision 1 and 2 fonts have a different behaviour depending if the; 204True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; 205quality scalable and rotatable fonts.; 206These days TTF fonts are rendered fast enough and can be used in all cases.; 207 ; 208\anchor ATTTEXT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8cxx_source.html:6074,scalab,scalable,6074,doc/master/TAttText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8cxx_source.html,3,['scalab'],['scalable']
Performance," ; 1702 TFunction *f = GetGlobalFunctions()->Get(decl);; 1703 if (f) return f;; 1704 ; 1705 Error(""GetGlobalFunction"",; 1706 ""\nDid not find matching TFunction <%s> with \""%s\""."",; 1707 function,params);; 1708 return nullptr;; 1709 }; 1710}; 1711 ; 1712////////////////////////////////////////////////////////////////////////////////; 1713/// Return pointer to global function by name. If proto != 0; 1714/// it will also resolve overloading. If load is true force reading; 1715/// of all currently defined global functions from CINT (more expensive).; 1716/// The proto string must be of the form: ""int, char*, float"".; 1717 ; 1718TFunction *TROOT::GetGlobalFunctionWithPrototype(const char *function,; 1719 const char *proto, Bool_t load); 1720{; 1721 if (!proto) {; 1722 R__LOCKGUARD(gROOTMutex);; 1723 return (TFunction *)GetListOfGlobalFunctions(load)->FindObject(function);; 1724 } else {; 1725 if (!fInterpreter); 1726 Fatal(""GetGlobalFunctionWithPrototype"", ""fInterpreter not initialized"");; 1727 ; 1728 R__LOCKGUARD(gROOTMutex);; 1729 TInterpreter::DeclId_t decl = gInterpreter->GetFunctionWithPrototype(nullptr,; 1730 function, proto);; 1731 ; 1732 if (!decl) return nullptr;; 1733 ; 1734 TFunction *f = GetGlobalFunctions()->Get(decl);; 1735 if (f) return f;; 1736 ; 1737 Error(""GetGlobalFunctionWithPrototype"",; 1738 ""\nDid not find matching TFunction <%s> with \""%s\""."",; 1739 function,proto);; 1740 return nullptr;; 1741 }; 1742}; 1743 ; 1744////////////////////////////////////////////////////////////////////////////////; 1745/// Return pointer to Geometry with name; 1746 ; 1747TObject *TROOT::GetGeometry(const char *name) const; 1748{; 1749 return GetListOfGeometries()->FindObject(name);; 1750}; 1751 ; 1752////////////////////////////////////////////////////////////////////////////////; 1753 ; 1754TCollection *TROOT::GetListOfEnums(Bool_t load /* = kTRUE */); 1755{; 1756 if(!fEnums.load()) {; 1757 R__LOCKGUARD(gROOTMutex);; 1758 // Test again just in case, another thread did",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:66319,load,load,66319,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,['load'],['load']
Performance," ; 193 if (!noLogo && !NoLogoOpt()) {; 194 Bool_t lite = (Bool_t) gEnv->GetValue(""Rint.WelcomeLite"", 0);; 195 PrintLogo(lite);; 196 }; 197 ; 198 // Explicitly load libMathCore it cannot be auto-loaded it when using one; 199 // of its freestanding functions. Once functions can trigger autoloading we; 200 // can get rid of this.; 201 if (!gClassTable->GetDict(""TRandom"")); 202 gSystem->Load(""libMathCore"");; 203 ; 204 if (!gInterpreter->HasPCMForLibrary(""std"")) {; 205 // Load some frequently used includes; 206 Int_t includes = gEnv->GetValue(""Rint.Includes"", 1);; 207 // When the interactive ROOT starts, it can automatically load some frequently; 208 // used includes. However, this introduces several overheads; 209 // -The initialisation takes more time; 210 // -Memory overhead when including <vector>; 211 // In $ROOTSYS/etc/system.rootrc, you can set the variable Rint.Includes to 0; 212 // to disable the loading of these includes at startup.; 213 // You can set the variable to 1 (default) to load only <iostream>, <string> and <DllImport.h>; 214 // You can set it to 2 to load in addition <vector> and <utility>; 215 // We strongly recommend setting the variable to 2 if your scripts include <vector>; 216 // and you execute your scripts multiple times.; 217 if (includes > 0) {; 218 TString code;; 219 code = ""#include <iostream>\n""; 220 ""#include <string>\n"" // for std::string std::iostream.; 221 ""#include <DllImport.h>\n"";// Defined R__EXTERN; 222 if (includes > 1) {; 223 code += ""#include <vector>\n""; 224 ""#include <utility>"";; 225 }; 226 ProcessLine(code, kTRUE);; 227 }; 228 }; 229 ; 230 // Load user functions; 231 const char *logon;; 232 logon = gEnv->GetValue(""Rint.Load"", (char*)nullptr);; 233 if (logon) {; 234 char *mac = gSystem->Which(TROOT::GetMacroPath(), logon, kReadPermission);; 235 if (mac); 236 ProcessLine(Form("".L %s"",logon), kTRUE);; 237 delete [] mac;; 238 }; 239 ; 240 // Execute logon macro; 241 ExecLogon();; 242 ; 243 // Save current interpreter context; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:7064,load,load,7064,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['load'],['load']
Performance," ; 2190 if (projDataNeededVars) delete projDataNeededVars ;; 2191 delete projectionCompList ;; 2192 plotVar->setVal(oldPlotVarVal); // reset the plot variable value to not disturb the original state; 2193 return frame;; 2194}; 2195 ; 2196 ; 2197//_____________________________________________________________________________; 2198// coverity[PASS_BY_VALUE]; 2199RooPlot* RooAbsReal::plotAsymOn(RooPlot *frame, const RooAbsCategoryLValue& asymCat, PlotOpt o) const; 2200 ; 2201{; 2202 // Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))); 2203 //; 2204 // Plot asymmetry of ourselves, defined as; 2205 //; 2206 // asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ); 2207 //; 2208 // on frame. If frame contains a histogram, all dimensions of the plotted; 2209 // asymmetry function that occur in the previously plotted dataset are projected via partial integration.; 2210 // Otherwise no projections are performed,; 2211 //; 2212 // The asymmetry function can be multiplied with an optional scale factor. The default projection; 2213 // behaviour can be overridden by supplying an optional set of dependents to project.; 2214 ; 2215 // Sanity checks; 2216 if (plotSanityChecks(frame)) return frame ;; 2217 ; 2218 // ProjDataVars is either all projData observables, or the user indicated subset of it; 2219 RooArgSet projDataVars ;; 2220 if (o.projData) {; 2221 if (o.projDataSet) {; 2222 std::unique_ptr<RooArgSet> tmp{o.projData->get()->selectCommon(*o.projDataSet)};; 2223 projDataVars.add(*tmp) ;; 2224 } else {; 2225 projDataVars.add(*o.projData->get()) ;; 2226 }; 2227 }; 2228 ; 2229 // Must depend on asymCat; 2230 if (!dependsOn(asymCat)) {; 2231 coutE(Plotting) << ""RooAbsReal::plotAsymOn("" << GetName(); 2232 << "") function doesn't depend on asymmetry category "" << asymCat.GetName() << std::endl ;; 2233 return frame ;; 2234 }; 2235 ; 2236 // asymCat must be a signCat; 2237 if (!asymCat.isSignType()) {; 2238 coutE(Plotting)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:97335,perform,performed,97335,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['perform'],['performed']
Performance," ; 2344////////////////////////////////////////////////////////////////////////////////; 2345/// Set a pointer to the read cache.; 2346///; 2347/// <b>This relinquishes ownership</b> of the previous cache, so if you do not; 2348/// already have a pointer to the previous cache (and there was a previous; 2349/// cache), you ought to retrieve (and delete it if needed) using:; 2350///; 2351/// TFileCacheRead *older = myfile->GetCacheRead();; 2352///; 2353/// The action specifies how to behave when detaching a cache from the; 2354/// the TFile. If set to (default) kDisconnect, the contents of the cache; 2355/// will be flushed when it is removed from the file, and it will disconnect; 2356/// the cache object from the file. In almost all cases, this is what you want.; 2357/// If you want to disconnect the cache temporarily from this tree and re-attach; 2358/// later to the same fil, you can set action to kDoNotDisconnect. This will allow; 2359/// things like prefetching to continue in the background while it is no longer the; 2360/// default cache for the TTree. Except for a few expert use cases, kDisconnect is; 2361/// likely the correct setting.; 2362///; 2363/// WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile.; 2364///; 2365 ; 2366void TFile::SetCacheRead(TFileCacheRead *cache, TObject* tree, ECacheAction action); 2367{; 2368 if (tree) {; 2369 if (cache) fCacheReadMap->Add(tree, cache);; 2370 else {; 2371 // The only addition to fCacheReadMap is via an interface that takes; 2372 // a TFileCacheRead* so the C-cast is safe.; 2373 TFileCacheRead* tpf = (TFileCacheRead *)fCacheReadMap->GetValue(tree);; 2374 fCacheReadMap->Remove(tree);; 2375 if (tpf && (tpf->GetFile() == this) && (action != kDoNotDisconnect)) tpf->SetFile(0, action);; 2376 }; 2377 }; 2378 if (cache) cache->SetFile(this, action);; 2379 else if (!tree && fCacheRead && (action != kDoNotDisconnect)) fCacheRead->SetFile(0, action);; 2380 // For backward compatibility the last Cache se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:83625,cache,cache,83625,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cache']
Performance," ; 982////////////////////////////////////////////////////////////////////////////////; 983/// Return a pointer to the TClass representing the container; 984 ; 985TClass *TGenCollectionProxy::GetCollectionClass() const; 986{; 987 return fClass ? fClass : Initialize(kFALSE)->fClass;; 988}; 989 ; 990////////////////////////////////////////////////////////////////////////////////; 991/// Return the type of collection see TClassEdit::ESTLType; 992 ; 993Int_t TGenCollectionProxy::GetCollectionType() const; 994{; 995 if (!fValue.load(std::memory_order_relaxed)) {; 996 Initialize(kFALSE);; 997 }; 998 return fSTL_type;; 999}; 1000 ; 1001////////////////////////////////////////////////////////////////////////////////; 1002/// Return the offset between two consecutive value_types (memory layout).; 1003 ; 1004ULong_t TGenCollectionProxy::GetIncrement() const {; 1005 if (!fValue.load(std::memory_order_relaxed)) {; 1006 Initialize(kFALSE);; 1007 }; 1008 return fValDiff;; 1009}; 1010 ; 1011////////////////////////////////////////////////////////////////////////////////; 1012/// Return the sizeof the collection object.; 1013 ; 1014UInt_t TGenCollectionProxy::Sizeof() const; 1015{; 1016 return fClass->Size();; 1017}; 1018 ; 1019////////////////////////////////////////////////////////////////////////////////; 1020/// Return true if the content is of type 'pointer to'; 1021 ; 1022Bool_t TGenCollectionProxy::HasPointers() const; 1023{; 1024 // Initialize proxy in case it hasn't been initialized yet; 1025 if( !fValue.load(std::memory_order_relaxed) ); 1026 Initialize(kFALSE);; 1027 ; 1028 // The content of a map and multimap is always a 'pair' and hence; 1029 // fPointers means ""Flag to indicate if containee has pointers (key or value)""; 1030 // so we need to ignore its value for map and multimap;; 1031 return fPointers && !(fSTL_type == ROOT::kSTLmap || fSTL_type == ROOT::kSTLmultimap ||; 1032 fSTL_type == ROOT::kSTLunorderedmap || fSTL_type == ROOT::kSTLunorderedmultimap);; 1033}; 103",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:32505,load,load,32505,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['load'],['load']
Performance," ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooUnblindCPAsymVar.html:33829,cache,cache,33829,root/html532/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html532/RooUnblindCPAsymVar.html,1,['cache'],['cache']
Performance," ; Definition at line 105 of file TTreeCache.h. ◆ fNbranches. Int_t TTreeCache::fNbranches {0}. protected . ! Number of branches in the cache ; Definition at line 44 of file TTreeCache.h. ◆ fNextClusterStart. Long64_t TTreeCache::fNextClusterStart {-1}. protected . ! End+1 of the cluster(s) where the current content was picked out ; Definition at line 43 of file TTreeCache.h. ◆ fNMissReadMiss. Int_t TTreeCache::fNMissReadMiss {0}. protected . Number of blocks read and not found in either cache. ; Definition at line 48 of file TTreeCache.h. ◆ fNMissReadOk. Int_t TTreeCache::fNMissReadOk {0}. protected . Number of blocks read, not found in the primary cache, and found in the secondary cache. ; Definition at line 46 of file TTreeCache.h. ◆ fNMissReadPref. Int_t TTreeCache::fNMissReadPref {0}. protected . Number of blocks read into the secondary (""miss"") cache. ; Definition at line 50 of file TTreeCache.h. ◆ fNReadMiss. Int_t TTreeCache::fNReadMiss {0}. protected . Number of blocks read and not found in the cache. ; Definition at line 47 of file TTreeCache.h. ◆ fNReadOk. Int_t TTreeCache::fNReadOk {0}. protected . Number of blocks read and found in the cache. ; Definition at line 45 of file TTreeCache.h. ◆ fNReadPref. Int_t TTreeCache::fNReadPref {0}. protected . Number of blocks that were prefetched. ; Definition at line 49 of file TTreeCache.h. ◆ fOneTime. bool TTreeCache::fOneTime {false}. protected . ! used in the learning phase ; Definition at line 57 of file TTreeCache.h. ◆ fOptimizeMisses. bool TTreeCache::fOptimizeMisses {false}. protected . ! true if we should optimize cache misses. ; Definition at line 72 of file TTreeCache.h. ◆ fPrefillType. EPrefillType TTreeCache::fPrefillType. protected . Whether a pre-filling is enabled (and if applicable which type) ; Definition at line 64 of file TTreeCache.h. ◆ fReadDirectionSet. bool TTreeCache::fReadDirectionSet {false}. protected . ! read direction established ; Definition at line 62 of file TTreeCache.h. ◆ fReverse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:55959,cache,cache,55959,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['cache'],['cache']
Performance," ; Definition at line 170 of file TProofLite.h. ◆ CleanupSandbox(). Int_t TProofLite::CleanupSandbox ; (; ). private . Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ; Definition at line 1821 of file TProofLite.cxx. ◆ ClearCache(). void TProofLite::ClearCache ; (; const char * ; file = 0). overridevirtual . Remove files from all file caches. ; Reimplemented from TProof.; Definition at line 1519 of file TProofLite.cxx. ◆ ClearDataSetCache(). void TProofLite::ClearDataSetCache ; (; const char * ; dataset = 0). overridevirtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented from TProof.; Definition at line 2282 of file TProofLite.cxx. ◆ CopyMacroToCache(). Int_t TProofLite::CopyMacroToCache ; (; const char * ; macro, . Int_t ; headerRequired = 0, . TSelector ** ; selector = 0, . Int_t ; opt = 0, . TList * ; wrks = 0 . ). protected . Copy a macro, and its possible associated .h[h] file, to the cache directory, from where the workers can get the file. ; If headerRequired is 1, return -1 in case the header is not found. If headerRequired is 0, try to copy header too. If headerRequired is -1, don't look for header, only copy macro. If the selector pionter is not 0, consider the macro to be a selector and try to load the selector and set it to the pointer. The mask 'opt' is an or of ESendFileOpt: kCpBin (0x8) Retrieve from the cache the binaries associated with the file kCp (0x10) Retrieve the files from the cache Return -1 in case of error, 0 otherwise. ; Definition at line 1593 of file TProofLite.cxx. ◆ CreateSandbox(). Int_t TProofLite::CreateSandbox ; (; ). private . Create the sandbox for this session. ; Definition at line 880 of file TProofLite.cxx. ◆ DeclFileName(). static const char * TProofLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 170 of file TProofLite.h. ◆ DrawSelect(). Long64_t TProofLite::DrawSelect ; (; TDSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:49522,cache,cache,49522,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['cache'],['cache']
Performance," ; Definition at line 81 of file TEnum.h. ◆ DeclFileName(). static const char * TEnum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TEnum.h. ◆ GetClass(). TClass * TEnum::GetClass ; (; ); const. inline . Definition at line 62 of file TEnum.h. ◆ GetConstant(). const TEnumConstant * TEnum::GetConstant ; (; const char * ; name); const. inline . Definition at line 64 of file TEnum.h. ◆ GetConstants(). const TSeqCollection * TEnum::GetConstants ; (; ); const. inline . Definition at line 63 of file TEnum.h. ◆ GetDeclId(). TDictionary::DeclId_t TEnum::GetDeclId ; (; ); const. Definition at line 146 of file TEnum.cxx. ◆ GetEnum() [1/2]. TEnum * TEnum::GetEnum ; (; const char * ; enumName, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Static function to retrieve enumerator from the ROOT's typesystem. ; It has no side effect, except when the load flag is true. In this case, the load of the library containing the scope of the enumerator is attempted. There are two top level code paths: the enumerator is scoped or isn't. If it is not, a lookup in the list of global enums is performed. If it is, two lookups are carried out for its scope: one in the list of classes and one in the list of protoclasses. If a scope with the desired name is found, the enum is searched. If the scope is not found, and the load flag is true, the aforementioned two steps are performed again after an autoload attempt with the name of the scope as key is tried out. If the interpreter lookup flag is false, the ListOfEnums objects are not treated as such, but rather as THashList objects. This prevents any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Definition at line 175 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTEnum.html:17304,load,load,17304,doc/v632/classTEnum.html,https://root.cern,https://root.cern/doc/v632/classTEnum.html,2,['load'],['load']
Performance," ; Example: ClassDef(UserClassName, 1) // class comments *SNIFF* _field1=value _field2=""string value""; Here SNIFF mark is important. After it all expressions like field=value are parsed One could use double quotes to code string values with spaces. Fields separated from each other with spaces ; Reimplemented in TRootSnifferFull.; Definition at line 700 of file TRootSniffer.cxx. ◆ ScanRoot(). void TRootSniffer::ScanRoot ; (; TRootSnifferScanRec & ; rec). protectedvirtual . scan complete ROOT objects hierarchy For the moment it includes objects in gROOT directory and list of canvases and files Also all registered objects are included. ; One could re-implement this method to provide alternative scan methods or to extend some collection kinds ; Definition at line 965 of file TRootSniffer.cxx. ◆ SetAutoLoad(). void TRootSniffer::SetAutoLoad ; (; const char * ; scripts = """"). When specified, _autoload attribute will be always add to top element of h.json/h.hml requests Used to instruct browser automatically load special code. ; Definition at line 482 of file TRootSniffer.cxx. ◆ SetCurrentCallArg(). THttpCallArg * TRootSniffer::SetCurrentCallArg ; (; THttpCallArg * ; arg). set current http arguments, which then used in different process methods For instance, if user authorized with some user name, depending from restrictions some objects will be invisible or user get full access to the element Returns previous argument which was set before ; Definition at line 435 of file TRootSniffer.cxx. ◆ SetItemField(). Bool_t TRootSniffer::SetItemField ; (; const char * ; fullname, . const char * ; name, . const char * ; value . ). Set field for specified item. ; Definition at line 1795 of file TRootSniffer.cxx. ◆ SetReadOnly(). void TRootSniffer::SetReadOnly ; (; Bool_t ; on = kTRUE). inline . When readonly on (default), sniffer is not allowed to change ROOT structures For instance, it is not allowed to read new objects from files. ; Definition at line 190 of file TRootSniffer.h. ◆ S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:38941,load,load,38941,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,1,['load'],['load']
Performance," ; Implements TVirtualGeoPainter.; Definition at line 2007 of file TGeoPainter.cxx. ◆ SetNsegments(). void TGeoPainter::SetNsegments ; (; Int_t ; nseg = 20). overridevirtual . Set number of segments to approximate circles. ; Implements TVirtualGeoPainter.; Definition at line 1992 of file TGeoPainter.cxx. ◆ SetRaytracing(). void TGeoPainter::SetRaytracing ; (; Bool_t ; flag = kTRUE). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 171 of file TGeoPainter.h. ◆ SetTopVisible(). void TGeoPainter::SetTopVisible ; (; Bool_t ; vis = kTRUE). overridevirtual . Set top geometry volume as visible. ; Implements TVirtualGeoPainter.; Definition at line 2050 of file TGeoPainter.cxx. ◆ SetTopVolume(). void TGeoPainter::SetTopVolume ; (; TGeoVolume * ; vol). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 173 of file TGeoPainter.h. ◆ SetVisLevel(). void TGeoPainter::SetVisLevel ; (; Int_t ; level = 3). overridevirtual . Set default level down to which visualization is performed. ; Implements TVirtualGeoPainter.; Definition at line 2024 of file TGeoPainter.cxx. ◆ SetVisOption(). void TGeoPainter::SetVisOption ; (; Int_t ; option = 0). overridevirtual . Set drawing mode : . option=0 (default) all nodes drawn down to vislevel; option=1 leaves and nodes at vislevel drawn; option=2 path is drawn . Implements TVirtualGeoPainter.; Definition at line 2064 of file TGeoPainter.cxx. ◆ ShapeDistancetoPrimitive(). Int_t TGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; shape, . Int_t ; numpoints, . Int_t ; px, . Int_t ; py . ); const. overridevirtual . Returns distance between point px,py on the pad an a shape. ; Implements TVirtualGeoPainter.; Definition at line 2105 of file TGeoPainter.cxx. ◆ Test(). void TGeoPainter::Test ; (; Int_t ; npoints, . Option_t * ; option . ). overridevirtual . Check time of finding ""Where am I"" for n points. ; Implements TVirtualGeoPainter.; Definition at line 2170 of file TGeoPainter.cxx. ◆ TestOve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:41183,perform,performed,41183,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['perform'],['performed']
Performance," ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedia.org/wiki/Gaussian_function). Figure 7: How to open the fit panel from the Canvas ""Tools"" menu; Here is what the fit panel looks like:. Figure 8: Fit Panel. Using this fit panel allows you to change the fit function and see the result after pressing ""Fit"". Now you should see the difference:. Figure 9: Distribution of ""fPosX"" leaf values, fitted with a Gaussian; The solid line is now passing through every data point. It fits (almost) perfectly the data!; . ‹ Histogramming; up; Compiling Your Code (also known as ACLiC) ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:2119,perform,perform,2119,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,1,['perform'],['perform']
Performance," ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; ROOT::v5::TF1Data The Parametric 1-D function data structure of v5::TF1; ROOT::v5::TFormula The formula base class f(x,y,z,par); ROOT::v5::TFormulaPrimitive The primitive formula; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassIndex.html:25046,cache,cached,25046,root/html604/ClassIndex.html,https://root.cern,https://root.cern/root/html604/ClassIndex.html,1,['cache'],['cached']
Performance, ; Reflex::NewDelFunctions ; Reflex::NullType ; Reflex::Object ; Reflex::PrivateClass ; Reflex::PrivateEnum ; Reflex::PrivateStruct ; Reflex::PrivateUnion ; Reflex::ProtectedClass ; Reflex::ProtectedEnum ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with norma,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:23426,cache,cache,23426,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,12,['cache'],"['cache', 'cached']"
Performance, ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec ; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract i,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:23619,cache,cached,23619,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,2,['cache'],['cached']
Performance, ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; Roo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:24663,cache,cached,24663,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['cache'],['cached']
Performance, ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim re,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:23590,cache,cached,23590,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['cache'],['cached']
Performance," ; Reimplemented from RooAbsMCStudyModule.; Definition at line 128 of file UpperLimitMCSModule.cxx. ◆ initializeInstance(). bool UpperLimitMCSModule::initializeInstance ; (; ). overridevirtual . Initialize module after attachment to RooMCStudy object. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 87 of file UpperLimitMCSModule.cxx. ◆ initializeRun(). bool UpperLimitMCSModule::initializeRun ; (; Int_t ; ). overridevirtual . Initialize module at beginning of RooCMStudy run. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 117 of file UpperLimitMCSModule.cxx. ◆ IsA(). TClass * RooStats::UpperLimitMCSModule::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsMCStudyModule.; Definition at line 54 of file UpperLimitMCSModule.h. ◆ processBetweenGenAndFit(). bool UpperLimitMCSModule::processBetweenGenAndFit ; (; Int_t ; ). overridevirtual . Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ; Any modifications to fit parameters will apply to next fit operation. Note that setConstant flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist ; Reimplemented from RooAbsMCStudyModule.; Definition at line 164 of file UpperLimitMCSModule.cxx. ◆ Streamer(). void RooStats::UpperLimitMCSModule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsMCStudyModule. ◆ StreamerNVirtual(). void RooStats::UpperLimitMCSModule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file UpperLimitMCSModule.h. Member Data Documentation. ◆ _cl. double RooStats::UpperLimitMCSModule::_cl. private . Definition at line 51 of file UpperLimitMCSModule.h. ◆ _data. RooDataSet* RooStats::UpperLimitMCSModule::_data. private . Summary dataset to store results. ; Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:17465,perform,performed,17465,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['perform'],['performed']
Performance," ; Reimplemented from TObject.; Definition at line 3683 of file TCling.cxx. ◆ RefreshClassInfo(). void TCling::RefreshClassInfo ; (; TClass * ; cl, . const clang::NamedDecl * ; def, . bool ; alias . ). Internal function. Actually do the update of the ClassInfo when seeing. ; Definition at line 6635 of file TCling.cxx. ◆ RegisterLoadedSharedLibrary(). void TCling::RegisterLoadedSharedLibrary ; (; const char * ; name). private . Register a new shared library name with the interpreter; add it to fSharedLibs. ; Definition at line 3415 of file TCling.cxx. ◆ RegisterModule(). void TCling::RegisterModule ; (; const char * ; modulename, . const char ** ; headers, . const char ** ; includePaths, . const char * ; payloadCode, . const char * ; fwdDeclsCode, . void(*)() ; triggerFunc, . const FwdDeclArgsToKeepCollection_t & ; fwdDeclsArgToSkip, . const char ** ; classesHeaders, . Bool_t ; lateRegistration = false, . Bool_t ; hasCxxModule = false . ). finalvirtual . Inject the module named ""modulename"" into cling; load all headers. ; headers is a 0-terminated array of header files to #include after loading the module. The module is searched for in all $LD_LIBRARY_PATH entries (or PATH% on Windows). This function gets called by the static initialization of dictionary libraries. The payload code is injected ""as is"" in the interpreter. The value of 'triggerFunc' is used to find the shared library location. ; Implements TInterpreter.; Definition at line 2010 of file TCling.cxx. ◆ RegisterPrebuiltModulePath(). bool TCling::RegisterPrebuiltModulePath ; (; const std::string & ; FullPath, . const std::string & ; ModuleMapName = ""module.modulemap"" . ); const. finalvirtual . Returnstrue if the module map was loaded, false on error or if the map was already loaded. ; Implements TInterpreter.; Definition at line 1906 of file TCling.cxx. ◆ RegisterRdictForLoadPCM(). void TCling::RegisterRdictForLoadPCM ; (; const std::string & ; pcmFileNameFullPath, . llvm::StringRef * ; pcmContent . ). priva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:124903,load,load,124903,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['load'],['load']
Performance, ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffProd.html:37304,cache,cache,37304,root/html526/RooEffProd.html,https://root.cern,https://root.cern/root/html526/RooEffProd.html,1,['cache'],['cache']
Performance, ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaxim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffProd.html:37686,cache,cache,37686,root/html528/RooEffProd.html,https://root.cern,https://root.cern/root/html528/RooEffProd.html,2,['cache'],['cache']
Performance," ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0494 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0212 sec ; Factory : Test method: PyKeras_LSTM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.202 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00597 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN; : ; TMVA_DNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: PyKeras_LSTM; : ; PyKeras_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:46112,perform,performance,46112,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['perform'],['performance']
Performance," ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0529 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0218 sec ; Factory : Test method: PyKeras_LSTM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.249 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00679 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN; : ; TMVA_DNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: PyKeras_LSTM; : ; PyKeras_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:53719,perform,performance,53719,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['perform'],['performance']
Performance," ; This class defines an interface to the cling C++ interpreter. ; Cling is a full ANSI compliant C++-11 interpreter based on clang/LLVM technology. ; Definition at line 102 of file TCling.h. Classes; struct  CharPtrCmp_t;  ; struct  MutexStateAndRecurseCount;  ; struct  MutexStateAndRecurseCountDelta;  ; class  SuspendAutoLoadingRAII;  ; class  TUniqueString;  . Public Member Functions;  TCling (const char *name, const char *title, const char *const argv[], void *interpLibHandle);  Initialize the cling interpreter interface. ;  ; virtual ~TCling ();  Destroy the interpreter interface. ;  ; virtual void AddAvailableIndentifiers (TSeqCollection &Idents) final;  ; void AddIncludePath (const char *path) final;  Add a directory to the list of directories in which the interpreter looks for include files. ;  ; void ApplyToInterpreterMutex (void *delta);  Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused. ;  ; Int_t AutoLoad (const char *classname, Bool_t knowDictNotLoaded=kFALSE) final;  Load library containing the specified class. ;  ; Int_t AutoLoad (const std::type_info &typeinfo, Bool_t knowDictNotLoaded=kFALSE) final;  Load library containing the specified class. ;  ; Int_t AutoParse (const char *cls) final;  Parse the headers relative to the class Returns 1 in case of success, 0 in case of failure. ;  ; ClassInfo_t * BaseClassInfo_ClassInfo (BaseClassInfo_t *) const final;  ; void BaseClassInfo_Delete (BaseClassInfo_t *bcinfo) const final;  ; BaseClassInfo_t * BaseClassInfo_Factory (ClassInfo_t *derived, ClassInfo_t *base) const final;  ; BaseClassInfo_t * BaseClassInfo_Factory (ClassInfo_t *info) const final;  ; const char * BaseClassInfo_FullName (BaseClassInfo_t *bcinfo) const final;  ; const char * BaseClassInfo_Name (BaseClassInfo_t *bcinfo) const final;  ; int BaseClassInfo_Next (BaseClassInfo_t *bcinfo) const final;  ; int BaseClassInfo_Next (BaseClassInfo_t *bcinfo, int onlyDirect) const final;  ; Longptr_t BaseClassInfo_Offset (BaseC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:1451,Load,Load,1451,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Load'],['Load']
Performance," ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 259 of file TExecutor.hxx. ◆ MapReduce() [4/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 282 of file TExecutor.hxx. ◆ MapReduce() [5/5]. template<class F , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F>. Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reducti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:18595,perform,performs,18595,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html,2,['perform'],['performs']
Performance," ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTEventIter::StopProcess(Bool_t abort); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tTEventIter::LoadDir(); voidTObject::MakeZombie(). private:. TTree*GetTrees(TDSetElement* elem); TTree*Load(TDSetElement* elem, Bool_t& localfile). Data Members; public:. enum TEventIter::EIterType { kData; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Long64_tTEventIter::fCurcurrent entry; TDSet*TEventIter::fDSetdata set over which to iterate; TDirectory*TEventIter::fDirdirectory containing the objects or the TTree; TDSetElement*TEventIter::fElemCurrent Element; Long64_tTEventIter::fElemCurcurrent entry for this element; Long64_tTEventIter::fElemFirstfirst entry to process for this element; Long64_tTEventIter::fElemNumnumber of entries to process for this element; TEntryList*TEventIter::fEntryList! entry list for processing; Long64_tTEventIter::fEntryListPos! current position in the entrylist; TEventList*TEventIter::fEventList! eventList for processing; Int_tTEventIte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEventIterTree.html:5572,Load,Load,5572,root/html534/TEventIterTree.html,https://root.cern,https://root.cern/root/html534/TEventIterTree.html,1,['Load'],['Load']
Performance," ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; std::vector< std::vector< Matrix_t > > fBiasUpdates;  The accumulation of the past Biases for performing updates. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ;  ; Scalar_t fRho;  The Rho constant used by the optimizer. ;  ; std::vector< std::vector< Matrix_t > > fWeightUpdates;  The accumulation of the past Weights for performing updates. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor1;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor2;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor1;  working tensor used to keep a temporary copy of weights or weight gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor2;  working tensor used to keep a temporary copy of weights or weight gradients ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:3532,optimiz,optimizer,3532,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['optimiz'],['optimizer']
Performance," ;  . Protected Member Functions;  TGeoParallelWorld (const TGeoParallelWorld &)=delete;  switch between different algorithm implementations ;  ; TGeoParallelWorld & operator= (const TGeoParallelWorld &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; AccelerationMode fAccMode = AccelerationMode::kVoxelFinder;  to keep the vector of primitive axis aligned bounding boxes ;  ; void * fBoundingBoxes = nullptr;  stores bounding boxes serving a quick safety candidates (to be used with the VoxelGrid and SafetyVoxelInfo) ;  ; void * fBVH = nullptr;  array of physical nodes ;  ; TGeoManager * fGeoManager;  ; Bool_t fIsClosed;  ; TGeoPhysicalNode * fLastState;  helper volume ;  ; TObjArray * fPaths;  ; TObjArray * fPhysical;  Last PN touched. ;  ; std::vector< unsigned int > fSafetyCandidateStore {};  A regular 3D cache layer for fast point-based safety lookups. ;  ; TGeoVoxelGrid< SafetyVoxelInfo > * fSafetyVoxelCache;  BVH helper structure for safety and navigation. ;  ; Bool_t fUseOverlaps;  ; TGeoVolume * fVolume;  Closed flag. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; TGeoPhysicalNode * FindNextBoundaryBVH (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundaryLoop (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the parallel world in a trivial loop version (for debugging) ;  ; TGeoPhysicalNode * FindNextBoundaryOrig (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:14175,cache,cache,14175,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['cache'],['cache']
Performance," ;  ; Bool_t cd (const char *path);  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry point in specified library. ;  ; virtual EAclicMode GetAclicMode () const;  AclicMode indicates whether the library should be built in debug mode or optimized. ;  ; virtual Int_t GetAclicProperties () const;  Return the ACLiC properties field. ;  ; void GetBeepDefaults (Int_t &freq, Int_t &duration) const;  ; virtual const char * GetBuildArch () const;  Return the build architecture. ;  ; virtual const char * GetBuildCompiler () const;  Return the build compiler. ;  ; virtual const char * GetBuildCompilerVersion () const;  Return the build compiler version. ;  ; virtual const char * GetBuildCompilerVersionStr () const;  Return the build compiler version identifier string. ;  ; virtual const char * GetBuildDir () const;  Return the path of the build directory. ;  ; virtual const char * GetBuildNode () const;  Return the build node name. ;  ; virtual void * GetDirPtr () const;  ; const char * GetErrorStr () const;  ; virtual const char * GetFlagsDebug () const;  Return the debug flags. ;  ; virtual const char * GetFlagsOpt () const;  Return the optimization flags. ;  ; virtual T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:15596,optimiz,optimized,15596,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['optimiz'],['optimized']
Performance," ;  ; Long64_t DrawSelect (const char *dsetname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Execute the specified drawing action on a data set which is stored on the master with name 'dsetname'. ;  ; virtual Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0);  Execute the specified drawing action on a data set (TDSet). ;  ; virtual Int_t Echo (const char *str);  Sends a string to master and workers and expect them to echo it back to the client via a message. ;  ; virtual Int_t Echo (const TObject *obj);  Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ;  ; Int_t EnablePackage (const char *package, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, const char *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, TList *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t Exec (const char *cmd, Bool_t plusMaster=kFALSE);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t Exec (const char *cmd, const char *ord, Bool_t logtomacro=kFALSE);  Send command to be executed on node of ordinal 'ord' (use ""0"" for master). ;  ; virtual Bool_t ExistsDataSet (const char *dataset);  Returns kTRUE if 'dataset' exists, kFALSE otherwise. ;  ; void Feedback (TList *objs);  Get list of feedback objects. ;  ; Long64_t Finalize (const char *queryref, Bool_t force=kFALSE);  Finalize query with reference ref. ;  ; Long64_t Finalize (Int_t query=-1, Bool_t force=kFALSE);  Finalize the qry-th query in fQueries. ;  ; TList * FindDataSets (const char *searchString, const char *optStr="""");  Find datasets, returns in a TList all found datasets",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:6935,load,loadopts,6935,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['load'],['loadopts']
Performance," ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; Optimisation interface; These functions allow RooFit to optimise a computation graph, to keep track of cached values, and to invalidate caches. . virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:21571,cache,cacheList,21571,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,['cache'],"['cacheList', 'cached']"
Performance, ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:1490,perform,perform,1490,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,1,['perform'],['perform']
Performance," ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:13692,load,load,13692,doc/v632/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html,1,['load'],['load']
Performance," ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TStreamerElement * fElement;  ! StreamerElement used for TBuffer read / write ;  ; Double32_t fMaximum;  Maximum value if leaf range is specified. ;  ; Double32_t fMinimum;  Minimum value if leaf range is specified. ;  ; Double32_t ** fPointer;  ! Address of pointer to data buffer ;  ; Double32_t * fValue;  ! Pointer to data buffer ;  ;  Protected Attributes inherited from TLeaf; TBranch * fBranch;  ! Pointer to supporting branch (we do not own the branch) ;  ; bool fIsRange;  (=true if leaf has a range, false otherwise). This is equivalent to being a 'leafcount'. For a TLeafElement the range information is actually store in the TBranchElement. ;  ; bool fIsUnsigned;  (=true if unsigned, false otherwise) ;  ; TLeaf * fLeafCount;  Pointer to Leaf count if variable length (we do not own the counter) ;  ; LeafCountValues * fLeafCountValues;  ! Cache of collection/array sizes ;  ; Int_t fLen;  Number of fixed length elements in the leaf's data. ;  ; Int_t fLenType;  Number of bytes for this data type. ;  ; Int_t fNdata;  ! Number of elements in fAddress data buffer. ;  ; Int_t fOffset;  Offset in ClonesArray object (if one) ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TLeaf; enum class  DeserializeType { ;   kInvalid = 0; , kExternal; , kDestructive = kExternal; , kInPlace; , ;   kZeroCopy. };  ; enum  EStatusBits { kIndirectAddress = (1ULL << ( 11 )); , kNewValue = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafD32.html:14726,Cache,Cache,14726,doc/master/classTLeafD32.html,https://root.cern,https://root.cern/doc/master/classTLeafD32.html,1,['Cache'],['Cache']
Performance," ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; Scalar_t GetRho () const;  ; std::vector< std::vector< Matrix_t > > & GetWeightUpdates ();  ; std::vector< Matrix_t > & GetWeightUpdatesAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; std::vector< std::vector< Matrix_t > > fBiasUpdates;  The accumulation of the past Biases for performing updates. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:2477,Perform,Performs,2477,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,2,"['Perform', 'optimiz']","['Performs', 'optimization']"
Performance," ;  ; virtual TClass * IsA () const;  ; void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for classifier -> overwrites base class function create specific class for TMultiLayerPerceptron ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read weights from stream since the MLP can not read from the stream, we 1st: write the weights to temporary file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  rebuild temporary textfile from xml weightfile and load this file into MLP ;  ; void SetHiddenLayer (TString hiddenlayer="""");  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  performs TMlpANN training available learning methods: ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:2064,load,load,2064,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,2,"['load', 'perform']","['load', 'performs']"
Performance," ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; virtual Bool_t StartSlaves (Bool_t attach=kFALSE);  Start up PROOF slaves. ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Member Functions;  TProofLite (const TProofLite &);  ; Int_t CleanupSandbox ();  Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ;  ; Int_t CreateSandbo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:38816,load,loaded,38816,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['load'],['loaded']
Performance," ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCachedPdf.h>. Inheritance diagram for RooCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCachedPdf() [1/4]. RooCachedPdf::RooCachedPdf ; (; ). inline . Definition at line 22 of file RooCachedPdf.h. ◆ RooCachedPdf() [2/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf, . const RooArgSet & ; cacheObs . ). Constructor taking name, title and function to be cached and fixed choice of variable to cache. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. If the fixed set of cache observables does not match the observables defined in the use context of the p.d.f the cache is still filled completely. Ee.g. when it is specified to cache x and p and only x is a observable in the given use context the cache histogram will store sampled values for all values of observable x and parameter p. In such a mode of operation the cache will also not be recalculated if the observable p changes ; Definition at line 66 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [3/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf . ). Constructor taking name, title and function to be cached. ; To control granularity of the binning of the cache histogram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:77331,cache,cacheObs,77331,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['cache'],['cacheObs']
Performance," ;  ;  ~TGeoPainter () override;  Default destructor. ;  ; void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys) override;  Add numpoints, numsegs, numpolys to the global 3D size. ;  ; TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *part) override;  Create a primary TGeoTrack. ;  ; void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE) override;  Average center of view of all painted tracklets and compute view box. ;  ; void BombTranslation (const Double_t *tr, Double_t *bombtr) override;  Get the new 'bombed' translation vector according current exploded view mode. ;  ; void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.) override;  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const override;  Check overlaps for the top volume of the geometry, within a limit OVLP. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) override;  Check current point in the geometry. ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) override;  Test for shape navigation methods. ;  ; Int_t CountNodes (TGeoVolume *vol, Int_t level) const;  Count number of visible nodes down to a given level. ;  ; Int_t CountVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:1566,load,loaded,1566,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,2,['load'],"['load', 'loaded']"
Performance," ;  CCacheElemNormalization set with for above integral ;  CGenSpec;  CRooAbsProxyRooAbsProxy is the abstact interface for proxy classes ;  ►CRooAbsRealRooAbsReal is the common abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLValueRooAbsRealLValue is the common abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:79347,cache,cached,79347,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['cache'],['cached']
Performance," ;  CTTensorBatchTTensorBatch ;  CTTensorBatchIteratorTTensorBatchIterator ;  CTTensorDataLoaderTTensorDataLoader ;  CTTensorDataLoader< AData, TReference< AReal > >;  CVGeneralLayerGeneric General Layer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:79674,perform,perform,79674,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['perform'],['perform']
Performance," <---> Output : variable 'm_bb'; : Input : variable 'm_wbb' <---> Output : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; Factory : Booking method: ␛[1mPyKeras␛[0m; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Loading Keras Model ; : Loaded model from file: model_higgs.h5; Factory : ␛[1mTrain all methods␛[0m; Factory : [dataset] : Create Transformation ""I"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <---> Output : variable 'm_jj'; : Input : variable 'm_jjj' <---> Output : variable 'm_jjj'; : Input : variable 'm_lv' <---> Output : variable 'm_lv'; : Input : variable 'm_jlv' <---> Output : variable 'm_jlv'; : Input : variable 'm_bb' <---> Output : variable 'm_bb'; : Input : variable 'm_wbb' <---> Output : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; TFHandler_Factory : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0318 0.65629 [ 0.15106 16.132 ]; : m_jjj: 1.0217 0.37420 [ 0.34247 8.9401 ]; : m_lv: 1.0507 0.16678 [ 0.26679 3.6823 ]; : m_jlv: 1.0161 0.40288 [ 0.38441 6.5831 ]; : m_bb: 0.97707 0.53961 [ 0.080986 8.2551 ]; : m_wbb: 1.0358 0.36856 [ 0.38503 6.4013 ]; : m_wwbb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:14581,Load,Loading,14581,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,2,['Load'],"['Loaded', 'Loading']"
Performance," << ""fitness. In such a case, it is recommended to broaden the search "" << Endl;; 1767 Log() << ""by increasing the population size (\""popSize\"") and to give the GA "" << Endl;; 1768 Log() << ""more time to find improvements by increasing the number of steps"" << Endl;; 1769 Log() << ""(\""nsteps\"")"" << Endl;; 1770 Log() << "" -> increase \""popSize\"" (at least >10 * number of variables)"" << Endl;; 1771 Log() << "" -> increase \""nsteps\"""" << Endl;; 1772 Log() << """" << Endl;; 1773 Log() << bold << ""Simulated Annealing (SA) algorithm:"" << resbold << Endl;; 1774 Log() << """" << Endl;; 1775 Log() << ""\""Increasing Adaptive\"" approach:"" << Endl;; 1776 Log() << """" << Endl;; 1777 Log() << ""The algorithm seeks local minima and explores their neighborhoods, while"" << Endl;; 1778 Log() << ""changing the ambient temperature depending on the number of failures"" << Endl;; 1779 Log() << ""in the previous steps. The performance can be improved by increasing"" << Endl;; 1780 Log() << ""the number of iteration steps (\""MaxCalls\""), or by adjusting the"" << Endl;; 1781 Log() << ""minimal temperature (\""MinTemperature\""). Manual adjustments of the"" << Endl;; 1782 Log() << ""speed of the temperature increase (\""TemperatureScale\"" and \""AdaptiveSpeed\"")"" << Endl;; 1783 Log() << ""to individual data sets should also help. Summary:"" << brk << Endl;; 1784 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1785 Log() << "" -> adjust \""MinTemperature\"""" << brk << Endl;; 1786 Log() << "" -> adjust \""TemperatureScale\"""" << brk << Endl;; 1787 Log() << "" -> adjust \""AdaptiveSpeed\"""" << Endl;; 1788 Log() << """" << Endl;; 1789 Log() << ""\""Decreasing Adaptive\"" approach:"" << Endl;; 1790 Log() << """" << Endl;; 1791 Log() << ""The algorithm calculates the initial temperature (based on the effect-"" << Endl;; 1792 Log() << ""iveness of large steps) and the multiplier that ensures to reach the"" << Endl;; 1793 Log() << ""minimal temperature with the requested number of iteration steps."" << Endl;; 1794 Log() << ""The performance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:70902,perform,performance,70902,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['perform'],['performance']
Performance," << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  . Public Member Functions;  TEveTrackPropagator (const char *n=""TEveTrackPropagator"", const char *t="""", TEveMagField *field=nullptr, Bool_t own_field=kTRUE);  Default constructor. ;  ;  ~TEveTrackPropagator () override;  Destructor. ;  ; void CheckReferenceCount (const TEveException &eh=""TEveElement::CheckReferenceCount "") override;  Check reference count - virtual from TEveElement. ;  ; void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE) override;  Element-change notification. ;  ; void FillPointSet (TEvePointSet *ps) const;  Reset ps and populate it with points in propagation cache. ;  ; Int_t GetCurrentPoint () const;  Get index of current point on track. ;  ; Double_t GetDelta () const;  ; Bool_t GetEditPathMarks () const;  ; Bool_t GetFitCluster2Ds () const;  ; Bool_t GetFitDaughters () const;  ; Bool_t GetFitDecay () const;  ; Bool_t GetFitLineSegments () const;  ; Bool_t GetFitReferences () const;  ; const std::vector< TEveVector4D > & GetLastPoints () const;  ; TEveVectorD GetMagField (Double_t x, Double_t y, Double_t z);  ; Double_t GetMaxAng () const;  ; Double_t GetMaxOrbs () const;  ; Double_t GetMaxR () const;  ; Double_t GetMaxStep () const;  ; Double_t GetMaxZ () const;  ; Double_t GetMinAng () const;  Get maximum step angle. ;  ; UChar_t GetProjTrackBreaking () const;  ; Bool_t GetRnrCluster2Ds () const;  ; Bool_t GetRnrDaughters () const;  ; Bool_t GetRnrDecay () const;  ; Bool_t GetRnrFV () const;  ; Bool_t GetRnrPTBMarkers () const;  ; Bool_t GetRnrReferences () const;  ; EStepper_e GetStepper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:3497,cache,cache,3497,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['cache'],['cache']
Performance," << ( 3 )); };  ;  Protected Member Functions inherited from TVirtualFitter;  TVirtualFitter (const TVirtualFitter &tvf);  copy constructor ;  ; TVirtualFitter & operator= (const TVirtualFitter &tvf);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualFitter; Double_t * fCache;  [fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words) ;  ; Int_t fCacheSize;  Size of the fCache array. ;  ; void(* fFCN )(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ; TMethodCall * fMethodCall;  Pointer to MethodCall in case of interpreted function. ;  ; Int_t fNpoints;  Number of points to fit. ;  ; TObject * fObjectFit;  Pointer to object being fitted. ;  ; Foption_t fOption;  Struct with the fit options. ;  ; Int_t fPointSize;  Number of words per point in the cache. ;  ; TObject * fUserFunc;  Pointer to user theoretical function (a TF1*) ;  ; Int_t fXfirst;  First bin on X axis. ;  ; Int_t fXlast;  Last bin on X axis. ;  ; Int_t fYfirst;  First bin on Y axis. ;  ; Int_t fYlast;  Last bin on Y axis. ;  ; Int_t fZfirst;  First bin on Z axis. ;  ; Int_t fZlast;  Last bin on Z axis. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFitter.h>. Inheritance diagram for TFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFitter() [1/2]. TFitter::TFitter ; (; const TFitter & ; ). private . ◆ TFitter() [2/2]. TFitter::TFitter ; (; Int_t ; maxpar = 25). Default constructor. ; Definition at line 39 of file TFitter.cxx. ◆ ~TFitter(). TFitter::~TFitter ; (; ). override . Default destructor. ; Definition at line 51 of file TFitter.cxx. Member Function Documentation. ◆ Chisquare(). Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:18223,cache,cache,18223,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,1,['cache'],['cache']
Performance," << ( 3 )); };  ;  Protected Member Functions inherited from TVirtualFitter;  TVirtualFitter (const TVirtualFitter &tvf);  copy constructor ;  ; TVirtualFitter & operator= (const TVirtualFitter &tvf);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualFitter; Double_t * fCache;  [fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words) ;  ; Int_t fCacheSize;  Size of the fCache array. ;  ; void(* fFCN )(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ; TMethodCall * fMethodCall;  Pointer to MethodCall in case of interpreted function. ;  ; Int_t fNpoints;  Number of points to fit. ;  ; TObject * fObjectFit;  Pointer to object being fitted. ;  ; Foption_t fOption;  Struct with the fit options. ;  ; Int_t fPointSize;  Number of words per point in the cache. ;  ; TObject * fUserFunc;  Pointer to user theoretical function (a TF1*) ;  ; Int_t fXfirst;  First bin on X axis. ;  ; Int_t fXlast;  Last bin on X axis. ;  ; Int_t fYfirst;  First bin on Y axis. ;  ; Int_t fYlast;  Last bin on Y axis. ;  ; Int_t fZfirst;  First bin on Z axis. ;  ; Int_t fZlast;  Last bin on Z axis. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFumili.h>. Inheritance diagram for TFumili:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFumili(). TFumili::TFumili ; (; Int_t ; maxpar = 25). Definition at line 129 of file TFumili.cxx. ◆ ~TFumili(). TFumili::~TFumili ; (; ). override . TFumili destructor. ; Definition at line 217 of file TFumili.cxx. Member Function Documentation. ◆ BuildArrays(). void TFumili::BuildArrays ; (; ). Allocates memory for internal arrays. ; Called by TFumili::TFumili ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:24953,cache,cache,24953,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['cache'],['cache']
Performance," << ( 3 )); };  ;  Protected Member Functions inherited from TVirtualFitter;  TVirtualFitter (const TVirtualFitter &tvf);  copy constructor ;  ; TVirtualFitter & operator= (const TVirtualFitter &tvf);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualFitter; Double_t * fCache;  [fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words) ;  ; Int_t fCacheSize;  Size of the fCache array. ;  ; void(* fFCN )(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ; TMethodCall * fMethodCall;  Pointer to MethodCall in case of interpreted function. ;  ; Int_t fNpoints;  Number of points to fit. ;  ; TObject * fObjectFit;  Pointer to object being fitted. ;  ; Foption_t fOption;  Struct with the fit options. ;  ; Int_t fPointSize;  Number of words per point in the cache. ;  ; TObject * fUserFunc;  Pointer to user theoretical function (a TF1*) ;  ; Int_t fXfirst;  First bin on X axis. ;  ; Int_t fXlast;  Last bin on X axis. ;  ; Int_t fYfirst;  First bin on Y axis. ;  ; Int_t fYlast;  Last bin on Y axis. ;  ; Int_t fZfirst;  First bin on Z axis. ;  ; Int_t fZlast;  Last bin on Z axis. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TLinearFitter.h>. Inheritance diagram for TLinearFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TLinearFitter() [1/5]. TLinearFitter::TLinearFitter ; (; ). default c-tor, input data is stored If you don't want to store the input data, run the function StoreData(kFALSE) after constructor ; Definition at line 228 of file TLinearFitter.cxx. ◆ TLinearFitter() [2/5]. TLinearFitter::TLinearFitter ; (; Int_t ; ndim, . const char * ; formula, . Option_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:30882,cache,cache,30882,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['cache'],['cache']
Performance," = """" );; 89 ; 90 // constructor to work without file; 91 Factory( TString theJobName, TString theOption = """" );; 92 ; 93 // default destructor; 94 virtual ~Factory();; 95 ; 96 // use TName::GetName and define correct name in constructor; 97 //virtual const char* GetName() const { return ""Factory""; }; 98 ; 99 ; 100 MethodBase* BookMethod( DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption = """" );; 101 MethodBase* BookMethod( DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption = """" );; 102 MethodBase* BookMethod( DataLoader *, TMVA::Types::EMVA /*theMethod*/,; 103 TString /*methodTitle*/,; 104 TString /*methodOption*/,; 105 TMVA::Types::EMVA /*theComposite*/,; 106 TString /*compositeOption = """"*/ ) { return nullptr; }; 107 ; 108 // optimize all booked methods (well, if desired by the method); 109 std::map<TString,Double_t> OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 110 void OptimizeAllMethodsForClassification(TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 111 void OptimizeAllMethodsForRegression (TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 112 ; 113 // training for all booked methods; 114 void TrainAllMethods ();; 115 void TrainAllMethodsForClassification( void ) { TrainAllMethods(); }; 116 void TrainAllMethodsForRegression ( void ) { TrainAllMethods(); }; 117 ; 118 // testing; 119 void TestAllMethods();; 120 ; 121 // performance evaluation; 122 void EvaluateAllMethods( void );; 123 void EvaluateAllVariables(DataLoader *loader, TString options = """" );; 124 ; 125 TH1F* EvaluateImportance( DataLoader *loader,VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption = """" );; 126 ; 127 // delete all methods and reset the method vector; 128 void DeleteAllMethods( void );; 129 ; 130 // accessors; 131 IMethod* GetMethod( const TString& datasetname, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:4244,Optimiz,OptimizeAllMethodsForClassification,4244,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['Optimiz'],['OptimizeAllMethodsForClassification']
Performance," = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Bool_tSetAlias(const char* aliasName, const char* aliasFormula); virtual voidSetAutoFlush(Long64_t autof = -30000000); virtual voidSetAutoSave(Long64_t autos = -300000000); virtual voidSetBasketSize(const char* bname, Int_t buffsize = 16000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr = 0); virtual Int_tSetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); virtual voidSetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); static voidSetBranchStyle(Int_t style = 1); virtual Int_tSetCacheEntryRange(Long64_t first, Long64_t last); virtual voidSetCacheLearnEntries(Int_t n = 10); virtual Int_tSetCacheSize(Long64_t cachesize = -1); virtual voidSetChainOffset(Long64_t offset = 0); virtual voidSetCircular(Long64_t maxEntries); virtual voidSetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999)MENU ; virtual voidSetDefaultEntryOffsetLen(Int_t newdefault, Bool_t updateExisting = kFALSE); virtual voidSetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Long64_tSetEntries(Long64_t n = -1); virtual voidSetEntryList(TEntryList* list, Option_t* opt = """"); virtual voidSetEstimate(Long64_t nentries = 1000000); virtual voidSetEventList(TEventList* list); virtual voidSetFileNumber(Int_t number = 0); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:26095,cache,cachesize,26095,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cachesize']
Performance," = """". UnsolRespProcResult ProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); We are here if an unsolicited response comes from a logical conn; The response comes in the form of an XrdClientMessage *, that must NOT be; destroyed after processing. It is destroyed by the first sender.; Remember that we are in a separate thread, since unsolicited; responses are asynchronous by nature. void PostMsg(Int_t type, const char* msg = 0); Post a message of type 'type' into the read messages queue.; If 'msg' is defined it is also added as TString.; This is used, for example, with kPROOF_FATAL to force the main thread; to mark this socket as bad, avoiding race condition when a worker; dies while in processing state. Bool_t IsServProofd(); Return kTRUE if the remote server is a 'proofd'. Int_t GetInterrupt(Bool_t& forward); Get latest interrupt level and reset it; if the interrupt has to be; propagated to lower stages forward will be kTRUE after the call. Int_t Flush(); Flush the asynchronous queue.; Typically called when a kHardInterrupt is received.; Returns number of bytes in flushed buffers. Bool_t Create(Bool_t attach = kFALSE); This method sends a request for creation of (or attachment to) a remote; server application. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); Send a raw buffer of specified length.; Use opt = kDontBlock to ask xproofd to push the message into the proofsrv.; (by default is appended to a queue waiting for a request from proofsrv).; Returns the number of bytes sent or -1 in case of error. Bool_t Ping(const char* ord = 0); Ping functionality: contact the server to check its vitality.; If external, the server waits for a reply from the server; Returns kTRUE if OK or kFALSE in case of error. void RemoteTouch(); Remote touch functionality: contact the server to proof our vitality.; No reply from server is expected. void CtrlC(); Interrupt the remote protocol instance. Used to propagate Ctrl-C.; No reply fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:15921,queue,queue,15921,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,2,['queue'],['queue']
Performance," = (1ULL << ( 13 )). };  ;  Protected Types inherited from TBufferFile; typedef std::vector< TStreamerInfo * > InfoList_t;  ;  Protected Types inherited from TBufferIO; enum  { kNullTag = 0; };  ;  Protected Types inherited from TBuffer; typedef std::vector< TVirtualArray * > CacheList_t;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBufferFile;  TBufferFile ();  ;  TBufferFile (const TBufferFile &)=delete;  not implemented ;  ; Int_t CheckByteCount (UInt_t startpos, UInt_t bcnt, const TClass *clss, const char *classname);  Check byte count with current buffer position. ;  ; void CheckCount (UInt_t offset) override;  Check if offset is not too large (< kMaxMapCount) when writing. ;  ; UInt_t CheckObject (UInt_t offset, const TClass *cl, Bool_t readClass=kFALSE);  Check for object in the read map. ;  ; void operator= (const TBufferFile &)=delete;  not implemented ;  ; void WriteObjectClass (const void *actualObjStart, const TClass *actualClass, Bool_t cacheReuse) override;  Write object to I/O buffer. ;  ;  Protected Member Functions inherited from TBufferIO;  TBufferIO ();  ;  TBufferIO (TBuffer::EMode mode);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  constructor ;  ; Long64_t GetObjectTag (const void *obj);  Returns tag for specified object from objects map (if exists) Returns 0 if object not included into objects map. ;  ;  Protected Member Functions inherited from TBuffer;  TBuffer ();  ;  TBuffer (const TBuffer &)=delete;  ; void operator= (const TBuffer &)=delete;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; Int_t Write (const char *name, Int_t opt, Int_t bufs) const override;  Write this object to the current directory. ;  ; Int_t Write (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:35745,cache,cacheReuse,35745,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['cache'],['cacheReuse']
Performance," = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TUnfold (const TH2 *hist_A, EHistMap histmap, ERegMode regmode=kRegModeSize, EConstraint constraint=kEConstraintArea);  Set up response matrix and regularisation scheme. ;  ;  TUnfold (void);  only for use by root streamer or derived classes ;  ;  ~TUnfold (void) override;  ; virtual Double_t DoUnfold (Double_t tau);  perform the unfolding for a given regularisation parameter tau ;  ; Double_t DoUnfold (Double_t tau, const TH1 *hist_y, Double_t scaleBias=0.0);  perform the unfolding for a given input and regularisation ;  ; void GetBias (TH1 *bias, const Int_t *binMap=nullptr) const;  get bias vector including bias scale ;  ; Double_t GetChi2A (void) const;  get χ2A contribution determined in recent unfolding ;  ; Double_t GetChi2L (void) const;  get χ2L contribution determined in recent unfolding ;  ; double GetDF (void) const;  return the effecive number of degrees of freedom See e.g. ;  ; void GetDXDY (TH2 *dxdy) const;  get matrix connecting input and output changes ;  ; void GetEmatrix (TH2 *ematrix, const Int_t *binMap=nullptr) const;  get output covariance matrix, possibly cumulated over several bins ;  ; Double_t GetEpsMatrix (void) const;  get numerical accuracy for Eigenvalue analysis when inverting matrices with rank problems ;  ; void GetFoldedOutput (TH1 *folded, const Int_t *binMap=nullptr) const;  get unfolding result on detector level ;  ; void GetInput (TH1 *inputData, const Int_t *binMap=nullptr) const;  Input vector of measurements. ;  ; void GetInputInverseEmatrix (TH2 *ematrix);  get inverse of the measurement's covariance matrix ;  ; void GetL (TH2 *l) const;  get matrix of regularisation conditions ;  ; virtual Double_t GetLcurv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:4147,perform,perform,4147,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['perform'],['perform']
Performance," = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TProof; enum  ESlaves { kAll; , kActive; , kUnique; , kAllUnique; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TProof; static Int_t AssertDataSet (TDSet *dset, TList *input, TDataSetManager *mgr, TString &emsg);  Make sure that dataset is in the form to be processed. ;  ; static void AssertMacroPath (const char *macro);  Make sure that the directory path contained by macro is in the macro path. ;  ; static Bool_t GetFileInCmd (const char *cmd, TString &fn);  Static method to extract the filename (if any) form a CINT command. ;  ; static Int_t GetInputData (TList *input, const char *cachedir, TString &emsg);  Get the input data from the file defined in the input list. ;  ; static Int_t SaveInputData (TQueryResult *qr, const char *cachedir, TString &emsg);  Save input data file from 'cachedir' into the sandbox or create a the file with input data objects. ;  ; static Int_t SendInputData (TQueryResult *qr, TProof *p, TString &emsg);  Send the input data file to the workers. ;  ; static void * SlaveStartupThread (void *arg);  ; static void SystemCmd (const char *cmd, Int_t fdout);  Exec system command 'cmd'. If fdout > -1, append the output to fdout. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:41584,cache,cachedir,41584,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,6,['cache'],['cachedir']
Performance," = (fBlim[ipar-1] - fAlim[ipar-1]) / Double_t(ncall-1);; 6771// main scanning loop over parameter IPAR; 6772L500:; 6773 for (icall = 1; icall <= nccall; ++icall) {; 6774 fU[ipar-1] = unext;; 6775 nparx = fNpar;; 6776 Eval(nparx, fGin, fnext, fU, 4); ++fNfcn;; 6777 ++nxypt;; 6778 fXpt[nxypt-1] = unext;; 6779 fYpt[nxypt-1] = fnext;; 6780 fChpt[nxypt-1] = '*';; 6781 if (fnext < fAmin) {; 6782 fAmin = fnext;; 6783 ubest = unext;; 6784 fCstatu = ""IMPROVED "";; 6785 }; 6786 unext += step;; 6787 }; 6788 fChpt[nccall] = 0;; 6789 ; 6790// finished with scan of parameter IPAR; 6791 fU[ipar-1] = ubest;; 6792 mnexin(fX);; 6793 if (fISW[4] >= 1); 6794 Printf(""%dSCAN OF PARAMETER NO. %d, %s""; 6795 ,fNewpag,ipar,(const char*)fCpnam[ipar-1]);; 6796 mnplot(fXpt, fYpt, fChpt, nxypt, fNpagwd, fNpagln);; 6797 goto L800;; 6798L700:; 6799 Printf("" REQUESTED RANGE OUTSIDE LIMITS FOR PARAMETER %d"",ipar);; 6800L800:; 6801 if (iparwd <= 0) goto L100;; 6802// finished with all parameters; 6803L900:; 6804 if (fISW[4] >= 0) mnprin(5, fAmin);; 6805}; 6806 ; 6807////////////////////////////////////////////////////////////////////////////////; 6808/// Performs a rough (but global) minimization by monte carlo search; 6809///; 6810/// Each time a new minimum is found, the search area is shifted; 6811/// to be centered at the best value. Random points are chosen; 6812/// uniformly over a hypercube determined by current step sizes.; 6813/// The Metropolis algorithm accepts a worse point with probability; 6814/// exp(-d/UP), where d is the degradation. Improved points; 6815/// are of course always accepted. Actual steps are random; 6816/// multiples of the nominal steps (DIRIN).; 6817 ; 6818void TMinuit::mnseek(); 6819{; 6820 /* Local variables */; 6821 Double_t dxdi, rnum, ftry, rnum1, rnum2, alpha;; 6822 Double_t flast, bar;; 6823 Int_t ipar, iext, j, ifail, iseed=0, nparx, istep, ib, mxfail, mxstep;; 6824 ; 6825 mxfail = Int_t(fWord7[0]);; 6826 if (mxfail <= 0) mxfail = fNpar*20 + 100;; 6827 mxstep =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:220425,Perform,Performs,220425,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['Perform'],['Performs']
Performance," = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8676 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an existing autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false: this is a user requested cache. cacheSize is used to size the cache. This cache should never be automatically adjusted.; Returns:; 0 size set, or existing autosized cache almost large enough. (cache was created if possible); -1 on error . Definition at line 8702 of file TTree.cxx. ◆ SetChainOffset(). virtual void TTree::SetChainOffset ; (; Long64_t ; offset = 0). inlinevirtual . Definition at line 609 of file TTree.h. ◆ SetCircular(). void TTree::SetCircular ; (; Long64_t ; maxEntries). virtual . Enable/Disable circularity for this tree. ; if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket per branch in memory. Note that when this function is called (maxEntries>0) the Tree must be empty or having only one basket per branch. if maxEntries <= 0 the tree circularity is disabled.; NOTE 1:; Circular Trees are interesting in online real time environments to store the results of the last maxEntries events. NOTE 2:; Calling SetCircular with maxEntries <= 0 is necessary before merging circular Trees that have been saved on files. NOTE 3:; SetCircular with maxEntries <= 0 is automatically called by TChain::Merge NOTE 4:; A circ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:208623,cache,cache,208623,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['cache'],['cache']
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Mon Dec 7 13:48:13 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:4206,perform,performed,4206,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,7,"['Load', 'cache', 'load', 'perform']","['Load', 'cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Mon Jul 4 15:23:19 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMath.html:4192,perform,performed,4192,root/html530/RooMath.html,https://root.cern,https://root.cern/root/html530/RooMath.html,7,"['Load', 'cache', 'load', 'perform']","['Load', 'cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Sat Oct 9 22:38:43 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMath.html:4192,perform,performed,4192,root/html528/RooMath.html,https://root.cern,https://root.cern/root/html528/RooMath.html,7,"['Load', 'cache', 'load', 'perform']","['Load', 'cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Thu Nov 3 20:08:36 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMath.html:4192,perform,performed,4192,root/html532/RooMath.html,https://root.cern,https://root.cern/root/html532/RooMath.html,7,"['Load', 'cache', 'load', 'perform']","['Load', 'cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = 0) const. protected:. voidTTree::AddClone(TTree*); virtual TBranch*BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, TClass* ptrClass, EDataType datatype, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BronchExec(const char* name, const char* classname, void* addobj, Bool_t isptrptr, Int_t bufsize, Int_t splitlevel); voidCheckBasket(TBranch* tb); Bool_tCheckBranch(TBranch* tb); virtual Int_tTTree::CheckBranchAddressType(TBranch* branch, TClass* ptrClass, EDataType datatype, Bool_t ptr); Bool_tCheckTable(const TString& table) const; TStringConvertTypeName(const TString& typeName); virtual TBasket*CreateBasket(TBranch* br); virtual voidCreateBranch(const TString& branchName, const TString& typeName); TStringCreateBranches(TSQLResult* rs); Bool_tCreateTable(const TString& table); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Long64_tTTree::GetCacheAutoSize(Bool_t withDefault = kFALSE) const; vector<Int_t>*GetColumnIndice(TBranch* branch); virtual TLeaf*TTree::GetLeafImpl(const char* branchname, const char* leafname); charTTree::GetNewlineValue(istream& inputStream); TTreeCache*TTree::GetReadCache(TFile* file, Bool_t create = kFALSE); voidTTree::ImportClusterRanges(TTree* fromtree); voidInit(); virtual voidTTree::KeepCircular(); voidTObject::MakeZombie(); voidTTree::MoveReadCache(TFile* src, TDirectory* dir); voidResetQuery(); Int_tTTree::SetBranchAddressImp(TBranch* branch, void* addr, TBranch** ptr); Int_tTTree::SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0). Data Members; public:. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeSQL.html:21047,cache,cacheSize,21047,root/html604/TTreeSQL.html,https://root.cern,https://root.cern/root/html604/TTreeSQL.html,1,['cache'],['cacheSize']
Performance," = 0) const. protected:. voidTTree::AddClone(TTree*); virtual TBranch*BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, TClass* ptrClass, EDataType datatype, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BronchExec(const char* name, const char* classname, void* addobj, Bool_t isptrptr, Int_t bufsize, Int_t splitlevel); voidCheckBasket(TBranch* tb); Bool_tCheckBranch(TBranch* tb); virtual Int_tTTree::CheckBranchAddressType(TBranch* branch, TClass* ptrClass, EDataType datatype, Bool_t ptr); Bool_tCheckTable(const TString& table) const; TStringConvertTypeName(const TString& typeName); virtual TBasket*CreateBasket(TBranch* br); virtual voidCreateBranch(const TString& branchName, const TString& typeName); TStringCreateBranches(TSQLResult* rs); Bool_tCreateTable(const TString& table); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Long64_tTTree::GetCacheAutoSize(Bool_t withDefault = kFALSE) const; vector<Int_t>*GetColumnIndice(TBranch* branch); virtual TLeaf*TTree::GetLeafImpl(const char* branchname, const char* leafname); charTTree::GetNewlineValue(istream& inputStream); TTreeCache*TTree::GetReadCache(TFile* file, Bool_t create = kFALSE); voidTTree::ImportClusterRanges(TTree* fromtree); voidInit(); virtual voidTTree::KeepCircular(); voidTObject::MakeZombie(); voidTTree::MoveReadCache(TFile* src, TDirectory* dir); voidResetQuery(); Int_tTTree::SetBranchAddressImp(TBranch* branch, void* addr, TBranch** ptr); voidTTree::SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0). Data Members; public:. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeSQL.html:20556,cache,cacheSize,20556,root/html534/TTreeSQL.html,https://root.cern,https://root.cern/root/html534/TTreeSQL.html,2,['cache'],['cacheSize']
Performance," = 0); Constructor: check PROOF and load selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:""); Draw the CPU speedup plot.; opt = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:8833,Perform,Perform,8833,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['Perform'],['Perform']
Performance," = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the caceh information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:28277,cache,caches,28277,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['cache'],['caches']
Performance," = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:32274,cache,caches,32274,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['cache'],['caches']
Performance," = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_texpectedEvents(const RooArgSet* nset) const; virtual Double_texpectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeextendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual RooDataHist*fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:11781,cache,cacheList,11781,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,4,['cache'],['cacheList']
Performance," = 0)MENU ; virtual Bool_tTTree::SetAlias(const char* aliasName, const char* aliasFormula); virtual voidTChain::SetAutoDelete(Bool_t autodel = kTRUE); virtual voidTTree::SetAutoFlush(Long64_t autof = -30000000); virtual voidTTree::SetAutoSave(Long64_t autos = -300000000); virtual voidTTree::SetBasketSize(const char* bname, Int_t buffsize = 16000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tTChain::SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); virtual Int_tTChain::SetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); virtual voidTChain::SetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); static voidTTree::SetBranchStyle(Int_t style = 1); virtual voidTTree::SetCacheEntryRange(Long64_t first, Long64_t last); virtual voidTTree::SetCacheLearnEntries(Int_t n = 10); virtual voidTChain::SetCacheSize(Long64_t cacheSize); virtual voidTTree::SetChainOffset(Long64_t offset = 0); virtual voidTTree::SetCircular(Long64_t maxEntries); virtual voidSetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999)MENU ; virtual voidTTree::SetDefaultEntryOffsetLen(Int_t newdefault, Bool_t updateExisting = kFALSE); virtual voidTChain::SetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Long64_tTTree::SetEntries(Long64_t n = -1); virtual voidSetEntryList(TEntryList* enlist, Option_t*); virtual voidTChain::SetEntryListFile(const char* filename = """", Option_t* opt = """"); virtual voidTTree::SetEstimate(Long64_t nentries = 1000000); virtual voidSetEventList(TEventList* evlist); virtual voidTTree::SetFileNumber(Int_t number = 0); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofChain.html:16689,cache,cacheSize,16689,root/html534/TProofChain.html,https://root.cern,https://root.cern/root/html534/TProofChain.html,1,['cache'],['cacheSize']
Performance," = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); virtual voidresetCache(); virtual voidsetArgStatus(const RooArgSet& set, Bool_t active). Data Members; public:. enum ErrorType { Poisson; SumW2; None; Auto; Expected; };; enum StorageType { Tree; Vector; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. TIterator*_cacheIter! Iterator over cached variables; RooArgSet_cachedVars! External variables cached with this data set; RooAbsDataStore*_dstoreData storage implementation; TIterator*_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>_ownedComponentsOwned external components; RooArgSet_varsDimensions of this data set; static RooAbsData::StorageTypedefaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void setDefaultStorageType(RooAbsData::StorageType s). void claimVars(RooAbsData* ). Bool_t releaseVars(RooAbsData* ); If return value is true variables can be deleted. ~RooAbsData(); Destructor. void convertToVectorStore(); Convert tree-based storage to vector-based storage. Bool_t changeObservableName(const char* from, const char* to). void fill(). Int_t numEntries() const. void reset(). const RooArgSet* get(Int_t index) const. void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Internal method -- Cache given set of functions with data. void resetCache(); Internal method -- Remov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:14211,cache,cached,14211,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,2,['cache'],['cached']
Performance," = 0; ev <100; ev++) {; Float_t sigmat, sigmas;; gRandom->Rannor(sigmat,sigmas);; Int_t ntrack = Int_t(600 + 600 *sigmat/120.);; Float_t random = gRandom->Rndm(1);; sprintf(etype,""type%d"",ev%5);; event->SetType(etype);; event->SetHeader(ev, 200, 960312, random);; event->SetNseg(Int_t(10*ntrack+20*sigmas));; event->SetNvertex(Int_t(1+20*gRandom->Rndm()));; event->SetFlag(UInt_t(random+0.5));; event->SetTemperature(random+20.);; for(UChar_t m = 0; m < 10; m++) {; event->SetMeasure(m, Int_t(gRandom->Gaus(m,m+1)));; }; // continued...; // fill the matrix; for(UChar_t i0 = 0; i0 < 4; i0++) {; for(UChar_t i1 = 0; i1 < 4; i1++) {; event->SetMatrix(i0,i1,gRandom->Gaus(i0*i1,1));; }; }; // create and fill the Track objects; for (Int_t t = 0; t < ntrack; t++) event->AddTrack(random);; t4.Fill(); // Fill the tree; event->Clear(); // Clear before reloading event; }; f.Write(); // Write the file header; t4.Print(); // Print the tree contents; }; 12.17.5 Reading the Tree; First, we check if the shared library with the class definitions is loaded. If not we load it. Then we read two branches, one for the number of tracks and one for the entire event. We check the number of tracks first, and if it meets our condition, we read the entire event. We show the fist entry that meets the condition.; void tree4r() {; // check if the event class is in the dictionary; // if it is not load the definition in libEvent.so; if (!TClassTable::GetDict(""Event"")) {; gSystem->Load(""$ROOTSYS/test/libEvent.so"");; }; // read the tree generated with tree4w. // note that we use ""new"" to create the TFile and TTree objects, because we; // want to keep these objects alive when we leave this function.; TFile *f = new TFile(""tree4.root"");; TTree *t4 = (TTree*)f->Get(""t4"");. // create a pointer to an event object for reading the branch values.; Event *event = new Event();; // get two branches and set the branch address; TBranch *bntrack = t4->GetBranch(""fNtrack"");; TBranch *branch = t4->GetBranch(""event_split"");;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:580411,load,loaded,580411,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayL64; Long64_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3L.html:56939,perform,performing,56939,doc/master/classTH3L.html,https://root.cern,https://root.cern/doc/master/classTH3L.html,2,['perform'],['performing']
Performance," = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from RooAbsDataStore; RooArgSet _cachedVars;  ; bool _doDirtyProp = true;  Switch do (de)activate dirty state propagation when loading a data point. ;  ; RooArgSet _vars;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooVectorDataStore.h>. Inheritance diagram for RooVectorDataStore:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooVectorDataStore() [1/6]. RooVectorDataStore::RooVectorDataStore ; (; ). Definition at line 59 of file RooVectorDataStore.cxx. ◆ RooVectorDataStore() [2/6]. RooVectorDataStore::RooVectorDataStore ; (; RooStringView ; name, . RooStringView ; title, . const RooArgSet & ; vars, . const char * ; wgtVarName = nullptr . ). Definition at line 68 of file RooVectorDataStore.cxx. ◆ RooVectorDataStore() [3/6]. RooVectorDataStore::RooVectorDataStore ; (; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:22390,load,loading,22390,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['load'],['loading']
Performance," = 10); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetErrorTolerance(Double_t t); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidSetForceSum(Bool_t flag); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidSetMaxIters(Int_t mi); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); voidRooAbsPdf::setNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNonCentralChiSquare.html:28572,cache,cache,28572,root/html530/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html530/RooNonCentralChiSquare.html,1,['cache'],['cache']
Performance," = HistFactory ; [#1] INFO:Integration -- RooRealIntegral::ctor(g_Int[x]) Constructing integral of function g over observables(x) with normalization () with range identifier <none>; [#1] INFO:Integration -- g: Observable x is suitable for analytical integration (if supported by p.d.f); [#1] INFO:Integration -- g: Function integrated observables (x) internally with code 1; [#1] INFO:Integration -- g: Observables (x) are analytically integrated with code 1; RooRealIntegral::g_Int[x][ Int gd[Ana](x) ] = 2.50663; Active Message streams; [0] MinLevel = PROGRESS Topic = Generation Minimization Plotting Fitting Integration LinkStateMgmt Eval Caching Optimization ObjectHandling InputArguments Tracing Contents DataHandling NumericIntegration FastEvaluations ; [1] MinLevel = INFO Topic = Minimization Plotting Fitting Integration Eval Caching ObjectHandling InputArguments DataHandling NumericIntegration ; [2] MinLevel = INFO Topic = HistFactory ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for f: using 0.1; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for m: using 2; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for p0: using 0.005; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for s: using 2; Minuit2Minimizer: Minimize with max-calls 2000 convergence for edm < 1 strategy 1; p0=0.01, ; prevFCN = 31.75882326 f=0.501, ; prev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:4830,Optimiz,Optimization,4830,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,2,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance," = ROOT.RooDataSet(""ds4"", ""ds4"", {icat, x}, Import=tree); ds4.Print(); ; # Import multiple RooDataSets into a RooDataSet; # ----------------------------------------------------------------------------------------; ; # Create three ROOT.RooDataSets in (y,z); dsA = ds2.reduce({x, y}, ""z<-5""); dsB = ds2.reduce({x, y}, ""abs(z)<5""); dsC = ds2.reduce({x, y}, ""z>5""); ; # Create a dataset that imports contents of all the above datasets mapped; # by index category c; dsABC = ROOT.RooDataSet(""dsABC"", ""dsABC"", {x, y}, Index=c, Import={""SampleA"": dsA, ""SampleB"": dsB, ""SampleC"": dsC}); ; dsABC.Print(); RooDataHist::dh[c,x] = 300 bins (2964 weights); RooDataHist::dh[c,x] = 300 bins (2964 weights); [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #7 because y cannot accommodate the value 13.3845; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #8 because y cannot accommodate the value 11.1861; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #12 because y cannot accommodate the value 13.7009; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds) Ignored 35 out-of-range events; RooDataSet::ds[x,y] = 65 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #7 because y cannot accommodate the value 13.3845; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #8 because z cannot accommodate the value 10; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #12 because y cannot accommodate the value 13.7009; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping ...; [#0] WARNING:DataHandling -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf401__importttreethx_8py.html:4174,load,loadValues,4174,doc/master/rf401__importttreethx_8py.html,https://root.cern,https://root.cern/doc/master/rf401__importttreethx_8py.html,1,['load'],['loadValues']
Performance," = ROOT::TMetaUtils::GetFileName(*cl, interp);; 1308 for (unsigned int i = 0; i < filename.length(); i++) {; 1309 if (filename[i] == '\\') filename[i] = '/';; 1310 }; 1311 dictStream << ""\"""" << filename << ""\"", "" << ROOT::TMetaUtils::GetLineNumber(cl) << "","" << std::endl; 1312 << "" ::ROOT::Internal::DefineBehavior((void*)nullptr,(void*)nullptr),"" << std::endl; 1313 << "" "";; 1314 ; 1315 if (Namespace__HasMethod(cl, ""Dictionary"", interp)) {; 1316 dictStream << ""&::"" << classname.c_str() << ""::Dictionary, "";; 1317 } else {; 1318 dictStream << ""&"" << mappedname.c_str() << ""_Dictionary, "";; 1319 }; 1320 ; 1321 dictStream << 0 << "");"" << std::endl; 1322 ; 1323 << "" return &instance;"" << std::endl; 1324 << "" }"" << std::endl; 1325 << "" // Insure that the inline function is _not_ optimized away by the compiler\n""; 1326 << "" ::ROOT::TGenericClassInfo *(*_R__UNIQUE_DICT_(InitFunctionKeeper))() = &GenerateInitInstance; "" << std::endl; 1327 << "" // Static variable to force the class initialization"" << std::endl; 1328 // must be one long line otherwise R__UseDummy does not work; 1329 << "" static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstance();""; 1330 << "" R__UseDummy(_R__UNIQUE_DICT_(Init));"" << std::endl;; 1331 ; 1332 if (!Namespace__HasMethod(cl, ""Dictionary"", interp)) {; 1333 dictStream << std::endl << "" // Dictionary for non-ClassDef classes"" << std::endl; 1334 << "" static TClass *"" << mappedname.c_str() << ""_Dictionary() {"" << std::endl; 1335 << "" return GenerateInitInstance()->GetClass();"" << std::endl; 1336 << "" }"" << std::endl << std::endl;; 1337 }; 1338 ; 1339 dictStream << "" }"" << std::endl;; 1340 while (nesting--) {; 1341 dictStream << ""}"" << std::endl;; 1342 }; 1343 dictStream << std::endl;; 1344}; 1345 ; 1346////////////////////////////////////////////////////////////////////////////////; 1347/// GrabIndex returns a static string (so use it or copy it immediately, do not; 1348/// call GrabIndex twice in the same expression) containing the si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:49646,optimiz,optimized,49646,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['optimiz'],['optimized']
Performance, = fBranchCount->GetCollectionProxy();; 2593 }; 2594 return fCollProxy;; 2595}; 2596 ; 2597////////////////////////////////////////////////////////////////////////////////; 2598/// Return a pointer to the current type of the data member corresponding to branch element.; 2599 ; 2600TClass* TBranchElement::GetCurrentClass(); 2601{; 2602 TClass* cl = fCurrentClass;; 2603 if (cl) {; 2604 return cl;; 2605 }; 2606 ; 2607 TStreamerInfo* brInfo = (TStreamerInfo*)GetInfoImp();; 2608 if (!brInfo) {; 2609 cl = TClass::GetClass(GetClassName());; 2610 R__ASSERT(cl && cl->GetCollectionProxy());; 2611 fCurrentClass = cl;; 2612 return cl;; 2613 }; 2614 TClass* motherCl = brInfo->GetClass();; 2615 if (motherCl->GetCollectionProxy()) {; 2616 cl = motherCl->GetCollectionProxy()->GetCollectionClass();; 2617 if (cl) {; 2618 fCurrentClass = cl;; 2619 }; 2620 return cl;; 2621 }; 2622 if (GetID() < 0 || GetID()>=brInfo->GetNelement()) {; 2623 return nullptr;; 2624 }; 2625 TStreamerElement* currentStreamerElement = brInfo->GetElement(GetID());; 2626 TDataMember* dm = (TDataMember*) motherCl->GetListOfDataMembers()->FindObject(currentStreamerElement->GetName());; 2627 ; 2628 TString newType;; 2629 if (!dm) {; 2630 // Either the class is not loaded or the data member is gone; 2631 if (!motherCl->IsLoaded()) {; 2632 TVirtualStreamerInfo* newInfo = motherCl->GetStreamerInfo();; 2633 if (newInfo != brInfo) {; 2634 TStreamerElement* newElems = (TStreamerElement*) newInfo->GetElements()->FindObject(currentStreamerElement->GetName());; 2635 if (newElems) {; 2636 if (newElems->GetClassPointer()); 2637 newType = newElems->GetClassPointer()->GetName();; 2638 else; 2639 newType = newElems->GetTypeName();; 2640 }; 2641 }; 2642 if (newType.Length()==0) {; 2643 if (currentStreamerElement->GetClassPointer()); 2644 newType = currentStreamerElement->GetClassPointer()->GetName();; 2645 else; 2646 newType = currentStreamerElement->GetTypeName();; 2647 }; 2648 }; 2649 } else {; 2650 newType = dm->GetTypeName();,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:93901,load,loaded,93901,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['load'],['loaded']
Performance," = fInfo;; 5673 if (fType == 41) {; 5674 if( fSplitLevel >= TTree::kSplitCollectionOfPointers && fBranchCount->fSTLtype == ROOT::kSTLvector) {; 5675 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionGetter;; 5676 } else {; 5677 TVirtualStreamerInfo *info = GetInfoImp();; 5678 if (GetParentClass() == info->GetClass()) {; 5679 if( fTargetClass.GetClassName()[0] && fBranchClass != fTargetClass ) {; 5680 originalClass = fBranchClass;; 5681 create = TStreamerInfoActions::TActionSequence::ConversionReadMemberWiseActionsViaProxyGetter;; 5682 } else {; 5683 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsViaProxyGetter;; 5684 }; 5685 } else if (GetCollectionProxy()) {; 5686 // Base class and embedded objects.; 5687 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionCreator;; 5688 }; 5689 }; 5690 } else if (fType == 31) {; 5691 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionGetter;; 5692 } else if (0<=fType && fType<=2) {; 5693 // Note: this still requires the ObjectWise sequence to not be optimized!; 5694 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsGetter;; 5695 } else if ( fType == 4 && !fNewIDs.empty()) {; 5696 localInfo = FindOnfileInfo(fClonesClass, fBranches);; 5697 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionCreator;; 5698 } else if ( fType == 3 && !fNewIDs.empty()) {; 5699 localInfo = FindOnfileInfo(fClonesClass, fBranches);; 5700 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionGetter;; 5701 }; 5702 ; 5703 if (create) {; 5704 SetActionSequence(originalClass, localInfo, create, fReadActionSequence);; 5705 }; 5706}; 5707 ; 5708////////////////////////////////////////////////////////////////////////////////; 5709/// Set the ReadLeaves pointer to execute the expected operations.; 5710 ; 5711void TBranchElement::SetReadLeavesPtr(); 5712{; 5713 if (TestBit(kDecomposedObj)) {; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:211874,optimiz,optimized,211874,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['optimiz'],['optimized']
Performance," = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; std::unique_ptr< RooDataSet > generate (RooAbsGenContext &context, const RooArgSet &whatVars, const RooDataSet *prototype, double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false, bool extended=false) const;  Internal method. ;  ; void logBatchComputationErrors (std::span< const double > &outputs, std::size_t begin) const;  Scan through outputs and fix+log all nans and negative values. ;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooArgSet &params, bool showConstants=false, const char *label="""", double xmin=0.65, double xmax=0.99, double ymax=0.95, const RooCmdArg *formatCmd=nullptr);  Add a text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:78178,cache,cache,78178,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['cache'],['cache']
Performance," = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:74115,Cache,Cache,74115,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['Cache'],['Cache']
Performance," = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given textsize value always generates the same absolute; size. The text size (charheight) is given in pixels:. charheight = textsize;. Note that to scale fonts to the same size as the old True Type package a; scale factor of 0.93376068 is apply to the text size before drawing. The text size of any class inheriting from TAttText can; be changed using the method SetTextSize and retrieved using the; method GetTextSize.; Text Font and Precision; The text font code is combination of the font number and the precision. Text font code = 10*fontnumber + precision. Font numbers must be between 1 and 14. The precision can be:; precision = 0 fast hardware fonts (steps in the size); precision = 1 scalable and rotatable hardware fonts (see below); precision = 2 scalable and rotatable hardware fonts; precision = 3 scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from TAttText can; be changed using the method SetTextFont and retrieved using the; method GetTextFont.; Font quality and speed; When precision 0 is used, only the original non-scaled system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts. However TTF are slow.; How to use True Type Fonts; One can activate the TTF by adding (or activating) the following line; in the .rootrc file:. Unix.*.Root.UseTTFonts: true. It is possible to check the TTF are in use in a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttText.html:5002,scalab,scalable,5002,root/html528/TAttText.html,https://root.cern,https://root.cern/root/html528/TAttText.html,18,['scalab'],['scalable']
Performance," = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. In the context of a tree (or a chain),; friendship means unrestricted access to the friends data. In this way; it is much like adding another branch to the tree without taking the risk; of damaging it. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38678,cache,cache,38678,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; voidRooSimultaneous::initialize(RooAbsCategoryLValue& inIndexCat, map<std::string,RooAbsPdf*> pdfMap); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:37396,optimiz,optimizeDirtyHook,37396,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,1,['optimiz'],['optimizeDirtyHook']
Performance," = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; TIterator*RooAbsCategory::typeIterator() const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tRooAbsCategoryLValue::volume(const char* rangeName) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSuperCategory.html:16628,cache,cache,16628,root/html526/RooSuperCategory.html,https://root.cern,https://root.cern/root/html526/RooSuperCategory.html,1,['cache'],['cache']
Performance," = selNodes->find(arg->GetName()) != nullptr;; 1488 static_cast<RooAbsReal*>(arg)->selectComp(select);; 1489 }; 1490}; 1491 ; 1492 ; 1493 ; 1494////////////////////////////////////////////////////////////////////////////////; 1495/// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; 1496/// will show a unit normalized curve in the frame variable, taken at the present value; 1497/// of other observables defined for this PDF.; 1498///; 1499/// \param[in] frame pointer to RooPlot; 1500/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; 1501///; 1502/// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1503/// show a projected curve integrated over all variables that were present in the shown; 1504/// dataset except for the one on the x-axis. The normalization of the curve will also; 1505/// be adjusted to the event count of the plotted dataset. An informational message; 1506/// will be printed for each projection step that is performed.; 1507///; 1508/// This function takes the following named arguments; 1509/// <table>; 1510/// <tr><th><th> Projection control; 1511/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1512/// in set from the projection, i.e. by not integrating over these.; 1513/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1514/// of the PDF at the current value of the category observable.; 1515///; 1516/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1517/// observable from the projection, i.e., by not integrating over all states of this category.; 1518/// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; 1519/// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; 1520///; 1521/// <tr><td>",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:61878,perform,performed,61878,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['perform'],['performed']
Performance," = std::function<void(unsigned)>;; 36 ; 37/// function signature for call-backs from the window clients; 38/// first argument is connection id, second is received data; 39using WebWindowDataCallback_t = std::function<void(unsigned, const std::string &)>;; 40 ; 41/// function signature for waiting call-backs; 42/// Such callback used when calling thread need to waits for some special data,; 43/// but wants to run application event loop; 44/// As argument, spent time in second will be provided; 45/// Waiting will be performed until function returns non-zero value; 46using WebWindowWaitFunc_t = std::function<int(double)>;; 47 ; 48class RFileDialog;; 49class RWebWindowsManager;; 50class RWebWindowWSHandler;; 51 ; 52class RWebWindow {; 53 ; 54 friend class RWebWindowsManager;; 55 friend class RWebWindowWSHandler;; 56 friend class RWebDisplayHandle;; 57 friend class RFileDialog;; 58 ; 59private:; 60 using timestamp_t = std::chrono::time_point<std::chrono::system_clock>;; 61 ; 62 struct QueueItem {; 63 int fChID{1}; ///<! channel; 64 bool fText{true}; ///<! is text data; 65 std::string fData; ///<! text or binary data; 66 QueueItem(int chid, bool txt, std::string &&data) : fChID(chid), fText(txt), fData(data) {}; 67 };; 68 ; 69 struct WebConn {; 70 unsigned fConnId{0}; ///<! connection id (unique inside the window); 71 bool fHeadlessMode{false}; ///<! indicate if connection represent batch job; 72 std::string fKey; ///<! key value supplied to the window (when exists); 73 int fKeyUsed{0}; ///<! key value used to verify connection; 74 std::string fNewKey; ///<! new key if connection request reload; 75 std::unique_ptr<RWebDisplayHandle> fDisplayHandle; ///<! handle assigned with started web display (when exists); 76 std::shared_ptr<THttpCallArg> fHold; ///<! request used to hold headless browser; 77 timestamp_t fSendStamp; ///<! last server operation, always used from window thread; 78 bool fActive{false}; ///<! flag indicates if connection is active; 79 unsigned fWSId{0}; //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:2272,Queue,QueueItem,2272,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['Queue'],['QueueItem']
Performance," = std::function<void(unsigned)>;; 38 ; 39/// function signature for call-backs from the window clients; 40/// first argument is connection id, second is received data; 41using WebWindowDataCallback_t = std::function<void(unsigned, const std::string &)>;; 42 ; 43/// function signature for waiting call-backs; 44/// Such callback used when calling thread need to waits for some special data,; 45/// but wants to run application event loop; 46/// As argument, spent time in second will be provided; 47/// Waiting will be performed until function returns non-zero value; 48using WebWindowWaitFunc_t = std::function<int(double)>;; 49 ; 50class RFileDialog;; 51class RWebWindowsManager;; 52class RWebWindowWSHandler;; 53 ; 54class RWebWindow {; 55 ; 56 friend class RWebWindowsManager;; 57 friend class RWebWindowWSHandler;; 58 friend class RWebDisplayHandle;; 59 friend class RFileDialog;; 60 ; 61private:; 62 using timestamp_t = std::chrono::time_point<std::chrono::system_clock>;; 63 ; 64 struct QueueItem {; 65 int fChID{1}; ///<! channel; 66 bool fText{true}; ///<! is text data; 67 std::string fData; ///<! text or binary data; 68 QueueItem(int chid, bool txt, std::string &&data) : fChID(chid), fText(txt), fData(data) {}; 69 };; 70 ; 71 struct WebConn {; 72 unsigned fConnId{0}; ///<! connection id (unique inside the window); 73 bool fHeadlessMode{false}; ///<! indicate if connection represent batch job; 74 bool fWasFirst{false}; ///<! indicate if this was first connection, will be reinjected also on first place; 75 std::string fKey; ///<! key value supplied to the window (when exists); 76 int fKeyUsed{0}; ///<! key value used to verify connection; 77 std::string fNewKey; ///<! new key if connection request reload; 78 std::unique_ptr<RWebDisplayHandle> fDisplayHandle; ///<! handle assigned with started web display (when exists); 79 std::shared_ptr<THttpCallArg> fHold; ///<! request used to hold headless browser; 80 timestamp_t fSendStamp; ///<! last server operation, always used fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:2309,Queue,QueueItem,2309,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['Queue'],['QueueItem']
Performance," > &select);  Divide target by the source, element-by-element only where select[i] != 0.0. ;  ; template<class Element > ; TMatrixT< Element > & ElementMult (TMatrixT< Element > &target, const TMatrixT< Element > &source);  Multiply target by the source, element-by-element. ;  ; template<class Element > ; TMatrixT< Element > & ElementMult (TMatrixT< Element > &target, const TMatrixTSym< Element > &source);  Multiply target by the source, element-by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source);  Multiply target by the source, element-by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source, const TVectorT< Element > &select);  Multiply target by the source, element-by-element only where select[i] != 0.0. ;  ; template<class Element1 , class Element2 , class Element3 > ; Element1 Mult (const TVectorT< Element1 > &v1, const TMatrixT< Element2 > &m, const TVectorT< Element3 > &v2);  Perform v1 * M * v2, a scalar result. ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > ope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:6584,Perform,Perform,6584,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['Perform'],['Perform']
Performance," > & operator= (const TMatrixTSym< Element2 > &source);  ; TMatrixTSym< Element > & operator= (const TMatrixTSymLazy< Element > &source);  ; TMatrixTSym< Element > & operator= (Element val);  Assign val to every element of the matrix. ;  ; TMatrixTRow< Element > operator[] (Int_t rown);  Access row a_i where i=rown. ;  ; const TMatrixTRow_const< Element > operator[] (Int_t rown) const;  ; void Plus (const TMatrixTSym< Element > &a, const TMatrixTSym< Element > &b);  Symmetric matrix summation. Replace this matrix with C such that C = A + B. ;  ; TMatrixTBase< Element > & Randomize (Element alpha, Element beta, Double_t &seed) override;  randomize matrix element values but keep matrix symmetric ;  ; virtual TMatrixTSym< Element > & RandomizePD (Element alpha, Element beta, Double_t &seed);  randomize matrix element values but keep matrix symmetric positive definite ;  ; TMatrixTSym< Element > & Rank1Update (const TVectorT< Element > &v, Element alpha=1.0);  Perform a rank 1 operation on the matrix: A += alpha * v * v^T. ;  ; TMatrixTBase< Element > & ResizeTo (const TMatrixTSym< Element > &m);  ; TMatrixTBase< Element > & ResizeTo (Int_t nrows, Int_t ncols, Int_t=-1) override;  Set size of the matrix to nrows x ncols New dynamic elements are created, the overlapping part of the old ones are copied to the new structures, then the old elements are deleted. ;  ; TMatrixTBase< Element > & ResizeTo (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t=-1) override;  Set size of the matrix to [row_lwb:row_upb] x [col_lwb:col_upb] New dynamic elements are created, the overlapping part of the old ones are copied to the new structures, then the old elements are deleted. ;  ; TMatrixTBase< Element > & SetColIndexArray (Int_t *) override;  ; void SetElement (Int_t rown, Int_t coln, Element val);  Efficiently sets element (rown,coln) equal to val Index bound checks can be deactivated by defining NDEBUG. ;  ; TMatrixTBase< Element > & SetMatrixArray (const Element *d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSym.html:6586,Perform,Perform,6586,doc/master/classTMatrixTSym.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html,1,['Perform'],['Perform']
Performance," >, RooCacheManager<vector<Double_t> >. Function Members (Methods); public:. RooCacheManager<vector<double,allocator<double> > >(Int_t maxSize = 10); RooCacheManager<vector<double,allocator<double> > >(RooAbsArg* owner, Int_t maxSize = 10); RooCacheManager<vector<double,allocator<double> > >(const RooCacheManager<vector<double,allocator<double> > >& other, RooAbsArg* owner = 0); virtual~RooCacheManager<vector<double,allocator<double> > >(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); vector<double,allocator<double> >*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(vector<double,allocator<double> >&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<vector<double,allocator<double> > >&operator=(const RooCacheManager<vector<double,allocator<double> > >&); virtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_vector_double___.html:2627,optimiz,optimizeCacheMode,2627,root/html526/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_vector_double___.html,1,['optimiz'],['optimizeCacheMode']
Performance," A ROOT file’s StreamerInfolist contains the description of all versions of all classes in the file. When a file is opened the StreamerInfois read into memory and it provides enough information to make the file browsable. The TStreamerInfoenables us to recreate a header file for the class in case the compiled class is not available. This is done with the TFile::MakeProject method. It creates a directory with the header files for the named classes and a makefile to compile a shared library with the class definitions.; 11.5.9 Example: MakeProject; To explain the details, we use the example of the ATLFast project that is a fast simulation for the ATLAS experiment. The complete source for ATLFast can be down loaded at ftp://root.cern.ch/root/atlfast.tar.gz. Once we compile and run ATLFast we get a ROOT file called atlfast.root, containing the ATLFast objects. When we open the file, we get a warning that the file contains classes that are not in the dictionary. This is correct since we did not load the class definitions.; root[] TFile f(""atlfast.root""); Warning in <TClass::TClass>: no dictionary for class TMCParticle is available; Warning in <TClass::TClass>: no dictionary for class ATLFMuon available; We can see the StreamerInfofor the classes:; root[] f.ShowStreamerInfo(); ...; StreamerInfo for class: ATLFMuon, version=1; BASE TObject offset= 0 type=66 Basic ROOT object; BASE TAtt3D offset= 0 type= 0 3D attributes; Int_t m_KFcode offset= 0 type= 3 Muon KF-code; Int_t m_MCParticle offset= 0 type= 3 Muon position in MCParticles list; Int_t m_KFmother offset= 0 type= 3 Muon mother KF-code; Int_t m_UseFlag offset= 0 type= 3 Muon energy usage flag; Int_t m_Isolated offset= 0 type= 3 Muon isolation (1 for isolated); Float_t m_Eta offset= 0 type= 5 Eta coordinate; Float_t m_Phi offset= 0 type= 5 Phi coordinate; Float_t m_PT offset= 0 type= 5 Transverse energy; Int_t m_Trigger offset= 0 type= 3 Result of trigger...; However, when we try to use a specific class we get a warning ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:506634,load,load,506634,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['load']
Performance," AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TF1*func; RooListProxyolist; RooListProxyplist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTFnBinding.html:31742,cache,cache,31742,root/html526/RooTFnBinding.html,https://root.cern,https://root.cern/root/html526/RooTFnBinding.html,2,['cache'],['cache']
Performance," ADirtyDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped under key 'key'.Definition RooAbsArg.cxx:275; RooAbsArg::compileForNormSetvirtual std::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) constDefinition RooAbsArg.cxx:2528; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::getAttributebool getAttribute(const Text_t *name) constCheck if a named attribute is set. By default, all attributes are unset.Definition RooAbsArg.cxx:245; RooAbsArg::getVariablesRooFit::OwningPtr< RooArgSet > getVariables(bool stripDisconnected=true) constReturn RooArgSet with all variables (tree leaf nodes of expression tree)Definition RooAbsArg.cxx:2154; RooAbsArg::getCacheRooAbsCache * getCache(Int_t index) constReturn registered cache object by index.Definition RooAbsArg.cxx:2145; RooAbsArg::clientsconst RefCountList_t & clients() constList of all clients of this object.Definition RooAbsArg.h:166; RooAbsArg::isValueDirtybool isValueDirty() constDefinition RooAbsArg.h:393; RooAbsArg::setProxyNormSetvoid setProxyNormSet(const RooArgSet *nset)Forward a change in the cached normalization argset to all the registered proxies.Definition RooAbsArg.cxx:1468; RooAbsArg::branchNodeServerListvoid branchNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Streamer facility.Definition RooAbsArg.h:91; RooAbsArg::_serverListRefCountList_t _serverListDefinition RooAbsArg.h:606; RooAbsArg::numCachesInt_t numCaches() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:137904,cache,cache,137904,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['cache'],['cache']
Performance," About Previous Developers. The following people have been working on ROOT for some time in their career and ROOT would not be what it is without their contributions:; Andrei Gheata; Andrei works since 2001 in the offline group of the ALICE experiment. He is an experimental nuclear physicist who worked before ALICE on data analysis for heavy-ion experiments in emulsions. In 2000 he started collaborating with the ROOT project and implemented the TreeViewer interface. Andrei is the main developer of the ROOT geometry package. He integrated the geometry in the Virtual Monte Carlo framework by developing interfaces for the GEANT3, GEANT4 and FLUKA particle transport engines.; Anna Kreshuk; Anna was a project associate and contributed to different parts of ROOT, most notably to the fitting machinery, the interface to FFTW, numerous math-related functions, TEntryList container and PROOF GUI.; David Gonzalez Maline; David has been working on improving the performance and correctness of various mathematical algorithms as well as on integrating AI methods for data analysis inside the framework. He has also worked on extending and improving the FitPanel interface.; Diego Marcos Segura; Diego worked as technical student on CINT dictionary optimizations.; Eddy Offermann; Eddy joined the ROOT team during a sabbatical to work on making the ROOT matrix package the fastest and most versatile in the industry.; Ilka Antcheva; Ilka has been working from 2002 to 2008 in the ROOT team. She was responsible for the GUI system and designed many high level user interfaces and widgets, like found in many modern graphics applications: ROOT graphics editor (GED) and various object editors, Fit Panel, Style manager, a tool for automatic C++ code generation of any widget and the capability for widgets to save themselves. In addition Ilka took care of the ROOT Users Guide and contributed the chapter ‘Writing a Graphical User Interface’.; Gerardo Ganis; Gerri was a team member for more than ten ye",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:2818,perform,performance,2818,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['perform'],['performance']
Performance," AbstractMethod(const char *method) constTObject; AddOptionsXMLTo(void *parent) constTMVA::Configurable; AddPreDefVal(const T &)TMVA::Configurable; AddPreDefVal(const TString &optname, const T &)TMVA::Configurable; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AssignOpt(const TString &name, T &valAssign) constTMVA::Configurableprivate; BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString)TMVA::Factoryinline; BookMethodWeightfile(DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile)TMVA::Factoryprivate; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckForUnusedOptions() constTMVA::Configurable; Class()TMVA::Factorystatic; Class_Name()TMVA::Factorystatic; Class_Version()TMVA::Factoryinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Configurable(const TString &theOption="""")TMVA::Configurable; Copy(TObject &named) const overrideTNamedvirtual; CrossValidationTMVA::Factoryfriend; DeclareOptionRef(T &ref, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T &ref, const TString &name, const TString &desc)TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc)TMVA::Configurable; Decl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory-members.html:628,load,loader,628,doc/master/classTMVA_1_1Factory-members.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html,2,['load'],['loader']
Performance," Activate memory statistics; Rint.Load: rootalias.C; Rint.Logon: rootlogon.C; Rint.Logoff: rootlogoff.C; ...; Rint.Canvas.MoveOpaque: false; Rint.Canvas.HighLightColor: 5; The various options are explained in $ROOTSYS/etc/system.rootrc. The .rootrc file contents are combined. For example, if the flag to use true type fonts is set to true in the system.rootrc file, you have to set explicitly it false in your local .rootrc file if you do not want to use true type fonts. Removing the UseTTFontsstatement in the local .rootrc file will not disable true fonts. The value of the environment variable ROOTDEBUG overrides the value in the .rootrc file at startup. Its value is used to set gDebug and helps for quick turn on debug mode in TROOT startup.; ROOT looks for scripts in the path specified in the .rootrc file in the Root.Macro.Path variable. You can expand this path to hold your own directories.; 2.7.1 Logon and Logoff Scripts; The rootlogon.C and rootlogoff.C files are scripts loaded and executed at start-up and shutdown. The rootalias.C file is loaded but not executed. It typically contains small utility functions. For example, the rootalias.C script that comes with the ROOT distributions (located in $ROOTSYS/tutorials) defines the function edit(char *file). This allows the user to call the editor from the command line. This particular function will start the VI editor if the environment variable EDITOR is not set.; root[0] edit(""c1.C""); For more details, see $ROOTSYS/tutorials/rootalias.C.; 2.7.2 History File; You can use the up and down arrow at the command line, to access the previous and next command. The commands are recorded in the history file $HOME/.root_hist. It is a text file, and you can edit, cut, and paste from it. You can specify the history file in the system.rootrc file, by setting the Rint.Historyoption. You can also turn off the command logging in the system.rootrc file with the option: Rint.History: -; The number of history lines to be kept can be set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:64828,load,loaded,64828,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," AddCut(const TCut& cut, const TString& className = """"). void PrepareTrainingAndTestTree(const TCut& cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString& otherOpt = ""SplitMode=Random:!V""); prepare the training and test trees. void PrepareTrainingAndTestTree(const TCut& cut, Int_t Ntrain, Int_t Ntest = -1); prepare the training and test trees; kept for backward compatibility. void PrepareTrainingAndTestTree(const TCut& cut, const TString& splitOpt); prepare the training and test trees; -> same cuts for signal and background. void PrepareTrainingAndTestTree(TCut sigcut, TCut bkgcut, const TString& splitOpt); prepare the training and test trees. TMVA::MethodBase* BookMethod(TString theMethodName, TString methodTitle, TString theOption = """"); Book a classifier or regression method. TMVA::MethodBase* BookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """"); books MVA method; the option configuration string is custom for each MVA; the TString field ""theNameAppendix"" serves to define (and distinguish); several instances of a given MVA, eg, when one wants to compare the; performance of various configurations. TMVA::IMethod* GetMethod(const TString& title) const; returns pointer to MVA that corresponds to given method title. void WriteDataInformation(); put correlations of input data and a few (default + user; selected) transformations into the root file. void OptimizeAllMethods(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); iterates through all booked methods and sees if they use parameter tuning and if so..; does just that i.e. calls ""Method::Train()"" for different parameter setttings and; keeps in mind the ""optimal one""... and that's the one that will later on be used; in the main training loop. void TrainAllMethods(); iterates through all booked methods and calls training. void TestAllMethods(). void MakeClass(const TString& methodTitle = """") const; Print predefined help message of classifier; ite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Factory.html:18825,perform,performance,18825,root/html530/TMVA__Factory.html,https://root.cern,https://root.cern/root/html530/TMVA__Factory.html,3,['perform'],['performance']
Performance," AddCut(const TCut& cut, const TString& className = """"). void PrepareTrainingAndTestTree(const TCut& cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString& otherOpt = ""SplitMode=Random:!V""); prepare the training and test trees. void PrepareTrainingAndTestTree(const TCut& cut, Int_t Ntrain, Int_t Ntest = -1); prepare the training and test trees; kept for backward compatibility. void PrepareTrainingAndTestTree(const TCut& cut, const TString& splitOpt); prepare the training and test trees; -> same cuts for signal and background. void PrepareTrainingAndTestTree(TCut sigcut, TCut bkgcut, const TString& splitOpt); prepare the training and test trees. TMVA::MethodBase* BookMethod(TString theMethodName, TString methodTitle, TString theOption = """"); Book a classifier or regression method. TMVA::MethodBase* BookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """"); books MVA method; the option configuration string is custom for each MVA; the TString field ""theNameAppendix"" serves to define (and distinguish); several instances of a given MVA, eg, when one wants to compare the; performance of various configurations. TMVA::IMethod* GetMethod(const TString& title) const; returns pointer to MVA that corresponds to given method title. void WriteDataInformation(); put correlations of input data and a few (default + user; selected) transformations into the root file. void OptimizeAllMethods(TString fomType = ""ROCIntegral"", TString fitType = ""Scan""); iterates through all booked methods and sees if they use parameter tuning and if so..; does just that i.e. calls ""Method::Train()"" for different parameter setttings and; keeps in mind the ""optimal one""... and that's the one that will later on be used; in the main training loop. void TrainAllMethods(); iterates through all booked methods and calls training. void TestAllMethods(). void MakeClass(const TString& methodTitle = """") const; Print predefined help message of classifier; iter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Factory.html:18957,perform,performance,18957,root/html528/TMVA__Factory.html,https://root.cern,https://root.cern/root/html528/TMVA__Factory.html,1,['perform'],['performance']
Performance," Analysis (PCA) example ;  principal.py Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  tStudent.C Example macro describing the student t distribution ;  tStudent.py Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to compare masses in ROOT data base to the values from pdg pdg ;  ► memstat;  memstatExample.CScript post-processing the file generated by TMemStat (default memstat.root) ;  ► mlp;  mlpHiggs.C Example of a Multi Layer Perceptron For a LEP search for invisible Higgs boson, a neural network was used to separate the signal from the background passing some selection cuts ;  mlpRegression.CThis macro shows the use of an ANN for regression analysis: given a set {i} of input vectors i and a set {o} of output vectors o, one looks for the unknown function f(i)=o ;  ► multicore;  imt001_parBranchProcessing.C Demonstrate how to activate and use the implicit parallelisation of TTree::GetEntry ;  imt101_parTreeProcessing.C Illustrate the usage of the TTreeProcessorMT::Process method ;  mp001_fillHistos.C Fill histograms in parallel and write them on file ;  mp101_fillNtuples.C Fill n-tuples in distinct workers ;  mp102_readNtuplesFillHistosAnd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:135731,perform,perform,135731,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['perform'],['perform']
Performance," Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* makeFrameAndPlotCmd(const RooRealVar& param, RooLinkedList& cmdList, Bool_t symRange = kFALSE) const; Internal function. Construct RooPlot from given parameter and modify the list of named; arguments 'cmdList' to only contain the plot arguments that should be forwarded to; RooAbsData::plotOn(). RooPlot* plotNLL(Double_t lo, Double_t hi, Int_t nBins = 100); Create a RooPlot of the -log(L) distribution in the range lo-hi; with 'nBins' bins. RooPlot* plotError(const RooRealVar& param, Double_t lo, Double_t hi, Int_t nbins = 100); Create a RooPlot of the distribution of the fitted errors of the given parameter.; The frame is created with a range [lo,hi] and plotted data will be binned in 'nbins' bins. RooPlot* plotPull(const RooRealVar& param, Double_t lo = -3.0, Double_t hi = 3.0, Int_t nbins = 25, Bool_t fitGauss = kFALSE); Create a RooPlot of the pull distribution for the given; parameter. The range lo-hi is plotted in nbins. If fitGauss is; set, an unbinned ML fit of the distribution to a Gaussian p.d.f; is performed. The fit result is overlaid on the returned RooPlot; and a box with the fitted mean and sigma is added. RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()). const RooDataSet* genParDataSet() const; Return dataset with generator parameters for each toy. When constraints are used these; may generally not be the same. » Last changed: Tue Dec 8 17:03:16 2009 » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:26325,perform,performed,26325,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,1,['perform'],['performed']
Performance," Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:17257,optimiz,optimization,17257,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['optimiz'],['optimization']
Performance," Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:13764,optimiz,optimization,13764,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,3,['optimiz'],['optimization']
Performance," Assume no class library loaded (emulated class).; 4702///; 4703/// Warning: If we create a new streamer info, whether or not the build; 4704/// optimizes is controlled externally to us by a global variable!; 4705/// Don't call us unless you have set that variable properly; 4706/// with TStreamer::Optimize()!; 4707///; 4708 ; 4709TVirtualStreamerInfo* TClass::GetStreamerInfoAbstractEmulated(Int_t version /* = 0 */) const; 4710{; 4711 TVirtualStreamerInfo *sinfo = nullptr;; 4712 ; 4713 TString newname(GetName());; 4714 newname += ""@@emulated"";; 4715 ; 4716 R__LOCKGUARD(gInterpreterMutex);; 4717 ; 4718 TClass *emulated = TClass::GetClass(newname);; 4719 ; 4720 if (emulated); 4721 sinfo = emulated->GetStreamerInfo(version);; 4722 ; 4723 if (!sinfo) {; 4724 // The emulated version of the streamerInfo is explicitly requested and has; 4725 // not been built yet.; 4726 ; 4727 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(version);; 4728 ; 4729 if (!sinfo && (version != fClassVersion)) {; 4730 // When the requested version does not exist we return; 4731 // the TVirtualStreamerInfo for the currently loaded class version.; 4732 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4733 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4734 }; 4735 ; 4736 if (!sinfo) {; 4737 // Let's take the first available StreamerInfo as a start; 4738 Int_t ninfos = fStreamerInfo->GetEntriesFast() - 1;; 4739 for (Int_t i = -1; sinfo == nullptr && i < ninfos; ++i); 4740 sinfo = (TVirtualStreamerInfo *)fStreamerInfo->UncheckedAt(i);; 4741 }; 4742 ; 4743 if (sinfo) {; 4744 sinfo = dynamic_cast<TVirtualStreamerInfo *>(sinfo->Clone());; 4745 if (sinfo) {; 4746 sinfo->SetClass(nullptr);; 4747 sinfo->SetName(newname);; 4748 sinfo->BuildCheck();; 4749 sinfo->BuildOld();; 4750 sinfo->GetClass()->AddRule(TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4751 } else {; 4752 Error(""GetStreamerInfoAbstractEmulated"", ""could not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:179651,load,loaded,179651,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," Assume no class library loaded (emulated class).; 4769///; 4770/// Warning: If we create a new streamer info, whether or not the build; 4771/// optimizes is controlled externally to us by a global variable!; 4772/// Don't call us unless you have set that variable properly; 4773/// with TStreamer::Optimize()!; 4774///; 4775 ; 4776TVirtualStreamerInfo* TClass::GetStreamerInfoAbstractEmulated(Int_t version /* = 0 */) const; 4777{; 4778 TVirtualStreamerInfo *sinfo = nullptr;; 4779 ; 4780 TString newname(GetName());; 4781 newname += ""@@emulated"";; 4782 ; 4783 R__LOCKGUARD(gInterpreterMutex);; 4784 ; 4785 TClass *emulated = TClass::GetClass(newname);; 4786 ; 4787 if (emulated); 4788 sinfo = emulated->GetStreamerInfo(version);; 4789 ; 4790 if (!sinfo) {; 4791 // The emulated version of the streamerInfo is explicitly requested and has; 4792 // not been built yet.; 4793 ; 4794 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(version);; 4795 ; 4796 if (!sinfo && (version != fClassVersion)) {; 4797 // When the requested version does not exist we return; 4798 // the TVirtualStreamerInfo for the currently loaded class version.; 4799 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4800 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4801 }; 4802 ; 4803 if (!sinfo) {; 4804 // Let's take the first available StreamerInfo as a start; 4805 Int_t ninfos = fStreamerInfo->GetEntriesFast() - 1;; 4806 for (Int_t i = -1; sinfo == nullptr && i < ninfos; ++i); 4807 sinfo = (TVirtualStreamerInfo *)fStreamerInfo->UncheckedAt(i);; 4808 }; 4809 ; 4810 if (sinfo) {; 4811 sinfo = dynamic_cast<TVirtualStreamerInfo *>(sinfo->Clone());; 4812 if (sinfo) {; 4813 sinfo->SetClass(nullptr);; 4814 sinfo->SetName(newname);; 4815 sinfo->BuildCheck();; 4816 sinfo->BuildOld();; 4817 sinfo->GetClass()->AddRule(TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4818 } else {; 4819 Error(""GetStreamerInfoAbstractEmulated"", ""could not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:182402,load,loaded,182402,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:92623,optimiz,optimizes,92623,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,2,"['Optimiz', 'optimiz']","['Optimize', 'optimizes']"
Performance," Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4666 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4776 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4701 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:92624,optimiz,optimizes,92624,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,2,"['Optimiz', 'optimiz']","['Optimize', 'optimizes']"
Performance," Bool_t CheckPath(const char *path) const;; 187 void CdNode(Int_t nodeid);; 188 void CdDown(Int_t index);; 189 void CdUp();; 190 void CdTop();; 191 void CdNext();; 192 void GetBranchNames(Int_t *names) const;; 193 void GetBranchNumbers(Int_t *copyNumbers, Int_t *volumeNumbers) const;; 194 void GetBranchOnlys(Int_t *isonly) const;; 195 Int_t GetNmany() const { return GetCurrentNavigator()->GetNmany(); }; 196 const char *GetPdgName(Int_t pdg) const;; 197 void SetPdgName(Int_t pdg, const char *name);; 198 Bool_t IsFolder() const override { return kTRUE; }; 199 //--- visualization settings; 200 virtual void Edit(Option_t *option = """"); // *MENU*; 201 void BombTranslation(const Double_t *tr, Double_t *bombtr);; 202 void UnbombTranslation(const Double_t *tr, Double_t *bombtr);; 203 void ClearAttributes(); // *MENU*; 204 void DefaultAngles(); // *MENU*; 205 void DefaultColors(); // *MENU*; 206 TGeoShape *GetClippingShape() const { return fClippingShape; }; 207 Int_t GetNsegments() const;; 208 TVirtualGeoPainter *GetGeomPainter();; 209 TVirtualGeoPainter *GetPainter() const { return fPainter; }; 210 Int_t GetBombMode() const { return fExplodedView; }; 211 void GetBombFactors(Double_t &bombx, Double_t &bomby, Double_t &bombz, Double_t &bombr) const;; 212 Int_t GetMaxVisNodes() const { return fMaxVisNodes; }; 213 Bool_t GetTminTmax(Double_t &tmin, Double_t &tmax) const;; 214 Double_t GetTmax() const { return fTmax; }; 215 TGeoVolume *GetPaintVolume() const { return fPaintVolume; }; 216 TGeoVolume *GetUserPaintVolume() const { return fUserPaintVolume; }; 217 Double_t GetVisDensity() const { return fVisDensity; }; 218 Int_t GetVisLevel() const;; 219 Int_t GetVisOption() const;; 220 Bool_t IsInPhiRange() const;; 221 Bool_t IsDrawingExtra() const { return fDrawExtra; }; 222 Bool_t IsNodeSelectable() const { return fIsNodeSelectable; }; 223 Bool_t IsVisLeaves() const { return fVisOption == 1; }; 224 void ModifiedPad() const;; 225 void OptimizeVoxels(const char *filename = ""tgeovox.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:10837,Optimiz,OptimizeVoxels,10837,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['Optimiz'],['OptimizeVoxels']
Performance," Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAddPdf::CacheElem*getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:36892,optimiz,optimizeDirtyHook,36892,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,2,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; const RooAbsReal*getProjection(const RooArgSet* iset, const RooArgSet* nset, const char* rangeName, int& code) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProjectedPdf.html:36109,optimiz,optimizeDirtyHook,36109,root/html602/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html602/RooProjectedPdf.html,2,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:41168,optimiz,optimizeDirtyHook,41168,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCacheAllNumeric(); Return minimum dimensions of numeric integration for which values are cached. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. RooArgSet intVars() const; { RooArgSet tmp(_sumList) ; tmp.add(_intList) ; tmp.add(_anaList) ; tmp.add(_facList) ; return tmp ; }. const char* intRange(); { return _rangeName ? _rangeName->GetName() : 0 ; }. const RooAbsReal& integrand() const; { return _function.arg() ; }. void setCacheNumeric(Bool_t flag); If true, value of this interal is cached if it is (partially numeric). Bool_t getCacheNumeric(); If true, value of this interal is cached if it is (partially numeric). std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward plot sampling hint of integrand. » Last changed: Tue Jun 30 14:35:18 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealIntegral.html:42459,cache,cached,42459,root/html602/RooRealIntegral.html,https://root.cern,https://root.cern/root/html602/RooRealIntegral.html,2,['cache'],['cached']
Performance," Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCacheAllNumeric(); Return minimum dimensions of numeric integration for which values are cached. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. RooArgSet intVars() const; { RooArgSet tmp(_sumList) ; tmp.add(_intList) ; tmp.add(_anaList) ; tmp.add(_facList) ; return tmp ; }. const char* intRange(); { return _rangeName ? _rangeName->GetName() : 0 ; }. const RooAbsReal& integrand() const; { return _function.arg() ; }. void setCacheNumeric(Bool_t flag); If true, value of this interal is cached if it is (partially numeric). Bool_t getCacheNumeric(); If true, value of this interal is cached if it is (partially numeric). std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward plot sampling hint of integrand. » Last changed: Tue Mar 10 17:18:47 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealIntegral.html:40871,cache,cached,40871,root/html534/RooRealIntegral.html,https://root.cern,https://root.cern/root/html534/RooRealIntegral.html,2,['cache'],['cached']
Performance," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sat Jun 20 17:29:22 2015 » Last generated: 2015-06-20 17:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsArg.html:46321,cache,cache,46321,root/html604/RooAbsArg.html,https://root.cern,https://root.cern/root/html604/RooAbsArg.html,2,['cache'],['cache']
Performance," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sun Jun 28 16:37:40 2015 » Last generated: 2015-06-28 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:44625,cache,cache,44625,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,2,['cache'],['cache']
Performance," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Tue Jun 30 14:29:52 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:46321,cache,cache,46321,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,2,['cache'],['cache']
Performance," Bool_t nodeid = kFALSE); Builds the cache for physical nodes and global matrices. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from top node according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the navigator. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdDown(TGeoNode* node); Make a daughter of current node current. Can be called only with a valid; daughter node (no check). Updates cache accordingly. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdNext(); Do a cd to the node found next by FindNextBoundary. void GetBranchNames(Int_t* names) const; Fill volume names of current branch into an array. void GetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; Fill node copy numbers of current branch into an array. void GetBranchOnlys(Int_t* isonly) const; Fill node copy numbers of current branch into an array. TGeoNode * CrossDivisionCell(); Cross a division cell. Distance to exit contained in fStep, current node; points to the cell node. TGeoNode * CrossBoundaryAndLocate(Bool_t downwards, TGeoNode* skipnode); Cross next boundary and locate within current node; The current point must be on the boundary of fCurrentNode. TGeoNode * FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char* path = """", Bool_t frombdr = kFALSE); Find distance to next boundary and store it in fStep. Returns node to which this; boundary belongs. If PATH is specified,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigator.html:14130,cache,cache,14130,root/html602/TGeoNavigator.html,https://root.cern,https://root.cern/root/html602/TGeoNavigator.html,1,['cache'],['cache']
Performance," Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); static Bool_tRooAbsArg::inhibitDirty(); voidinitialize(RooAbsCategoryLValue& inIndexCat, map<std::string,RooAbsPdf*> pdfMap); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:35391,optimiz,optimizeDirtyHook,35391,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,1,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; Double_tlogSum(Int_t i) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistConstraint.html:35379,optimiz,optimizeDirtyHook,35379,root/html602/RooHistConstraint.html,https://root.cern,https://root.cern/root/html602/RooHistConstraint.html,2,['optimiz'],['optimizeDirtyHook']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigN,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo2DKeysPdf.html:38404,cache,cache,38404,root/html526/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html526/Roo2DKeysPdf.html,38,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject category; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEfficiency.html:37803,cache,cache,37803,root/html526/RooEfficiency.html,https://root.cern,https://root.cern/root/html526/RooEfficiency.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGenerat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffProd.html:37799,cache,cache,37799,root/html526/RooEffProd.html,https://root.cern,https://root.cern/root/html526/RooEffProd.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC genera,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:38786,cache,cache,38786,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,38,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject ca,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEfficiency.html:38185,cache,cache,38185,root/html528/RooEfficiency.html,https://root.cern,https://root.cern/root/html528/RooEfficiency.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculatin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooKeysPdf.html:38982,cache,cache,38982,root/html528/RooKeysPdf.html,https://root.cern,https://root.cern/root/html528/RooKeysPdf.html,43,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalcul,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DKeysPdf.html:39658,cache,cache,39658,root/html532/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html532/Roo2DKeysPdf.html,40,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if va,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffProd.html:38181,cache,cache,38181,root/html528/RooEffProd.html,https://root.cern,https://root.cern/root/html528/RooEffProd.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooEffProd.html:38650,cache,cache,38650,root/html530/RooEffProd.html,https://root.cern,https://root.cern/root/html530/RooEffProd.html,1,['cache'],['cache']
Performance," Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Custom stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_int_int_.html:36760,cache,cache,36760,root/html602/RooCFunction3Binding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_int_int_.html,4,['cache'],['cache']
Performance," Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Returns name of binning to be used for cache histogram creation. FuncCacheElem* createCache(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedReal.html:35956,cache,cache,35956,root/html532/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedReal.html,1,['cache'],['cache']
Performance," Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. void disableCache(Bool_t flag); Switch to disable caching mechanism. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Returns name of binning to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedReal.html:37811,cache,cache,37811,root/html534/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedReal.html,1,['cache'],['cache']
Performance," Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,double,double>&operator=(const RooCFunction2Binding<double,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html:19808,optimiz,optimizeCacheMode,19808,root/html602/RooCFunction2Binding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html,2,['optimiz'],['optimizeCacheMode']
Performance," Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooCategoryProxy_catAccept/reject categort; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effFuncEfficiency modeling function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEfficiency.html:40470,cache,cache,40470,root/html534/RooEfficiency.html,https://root.cern,https://root.cern/root/html534/RooEfficiency.html,3,"['Cache', 'cache']","['Cached', 'cache']"
Performance," Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedReal.html:34005,cache,cache,34005,root/html532/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedReal.html,2,['cache'],['cache']
Performance," Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; const RooArgSet&bestFitObs() const; const RooArgSet&bestFitParams() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:2488,cache,cacheUniqueSuffix,2488,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,3,['cache'],['cacheUniqueSuffix']
Performance," Bool_tfgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLogicalShape(); Constructor. TGLLogicalShape(TObject* obj); Constructor with external object. TGLLogicalShape(const TBuffer3D& buffer); Constructor from TBuffer3D. ~TGLLogicalShape(); Destroy logical shape. void AddRef(TGLPhysicalShape* phys) const; Add reference to given physical shape. void SubRef(TGLPhysicalShape* phys) const; Remove reference to given physical shape, potentially deleting; *this* object when hitting zero ref-count (if fRefStrong is; true). void DestroyPhysicals(); Destroy all physicals attached to this logical. UInt_t UnrefFirstPhysical(); Unreference first physical in the list, returning its id and; making it fit for destruction somewhere else.; Returns 0 if there are no replicas attached. void UpdateBoundingBoxesOfPhysicals(); Update bounding-boxed of all dependent physicals. Bool_t SetDLCache(Bool_t cached); Modify capture of draws into display list cache kTRUE - capture,; kFALSE direct draw. Return kTRUE is state changed, kFALSE if not. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Returns kTRUE if draws should be display list cached; kFALSE otherwise. Here we check that:; a) fScene is set (Scene manages link to GL-context);; b) secondary selection is not in progress as different; render-path is usually taken in this case. Otherwise we return internal bool. Override this in sub-class if different behaviour is required. void DLCacheClear(); Clear all entries for all LODs for this drawable from the; display list cache but keeping the reserved ids from GL context. void DLCacheDrop(); Drop all entries for all LODs for this drawable from the display; list cache, WITHOUT returning the reserved ids to GL context. This is called by scene if it realized that the GL context was; destroyed. void DLCachePurge(); Purge all entries for all LODs for this drawable from the; display list cache, returning the reserved ids t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLLogicalShape.html:5877,cache,cached,5877,root/html602/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html602/TGLLogicalShape.html,4,['cache'],"['cache', 'cached']"
Performance," CINT would have called it an edm::TaggedVector).; We plan to release a snapshot of ROOT using cling in the third quarter of 2012; we will really appreciate feedback on problems with reading old files - as you correctly pointed out this is one of the most crucial ingredients of this project.; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Thank you for clarifying a . Thank you for clarifying a transition plan, it is quite a reasonable approach. I just want to add a personal request to your wish list. Would it be possible to improve IO speed for reading? Very often analysis code is constrained by CPU/disk access limits when reading ntuples. The speed varies from ~100kHz for a tree with few float branches to ~200 Hz for complex data structure. A factor of few improvement for complex data can be a difference between requiring just one machine or a small farm. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: I/O Performance . Hi ROOT User,; We have dramatically improved the I/O performance over the last two years. If you use the latest production release also for writing data you might be able to see a performance improvement of an order of magnitude compared to e.g. 5.26, both in real and CPU time! See e.g. this blog entry.; We have been comparing the performance of ROOT I/O with competitors like Google ProtoBuf; we know exactly where we spend extra time and why, e.g. for schema evolution, proper C++ type support, introspection, pointers.; On the other hand, are you sure you make use of all the performance features ROOT offers? Did you enable the tree cache (on by default for PROOF and one tree per file, off - for now, still - otherwise)? Do you only read the branches you need? I am working on a new TTree read access class that should simplify all of that considerably (and is type safe - no more void*&!); maybe I should take your comment as an invitation to speed up :-); Cheers, Axel. Submitted",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:15182,Perform,Performance,15182,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['Perform'],['Performance']
Performance," CL limits using the Likelihood ratio semi-bayesian method. ; Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006]. See http://cern.ch/thomasj/searchlimits/ecl.html for more details.; It takes signal, background and data histograms wrapped in a TLimitDataSource as input and runs a set of Monte Carlo experiments in order to compute the limits. If needed, inputs are fluctuated according to systematics. The output is a TConfidenceLevel.; The class TLimitDataSource takes the signal, background and data histograms as well as different systematics sources to form the TLimit input.; The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the time-consuming part and can be stored in a TFile for further processing. It contains light methods to return CLs, CLb and other interesting quantities.; The actual algorithm...; From an input (TLimitDataSource) it produces an output TConfidenceLevel. For this, nmc Monte Carlo experiments are performed. As usual, the larger this number, the longer the compute time, but the better the result.; Supposing that there is a plotfile.root file containing 3 histograms (signal, background and data), you can imagine doing things like:; TFile* infile=new TFile(""plotfile.root"",""READ"");; infile->cd();; TH1* sh=(TH1*)infile->Get(""signal"");; TH1* bh=(TH1*)infile->Get(""background"");; TH1* dh=(TH1*)infile->Get(""data"");; TLimitDataSource* mydatasource = new TLimitDataSource(sh,bh,dh);; TConfidenceLevel *myconfidence = TLimit::ComputeLimit(mydatasource,50000);; std::cout << "" CLs : "" << myconfidence->CLs() << std::endl;; std::cout << "" CLsb : "" << myconfidence->CLsb() << std::endl;; std::cout << "" CLb : "" << myconfidence->CLb() << std::endl;; std::cout << ""< CLs > : "" << myconfidence->GetExpectedCLs_b() << std::endl;; std::cout << ""< CLsb > : "" << myconfidence->GetExpectedCLsb_b() << std::endl;; std::cout << ""< CLb > : "" << myconfidence->GetExpectedCLb_b() << std::endl;; delet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimit.html:1646,perform,performed,1646,doc/master/classTLimit.html,https://root.cern,https://root.cern/doc/master/classTLimit.html,1,['perform'],['performed']
Performance," Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar; Working with missing values in the dataset. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:2725,perform,performed,2725,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['perform'],['performed']
Performance," Check the table exist in the database. TString ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeSQL.html:28093,Load,Load,28093,root/html534/TTreeSQL.html,https://root.cern,https://root.cern/root/html534/TTreeSQL.html,3,"['Load', 'load']","['Load', 'LoadTree', 'load']"
Performance, Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfIter! Iterator over PDF list; RooListProxy_pdfListList of component PDFs; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:38854,cache,cache,38854,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,1,['cache'],['cache']
Performance, Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfIter! Iterator over PDF list; RooListProxy_pdfListList of component PDFs; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:39507,cache,cache,39507,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,2,['cache'],['cache']
Performance, Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTTree::fMakeClass! not zero when processing code generated by MakeClass; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTTree::fMaxClusterRange! Memory allocated for the cluster range.; Long64_tTTree::fMaxEntriesMaximum number of entries in case of circular buffers; Long64_tTTree::fMaxEntryLoopMaximum number of entries to process; Long64_tTTree::fMaxVirtualSizeMaximum total size of buffers kept in memory; Int_tTTree::fNClusterRangeNumber of Cluster range in addition to the one defined by 'AutoFlush'; TStringTNamed::fNameobject identifier; Int_tTTree::fNfill! Local for EntryLoop; TObject*TTree::fNotify! Object to be notified when loading a Tree; Int_tTTree::fPacketSize! Number of entries in one packet for parallel root; TVirtualTreePlayer*TTree::fPlayer! Pointer to current Tree player; TStringfQuery; Long64_tTTree::fReadEntry! Number of the entry being processed; TSQLResult*fResult; TSQLRow*fRow; Long64_tTTree::fSavedBytesNumber of autosaved bytes; Int_tTTree::fScanFieldNumber of runs before prompting in Scan; TSQLServer*fServer; TStringfTable; Int_tTTree::fTimerIntervalTimer interval in milliseconds; TStringTNamed::fTitleobject title; Long64_tTTree::fTotBytesTotal number of bytes in all branches before compression; Long64_tTTree::fTotalBuffers! Total number of bytes in branch buffers; TBuffer*TTree::fTransientBuffer! Pointer to the current transient buffer.; TVirtualIndex*TTree::fTreeIndexPointer to the tree Index (if any); Int_tTTree::fUpdateUpdate frequency for EntryLoop; TList*TTree::fUserInfopointer to a list of user objects associated to this Tree; Double_tTTree::fWeightTree weight (see TTree::SetWeight); Long64_tTTree::fZipBytesTotal number of bytes in all branches after compression; static Int_tTTree::fgBranchStyleOld/New branch style; static Lo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeSQL.html:23064,load,loading,23064,root/html530/TTreeSQL.html,https://root.cern,https://root.cern/root/html530/TTreeSQL.html,2,['load'],['loading']
Performance," ColumnNames_t{};; 1526 const auto dsColumns = fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{};; 1527 // Ignore R_rdf_sizeof_* columns coming from datasources: we don't want to Snapshot those; 1528 ColumnNames_t dsColumnsWithoutSizeColumns;; 1529 std::copy_if(dsColumns.begin(), dsColumns.end(), std::back_inserter(dsColumnsWithoutSizeColumns),; 1530 [](const std::string &name) { return name.size() < 13 || name.substr(0, 13) != ""R_rdf_sizeof_""; });; 1531 ColumnNames_t columnNames;; 1532 columnNames.reserve(definedColumns.size() + treeBranchNames.size() + dsColumns.size());; 1533 columnNames.insert(columnNames.end(), definedColumns.begin(), definedColumns.end());; 1534 columnNames.insert(columnNames.end(), treeBranchNames.begin(), treeBranchNames.end());; 1535 columnNames.insert(columnNames.end(), dsColumns.begin(), dsColumns.end());; 1536 const auto selectedColumns = RDFInternal::ConvertRegexToColumns(columnNames, columnNameRegexp, ""Cache"");; 1537 return Cache(selectedColumns);; 1538 }; 1539 ; 1540 ////////////////////////////////////////////////////////////////////////////; 1541 /// \brief Save selected columns in memory.; 1542 /// \param[in] columnList columns to be cached in memory.; 1543 /// \return a `RDataFrame` that wraps the cached dataset.; 1544 ///; 1545 /// See the previous overloads for more information.; 1546 RInterface<RLoopManager> Cache(std::initializer_list<std::string> columnList); 1547 {; 1548 ColumnNames_t selectedColumns(columnList);; 1549 return Cache(selectedColumns);; 1550 }; 1551 ; 1552 // clang-format off; 1553 ////////////////////////////////////////////////////////////////////////////; 1554 /// \brief Creates a node that filters entries based on range: [begin, end).; 1555 /// \param[in] begin Initial entry number considered for this range.; 1556 /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 1557 /// \param[in] stride Process one entry of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:86099,Cache,Cache,86099,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,2,['Cache'],['Cache']
Performance," ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeSQL.h 30663 2009-10-11 22:11:51Z pcanal $ » Last generated: 2010-09-30 18:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeSQL.html:25814,Load,Load,25814,root/html528/TTreeSQL.html,https://root.cern,https://root.cern/root/html528/TTreeSQL.html,3,"['Load', 'load']","['Load', 'LoadTree', 'load']"
Performance," ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeSQL.h 30663 2009-10-11 22:11:51Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeSQL.html:26820,Load,Load,26820,root/html530/TTreeSQL.html,https://root.cern,https://root.cern/root/html530/TTreeSQL.html,3,"['Load', 'load']","['Load', 'LoadTree', 'load']"
Performance," ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeSQL.h 30663 2009-10-11 22:11:51Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeSQL.html:27203,Load,Load,27203,root/html532/TTreeSQL.html,https://root.cern,https://root.cern/root/html532/TTreeSQL.html,3,"['Load', 'load']","['Load', 'LoadTree', 'load']"
Performance," Create the chain as in A, then execute; Root > chain.Process(""h1analysis.C+"",""useList""); The same analysis can be run on PROOF. For a quick try start a PROOF-Lite session; Root > TProof *p = TProof::Open(""""); pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TProofThis class controls a Parallel ROOT Facility, PROOF, cluster.Definition TProof.h:316; TProof::Openstatic TProof * Open(const char *url=0, const char *conffile=0, const char *confdir=0, Int_t loglevel=0)Start a PROOF session on a specific cluster.Definition TProof.cxx:11583; create (if not already done) the chain by executing the 'h1chain.C' macro mentioned above, and then tell ROOT to use PROOF to process the chain:; Root > chain.SetProof(); You can then repeat step B above. Step C can also be executed in PROOF. However, step D cannot be executed in PROOF as in the local session (i.e. just passing option 'useList'): to use the entry list you have to. Case G: Load first in the session the list form the file; Root > TFile f(""elist.root""); Root > TEntryList *elist = (TEntryList *) f.Get(""elist""); f#define f(i)Definition RSha256.hxx:104; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; set it on the chain:; Root > chain.SetEntryList(elist); call Process as in step B. Of course this works also for local processing.; ; #include ""h1analysis.h""; #include ""TH2.h""; #include ""TF1.h""; #include ""TStyle.h""; #include ""TBranch.h""; #include ""TCanvas.h""; #include ""TPaveStats.h""; #include ""TLine.h""; #include ""TMath.h""; ; const Double_t dxbin = (0.17-0.13)/40; // Bin-width; const Double_t sigma = 0.0012;; ; ; Double_t fdm5(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-par[3])*(x-par[3]);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); + par[2] / 2.5066/par[4]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysis_8C.html:5001,Load,Load,5001,doc/master/h1analysis_8C.html,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html,1,['Load'],['Load']
Performance," Created tree 'TestTree' with 1998 events; : ; <HEADER> Dataset:datasetcv : Created tree 'TrainTree' with 1998 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; : Evaluation done.; Summary for method BDT; Fold 0: ROC int: 0.972504, BkgEff@SigEff=0.3: 0.981; Fold 1: ROC int: 0.96115, BkgEff@SigEff=0.3: 0.975; Summary for method Fisher; Fold 0: ROC int: 0.976137, BkgEff@SigEff=0.3: 0.986; Fold 1: ROC int: 0.96584, BkgEff@SigEff=0.3: 0.975; ==> Wrote root file: TMVACV.root; ==> TMVACrossValidation is done!; (int) 0; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TChain.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TObjString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; #include ""TMVA/CrossValidation.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/Factory.h""; #include ""TMVA/Tools.h""; #include ""TMVA/TMVAGui.h""; ; // Helper function to load data into TTrees.; TTree *genTree(Int_t nPoints, Double_t offset, Double_t scale, UInt_t seed = 100); {; TRandom3 rng(seed);; Float_t x = 0;; Float_t y = 0;; UInt_t eventID = 0;; ; TTree *data = new TTree();; data->Branch(""x"", &x, ""x/F"");; data->Branch(""y"", &y, ""y/F"");; data->Branch(""eventID"", &eventID, ""eventID/I"");; ; for (Int_t n = 0; n < nPoints; ++n) {; x = rng.Gaus(offset, scale);; y = rng.Gaus(offset, scale);; ; // For our simple example it is enough that the id's are uniformly; // distributed and independent of the data.; ++eventID;; ; data->Fill();; }; ; // Important: Disconnects the tree from the memory locations of x and y.; data->ResetBranchAddresses();; return data;; }; ; int TMVACrossValidation(bool useRandomSplitting = false); {; // This loads the library; TMVA::Tools::Instance();; ; // --------------------------------------------------------------------------; ; // Load the data into TTrees. If you load data from file you can use a; // variant of; // ```; // TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:19051,load,load,19051,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['load'],['load']
Performance," DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. . Returnsa RDataFrame that wraps the cached dataset.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for more information. ; Definition at line 1520 of file RInterface.hxx. ◆ CacheImpl(). template<typename Proxied , typename DataSource = void> . template<typename... ColTypes, std::size_t... S> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::CacheImpl ; (; const ColumnNames_t & ; columnList, . std::index_sequence< S... > ;  . ). inlineprivate . Im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:44433,Cache,Cache,44433,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['Cache'],['Cache']
Performance," Deconstructor. ; Definition at line 326 of file TGondzioSolver.cxx. Member Function Documentation. ◆ Class(). static TClass * TGondzioSolver::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGondzioSolver::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGondzioSolver::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 103 of file TGondzioSolver.h. ◆ DeclFileName(). static const char * TGondzioSolver::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 103 of file TGondzioSolver.h. ◆ DefMonitor(). void TGondzioSolver::DefMonitor ; (; TQpDataBase * ; data, . TQpVar * ; vars, . TQpResidual * ; resids, . Double_t ; alpha, . Double_t ; sigma, . Int_t ; i, . Double_t ; mu, . Int_t ; status_code, . Int_t ; level . ). overridevirtual . Print information about the optimization process and monitor the convergence status of thye algorithm. ; Implements TQpSolverBase.; Definition at line 276 of file TGondzioSolver.cxx. ◆ IsA(). TClass * TGondzioSolver::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 103 of file TGondzioSolver.h. ◆ operator=(). TGondzioSolver & TGondzioSolver::operator= ; (; const TGondzioSolver & ; source). Assignment operator. ; Definition at line 337 of file TGondzioSolver.cxx. ◆ Reset_parameters(). virtual void TGondzioSolver::Reset_parameters ; (; ). inlinevirtual . Definition at line 95 of file TGondzioSolver.h. ◆ Solve(). Int_t TGondzioSolver::Solve ; (; TQpDataBase * ; prob, . TQpVar * ; iterate, . TQpResidual * ; resid . ). overridevirtual . Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ; Monitor the residuals during the iterations through resid . The status is returned as defined in TQpSolverBase::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGondzioSolver.html:15670,optimiz,optimization,15670,doc/master/classTGondzioSolver.html,https://root.cern,https://root.cern/doc/master/classTGondzioSolver.html,1,['optimiz'],['optimization']
Performance," Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Int_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2072 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetchin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:47904,cache,cache,47904,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['cache'],['cache']
Performance," Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Long64_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Buffersize might be clamped, see TFileCacheRead::SetBufferSize Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2073 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this informati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:47908,cache,cache,47908,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['cache'],['cache']
Performance," Definition at line 230 of file TF3.cxx. ◆ GetClippingBox(). virtual const Double_t * TF3::GetClippingBox ; (; ); const. inlinevirtual . Definition at line 110 of file TF3.h. ◆ GetClippingBoxOn(). virtual Bool_t TF3::GetClippingBoxOn ; (; ); const. inlinevirtual . Definition at line 108 of file TF3.h. ◆ GetMaximumXYZ(). Double_t TF3::GetMaximumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ). virtual . Compute the X, Y and Z values corresponding to the maximum value of the function on its range. ; Return the function value at the maximum. See TF3::GetMinimumXYZ ; Definition at line 314 of file TF3.cxx. ◆ GetMinimumXYZ(). Double_t TF3::GetMinimumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ). virtual . Compute the X, Y and Z values corresponding to the minimum value of the function on its range. ; Returns the function value at the minimum. To find the minimum on a subrange, use the SetRange() function first.; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx(), SetNpy() and SetNpz() functions. Then, Minuit minimization is used with starting values found by the grid search; Note that this method will always do first a grid search in contrast to GetMinimum ; Definition at line 298 of file TF3.cxx. ◆ GetNpz(). Int_t TF3::GetNpz ; (; ); const. inline . Definition at line 91 of file TF3.h. ◆ GetRandom3(). void TF3::GetRandom3 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . Double_t & ; zrandom, . TRandom * ; rng = nullptr . ). virtual . Return 3 random numbers following this function shape. ; The distribution contained in this TF3 function is integrated over the cell contents. It is normalized to 1. Getting the three random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF3.html:62357,perform,performed,62357,doc/master/classTF3.html,https://root.cern,https://root.cern/doc/master/classTF3.html,1,['perform'],['performed']
Performance," Definition at line 233 of file TWebCanvas.h. ◆ SetAsyncMode(). void TWebCanvas::SetAsyncMode ; (; Bool_t ; on = kTRUE). inline . Definition at line 253 of file TWebCanvas.h. ◆ SetCanCreateObjects(). void TWebCanvas::SetCanCreateObjects ; (; Bool_t ; on = kTRUE). inline . Definition at line 238 of file TWebCanvas.h. ◆ SetCanvasSize(). void TWebCanvas::SetCanvasSize ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Set canvas size of web canvas. ; Reimplemented from TCanvasImp.; Definition at line 1438 of file TWebCanvas.cxx. ◆ SetCustomScripts(). void TWebCanvas::SetCustomScripts ; (; const std::string & ; src). static . Configures custom script for canvas. ; If started with ""modules:"" prefix, module(s) will be imported with loadModules function of JSROOT. If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths. If started with ""load:"" prefix, code will be loaded with loadScript function of JSROOT (old, deprecated way) Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes See tutorials/webgui/custom/custom.mjs demonstrating such example ; Definition at line 371 of file TWebCanvas.cxx. ◆ SetLongerPolling(). void TWebCanvas::SetLongerPolling ; (; Bool_t ; on). inline . Definition at line 250 of file TWebCanvas.h. ◆ SetObjSelectHandler(). void TWebCanvas::SetObjSelectHandler ; (; ObjectSelectSignal_t ; func). inline . Definition at line 236 of file TWebCanvas.h. ◆ SetPadClickedHandler(). void TWebCanvas::SetPadClickedHandler ; (; PadClickedSignal_t ; func). inline . Definition at line 234 of file TWebCanvas.h. ◆ SetPadDblClickedHandler(). void TWebCanvas::SetPadDblClickedHandler ; (; PadClickedSignal_t ; func). inline . Definition at line 235 of file TWebCanvas.h. ◆ SetPaletteDelivery(). void TWebCanvas::SetPaletteDelivery ; (; Int_t ; val). inline . Definition at line 244 of file TWebCanvas.h. ◆ SetPrimitivesMerge(). void TWebCanvas::SetPrimitivesMerge ; (; Int_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:34840,load,load,34840,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,3,['load'],"['load', 'loadScript', 'loaded']"
Performance," Definition at line 6350 of file TPad.cxx. ◆ StartEditing(). virtual void TPad::StartEditing ; (; ). inlinevirtual . Definition at line 417 of file TPad.h. ◆ Streamer(). void TPad::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TSlider.; Definition at line 6713 of file TPad.cxx. ◆ StreamerNVirtual(). void TPad::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 419 of file TPad.h. ◆ Update(). void TPad::Update ; (; ). overridevirtual . Update pad. ; Implements TVirtualPad.; Definition at line 2935 of file TPad.cxx. ◆ UpdateAsync(). void TPad::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2947 of file TPad.cxx. ◆ UseCurrentStyle(). void TPad::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in pad. ; Reimplemented from TObject.; Definition at line 6927 of file TPad.cxx. ◆ UtoAbsPixel(). Int_t TPad::UtoAbsPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7459 of file TPad.cxx. ◆ UtoPixel(). Int_t TPad::UtoPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to pixel. ; Implements TVirtualPad.; Definition at line 7433 of file TPad.cxx. ◆ VtoAbsPixel(). Int_t TPad::VtoAbsPixel ; (; Double_t ; v); const. overridevirtual . Convert Y NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7467 of file TPad.cxx. ◆ VtoPixel(). Int_t TPad::VtoPixel ; (; Double_t ; v); const. overridevirtual . Convert Y NDC to pixel. ; Implements TVirtualPad.; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:127669,perform,performed,127669,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['perform'],['performed']
Performance, Definition at line 926 of file civetweb.c. Typedef Documentation. ◆ SOCK_OPT_TYPE. typedef const void* SOCK_OPT_TYPE. Definition at line 860 of file civetweb.c. ◆ SOCKET. typedef int SOCKET. Definition at line 925 of file civetweb.c. ◆ stop_flag_t. typedef int volatile stop_flag_t. Definition at line 2303 of file civetweb.c. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorLISTENING_PORTS ; NUM_THREADS ; RUN_AS_USER ; CONFIG_TCP_NODELAY ; MAX_REQUEST_SIZE ; LINGER_TIMEOUT ; CONNECTION_QUEUE_SIZE ; LISTEN_BACKLOG_SIZE ; THROTTLE ; ENABLE_KEEP_ALIVE ; REQUEST_TIMEOUT ; KEEP_ALIVE_TIMEOUT ; DECODE_URL ; DECODE_QUERY_STRING ; DOCUMENT_ROOT ; ACCESS_LOG_FILE ; ERROR_LOG_FILE ; CGI_EXTENSIONS ; CGI_ENVIRONMENT ; CGI_INTERPRETER ; CGI_INTERPRETER_ARGS ; CGI2_EXTENSIONS ; CGI2_ENVIRONMENT ; CGI2_INTERPRETER ; CGI2_INTERPRETER_ARGS ; PUT_DELETE_PASSWORDS_FILE ; PROTECT_URI ; AUTHENTICATION_DOMAIN ; ENABLE_AUTH_DOMAIN_CHECK ; SSI_EXTENSIONS ; ENABLE_DIRECTORY_LISTING ; GLOBAL_PASSWORDS_FILE ; INDEX_FILES ; ACCESS_CONTROL_LIST ; EXTRA_MIME_TYPES ; SSL_CERTIFICATE ; SSL_CERTIFICATE_CHAIN ; URL_REWRITE_PATTERN ; HIDE_FILES ; SSL_DO_VERIFY_PEER ; SSL_CACHE_TIMEOUT ; SSL_CA_PATH ; SSL_CA_FILE ; SSL_VERIFY_DEPTH ; SSL_DEFAULT_VERIFY_PATHS ; SSL_CIPHER_LIST ; SSL_PROTOCOL_VERSION ; SSL_SHORT_TRUST ; ACCESS_CONTROL_ALLOW_ORIGIN ; ACCESS_CONTROL_ALLOW_METHODS ; ACCESS_CONTROL_ALLOW_HEADERS ; ACCESS_CONTROL_ALLOW_CREDENTIALS ; ERROR_PAGES ; STATIC_FILE_MAX_AGE ; STATIC_FILE_CACHE_CONTROL ; STRICT_HTTPS_MAX_AGE ; ADDITIONAL_HEADER ; ALLOW_INDEX_SCRIPT_SUB_RES ; NUM_OPTIONS . Definition at line 1909 of file civetweb.c. ◆ anonymous enum. anonymous enum. EnumeratorREQUEST_HANDLER ; WEBSOCKET_HANDLER ; AUTH_HANDLER . Definition at line 2207 of file civetweb.c. ◆ anonymous enum. anonymous enum. EnumeratorCONTEXT_INVALID ; CONTEXT_SERVER ; CONTEXT_HTTP_CLIENT ; CONTEXT_WS_CLIENT . Definition at line 2243 of file civetweb.c. ◆ anonymous enum. anonymous enum. Enumerat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c.html:41137,THROTTLE,THROTTLE,41137,doc/master/civetweb_8c.html,https://root.cern,https://root.cern/doc/master/civetweb_8c.html,1,['THROTTLE'],['THROTTLE']
Performance, Definition at line 99 of file TStreamerInfo.h. ◆ fClassVersion. Int_t TStreamerInfo::fClassVersion. private . Class version identifier. ; Definition at line 89 of file TStreamerInfo.h. ◆ fComp. TCompInfo* TStreamerInfo::fComp. private . ![fNslots with less than fElements->GetEntries()*1.5 used] Compiled info ; Definition at line 96 of file TStreamerInfo.h. ◆ fCompFull. TCompInfo** TStreamerInfo::fCompFull. private . ![fElements->GetEntries()] ; Definition at line 98 of file TStreamerInfo.h. ◆ fCompOpt. TCompInfo** TStreamerInfo::fCompOpt. private . ![fNdata] ; Definition at line 97 of file TStreamerInfo.h. ◆ fElements. TObjArray* TStreamerInfo::fElements. private . Array of TStreamerElements. ; Definition at line 100 of file TStreamerInfo.h. ◆ fgCount. std::atomic< Int_t > TStreamerInfo::fgCount {0}. staticprivate . Number of TStreamerInfo instances. ; Definition at line 113 of file TStreamerInfo.h. ◆ fNdata. Int_t TStreamerInfo::fNdata. private . !number of optimized elements ; Definition at line 93 of file TStreamerInfo.h. ◆ fNfulldata. Int_t TStreamerInfo::fNfulldata. private . !number of elements ; Definition at line 94 of file TStreamerInfo.h. ◆ fNslots. Int_t TStreamerInfo::fNslots. private . !total number of slots in fComp. ; Definition at line 95 of file TStreamerInfo.h. ◆ fNumber. Int_t TStreamerInfo::fNumber. private . !Unique identifier ; Definition at line 91 of file TStreamerInfo.h. ◆ fNVirtualInfoLoc. Int_t TStreamerInfo::fNVirtualInfoLoc. private . ! Number of virtual info location to update. ; Definition at line 102 of file TStreamerInfo.h. ◆ fOldVersion. Version_t TStreamerInfo::fOldVersion. private . ! Version of the TStreamerInfo object read from the file ; Definition at line 101 of file TStreamerInfo.h. ◆ fOnFileClassVersion. Int_t TStreamerInfo::fOnFileClassVersion. private . !Class version identifier as stored on file. ; Definition at line 90 of file TStreamerInfo.h. ◆ fReadMemberWise. TStreamerInfoActions::TActionSequence* TStreamerInfo::fRead,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:69742,optimiz,optimized,69742,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['optimiz'],['optimized']
Performance," Density Estimation), a Fischer discriminant, a BDT; # and a shallow neural network; # Likelihood (""naive Bayes estimator""); if useLikelihood:; factory.BookMethod(; loader,; TMVA.Types.kLikelihood,; ""Likelihood"",; H=True,; V=False,; TransformOutput=True,; PDFInterpol=""Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10"",; NSmooth=1,; NAvEvtPerBin=50,; ); ; # Use a kernel density estimator to approximate the PDFs; if useLikelihoodKDE:; factory.BookMethod(; loader,; TMVA.Types.kLikelihood,; ""LikelihoodKDE"",; H=False,; V=False,; TransformOutput=False,; PDFInterpol=""KDE"",; KDEtype=""Gauss"",; KDEiter=""Adaptive"",; KDEFineFactor=0.3,; KDEborder=None,; NAvEvtPerBin=50,; ); ; # Fisher discriminant (same as LD); if useFischer:; factory.BookMethod(; loader,; TMVA.Types.kFisher,; ""Fisher"",; H=True,; V=False,; Fisher=True,; VarTransform=None,; CreateMVAPdfs=True,; PDFInterpolMVAPdf=""Spline2"",; NbinsMVAPdf=50,; NsmoothMVAPdf=10,; ); ; # Boosted Decision Trees; if useBDT:; factory.BookMethod(; loader,; TMVA.Types.kBDT,; ""BDT"",; V=False,; NTrees=200,; MinNodeSize=""2.5%"",; MaxDepth=2,; BoostType=""AdaBoost"",; AdaBoostBeta=0.5,; UseBaggedBoost=True,; BaggedSampleFraction=0.5,; SeparationType=""GiniIndex"",; nCuts=20,; ); ; # Multi-Layer Perceptron (Neural Network); if useMLP:; factory.BookMethod(; loader,; TMVA.Types.kMLP,; ""MLP"",; H=False,; V=False,; NeuronType=""tanh"",; VarTransform=""N"",; NCycles=100,; HiddenLayers=""N+5"",; TestRate=5,; UseRegulator=False,; ); ; ## Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ; ; ## Booking Deep Neural Network; ; # Here we define the option string for building the Deep Neural network model.; ; #### 1. Define DNN layout; ; # The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; ; # We define first the DNN layout:; ; # - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; # In c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:62007,load,loader,62007,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['load'],['loader']
Performance," Double32_t from the buffer when the factor and minimun value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ; Currently TBufferText does not optimize space in this case. ; Implements TBuffer.; Definition at line 510 of file TBufferText.cxx. ◆ ReadWithNbits() [1/2]. void TBufferText::ReadWithNbits ; (; Double_t * ; d, . Int_t ; nbits . ). finalvirtual . Read a Double32_t from the buffer when the number of bits is specified (explicitly or not) see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ; Currently TBufferText does not optimize space in this case. ; Implements TBuffer.; Definition at line 543 of file TBufferText.cxx. ◆ ReadWithNbits() [2/2]. void TBufferText::ReadWithNbits ; (; Float_t * ; f, . Int_t ; nbits . ). finalvirtual . Read a Float16_t from the buffer when the number of bits is specified (explicitly or not) see comments about Float16_t encoding at TBufferFile::WriteFloat16(). ; Currently TBufferText does not optimize space in this case. ; Implements TBuffer.; Definition at line 521 of file TBufferText.cxx. ◆ SetByteCount(). void TBufferText::SetByteCount ; (; UInt_t ; , . Bool_t ; = kFALSE . ). inlinefinalvirtual . Implements TBuffer.; Definition at line 80 of file TBufferText.h. ◆ SetDoubleFormat(). void TBufferText::SetDoubleFormat ; (; const char * ; fmt = ""%.14e""). static . set printf format for double members, default ""%.14e"" use it after SetFloatFormat, which also overwrites format for doubles ; Definition at line 818 of file TBufferText.cxx. ◆ SetFloatFormat(). void TBufferText::SetFloatFormat ; (; const char * ; fmt = ""%e""). static . set printf format for float/double members, default ""%e"" to change format only for doubles, use SetDoubleFormat ; Definition at line 798 of file TBufferText.cxx. ◆ SkipVersion(). void TBufferText::SkipVersion ; (; const TClass * ; cl = nullptr). finalvirtual . Skip class version from I/O buffer. ; Implements TBuffer.; Definition at line 678 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:44796,optimiz,optimize,44796,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['optimiz'],['optimize']
Performance," Double_t > & ; pars). privatevirtual . return the estimator (from current FOM) for the fitting interface ; Implements TMVA::IFitterTarget.; Definition at line 307 of file OptimizeConfigParameters.cxx. ◆ GetBkgEffAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgEffAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background efficiency for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 546 of file OptimizeConfigParameters.cxx. ◆ GetBkgRejAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgRejAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background rejection for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 583 of file OptimizeConfigParameters.cxx. ◆ GetFOM(). Double_t TMVA::OptimizeConfigParameters::GetFOM ; (; ). private . Return the Figure of Merit (FOM) used in the parameter optimization process. ; Definition at line 350 of file OptimizeConfigParameters.cxx. ◆ GetMethod(). MethodBase * TMVA::OptimizeConfigParameters::GetMethod ; (; ). inlineprivate . Definition at line 72 of file OptimizeConfigParameters.h. ◆ GetMVADists(). void TMVA::OptimizeConfigParameters::GetMVADists ; (; ). private . fill the private histograms with the mva distributions for sig/bkg ; Definition at line 393 of file OptimizeConfigParameters.cxx. ◆ GetROCIntegral(). Double_t TMVA::OptimizeConfigParameters::GetROCIntegral ; (; ). private . calculate the area (integral) under the ROC curve as a overall quality measure of the classification ; making pdfs out of the MVA-output distributions doesn't work reliably for cases where the MVA-output isn't a smooth distribution. this happens ""frequently"" in BDTs for example when the number of trees is small resulting in only some discrete possible MVA output values. (I still leave the code here, but use this with care!!! The defau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:6933,optimiz,optimization,6933,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['optimiz'],['optimization']
Performance," Double_t TMVA::OptimizeConfigParameters::GetBkgEffAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background efficiency for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 546 of file OptimizeConfigParameters.cxx. ◆ GetBkgRejAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgRejAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background rejection for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 583 of file OptimizeConfigParameters.cxx. ◆ GetFOM(). Double_t TMVA::OptimizeConfigParameters::GetFOM ; (; ). private . Return the Figure of Merit (FOM) used in the parameter optimization process. ; Definition at line 350 of file OptimizeConfigParameters.cxx. ◆ GetMethod(). MethodBase * TMVA::OptimizeConfigParameters::GetMethod ; (; ). inlineprivate . Definition at line 72 of file OptimizeConfigParameters.h. ◆ GetMVADists(). void TMVA::OptimizeConfigParameters::GetMVADists ; (; ). private . fill the private histograms with the mva distributions for sig/bkg ; Definition at line 393 of file OptimizeConfigParameters.cxx. ◆ GetROCIntegral(). Double_t TMVA::OptimizeConfigParameters::GetROCIntegral ; (; ). private . calculate the area (integral) under the ROC curve as a overall quality measure of the classification ; making pdfs out of the MVA-output distributions doesn't work reliably for cases where the MVA-output isn't a smooth distribution. this happens ""frequently"" in BDTs for example when the number of trees is small resulting in only some discrete possible MVA output values. (I still leave the code here, but use this with care!!! The default however is to use the distributions!!! ; Definition at line 458 of file OptimizeConfigParameters.cxx. ◆ GetScanIndices(). std::vector< int > TMVA::OptimizeConfigParameters::GetScanIndices ; (; int ; val, . std::vector< i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:7142,Optimiz,OptimizeConfigParameters,7142,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Optimiz'],['OptimizeConfigParameters']
Performance," Double_t TQpResidual::GetDualityGap ; (; ). inline . Definition at line 109 of file TQpResidual.h. ◆ GetResidualNorm(). Double_t TQpResidual::GetResidualNorm ; (; ). inline . Definition at line 108 of file TQpResidual.h. ◆ GondzioProjection(). void TQpResidual::GondzioProjection ; (; TVectorD & ; v, . Double_t ; rmin, . Double_t ; rmax . ). staticprotected . Replace each component r3_i of the complementarity component of the residuals by r3p_i-r3_i, where r3p_i is the projection of r3_i onto the box [rmin, rmax]. ; Then if the resulting value is less than -rmax, replace it by -rmax. ; Definition at line 357 of file TQpResidual.cxx. ◆ operator=(). TQpResidual & TQpResidual::operator= ; (; const TQpResidual & ; source). Assignment operator. ; Definition at line 378 of file TQpResidual.cxx. ◆ Project_r3(). void TQpResidual::Project_r3 ; (; Double_t ; rmin, . Double_t ; rmax . ). Perform the projection operation required by Gondzio algorithm: replace each component r3_i of the complementarity component of the residuals by r3p_i-r3_i, where r3p_i is the projection of r3_i onto the box [rmin, rmax]. ; Then if the resulting value is less than -rmax, replace it by -rmax. ; Definition at line 299 of file TQpResidual.cxx. ◆ Set_r3_xz_alpha(). void TQpResidual::Set_r3_xz_alpha ; (; TQpVar * ; vars, . Double_t ; alpha . ). Set the ""complementarity"" component of the residuals to the pairwise products of the complementary variables plus a constant alpha . ; Definition at line 257 of file TQpResidual.cxx. ◆ ValidNonZeroPattern(). Bool_t TQpResidual::ValidNonZeroPattern ; (; ). Check if vector elements as selected through array indices are non-zero. ; Definition at line 323 of file TQpResidual.cxx. Member Data Documentation. ◆ fCloIndex. TVectorD TQpResidual::fCloIndex. protected . Definition at line 83 of file TQpResidual.h. ◆ fCupIndex. TVectorD TQpResidual::fCupIndex. protected . Definition at line 82 of file TQpResidual.h. ◆ fDualityGap. Double_t TQpResidual::fDualityGap. prot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpResidual.html:14993,Perform,Perform,14993,doc/master/classTQpResidual.html,https://root.cern,https://root.cern/doc/master/classTQpResidual.html,1,['Perform'],['Perform']
Performance," Double_t im = 0); Return CERNlib complex error function for Z(re,im). RooComplex ComplexErrFunc(const RooComplex& z); Return CERNlib complex error function. This code is translated from the fortran version in the CERN mathlib.; (see ftp://asisftp.cern.ch/cernlib/share/pro/src/mathlib/gen/c/cwerf64.F). void initFastCERF(Int_t reBins = 800, Double_t reMin = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:3847,perform,performed,3847,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,4,['perform'],['performed']
Performance," Double_t ymax = 0.95, const RooCmdArg* formatCmd = 0); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsPdf::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsPdf::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; voidRooAbsPdf::plotOnCompSelect(RooArgSet* selNodes) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; static voidRooAbsPdf::raiseEvalError(); Int_t*RooAbsPdf::randomizeProtoOrder(Int_t nProto, Int_t nGen, Bool_t resample = kFALSE) const; virtual Bool_tRooAbsPdf::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); voidRooAbsReal::selectComp(Bool_t flag); virtual voidselectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); virtual voidselectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); voidRooAbsArg::setProxyNormSet(const RooArgSet* nset); voidRooAbsArg::setShapeDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::setTreeBranchStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); virtual Bool_tRooAbsPdf::syncNormalization(const RooArgSet* dset, Bool_t adjustProxies = kTRUE) const; Double_tRooAbsReal::traceEval(const RooArgSet* set) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy); voidupdateCoefficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const. Data Members; publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:35944,Cache,CacheElem,35944,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,8,"['Cache', 'cache']","['CacheElem', 'cache']"
Performance," Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive2(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive3(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive4(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalParFast(const Double_t* x, const Double_t* params); Evaluate this formula. The current value of variables x,y,z,t is passed through the pointer x.; The parameters used will be the ones in the array params if params is given; otherwise parameters will be taken from the stored data members fParams. /*; ; */. Int_t PreCompile(); Pre compile function. void SetMaxima(Int_t maxop = 1000, Int_t maxpar = 1000, Int_t maxconst = 1000); static function to set the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants; None of these parameters cannot be less than 10 (default is 1000); call this function to increase one or all maxima when processing; very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; If you process many functions with a small number of operations/parameters; you may gain some memory and performance by decreasing these values. Int_t * GetOper() const; { return fOper; }. Short_t GetAction(Int_t code) const; { return fOper[code] >> kTFOperShift; }. Int_t GetActionParam(Int_t code) const; { return fOper[code] & kTFOperMask; }. void SetAction(Int_t code, Int_t value, Int_t param = 0). Int_t * GetOperOptimized() const; { return fOperOptimized; }. Short_t GetActionOptimized(Int_t code) const; { return fOperOptimized[code] >> kTFOperShift; }. Int_t GetActionParamOptimized(Int_t code) const; { return fOperOptimized[code] & kTFOperMask; }. void SetActionOptimized(Int_t code, Int_t value, Int_t param = 0). Double_t EvalPar(const Double_t* x, const Double_t* params = 0); {return ((*this).*fOptimal)(x,params);}. Int_t GetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:29840,perform,performance,29840,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,1,['perform'],['performance']
Performance," Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive2(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive3(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive4(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalParFast(const Double_t* x, const Double_t* params); Evaluate this formula. The current value of variables x,y,z,t is passed through the pointer x.; The parameters used will be the ones in the array params if params is given; otherwise parameters will be taken from the stored data members fParams. /*; ; */. Int_t PreCompile(); Pre compile function. void SetMaxima(Int_t maxop = 1000, Int_t maxpar = 1000, Int_t maxconst = 1000); static function to set the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants; None of these parameters cannot be less than 10 (default is 1000); call this function to increase one or all maxima when processing; very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; If you process many functions with a small number of operations/parameters; you may gain some memory and performance by decreasing these values. void GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); static function to get the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants. Int_t * GetOper() const; { return fOper; }. Short_t GetAction(Int_t code) const; { return fOper[code] >> kTFOperShift; }. Int_t GetActionParam(Int_t code) const; { return fOper[code] & kTFOperMask; }. void SetAction(Int_t code, Int_t value, Int_t param = 0). Int_t * GetOperOptimized() const; { return fOperOptimized; }. Short_t GetActionOptimized(Int_t code) const; { return fOperOptimized[code] >> kTFOperShift; }. Int_t GetActionParamOptimized(Int_t code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFormula.html:33235,perform,performance,33235,root/html602/TFormula.html,https://root.cern,https://root.cern/root/html602/TFormula.html,2,['perform'],['performance']
Performance," Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/PiecewiseInterpolation.html:2245,Cache,CacheModeRooAbsArg,2245,root/html534/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html534/PiecewiseInterpolation.html,2,['Cache'],['CacheModeRooAbsArg']
Performance," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMehrotraSolver.html:8705,optimiz,optimization,8705,root/html528/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html528/TMehrotraSolver.html,1,['optimiz'],['optimization']
Performance," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMehrotraSolver.html:8774,optimiz,optimization,8774,root/html530/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html530/TMehrotraSolver.html,1,['optimiz'],['optimization']
Performance," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMehrotraSolver.html:8774,optimiz,optimization,8774,root/html532/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html532/TMehrotraSolver.html,1,['optimiz'],['optimization']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigN,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBMixDecay.html:39631,cache,cache,39631,root/html526/RooBMixDecay.html,https://root.cern,https://root.cern/root/html526/RooBMixDecay.html,1,['cache'],['cache']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC genera,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBMixDecay.html:40205,cache,cache,40205,root/html528/RooBMixDecay.html,https://root.cern,https://root.cern/root/html528/RooBMixDecay.html,1,['cache'],['cache']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculatin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBMixDecay.html:40482,cache,cache,40482,root/html530/RooBMixDecay.html,https://root.cern,https://root.cern/root/html530/RooBMixDecay.html,1,['cache'],['cache']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalcul,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBMixDecay.html:40885,cache,cache,40885,root/html532/RooBMixDecay.html,https://root.cern,https://root.cern/root/html532/RooBMixDecay.html,1,['cache'],['cache']
Performance," Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddition.html:2455,Cache,CacheModeRooAbsArg,2455,root/html534/RooAddition.html,https://root.cern,https://root.cern/root/html534/RooAddition.html,2,['Cache'],['CacheModeRooAbsArg']
Performance," Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than SLAMBG. ; Definition at line 4736 of file TMinuit.cxx. ◆ mnmatu(). void TMinuit::mnmatu ; (; Int_t ; kode). virtual . Prints the covariance matrix v when KODE=1. ; always prints the global correlations, and calculates and prints the individual correlation coefficients ; Definition at line 4968 of file TMinuit.cxx. ◆ mnmigr(). void TMinuit::mnmigr ; (; ). virtual . Performs a local function minimization. ; Performs a local function minimization using basically the method of Davidon-Fletcher-Powell as modified by Fletcher; ref. – Fletcher, Comp.J. 13,317 (1970) ""switching method"" ; Definition at line 5048 of file TMinuit.cxx. ◆ mnmnos(). void TMinuit::mnmnos ; (; ). virtual . Performs a MINOS error analysis. ; Performs a MINOS error analysis on those parameters for which it is requested on the MINOS command by calling MNMNOT for each parameter requested. ; Definition at line 5388 of file TMinuit.cxx. ◆ mnmnot(). void TMinuit::mnmnot ; (; Int_t ; ilax, . Int_t ; ilax2, . Double_t & ; val2pl, . Double_t & ; val2mi . ). virtual . Performs a MINOS error analysis on one parameter. ; The parameter ILAX is varied, and the minimum of the function with respect to the other parameters is followed until it crosses the value FMIN+UP. ; Definition at line 5463 of file TMinuit.cxx. ◆ mnparm(). void TMinuit::mnparm ; (; Int_t ; k1, . TString ; cnamj, . Double_t ; uk, . Double_t ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:56198,Perform,Performs,56198,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['Perform'],['Performs']
Performance," DynFindSymbol(module, entry);; 1962 if (f) return 0;; 1963 return -1;; 1964}; 1965 ; 1966///////////////////////////////////////////////////////////////////////////////; 1967/// Load all libraries known to ROOT via the rootmap system.; 1968/// Returns the number of top level libraries successfully loaded.; 1969 ; 1970UInt_t TSystem::LoadAllLibraries(); 1971{; 1972 UInt_t nlibs = 0;; 1973 ; 1974 TEnv* mapfile = gInterpreter->GetMapfile();; 1975 if (!mapfile || !mapfile->GetTable()) return 0;; 1976 ; 1977 std::set<std::string> loadedlibs;; 1978 std::set<std::string> failedlibs;; 1979 ; 1980 TEnvRec* rec = nullptr;; 1981 TIter iEnvRec(mapfile->GetTable());; 1982 while ((rec = (TEnvRec*) iEnvRec())) {; 1983 TString libs = rec->GetValue();; 1984 TString lib;; 1985 Ssiz_t pos = 0;; 1986 while (libs.Tokenize(lib, pos)) {; 1987 // check that none of the libs failed to load; 1988 if (failedlibs.find(lib.Data()) != failedlibs.end()) {; 1989 // don't load it or any of its dependencies; 1990 libs = """";; 1991 break;; 1992 }; 1993 }; 1994 pos = 0;; 1995 while (libs.Tokenize(lib, pos)) {; 1996 // ignore libCore - it's already loaded; 1997 if (lib.BeginsWith(""libCore"")); 1998 continue;; 1999 ; 2000 if (loadedlibs.find(lib.Data()) == loadedlibs.end()) {; 2001 // just load the first library - TSystem will do the rest.; 2002 auto res = gSystem->Load(lib);; 2003 if (res >=0) {; 2004 if (res == 0) ++nlibs;; 2005 loadedlibs.insert(lib.Data());; 2006 } else {; 2007 failedlibs.insert(lib.Data());; 2008 }; 2009 }; 2010 }; 2011 }; 2012 return nlibs;; 2013}; 2014 ; 2015////////////////////////////////////////////////////////////////////////////////; 2016/// Find a dynamic library called lib using the system search paths.; 2017/// Appends known extensions if needed. Returned string must be deleted; 2018/// by the user!; 2019 ; 2020char *TSystem::DynamicPathName(const char *lib, Bool_t quiet /*=kFALSE*/); 2021{; 2022 TString sLib(lib);; 2023 if (FindDynamicLibrary(sLib, quiet)); 2024 return St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:64336,load,load,64336,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['load'],['load']
Performance," DynamicLibraryManager::loadLibrary; 6573 std::string mangled_name = std::string(errMsg.split(""undefined symbol: "").second);; 6574 void* res = ((TCling*)gCling)->LazyFunctionCreatorAutoload(mangled_name);; 6575 cling::DynamicLibraryManager* DLM = fInterpreter->getDynamicLibraryManager();; 6576 if (res && DLM && (DLM->loadLibrary(libStem, permanent, resolved) == cling::DynamicLibraryManager::kLoadLibSuccess)); 6577 // Return success when LazyFunctionCreatorAutoload could find mangled_name; 6578 return true;; 6579 } else {; 6580 // The callback is from IncrementalExecutor::diagnoseUnresolvedSymbols; 6581 if ( ((TCling*)gCling)->LazyFunctionCreatorAutoload(errmessage)); 6582 return true;; 6583 }; 6584 ; 6585 return false;; 6586}; 6587 ; 6588////////////////////////////////////////////////////////////////////////////////; 6589/// Autoload a library based on a missing symbol.; 6590 ; 6591void* TCling::LazyFunctionCreatorAutoload(const std::string& mangled_name) {; 6592 std::string dlsym_mangled_name = ROOT::TMetaUtils::DemangleNameForDlsym(mangled_name);; 6593 ; 6594 // We have already loaded the library.; 6595 if (void* Addr = llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(dlsym_mangled_name)); 6596 return Addr;; 6597 ; 6598 const cling::DynamicLibraryManager &DLM = *GetInterpreterImpl()->getDynamicLibraryManager();; 6599 R__LOCKGUARD(gInterpreterMutex);; 6600 ; 6601 auto LibLoader = [](const std::string& LibName) -> bool {; 6602 if (gSystem->Load(LibName.c_str(), """", false) < 0) {; 6603 ::Error(""TCling__LazyFunctionCreatorAutoloadForModule"",; 6604 ""Failed to load library %s"", LibName.c_str());; 6605 return false;; 6606 }; 6607 return true; //success.; 6608 };; 6609 ; 6610 std::string libName = DLM.searchLibrariesForSymbol(mangled_name,; 6611 /*searchSystem=*/ true);; 6612 ; 6613 assert(!llvm::StringRef(libName).startswith(""libNew"") &&; 6614 ""We must not resolve symbols from libNew!"");; 6615 ; 6616 if (libName.empty()); 6617 return nullptr;; 6618 ; 6619 if (!LibLoa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:256698,load,loaded,256698,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," ETupleOrderingETupleOrderingCheck in what order the member of a tuple are layout.Definition TCling.cxx:3905; ETupleOrdering::kAscending@ kAscending; ETupleOrdering::kDescending@ kDescending; ETupleOrdering::kUnexpected@ kUnexpected; TCling__LibraryLoadingFailedbool TCling__LibraryLoadingFailed(const std::string &errmessage, const std::string &libStem, bool permanent, bool resolved)Lookup libraries in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH with mangled_name, which is extracted by er...Definition TCling.cxx:351; gIgnoredPCMNamesstatic const std::unordered_set< std::string > gIgnoredPCMNamesList of dicts that have the PCM information already in the PCH.Definition TCling.cxx:1939; s_IsLibraryLoadedstatic Bool_t s_IsLibraryLoaded(const char *libname, cling::Interpreter *fInterpreter)Definition TCling.cxx:3129; TCling__GetClassSharedLibsconst char * TCling__GetClassSharedLibs(const char *className, bool skipCore)Definition TCling.cxx:633; loadGlobalModuleIndexstatic GlobalModuleIndex * loadGlobalModuleIndex(cling::Interpreter &interp)Definition TCling.cxx:1080; TClingLookupHelper__ExistingTypeCheckbool TClingLookupHelper__ExistingTypeCheck(const std::string &tname, std::string &result)Try hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing.Definition TCling.cxx:903; HasASTFileOnDiskstatic bool HasASTFileOnDisk(clang::Module *M, const clang::Preprocessor &PP, std::string *FullFileName=nullptr)Checks if there is an ASTFile on disk for the given module M.Definition TCling.cxx:1065; TCling__UnlockCompilationDuringUserCodeExecutionvoid TCling__UnlockCompilationDuringUserCodeExecution(void *)Unlock the interpreter.Definition TCling.cxx:379; AlternateTuplestatic std::string AlternateTuple(const char *classname, const cling::LookupHelper &lh, Bool_t silent)Definition TCling.cxx:3947; R__InitStreamerInfoFactorystatic bool R__InitStreamerInfoFactory()Helper to initialize TVirtualStreamerInfo's factor early.Definition TCling.cxx:1664; TCling__",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:378675,load,loadGlobalModuleIndexstatic,378675,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['load'],"['loadGlobalModuleIndex', 'loadGlobalModuleIndexstatic']"
Performance," Error bars per bin are given by Eq. (6). . The ; reproduce the true distributions of the species in the control variable , within the above defined statistical uncertainties. Illustrations. To illustrate the technique, one considers an example derived from the analysis where . have been first used (charmless B decays). One is dealing with a data; sample in which two species are present: the first is termed signal and; the second background. A maximum Likelihood fit is performed to obtain; the two yields and . The fit relies on two discriminating variables collectively denoted  which are chosen within three possible variables denoted , and .; The variable which is not incorporated in  is used as the control variable . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1:; Distributions of the three discriminating variables available to perform the Likelihood fit: ; , , .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events. Chosing and as discriminating variables to determine and through a maximum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:5710,perform,perform,5710,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,4,['perform'],['perform']
Performance," Error(""Lookup"", ""file %s cannot be read\n"", eurl.Data());; 1817 }; 1818 }; 1819 if (nelements > 0); 1820 printf(""Lookup | %3d %% finished\n"", 100 * nlook / nelements);; 1821 else; 1822 printf(""\n"");; 1823 fflush(stdout);; 1824 SafeDelete(stg);; 1825}; 1826 ; 1827////////////////////////////////////////////////////////////////////////////////; 1828/// Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED); 1829 ; 1830void TChain::Loop(Option_t* option, Long64_t nentries, Long64_t firstentry); 1831{; 1832 Error(""Loop"", ""Function not yet implemented"");; 1833 ; 1834 if (option || nentries || firstentry) { } // keep warnings away; 1835 ; 1836#if 0; 1837 if (LoadTree(firstentry) < 0) return;; 1838 ; 1839 if (firstentry < 0) firstentry = 0;; 1840 Long64_t lastentry = firstentry + nentries -1;; 1841 if (lastentry > fEntries-1) {; 1842 lastentry = fEntries -1;; 1843 }; 1844 ; 1845 GetPlayer();; 1846 GetSelector();; 1847 fSelector->Start(option);; 1848 ; 1849 Long64_t entry = firstentry;; 1850 Int_t tree,e0,en;; 1851 for (tree=0;tree<fNtrees;tree++) {; 1852 e0 = fTreeOffset[tree];; 1853 en = fTreeOffset[tree+1] - 1;; 1854 if (en > lastentry) en = lastentry;; 1855 if (entry > en) continue;; 1856 ; 1857 LoadTree(entry);; 1858 fSelector->BeginFile();; 1859 ; 1860 while (entry <= en) {; 1861 fSelector->Execute(fTree, entry - e0);; 1862 entry++;; 1863 }; 1864 fSelector->EndFile();; 1865 }; 1866 ; 1867 fSelector->Finish(option);; 1868#endif; 1869}; 1870 ; 1871////////////////////////////////////////////////////////////////////////////////; 1872/// List the chain.; 1873 ; 1874void TChain::ls(Option_t* option) const; 1875{; 1876 TObject::ls(option);; 1877 TIter next(fFiles);; 1878 TChainElement* file = nullptr;; 1879 TROOT::IncreaseDirLevel();; 1880 while ((file = (TChainElement*)next())) {; 1881 file->ls(option);; 1882 }; 1883 TROOT::DecreaseDirLevel();; 1884}; 1885 ; 1886////////////////////////////////////////////////////////////////////////////////; 1887/// Mer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:65772,Load,LoadTree,65772,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['Load'],['LoadTree']
Performance," Evaluate deep neural network on CPU using batches with size = 128; : ; DNN_CPU : [dataset] : Evaluation of DNN_CPU on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.247 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ PyKeras ] :␛[0m; : ; : Keras is a high-level API for the Theano and Tensorflow packages.; : This method wraps the training and predictions steps of the Keras; : Python package for TMVA, so that dataloading, preprocessing and; : evaluation can be done within the TMVA system. To use this Keras; : interface, you have to generate a model with Keras first. Then,; : this model can be loaded and trained in TMVA.; : ; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; : Split TMVA training data in 11200 training events and 2800 validation events; : Training Model Summary; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Epoch 1/20; ; 1/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:26780,load,loaded,26780,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['load'],['loaded']
Performance," Evaluate deep neural network on CPU using batches with size = 128; : ; DNN_CPU : [dataset] : Evaluation of DNN_CPU on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.253 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ PyKeras ] :␛[0m; : ; : Keras is a high-level API for the Theano and Tensorflow packages.; : This method wraps the training and predictions steps of the Keras; : Python package for TMVA, so that dataloading, preprocessing and; : evaluation can be done within the TMVA system. To use this Keras; : interface, you have to generate a model with Keras first. Then,; : this model can be loaded and trained in TMVA.; : ; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; : Split TMVA training data in 11200 training events and 2800 validation events; : Training Model Summary; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Epoch 1/20; ; 1/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:27220,load,loaded,27220,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['load'],['loaded']
Performance," Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:27341,load,load,27341,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,3,['load'],['load']
Performance," Exp model with sigma and tau parameters. ;  ;  RooGExpModel (const RooGExpModel &other, const char *name=nullptr);  ; void advertiseAsymptoticIntegral (bool flag);  ; void advertiseFlatScaleFactorIntegral (bool flag);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; Int_t basisCode (const char *name) const override;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual void changeBasis (RooFormulaVar *basis);  Change the basis function we convolute with. ;  ; virtual RooResolutionModel * convolution (RooF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGExpModel.html:4660,Load,Load,4660,doc/master/classRooGExpModel.html,https://root.cern,https://root.cern/doc/master/classRooGExpModel.html,1,['Load'],['Load']
Performance," Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsSelfCachedReal.html:33355,cache,cache,33355,root/html526/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsSelfCachedReal.html,2,['cache'],['cache']
Performance," Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TClass; 13TClass instances represent classes, structs and namespaces in the ROOT type system.; 14 ; 15TClass instances are created starting from different sources of information:; 161. TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an *emulated TClass*.; 172. From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; 183. From a lookup in the AST built by cling.; 19 ; 20If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the; 21class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary; 22to ROOT to perform I/O of instances of the class/struct it represents.; 23The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all; 24the three are triggered, modifying the state of the TClass instance.; 25 ; 26In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static; 27TClass::GetClass method:; 28 ; 29~~~ {.cpp}; 30auto myClassTClass_0 = TClass::GetClass(""myClass"");; 31auto myClassTClass_1 = TClass::GetClass<myClass>();; 32auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; 33~~~; 34 ; 35The name of classes is crucial for ROOT. A careful procedure of *name normalization* is carried out for; 36each and every class. A *normalized name* is a valid C++ class name.; 37In order to access the name of a class within the ROOT type system, the method TClass::GetName() can be used.; 38*/; 39 ; 40//*-*x7.5 macros/layout_class; 41 ; 42#include ""TClass.h""; 43 ; 44#include ""strlcpy.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:1404,perform,perform,1404,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['perform'],['perform']
Performance," For each event, the branch containing the number of tracks is read. In case the number of tracks is less than 585, the full event is read in memory. This test is obviously not possible in non-split mode. In non-split mode, the full event must be read in memory. The times reported in the table correspond to complete I/O operations necessary to deal with machine independent binary files. On Linux, this also includes byte-swapping operations. The ROOT file allows for direct access to any event in the file and direct access to any part of an event when split=1.; Note also that the uncompressed file generated with split=0 is 48.7 Mbytes and only 47.17 Mbytes for the option split=1. The difference in size is due to the object identification mechanism overhead when the event is written to a single buffer. This overhead does not exist in split mode because the branch buffers are optimized for homogeneous data types. You can run the test programs on your architecture. The program Event will report the write performance. You can measure the read performance by executing the scripts eventa and eventb. The performance depends not only of the processor type, but also of the disk devices (local, NFS, AFS, etc.).; 12.24 Chains. A TChain object is a list of ROOT files containing the same tree. As an example, assume we have three files called file1.root, file2.root, file3.root. Each file contains one tree called “T”. We can create a chain with the following statements:; TChain chain(""T""); // name of the tree is the argument; chain.Add(""file1.root"");; chain.Add(""file2.root"");; chain.Add(""file3.root"");; The name of the TChain will be the same as the name of the tree; in this case it will be ""T"". Note that twoobjects can have the same name as long as they are not histograms in the same directory, because there, the histogram names are used to build a hash table. The class TChain is derived from the class TTree. For example, to generate a histogram corresponding to the attribute “x” in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:651060,perform,performance,651060,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performance']
Performance," For example the equivalent of chain.Draw(""x"",""w""); is chain.SetWeight(w,""global"");; chain.Draw(""x"");; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; By default the weight used will be the weight of each Tree in the TChain. However, one can force the individual weights to be ignored by specifying the option ""global"". In this case, the TChain global weight will be used for all Trees. ; Reimplemented from TTree.; Definition at line 3033 of file TChain.cxx. ◆ Streamer(). void TChain::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 3047 of file TChain.cxx. ◆ StreamerNVirtual(). void TChain::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file TChain.h. ◆ UseCache(). void TChain::UseCache ; (; Int_t ; maxCacheSize = 10, . Int_t ; pageSize = 0 . ). virtual . Dummy function kept for back compatibility. ; The cache is now activated automatically when processing TTrees/TChain. ; Definition at line 3089 of file TChain.cxx. Member Data Documentation. ◆ fCanDeleteRefs. bool TChain::fCanDeleteRefs. protected . ! If true, TProcessIDs are deleted when closing a file ; Definition at line 40 of file TChain.h. ◆ fFile. TFile* TChain::fFile. protected . ! Pointer to current file (We own the file). ; Definition at line 42 of file TChain.h. ◆ fFiles. TObjArray* TChain::fFiles. protected . -> List of file names containing the trees (TChainElement, owned) ; Definition at line 43 of file TChain.h. ◆ fGlobalRegistration. bool TChain::fGlobalRegistration. protected . ! if true, bypass use of global lists ; Definition at line 46 of file TChain.h. ◆ fNtrees. Int_t TChain::fNtrees. protected . Number of trees. ; Definition at line 37 of file TChain.h. ◆ fProofChain. TChain* TChain::fProofChain. protected . ! chain proxy when going to be processed by PROOF ; Definition at line 45 of file TChain.h. ◆ fStatus. TList* TChain::fStatus. protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:103627,cache,cache,103627,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['cache'],['cache']
Performance," For example the equivalent of chain.Draw(""x"",""w""); is chain.SetWeight(w,""global"");; chain.Draw(""x"");; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; By default the weight used will be the weight of each Tree in the TChain. However, one can force the individual weights to be ignored by specifying the option ""global"". In this case, the TChain global weight will be used for all Trees. ; Reimplemented from TTree.; Definition at line 3059 of file TChain.cxx. ◆ Streamer(). void TChain::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 3073 of file TChain.cxx. ◆ StreamerNVirtual(). void TChain::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file TChain.h. ◆ UseCache(). void TChain::UseCache ; (; Int_t ; maxCacheSize = 10, . Int_t ; pageSize = 0 . ). virtual . Dummy function kept for back compatibility. ; The cache is now activated automatically when processing TTrees/TChain. ; Definition at line 3115 of file TChain.cxx. Member Data Documentation. ◆ fCanDeleteRefs. bool TChain::fCanDeleteRefs. protected . ! If true, TProcessIDs are deleted when closing a file ; Definition at line 40 of file TChain.h. ◆ fFile. TFile* TChain::fFile. protected . ! Pointer to current file (We own the file). ; Definition at line 42 of file TChain.h. ◆ fFiles. TObjArray* TChain::fFiles. protected . -> List of file names containing the trees (TChainElement, owned) ; Definition at line 43 of file TChain.h. ◆ fGlobalRegistration. bool TChain::fGlobalRegistration. protected . ! if true, bypass use of global lists ; Definition at line 46 of file TChain.h. ◆ fNtrees. Int_t TChain::fNtrees. protected . Number of trees. ; Definition at line 37 of file TChain.h. ◆ fProofChain. TChain* TChain::fProofChain. protected . ! chain proxy when going to be processed by PROOF ; Definition at line 45 of file TChain.h. ◆ fStatus. TList* TChain::fStatus. protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:104248,cache,cache,104248,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['cache'],['cache']
Performance," FreeGC(GContext_t gc); Free a graphics context. TGFont * GetFont(const char* font, Bool_t fixedDefault = kTRUE); Get a font from the font pool. Fonts must be freed via; TGClient::FreeFont(). Returns 0 in case of error or if font; does not exist. If fixedDefault is false the ""fixed"" font; will not be substituted as fallback when the asked for font; does not exist. TGFont * GetFont(const TGFont* font); Get again specified font. Will increase its usage count. void FreeFont(const TGFont* font); Free a font. void NeedRedraw(TGWindow* w, Bool_t force = kFALSE); Set redraw flags. Bool_t GetColorByName(const char* name, Pixel_t& pixel) const; Get a color by name. If color is found return kTRUE and pixel is; set to the color's pixel value, kFALSE otherwise. FontStruct_t GetFontByName(const char* name, Bool_t fixedDefault = kTRUE) const; Get a font by name. If font is not found, fixed font is returned,; if fixed font also does not exist return 0 and print error.; The loaded font needs to be freed using TVirtualX::DeleteFont().; If fixedDefault is false the ""fixed"" font will not be substituted; as fallback when the asked for font does not exist. Pixel_t GetHilite(Pixel_t base_color) const; Return pixel value of hilite color based on base_color. Pixel_t GetShadow(Pixel_t base_color) const; Return pixel value of shadow color based on base_color.; Shadow is 60% of base_color intensity. void FreeColor(Pixel_t color) const; Free color. void RegisterWindow(TGWindow* w); Add a TGWindow to the clients list of windows. void UnregisterWindow(TGWindow* w); Remove a TGWindow from the list of windows. void RegisterPopup(TGWindow* w); Add a popup menu to the list of popups. This list is used to pass; events to popup menus that are popped up over a transient window which; is waited for (see WaitFor()). void UnregisterPopup(TGWindow* w); Remove a popup menu from the list of popups. void AddUnknownWindowHandler(TGUnknownWindowHandler* h); Add handler for unknown (i.e. unregistered) windows. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGClient.html:15074,load,loaded,15074,root/html528/TGClient.html,https://root.cern,https://root.cern/root/html528/TGClient.html,3,['load'],['loaded']
Performance," Function Documentation. ◆ analyticalIntegralWN(). double RooRealSumFunc::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ; This functions will only be called with codes returned by getAnalyticalIntegral, except code zero. ; Reimplemented from RooAbsReal.; Definition at line 136 of file RooRealSumFunc.cxx. ◆ binBoundaries(). std::list< double > * RooRealSumFunc::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 142 of file RooRealSumFunc.cxx. ◆ canNodeBeCached(). CacheMode RooRealSumFunc::canNodeBeCached ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsArg.; Definition at line 58 of file RooRealSumFunc.h. ◆ checkObservables(). bool RooRealSumFunc::checkObservables ; (; const RooArgSet * ; nset); const. overridevirtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented from RooAbsArg.; Definition at line 123 of file RooRealSumFunc.cxx. ◆ Class(). static TClass * RooRealSumFunc::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRealSumFunc::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooRealSumFunc::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file RooRealSumFunc.h. ◆ clone(). TObject * RooRealSumFunc::clone ; (; const char * ; newname); const. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:63738,Cache,CacheMode,63738,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,2,['Cache'],['CacheMode']
Performance," Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw > Class Template Referencefinal. ; template<typename PrevNodeRaw>; class ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >implementation of FilterAvailable and FilterMissing operations ; The filter evaluates if the entry is missing a value for the input column. Depending on which function was called by the user, the entry with the missing value:; will be discarded in case the user called FilterAvailable; will be kept in case the user called FilterMissing . Definition at line 58 of file RFilterWithMissingValues.hxx. Public Member Functions;  RFilterWithMissingValues (bool discardEntry, std::shared_ptr< PrevNode_t > pd, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, std::string_view filterName="""", const std::string &variationName=""nominal"");  ;  RFilterWithMissingValues (const RFilterWithMissingValues &)=delete;  ;  RFilterWithMissingValues (RFilterWithMissingValues &&)=delete;  ;  ~RFilterWithMissingValues () final;  ; void AddFilterName (std::vector< std::string > &filters) final;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  ; void FinalizeSlot (unsigned int slot) final;  Clean-up operations to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; ROOT::Detail::RDF::RColumnReaderBase * GetOrCreateColumnReader (TTreeReader *r, unsigned int slot);  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilterWithMissingValues & operator= (const RFilterWithMissingValues &)=delete;  ; RFilterWithMissingValues & operator= (R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:1518,perform,performed,1518,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,1,['perform'],['performed']
Performance," Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAddModel Class Reference. ; RooAddModel is an efficient implementation of a sum of PDFs of the form. . \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; \]. or ; \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total number of expected events.; In the second form, the sum of the coefficients is enforced to be one, and the coefficient of the last PDF is calculated from that condition.; RooAddModel relies on each component PDF to be normalized, and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent of each coefficient \( i \). ; Definition at line 27 of file RooAddModel.h. Classes; class  IntCacheElem;  . Public Member Functions;  RooAddModel ();  ;  RooAddModel (const char *name, const char *title, const RooArgList &pdfList, const RooArgList &coefList, bool ownPdfList=false);  Generic constructor from list of PDFs and list of coefficients. ;  ;  RooAddModel (const RooAddModel &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral defined by given scenario code. ;  ; Int_t basisCode (const char *name) const override;  Return code for basis function representing by 'name' string. ;  ; bool canComputeBatchWithCuda () const override;  ; bool checkObservables (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:1184,perform,perform,1184,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['perform'],['perform']
Performance," Get a wrapper/accessor function around this class custom streamer (member function).; 2938 ; 2939ClassStreamerFunc_t TClass::GetStreamerFunc() const; 2940{; 2941 return fStreamerFunc;; 2942}; 2943 ; 2944////////////////////////////////////////////////////////////////////////////////; 2945/// Get a wrapper/accessor function around this class custom conversion streamer (member function).; 2946 ; 2947ClassConvStreamerFunc_t TClass::GetConvStreamerFunc() const; 2948{; 2949 return fConvStreamerFunc;; 2950}; 2951 ; 2952////////////////////////////////////////////////////////////////////////////////; 2953/// Return the proxy implementing the IsA functionality.; 2954 ; 2955TVirtualIsAProxy* TClass::GetIsAProxy() const; 2956{; 2957 return fIsA;; 2958}; 2959 ; 2960////////////////////////////////////////////////////////////////////////////////; 2961/// Static method returning pointer to TClass of the specified class name.; 2962/// If load is true, an attempt is made to obtain the class by loading; 2963/// the appropriate shared library (directed by the rootmap file).; 2964/// If silent is 'true', do not warn about missing dictionary for the class.; 2965/// (typically used for classes that are used only for transient members); 2966/// Returns `nullptr` in case class is not found.; 2967 ; 2968TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent); 2969{; 2970 return TClass::GetClass(name, load, silent, 0, 0);; 2971}; 2972 ; 2973TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size); 2974{; 2975 if (!name || !name[0]) return nullptr;; 2976 ; 2977 if (strstr(name, ""(anonymous)"")) return nullptr;; 2978 if (strstr(name, ""(unnamed)"")) return nullptr;; 2979 if (strncmp(name,""class "",6)==0) name += 6;; 2980 if (strncmp(name,""struct "",7)==0) name += 7;; 2981 ; 2982 if (!gROOT->GetListOfClasses()) return nullptr;; 2983 ; 2984 // FindObject will take the read lock before actually getting the; 2985 // TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:110910,load,load,110910,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['load'],"['load', 'loading']"
Performance," Get a wrapper/accessor function around this class custom streamer (member function).; 3005 ; 3006ClassStreamerFunc_t TClass::GetStreamerFunc() const; 3007{; 3008 return fStreamerFunc;; 3009}; 3010 ; 3011////////////////////////////////////////////////////////////////////////////////; 3012/// Get a wrapper/accessor function around this class custom conversion streamer (member function).; 3013 ; 3014ClassConvStreamerFunc_t TClass::GetConvStreamerFunc() const; 3015{; 3016 return fConvStreamerFunc;; 3017}; 3018 ; 3019////////////////////////////////////////////////////////////////////////////////; 3020/// Return the proxy implementing the IsA functionality.; 3021 ; 3022TVirtualIsAProxy* TClass::GetIsAProxy() const; 3023{; 3024 return fIsA;; 3025}; 3026 ; 3027////////////////////////////////////////////////////////////////////////////////; 3028/// Static method returning pointer to TClass of the specified class name.; 3029/// If load is true, an attempt is made to obtain the class by loading; 3030/// the appropriate shared library (directed by the rootmap file).; 3031/// If silent is 'true', do not warn about missing dictionary for the class.; 3032/// (typically used for classes that are used only for transient members); 3033/// Returns `nullptr` in case class is not found.; 3034 ; 3035TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent); 3036{; 3037 return TClass::GetClass(name, load, silent, 0, 0);; 3038}; 3039 ; 3040TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size); 3041{; 3042 if (!name || !name[0]) return nullptr;; 3043 ; 3044 if (strstr(name, ""(anonymous)"")) return nullptr;; 3045 if (strstr(name, ""(unnamed)"")) return nullptr;; 3046 if (strncmp(name,""class "",6)==0) name += 6;; 3047 if (strncmp(name,""struct "",7)==0) name += 7;; 3048 ; 3049 if (!gROOT->GetListOfClasses()) return nullptr;; 3050 ; 3051 // FindObject will take the read lock before actually getting the; 3052 // TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:113661,load,load,113661,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['load'],"['load', 'loading']"
Performance," Get the names of all the available columns of the dataset. |; 159| GetColumnType() | Return the type of a given column as a string. |; 160| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 161| GetDefinedColumnNames() | Get the names of all the defined columns. |; 162| GetFilterNames() | Return the names of all filters in the computation graph. |; 163| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 170takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 171RDataFrame provides methods to perform most common operations required by ROOT analyses;; 172at the same time, users can just as easily specify custom code that will be executed in the event loop.; 173 ; 174RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:12775,perform,performed,12775,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['perform'],['performed']
Performance," Get the names of all the available columns of the dataset. |; 163| GetColumnType() | Return the type of a given column as a string. |; 164| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 165| GetDefinedColumnNames() | Get the names of all the defined columns. |; 166| GetFilterNames() | Return the names of all filters in the computation graph. |; 167| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 168| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 169| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 170 ; 171\anchor introduction; 172## Introduction; 173Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 174takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 175RDataFrame provides methods to perform most common operations required by ROOT analyses;; 176at the same time, users can just as easily specify custom code that will be executed in the event loop.; 177 ; 178RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 179 ; 1801. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 181 ; 1822.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:13217,perform,performed,13217,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['perform'],['performed']
Performance," GetGitDate()TROOT; GetGlobal(const char *name, Bool_t load=kFALSE) constTROOT; GetGlobal(const TObject *obj, Bool_t load=kFALSE) constTROOT; GetGlobalFunction(const char *name, const char *params=nullptr, Bool_t load=kFALSE)TROOT; GetGlobalFunctions()TROOTprotected; GetGlobalFunctionWithPrototype(const char *name, const char *proto=nullptr, Bool_t load=kFALSE)TROOT; GetIconName() constTObjectvirtual; GetIconPath()TROOTstatic; GetIncludeDir()TROOTstatic; GetInterpreter() constTROOTinline; GetKey(const char *, Short_t=9999) constTDirectoryinlinevirtual; GetLibDir()TROOTstatic; GetList() constTDirectoryinlinevirtual; GetListOfBrowsables() constTROOTinline; GetListOfBrowsers() constTROOTinline; GetListOfCanvases() constTROOTinline; GetListOfClasses() constTROOTinline; GetListOfClassGenerators() constTROOTinline; GetListOfCleanups() constTROOTinline; GetListOfClosedObjects() constTROOTinline; GetListOfColors() constTROOTinline; GetListOfDataSets() constTROOTinline; GetListOfEnums(Bool_t load=kFALSE)TROOT; GetListOfFiles() constTROOTinline; GetListOfFunctionOverloads(const char *name) constTROOT; GetListOfFunctions() constTROOTinline; GetListOfFunctionTemplates()TROOT; GetListOfGeometries() constTROOTinline; GetListOfGlobalFunctions(Bool_t load=kFALSE)TROOT; GetListOfGlobals(Bool_t load=kFALSE)TROOT; GetListOfKeys() constTDirectoryinlinevirtual; GetListOfMappedFiles() constTROOTinline; GetListOfMessageHandlers() constTROOTinline; GetListOfProofs() constTROOTinline; GetListOfSecContexts() constTROOTinline; GetListOfSockets() constTROOTinline; GetListOfSpecials() constTROOTinline; GetListOfStreamerInfo() constTROOTinline; GetListOfStyles() constTROOTinline; GetListOfTasks() constTROOTinline; GetListOfTypes(Bool_t load=kFALSE)TROOT; GetMacroDir()TROOTstatic; GetMacroPath()TROOTstatic; GetMother() constTDirectoryinline; GetMotherDir() constTDirectoryinline; GetName() const overrideTNamedinlinevirtual; GetNbytesKeys() constTDirectoryinlinevirtual; GetNclasses() constTROOT; Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT-members.html:8297,load,load,8297,doc/master/classTROOT-members.html,https://root.cern,https://root.cern/doc/master/classTROOT-members.html,1,['load'],['load']
Performance," GetListOfClasses() constTROOTinline; GetListOfClassGenerators() constTROOTinline; GetListOfCleanups() constTROOTinline; GetListOfClosedObjects() constTROOTinline; GetListOfColors() constTROOTinline; GetListOfDataSets() constTROOTinline; GetListOfEnums(Bool_t load=kFALSE)TROOT; GetListOfFiles() constTROOTinline; GetListOfFunctionOverloads(const char *name) constTROOT; GetListOfFunctions() constTROOTinline; GetListOfFunctionTemplates()TROOT; GetListOfGeometries() constTROOTinline; GetListOfGlobalFunctions(Bool_t load=kFALSE)TROOT; GetListOfGlobals(Bool_t load=kFALSE)TROOT; GetListOfKeys() constTDirectoryinlinevirtual; GetListOfMappedFiles() constTROOTinline; GetListOfMessageHandlers() constTROOTinline; GetListOfProofs() constTROOTinline; GetListOfSecContexts() constTROOTinline; GetListOfSockets() constTROOTinline; GetListOfSpecials() constTROOTinline; GetListOfStreamerInfo() constTROOTinline; GetListOfStyles() constTROOTinline; GetListOfTasks() constTROOTinline; GetListOfTypes(Bool_t load=kFALSE)TROOT; GetMacroDir()TROOTstatic; GetMacroPath()TROOTstatic; GetMother() constTDirectoryinline; GetMotherDir() constTDirectoryinline; GetName() const overrideTNamedinlinevirtual; GetNbytesKeys() constTDirectoryinlinevirtual; GetNclasses() constTROOT; GetNkeys() constTDirectoryinlinevirtual; GetNtypes() constTROOT; GetObject(const char *namecycle, T *&ptr)TDirectoryinline; GetObjectChecked(const char *namecycle, const char *classname)TDirectoryvirtual; GetObjectChecked(const char *namecycle, const TClass *cl)TDirectoryvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetObjectUnchecked(const char *namecycle)TDirectoryvirtual; GetOption() constTObjectinlinevirtual; GetPath() constTDirectoryvirtual; GetPathStatic() constTDirectoryvirtual; GetPluginManager() constTROOTinline; GetRootFolder() constTROOTinline; GetRootSys()TROOTstatic; GetSeekDir() constTDirectoryinlinevirtual; GetSeekKeys() constTDirectoryinlinevirtual; GetSeekParent() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT-members.html:9035,load,load,9035,doc/master/classTROOT-members.html,https://root.cern,https://root.cern/doc/master/classTROOT-members.html,1,['load'],['load']
Performance," GetMainWindow() const; Get the main window, i.e. EVE-browser. TEveViewer* GetDefaultViewer() const; Returns the default viewer - the first one in the fViewers list. TGLViewer* GetDefaultGLViewer() const; Get TGLViewer of the default TEveViewer. TEveGedEditor* GetEditor() const; Returns main object editor. TGStatusBar* GetStatusBar() const; Returns main window status bar. TCanvas* AddCanvasTab(const char* name); Add a new canvas tab. TEveViewer* SpawnNewViewer(const char* name, const char* title = """", Bool_t embed = kTRUE); Create a new GL viewer. TEveScene* SpawnNewScene(const char* name, const char* title = """"); Create a new scene. TMacro* GetMacro(const char* name) const; Find macro in fMacroFolder by name. void EditElement(TEveElement* element); Show element in default editor. void RegisterRedraw3D(); Register a request for 3D redraw. void DoRedraw3D(); Perform 3D redraw of scenes and viewers whose contents has; changed. void FullRedraw3D(Bool_t resetCameras = kFALSE, Bool_t dropLogicals = kFALSE); Perform 3D redraw of all scenes and viewers. void ElementChanged(TEveElement* element, Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); Element was changed, perform framework side action.; Called from TEveElement::ElementChanged(). void ScenesChanged(TEveElement::List_t& scenes); Mark all scenes from the given list as changed. void ElementStamped(TEveElement* element); Mark element as changed -- it will be processed on next redraw. TGListTree* GetListTree() const; Get default list-tree widget. AddToListTree(TEveElement* re, Bool_t open, TGListTree* lt = 0); Add element as a top-level to a list-tree.; Only add a single copy of a render-element as a top level. void RemoveFromListTree(TEveElement* element, TGListTree* lt, TGListTreeItem* lti); Remove top-level element from list-tree with specified tree-item. TGListTreeItem* AddEvent(TEveEventManager* event); Add a new event and make it the current event.; It is added into the event-scene and as a top-level list-tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveManager.html:6090,Perform,Perform,6090,root/html528/TEveManager.html,https://root.cern,https://root.cern/root/html528/TEveManager.html,6,['Perform'],['Perform']
Performance," GetRootSys()Definition FoundationUtils.cxx:158; ROOT::FoundationUtils::GetEtcDirconst std::string & GetEtcDir()Definition FoundationUtils.cxx:195; ROOT::Internal::VecOps::voidvoid(off) SmallVectorTemplateBase< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:59; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:171241,load,load,171241,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['load'],['load']
Performance," GetRootSys()Definition FoundationUtils.cxx:158; ROOT::FoundationUtils::GetEtcDirconst std::string & GetEtcDir()Definition FoundationUtils.cxx:195; ROOT::Internal::VecOps::voidvoid(off) SmallVectorTemplateBase< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:171417,load,load,171417,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['load'],['load']
Performance," GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TGraph2D.h; TH1.h; TMath.h; TPolyLine3D.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TRandom2.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; Vector3D.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Math::DisplacementVector3D< Cartesian3D< doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/line3Dfit_8C.html:5952,perform,performing,5952,doc/master/line3Dfit_8C.html,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html,1,['perform'],['performing']
Performance," Gigabytes).; 6445/// The function returns the total number of baskets read into memory; 6446/// if negative an error occurred while loading the branches.; 6447/// This method may be called to force branch baskets in memory; 6448/// when random access to branch entries is required.; 6449/// If random access to only a few branches is required, you should; 6450/// call directly TBranch::LoadBaskets.; 6451 ; 6452Int_t TTree::LoadBaskets(Long64_t maxmemory); 6453{; 6454 if (maxmemory > 0) SetMaxVirtualSize(maxmemory);; 6455 ; 6456 TIter next(GetListOfLeaves());; 6457 TLeaf *leaf;; 6458 Int_t nimported = 0;; 6459 while ((leaf=(TLeaf*)next())) {; 6460 nimported += leaf->GetBranch()->LoadBaskets();//break;; 6461 }; 6462 return nimported;; 6463}; 6464 ; 6465////////////////////////////////////////////////////////////////////////////////; 6466/// Set current entry.; 6467///; 6468/// Returns -2 if entry does not exist (just as TChain::LoadTree()).; 6469/// Returns -6 if an error occurs in the notification callback (just as TChain::LoadTree()).; 6470///; 6471/// Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new tree.; 6472///; 6473/// \note This function is overloaded in TChain.; 6474Long64_t TTree::LoadTree(Long64_t entry); 6475{; 6476 // We have already been visited while recursively looking; 6477 // through the friend trees, let's return; 6478 if (kLoadTree & fFriendLockStatus) {; 6479 // We need to return a negative value to avoid a circular list of friends; 6480 // to think that there is always an entry somewhere in the list.; 6481 return -1;; 6482 }; 6483 ; 6484 // create cache if wanted; 6485 if (fCacheDoAutoInit && entry >=0); 6486 SetCacheSizeAux();; 6487 ; 6488 if (fNotify) {; 6489 if (fReadEntry < 0) {; 6490 fNotify->Notify();; 6491 }; 6492 }; 6493 fReadEntry = entry;; 6494 ; 6495 bool friendHasEntry = false;; 6496 if (fFriends) {; 6497 // Set current entry in friends as well.; 6498 //; 6499 // An alternative would move this code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:252921,Load,LoadTree,252921,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Load'],['LoadTree']
Performance," Given a file read not in the miss cache, handle (possibly) loading the data. ; Process a cache miss; (pos, len) isn't in the buffer.; The first time we have a miss, we buffer as many baskets we can (up to the maximum size of the TTreeCache) in memory from all branches that are not in the prefetch list.; Subsequent times, we fetch all the buffers corresponding to branches that had previously seen misses. If it turns out the (pos, len) isn't in the list of branches, we treat this as if it was the first miss.; Returns true if we were able to pull the data into the miss cache. ; Definition at line 863 of file TTreeCache.cxx. ◆ ReadBuffer(). Int_t TTreeCache::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). overridevirtual . Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ; Otherwise try to fill the cache from the list of selected branches, and recheck if pos is now in the list. Returns:; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache. This function overloads TFileCacheRead::ReadBuffer. . Reimplemented from TFileCacheRead.; Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:46799,cache,cache,46799,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,4,['cache'],['cache']
Performance," Go one level up in geometry. ; Updates cache accordingly. Determine the overlapping state of current node. ; Definition at line 1681 of file TGeoManager.cxx. ◆ CheckBoundaryErrors(). void TGeoManager::CheckBoundaryErrors ; (; Int_t ; ntracks = 1000000, . Double_t ; radius = -1. . ). Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ; If radius is not mentioned the full bounding box will be sampled. ; Definition at line 3752 of file TGeoManager.cxx. ◆ CheckBoundaryReference(). void TGeoManager::CheckBoundaryReference ; (; Int_t ; icheck = -1). Check the boundary errors reference file created by CheckBoundaryErrors method. ; The shape for which the crossing failed is drawn with the starting point in red and the extrapolated point to boundary (+/- failing push/pull) in yellow. ; Definition at line 3762 of file TGeoManager.cxx. ◆ CheckGeometry(). void TGeoManager::CheckGeometry ; (; Option_t * ; option = """"). Perform last checks on the geometry. ; Definition at line 3831 of file TGeoManager.cxx. ◆ CheckGeometryFull(). void TGeoManager::CheckGeometryFull ; (; Int_t ; ntracks = 1000000, . Double_t ; vx = 0., . Double_t ; vy = 0., . Double_t ; vz = 0., . Option_t * ; option = ""ob"" . ). Geometry checking. . if option contains 'o': Optional overlap checkings (by sampling and by mesh).; if option contains 'b': Optional boundary crossing check + timing per volume. STAGE 1: extensive overlap checking by sampling per volume. Stdout need to be checked by user to get report, then TGeoVolume::CheckOverlaps(0.01, ""s"") can be called for the suspicious volumes.; STAGE 2: normal overlap checking using the shapes mesh - fills the list of overlaps.; STAGE 3: shooting NRAYS rays from VERTEX and counting the total number of crossings per volume (rays propagated from boundary to boundary until geometry exit). Timing computed and results stored in a histo.; STAGE 4: shooting 1 mil. random rays inside EACH volume and calling FindN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:74439,Perform,Perform,74439,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Perform'],['Perform']
Performance," HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServ.html:27339,cache,cache,27339,root/html532/TProofServ.html,https://root.cern,https://root.cern/root/html532/TProofServ.html,4,['cache'],['cache']
Performance," HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; prioroty is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:27339,cache,cache,27339,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,1,['cache'],['cache']
Performance," Here we book the DNN of TMVA. See the example TMVA_Higgs_Classification.C for a detailed description of the; # options; ; if useTMVADNN:; layoutString = ROOT.TString(; ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR""; ); ; # Training strategies; # one can catenate several training strings with different parameters (e.g. learning rates or regularizations; # parameters) The training string must be concatenated with the `|` delimiter; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.""; ) # + ""|"" + trainingString2 + ...; trainingString1 += "",MaxEpochs="" + str(max_epochs); ; # Build now the full DNN Option string; dnnMethodName = ""TMVA_DNN_CPU""; ; # use GPU if available; dnnOptions = ""CPU""; if hasGPU :; dnnOptions = ""GPU""; dnnMethodName = ""TMVA_DNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; dnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; Layout=layoutString,; TrainingStrategy=trainingString1,; Architecture=dnnOptions; ); ; ; ### Book Convolutional Neural Network in TMVA; ; # For building a CNN one needs to define; ; # - Input Layout : number of channels (in this case = 1) | image height | image width; # - Batch Layout : batch size | number of channels | image size = (height*width); ; # Then one add Convolutional layers and MaxPool layers.; ; # - For Convolutional layer the option string has to be:; # - CONV | number of units | filter height | filter width | stride height | stride width | padding height | paddig; # width | activation function; ; # - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; ; # - note we use after the first convolutional layer a batch normalization layer. This seem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:10710,load,loader,10710,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['load'],['loader']
Performance," I/O buffer. ; Used only by TLeafC, just dummy implementation here ; Implements TBuffer.; Definition at line 1639 of file TBufferSQL2.cxx. ◆ WriteFloat(). void TBufferSQL2::WriteFloat ; (; Float_t ; f). finalvirtual . Writes Float_t value to buffer. ; Implements TBuffer.; Definition at line 2120 of file TBufferSQL2.cxx. ◆ WriteInt(). void TBufferSQL2::WriteInt ; (; Int_t ; i). finalvirtual . Writes Int_t value to buffer. ; Implements TBuffer.; Definition at line 2072 of file TBufferSQL2.cxx. ◆ WriteLong(). void TBufferSQL2::WriteLong ; (; Long_t ; l). finalvirtual . Writes Long_t value to buffer. ; Implements TBuffer.; Definition at line 2088 of file TBufferSQL2.cxx. ◆ WriteLong64(). void TBufferSQL2::WriteLong64 ; (; Long64_t ; l). finalvirtual . Writes Long64_t value to buffer. ; Implements TBuffer.; Definition at line 2104 of file TBufferSQL2.cxx. ◆ WriteObjectClass(). void TBufferSQL2::WriteObjectClass ; (; const void * ; actualObjStart, . const TClass * ; actualClass, . Bool_t ; cacheReuse . ). finalprotectedvirtual . Write object to buffer. Only used from TBuffer. ; Implements TBufferIO.; Definition at line 868 of file TBufferSQL2.cxx. ◆ WriteShort(). void TBufferSQL2::WriteShort ; (; Short_t ; s). finalvirtual . Writes Short_t value to buffer. ; Implements TBuffer.; Definition at line 2056 of file TBufferSQL2.cxx. ◆ WriteStdString() [1/3]. void TBufferSQL2::WriteStdString ; (; const std::string * ; s). finalvirtual . Write a std::string. ; Implements TBuffer.; Definition at line 1972 of file TBufferSQL2.cxx. ◆ WriteStdString() [2/3]. virtual void TBuffer::WriteStdString ; (; const std::string * ; s). virtual . Implements TBuffer. ◆ WriteStdString() [3/3]. virtual void TBuffer::WriteStdString ; (; std::string & ; s). inlinevirtual . Reimplemented from TBuffer.; Definition at line 312 of file TBuffer.h. ◆ WriteTString(). void TBufferSQL2::WriteTString ; (; const TString & ; s). finalvirtual . Write a TString. ; Implements TBuffer.; Definition at line 1914 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL2.html:88915,cache,cacheReuse,88915,doc/master/classTBufferSQL2.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL2.html,1,['cache'],['cacheReuse']
Performance," I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the write cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::WriteBuffers()).; The write cache is automatically created when writing a remote file (created in TFile::Open()). ; Definition at line 19 of file TFileCacheWrite.h. Public Member Functions;  TFileCacheWrite ();  Default Constructor. ;  ;  TFileCacheWrite (TFile *file, Int_t buffersize);  Creates a TFileCacheWrite data structure. ;  ;  ~TFileCacheWrite () override;  Destructor. ;  ; virtual Bool_t Flush ();  Flush the current write buffer to the file. ;  ; virtual Int_t GetBytesInCache () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print class internal structure. ;  ; virtual Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Called by the read cache to check if the requested data is not in the write cache buffer. ;  ; virtual void SetFile (TFile *file);  Set the file using this cache. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheWrite.html:1585,cache,cache,1585,doc/master/classTFileCacheWrite.html,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html,1,['cache'],['cache']
Performance," IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:12685,cache,cache,12685,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['cache'],['cache']
Performance," Idea: Factor out this 'if' to a UseCacheRepeat function; 1650 if (config->fNeedRepeat) {; 1651 b.SetBufferOffset(bufpos);; 1652 }; 1653 return 0;; 1654 }; 1655 ; 1656 INLINE_TEMPLATE_ARGS Int_t UseCacheGenericCollection(TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf); 1657 {; 1658 TConfigurationUseCache *config = (TConfigurationUseCache*)conf;; 1659 ; 1660 Int_t bufpos = b.Length();; 1661 TVirtualArray *cached = b.PeekDataCache();; 1662 if (cached==0) {; 1663 TStreamerElement *aElement = config->fCompInfo->fElem;; 1664 TStreamerInfo *info = (TStreamerInfo*)config->fInfo;; 1665 ; 1666 TVirtualCollectionProxy *proxy = ((TGenericLoopConfig*)loopconfig)->fProxy;; 1667 Warning(""ReadBuffer"",""Skipping %s::%s because the cache is missing."",info->GetName(),aElement->GetName());; 1668 UInt_t n = proxy->Size();; 1669 info->ReadBufferSkip(b, *proxy,config->fCompInfo,config->fCompInfo->fType+TStreamerInfo::kSkip,aElement,n,0);; 1670 } else {; 1671 TVectorLoopConfig cached_config( nullptr, cached->fClass->Size(), /* read */ kTRUE );; 1672 void *cached_start = (*cached)[0];; 1673 void *cached_end = ((char*)cached_start) + cached->fSize * cached_config.fIncrement;; 1674 config->fAction(b,cached_start,cached_end,&cached_config);; 1675 }; 1676 // Idea: Factor out this 'if' to a UseCacheRepeat function; 1677 if (config->fNeedRepeat) {; 1678 b.SetBufferOffset(bufpos);; 1679 }; 1680 return 0;; 1681 }; 1682 ; 1683 // Support for collections.; 1684 ; 1685 Int_t ReadLoopInvalid(TBuffer &, void *, const void *, const TConfiguration *config); 1686 {; 1687 Fatal(""ApplySequence"",""The sequence of actions to read %s:%d member-wise was not initialized."",config->fInfo->GetName(),config->fInfo->GetClassVersion());; 1688 return 0;; 1689 }; 1690 ; 1691 Int_t WriteLoopInvalid(TBuffer &, void *, const void *, const TConfiguration *config); 1692 {; 1693 Fatal(""ApplySequence"",""The sequence of actions to write %s:%d member-wise was not initialized."",conf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:69526,cache,cached,69526,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,3,['cache'],['cached']
Performance," If download is kTRUE and the package is not found locally, then it is downloaded; from the master repository.; Returns 0 in case of success and -1 in case of error. Int_t UploadPackageOnClient(const char* package, TProof::EUploadPackageOpt opt, TMD5* md5); Upload a package on the client in ~/.proof/packages.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; If existing, the corresponding header basename(macro).h or .hh, is also; uploaded. The default is to load the macro also on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path searc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:67992,load,load,67992,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['load'],['load']
Performance," If rootmapfile is specified a specific rootmap file can be added (typically used by ACLiC). In case of error -1 is returned, 0 otherwise. The interpreter uses this information to automatically load the shared library for a class (autoload mechanism), see the AutoLoad() methods below. ; Implements TInterpreter.; Definition at line 5741 of file TCling.cxx. ◆ LoadMacro(). void TCling::LoadMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). finalvirtual . Load a macro file in cling's memory. ; Implements TInterpreter.; Definition at line 3552 of file TCling.cxx. ◆ LoadPCM(). void TCling::LoadPCM ; (; std::string ; pcmFileNameFullPath). private . Tries to load a rdict PCM, issues diagnostics if it fails. ; Definition at line 1811 of file TCling.cxx. ◆ LoadPCMImpl(). void TCling::LoadPCMImpl ; (; TFile & ; pcmFile). private . Tries to load a PCM from TFile; returns true on success. ; Definition at line 1696 of file TCling.cxx. ◆ LoadText(). Bool_t TCling::LoadText ; (; const char * ; text); const. finalvirtual . Load the declarations from text into the interpreter. ; Note that this cannot be (top level) statements; text must contain top level declarations. Returns true on success, false on failure. ; Reimplemented from TInterpreter.; Definition at line 7515 of file TCling.cxx. ◆ MakeInterpreterValue(). std::unique_ptr< TInterpreterValue > TCling::MakeInterpreterValue ; (; ); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 7663 of file TCling.cxx. ◆ MapCppName(). const char * TCling::MapCppName ; (; const char * ; name); const. finalvirtual . Interface to cling function. ; Reimplemented from TInterpreter.; Definition at line 7523 of file TCling.cxx. ◆ MethodArgInfo_DefaultValue(). const char * TCling::MethodArgInfo_DefaultValue ; (; MethodArgInfo_t * ; marginfo); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 9296 of file TCling.cxx. ◆ MethodArgInfo_Delete(). void TCling::MethodArgInfo_Delete ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:114711,Load,LoadText,114711,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Load'],['LoadText']
Performance," If the regularisation is strong, i.e. large parameter tau,; then the distribution x or its derivatives will look like the bias; distribution. If the parameter tau is small, the distribution x is; independent of the bias. Three basic types of regularisation are implemented in TUnfold. condition regularisation. kRegModeNone none; kRegModeSize minimize the size of (x-x0); kRegModeDerivative minimize the 1st derivative of (x-x0); kRegModeCurvature minimize the 2nd derivative of (x-x0). kRegModeSize is the regularisation scheme which often is found in; literature. The second derivative is often named curvature.; Sometimes the bias is not discussed, equivalent to a bias scale factor; of zero. The regularisation schemes kRegModeDerivative and; kRegModeCurvature have the nice feature that they create correlations; between x-bins, whereas the non-regularized unfolding tends to create; negative correlations between bins. For these regularisation schemes the; parameter tau could be tuned such that the correlations are smallest,; as an alternative to the L-curve method. If kRegModeSize is chosen or if x is a smooth function through all bins,; the regularisation condition can be set on all bins together by giving; the appropriate argument in the constructor (see examples above). If x is composed of independent groups of bins (for example,; signal and background binning in two variables), it may be necessary to; set regularisation conditions for the individual groups of bins.; In this case, give kRegModeNone in the constructor and specify; the bin grouping with calls to; RegularizeBins() specify a 1-dimensional group of bins; RegularizeBins2D() specify a 2-dimensional group of bins. Note, the class TUnfoldDensity provides an automatic setup of complex; regularisation schemes. For ultimate flexibility, the regularisation condition can be set on each; bin individually; -> give kRegModeNone in the constructor and use; RegularizeSize() regularize one bin; RegularizeDerivative() regu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:7209,tune,tuned,7209,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['tune'],['tuned']
Performance," If the result of a comparison is TRUE, the result is 1, otherwise 0.; Already predefined names can be given. For example, if the formula; TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default the name of the object = title = formula itself. old.SetName(""old""). then, old can be reused in a new expression. TFormula new(""x*old"") is equivalent to: TFormula new(""x*sin(x*(x<0.5 || x>1))""); Up to 4 dimensions are supported (indicated by x, y, z, t) An expression may have 0 parameters or a list of parameters indicated by the sequence [par_number]; A graph showing the logic to compile and analyze a formula is shown in TFormula::Compile and TFormula::Analyze. Once a formula has been compiled, it can be evaluated for a given set of parameters. see graph in TFormula::EvalPar.; This class is the base class for the function classes TF1,TF2 and TF3. It is also used by the ntuple selection mechanism TNtupleFormula.; In version 7 of TFormula, the usage of fOper has been changed to improve the performance of TFormula::EvalPar. Conceptually, fOper was changed from a simple array of Int_t to an array of composite values. For example a 'ylandau(5)' operation used to be encoded as 4105; it is now encoded as (klandau >> kTFOperShift) + 5 Any class inheriting from TFormula and using directly fOper (which is now a private data member), needs to be updated to take this in consideration. The member functions recommended to set and access fOper are: SetAction, GetAction, GetActionParam For more performant access to the information, see the implementation TFormula::EvalPar. CHANGING DEFAULT SETTINGS; When creating complex formula , it may be necessary to increase some default parameters. see static function TFormula::SetMaxima. WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?; This is a frequently asked question. C++ is a strongly typed language. There is no way for TFormula (without recompiling this class) to know about all possible user defined data types. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:2249,perform,performance,2249,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['perform'],['performance']
Performance," Ignore declaration within a function.; 6697 return;; 6698 }; 6699 ; 6700 auto declName = tdDef->getNameAsString();; 6701 // Check if we have registered the unqualified name into the list; 6702 // of TClass that are in kNoInfo, kEmulated or kFwdDeclaredState.; 6703 // Since this is used as heureutistic to avoid spurrious calls to GetNormalizedName; 6704 // the unqualified name is sufficient (and the fully qualified name might be; 6705 // 'wrong' if there is difference in spelling in the template paramters (for example); 6706 if (!TClass::HasNoInfoOrEmuOrFwdDeclaredDecl(declName.c_str())){; 6707 // fprintf (stderr,""WARNING: Impossible to find a TClassEntry in kNoInfo or kEmulated the decl of which would be called %s. Skip w/o building the normalized name.\n"",declName.c_str() );; 6708 return;; 6709 }; 6710 ; 6711 clang::QualType type(tdDef->getTypeForDecl(), 0);; 6712 ROOT::TMetaUtils::GetNormalizedName(name, type, *fInterpreter, *fNormalizedCtxt);; 6713 } else if (ns) {; 6714 canon = ns->getCanonicalDecl();; 6715 name = ND->getQualifiedNameAsString();; 6716 } else {; 6717 name = ND->getQualifiedNameAsString();; 6718 }; 6719 ; 6720 // Supposedly we are being called while something is being; 6721 // loaded ... let's now tell the autoloader to do the work; 6722 // yet another time.; 6723 SuspendAutoLoadingRAII autoLoadOff(this);; 6724 // FIXME: There can be more than one TClass for a single decl.; 6725 // for example vector<double> and vector<Double32_t>; 6726 TClass* cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name.c_str());; 6727 if (cl && GetModTClasses().find(cl) == GetModTClasses().end()) {; 6728 RefreshClassInfo(cl, canon, false);; 6729 }; 6730 // And here we should find the other 'aliases' (eg. vector<Double32_t>); 6731 // and update them too:; 6732 // foreach(aliascl in gROOT->GetListOfClasses()->FindAliasesOf(name.c_str())); 6733 // RefreshClassInfo(cl, tdDef, true);; 6734}; 6735 ; 6736/////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:262080,load,loaded,262080,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42153,cache,cached,42153,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['cache'],['cached']
Performance," Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInterpreter.html:18830,Load,LoadMacro,18830,root/html534/TInterpreter.html,https://root.cern,https://root.cern/root/html534/TInterpreter.html,1,['Load'],['LoadMacro']
Performance," Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). void SetGetline(char *(*)(const char* prompt) getlineFunc, void (*)(char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void RewindDictionary(). Int_t DeleteGlobal(void* obj). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:18230,Load,LoadMacro,18230,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,1,['Load'],['LoadMacro']
Performance," Includes; Libraries. Function documentation; TInterpreter *& Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). Int_t AutoLoad(const char* classname). void ClearFileBusy(). void ClearStack(). void EnableAutoLoading(). void EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TInterpreter.html:18350,Load,LoadMacro,18350,root/html530/TInterpreter.html,https://root.cern,https://root.cern/root/html530/TInterpreter.html,2,['Load'],['LoadMacro']
Performance," Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelector.html:10441,load,loaded,10441,root/html602/TSelector.html,https://root.cern,https://root.cern/root/html602/TSelector.html,2,['load'],['loaded']
Performance," Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. » Last changed: Mon Dec 7 13:48:35 2009 » Last generated: 2009-12-07 13:48; This page has been automatically ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooObjCacheManager.html:4495,cache,cache,4495,root/html526/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html526/RooObjCacheManager.html,1,['cache'],['cache']
Performance," Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. » Last changed: Thu Sep 23 20:00:26 2010 » Last generated: 2010-09-23 20:00; This page has been automatically g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooObjCacheManager.html:4481,cache,cache,4481,root/html528/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html528/RooObjCacheManager.html,1,['cache'],['cache']
Performance," Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooObjCacheManager.html:4578,cache,cache,4578,root/html530/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html530/RooObjCacheManager.html,2,['cache'],['cache']
Performance," Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the internal function pointer. { return fFunc; }. void SetAndCopyFunction(const TF1* f = 0); method to set a new function pointer and copy it inside.; By calling this method the clas manages now the passed TF1 pointer. double DoEvalPar(const double* x, const double* p) const; evaluate function passing coordinates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__WrappedMultiTF1.html:3081,cache,cached,3081,root/html534/ROOT__Math__WrappedMultiTF1.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__WrappedMultiTF1.html,2,['cache'],['cached']
Performance," Instead of having Cling interpret your script there is a way to have your scripts compiled, linked and dynamically loaded using the C++ compiler and linker. The advantage of this is that your scripts will run with the speed of compiled C++ and that you can use language constructs that are not fully supported by Cling. On the other hand, you cannot use any Cling shortcuts (see “C++ Extensions To Ease Scripting” above) and for small scripts, the overhead of the compile/link cycle might be larger than just executing the script in the interpreter.; ACLiC will build a dictionary and a shared library from your C++ script, using the compiler and the compiler options that were used to compile the ROOT executable. You do not have to write a Makefile remembering the correct compiler options, and you do not have to exit ROOT.; 7.4.1 Usage; Before you can compile your interpreted script you need to add include statements for the classes used in the script. Once you did that, you can build and load a shared library containing your script. To load it use the command .L and append the file name with a +.; root[] .L MyScript.C+; The + option generates the shared library and names it by taking the name of the file “filename” but replacing the dot before the extension by an underscore and by adding the shared library extension for the current platform. For example on most platforms, hsimple.cxx will generate hsimple_cxx.so.; The + command rebuild the library only if the script or any of the files it includes are newer than the library. When checking the timestamp, ACLiC generates a dependency file which name is the same as the library name, just replacing the ‘so’ extension by the extension ‘d’. For example on most platforms, hsimple.cxx will generate hsimple_cxx.d.; To ensure that the shared library is rebuilt you can use the ++ syntax:; root[] .L MyScript.C++; To build, load, and execute the function with the same name as the file you can use the .x command. This is the same as exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:268979,load,load,268979,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['load']
Performance," Int_t GetDepth() const; Returns depth of screen (number of bit planes).; Equivalent to GetPlanes(). Colormap_t GetColormap() const; Returns handle to colormap. Might be usefull in some cases where direct X11 manipulation outside; of TVirtualX is needed, e.g. GL interface. Window_t GetDefaultRootWindow() const; Returns handle to the default root window created when calling; XOpenDisplay(). Atom_t InternAtom(const char* atom_name, Bool_t only_if_exist); Returns the atom identifier associated with the specified ""atom_name""; string. If ""only_if_exists"" is False, the atom is created if it does; not exist. If the atom name is not in the Host Portable Character; Encoding, the result is implementation dependent. Uppercase and; lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all; designate different atoms. Window_t GetParent(Window_t id) const; Returns the parent of the window ""id"". FontStruct_t LoadQueryFont(const char* font_name); Provides the most common way for accessing a font: opens (loads) the; specified font and returns a pointer to the appropriate FontStruct_t; structure. If the font does not exist, it returns NULL. FontH_t GetFontHandle(FontStruct_t fs); Returns the font handle of the specified font structure ""fs"". void DeleteFont(FontStruct_t fs); Explicitely deletes the font structure ""fs"" obtained via LoadQueryFont(). GContext_t CreateGC(Drawable_t id, GCValues_t* gval); Creates a graphics context using the provided GCValues_t *gval structure.; The mask data member of gval specifies which components in the GC are; to be set using the information in the specified values structure.; It returns a graphics context handle GContext_t that can be used with any; destination drawable or O if the creation falls. void ChangeGC(GContext_t gc, GCValues_t* gval); Changes the components specified by the mask in gval for the specified GC. GContext_t gc - specifies the GC to be changed; GCValues_t gval - specifies the mask and the values to be set; (see also the GCV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:40063,Load,LoadQueryFont,40063,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,12,"['Load', 'load']","['LoadQueryFont', 'loads']"
Performance," Int_t basketsize, Int_t splitlevel, Int_t btype); FIXME: What if the streamer info is optimized here?; -- Constructor when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. TBranchElement(TBranch *parent, const char* bname, TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize, Int_t splitlevel, Int_t btype); FIXME: What if the streamer info is optimized here?; -- Constructor when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. void Init(TTree* tree, TBranch* parent, const char* name, TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t btype = 0); -- Init when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. TBranchElement(TTree *tree, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree *tree, TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Init when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TTree *tree, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:17239,optimiz,optimized,17239,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,1,['optimiz'],['optimized']
Performance," Int_t nb = fBranches.GetEntriesFast();; 2292 for (Int_t i = 0; i < nb; ++i) {; 2293 TBranch* branch = (TBranch*) fBranches.UncheckedAt(i);; 2294 branch->KeepCircular(maxEntries);; 2295 }; 2296}; 2297 ; 2298////////////////////////////////////////////////////////////////////////////////; 2299/// Baskets associated to this branch are forced to be in memory.; 2300/// You can call TTree::SetMaxVirtualSize(maxmemory) to instruct; 2301/// the system that the total size of the imported baskets does not; 2302/// exceed maxmemory bytes.; 2303///; 2304/// The function returns the number of baskets that have been put in memory.; 2305/// This method may be called to force all baskets of one or more branches; 2306/// in memory when random access to entries in this branch is required.; 2307/// See also TTree::LoadBaskets to load all baskets of all branches in memory.; 2308 ; 2309Int_t TBranch::LoadBaskets(); 2310{; 2311 Int_t nimported = 0;; 2312 Int_t nbaskets = fWriteBasket;; 2313 TFile *file = GetFile(0);; 2314 if (!file) return 0;; 2315 TBasket *basket;; 2316 for (Int_t i=0;i<nbaskets;i++) {; 2317 basket = (TBasket*)fBaskets.UncheckedAt(i);; 2318 if (basket) continue;; 2319 basket = GetFreshBasket(i, nullptr);; 2320 if (fBasketBytes[i] == 0) {; 2321 fBasketBytes[i] = basket->ReadBasketBytes(fBasketSeek[i],file);; 2322 }; 2323 Int_t badread = basket->ReadBasketBuffers(fBasketSeek[i],fBasketBytes[i],file);; 2324 if (badread) {; 2325 Error(""Loadbaskets"",""Error while reading basket buffer %d of branch %s"",i,GetName());; 2326 return -1;; 2327 }; 2328 ++fNBaskets;; 2329 fBaskets.AddAt(basket,i);; 2330 nimported++;; 2331 }; 2332 return nimported;; 2333}; 2334 ; 2335////////////////////////////////////////////////////////////////////////////////; 2336/// Print TBranch parameters; 2337///; 2338/// If options contains ""basketsInfo"" print the entry number, location and size; 2339/// of each baskets.; 2340 ; 2341void TBranch::Print(Option_t *option) const; 2342{; 2343 const int kLINEND ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:83872,Load,LoadBaskets,83872,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['Load'],['LoadBaskets']
Performance," Int_t splitlevel = 99); Normal tree constructor. The tree is created in the current directory.; Use the various functions Branch below to add branches to this tree. If the first character of title is a ""/"", the function assumes a folder name.; In this case, it creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. Int_t AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38075,cache,cache,38075,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:41795,cache,cache,41795,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['cache'],['cache']
Performance," Int_tTDirectoryFile::ReadTObject(TObject* obj, const char* keyname); virtual Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTFile::ReOpen(Option_t* mode); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDCacheFile.html:11848,cache,cacheDir,11848,root/html530/TDCacheFile.html,https://root.cern,https://root.cern/root/html530/TDCacheFile.html,2,['cache'],['cacheDir']
Performance, Int_tTFileCacheRead::fBNtot; Long64_t*TFileCacheRead::fBPos; Long64_t*TFileCacheRead::fBSeek; Int_t*TFileCacheRead::fBSeekIndex; Int_t*TFileCacheRead::fBSeekLen; Int_t*TFileCacheRead::fBSeekPos; Int_tTFileCacheRead::fBSeekSize; Long64_t*TFileCacheRead::fBSeekSort; Int_t*TFileCacheRead::fBSeekSortLen; TList*fBrNames! list of branch names in the cache; TObjArray*fBranches! List of branches to be stored in the cache; char*TFileCacheRead::fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tTFileCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Long64_tTFileCacheRead::fBytesReadNumber of bytes read for this cache; Long64_tTFileCacheRead::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously ; Bool_tfEnabled! cache enabled for cached reading; Long64_tfEntryCurrent! current lowest entry number in the cache; Long64_tfEntryMax! last entry in the cache; Long64_tfEntryMin! first entry in the cache; Long64_tfEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tfFillTimes! how many times we can fill the current buffer; Bool_tfFirstBuffer! true if first buffer is used for prefetching; Long64_tfFirstEntry! save the value of the first entry; Bool_tfFirstTime! save the fact that we processes the first entry; Bool_tfIsLearning! true if cache is in learning mode; Bool_tfIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; Int_tfNReadMissNumber of blocks read and not found in the chache; Int_tfNReadOkNumber of blocks read and found in the cache; Int_tfNReadPrefNumber of blocks ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:18479,cache,cached,18479,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['cache'],['cached']
Performance," Int_tfNtriesNumber of times a measurement is repeated; TFile*fOutFileOutput file; TStringfOutFileNameName of the output file; TProof*fProofProof; TProof*fProofDSProof to be used for dataset actions; TPBReadType*fReadTypeType of read (partial, full); TProofBenchRunCPU*fRunCPUInstance to run CPU scans; TProofBenchRunDataRead*fRunDSInstance to run data-read scans. private:. Bool_tfUnlinkOutfileWhether to remove empty output files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); Constructor: check PROOF and load selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:""); Draw the CPU speedup plot.; opt = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:8241,Perform,Perform,8241,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['Perform'],['Perform']
Performance," Int_t ; label, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TParticle. ; Definition at line 68 of file TEveTrack.cxx. ◆ TEveTrack() [3/6]. TEveTrack::TEveTrack ; (; TEveMCTrack * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Definition at line 100 of file TEveTrack.cxx. ◆ TEveTrack() [4/6]. TEveTrack::TEveTrack ; (; TEveRecTrack * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TEveRecTrack<float> reconstructed track. ; It is recommended to use constructor with TEveRecTrack<double> since TEveTrackPropagator operates with double type. ; Definition at line 163 of file TEveTrack.cxx. ◆ TEveTrack() [5/6]. TEveTrack::TEveTrack ; (; TEveRecTrackD * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TEveRecTrack<double> reconstructed track. ; Definition at line 134 of file TEveTrack.cxx. ◆ TEveTrack() [6/6]. TEveTrack::TEveTrack ; (; const TEveTrack & ; t). Copy constructor. ; Track parameters are copied but the extrapolation is not performed so you should still call MakeTrack() to do that. If points of 't' are locked, they are cloned. ; Definition at line 193 of file TEveTrack.cxx. ◆ ~TEveTrack(). TEveTrack::~TEveTrack ; (; ). override . Destructor. ; Definition at line 222 of file TEveTrack.cxx. Member Function Documentation. ◆ AddPathMark() [1/2]. void TEveTrack::AddPathMark ; (; const TEvePathMark & ; pm). inline . Definition at line 108 of file TEveTrack.h. ◆ AddPathMark() [2/2]. void TEveTrack::AddPathMark ; (; const TEvePathMarkD & ; pm). inline . Definition at line 107 of file TEveTrack.h. ◆ Class(). static TClass * TEveTrack::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveTrack::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveTrack::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 130 of file TEveTrack.h. ◆ ComputeBBox(). void TEveTrack::ComputeBBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrack.html:54821,perform,performed,54821,doc/master/classTEveTrack.html,https://root.cern,https://root.cern/doc/master/classTEveTrack.html,1,['perform'],['performed']
Performance," Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; virtual void ResetCache ();  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cache. ;  ; void StartLearningPhase ();  The name should be enough to explain the method. ;  ; virtual void StopLearningPhase ();  This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateBranches (TTree *tree);  Update pointer to current Tree and recompute pointers to the branches in the cache. ;  ;  Public Member Functions inherited from TFileCacheRead;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:15799,cache,cached,15799,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['cache'],['cached']
Performance," Internal sub namespace; 470// back to ROOT namespace; 471 ; 472 TROOT *GetROOT() {; 473 return (*Internal::gGetROOT)();; 474 }; 475 ; 476 TString &GetMacroPath() {; 477 static TString macroPath;; 478 return macroPath;; 479 }; 480 ; 481 // clang-format off; 482 ////////////////////////////////////////////////////////////////////////////////; 483 /// Enables the global mutex to make ROOT thread safe/aware.; 484 ///; 485 /// The following becomes safe:; 486 /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); 487 /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); 488 /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; 489 /// - concurrent calls to the interpreter through gInterpreter; 490 /// - concurrent loading of ROOT plug-ins; 491 ///; 492 /// In addition, gDirectory, gFile and gPad become a thread-local variable.; 493 /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; 494 /// gFile and gPad default to nullptr, as it is for single-thread programs.; 495 ///; 496 /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; 497 /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; 498 ///; 499 /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; 500 // clang-format on; 501 void EnableThreadSafety(); 502 {; 503 static void (*sym)() = (void(*)())Internal::GetSymInLibImt(""ROOT_TThread_Initialize"");; 504 if (sym); 505 sym();; 506 }; 507 ; 508 ////////////////////////////////////////////////////////////////////////////////; 509 /// @p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:17377,concurren,concurrent,17377,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,6,"['concurren', 'load']","['concurrent', 'loading']"
Performance," JsonWriteArrayCompress<T>() or JsonWriteConstChar() ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Definition at line 3258 of file TBufferJSON.cxx. ◆ JsonWriteMember(). TString TBufferJSON::JsonWriteMember ; (; const void * ; ptr, . TDataMember * ; member, . TClass * ; memberClass, . Int_t ; arraylen . ). protected . Convert single data member to JSON structures Returns string with converted member. ; Definition at line 1007 of file TBufferJSON.cxx. ◆ JsonWriteObject(). void TBufferJSON::JsonWriteObject ; (; const void * ; obj, . const TClass * ; objClass, . Bool_t ; check_map = kTRUE . ). protected . Write object to buffer If object was written before, only pointer will be stored If check_map==kFALSE, object will be stored in any case and pointer will not be registered in the map. ; Definition at line 1323 of file TBufferJSON.cxx. ◆ PerformPostProcessing(). void TBufferJSON::PerformPostProcessing ; (; TJSONStackObj * ; stack, . const TClass * ; obj_cl = nullptr . ). protected . Function is converts TObject and TString structures to more compact representation. ; Definition at line 2331 of file TBufferJSON.cxx. ◆ PopStack(). TJSONStackObj * TBufferJSON::PopStack ; (; ). protected . remove one level from stack ; Definition at line 1145 of file TBufferJSON.cxx. ◆ PushStack(). TJSONStackObj * TBufferJSON::PushStack ; (; Int_t ; inclevel = 0, . void * ; readnode = nullptr . ). protected . add new level to the structures stack ; Definition at line 1127 of file TBufferJSON.cxx. ◆ ReadArray() [1/13]. Int_t TBufferJSON::ReadArray ; (; Bool_t *& ; b). finalvirtual . Read array of Bool_t from buffer. ; Implements TBuffer.; Definition at line 2533 of file TBufferJSON.cxx. ◆ ReadArray() [2/13]. Int_t TBufferJSON::ReadArray ; (; Char_t *& ; c). finalvirtual . Read array of Char_t from buffer. ; Implements TBuffer.; Definition at line 2541",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:69437,Perform,PerformPostProcessing,69437,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['Perform'],['PerformPostProcessing']
Performance," KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ; Definition at line 3763 of file TFile.cxx. ◆ WriteStreamerInfo(). void TFile::WriteStreamerInfo ; (; ). virtual . Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ; See class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:101137,cache,cache,101137,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,3,['cache'],['cache']
Performance," Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fBeta1;  The Beta1 constant used by the optimizer. ;  ; Scalar_t fBeta2;  The Beta2 constant used by the optimizer. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentBiases;  The decaying average of the first moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentWeights;  The decaying average of the first moment of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentBiases;  The decaying average of the second moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentWeights;  The decaying average of the second moment of the past weight gradients associated with the deep net. ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html:2979,optimiz,optimizer,2979,doc/master/classTMVA_1_1DNN_1_1TAdam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html,1,['optimiz'],['optimizer']
Performance," List is owner if enum not on global scope (thus constants not; in TROOT::GetListOfGlobals). ~TEnum(); Destructor. void AddConstant(TEnumConstant* constant); Add a EnumConstant to the list of constants of the Enum Type. Bool_t IsValid(); Return true if this enum object is pointing to a currently; loaded enum. If a enum is unloaded after the TEnum; is created, the TEnum will be set to be invalid. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void Update(TDictionary::DeclId_t id). TEnum * GetEnum(const std::type_info &ti, ESearchAction sa). TEnum * GetEnum(const char* enumName, TEnum::ESearchAction sa = kALoadAndInterpLookup); Static function to retrieve enumerator from the ROOT's typesystem.; It has no side effect, except when the load flag is true. In this case,; the load of the library containing the scope of the enumerator is attempted.; There are two top level code paths: the enumerator is scoped or isn't.; If it is not, a lookup in the list of global enums is performed.; If it is, two lookups are carried out for its scope: one in the list of; classes and one in the list of protoclasses. If a scope with the desired name; is found, the enum is searched. If the scope is not found, and the load flag is; true, the aforementioned two steps are performed again after an autoload attempt; with the name of the scope as key is tried out.; If the interpreter lookup flag is false, the ListOfEnums objects are not treated; as such, but rather as THashList objects. This prevents any flow of information; from the interpreter into the ROOT's typesystem: a snapshot of the typesystem; status is taken. TEnum(); {}. TEnum(const char* name, void* info, TClass* cls). TClass * GetClass() const. const TSeqCollection * GetConstants() const. const TEnumConstant * GetConstant(const char* name) const. DeclId_t GetDeclId() const. void SetClass(TClass* cl). const char* GetQualifiedName() const; { return fQualName.c_str(); }. » Author: Bianca-Cristin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEnum.html:8853,perform,performed,8853,root/html602/TEnum.html,https://root.cern,https://root.cern/root/html602/TEnum.html,2,['perform'],['performed']
Performance," Load a library file in cling's memory. ; if 'system' is true, the library is never unloaded. Return 0 on success, -1 on failure. ; Implements TInterpreter.; Definition at line 3515 of file TCling.cxx. ◆ LoadEnums(). void TCling::LoadEnums ; (; TListOfEnums & ; cl); const. finalvirtual . Create list of pointers to enums for TClass cl. ; Implements TInterpreter.; Definition at line 4395 of file TCling.cxx. ◆ LoadFile(). int TCling::LoadFile ; (; const char * ; path); const. finalvirtual . Load a source file or library called path into the interpreter. ; Reimplemented from TInterpreter.; Definition at line 7500 of file TCling.cxx. ◆ LoadFunctionTemplates(). void TCling::LoadFunctionTemplates ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to function templates for TClass cl. ; Implements TInterpreter.; Definition at line 4442 of file TCling.cxx. ◆ LoadLibraryMap(). Int_t TCling::LoadLibraryMap ; (; const char * ; rootmapfile = nullptr). finalvirtual . Load map between class and library. ; If rootmapfile is specified a specific rootmap file can be added (typically used by ACLiC). In case of error -1 is returned, 0 otherwise. The interpreter uses this information to automatically load the shared library for a class (autoload mechanism), see the AutoLoad() methods below. ; Implements TInterpreter.; Definition at line 5741 of file TCling.cxx. ◆ LoadMacro(). void TCling::LoadMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). finalvirtual . Load a macro file in cling's memory. ; Implements TInterpreter.; Definition at line 3552 of file TCling.cxx. ◆ LoadPCM(). void TCling::LoadPCM ; (; std::string ; pcmFileNameFullPath). private . Tries to load a rdict PCM, issues diagnostics if it fails. ; Definition at line 1811 of file TCling.cxx. ◆ LoadPCMImpl(). void TCling::LoadPCMImpl ; (; TFile & ; pcmFile). private . Tries to load a PCM from TFile; returns true on success. ; Definition at line 1696 of file TCling.cxx. ◆ LoadText(). Bool_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:113687,Load,Load,113687,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Load'],['Load']
Performance," Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TBranchCacheInfo Class Reference. . Definition at line 35 of file TBranchCacheInfo.h. Public Member Functions; bool AllUsed () const;  Return true if all the baskets that are marked loaded are also mark as used. ;  ; void GetUnused (std::vector< Int_t > &unused);  Return a set of unused basket, let's not re-read them. ;  ; bool HasBeenUsed (Int_t basketNumber) const;  Return true if the basket has been marked as 'used'. ;  ; bool IsInCache (Int_t basketNumber) const;  Return true if the basket is currently in the cache. ;  ; bool IsVetoed (Int_t basketNumber) const;  Return true if the basket is currently vetoed. ;  ; void Print (const char *owner, Long64_t *entries) const;  Print the info we have for the baskets. ;  ; void Reset ();  Reset all info. ;  ; void SetIsInCache (Int_t basketNumber);  Mark if the basket is currently in the cache. ;  ; void SetUsed (Int_t basketNumber);  Mark if the basket has been marked as 'used'. ;  ; void Veto (Int_t basketNumber);  Mark if the basket should be vetoed in the next round. ;  . Private Types; enum  EStates { kLoaded = 0; , kUsed = 1; , kVetoed = 2; , kSize = 3; };  . Private Member Functions; void SetState (Int_t basketNumber, EStates what);  Mark if the basket has been marked has the 'what' state. ;  ; bool TestState (Int_t basketNumber, EStates what) const;  Return true if the basket has been marked as having the 'what' state. ;  ; void UpdatePedestal (Int_t basketNumber);  Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ;  . Private Attributes; Int_t fBasketPedestal {-1};  ; TBits fInfo;  . #include <TBranchCacheInfo.h>; Member Enumeration Documentation. ◆ EStates. enum ROOT::Internal::TBranchCacheInfo::EStates. private . EnumeratorkLoaded ; kUsed ; kVetoed ; kSize . Definition at line 37 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:1140,cache,cache,1140,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,1,['cache'],['cache']
Performance," Log() << Endl;; 1726 Log() << gTools().Color(""bold"") << ""--- Short description:"" << gTools().Color(""reset"") << Endl;; 1727 Log() << Endl;; 1728 Log() << ""The optimisation of rectangular cuts performed by TMVA maximises "" << Endl;; 1729 Log() << ""the background rejection at given signal efficiency, and scans "" << Endl;; 1730 Log() << ""over the full range of the latter quantity. Three optimisation"" << Endl;; 1731 Log() << ""methods are optional: Monte Carlo sampling (MC), a Genetics"" << Endl;; 1732 Log() << ""Algorithm (GA), and Simulated Annealing (SA). GA and SA are"" << Endl;; 1733 Log() << ""expected to perform best."" << Endl;; 1734 Log() << Endl;; 1735 Log() << ""The difficulty to find the optimal cuts strongly increases with"" << Endl;; 1736 Log() << ""the dimensionality (number of input variables) of the problem."" << Endl;; 1737 Log() << ""This behavior is due to the non-uniqueness of the solution space.""<< Endl;; 1738 Log() << Endl;; 1739 Log() << gTools().Color(""bold"") << ""--- Performance optimisation:"" << gTools().Color(""reset"") << Endl;; 1740 Log() << Endl;; 1741 Log() << ""If the dimensionality exceeds, say, 4 input variables, it is "" << Endl;; 1742 Log() << ""advisable to scrutinize the separation power of the variables,"" << Endl;; 1743 Log() << ""and to remove the weakest ones. If some among the input variables"" << Endl;; 1744 Log() << ""can be described by a single cut (e.g., because signal tends to be"" << Endl;; 1745 Log() << ""larger than background), this can be indicated to MethodCuts via"" << Endl;; 1746 Log() << ""the \""Fsmart\"" options (see option string). Choosing this option"" << Endl;; 1747 Log() << ""reduces the number of requirements for the variable from 2 (min/max)"" << Endl;; 1748 Log() << ""to a single one (TMVA finds out whether it is to be interpreted as"" << Endl;; 1749 Log() << ""min or max)."" << Endl;; 1750 Log() << Endl;; 1751 Log() << gTools().Color(""bold"") << ""--- Performance tuning via configuration options:"" << gTools().Color(""reset"") << Endl;; 175",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:68031,Perform,Performance,68031,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Perform'],['Performance']
Performance," Long64_t GetN() const { return fN; }; 79 virtual const char *GetTreeName() const { return fTreeName.Data(); }; 80 virtual const char *GetFileName() const { return fFileName.Data(); }; 81 virtual Int_t GetTreeNumber() const { return fTreeNumber; }; 82 virtual bool GetReapplyCut() const { return fReapply; };; 83 ; 84 bool IsValid() const; 85 {; 86 if ((fLists || fBlocks)) return true;; 87 return false;; 88 }; 89 ; 90 virtual Int_t Merge(TCollection *list);; 91 ; 92 virtual Long64_t Next();; 93 virtual void OptimizeStorage();; 94 virtual Int_t RelocatePaths(const char *newloc, const char *oldloc = nullptr);; 95 virtual bool Remove(Long64_t entry, TTree *tree = nullptr);; 96 virtual void Reset();; 97 virtual Int_t ScanPaths(TList *roots, bool notify = true);; 98 ; 99 void Print(const Option_t* option = """") const override;; 100 virtual void SetDirectory(TDirectory *dir);; 101 virtual void SetEntriesToProcess(Long64_t nen) { fEntriesToProcess = nen; }; 102 virtual void SetShift(bool shift) { fShift = shift; };; 103 virtual void SetTree(const TTree *tree);; 104 virtual void SetTree(const char *treename, const char *filename);; 105 virtual void SetTreeName(const char *treename){ fTreeName = treename; };; 106 virtual void SetFileName(const char *filename){ fFileName = filename; };; 107 virtual void SetTreeNumber(Int_t index) { fTreeNumber=index; }; 108 virtual void SetReapplyCut(bool apply = false) {fReapply = apply;}; // *TOGGLE* *GETTER=GetReapplyCut; 109 virtual void Subtract(const TEntryList *elist);; 110 ; 111 static Int_t Relocate(const char *fn,; 112 const char *newroot, const char *oldroot = nullptr, const char *enlnm = nullptr);; 113 static Int_t Scan(const char *fn, TList *roots);; 114 ; 115// Preventing warnings with -Weffc++ in GCC since the overloading of the || operator was a design choice.; 116#if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) >= 40600; 117#pragma GCC diagnostic push; 118#pragma GCC diagnostic ignored ""-Weffc++""; 119#endif; 12",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEntryList_8h_source.html:4196,Optimiz,OptimizeStorage,4196,doc/master/TEntryList_8h_source.html,https://root.cern,https://root.cern/doc/master/TEntryList_8h_source.html,1,['Optimiz'],['OptimizeStorage']
Performance," Long64_t cacheSize = 0;; 5413 if (fAutoFlush < 0) {; 5414 cacheSize = Long64_t(-cacheFactor * fAutoFlush);; 5415 } else if (fAutoFlush == 0) {; 5416 const auto medianClusterSize = GetMedianClusterSize();; 5417 if (medianClusterSize > 0); 5418 cacheSize = Long64_t(cacheFactor * 1.5 * medianClusterSize * GetZipBytes() / (fEntries + 1));; 5419 else; 5420 cacheSize = Long64_t(cacheFactor * 1.5 * 30000000); // use the default value of fAutoFlush; 5421 } else {; 5422 cacheSize = Long64_t(cacheFactor * 1.5 * fAutoFlush * GetZipBytes() / (fEntries + 1));; 5423 }; 5424 if (cacheSize >= (INT_MAX / 4)) {; 5425 cacheSize = INT_MAX / 4;; 5426 }; 5427 return cacheSize;; 5428 };; 5429 ; 5430 const char *stcs;; 5431 Double_t cacheFactor = 0.0;; 5432 if (!(stcs = gSystem->Getenv(""ROOT_TTREECACHE_SIZE"")) || !*stcs) {; 5433 cacheFactor = gEnv->GetValue(""TTreeCache.Size"", 1.0);; 5434 } else {; 5435 cacheFactor = TString(stcs).Atof();; 5436 }; 5437 ; 5438 if (cacheFactor < 0.0) {; 5439 // ignore negative factors; 5440 cacheFactor = 0.0;; 5441 }; 5442 ; 5443 Long64_t cacheSize = calculateCacheSize(cacheFactor);; 5444 ; 5445 if (cacheSize < 0) {; 5446 cacheSize = 0;; 5447 }; 5448 ; 5449 if (cacheSize == 0 && withDefault) {; 5450 cacheSize = calculateCacheSize(1.0);; 5451 }; 5452 ; 5453 return cacheSize;; 5454}; 5455 ; 5456////////////////////////////////////////////////////////////////////////////////; 5457/// Return an iterator over the cluster of baskets starting at firstentry.; 5458///; 5459/// This iterator is not yet supported for TChain object.; 5460/// ~~~ {.cpp}; 5461/// TTree::TClusterIterator clusterIter = tree->GetClusterIterator(entry);; 5462/// Long64_t clusterStart;; 5463/// while( (clusterStart = clusterIter()) < tree->GetEntries() ) {; 5464/// printf(""The cluster starts at %lld and ends at %lld (inclusive)\n"",clusterStart,clusterIter.GetNextEntry()-1);; 5465/// }; 5466/// ~~~; 5467 ; 5468TTree::TClusterIterator TTree::GetClusterIterator(Long64_t firstentry); 5469{; 5470 /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:215539,cache,cacheFactor,215539,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['cache'],['cacheFactor']
Performance," Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCache.html:19481,cache,cache,19481,root/html532/TTreeCache.html,https://root.cern,https://root.cern/root/html532/TTreeCache.html,1,['cache'],['cache']
Performance," Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:21480,cache,cache,21480,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['cache'],['cache']
Performance," Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level from 0(not compressed) to 9 (max compression); TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; XMLDocPointer_tfDoc!; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Int_tfIOVersion! indicates format of ROOT xml file; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; Long64_tfKeyCounter! counter of created keys, used for keys id; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLFile.html:21665,Cache,Cached,21665,root/html528/TXMLFile.html,https://root.cern,https://root.cern/root/html528/TXMLFile.html,1,['Cache'],['Cached']
Performance," Long64_t ; n . ). finalvirtual . Write array of Char_t to buffer. ; Implements TBuffer.; Definition at line 3336 of file TBufferJSON.cxx. ◆ WriteFloat(). void TBufferJSON::WriteFloat ; (; Float_t ; f). finalvirtual . Writes Float_t value to buffer. ; Implements TBuffer.; Definition at line 3828 of file TBufferJSON.cxx. ◆ WriteInt(). void TBufferJSON::WriteInt ; (; Int_t ; i). finalvirtual . Writes Int_t value to buffer. ; Implements TBuffer.; Definition at line 3774 of file TBufferJSON.cxx. ◆ WriteLong(). void TBufferJSON::WriteLong ; (; Long_t ; l). finalvirtual . Writes Long_t value to buffer. ; Implements TBuffer.; Definition at line 3792 of file TBufferJSON.cxx. ◆ WriteLong64(). void TBufferJSON::WriteLong64 ; (; Long64_t ; l). finalvirtual . Writes Long64_t value to buffer. ; Implements TBuffer.; Definition at line 3810 of file TBufferJSON.cxx. ◆ WriteObjectClass(). void TBufferJSON::WriteObjectClass ; (; const void * ; actualObjStart, . const TClass * ; actualClass, . Bool_t ; cacheReuse . ). finalprotectedvirtual . Write object to buffer. Only used from TBuffer. ; Implements TBufferIO.; Definition at line 2513 of file TBufferJSON.cxx. ◆ WriteShort(). void TBufferJSON::WriteShort ; (; Short_t ; s). finalvirtual . Writes Short_t value to buffer. ; Implements TBuffer.; Definition at line 3756 of file TBufferJSON.cxx. ◆ WriteStdString() [1/3]. void TBufferJSON::WriteStdString ; (; const std::string * ; s). finalvirtual . Writes a std::string. ; Implements TBuffer.; Definition at line 3866 of file TBufferJSON.cxx. ◆ WriteStdString() [2/3]. virtual void TBuffer::WriteStdString ; (; const std::string * ; s). virtual . Implements TBuffer. ◆ WriteStdString() [3/3]. virtual void TBuffer::WriteStdString ; (; std::string & ; s). inlinevirtual . Reimplemented from TBuffer.; Definition at line 312 of file TBuffer.h. ◆ WriteTString(). void TBufferJSON::WriteTString ; (; const TString & ; s). finalvirtual . Writes a TString. ; Implements TBuffer.; Definition at line 3856 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:97968,cache,cacheReuse,97968,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['cache'],['cacheReuse']
Performance, LorentzVector operator * ( const Scalar & a) const {; 469 LorentzVector tmp(*this);; 470 tmp *= a;; 471 return tmp;; 472 }; 473 ; 474 /**; 475 Divide a LorentzVector by a scalar quantity; 476 \param a scalar quantity of type a; 477 \return a new mathcoreLorentzVector q = v / a same type as v; 478 */; 479 LorentzVector<CoordSystem> operator / ( const Scalar & a) const {; 480 LorentzVector<CoordSystem> tmp(*this);; 481 tmp /= a;; 482 return tmp;; 483 }; 484 ; 485 /**; 486 Negative of a LorentzVector (q = - v ); 487 \return a new LorentzVector with opposite direction and time; 488 */; 489 LorentzVector operator - () const {; 490 //LorentzVector<CoordinateType> v(*this);; 491 //v.Negate();; 492 return operator*( Scalar(-1) );; 493 }; 494 LorentzVector operator + () const {; 495 return *this;; 496 }; 497 ; 498 // ---- Relativistic Properties ----; 499 ; 500 /**; 501 Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]; 502 */; 503 Scalar Rapidity() const {; 504 // TODO - It would be good to check that E > Pz and use the Throw(); 505 // mechanism or at least load a NAN if not.; 506 // We should then move the code to a .cpp file.; 507 const Scalar ee = E();; 508 const Scalar ppz = Pz();; 509 using std::log;; 510 return Scalar(0.5) * log((ee + ppz) / (ee - ppz));; 511 }; 512 ; 513 /**; 514 Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]; 515 */; 516 Scalar ColinearRapidity() const {; 517 // TODO - It would be good to check that E > P and use the Throw(); 518 // mechanism or at least load a NAN if not.; 519 const Scalar ee = E();; 520 const Scalar pp = P();; 521 using std::log;; 522 return Scalar(0.5) * log((ee + pp) / (ee - pp));; 523 }; 524 ; 525 /**; 526 Determine if momentum-energy can represent a physical massive particle; 527 */; 528 bool isTimelike( ) const {; 529 Scalar ee = E(); Scalar pp = P(); return ee*ee > pp*pp;; 530 }; 531 ; 532 /**; 533 Determine if momentum-energy can represent a massless particle; 534 */; 535 bool isLightlike( Sca,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:16297,load,load,16297,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['load'],['load']
Performance," Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeAbstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:83701,perform,perform,83701,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,2,['perform'],['perform']
Performance," Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<vector<double,allocator<double> >*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(nset,0,sterileIndex,isetRangeName). Int_t setObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0). T* getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. T* getObjByIndex(Int_t index) const. const RooNameSet* nameSet1ByIndex(Int_t index) const. const RooNameSet* nameSet2ByIndex(Int_t index) const. void insertObjectHook(vector<double,allocator<double> >& ); Interface function to perform post-insert operations on cached object. void wireCache(). » Last changed: Sat Jun 20 16:42:23 2015 » Last generated: 2015-06-20 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_vector_double___.html:4389,cache,cacheSize,4389,root/html534/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_vector_double___.html,6,"['cache', 'perform']","['cache', 'cacheSize', 'cached', 'perform']"
Performance," Member Function Documentation. ◆ actualObservables(). virtual RooFit::OwningPtr< RooArgSet > RooAbsCachedReal::actualObservables ; (; const RooArgSet & ; nset); const. protectedpure virtual . Implemented in RooCachedReal, and RooNumRunningInt. ◆ actualParameters(). virtual RooFit::OwningPtr< RooArgSet > RooAbsCachedReal::actualParameters ; (; const RooArgSet & ; nset); const. protectedpure virtual . Implemented in RooCachedReal, and RooNumRunningInt. ◆ analyticalIntegralWN(). double RooAbsCachedReal::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Forward call to implementation in relevant RooHistFunc instance. ; Reimplemented from RooAbsReal.; Definition at line 320 of file RooAbsCachedReal.cxx. ◆ binningName(). virtual const char * RooAbsCachedReal::binningName ; (; ); const. inlineprotectedvirtual . Reimplemented in RooNumRunningInt.; Definition at line 96 of file RooAbsCachedReal.h. ◆ cacheNameSuffix(). TString RooAbsCachedReal::cacheNameSuffix ; (; const RooArgSet & ; nset); const. protected . Construct unique suffix name for cache p.d.f object. ; Definition at line 225 of file RooAbsCachedReal.cxx. ◆ Class(). static TClass * RooAbsCachedReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCachedReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCachedReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 120 of file RooAbsCachedReal.h. ◆ createCache(). RooAbsCachedReal::FuncCacheElem * RooAbsCachedReal::createCache ; (; const RooArgSet * ; nset); const. protectedvirtual . Interface function to create an internal cache object that represent each cached function configuration. ; This interface allows to create and return a class derived from RooAbsCachedReal::FuncCacheElem so that a derived class fillCacheObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedReal.html:63822,cache,cacheNameSuffix,63822,doc/master/classRooAbsCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedReal.html,1,['cache'],['cacheNameSuffix']
Performance," Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the .xml weightfile at hand. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddMulticlassOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void NoErrorCalc(Double_t *const err, Double_t *const errUpper). Double_t GetMvaValue(const TMVA::Event *const ev, Double_t* err = 0, Double_t* errUpper = 0). Bool_t IsSignalLike(); uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBase.html:22101,Optimiz,OptimizeTuningParameters,22101,root/html534/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBase.html,2,"['Optimiz', 'tune']","['OptimizeTuningParameters', 'tuned']"
Performance," Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the .xml weightfile at hand. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddMulticlassOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void NoErrorCalc(Double_t*const err, Double_t*const errUpper). Double_t GetMvaValue(const TMVA::Event*const ev, Double_t* err = 0, Double_t* errUpper = 0). Bool_t IsSignalLike(); uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBase.html:23614,Optimiz,OptimizeTuningParameters,23614,root/html602/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBase.html,4,"['Optimiz', 'tune']","['OptimizeTuningParameters', 'tuned']"
Performance, MethodCuts.h. ◆ fCutRangeMax. Double_t* TMVA::MethodCuts::fCutRangeMax. private . maximum of allowed cut range ; Definition at line 176 of file MethodCuts.h. ◆ fCutRangeMin. Double_t* TMVA::MethodCuts::fCutRangeMin. private . minimum of allowed cut range ; Definition at line 175 of file MethodCuts.h. ◆ fEffBvsSLocal. TH1* TMVA::MethodCuts::fEffBvsSLocal. private . intermediate eff. background versus eff signal histo ; Definition at line 202 of file MethodCuts.h. ◆ fEffMethod. EEffMethod TMVA::MethodCuts::fEffMethod. private . chosen efficiency calculation method ; Definition at line 170 of file MethodCuts.h. ◆ fEffMethodS. TString TMVA::MethodCuts::fEffMethodS. private . chosen efficiency calculation method (string) ; Definition at line 169 of file MethodCuts.h. ◆ fEffRef. Double_t TMVA::MethodCuts::fEffRef. private . reference efficiency ; Definition at line 192 of file MethodCuts.h. ◆ fEffSMax. Double_t TMVA::MethodCuts::fEffSMax. private . used to test optimized signal efficiency ; Definition at line 174 of file MethodCuts.h. ◆ fEffSMin. Double_t TMVA::MethodCuts::fEffSMin. private . used to test optimized signal efficiency ; Definition at line 173 of file MethodCuts.h. ◆ fFitMethod. EFitMethodType TMVA::MethodCuts::fFitMethod. private . chosen fit method ; Definition at line 168 of file MethodCuts.h. ◆ fFitMethodS. TString TMVA::MethodCuts::fFitMethodS. private . chosen fit method (string) ; Definition at line 167 of file MethodCuts.h. ◆ fFitParams. std::vector<EFitParameters>* TMVA::MethodCuts::fFitParams. private . vector for series of fit methods ; Definition at line 171 of file MethodCuts.h. ◆ fgMaxAbsCutVal. const Double_t TMVA::MethodCuts::fgMaxAbsCutVal = 1.0e30. static . Definition at line 130 of file MethodCuts.h. ◆ fMeanB. std::vector<Double_t>* TMVA::MethodCuts::fMeanB. private . means of variables (background) ; Definition at line 198 of file MethodCuts.h. ◆ fMeanS. std::vector<Double_t>* TMVA::MethodCuts::fMeanS. private . means of variables (signa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:49825,optimiz,optimized,49825,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,1,['optimiz'],['optimized']
Performance," MethodInfo_Next(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9083; TCling::SetAutoLoadCallBackvoid * SetAutoLoadCallBack(void *cb) finalDefinition TCling.h:199; TCling::ClassInfo_ClassPropertyLong_t ClassInfo_ClassProperty(ClassInfo_t *info) const finalDefinition TCling.cxx:8176; TCling::MethodInfo_Deletevoid MethodInfo_Delete(MethodInfo_t *minfo) const finalInterface to cling function.Definition TCling.cxx:9002; TCling::fIsShuttingDownbool fIsShuttingDownDefinition TCling.h:187; TCling::MethodArgInfo_Deletevoid MethodArgInfo_Delete(MethodArgInfo_t *marginfo) const finalDefinition TCling.cxx:9241; TCling::DataMemberInfo_FactoryDataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t *clinfo, TDictionary::EMemberSelection selection) const finalDefinition TCling.cxx:8599; TCling::ClassInfo_Destructvoid ClassInfo_Destruct(ClassInfo_t *info, void *arena) const finalDefinition TCling.cxx:8207; TCling::GetClassTClass * GetClass(const std::type_info &typeinfo, Bool_t load) const finalDemangle the name (from the typeinfo) and then request the class via the usual name based interface (...Definition TCling.cxx:6110; TCling::UnloadAllSharedLibraryMapsInt_t UnloadAllSharedLibraryMaps() finalUnload the library map entries coming from all the loaded shared libraries.Definition TCling.cxx:5998; TCling::ClassInfo_Initvoid ClassInfo_Init(ClassInfo_t *info, const char *funcname) const finalDefinition TCling.cxx:8269; TCling::GetModTClassesstd::set< TClass * > & GetModTClasses()Definition TCling.h:579; TCling::BaseClassInfo_ClassInfoClassInfo_t * BaseClassInfo_ClassInfo(BaseClassInfo_t *) const finalDefinition TCling.cxx:8537; TCling::fClingCallbacksTClingCallbacks * fClingCallbacksDefinition TCling.h:139; TCling::CallFunc_ExecInt64Long64_t CallFunc_ExecInt64(CallFunc_t *func, void *address) const finalDefinition TCling.cxx:7893; TCling::ClassInfo_PropertyLong_t ClassInfo_Property(ClassInfo_t *info) const finalDefinition TCling.cxx:8392; TCling::ClassInfo_GetBaseOffsetLongptr_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:65740,load,load,65740,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['load'],['load']
Performance," N(1/0) is the number of data points with effCat=1 and effCat=0 as function of the frames variable. ;  ; virtual void resetCache ();  Internal method – Remove cached function values. ;  ; virtual void setArgStatus (const RooArgSet &set, bool active);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from RooDirItem; void appendToDir (TObject *obj, bool forceMemoryResident=false);  Append object to directory. ;  ; void removeFromDir (TObject *obj);  Remove object from directory it was added to. ;  . Protected Attributes; Int_t _arrSize {0};  ; std::vector< std::vector< double > > _binbounds;  ! list of bin bounds per dimension ;  ; double * _binv {nullptr};  [_arrSize] Bin volume array ;  ; double _cache_sum {0.};  ! Cache for sum of entries ; ;  ; Int_t _cache_sum_valid {kInvalid};  ! Is cache sum valid? Needs to be Int_t instead of CacheSumState_t for subclasses. ;  ; ULong64_t _curIndex {std::numeric_limits<ULong64_t>::max()};  Current index. ;  ; double * _errHi {nullptr};  [_arrSize] High-side error on weight array ;  ; double * _errLo {nullptr};  [_arrSize] Low-side error on weight array ;  ; std::vector< Int_t > _idxMult;  ; std::vector< std::unique_ptr< const RooAbsBinning > > _lvbins;  ! List of used binnings associated with lvalues ;  ; std::vector< RooAbsLValue * > _lvvars;  ! List of observables casted as RooAbsLValue ;  ; std::unordered_map< int, std::vector< double > > _pbinvCache;  ! Cache for arrays of partial bin volumes ;  ; double * _sumw2 {nullptr};  [_arrSize] Sum of weights^2 ;  ; double * _wgt {nullptr};  [_arrSize] Weight array ;  ;  Protected Attributes inherited from RooAbsData; RooArgSet _cachedVars;  ! External variables cached with this data set ;  ; std::unique_ptr< RooAbsDataStore > _dstore;  Data storage implementation. ;  ; std::unique_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:38455,Cache,Cache,38455,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,2,"['Cache', 'cache']","['Cache', 'cache']"
Performance," N-space to 1-dim array jump table,; and fill the internal tree with all bin center coordinates. void checkBinBounds() const. RooDataHist(const RooDataHist& other, const char* newname = 0); Copy constructor. RooDataHist(const char* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); Constructor of a data hist from (part of) an existing data hist. The dimensions; of the data set are defined by the 'vars' RooArgSet, which can be identical; to 'dset' dimensions, or a subset thereof. Reduced dimensions will be projected; in the output data hist. The optional 'cutVar' formula variable can used to; select the subset of bins to be copied. For most uses the RooAbsData::reduce() wrapper function, which uses this constructor,; is the most convenient way to create a subset of an existing data. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Construct a clone of this dataset that contains only the cached variables. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataHist(); Destructor. Int_t getIndex(const RooArgSet& coord, Bool_t fast = kFALSE). Int_t calcTreeIndex() const; Calculate the index for the weights array corresponding to; to the bin enclosing the current coordinates of the internal argset. void dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weightSquared() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataHist.html:27830,cache,cacheClone,27830,root/html534/RooDataHist.html,https://root.cern,https://root.cern/root/html534/RooDataHist.html,6,['cache'],"['cacheClone', 'cached']"
Performance," NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. void SetAllIndex(); Assigns uid's for all materials,media and matrices. void ClearAttributes(); Reset all attributes to default ones. Default attributes for visualization; are those defined before closing the geometry. void CloseGeometry(Option_t* option = ""d""); Closing geometry implies checking the geometry validity, fixing shapes; with negative parameters (run-time shapes)building the cache manager,; voxelizing all volumes, counting the total number of physical nodes and; registring the manager class to the browser. void ClearOverlaps(); Clear the list of overlaps. void ClearShape(const TGeoShape* shape); Remove a shape from the list of shapes. void CleanGarbage(); Clean temporary volumes and shapes from garbage collection. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Int_t GetCurrentNodeId() const; Get the unique ID of the current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. Int_t CountNodes(const TGeoVolume* vol = 0, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:44157,perform,performance,44157,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,3,['perform'],['performance']
Performance," NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. void SetAllIndex(); Assigns uid's for all materials,media and matrices. void ClearAttributes(); Reset all attributes to default ones. Default attributes for visualization; are those defined before closing the geometry. void CloseGeometry(Option_t* option = ""d""); Closing geometry implies checking the geometry validity, fixing shapes; with negative parameters (run-time shapes)building the cache manager,; voxelizing all volumes, counting the total number of physical nodes and; registring the manager class to the browser. void ClearOverlaps(); Clear the list of overlaps. void ClearShape(const TGeoShape* shape); Remove a shape from the list of shapes. void CleanGarbage(); Clean temporary volumes and shapes from garbage collection. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Int_t GetCurrentNodeId() const; Get the unique ID of the current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. void CountLevels(); Count maximum number of nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:46503,perform,performance,46503,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,3,['perform'],['performance']
Performance," No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TProofLite Class ReferencePROOF » PROOF kernel Libraries. ; This class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets. ; By default the number of workers started is NumberOfCores+1; a different number can be forced on construction. ; Definition at line 40 of file TProofLite.h. Public Member Functions;  TProofLite (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProofLite () override;  Destructor. ;  ; Bool_t CancelStagingDataSet (const char *dataset) override;  Cancels a dataset staging request. ;  ; void ClearCache (const char *file=0) override;  Remove files from all file caches. ;  ; void ClearDataSetCache (const char *dataset=0) override;  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Execute the specified drawing action on a data set (TDSet). ;  ; Bool_t ExistsDataSet (const char *uri) override;  Returns kTRUE if 'dataset' described by 'uri' exists, kFALSE otherwise. ;  ; TFileCollection * GetDataSet (const char *uri, const char *=0) override;  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSets (const char *uri="""", const char *=0) override;  lists all datasets that match given uri ;  ; TList * GetListOfQueries (Option_t *opt="""") override;  Get the list of queries. ;  ; TFileCollection * GetStagingStatusDataSet (const char *dataset) override;  Obtains a TFileCollection s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:1141,cache,caches,1141,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['cache'],['caches']
Performance," Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; Int_t_numPdfNumber of registered PDFs; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooObjCacheManager_partIntMgrComponent normalization manager; TList_pdfProxyListList of PDF proxies (named after applicable category state); Int_tRooAbsReal::_plotBinsNumber of plot bins; const TNamed*_plotCoefNormRange; RooSetProxy_plotCoefNormSet; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:41473,cache,cache,41473,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,1,['cache'],['cache']
Performance," NotCompileIfScalarBackend = std::enable_if<!(std::is_same<double, ROOT::Double_v>::value)>>; 374 void SetFunction(const IGradModelFunction_v &func, bool useGradient = true);; 375#endif; 376 /**; 377 Set the fitted function from a parametric 1D function interface; 378 */; 379 void SetFunction(const IModel1DFunction & func, bool useGradient = false);; 380 ; 381 /**; 382 Set the fitted function (model function) from a parametric gradient function interface; 383 */; 384 void SetFunction(const IGradModelFunction & func, bool useGradient = true);; 385 /**; 386 Set the fitted function from 1D gradient parametric function interface; 387 */; 388 void SetFunction(const IGradModel1DFunction & func, bool useGradient = true);; 389 ; 390 ; 391 /**; 392 get fit result; 393 */; 394 const FitResult & Result() const {; 395 assert( fResult.get() );; 396 return *fResult;; 397 }; 398 ; 399 ; 400 /**; 401 perform an error analysis on the result using the Hessian; 402 Errors are obtained from the inverse of the Hessian matrix; 403 To be called only after fitting and when a minimizer supporting the Hessian calculations is used; 404 otherwise an error (false) is returned.; 405 A new FitResult with the Hessian result will be produced; 406 */; 407 bool CalculateHessErrors();; 408 ; 409 /**; 410 perform an error analysis on the result using MINOS; 411 To be called only after fitting and when a minimizer supporting MINOS is used; 412 otherwise an error (false) is returned.; 413 The result will be appended in the fit result class; 414 Optionally a vector of parameter indices can be passed for selecting; 415 the parameters to analyse using FitConfig::SetMinosErrors; 416 */; 417 bool CalculateMinosErrors();; 418 ; 419 /**; 420 access to the fit configuration (const method); 421 */; 422 const FitConfig & Config() const { return fConfig; }; 423 ; 424 /**; 425 access to the configuration (non const method); 426 */; 427 FitConfig & Config() { return fConfig; }; 428 ; 429 /**; 430 query if fit is binn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:16137,perform,perform,16137,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['perform'],['perform']
Performance," Observable; RooRealVar mjjj(""mjjj"", ""m(3jet) (GeV)"", 100, 85., 350.);; ; // Signal component (Gaussian); RooRealVar mtop(""mtop"", ""m(top)"", 162);; RooRealVar wtop(""wtop"", ""m(top) resolution"", 15.2);; RooGaussian sig(""sig"", ""top signal"", mjjj, mtop, wtop);; ; // Background component (Chebychev); RooRealVar c0(""c0"", ""Chebychev coefficient 0"", -0.846, -1., 1.);; RooRealVar c1(""c1"", ""Chebychev coefficient 1"", 0.112, -1., 1.);; RooRealVar c2(""c2"", ""Chebychev coefficient 2"", 0.076, -1., 1.);; RooChebychev bkg(""bkg"", ""combinatorial background"", mjjj, RooArgList(c0, c1, c2));; ; // Composite model; RooRealVar nsig(""nsig"", ""number of signal events"", 53, 0, 1e3);; RooRealVar nbkg(""nbkg"", ""number of background events"", 103, 0, 5e3);; RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), RooArgList(nsig, nbkg));; ; // C r e a t e m a n a g e r; // ---------------------------; ; // Configure manager to perform binned extended likelihood fits (Binned(),Extended()) on data generated; // with a Poisson fluctuation on Nobs (Extended()); RooMCStudy *mcs = new RooMCStudy(model, mjjj, Binned(), Silence(), Extended(true),; FitOptions(Extended(true), PrintEvalErrors(-1)));; ; // C u s t o m i z e m a n a g e r; // ---------------------------------; ; // Add module that randomizes the summed value of nsig+nbkg; // sampling from a uniform distribution between 0 and 1000; //; // In general one can randomize a single parameter, or a; // sum of N parameters, using either a uniform or a Gaussian; // distribution. Multiple randomization can be executed; // by a single randomizer module; ; RooRandomizeParamMCSModule randModule;; randModule.sampleSumUniform(RooArgSet(nsig, nbkg), 50, 500);; mcs->addModule(randModule);; ; // Add profile likelihood calculation of significance. Redo each; // fit while keeping parameter nsig fixed to zero. For each toy,; // the difference in -log(L) of both fits is stored, as well; // a simple significance interpretation of the delta(-logL); // using Dnll = 0.5 sig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html:1801,perform,perform,1801,doc/master/rf803__mcstudy__addons2_8C.html,https://root.cern,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html,1,['perform'],['perform']
Performance," Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:87081,perform,perform,87081,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*( Scalar(-1) ). DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar eta() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:28622,perform,perform,28622,root/html528/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,3,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:28622,perform,perform,28622,root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,1,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*( Scalar(-1) ). DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:23472,perform,perform,23472,root/html528/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,3,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:23472,perform,perform,23472,root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,1,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*( Scalar(-1) ). DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar eta() const; { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:22062,perform,perform,22062,root/html528/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,3,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:22062,perform,perform,22062,root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,1,['perform'],['perform']
Performance," Option_t *option); 142{; 143 SetErrorOption(option);; 144 ; 145 // create extra profile data structure (bin entries/ y^2 and sum of weight square); 146 TProfileHelper::BuildArray(this);; 147 ; 148 fTmin = tmin;; 149 fTmax = tmax;; 150 fScaling = kFALSE;; 151 fTsumwt = fTsumwt2 = 0;; 152}; 153 ; 154////////////////////////////////////////////////////////////////////////////////; 155/// Copy constructor.; 156 ; 157TProfile3D::TProfile3D(const TProfile3D &profile3d) : TH3D(); 158{; 159 profile3d.TProfile3D::Copy(*this);; 160}; 161 ; 162TProfile3D &TProfile3D::operator=(const TProfile3D &profile3d); 163{; 164 if (this != &profile3d); 165 profile3d.TProfile3D::Copy(*this);; 166 return *this;; 167}; 168 ; 169////////////////////////////////////////////////////////////////////////////////; 170/// Performs the operation: `this = this + c1*f1` .; 171 ; 172Bool_t TProfile3D::Add(TF1 *, Double_t , Option_t*); 173{; 174 Error(""Add"",""Function not implemented for TProfile3D"");; 175 return kFALSE;; 176}; 177 ; 178////////////////////////////////////////////////////////////////////////////////; 179/// Performs the operation: `this = this + c1*h1` .; 180 ; 181Bool_t TProfile3D::Add(const TH1 *h1, Double_t c1); 182{; 183 if (!h1) {; 184 Error(""Add"",""Attempt to add a non-existing profile"");; 185 return kFALSE;; 186 }; 187 if (!h1->InheritsFrom(TProfile3D::Class())) {; 188 Error(""Add"",""Attempt to add a non-profile2D object"");; 189 return kFALSE;; 190 }; 191 ; 192 return TProfileHelper::Add(this, this, h1, 1, c1);; 193}; 194 ; 195////////////////////////////////////////////////////////////////////////////////; 196/// Replace contents of this profile3D by the addition of h1 and h2.; 197///; 198/// `this = c1*h1 + c2*h2`; 199 ; 200Bool_t TProfile3D::Add(const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2); 201{; 202 if (!h1 || !h2) {; 203 Error(""Add"",""Attempt to add a non-existing profile"");; 204 return kFALSE;; 205 }; 206 if (!h1->InheritsFrom(TProfile3D::Class())) {; 207 Error(""Add""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:7146,Perform,Performs,7146,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['Perform'],['Performs']
Performance," Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Currently, order2 = 2*(order+1). Picture: (also see Knuth Vol 3 pg 478); ; +--+--+--+--+--+--...; | | | | | |; parent--->| | | |; | | | |; +*-+*-+*-+--+--+--...; | | |; +----+ | +-----+; | +-----+ |; V | V; +----------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; PictureXID PictureDefinition render.h:33; It is conceptually VERY convenient to think of the data as being the very first element of the sib node. Any primitive that tells sib to perform some action on n nodes should include this 'hidden' element. For InnerNodes, the hidden element has (physical) index 0 in the array, and in LeafNodes, the hidden element has (virtual) index -1 in the array. Therefore, there are two 'size' primitives for nodes: Psize - the physical size: how many elements are contained in the; array in the node.; Vsize - the 'virtual' size; if the node is pointed to by; element 0 of the parent node, then Vsize == Psize;; otherwise the element in the parent item that points to this; node 'belongs' to this node, and Vsize == Psize+1;; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; Parent nodes are always InnerNodes.; These are the primitive operations on Nodes: Append(elt) - adds an element to the end of the array of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBtree.html:6495,perform,perform,6495,doc/master/classTBtree.html,https://root.cern,https://root.cern/doc/master/classTBtree.html,1,['perform'],['perform']
Performance," Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function f1. f1 is an already predefined function created by TF1.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors do not consider errors in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:21213,Perform,Perform,21213,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,3,['Perform'],['Perform']
Performance," Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function f1. f1 is an already predefined function created by TF1.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:22499,Perform,Perform,22499,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,3,['Perform'],['Perform']
Performance," Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos if the request is in the list of; prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:24267,Cache,Cache,24267,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['Cache'],['Cache']
Performance," Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:23650,Cache,Cache,23650,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['Cache'],['Cache']
Performance," Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1529 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1236 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1893 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1667 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm is time in seconds, which already spent inside the function First non-zero value breaks loop and result is returned. Runs application mainloop and short sleeps in-between ; Definition at line 1789 of file RWebWindow.cxx. ◆ WaitForTimed() [1/2]. int RWebWindow::WaitForTimed ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm in lambda is time in seconds, which already spent inside the function First non-zero value breaks waiting loop and result is r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:50889,latency,latency,50889,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['latency'],['latency']
Performance," Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1571 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1269 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1935 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1709 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm is time in seconds, which already spent inside the function First non-zero value breaks loop and result is returned. Runs application mainloop and short sleeps in-between ; Definition at line 1831 of file RWebWindow.cxx. ◆ WaitForTimed() [1/2]. int RWebWindow::WaitForTimed ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm in lambda is time in seconds, which already spent inside the function First non-zero value breaks waiting loop and result is r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:49773,latency,latency,49773,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['latency'],['latency']
Performance," Printf("" .L <filename>[flags]: load the given file with optional flags like\n""; 1247 "" + to compile or ++ to force recompile.\n""; 1248 "" Type .? TSystem::CompileMacro for a list of all flags.\n""; 1249 "" <filename> can also be a shared library; skip flags."");; 1250 Printf("" .(x|X) <filename>[flags](args) :\n""; 1251 "" same as .L <filename>[flags] and runs then a function\n""; 1252 "" with signature: ret_type filename(args)."");; 1253 Printf("" .credits : show credits"");; 1254 Printf("" .demo : launch GUI demo"");; 1255 Printf("" .forum bug : ask for help with a bug or crash at the ROOT forum."");; 1256 Printf("" .gh [bug|feature|improvement]\n""; 1257 "" : submit a bug report, feature or improvement suggestion"");; 1258 Printf("" .help Class::Member : open reference guide for that class member (or .?).\n""; 1259 "" Specifying '::Member' is optional."");; 1260 Printf("" .help edit : show line editing shortcuts (or .?)"");; 1261 Printf("" .license : show license"");; 1262 Printf("" .libraries : show loaded libraries"");; 1263 Printf("" .ls : list contents of current TDirectory"");; 1264 Printf("" .pwd : show current TDirectory, pad and style"");; 1265 Printf("" .quit (or .exit) : quit ROOT (long form of .q)"");; 1266 Printf("" .R [user@]host[:dir] [-l user] [-d dbg] [script] :\n""; 1267 "" launch process in a remote host"");; 1268 Printf("" .qqq : quit ROOT - mandatory"");; 1269 Printf("" .qqqqq : exit process immediately"");; 1270 Printf("" .qqqqqqq : abort process"");; 1271 Printf("" .which [file] : show path of macro file"");; 1272 Printf("" .![OS_command] : execute OS-specific shell command"");; 1273 Printf("" .!root -? : print ROOT usage (CLI options)"");; 1274 return;; 1275 } else {; 1276 // If the user wants to use the extended "".help scopeName"" command to access; 1277 // the online reference guide, we first check if the command starts correctly.; 1278 if ((!strippedCommand.BeginsWith("".help "")) && (!strippedCommand.BeginsWith("".? ""))) {; 1279 Error(""Help"", ""Unknown command!"");; 1280 return;; 1281 }; 1282 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:50184,load,loaded,50184,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['load'],['loaded']
Performance," Private Attributes; double _2pi;  ; Int_t _BandWidthType;  ; Int_t _debug;  ; double _hix;  ; double _hiy;  ; double * _hx;  ; double * _hy;  ; double _lox;  ; double _loy;  ; Int_t _MirrorAtBoundary;  ; double _n;  ; double _n16;  ; Int_t _nEvents;  ; double _norm;  ; double _sqrt2pi;  ; Int_t _verbosedebug;  ; Int_t _vverbosedebug;  ; double _widthScaleFactor;  ; double * _x;  ; double _xMean;  ; double _xoffset;  ; double _xSigma;  ; double * _y;  ; double _yMean;  ; double _yoffset;  ; double _ySigma;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo2DKeysPdf.html:62672,Cache,CacheMode,62672,doc/master/classRoo2DKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRoo2DKeysPdf.html,1,['Cache'],['CacheMode']
Performance," Prohibit server redirects -- Debugging tool; RooObjCacheManager_projCacheMgrManager of cache with coefficient projections and transformations; Bool_t_projectCoefsIf true coefficients need to be projected for use in evaluate(); TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooSetProxy_refCoefNorm! Reference observable set for coefficient interpretation; TNamed*_refCoefRangeName! Reference range name for coefficient interpreation; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooArgList*_snormList! List of supplemental normalization factors; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:43336,cache,cache,43336,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,2,['cache'],['cache']
Performance," Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsSelfCachedReal(); Destructor. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Fill cache with sampling of function as defined by the evaluate() implementation. RooArgSet* actualObservables(const RooArgSet& nset) const; Defines observables to be cached, given a set of user defined observables; Returns the subset of nset that are observables this p.d.f. RooArgSet* actualParameters(const RooArgSet& nset) const; Defines parameters on which cache contents depends. Returns; subset of variables of self that is not contained in the; supplied nset. const char* inputBaseName() const; Use own name as base name for caches. » Last changed: Thu Sep 23 19:58:19 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsSelfCachedReal.html:34283,cache,cache,34283,root/html528/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html528/RooAbsSelfCachedReal.html,5,['cache'],"['cache', 'cached', 'caches']"
Performance," Proof (gProof).; 3003///; 3004/// ""Draw"" and ""Processed"" commands will be handled by PROOF.; 3005/// The refresh and gettreeheader are meaningful only if on == true.; 3006/// If refresh is true the underlying fProofChain (chain proxy) is always; 3007/// rebuilt (even if already existing).; 3008/// If gettreeheader is true the header of the tree will be read from the; 3009/// PROOF cluster: this is only needed for browsing and should be used with; 3010/// care because it may take a long time to execute.; 3011 ; 3012void TChain::SetProof(bool on, bool refresh, bool gettreeheader); 3013{; 3014 if (!on) {; 3015 // Disable; 3016 SafeDelete(fProofChain);; 3017 // Reset related bit; 3018 ResetBit(kProofUptodate);; 3019 } else {; 3020 if (fProofChain && !refresh &&; 3021 (!gettreeheader || (gettreeheader && fProofChain->GetTree()))) {; 3022 return;; 3023 }; 3024 SafeDelete(fProofChain);; 3025 ResetBit(kProofUptodate);; 3026 ; 3027 // Make instance of TChainProof via the plugin manager; 3028 TPluginHandler *h;; 3029 if ((h = gROOT->GetPluginManager()->FindHandler(""TChain"", ""proof""))) {; 3030 if (h->LoadPlugin() == -1); 3031 return;; 3032 if (!(fProofChain = reinterpret_cast<TChain *>(h->ExecPlugin(2, this, gettreeheader)))); 3033 Error(""SetProof"", ""creation of TProofChain failed"");; 3034 // Set related bits; 3035 SetBit(kProofUptodate);; 3036 }; 3037 }; 3038}; 3039 ; 3040////////////////////////////////////////////////////////////////////////////////; 3041/// Set chain weight.; 3042///; 3043/// The weight is used by TTree::Draw to automatically weight each; 3044/// selected entry in the resulting histogram.; 3045/// For example the equivalent of; 3046/// ~~~ {.cpp}; 3047/// chain.Draw(""x"",""w""); 3048/// ~~~; 3049/// is; 3050/// ~~~ {.cpp}; 3051/// chain.SetWeight(w,""global"");; 3052/// chain.Draw(""x"");; 3053/// ~~~; 3054/// By default the weight used will be the weight; 3055/// of each Tree in the TChain. However, one can force the individual; 3056/// weights to be ignored by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:110247,Load,LoadPlugin,110247,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['Load'],['LoadPlugin']
Performance," Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCacheElement; RooAbsArg * _owner;  ! Pointer to owning RooAbsArg ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf::CacheElem:. This browser is not able ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1216,cache,cache,1216,doc/master/classRooAbsPdf_1_1CacheElem.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html,1,['cache'],['cache']
Performance," Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooLagrangianMorphFunc Class ReferenceRooFit » RooFit. ; Class RooLagrangianMorphing is a implementation of the method of Effective Lagrangian Morphing, described in ATL-PHYS-PUB-2015-047. ; Effective Lagrangian Morphing is a method to construct a continuous signal model in the coupling parameter space. Basic assumption is that shape and cross section of a physical distribution is proportional to it's squared matrix element. The signal model is constructed by a weighted sum over N input distributions. The calculation of the weights is based on Matrix Elements evaluated for the different input scenarios. The number of input files depends on the number of couplings in production and decay vertices, and also whether the decay and production vertices describe the same process or not. ; Definition at line 77 of file RooLagrangianMorphFunc.h. Classes; class  CacheElem;  ; struct  Config;  . Public Types; typedef std::map< const std::string, FlagSet > FlagMap;  ; typedef std::map< const std::string, int > FlagSet;  ; typedef std::map< const std::string, ParamSet > ParamMap;  ; typedef std::map< const std::string, double > ParamSet;  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:1205,Cache,CacheElem,1205,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['Cache'],['CacheElem']
Performance," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 108 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 128 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:2834,perform,performed,2834,doc/v632/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html,1,['perform'],['performed']
Performance," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 115 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 135 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:2877,perform,performed,2877,doc/master/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html,1,['perform'],['performed']
Performance," PushDataCache(TVirtualArray *)Push a new data cache area onto the list of area to be used for temporarily store 'missing' data memb...Definition TBuffer.cxx:362; TBuffer::SetReAllocFuncvoid SetReAllocFunc(ReAllocCharFun_t reallocfunc=nullptr)Set which memory reallocation method to use.Definition TBuffer.cxx:286; TBuffer::PopDataCachevirtual TVirtualArray * PopDataCache()Pop and Return the 'current' data cache area from the list of area to be used for temporarily store '...Definition TBuffer.cxx:381; TBuffer::EModeEModeDefinition TBuffer.h:73; TBuffer::kWrite@ kWriteDefinition TBuffer.h:73; TBuffer::kRead@ kReadDefinition TBuffer.h:73; TBuffer::fBufMaxchar * fBufMaxDefinition TBuffer.h:53; TBuffer::fBufCurchar * fBufCurDefinition TBuffer.h:52; TBuffer::AutoExpandvoid AutoExpand(Int_t size_needed)Automatically calculate a new size and expand the buffer to fit at least size_needed.Definition TBuffer.cxx:158; TBuffer::PeekDataCachevirtual TVirtualArray * PeekDataCache() constReturn the 'current' data cache area from the list of area to be used for temporarily store 'missing'...Definition TBuffer.cxx:371; TBuffer::ReadClassBuffervirtual Int_t ReadClassBuffer(const TClass *cl, void *pointer, const TClass *onfile_class=nullptr)=0; TBuffer::kMinimalSize@ kMinimalSizeDefinition TBuffer.h:78; TBuffer::kInitialSize@ kInitialSizeDefinition TBuffer.h:78; TBuffer::~TBuffervirtual ~TBuffer()Delete an I/O buffer object.Definition TBuffer.cxx:140; TBuffer::GetClassstatic TClass * GetClass(const std::type_info &typeinfo)Forward to TROOT::GetClass().Definition TBuffer.cxx:328; TBuffer::IsReadingBool_t IsReading() constDefinition TBuffer.h:86; TBuffer::fModeBool_t fModeDefinition TBuffer.h:48; TBuffer::GetReAllocFuncReAllocCharFun_t GetReAllocFunc() constReturn the reallocation method currently used.Definition TBuffer.cxx:277; TBuffer::fReAllocFuncReAllocCharFun_t fReAllocFuncDefinition TBuffer.h:55; TBuffer::fBufferchar * fBufferDefinition TBuffer.h:51; TBuffer::fParentTObject * fPar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:19337,cache,cache,19337,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['cache'],['cache']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TXMLPlayer. class TXMLPlayer: public TObject. Class for xml code generation; It should be used for generation of xml steramers, which could be used outside root; environment. This means, that with help of such streamers user can read and write; objects from/to xml file, which later can be accepted by ROOT. At the moment supported only classes, which are not inherited from TObject; and which not contains any TObject members. To generate xml code:. 1. ROOT library with required classes should be created.; In general, without such library non of user objects can be stored and; retrived from any ROOT file. 2. Generate xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLPlayer.html:1006,load,load,1006,root/html534/TXMLPlayer.html,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html,1,['load'],['load']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. RooAddModel(); RooAddModel(const RooAddModel& other, const char* name = 0); RooAddModel(const char* name, const char* title, const RooArgList& pdfList, const RooArgList& coefList, Bool_t ownPdfList = kFALSE); virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:1000,perform,perform,1000,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,4,['perform'],['perform']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. RooAddModel(); RooAddModel(const RooAddModel& other, const char* name = 0); RooAddModel(const char* name, const char* title, const RooArgList& pdfList, const RooArgList& coefList, Bool_t ownPdfList = kFALSE); virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:1000,perform,perform,1000,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['perform'],['perform']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:1000,perform,perform,1000,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,2,['perform'],['perform']
Performance," RBrowserData.cxx. ◆ DecomposePath(). Browsable::RElementPath_t RBrowserData::DecomposePath ; (; const std::string & ; path, . bool ; relative_to_work_element . ). Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ; Definition at line 155 of file RBrowserData.cxx. ◆ GetElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElement ; (; const std::string & ; str). Returns element with path, specified as string. ; Definition at line 290 of file RBrowserData.cxx. ◆ GetElementFromTop(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElementFromTop ; (; const Browsable::RElementPath_t & ; path). Returns element with path, specified as Browsable::RElementPath_t. ; Definition at line 300 of file RBrowserData.cxx. ◆ GetSubElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetSubElement ; (; const Browsable::RElementPath_t & ; path). Returns sub-element starting from top, using cached data. ; Definition at line 308 of file RBrowserData.cxx. ◆ GetWorkingPath(). const Browsable::RElementPath_t & ROOT::RBrowserData::GetWorkingPath ; (; ); const. inline . Definition at line 73 of file RBrowserData.hxx. ◆ ProcessBrowserRequest(). bool RBrowserData::ProcessBrowserRequest ; (; const RBrowserRequest & ; request, . RBrowserReply & ; reply . ). private . Process browser request. ; Definition at line 171 of file RBrowserData.cxx. ◆ ProcessRequest(). std::string RBrowserData::ProcessRequest ; (; const RBrowserRequest & ; request). Process browser request, returns string with JSON of RBrowserReply data. ; Definition at line 269 of file RBrowserData.cxx. ◆ RemoveFromCache() [1/2]. bool RBrowserData::RemoveFromCache ; (; const Browsable::RElementPath_t & ; path). Remove path (and all sub-paths) from cache Returns true if any element was removed. ; Definition at line 406 of file RBrowserData.cxx. ◆ RemoveFromCache() [2/2]. bool RBrowserData::RemoveFromCache ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:5247,cache,cached,5247,doc/v632/classROOT_1_1RBrowserData.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html,2,['cache'],['cached']
Performance," RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:16205,optimiz,optimized,16205,doc/v632/namespaceROOT_1_1RDF.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html,2,"['concurren', 'optimiz']","['concurrently', 'optimized']"
Performance," RNTuple '"" +; 332 fSource->GetSharedDescriptorGuard()->GetName() + ""'""));; 333 }; 334 return GetCollectionView(fieldId);; 335 }; 336 ; 337 RNTupleCollectionView GetCollectionView(DescriptorId_t fieldId); 338 {; 339 return RNTupleCollectionView::Create(fieldId, fSource.get());; 340 }; 341 ; 342 RIterator begin() { return RIterator(0); }; 343 RIterator end() { return RIterator(GetNEntries()); }; 344 ; 345 /// Enable performance measurements (decompression time, bytes read from storage, etc.); 346 ///; 347 /// **Example: inspect the reader metrics after loading every entry**; 348 /// ~~~ {.cpp}; 349 /// #include <ROOT/RNTupleReader.hxx>; 350 /// using ROOT::Experimental::ENTupleInfo;; 351 /// using ROOT::Experimental::RNTupleReader;; 352 ///; 353 /// #include <iostream>; 354 ///; 355 /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; 356 /// // metrics must be turned on beforehand; 357 /// ntuple->EnableMetrics();; 358 ///; 359 /// for (auto i : ntuple->GetEntryRange()) {; 360 /// ntuple->LoadEntry(i);; 361 /// }; 362 /// ntuple->PrintInfo(ENTupleInfo::kMetrics);; 363 /// ~~~; 364 void EnableMetrics() { fMetrics.Enable(); }; 365 const Detail::RNTupleMetrics &GetMetrics() const { return fMetrics; }; 366}; // class RNTupleReader; 367 ; 368} // namespace Experimental; 369} // namespace ROOT; 370 ; 371#endif // ROOT7_RNTupleReader; RConfig.hxx; R__unlikely#define R__unlikely(expr)Definition RConfig.hxx:586; RError.hxx; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RNTupleDescriptor.hxx; RNTupleMetrics.hxx; RNTupleModel.hxx; RNTupleReadOptions.hxx; RNTupleUtil.hxx; RNTupleView.hxx; RPageStorage.hxx; RSpan.hxx; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleReader_8hxx_source.html:15019,Load,LoadEntry,15019,doc/master/RNTupleReader_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx_source.html,1,['Load'],['LoadEntry']
Performance," ROC[y];; 2336 importances[ny] += SROC - SSROC;; 2337 // cleaning information; 2338 }; 2339 }; 2340 }; 2341 std::cout << ""--- Variable Importance Results (All)"" << std::endl;; 2342 return GetImportance(nbits, importances, varNames);; 2343}; 2344 ; 2345static uint64_t sum(uint64_t i); 2346{; 2347 // add a limit for overflows; 2348 if (i > 62) return 0;; 2349 return static_cast<uint64_t>( std::pow(2, i + 1)) - 1;; 2350 // uint64_t _sum = 0;; 2351 // for (uint64_t n = 0; n < i; n++); 2352 // _sum += pow(2, n);; 2353 // return _sum;; 2354}; 2355 ; 2356////////////////////////////////////////////////////////////////////////////////; 2357 ; 2358TH1F *TMVA::Factory::EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle,; 2359 const char *theOption); 2360{; 2361 uint64_t x = 0;; 2362 uint64_t y = 0;; 2363 ; 2364 // getting number of variables and variable names from loader; 2365 const int nbits = loader->GetDataSetInfo().GetNVariables();; 2366 std::vector<TString> varNames = loader->GetDataSetInfo().GetListOfVariables();; 2367 ; 2368 if (nbits > 60) {; 2369 Log() << kERROR << ""Number of combinations is too large , is 2^"" << nbits << Endl;; 2370 return nullptr;; 2371 }; 2372 long int range = sum(nbits);; 2373 // std::cout<<range<<std::endl;; 2374 // vector to save importances; 2375 std::vector<Double_t> importances(nbits);; 2376 for (int i = 0; i < nbits; i++); 2377 importances[i] = 0;; 2378 ; 2379 Double_t SROC, SSROC; // computed ROC value; 2380 ; 2381 x = range;; 2382 ; 2383 std::bitset<VIBITS> xbitset(x);; 2384 if (x == 0); 2385 Log() << kFATAL << ""Error: need at least one variable.""; // data loader need at least one variable; 2386 ; 2387 // creating loader for seed; 2388 TMVA::DataLoader *seedloader = new TMVA::DataLoader(xbitset.to_string());; 2389 ; 2390 // adding variables from seed; 2391 for (int index = 0; index < nbits; index++) {; 2392 if (xbitset[index]); 2393 seedloader->AddVariable(varNames[index], 'F');; 2394 }; 2395 ; 2396 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:98986,load,loader,98986,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1058,perform,performance,1058,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,1,['perform'],['performance']
Performance," ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsDataStore Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for a data collection. ; Definition at line 34 of file RooAbsDataStore.h. Public Member Functions;  RooAbsDataStore ();  ;  RooAbsDataStore (const RooAbsDataStore &other, const char *newname=nullptr);  ;  RooAbsDataStore (const RooAbsDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooAbsDataStore (RooStringView name, RooStringView title, const RooArgSet &vars);  ; virtual RooAbsArg * addColumn (RooAbsArg &var, bool adjustRange=true)=0;  ; RooArgSet * addColumns (const RooArgList &varList);  ; virtual void append (RooAbsDataStore &other)=0;  ; virtual void attachBuffers (const RooArgSet &extObs)=0;  ; virtual void attachCache (const RooAbsArg *newOwner, const RooArgSet &cachedVars)=0;  ; virtual void cacheArgs (const RooAbsArg *cacheOwner, RooArgSet &varSet, const RooArgSet *nset=nullptr, bool skipZeroWeights=false)=0;  ; const RooArgSet & cachedVars () const;  ; virtual const RooAbsArg * cacheOwner ()=0;  ; virtual bool changeObservableName (const char *from, const char *to)=0;  ; virtual void checkInit () const;  ; virtual RooAbsDataStore * clone (const char *newname=nullptr) const =0;  ; virtual RooAbsDataStore * clone (const RooArgSet &vars, const char *newname=nullptr) const =0;  ; int defaultPrintContents (Option_t *) const override;  Define default print options, for a given print style. ;  ; bool dirtyProp () const;  ; virtual void dump ();  ; virtual Int_t fill ()=0;  ; virtual void forceCacheUpdate ();  ; virtual const RooArgSet * get () const;  ; virtual const RooArgSet * get (Int_t index) const =0;  ; virtual RooAbsData::RealSpans getBatches (std::size_t first, std::size_t len) const =0;  Retrieve batches for all observables in this data sto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsDataStore.html:1040,cache,cachedVars,1040,doc/master/classRooAbsDataStore.html,https://root.cern,https://root.cern/doc/master/classRooAbsDataStore.html,5,['cache'],"['cacheArgs', 'cacheOwner', 'cachedVars']"
Performance," ROOT: RooAbsCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsCache Class ReferenceRooFit » RooFit Core. ; Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. ; The RooAbsCache interface defines the interaction between the owning RooAbsArg object and the cache data member to communicate server redirects, operation mode changes and constant term optimization management calls. ; Definition at line 27 of file RooAbsCache.h. Public Member Functions;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; virtual void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for constant term node finding calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook ();  Interface for operation mode changes. ;  ; virtual void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for processing of cache mode optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *);  Interface for printing of cache guts in tree mode printing. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void wireCache ();  . Static Public Member Functions; static TClass * Class ();  ; static const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCache.html:999,cache,cache,999,doc/master/classRooAbsCache.html,https://root.cern,https://root.cern/doc/master/classRooAbsCache.html,1,['cache'],['cache']
Performance," ROOT::DelArrFunc_tGetDeleteArray() const; ROOT::DesFunc_tGetDestructor() const; static DictFuncPtr_tGetDict(const char* cname); static DictFuncPtr_tGetDict(const type_info& info); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tGetDirectoryAutoAdd() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*GetFunctionTemplate(const char* name); UInt_tGetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tGetImplFileLine() const; const char*GetImplFileName() const; UInt_tGetInstanceCount() const; TVirtualIsAProxy*GetIsAProxy() const; TVirtualStreamerInfo*GetLastReadInfo() const; TList*GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*GetListOfBases(); TList*GetListOfDataMembers(Bool_t load = kTRUE); TList*GetListOfEnums(Bool_t load = kTRUE); TList*GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*GetListOfMethodOverloads(const char* name) const; TList*GetListOfMethods(Bool_t load = kTRUE); TList*GetListOfRealData() const; voidGetMenuItems(TList* listitems); TList*GetMenuList() const; ROOT::MergeFunc_tGetMerge() const; TMethod*GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*GetMethodAllAny(const char* method); TMethod*GetMethodAny(const char* method); TMethod*GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); voidGetMissingDictionaries(THashTable& result, bool recurse = false); virtual const char*TNamed::GetName() const; Int_tGetNdata(); ROOT::NewFunc_tGetNew() const; ROOT::NewArrFunc_tGetNewArray() const; Int_tGetNmethods(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:6615,load,load,6615,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['load'],['load']
Performance," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 251 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 468 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 464 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 565 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 558 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:30569,multi-thread,multi-threading,30569,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['multi-thread'],['multi-threading']
Performance," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 254 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 476 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 472 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 577 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 570 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:37796,multi-thread,multi-threading,37796,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,1,['multi-thread'],['multi-threading']
Performance," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 254 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 476 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 472 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 855 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 577 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 461 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 570 of file TROOT.cxx. ◆ Join(). template<class StringCollection_t > . std::string ROOT::Join ; (; const std::string & ; sep, . StringCollection_t && ; strings . ). Concatenate a list of strings with a separator. ; Template Parameters. StringCollection_tAny container of strings (vector, initializer_list, ...) . Parameters. [in]sepSeparator inbetween the strings. ; [in]stringscontainer of strings . Returnsthe sep-delimited concatenation of strings ; Definition at line 35 of file StringUtils.hxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specifi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:37364,multi-thread,multi-threading,37364,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,2,['multi-thread'],['multi-threading']
Performance, ROOT::Math::GSLSimAnMinimizer::GSLSimAnMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 33 of file GSLSimAnMinimizer.cxx. ◆ ~GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::~GSLSimAnMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 52 of file GSLSimAnMinimizer.cxx. Member Function Documentation. ◆ DoSetMinimOptions(). void ROOT::Math::GSLSimAnMinimizer::DoSetMinimOptions ; (; const GSLSimAnParams & ; params). protected . Set the Minimizer options from the simulated annealing parameters. ; Definition at line 148 of file GSLSimAnMinimizer.cxx. ◆ DoSetSimAnParameters(). void ROOT::Math::GSLSimAnMinimizer::DoSetSimAnParameters ; (; const MinimizerOptions & ; opt). protected . set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ; Definition at line 164 of file GSLSimAnMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLSimAnMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 56 of file GSLSimAnMinimizer.cxx. ◆ MinimizerParameters(). const GSLSimAnParams & ROOT::Math::GSLSimAnMinimizer::MinimizerParameters ; (; ); const. inline . Get current minimizer option parameters. ; Definition at line 95 of file GSLSimAnMinimizer.h. ◆ NCalls(). unsigned int ROOT::Math::GSLSimAnMinimizer::NCalls ; (; ); const. overridevirtual . number of calls ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 138 of file GSLSimAnMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GSLSimAnMinimizer::SetParameters ; (; const GSLSimAnParams & ; params). inline . set new minimizer option parameters using directly the GSLSimAnParams structure ; Definition at line 98 of file GSLSimAnMinimizer.h. Member Data Documentation. ◆ fSolver. ROOT::Math::GSLSimAnnealing ROOT::Math::GSLSimAnMinimizer::fSolver. private . Definition at line 112 of file GSLSimAnMinimizer.h. Libraries for ROOT::Math::GSLSimAnMinimizer:. [legend]; T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:14041,perform,perform,14041,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,1,['perform'],['perform']
Performance," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLSimAnMinimizer.html:7365,perform,perform,7365,root/html602/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLSimAnMinimizer.html,1,['perform'],['perform']
Performance," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:7365,perform,perform,7365,root/html604/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html,1,['perform'],['perform']
Performance," RWebWindow associated with the channelfEmbed.Definition RWebWindow.cxx:1867; ROOT::RWebWindow::SetCallBacksvoid SetCallBacks(WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr)Set call-backs function for connect, data and disconnect events.Definition RWebWindow.cxx:1772; ROOT::RWebWindow::SetRequireAuthKeyvoid SetRequireAuthKey(bool on)Configure if authentication key in connection string is required.Definition RWebWindow.hxx:316; ROOT::RWebWindow::GenerateKeystd::string GenerateKey() constGenerate new unique key for the window.Definition RWebWindow.cxx:611; ROOT::RWebWindow::SetUseCurrentDirvoid SetUseCurrentDir(bool on=true)Configure if window can access local files via currentdir/ path of http server.Definition RWebWindow.hxx:324; ROOT::RWebWindow::fDisconnCallbackWebWindowConnectCallback_t fDisconnCallback! callback for disconnect eventDefinition RWebWindow.hxx:159; ROOT::RWebWindow::GetMaxQueueLengthunsigned GetMaxQueueLength() constReturn maximal queue length of data which can be held by window.Definition RWebWindow.hxx:304; ROOT::RWebWindow::EQueueEntryKindEQueueEntryKindDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_Disconnect@ kind_DisconnectDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_Connect@ kind_ConnectDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_None@ kind_NoneDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_Data@ kind_DataDefinition RWebWindow.hxx:124; ROOT::RWebWindow::IsFileDialogMessagestatic bool IsFileDialogMessage(const std::string &msg)Check if this could be the message send by client to start new file dialog If returns true,...Definition RWebWindow.cxx:1963; ROOT::RWebWindowsManagerCentral instance to create and show web-based windows like Canvas or FitPanel.Definition RWebWindowsManager.hxx:36; THttpCallArgContains arguments for single HTTP call.Definition THttpCallArg.h:27; THttpServerOnline http server for arbitrary ROOT application.Definition THttpServer.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:44373,queue,queue,44373,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['queue'],['queue']
Performance," RWebWindow.hxx:90; ROOT::RWebWindow::WebConn::fKeystd::string fKey! key value supplied to the window (when exists)Definition RWebWindow.hxx:72; ROOT::RWebWindow::WebConn::WebConnWebConn(unsigned connid, bool headless_mode, const std::string &key)Definition RWebWindow.hxx:94; ROOT::RWebWindow::WebConn::fSendSequnsigned long fSendSeq! sequence id of last send packetDefinition RWebWindow.hxx:88; ROOT::RWebWindow::WebConn::fKeyUsedint fKeyUsed! key value used to verify connectionDefinition RWebWindow.hxx:73; ROOT::RWebWindow::WebConn::~WebConn~WebConn()Destructor for WebConn Notify special HTTP request which blocks headless browser from exit.Definition RWebWindow.cxx:42; ROOT::RWebWindow::WebConn::fMutexstd::mutex fMutex! mutex must be used to protect all following dataDefinition RWebWindow.hxx:81; ROOT::RWebWindow::WebConn::fDoingSendbool fDoingSend! true when performing send operationDefinition RWebWindow.hxx:86; ROOT::RWebWindow::WebConn::fSendCreditsint fSendCredits! how many send operation can be performed without confirmation from other sideDefinition RWebWindow.hxx:84; ROOT::RWebWindow::WebConn::WebConnWebConn(unsigned connid, unsigned wsid)Definition RWebWindow.hxx:93; ROOT::RWebWindow::WebConn::fNewKeystd::string fNewKey! new key if connection request reloadDefinition RWebWindow.hxx:74; ROOT::RWebWindow::WebConn::fWSIdunsigned fWSId! websocket idDefinition RWebWindow.hxx:79; ROOT::RWebWindow::WebConn::fSendStamptimestamp_t fSendStamp! last server operation, always used from window threadDefinition RWebWindow.hxx:77; ROOT::RWebWindow::WebConn::fRecvStamptimestamp_t fRecvStamp! last receive operation, protected with connection mutexDefinition RWebWindow.hxx:82; ROOT::RWebWindow::WebConn::fRecvCountint fRecvCount! number of received packets, should return back with next sendingDefinition RWebWindow.hxx:83; ROOT::RWebWindow::WebConn::ResetStampsvoid ResetStamps()Definition RWebWindow.hxx:101; ROOT::RWebWindow::WebConn::fQueuestd::queue< QueueItem > fQueue! output ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:49899,perform,performed,49899,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['perform'],['performed']
Performance," R__LOCKGUARD(gROOTMutex);; 1573 return (TFile*)GetListOfFiles()->FindObject(name);; 1574}; 1575 ; 1576////////////////////////////////////////////////////////////////////////////////; 1577/// Return pointer to style with name; 1578 ; 1579TStyle *TROOT::GetStyle(const char *name) const; 1580{; 1581 return (TStyle*)GetListOfStyles()->FindObject(name);; 1582}; 1583 ; 1584////////////////////////////////////////////////////////////////////////////////; 1585/// Return pointer to function with name.; 1586 ; 1587TObject *TROOT::GetFunction(const char *name) const; 1588{; 1589 if (!name || !*name); 1590 return nullptr;; 1591 ; 1592 static std::atomic<bool> isInited = false;; 1593 ; 1594 // Capture the state before calling FindObject as it could change; 1595 // between the end of FindObject and the if statement; 1596 bool wasInited = isInited.load();; 1597 ; 1598 auto f1 = fFunctions->FindObject(name);; 1599 if (f1 || wasInited); 1600 return f1;; 1601 ; 1602 // If 2 threads gets here at the same time, the static initialization ""lock""; 1603 // will stall one of them until ProcessLine is finished and both will return the; 1604 // correct answer.; 1605 // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`; 1606 // and restart after this thread has finished the initialization (i.e. a rare case),; 1607 // the only penalty we pay is a spurious 2nd lookup for an unknown function.; 1608 [[maybe_unused]] static const auto _res = []() {; 1609 gROOT->ProcessLine(""TF1::InitStandardFunctions();"");; 1610 isInited = true;; 1611 return true;; 1612 }();; 1613 return fFunctions->FindObject(name);; 1614}; 1615 ; 1616////////////////////////////////////////////////////////////////////////////////; 1617 ; 1618TFunctionTemplate *TROOT::GetFunctionTemplate(const char *name); 1619{; 1620 if (!gInterpreter) return nullptr;; 1621 ; 1622 if (!fFuncTemplate) fFuncTemplate = new TListOfFunctionTemplates(nullptr);; 1623 ; 1624 return (TFunctionTemplate*)fFuncTemplate->FindOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:61326,load,load,61326,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['load'],['load']
Performance," Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Functions |; Variables ; TROOT.h File Reference. #include ""TDirectory.h""; #include <atomic>; #include <string>; #include <vector>; #include <utility>. Include dependency graph for TROOT.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::TParBranchProcessingRAII;  ; class  TROOT;  ROOT top level object description. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define gROOT   (ROOT::GetROOT());  . Functions; void ROOT::CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void ROOT::DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void ROOT::Internal::DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; void ROOT::EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void ROOT::Internal::EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void ROOT::EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; TROOT * ROOT::GetROOT ();  ; TROOT * ROOT::Internal::GetROOT2 ();  ; UInt_t ROOT::GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; Bool_t ROOT::IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h.html:1042,multi-thread,multi-threading,1042,doc/master/TROOT_8h.html,https://root.cern,https://root.cern/doc/master/TROOT_8h.html,1,['multi-thread'],['multi-threading']
Performance," Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TProofDrawHist Class Reference. . Definition at line 97 of file TProofDraw.h. Public Member Functions;  TProofDrawHist ();  ; void Begin (TTree *t) override;  See TProofDraw::Begin(). ;  ; void Init (TTree *) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Notify () over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawHist.html:1055,load,loaded,1055,doc/master/classTProofDrawHist.html,https://root.cern,https://root.cern/doc/master/classTProofDrawHist.html,1,['load'],['loaded']
Performance," ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:1437,perform,performance,1437,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,1,['perform'],['performance']
Performance," Reimplemented from RooAbsReal.; Definition at line 107 of file RooChebychev.cxx. ◆ evalAnaInt(). double RooChebychev::evalAnaInt ; (; const double ; a, . const double ; b . ); const. private . ◆ evaluate(). double RooChebychev::evaluate ; (; ); const. overrideprivatevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 78 of file RooChebychev.cxx. ◆ getAnalyticalIntegral(). Int_t RooChebychev::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 122 of file RooChebychev.cxx. ◆ IsA(). TClass * RooChebychev::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooChebychev.h. ◆ selectNormalizationRange(). void RooChebychev::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overridevirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented from RooAbsReal.; Definition at line 66 of file RooChebychev.cxx. ◆ Streamer(). void RooChebychev::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooChebychev::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:77283,perform,performed,77283,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,1,['perform'],['performed']
Performance," Reimplemented in TCling.; Definition at line 559 of file TInterpreter.h. ◆ Load(). virtual Int_t TInterpreter::Load ; (; const char * ; filenam, . Bool_t ; system = kFALSE . ). pure virtual . Implemented in TCling. ◆ LoadEnums(). virtual void TInterpreter::LoadEnums ; (; TListOfEnums & ; cl); const. pure virtual . Implemented in TCling. ◆ LoadFile(). virtual int TInterpreter::LoadFile ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 259 of file TInterpreter.h. ◆ LoadFunctionTemplates(). virtual void TInterpreter::LoadFunctionTemplates ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ LoadLibraryMap(). virtual Int_t TInterpreter::LoadLibraryMap ; (; const char * ; rootmapfile = nullptr). pure virtual . Implemented in TCling. ◆ LoadMacro(). virtual void TInterpreter::LoadMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ LoadText(). virtual Bool_t TInterpreter::LoadText ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 260 of file TInterpreter.h. ◆ MakeInterpreterValue(). virtual std::unique_ptr< TInterpreterValue > TInterpreter::MakeInterpreterValue ; (; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 278 of file TInterpreter.h. ◆ MapCppName(). virtual const char * TInterpreter::MapCppName ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 261 of file TInterpreter.h. ◆ MethodArgInfo_DefaultValue(). virtual const char * TInterpreter::MethodArgInfo_DefaultValue ; (; MethodArgInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 516 of file TInterpreter.h. ◆ MethodArgInfo_Delete(). virtual void TInterpreter::MethodArgInfo_Delete ; (; MethodArgInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 509 of file TInterpreter.h. ◆ MethodArgInfo_Factory() [1/2]. virtual MethodArgInfo_t * TInterpret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:79231,Load,LoadText,79231,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Load'],['LoadText']
Performance," Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TProfile2D, and TH2Poly.; Definition at line 380 of file TH2.cxx. ◆ DeclFileName(). static const char * TH2::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 133 of file TH2.h. ◆ DoFitSlices(). void TH2::DoFitSlices ; (; bool ; onX, . TF1 * ; f1, . Int_t ; firstbin, . Int_t ; lastbin, . Int_t ; cut, . Option_t * ; option, . TObjArray * ; arr . ). protectedvirtual . Definition at line 814 of file TH2.cxx. ◆ DoProfile(). TProfile * TH2::DoProfile ; (; bool ; onX, . const char * ; name, . Int_t ; firstbin, . Int_t ; lastbin, . Option_t * ; option . ); const. protectedvirtual . Reimplemented in TProfile2D.; Definition at line 1880 of file TH2.cxx. ◆ DoProjection(). TH1D * TH2::DoProjection ; (; bool ; onX, . const char * ; name, . Int_t ; firstbin, . Int_t ; lastbin, . Option_t * ; option . ); const. protectedvirtual . Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ; Definition at line 2169 of file TH2.cxx. ◆ DoQuantiles(). TH1D * TH2::DoQuantiles ; (; bool ; onX, . const char * ; name, . Double_t ; prob . ); const. protectedvirtual . Implementation of quantiles for x or y. ; Definition at line 2527 of file TH2.cxx. ◆ Fill() [1/7]. Int_t TH2::Fill ; (; const char * ; namex, . Double_t ; w . ). inlineoverrideprotectedvirtual . Increment bin with namex with a weight w. ; if x is less than the low-edge of the first bin, the Underflow bin is incremented if x is equal to or greater than the upper edge of last bin, the Overflow bin is incremented; If the weight is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x.; The function returns the corresponding bin number which has its content incremented by w. ; Reimplemented from TH1.; Reimplemented in TProfile2D, TH2Poly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:65651,perform,performing,65651,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['perform'],['performing']
Performance," Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:86537,cache,cache,86537,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['cache'],['cache']
Performance," Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:29045,load,load,29045,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['load'],['load']
Performance," Return status. The function returns the status of the histogram fit (see TH1::Fit); If no entries were selected, the function returns -1;; (i.e. fitResult is null is the fit is OK). Int_t FlushBaskets() const; Write to disk all the basket that have not yet been individually written. Return the number of bytes written or -1 in case of write error. const char* GetAlias(const char* aliasName) const; Returns the expanded value of the alias. Search in the friends if any. TBranch* GetBranch(const char* name); Return pointer to the branch with the given name in this tree or its friends. Bool_t GetBranchStatus(const char* branchname) const; Return status of branch with name branchname.; 0 if branch is not activated; 1 if branch is activated. Int_t GetBranchStyle(); Static function returning the current branch style.; style = 0 old Branch; style = 1 new Bronch. Long64_t GetCacheAutoSize(Bool_t withDefault = kFALSE) const; Used for automatic sizing of the cache.; Estimates a suitable size for the tree cache based on AutoFlush.; A cache sizing factor is taken from the configuration. If this yields zero; and withDefault is true the historical algoirthm for default size is used. TFile* GetCurrentFile() const; Return pointer to the current file. Long64_t GetEntries(const char* selection); Return the number of entries matching the selection.; Return -1 in case of errors. If the selection uses any arrays or containers, we return the number; of entries where at least one element match the selection.; GetEntries is implemented using the selector class TSelectorEntries,; which can be used directly (see code in TTreePlayer::GetEntries) for; additional option.; If SetEventList was used on the TTree or TChain, only that subset; of entries will be considered. Long64_t GetEntriesFriend() const; Return pointer to the 1st Leaf named name in any Branch of this Tree or; any branch in the list of friend trees. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all branches of entry and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:93801,cache,cache,93801,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['cache'],['cache']
Performance," Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the proxy describinb the collection (if any). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char *name, Bool_t load, Bool_t silent); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class namesmassaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t /* silent */); Return pointer to class with name. VoidFuncPtr_t GetDict(const char *cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:23266,load,load,23266,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,1,['load'],['load']
Performance," Returns true if an error has occurred. ; Definition at line 1952 of file RooWorkspace.cxx. ◆ importClassCode() [1/2]. bool RooWorkspace::importClassCode ; (; const char * ; pat = ""*"", . bool ; doReplace = false . ). Import code of all classes in the workspace that have a class name that matches pattern 'pat' and which are not found to be part of the standard ROOT distribution. ; If doReplace is true any existing class code saved in the workspace is replaced ; Definition at line 1112 of file RooWorkspace.cxx. ◆ importClassCode() [2/2]. bool RooWorkspace::importClassCode ; (; TClass * ; theClass, . bool ; doReplace = false . ). Definition at line 1099 of file RooWorkspace.cxx. ◆ IsA(). TClass * RooWorkspace::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 282 of file RooWorkspace.h. ◆ loadSnapshot(). bool RooWorkspace::loadSnapshot ; (; const char * ; name). Load the values and attributes of the parameters in the snapshot saved with the given name. ; Definition at line 1182 of file RooWorkspace.cxx. ◆ makeDir(). bool RooWorkspace::makeDir ; (; ). Create transient TDirectory representation of this workspace. ; This directory will appear as a subdirectory of the directory that contains the workspace and will have the name of the workspace suffixed with ""Dir"". The TDirectory interface is read-only. Any attempt to insert objects into the workspace directory representation will result in an error message. Note that some ROOT object like TH1 automatically insert themselves into the current directory when constructed. This will give error messages when done in a workspace directory. ; Definition at line 1887 of file RooWorkspace.cxx. ◆ merge(). void RooWorkspace::merge ; (; const RooWorkspace & ; ). inline . Definition at line 102 of file RooWorkspace.h. ◆ obj(). TObject * RooWorkspace::obj ; (; RooStringView ; name); const. Return any type of object (RooAbsArg, RooAbsData or generic object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:44412,Load,Load,44412,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['Load'],['Load']
Performance," ReturnsName of the file containing the class declaration ; Definition at line 46 of file THLimitsFinder.h. ◆ FindGoodLimits() [1/3]. Int_t THLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Compute the best axis limits for the X axis. ; If the bit kIsInteger is set, the number of channels is also recomputed. The axis parameters are replaced by the optimized parameters.; Example: With the input parameters xmin=-1.467 and xmax=2.344, the function will compute better limits -1.8 and 2.7 and store them in the axis. ; Reimplemented in TProofLimitsFinder.; Definition at line 53 of file THLimitsFinder.cxx. ◆ FindGoodLimits() [2/3]. Int_t THLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Double_t ; xmin, . Double_t ; xmax, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Compute the best axis limits for the X and Y axis. ; If the bit kIsInteger is set, the number of channels is also recomputed. The axis parameters are replaced by the optimized parameters ; Reimplemented in TProofLimitsFinder.; Definition at line 78 of file THLimitsFinder.cxx. ◆ FindGoodLimits() [3/3]. Int_t THLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Double_t ; xmin, . Double_t ; xmax, . Double_t ; ymin, . Double_t ; ymax, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Compute the best axis limits for the X, Y and Z axis. ; If the bit kIsInteger is set, the number of channels is also recomputed. The axis parameters are replaced by the optimized parameters ; Reimplemented in TProofLimitsFinder.; Definition at line 111 of file THLimitsFinder.cxx. ◆ GetLimitsFinder(). THLimitsFinder * THLimitsFinder::GetLimitsFinder ; (; ). static . Return pointer to the current finder. ; Create one if none exists Use SetLimitsFinder to set a user defined finder. ; Definition at line 153 of file THLimitsFinder.cxx. ◆ IsA(). TClass * THLimitsFinder::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHLimitsFinder.html:13221,optimiz,optimized,13221,doc/master/classTHLimitsFinder.html,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html,1,['optimiz'],['optimized']
Performance, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:25355,optimiz,optimized,25355,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['optimiz'],['optimized']
Performance," RooAbsArg &dep) const override;  Force RooRealIntegral to offer all our actual observable for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertises internal (analytical) integration capabilities. ;  ; RooDataHist * getCacheHist (const RooArgSet &nset) const;  ; RooDataHist * getCacheHist (const RooArgSet *nset=nullptr) const;  Return pointer to RooDataHist cache histogram for given choice of observables. ;  ; RooAbsPdf * getCachePdf (const RooArgSet &nset) const;  ; RooAbsPdf * getCachePdf (const RooArgSet *nset=nullptr) const;  Return pointer to RooHistPdf cache pdf for given choice of observables. ;  ; Int_t getInterpolationOrder () const;  ; double getValV (const RooArgSet *set=nullptr) const override;  Implementation of getVal() overriding default implementation of RooAbsPdf. ;  ; void setInterpolationOrder (int order);  Change the interpolation order that is used in RooHistPdf cache representation smoothing the RooDataHist shapes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:7192,cache,cache,7192,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['cache'],['cache']
Performance," RooAbsArg * ; term). Add a term to this product. ; Definition at line 103 of file RooProduct.cxx. ◆ analyticalIntegral(). double RooProduct::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Calculate integral internally from appropriate partial integral cache. ; Reimplemented from RooAbsReal.; Definition at line 299 of file RooProduct.cxx. ◆ binBoundaries(). std::list< double > * RooProduct::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Forward the plot sampling hint from the p.d.f. that defines the observable obs. ; Reimplemented from RooAbsReal.; Definition at line 406 of file RooProduct.cxx. ◆ calculate(). double RooProduct::calculate ; (; const RooArgList & ; partIntList); const. protected . The cache manager. ; Calculate and return product of partial terms in partIntList. ; Definition at line 320 of file RooProduct.cxx. ◆ canNodeBeCached(). CacheMode RooProduct::canNodeBeCached ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsArg.; Definition at line 63 of file RooProduct.h. ◆ categoricalComponents(). const RooArgList & RooProduct::categoricalComponents ; (; ); const. inline . Definition at line 51 of file RooProduct.h. ◆ Class(). static TClass * RooProduct::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooProduct::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooProduct::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file RooProduct.h. ◆ clone(). TObject * RooProduct::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 40 of file RooProduct.h. ◆ components(). RooArgList RooProduct::components ; (; ). inline . Definition at line 48 of file RooProduct.h. ◆ DeclFileName(). static const char * RooProduct::DeclFileName ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:62935,Cache,CacheMode,62935,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['Cache'],['CacheMode']
Performance," RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual RooAbsArg&operator=(const RooAbsReal& other); virtual RooAbsArg&operator=(Double_t newValue); virtual RooAbsArg&operator=(Int_t ival); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsRealLValue.html:22908,optimiz,optimizeCacheMode,22908,root/html534/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsRealLValue.html,1,['optimiz'],['optimizeCacheMode']
Performance," RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,double,int>&operator=(const RooCFunction2Binding<double,double,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_double_int_.html:19862,optimiz,optimizeCacheMode,19862,root/html602/RooCFunction2Binding_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_double_int_.html,2,['optimiz'],['optimizeCacheMode']
Performance," RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,int,double>&operator=(const RooCFunction2Binding<double,int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_int_double_.html:19862,optimiz,optimizeCacheMode,19862,root/html602/RooCFunction2Binding_double_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_int_double_.html,2,['optimiz'],['optimizeCacheMode']
Performance," RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachCache (const RooAbsArg *newOwner, const RooArgSet &cachedVars) override;  Initialize cache of dataset: attach variables of cache ArgSet to the corresponding TTree branches. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t _curIndex = 0;  ! Index associated with current event ;  ; RooAbsDataStore * _curStore = nullptr;  ! Datastore associated with current event ;  ; std::map< Int_t, RooAbsDataStore * > _dataMap;  ; RooCategory * _indexCat = nullptr;  ; bool _ownComps = false;  ! ;  ; std::unique_ptr< std::vector< double > > _weightBuffer;  ! Buffer for weights in case a batch of values is requested. ;  ;  Protected Attributes inherited from RooAbsDataStore; RooArgSet _cachedVars;  ; bool _doDirtyProp = true;  Switch do (de)activate dirty state propagation when loading a data point. ;  ; RooArgSet _vars;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kEx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:18462,load,loading,18462,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['load'],['loading']
Performance," RooAbsBinning*_binning! Pointer to default binning definition; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooErrorVar.html:34976,cache,cache,34976,root/html526/RooErrorVar.html,https://root.cern,https://root.cern/root/html526/RooErrorVar.html,3,['cache'],['cache']
Performance," RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Bool_t isWeighted() const. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). Bool_t changeObservableName(const char* from, const char* to); Change name of internal observable named 'from' into 'to'. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooArgSet* addColumns(const RooArgList& varList); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList). void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE). void setArgStatus(const RooArgSet& set, Bool_t active). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). RooAbsDataStore* clone(const char* newname = 0) const; Empty ctor. { return new RooCompositeDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooCompositeDataStore(*this,vars,newname) ; }. RooCategory* index(); { return _indexCat ; }. const RooAbsArg* cacheOwner(); { return 0 ; }. » Last changed: Tue Jun 30 14:32:14 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCompositeDataStore.html:13229,cache,cacheArgs,13229,root/html602/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html602/RooCompositeDataStore.html,5,['cache'],"['cache', 'cacheArgs', 'cacheOwner', 'cachedVars']"
Performance," RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Bool_t isWeighted() const. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). Bool_t changeObservableName(const char* from, const char* to); Change name of internal observable named 'from' into 'to'. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooArgSet* addColumns(const RooArgList& varList); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList). void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE). void setArgStatus(const RooArgSet& set, Bool_t active). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). RooAbsDataStore* clone(const char* newname = 0) const; Empty ctor. { return new RooCompositeDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooCompositeDataStore(*this,vars,newname) ; }. RooCategory* index(); { return _indexCat ; }. const RooAbsArg* cacheOwner(); { return 0 ; }. » Last changed: Tue Mar 10 17:16:02 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:12234,cache,cacheArgs,12234,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,5,['cache'],"['cache', 'cacheArgs', 'cacheOwner', 'cachedVars']"
Performance," RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,double,int,int>&operator=(const RooCFunction3PdfBinding<double,double,int,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_int_int_.html:23548,optimiz,optimizeCacheMode,23548,root/html602/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_int_int_.html,4,['optimiz'],['optimizeCacheMode']
Performance," RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HistFactory::HistFactorySimultaneous&operator=(const RooStats::HistFactory::HistFactorySimultaneous&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html:24724,optimiz,optimizeCacheMode,24724,root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,4,['optimiz'],['optimizeCacheMode']
Performance," RooAbsPdf.h:157; RooAbsPdf::generateRooFit::OwningPtr< RooDataSet > generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={})See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,...Definition RooAbsPdf.h:57; RooAbsRealLValue::frameRooPlot * frame(const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate a new RooPlot on the heap with a drawing frame initialized for this object,...Definition RooAbsRealLValue.cxx:216; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooDataHistContainer class to hold N-dimensional binned data.Definition RooDataHist.h:40; RooExpensiveObjectCache::getObjconst TObject * getObj(Int_t uniqueID)Retrieve payload object of cache element with given unique ID.Definition RooExpensiveObjectCache.cxx:115; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooWorkspacePersistable container for RooFit projects.Definition RooWorkspace.h:43; RooWorkspace::Printvoid Print(Option_t *opts=nullptr) const overridePrint contents of the workspace.Definition RooWorkspace.cxx:2095; RooWorkspace::pdfRooAbsPdf * pdf(RooStringView name) constRetrieve p.d.f (RooAbsPdf) with given name. A null pointer is returned if not found.Definition RooWorkspace.cxx:1214; RooWorkspace::expensiveObjectCacheRooExpensiveObjectCache & expensiveObjectCache()Definition RooWorkspace.h:166; RooWorkspace::varRooRealVar * var(RooStringView name) constRetrieve real-valued variable (RooRealVar) with given name. A null pointer is returned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:6890,cache,cache,6890,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['cache'],['cache']
Performance," RooAbsPdf::ExtendMode { CanNotBeExtended; CanBeExtended; MustBeExtended; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistPdf.html:36024,cache,cache,36024,root/html526/RooHistPdf.html,https://root.cern,https://root.cern/root/html526/RooHistPdf.html,2,['cache'],"['cache', 'caches']"
Performance," RooAbsReal &_beta, RooAbsReal &_mu);  ;  RooGamma (const RooGamma &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  algorithm adapted from code example in: Marsaglia, G. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:2372,Load,Load,2372,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['Load'],['Load']
Performance," RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 374 of file RooAbsRealLValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:76131,perform,performed,76131,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['perform'],['performed']
Performance," RooAbsReal& _x, RooAbsReal& _y); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html:24842,cache,cache,24842,root/html602/RooCFunction2Binding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html,10,['cache'],['cache']
Performance," RooAbsReal& _y, RooAbsReal& _z); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_bool_.html:24913,cache,cache,24913,root/html602/RooCFunction3Binding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_bool_.html,12,['cache'],['cache']
Performance," RooAbsReal& _z, RooAbsReal& _w); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_bool_.html:25006,cache,cache,25006,root/html602/RooCFunction4Binding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_bool_.html,6,['cache'],['cache']
Performance," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3571 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:140360,perform,perform,140360,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['perform'],['perform']
Performance," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3651 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2945 of file RooAbsReal.cxx. ◆ plotSliceOn(). RooPlot * RooAbsReal::plotSliceOn ; (; RooPlot * ; frame, . const RooArgSet & ; sliceSet, . Option_t * ; drawOptions = ""L"", . double ; scaleFactor = 1.0, . ScaleType ; stype = Relative, . const RooAbsData * ; projData = nullptr . ); const. virtual . Deprecated:OBSOLETE – RETAINED FOR BACKWARD COMPATIBILITY. Use plotOn() with Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:141787,perform,perform,141787,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['perform'],['perform']
Performance," RooAddPdf, RooProdPdf, RooProduct, RooRealSumFunc, and RooRealSumPdf.; Definition at line 385 of file RooAbsArg.h. ◆ setCachedValue(). virtual void RooAbsArg::setCachedValue ; (; double ; , . bool ; = true . ). inlinevirtual . Overwrite the current value stored in this object, making it look like this object computed that value. ; recompute their values. ; Reimplemented in RooAbsCategory, and RooAbsReal.; Definition at line 481 of file RooAbsArg.h. ◆ setDataToken(). void RooAbsArg::setDataToken ; (; std::size_t ; index). Sets the token for retrieving results in the BatchMode. For internal use only. ; Definition at line 2555 of file RooAbsArg.cxx. ◆ setDirtyInhibit(). void RooAbsArg::setDirtyInhibit ; (; bool ; flag). static . Control global dirty inhibit mode. ; When set to true no value or shape dirty flags are propagated and cache is always considered to be dirty. ; Definition at line 204 of file RooAbsArg.cxx. ◆ setExpensiveObjectCache(). virtual void RooAbsArg::setExpensiveObjectCache ; (; RooExpensiveObjectCache & ; cache). inlinevirtual . Reimplemented in RooRealVar.; Definition at line 475 of file RooAbsArg.h. ◆ setLocalNoDirtyInhibit(). void RooAbsArg::setLocalNoDirtyInhibit ; (; bool ; flag); const. inline . Definition at line 674 of file RooAbsArg.h. ◆ SetName(). void RooAbsArg::SetName ; (; const char * ; name). overridevirtual . Set the name of the TNamed. ; WARNING: if the object is a member of a THashTable or THashList container the container must be Rehash()'ed after SetName(). For example the list of objects in the current directory is a THashList. ; Reimplemented from TNamed.; Definition at line 2367 of file RooAbsArg.cxx. ◆ SetNameTitle(). void RooAbsArg::SetNameTitle ; (; const char * ; name, . const char * ; title . ). overridevirtual . Set all the TNamed parameters (name and title). ; WARNING: if the name is changed and the object is a member of a THashTable or THashList container the container must be Rehash()'ed after SetName(). For example th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:97121,cache,cache,97121,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['cache'],['cache']
Performance," RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual RooAbsGenContext*RooAbsPdf::autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:3992,cache,cacheUniqueSuffix,3992,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,1,['cache'],['cacheUniqueSuffix']
Performance," RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual RooAbsGenContext*RooAbsPdf::autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:2625,cache,cacheUniqueSuffix,2625,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,16,['cache'],['cacheUniqueSuffix']
Performance," RooArgSet containing the objects that are both in the cached set 2 with a given index and an input argSet. ;  ; Int_t setObj (const RooArgSet *nset, const RooArgSet *iset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. ;  ; Int_t setObj (const RooArgSet *nset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Setter function without integration set. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void wireCache () override;  ;  Public Member Functions inherited from RooAbsCache;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static bool clearObsList ();  ; static const char * DeclFileName ();  ; static void doClearObsList (bool flag);  ;  Static Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; bool _allowOptimize;  ; bool _clearOnRedirect;  ; bool _optCacheModeSeen;  ! ;  ; RooArgSet * _optCacheObservables = nullptr;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:5027,cache,cache,5027,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,2,['cache'],"['cache', 'caches']"
Performance," RooArgSet& obs, RooArgSet& orderedObs) const; 3695{; 3696 // Dummy implementation, do nothing; 3697 orderedObs.removeAll() ;; 3698 orderedObs.add(obs) ;; 3699}; 3700 ; 3701 ; 3702 ; 3703////////////////////////////////////////////////////////////////////////////////; 3704/// Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&); 3705 ; 3706RooFit::OwningPtr<RooAbsReal> RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset); 3707{; 3708 return createRunningIntegral(iset,RooFit::SupNormSet(nset)) ;; 3709}; 3710 ; 3711 ; 3712 ; 3713////////////////////////////////////////////////////////////////////////////////; 3714/// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; 3715/// \f[; 3716/// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; 3717/// \f]; 3718///; 3719/// The actual integration calculation is only performed when the return object is evaluated. The name; 3720/// of the integral object is automatically constructed from the name of the input function, the variables; 3721/// it integrates and the range integrates over. The default strategy to calculate the running integrals is; 3722///; 3723/// - If the integrand (this object) supports analytical integration, construct an integral object; 3724/// that calculate the running integrals value by calculating the analytical integral each; 3725/// time the running integral object is evaluated; 3726///; 3727/// - If the integrand (this object) requires numeric integration to construct the running integral; 3728/// create an object of class RooNumRunningInt which first samples the entire function and integrates; 3729/// the sampled function numerically. This method has superior performance as there is no need to; 3730/// perform a full (numeric) integration for each evaluation of the running in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:158682,perform,performed,158682,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['perform'],['performed']
Performance," RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; Int_tRooAbsTestStatistic::numSets() const; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::operMode() const; virtual voidRooAbsArg::operModeHook(); voidoptimizeCaching(); voidoptimizeConstantTerms(Bool_t); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; virtual voidprintCompactTreeHook(ostream& os, const char* indent = """"); virtual Bool_tredirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); virtual RooArgSetrequiredExtraObservables() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:28234,optimiz,optimizeDirtyHook,28234,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,3,['optimiz'],['optimizeDirtyHook']
Performance," RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html:3317,cache,cache,3317,root/html526/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html,1,['cache'],['cache']
Performance," RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html:45046,cache,cache,45046,root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,2,['cache'],['cache']
Performance," RooArgSet_cachedVars! External variables cached with this data set; RooAbsDataStore*_dstoreData storage implementation; TIterator*_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>_ownedComponentsOwned external components; RooArgSet_varsDimensions of this data set; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void setDefaultStorageType(RooAbsData::StorageType s). void claimVars(RooAbsData* ). Bool_t releaseVars(RooAbsData* ); If return value is true variables can be deleted. ~RooAbsData(); Destructor. void convertToVectorStore(); Convert tree-based storage to vector-based storage. Bool_t changeObservableName(const char* from, const char* to). void fill(). Int_t numEntries() const. void reset(). const RooArgSet* get(Int_t index) const. void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); Internal method -- Cache given set of functions with data. void resetCache(); Internal method -- Remove cached function values. void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Internal method -- Attach dataset copied with cache contents to copied instances of functions. void setArgStatus(const RooArgSet& set, Bool_t active). void setDirtyProp(Bool_t flag); Control propagation of dirty flags from observables in dataset. RooAbsData* reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Create a reduced copy of this dataset. The caller takes ownership of the returned dataset. The following optional named arguments are accepted. SelectVars(const RooArgSet& vars) -- Only retain the listed observables in the output datas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsData.html:15037,cache,cacheArgs,15037,root/html532/RooAbsData.html,https://root.cern,https://root.cern/root/html532/RooAbsData.html,2,"['Cache', 'cache']","['Cache', 'cacheArgs']"
Performance," RooArgSet selectFromSet2 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 2 with a given index and an input argSet. ;  ; Int_t setObj (const RooArgSet *nset, const RooArgSet *iset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. ;  ; Int_t setObj (const RooArgSet *nset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Setter function without integration set. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void wireCache () override;  ;  Public Member Functions inherited from RooAbsCache;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static bool clearObsList ();  ; static const char * DeclFileName ();  ; static void doClearObsList (bool flag);  ;  Static Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; bool _allowOptimize;  ; bool _clearOnRedirect;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:4914,cache,cache,4914,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['cache'],['cache']
Performance," RooCachedPdf(); RooCachedPdf(const RooCachedPdf& other, const char* name = 0); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); virtual~RooCachedPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCachedPdf.html:721,cache,cacheObs,721,root/html528/RooCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooCachedPdf.html,3,['cache'],['cacheObs']
Performance," RooCachedPdf(); RooCachedPdf(const RooCachedPdf& other, const char* name = 0); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); virtual~RooCachedPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedPdf.html:721,cache,cacheObs,721,root/html534/RooCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooCachedPdf.html,1,['cache'],['cacheObs']
Performance," RooCachedPdf(); RooCachedPdf(const RooCachedPdf& other, const char* name = 0); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); virtual~RooCachedPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:721,cache,cacheObs,721,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,1,['cache'],['cacheObs']
Performance," RooCachedReal(); RooCachedReal(const RooCachedReal& other, const char* name = 0); RooCachedReal(const char* name, const char* title, RooAbsReal& _func); RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); virtual~RooCachedReal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCachedReal.html:737,cache,cacheObs,737,root/html528/RooCachedReal.html,https://root.cern,https://root.cern/root/html528/RooCachedReal.html,3,['cache'],['cacheObs']
Performance," RooCachedReal(); RooCachedReal(const RooCachedReal& other, const char* name = 0); RooCachedReal(const char* name, const char* title, RooAbsReal& _func); RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); virtual~RooCachedReal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedReal.html:736,cache,cacheObs,736,root/html534/RooCachedReal.html,https://root.cern,https://root.cern/root/html534/RooCachedReal.html,1,['cache'],['cacheObs']
Performance," RooCachedReal(); RooCachedReal(const RooCachedReal& other, const char* name = 0); RooCachedReal(const char* name, const char* title, RooAbsReal& _func); RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); virtual~RooCachedReal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedReal.html:737,cache,cacheObs,737,root/html526/RooCachedReal.html,https://root.cern,https://root.cern/root/html526/RooCachedReal.html,1,['cache'],['cacheObs']
Performance," RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from RooAbsCategory; using value_type = int;  The type used to denote a specific category state. ;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinningCategory.html:41287,Cache,Cached,41287,doc/master/classRooBinningCategory.html,https://root.cern,https://root.cern/doc/master/classRooBinningCategory.html,2,['Cache'],['Cached']
Performance," RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class RooSuperCategory;  . Additional Inherited Members;  Public Types inherited from RooAbsCategory; using value_type = int;  The type used to denote a specific category state. ;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiCategory.html:41449,Cache,Cached,41449,doc/master/classRooMultiCategory.html,https://root.cern,https://root.cern/doc/master/classRooMultiCategory.html,1,['Cache'],['Cached']
Performance," RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Attributes; TreeReadBuffer * _treeReadBuffer = nullptr;  . Friends; class RooVectorDataStore;  . Legacy interface; Previous versions of RooAbsCategory were based on RooCatType, a class containing a state and a label.; It has been replaced by integers, which use less space and allow for faster access. The following part",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:42328,Cache,Cached,42328,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['Cache'],['Cached']
Performance," RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void setDefCat (value_type defCat);  . Friends; class RooMappedCategoryCache;  . Additional Inherited Members;  Public Types inherited from RooAbsCategory; using value_type = int;  The type used to denote a specific category state. ;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:41662,Cache,Cached,41662,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['Cache'],['Cached']
Performance," RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsCategoryLValue.h>. Inheritance diagram for RooAbsCategor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:45755,Cache,Cached,45755,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['Cache'],['Cached']
Performance," RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCategory.h>. Inheritance diagram for RooCategory:. This bro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:51295,Cache,Cached,51295,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['Cache'],['Cached']
Performance," RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooSuperCategory.h>. Inheritance diagram for RooSuperCategory:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:47381,Cache,Cached,47381,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,1,['Cache'],['Cached']
Performance," RooCmdArg ModularL (bool flag=false);  ; RooCmdArg MoveToBack ();  ; RooCmdArg MultiArg (const RooCmdArg &arg1, const RooCmdArg &arg2, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  ; RooCmdArg Name (const char *name);  ; RooCmdArg NoRecursion (bool flag=true);  ; RooCmdArg Normalization (double scaleFactor);  ; RooCmdArg Normalization (double scaleFactor, Int_t scaleType);  ; RooCmdArg NormRange (const char *rangeNameList);  ; template<class... Args_t> ; RooCmdArg NormSet (Args_t &&... argsOrArgSet);  ; RooCmdArg NumCPU (Int_t nCPU, Int_t interleave=0);  ; RooCmdArg NumEvents (double numEvents);  ; RooCmdArg NumEvents (Int_t numEvents);  ; RooCmdArg NumIntConfig (const RooNumIntConfig &cfg);  ; RooCmdArg ObjectName (const char *name);  ; RooCmdArg Offset (bool flag=true);  ; RooCmdArg Offset (const char *mode);  ; RooCmdArg Offset (std::string const &mode);  ; std::ostream & operator<< (std::ostream &os, const RooPrintable &rp);  ; RooCmdArg Optimize (Int_t flag=2);  ; RooCmdArg OutputFile (const char *fileName);  ; RooCmdArg OutputStream (std::ostream &os);  ; RooCmdArg OwnLinked ();  ; RooCmdArg Parallelize (int nWorkers);  ; RooCmdArg Parameters (const RooArgSet &params);  ; RooCmdArg Precision (double prec);  ; RooCmdArg PrefitDataFraction (double data_ratio=0.0);  ; RooCmdArg Prefix (bool flag);  ; RooCmdArg PrintEvalErrors (Int_t numErrors);  ; RooCmdArg PrintLevel (Int_t code);  ; RooCmdArg Project (const RooArgSet &projSet);  ; template<class... Args_t> ; RooCmdArg ProjectedObservables (Args_t &&... argsOrArgSet);  ; RooCmdArg ProjectionRange (const char *rangeName);  ; RooCmdArg ProjWData (const RooAbsData &projData, bool binData=false);  ; RooCmdArg ProjWData (const RooArgSet &projSet, const RooAbsData &projData, bool binData=false);  ; RooCmdArg ProtoData (const RooDataSet &protoData, bool randomizeOrder=false, bool resample=false);  ; RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit.html:15195,Optimiz,Optimize,15195,doc/master/namespaceRooFit.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html,1,['Optimiz'],['Optimize']
Performance," RooCompositeDataStore(); RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCompositeDataStore.html:1349,cache,cachedVars,1349,root/html526/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html526/RooCompositeDataStore.html,6,['cache'],"['cacheOwner', 'cachedVars']"
Performance," RooCompositeDataStore(); RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCompositeDataStore.html:1401,cache,cachedVars,1401,root/html532/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html532/RooCompositeDataStore.html,2,['cache'],"['cacheOwner', 'cachedVars']"
Performance," RooCompositeDataStore(); RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:1434,cache,cachedVars,1434,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,2,['cache'],"['cacheOwner', 'cachedVars']"
Performance," RooIntegralMorph, RooFFTConvPdf, and RooCachedPdf. ◆ forceAnalyticalInt(). bool RooAbsCachedPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. overridevirtual . Force RooRealIntegral to offer all our actual observable for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 322 of file RooAbsCachedPdf.cxx. ◆ getAnalyticalIntegralWN(). int RooAbsCachedPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Advertises internal (analytical) integration capabilities. ; Call is forwarded to RooHistPdf cache p.d.f of cache that is used for given choice of observables ; Reimplemented from RooAbsReal.; Definition at line 334 of file RooAbsCachedPdf.cxx. ◆ getCache(). RooAbsCachedPdf::PdfCacheElem * RooAbsCachedPdf::getCache ; (; const RooArgSet * ; nset, . bool ; recalculate = true . ); const. protected . Retrieve cache object associated with given choice of observables. ; If cache object does not exist, create and fill and register it on the fly. If recalculate=false recalculation of cache contents of existing caches that are marked dirty due to dependent parameter changes is suppressed. ; Definition at line 113 of file RooAbsCachedPdf.cxx. ◆ getCacheHist() [1/2]. RooDataHist * RooAbsCachedPdf::getCacheHist ; (; const RooArgSet & ; nset); const. inline . Definition at line 43 of file RooAbsCachedPdf.h. ◆ getCacheHist() [2/2]. RooDataHist * RooAbsCachedPdf::getCacheHist ; (; const RooArgSet * ; nset = nullptr); const. Return pointer to RooDataHist cache histogram for given choice of observables. ; Definition at line 100 of file RooAbsCachedPdf.cxx. ◆ getCachePdf() [1/2]. RooAbsPdf * RooAbsCachedPdf::getCachePdf ; (; const RooArgSet & ; nset); const. inline . Definition at line 39 of file RooAbsCachedPdf.h. ◆ getCachePdf() [2/2]. RooAbsPdf * RooAbsCachedPdf::getCachePdf ; (; const RooArgSet * ; nset = nullptr); const. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:81534,cache,cache,81534,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['cache'],['cache']
Performance," RooIntegralMorph::RooIntegralMorph ; (; ). default . ◆ RooIntegralMorph() [2/3]. RooIntegralMorph::RooIntegralMorph ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _pdf1, . RooAbsReal & ; _pdf2, . RooAbsReal & ; _x, . RooAbsReal & ; _alpha, . bool ; cacheAlpha = false . ). Constructor with observables x, pdf shapes pdf1 and pdf2 which represent the shapes at the end points of the interpolation parameter alpha If doCacheAlpha is true, a two-dimensional cache is constructed in both alpha and x. ; Definition at line 101 of file RooIntegralMorph.cxx. ◆ RooIntegralMorph() [3/3]. RooIntegralMorph::RooIntegralMorph ; (; const RooIntegralMorph & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 119 of file RooIntegralMorph.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooIntegralMorph::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Observable to be cached for given choice of normalization. ; Returns the 'x' observable unless doCacheAlpha is set in which case a set with both x and alpha ; Implements RooAbsCachedPdf.; Definition at line 134 of file RooIntegralMorph.cxx. ◆ actualParameters(). RooFit::OwningPtr< RooArgSet > RooIntegralMorph::actualParameters ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Parameters of the cache. ; Returns parameters of both pdf1 and pdf2 and parameter cache, in case doCacheAlpha is not set. ; Implements RooAbsCachedPdf.; Definition at line 148 of file RooIntegralMorph.cxx. ◆ cacheAlpha(). bool RooIntegralMorph::cacheAlpha ; (; ); const. inline . Definition at line 45 of file RooIntegralMorph.h. ◆ Class(). static TClass * RooIntegralMorph::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooIntegralMorph::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooIntegralMorph::Class_Version ; (; ). in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:81975,cache,cached,81975,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['cache'],['cached']
Performance," RooKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataSet& data, TString options = ""a"", Double_t rho = 1., Double_t nSigma = 3, Bool_t rotate = kTRUE); Backward compatibility constructor for Roo2DKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); Constructor. ~RooNDKeysPdf(). createPdf(Bool_t firstCall = kTRUE) const; evaluation order of constructor. setOptions() const; set the configuration. initialize() const; initialization. loadDataSet(Bool_t firstCall) const; copy the dataset and calculate some useful variables. mirrorDataSet() const; determine mirror dataset.; mirror points are added around the physical boundaries of the dataset; Two steps:; 1. For each entry, determine if it should be mirrored (the mirror configuration).; 2. For each mirror configuration, make the mirror points. loadWeightSet() const. calculateShell(RooNDKeysPdf::BoxInfo* bi) const; determine points in +/- nSigma shell around the box determined by the variable; ranges. These points are needed in the normalization, to determine probability; leakage in and out of the box. calculatePreNorm(RooNDKeysPdf::BoxInfo* bi) const; bi->nEventsBMSW=0.;; bi->nEventsBW=0.;. sortDataIndices(RooNDKeysPdf::BoxInfo* bi = 0) const; sort entries, as needed for loopRange(). calculateBandWidth() const. gauss(vector<Double_t>& x, vector<vector<Double_t> >& weights) const; loop over all closest point to x, as determined by loopRange(). loopRange(vector<Double_t>& x, map<Int_t,Bool_t>& ibMap) const; determine closest points to x, to loop over in evaluate(). boxInfoInit(RooNDKeysPdf::BoxInfo* bi, const char* rangeName, Int_t code) const. evaluate() const. getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. analyticalIntegral(Int_t code, const char* rangeName = 0) const. TObject* clone(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNDKeysPdf.html:51218,load,loadWeightSet,51218,root/html602/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooNDKeysPdf.html,2,['load'],['loadWeightSet']
Performance," RooLinkedList& norms, const RooLinkedList& imps, const RooLinkedList& ints, const RooLinkedList& cross) const; static Bool_tRooAbsArg::inhibitDirty(); voidinitializeFromCmdArgList(const RooArgSet& fullPdfSet, const RooLinkedList& l); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; RooAbsReal*makeCondPdfRatioCorr(RooAbsReal& term, const RooArgSet& termNset, const RooArgSet& termImpSet, const char* normRange, const char* refRange) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; const char*makeRGPPName(const char* pfx, const RooArgSet& term, const RooArgSet& iset, const RooArgSet& nset, const char* isetRangeName) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:35849,optimiz,optimizeDirtyHook,35849,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,3,['optimiz'],['optimizeDirtyHook']
Performance," RooNumCdf(const RooNumCdf& other, const char* name = 0); RooNumCdf(const char* name, const char* title, RooAbsPdf& _pdf, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumCdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumCdf.html:1006,cache,cache,1006,root/html528/RooNumCdf.html,https://root.cern,https://root.cern/root/html528/RooNumCdf.html,4,['cache'],['cache']
Performance," RooNumCdf(const RooNumCdf& other, const char* name = 0); RooNumCdf(const char* name, const char* title, RooAbsPdf& _pdf, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumCdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumCdf.html:1006,cache,cache,1006,root/html526/RooNumCdf.html,https://root.cern,https://root.cern/root/html526/RooNumCdf.html,1,['cache'],['cache']
Performance," RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumRunningInt(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumRunningInt.html:1214,cache,cache,1214,root/html528/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html528/RooNumRunningInt.html,4,['cache'],['cache']
Performance," RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumRunningInt(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumRunningInt.html:1214,cache,cache,1214,root/html526/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html526/RooNumRunningInt.html,1,['cache'],['cache']
Performance," RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); virtual~RooObjCacheManager(); Int_tRooCacheManager<RooAbsCacheElement>::cacheSize() const; static TClass*Class(); static Bool_tclearObsList(); static voiddoClearObsList(Bool_t flag); virtual voidfindConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; Int_tRooCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:1167,cache,cacheSize,1167,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,1,['cache'],['cacheSize']
Performance," RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 2, Bool_t clearCacheOnServerRedirect = kTRUE, Bool_t allowOptimize = kFALSE); virtual~RooObjCacheManager(); Int_tRooCacheManager<RooAbsCacheElement>::cacheSize() const; static TClass*Class(); static Bool_tclearObsList(); static voiddoClearObsList(Bool_t flag); virtual voidfindConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooObjCacheManager.html:1197,cache,cacheSize,1197,root/html534/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html534/RooObjCacheManager.html,1,['cache'],['cacheSize']
Performance," RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TStringBasic string class.Definition TString.h:139; TString::AppendTString & Append(const char *cs)Definition TString.h:572; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf505_asciicfgDefinition rf505_asciicfg.py:1; mTMarker mDefinition textangle.C:8; ; [#0] WARNING:InputArguments -- The parameter 's' with range [-10, 10] of the RooGaussian 'g' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; 1) 0x7ffc52bb96d8 RooRealVar:: f = 0.50733 +/- 0.020971 L(0 - 1) ""f""; 2) 0x7ffc52bb8b20 RooRealVar:: m = 0.0064018 +/- 0.053686 L(-10 - 10) ""m""; 3) 0x7ffc52bb92f0 RooRealVar:: p0 = 0.0073509 +/- 0.0078312 L(0 - 1) ""p0""; 4) 0x7ffc52bb8f08 RooRealVar:: s = 0.96516 +/- 0.047052 L(-10 - 10) ""s""; [#1] INFO:InputArguments -- RooArgSet::readFromStream(parameters): processing include file rf505_asciicfg_example.txt; 1) 0x7ffc52bb96d8 RooRealVar:: f = 0.45 +/- 0.03 L(0 - 1) ""f""; 2) 0x7ffc52bb8b20 RooRealVar:: m = 0.025 +/- 0.02 L(-10 - 10) ""m""; 3) 0x7ffc52bb92f0 RooRealVar:: p0 = 0.0022 +/- 0.0001 L(0 - 1) ""p0""; 4) 0x7ffc52bb8f08 RooRealVar:: s = 0.98 +/- 0.03 L(-10 - 10) ""s""; [#1] INFO:InputArguments -- RooArgSet::readFromStream(parameters): processing incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf505__asciicfg_8C.html:4198,optimiz,optimization,4198,doc/master/rf505__asciicfg_8C.html,https://root.cern,https://root.cern/doc/master/rf505__asciicfg_8C.html,2,['optimiz'],['optimization']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); RooNumConvolution(); RooNumConvolution(const RooNumConvolution& other, const char* name = 0); RooNumConvolution(const char* name, const char* title, RooRealVar& convVar, RooAbsReal& pdf, RooAbsReal& resmodel, const RooNumConvolution* proto = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvolution.html:24872,cache,cache,24872,root/html602/RooNumConvolution.html,https://root.cern,https://root.cern/root/html602/RooNumConvolution.html,2,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthPara",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:23286,cache,cache,23286,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,2,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:23856,cache,cache,23856,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,1,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:25142,cache,cache,25142,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,1,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvolution.html:23773,cache,cache,23773,root/html530/RooNumConvolution.html,https://root.cern,https://root.cern/root/html530/RooNumConvolution.html,1,['cache'],['cache']
Performance," RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void doEval (RooFit::EvalContext &) const override;  Interpolate between input distributions for all values of the observable in evalData. ;  ; double evaluate () const override;  Calculate and return current value of self. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:49865,cache,cached,49865,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,2,['cache'],"['cache', 'cached']"
Performance, RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBCPGenDecay.html:41876,cache,cache,41876,root/html534/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html534/RooBCPGenDecay.html,1,['cache'],['cache']
Performance, RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooAr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBMixDecay.html:41859,cache,cache,41859,root/html534/RooBMixDecay.html,https://root.cern,https://root.cern/root/html534/RooBMixDecay.html,1,['cache'],['cache']
Performance," RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPolyVar.html:30881,cache,cache,30881,root/html526/RooPolyVar.html,https://root.cern,https://root.cern/root/html526/RooPolyVar.html,2,['cache'],['cache']
Performance, RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooPolyVar.html:31548,cache,cache,31548,root/html530/RooPolyVar.html,https://root.cern,https://root.cern/root/html530/RooPolyVar.html,1,['cache'],['cache']
Performance, RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooPolyVar.html:31923,cache,cache,31923,root/html532/RooPolyVar.html,https://root.cern,https://root.cern/root/html532/RooPolyVar.html,1,['cache'],['cache']
Performance," RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooNumRunningInt::funcProxy to functions whose running integral is calculated; RooRealProxyRooNumRunningInt::xIntergrated observable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumCdf(const char* name, const char* title, RooAbsPdf& _pdf, RooRealVar& _x, const char* binningName = ""cache""); Construct a cumulative distribution function from given input p.d.f over observable x.; using a numeric sampling algorithm. Use binning named 'bname' to control sampling; granularity. RooNumCdf(const RooNumCdf& other, const char* name = 0); Copy constructor. ~RooNumCdf(); Destructor. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Fill cache using running integral cache elements calculate(); method with specification of cdf-specific boundary conditions. TObject* clone(const char* newname) const; { return new RooNumCdf(*this,newname); }. » Last changed: Tue Jun 2 15:32:38 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumCdf.html:39048,cache,cache,39048,root/html604/RooNumCdf.html,https://root.cern,https://root.cern/root/html604/RooNumCdf.html,4,['cache'],"['cache', 'cacheFunc']"
Performance," RooSuperCategory(const char* name, const char* title, const RooArgSet& inputCatList); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidRooAbsCategoryLValue::setBin(Int_t ibin, const char* rangeName = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); voidRooAbsCategoryLValue::setConstant(Bool_t value = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); virtual Bool_tsetIndex(Int_t index, Bool_t printError = kTRUE); virtual Bool_tsetLabel(const char* label, Bool_t printError = kTRUE); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSuperCategory.html:16079,cache,cache,16079,root/html602/RooSuperCategory.html,https://root.cern,https://root.cern/root/html602/RooSuperCategory.html,2,['cache'],['cache']
Performance," RooTreeDataStore::loadValues(ds) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds) Ignored 35 out-of-range events; RooDataSet::ds[x,y] = 65 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #7 because y cannot accommodate the value 13.3845; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #8 because z cannot accommodate the value 10; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #12 because y cannot accommodate the value 13.7009; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds2) Ignored 36 out-of-range events; RooDataSet::ds2[x,z,y] = 26 entries; [#1] INFO:DataHandling -- RooAbsReal::attachToTree(i) TTree Int_t branch i will be converted to double precision.; RooDataSet::ds3[x,i] = 100 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #2 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #5 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #8 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #11 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds4) Ignored 33 out-of-range events; RooDataSet::ds4[i,x] = 67 entries; RooDataSet::dsABC[x,y,c] = 26 entries; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf401_importttreethx.py.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf401__importttreethx_8py.html:5207,load,loadValues,5207,doc/master/rf401__importttreethx_8py.html,https://root.cern,https://root.cern/doc/master/rf401__importttreethx_8py.html,1,['load'],['loadValues']
Performance," RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; TGeoCache.h; TObjArray.h; TObject.h; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TGeoCacheStateClass storing the state of the cache at a given moment.Definition TGeoCache.h:28; TGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition.Definition TGeoMatrix.h:458; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoNavigatorArrayDefinition TGeoNavigator.h:294; TGeoNavigatorArray::TGeoNavigatorArrayTGeoNavigatorArray(const TGeoNavigatorArray &)=delete; TGeoNavigatorArray::TGeoNavigatorArrayTGeoNavigatorArray(TGeoManager *mgr)Definition TGeoNavigator.h:304; TGeoNavigatorArray::fCurrentNavigatorTGeoNavigator * fCurrentNavigatorDefinition TGeoNavigator.h:296; TGeoNavigatorArray::AddNavigatorTGeoNavigator * AddNavigator()Add a new navigator to the array.Definition TGeoNavigator.cxx:2745; TGeoNavigatorArray::TGeoNavigatorArrayTGeoNavigatorArray()Definition TGeoNavigator.h:303; TGeoNavigatorArray::GetCurrentNavigatorTGeoNavigator * GetCurrentNavigator()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:16439,cache,cache,16439,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['cache'],['cache']
Performance," Safety(const Double_t *point[3], Bool_t inside); compute maximum shift of a point in any direction that does not change its INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point have to be properly supplied.; Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside); returns director cosines of normal to the crossed shape surface from a given point towards a direction. One has to specify if the point is inside or outside shape. According to this, the normal will be outwards or inwards shape respectively. Normal components are statically stored by shape class, so it has to be copied after retrieval in a different array. Dividing shapes; Shapes can generally be divided along a given axis. Supported axis are X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis. The general rule is that that divisions are possible on whatever axis that produces still known shapes as slices. The division of shapes should not be performed by TGeoShape::Divide() calls, but rather by TGeoVolume::Divide(). The algorithm for dividing a specific shape is known by the shape object, but is always invoked in a generic way from the volume level. Details on how to do that can be found in TGeoVolume class. One can see how all division options are interpreted and which is their result inside specific shape classes. Definition at line 25 of file TGeoShape.h. Public Types; enum  EShapeType { ;   kBitMask32 = 0xffffffff; , kGeoNoShape = 0; , kGeoBad = (1ULL << ( 0 )); , kGeoRSeg = (1ULL << ( 1 )); , ;   kGeoPhiSeg = (1ULL << ( 2 )); , kGeoThetaSeg = (1ULL << ( 3 )); , kGeoVisX = (1ULL << ( 4 )); , kGeoVisY = (1ULL << ( 5 )); , ;   kGeoVisZ = (1ULL << ( 6 )); , kGeoRunTimeShape = (1ULL << ( 7 )); , kGeoInvalidShape = (1ULL << ( 8 )); , kGeoTorus = (1ULL << ( 9 )); , ;   kGeoBox = (1ULL << ( 10 )); , kGeoPara = (1ULL << ( 11 )); , kGeoSph = (1ULL << ( 12 )); , kGeoTube = (1ULL << ( 13 )); , ;   kGeoTubeSeg = (1ULL << ( 14 )); , kGeoCone = (1ULL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:6874,perform,performed,6874,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['perform'],['performed']
Performance," Sample, fit and plot convoluted pdf; # ----------------------------------------------------------------------; ; # Sample 1000 events in x from gxlx; data = lxg.generate({t}, 10000); ; # Fit gxlx to data; lxg.fitTo(data, PrintLevel=-1); ; # Plot data, pdf, landau (X) gauss pdf; frame = t.frame(Title=""landau (x) gauss convolution""); data.plotOn(frame); lxg.plotOn(frame); landau.plotOn(frame, LineStyle=""--""); ; # Draw frame on canvas; c = ROOT.TCanvas(""rf208_convolution"", ""rf208_convolution"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); ; c.SaveAs(""rf208_convolution.png""); [#1] INFO:Eval -- RooRealVar::setRange(t) new range named 'refrange_fft_lxg' created with bounds [-10,30]; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x85ab260 with pdf lx_CONV_gauss_CACHE_Obs[t]_NORM_t for nset (t) with code 0; [#1] INFO:Fitting -- RooAbsPdf::fitTo(lxg_over_lxg_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_lxg_over_lxg_Int[t]_lxgData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x88084e0 with pdf lx_CONV_gauss_CACHE_Obs[t] for nset () with code 1 from preexisting content.; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x82935f0 with pdf lx_CONV_gauss_CACHE_Obs[t]_NORM_t for nset (t) with code 0; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf208_convolution.py. tutorialsroofitrf208_convolution.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf208__convolution_8py.html:1984,cache,cache,1984,doc/master/rf208__convolution_8py.html,https://root.cern,https://root.cern/doc/master/rf208__convolution_8py.html,5,"['cache', 'optimiz']","['cache', 'optimization']"
Performance," SaveContext()=0; TInterpreter::DeclId_tTDictionary::DeclId_t DeclId_tDefinition TInterpreter.h:288; TInterpreter::EErrorCodeEErrorCodeDefinition TInterpreter.h:72; TInterpreter::kFatal@ kFatalDefinition TInterpreter.h:76; TIterDefinition TCollection.h:235; TIter::GetOptionOption_t * GetOption() constDefinition TCollection.h:253; TListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of T...Definition TListOfDataMembers.h:33; TListOfDataMembers::Deletevoid Delete(Option_t *option="""") overrideDelete all TDataMember object files.Definition TListOfDataMembers.cxx:171; TListOfDataMembers::Unloadvoid Unload()Mark 'all func' as being unloaded.Definition TListOfDataMembers.cxx:542; TListOfDataMembers::GetTDictionary * Get(DeclId_t id)Return (after creating it if necessary) the TDataMember describing the data member corresponding to t...Definition TListOfDataMembers.cxx:216; TListOfDataMembers::Loadvoid Load()Load all the DataMembers known to the interpreter for the scope 'fClass' into this collection.Definition TListOfDataMembers.cxx:399; TListOfEnumsWithLockA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnumsWithLock.h:31; TListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctionTemplates.h:35; TListOfFunctionTemplates::FindObjectTObject * FindObject(const char *name) const overrideSpecialize FindObject to do search for the a function just by name or create it if its not already in...Definition TListOfFunctionTemplates.cxx:175; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListOfFunctions::GetTFunction * Get(DeclId_t id)Return (after creating it if necessary) the TMethod or TFunction describing the function correspondin...Definition TLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:138525,Load,Loadvoid,138525,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,6,['Load'],"['Load', 'Loadvoid']"
Performance," Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the generic Echo(); that works with TObjects. Returns -1 on error, the number of workers that; received the message on success. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:66079,cache,cache,66079,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['cache'],['cache']
Performance," Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:57112,cache,cache,57112,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['cache'],['cache']
Performance," Set option(s) to draw axis with labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing values; = ""h"" draw labels horizonthal; = ""v"" draw labels vertical; = ""u"" draw labels up (end of label right adjusted); = ""d"" draw labels down (start of label left adjusted). Long64_t Merge(TCollection* list); Merge all histograms in the collection in this histogram.; This function computes the min/max for the x axis,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The axis x may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1); Multiply this profile by h1*-*-; *-* =============================. this = this*h1. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH1D * ProjectionX(const char* name = ""_px"", Option_t* option = ""e"") const; Project this profile into a 1-D histogram along X*-*-; *-* =================================================. The projection is always of the type TH1D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:39980,Perform,Performs,39980,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,3,['Perform'],['Performs']
Performance," Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. Int_t SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes).; Returns 0 size set, cache was created if possible; -1 on error. Int_t SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0); Set the size of the file cache and create it if possible. If autocache is true:; this may be an autocreated cache, possibly enlarging an existing; autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false:; this is a user requested cache. cacheSize is used to size the cache.; This cache should never be automatically adjusted.; Returns 0 size set, or existing autosized cache almost large enough.; (cache was created if possible); -1 on error. Int_t SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range; Returns 0 entry range set; -1 on error. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the Tree; must be empty or having only one basket per branch.; if maxEntries <= 0 the tree circularity is disabled. NOTE 1:; Circular Trees are interesting in online real time environments; to store the results of the last maxEntries events.; NOTE 2:; Calling SetCircular with maxEntries <= 0 is necessary before; merging circular Trees that have been saved on files.; NOTE 3:; SetCircular with maxEntries <= 0 is auto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:134142,cache,cache,134142,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," Set the file using this cache and reset the current blocks (if any). void Sort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. void SecondSort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary.; Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. TFilePrefetch* GetPrefetchObj(). void WaitFinishPrefetch(). Int_t SetBufferSize(Int_t buffersize); Sets the buffer size. If the current prefetch list is too large to fit in; the new buffer some or all of the prefetch blocks are dropped. The; requested buffersize must be greater than zero.; Returns 0 if the prefetch block lists remain unchanged; 1 if some or all blocks have been removed from the prefetch list; -1 on error. void SetEnablePrefetching(Bool_t setPrefetching = kFALSE); Set the prefetching mode of this file.; if 'setPrefetching', enable the asynchronous prefetching; (using TFilePrefetch) and if the gEnv and rootrc; variable Cache.Directory is set, also enable the local; caching of the prefetched blocks.; if 'setPrefetching', the old prefetcher is enabled is; the gEnv and rootrc variable is TFile.AsyncReading. void SetEnablePrefetchingImpl(Bool_t setPrefetching = kFALSE); TFileCacheRead implementation of SetEnablePrefetching. This function is called from the constructor and should not be virtual. TFileCacheRead(const TFileCacheRead& ). TFileCacheRead& operator=(const TFileCacheRead& ). Int_t AddBranch(TBranch* , Bool_t = kFALSE); { return 0; }. Int_t AddBranch(const char* , Bool_t = kFALSE); { return 0; }. void AddNoCacheBytesRead(Long64_t len); { fNoCacheBytesRead += len; }. void AddNoCacheReadCalls(Int_t reads); { fNoCacheReadCalls += reads; }. Int_t GetBufferSize() const; { return fBufferSize; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetNoCacheBytesRead() const; { return fNoCacheBytesRead; }. Long64_t GetBytesReadExtra() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFileCacheRead.html:12693,Cache,Cache,12693,root/html604/TFileCacheRead.html,https://root.cern,https://root.cern/root/html604/TFileCacheRead.html,1,['Cache'],['Cache']
Performance," Set the initial size of the map used to store object and class; references during reading. The default size is kMapSize=503.; Increasing the default has the benefit that when reading many; small objects the map does not need to be resized too often; (the system is always dynamic, even with the default everything; will work, only the initial resizing will cost some time).; This method can only be called directly after the creation of; the TBuffer, before any reading is done. Globally this option; can be changed using SetGlobalReadParam(). void SetWriteParam(Int_t mapsize); Set the initial size of the hashtable used to store object and class; references during writing. The default size is kMapSize=503.; Increasing the default has the benefit that when writing many; small objects the hashtable does not get too many collisions; (the system is always dynamic, even with the default everything; will work, only a large number of collisions will cost performance).; For optimal performance hashsize should always be a prime.; This method can only be called directly after the creation of; the TBuffer, before any writing is done. Globally this option; can be changed using SetGlobalWriteParam(). void InitMap(); Create the fMap container and initialize them; with the null object. void ResetMap(); Delete existing fMap and reset map counter. Int_t ReadBuf(void* buf, Int_t max); Read max bytes from the I/O buffer into buf. The function returns; the actual number of bytes read. void WriteBuf(const void* buf, Int_t max); Write max bytes from buf into the I/O buffer. char * ReadString(char* s, Int_t max); Read string from I/O buffer. String is read till 0 character is; found or till max-1 characters are read (i.e. string s has max; bytes allocated). If max = -1 no check on number of character is; made, reading continues till 0 character is found. void WriteString(const char* s); Write string to I/O buffer. Writes string upto and including the; terminating 0. TProcessID * GetLastProcess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferFile.html:40372,perform,performance,40372,root/html526/TBufferFile.html,https://root.cern,https://root.cern/root/html526/TBufferFile.html,7,['perform'],['performance']
Performance," SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void ConnectProof(); Connects the proof - creates a ""DrawFeedback"" and connects the; ""Progress"" signal. Int_t Debug() const; {return fDebug;}. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0). TList * GetListOfClones(); { return 0; }. TObjArray * GetListOfBranches(); {return (fTree ? fTree->GetListOfBranches() : (TObjArray *)0); }. TObjArray * GetListOfLeaves(); {return (fTree ? fTree->GetListOfLeaves() : (TObjArray *)0);}. TList * GetListOfFriends() const; {return 0;}. TList * GetListOfAliases() const; {return 0;}. Int_t GetMakeClass() const; GetMakeClass is left non-virtual for efficiency reason.; Making it virtual affects the performance of the I/O. {return fMakeClass;}. Bool_t HasTreeHeader() const; { return (fTree ? kTRUE : kFALSE); }. void SetEventList(TEventList* evlist); { fEventList = evlist; }. void SetEntryList(TEntryList* enlist, Option_t* ); { fEntryList = enlist; }. » Author: G. Ganis Nov 2006 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofChain.h 30069 2009-09-08 15:23:21Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofChain.html:29673,perform,performance,29673,root/html528/TProofChain.html,https://root.cern,https://root.cern/root/html528/TProofChain.html,1,['perform'],['performance']
Performance," SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void ConnectProof(); Connects the proof - creates a ""DrawFeedback"" and connects the; ""Progress"" signal. Int_t Debug() const; {return fDebug;}. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0). TList * GetListOfClones(); { return 0; }. TObjArray * GetListOfBranches(); {return (fTree ? fTree->GetListOfBranches() : (TObjArray *)0); }. TObjArray * GetListOfLeaves(); {return (fTree ? fTree->GetListOfLeaves() : (TObjArray *)0);}. TList * GetListOfFriends() const; {return 0;}. TList * GetListOfAliases() const; {return 0;}. Int_t GetMakeClass() const; GetMakeClass is left non-virtual for efficiency reason.; Making it virtual affects the performance of the I/O. {return fMakeClass;}. Bool_t HasTreeHeader() const; { return (fTree ? kTRUE : kFALSE); }. void SetEventList(TEventList* evlist); { fEventList = evlist; }. void SetEntryList(TEntryList* enlist, Option_t* ); { fEntryList = enlist; }. » Author: G. Ganis Nov 2006 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofChain.h 30069 2009-09-08 15:23:21Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofChain.html:30676,perform,performance,30676,root/html530/TProofChain.html,https://root.cern,https://root.cern/root/html530/TProofChain.html,1,['perform'],['performance']
Performance," SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void ConnectProof(); Connects the proof - creates a ""DrawFeedback"" and connects the; ""Progress"" signal. Int_t Debug() const; {return fDebug;}. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0). TList * GetListOfClones(); { return 0; }. TObjArray * GetListOfBranches(); {return (fTree ? fTree->GetListOfBranches() : (TObjArray *)0); }. TObjArray * GetListOfLeaves(); {return (fTree ? fTree->GetListOfLeaves() : (TObjArray *)0);}. TList * GetListOfFriends() const; {return 0;}. TList * GetListOfAliases() const; {return 0;}. Int_t GetMakeClass() const; GetMakeClass is left non-virtual for efficiency reason.; Making it virtual affects the performance of the I/O. {return fMakeClass;}. Bool_t HasTreeHeader() const; { return (fTree ? kTRUE : kFALSE); }. void SetEventList(TEventList* evlist); { fEventList = evlist; }. void SetEntryList(TEntryList* enlist, Option_t* ); { fEntryList = enlist; }. » Author: G. Ganis Nov 2006 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofChain.h 30069 2009-09-08 15:23:21Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofChain.html:31061,perform,performance,31061,root/html532/TProofChain.html,https://root.cern,https://root.cern/root/html532/TProofChain.html,1,['perform'],['performance']
Performance," SetNewBinAdded(kTRUE);; 330 ; 331 // Adds the bin to the partition matrix; 332 AddBinToPartition(bin);; 333 ; 334 return ibin;; 335}; 336 ; 337////////////////////////////////////////////////////////////////////////////////; 338/// Adds a new bin to the histogram. The number of vertices and their (x,y); 339/// coordinates are required as input. It returns the bin number in the; 340/// histogram.; 341 ; 342Int_t TH2Poly::AddBin(Int_t n, const Double_t *x, const Double_t *y); 343{; 344 TGraph *g = new TGraph(n, x, y);; 345 Int_t bin = AddBin(g);; 346 return bin;; 347}; 348 ; 349////////////////////////////////////////////////////////////////////////////////; 350/// Add a new bin to the histogram. The bin shape is a rectangle.; 351/// It returns the bin number of the bin in the histogram.; 352 ; 353Int_t TH2Poly::AddBin(Double_t x1, Double_t y1, Double_t x2, Double_t y2); 354{; 355 Double_t x[] = {x1, x1, x2, x2, x1};; 356 Double_t y[] = {y1, y2, y2, y1, y1};; 357 TGraph *g = new TGraph(5, x, y);; 358 Int_t bin = AddBin(g);; 359 return bin;; 360}; 361 ; 362////////////////////////////////////////////////////////////////////////////////; 363/// Performs the operation: this = this + c1*h1.; 364 ; 365Bool_t TH2Poly::Add(const TH1 *h1, Double_t c1); 366{; 367 Int_t bin;; 368 ; 369 TH2Poly *h1p = (TH2Poly *)h1;; 370 ; 371 // Check if number of bins is the same.; 372 if (h1p->GetNumberOfBins() != GetNumberOfBins()) {; 373 Error(""Add"", ""Attempt to add histograms with different number of bins"");; 374 return kFALSE;; 375 }; 376 ; 377 // Check if the bins are the same.; 378 TList *h1pBins = h1p->GetBins();; 379 TH2PolyBin *thisBin, *h1pBin;; 380 for (bin = 1; bin <= GetNumberOfBins(); bin++) {; 381 thisBin = (TH2PolyBin *)fBins->At(bin - 1);; 382 h1pBin = (TH2PolyBin *)h1pBins->At(bin - 1);; 383 if (thisBin->GetXMin() != h1pBin->GetXMin() ||; 384 thisBin->GetXMax() != h1pBin->GetXMax() ||; 385 thisBin->GetYMin() != h1pBin->GetYMin() ||; 386 thisBin->GetYMax() != h1pBin->GetYMax(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:14086,Perform,Performs,14086,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['Perform'],['Performs']
Performance," SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. void AddLocation(const char* prefix, const char* path); add files location, which could be used in the server; one could map some system folder to the server like AddLocation(""mydir/"",""/home/user/specials"");; Than files from this directory could be addressed via server like; http://localhost:8080/mydir/myfile.root. void SetJSROOT(const char* location); Set location of JSROOT to use with the server; One could specify address like:; https://root.cern.ch/js/3.3; http://web-docs.gsi.de/~linev/js/3.3; This allows to get new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpServer.html:10038,load,load,10038,root/html534/THttpServer.html,https://root.cern,https://root.cern/root/html534/THttpServer.html,2,['load'],['load']
Performance," Sets marker style. void SetOpacity(Int_t percent); Sets opacity of the current window. This image manipulation routine; works by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Sets color intensities the specified color index ""cindex"". cindex - color index; r, g, b - the red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Sets the text alignment. talign = txalh horizontal text alignment; talign = txalv vertical text alignment. void SetTextColor(Color_t cindex); Sets the color index ""cindex"" for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Sets text font to specified name ""fontname"".This function returns 0 if; the specified font is found, 1 if it is not. mode - loading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad). void SetTextFont(Font_t fontnumber); Sets the current text font number. void SetTextMagnitude(Float_t mgn); Sets the current text magnification factor to ""mgn"". void SetTextSize(Float_t textsize); Sets the current text size to ""textsize"". void Sync(Int_t mode); Set synchronisation on or off.; mode : synchronisation on/off; mode=1 on; mode<>0 off. void UpdateWindow(Int_t mode); Updates or synchronises client and server once (not permanent).; according to ""mode"".; mode = 1 update; mode = 0 sync. void Warp(Int_t ix, Int_t iy, Window_t id = 0); Sets the pointer position.; ix - new X coordinate of pointer; iy - new Y coordinate of pointer; Coordinates are relative to the origin of the window id; or to the origin of the current window if id == 0. Int_t WriteGIF(char* name); Writes the current window into GIF file.; Returns 1 in case of success, 0 otherwise. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Writes the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualX.html:32655,load,loading,32655,root/html530/TVirtualX.html,https://root.cern,https://root.cern/root/html530/TVirtualX.html,10,['load'],"['load', 'loading']"
Performance," Sets marker style. void SetOpacity(Int_t percent); Sets opacity of the current window. This image manipulation routine; works by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Sets color intensities the specified color index ""cindex"". cindex - color index; r, g, b - the red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Sets the text alignment. talign = txalh horizontal text alignment; talign = txalv vertical text alignment. void SetTextColor(Color_t cindex); Sets the color index ""cindex"" for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Sets text font to specified name ""fontname"".This function returns 0 if; the specified font is found, 1 if it is not. mode - loading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad). void SetTextFont(Font_t fontnumber); Sets the current text font number. void SetTextMagnitude(Float_t mgn); Sets the current text magnification factor to ""mgn"". void SetTextSize(Float_t textsize); Sets the current text size to ""textsize"". void UpdateWindow(Int_t mode); Updates or synchronises client and server once (not permanent).; according to ""mode"".; mode = 1 update; mode = 0 sync. void Warp(Int_t ix, Int_t iy, Window_t id = 0); Sets the pointer position.; ix - new X coordinate of pointer; iy - new Y coordinate of pointer; Coordinates are relative to the origin of the window id; or to the origin of the current window if id == 0. Int_t WriteGIF(char* name); Writes the current window into GIF file.; Returns 1 in case of success, 0 otherwise. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Writes the pixmap ""wid"" in the bitmap file ""pxname"". wid - the pixmap address; w, h - the width and height of the pixmap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:32556,load,loading,32556,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,2,['load'],"['load', 'loading']"
Performance," Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDate() const; Int_tGetBuiltTime() const; TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TSeqCollection*GetClipboard() const; TColor*GetColor(Int_t color) const; const char*GetConfigFeatures() const; const char*GetConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:4576,load,load,4576,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,2,['load'],['load']
Performance," Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 154 of file TProofLite.cxx. ◆ InitDataSetManager(). Int_t TProofLite::InitDataSetManager ; (; ). private . Initialize the dataset manager from directives or from defaults Return 0 on success, -1 on failure. ; Definition at line 1412 of file TProofLite.cxx. ◆ IsA(). TClass * TProofLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 170 of file TProofLite.h. ◆ Load(). Int_t TProofLite::Load ; (; const char * ; macro, . Bool_t ; notOnClient = kFALSE, . Bool_t ; uniqueOnly = kTRUE, . TList * ; wrks = 0 . ). overridevirtual . Copy the specified macro in the cache directory. ; The macro file is uploaded if new or updated. If existing, the corresponding header basename(macro).h or .hh, is also uploaded. For the other arguments see TProof::Load(). Returns 0 in case of success and -1 in case of error. ; Reimplemented from TProof.; Definition at line 1539 of file TProofLite.cxx. ◆ MakeQueryResult(). TProofQueryResult * TProofLite::MakeQueryResult ; (; Long64_t ; nent, . const char * ; opt, . Long64_t ; fst, . TDSet * ; dset, . const char * ; selec . ). protected . Create a TProofQueryResult instance for this query. ; Definition at line 1000 of file TProofLite.cxx. ◆ NotifyStartUp(). void TProofLite::NotifyStartUp ; (; const char * ; action, . Int_t ; done, . Int_t ; tot . ). private . Notify setting-up operation message. ; Definition at line 667 of file TProofLite.cxx. ◆ operator=(). void TProofLite::operator= ; (; const TProofLite & ; ). private . ◆ PollForNewWorkers(). Int_t TProofLite::PollForNewWorkers ; (; ). overrideprotectedvirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:54826,cache,cache,54826,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['cache'],['cache']
Performance," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Minimizer.html:14154,perform,perform,14154,root/html602/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html,1,['perform'],['perform']
Performance," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:13886,perform,perform,13886,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,1,['perform'],['perform']
Performance," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__Minimizer.html:14154,perform,perform,14154,root/html604/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__Minimizer.html,1,['perform'],['perform']
Performance," SubRenderScenes(TGLViewerBase::SubRender_foo render_foo); Call sub-rendering function render_foo on all currently visible; scenes. void Render(); Render all scenes. This is done in four passes:; - render opaque objects from all scenes; - render transparent objects from all scenes; - clear depth buffer; - render opaque selected objects from all scenes (with highlight); - render transparent selected objects from all scenes (with highlight). void RenderNonSelected(); Render non-selected objects from all scenes. void RenderSelected(); Render selected objects from all scenes. void RenderOverlay(Int_t state, Bool_t selection); Render overlay objects. void PostRender(); Function called after rendering is finished.; Here we just unlock the scenes. void PreRenderOverlaySelection(); Perform minimal initialization for overlay selection.; Here we assume that scene has already been drawn and that; camera and overall bounding box are ok.; Scenes are not locked. void PostRenderOverlaySelection(); Perform cleanup after overlay selection. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t recIdx); Process selection record on buffer-position 'recIdx' and; fill the data into 'rec'. Returns TRUE if scene was demangled and an object identified.; When FALSE is returned it is still possible that scene has been; identified. Check for this if interested in scene-selection. The select-buffer is taken form fRnrCtx. Bool_t FindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); Find next select record that can be resolved, starting from; position 'recIdx'.; 'recIdx' is passed as reference and points to found record in the buffer. Bool_t FindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Find next select record that can be resolved and whose result is; not transparent, starting from position 'recIdx'.; 'recIdx' is passed as reference and points to found record in the buffer. Bool_t FindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Find next overlay-select record ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerBase.html:6639,Perform,Perform,6639,root/html528/TGLViewerBase.html,https://root.cern,https://root.cern/root/html528/TGLViewerBase.html,3,['Perform'],['Perform']
Performance, T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Attributes |; Static Private Attributes |; List of all members ; ROOT::Internal::VecOps::RVecInlineStorageSize< T > Struct Template Reference. ; template<typename T>; struct ROOT::Internal::VecOps::RVecInlineStorageSize< T >The size of the inline storage of an RVec. ; Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline) unless the size of the buffer with 8 elements would be over a certain maximum size. ; Definition at line 512 of file RVec.hxx. Static Public Attributes; static constexpr unsigned value;  . Static Private Attributes; static constexpr std::size_t cacheLineSize = 64;  ; static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);  ; static constexpr unsigned maxInlineByteSize = 1024;  . #include <ROOT/RVec.hxx>; Member Data Documentation. ◆ cacheLineSize. template<typename T > . constexpr std::size_t ROOT::Internal::VecOps::RVecInlineStorageSize< T >::cacheLineSize = 64. staticconstexprprivate . Definition at line 518 of file RVec.hxx. ◆ elementsPerCacheLine. template<typename T > . constexpr unsigned ROOT::Internal::VecOps::RVecInlineStorageSize< T >::elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T). staticconstexprprivate . Definition at line 520 of file RVec.hxx. ◆ maxInlineByteSize. template<typename T > . constexpr unsigned ROOT::Internal::VecOps::RVecInlineStorageSize< T >::maxInlineByteSize = 1024. staticconstexprprivate . Definition at line 521 of file RVec.hxx. ◆ value. template<typename T > . constexpr unsigned ROOT::Internal::VecOps::RVecInlineStorageSize< T >::value. staticconstexpr . Initial value:=; elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8); ROOT::Internal::VecOps::RVecInlineStorageSize::maxInlineByteSizestatic constexpr unsigned maxI,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Internal_1_1VecOps_1_1RVecInlineStorageSize.html:1049,cache,cacheLineSize,1049,doc/master/structROOT_1_1Internal_1_1VecOps_1_1RVecInlineStorageSize.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Internal_1_1VecOps_1_1RVecInlineStorageSize.html,1,['cache'],['cacheLineSize']
Performance," T.GetBranch(""e"");; brc->GetEntry(i);; bre->GetEntry(i);. If found is not 0, the number of branch(es) found matching the regular; expression is returned in *found AND the error message 'unknown branch'; is suppressed. void SetBranchStyle(Int_t style = 1); Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. Int_t SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes).; Returns 0 size set, cache was created if possible; -1 on error. Int_t SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0); Set the size of the file cache and create it if possible. If autocache is true:; this may be an autocreated cache, possibly enlarging an existing; autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false:; this is a user requested cache. cacheSize is used to size the cache.; This cache should never be automatically adjusted.; Returns 0 size set, or existing autosized cache almost large enough.; (cache was created if possible); -1 on error. Int_t SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range; Returns 0 entry range set; -1 on error. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the Tree; must be empty or having only one basket per branch.; if maxEntries <= 0 the tree circularity is disabled. NOTE 1:; Circular Trees are interesting in onli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:133824,cache,cacheSize,133824,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,6,['cache'],"['cache', 'cacheSize']"
Performance," TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TBuffer3DTypes::kGeneric@ kGenericDefinition TBuffer3DTypes.h:24; TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TBuffer3D::kBoundingBox@ kBoundingBoxDefinition TBuffer3D.h:51; TBuffer3D::kNone@ kNoneDefinition TBuffer3D.h:49; TBuffer3D::kShapeSpecific@ kShapeSpecificDefinition TBuffer3D.h:52; TBuffer3D::kCore@ kCoreDefinition TBuffer3D.h:50; TBuffer3D::SetRawSizesBool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity)Set kRaw tessellation section of buffer with supplied sizes.Definition TBuffer3D.cxx:360; TBuffer3D::fPntsDouble_t * fPntsDefinition TBuffer3D.h:113; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TColorThe color creation and management class.Definition TColor.h:21; TColor::HLS2RGBstatic void HLS2RGB(Float_t h, Float_t l, Float_t s, Float_t &r, Float_t &g, Float_t &b)Static method to compute RGB from HLS.Definition TColor.cxx:1576; TColor::GetRGBvirtual void GetRGB(Float_t &r, Float_t &g, Float_t &b) constDefinition TColor.h:54; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::InitializeColorsstatic void InitializeColors()Initialize colors used by the TCanvas based graphics (via TColor objects).Definition TColor.cxx:1167; TColor::CreateGradientColorTablestatic Int_t CreateGradientColorTable(UInt_t Number, Double_t *Stops, Double_t *Red, Double_t *Green, Double_t *Blue, UInt_t NColors, Float_t alpha=1., Bool_t setPalette=kT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:78012,load,load,78012,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['load'],['load']
Performance," TAuthenticate::SetGlobalPasswd ; (; const char * ; passwd). static . Set global passwd to be used for authentication to rootd or proofd. ; Definition at line 1309 of file TAuthenticate.cxx. ◆ SetGlobalPwHash(). void TAuthenticate::SetGlobalPwHash ; (; Bool_t ; pwhash). static . Set global passwd hash flag to be used for authentication to rootd or proofd. ; Definition at line 1323 of file TAuthenticate.cxx. ◆ SetGlobalSRPPwd(). void TAuthenticate::SetGlobalSRPPwd ; (; Bool_t ; srppwd). static . Set global SRP passwd flag to be used for authentication to rootd or proofd. ; Definition at line 1331 of file TAuthenticate.cxx. ◆ SetGlobalUser(). void TAuthenticate::SetGlobalUser ; (; const char * ; user). static . Set global user name to be used for authentication to rootd or proofd. ; Definition at line 1295 of file TAuthenticate.cxx. ◆ SetGlobusAuthHook(). void TAuthenticate::SetGlobusAuthHook ; (; GlobusAuth_t ; func). static . Set Globus authorization function. ; Automatically called when libGlobusAuth is loaded. ; Definition at line 1411 of file TAuthenticate.cxx. ◆ SetKrb5AuthHook(). void TAuthenticate::SetKrb5AuthHook ; (; Krb5Auth_t ; func). static . Set kerberos5 authorization function. ; Automatically called when libKrb5Auth is loaded. ; Definition at line 1402 of file TAuthenticate.cxx. ◆ SetPromptUser(). void TAuthenticate::SetPromptUser ; (; Bool_t ; promptuser). static . Set global PromptUser flag. ; Definition at line 1385 of file TAuthenticate.cxx. ◆ SetReadHomeAuthrc(). void TAuthenticate::SetReadHomeAuthrc ; (; Bool_t ; readhomeauthrc). static . Set flag controlling the reading of $HOME/.rootauthrc. ; In PROOF the administrator may want to switch off private settings. Always true, may only be set false via option to proofd. ; Definition at line 1341 of file TAuthenticate.cxx. ◆ SetRSAInit(). void TAuthenticate::SetRSAInit ; (; Int_t ; init = 1). static . Static method setting RSA initialization flag. ; Definition at line 1228 of file TAuthenticate.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:39360,load,loaded,39360,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['load'],['loaded']
Performance," TAxis.cxx:469; TAxis::GetNbinsInt_t GetNbins() constDefinition TAxis.h:125; TAxis::SetRangevirtual void SetRange(Int_t first=0, Int_t last=0)Set the viewing range for the axis using bin numbers.Definition TAxis.cxx:1052; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TAxis::GetLabelsTHashList * GetLabels() constDefinition TAxis.h:121; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClass::DynamicCastvoid * DynamicCast(const TClass *base, void *obj, Bool_t up=kTRUE)Cast obj of this class type up to baseclass cl if up is true.Definition TClass.cxx:4982; TClass::InheritsFromBool_t InheritsFrom(const char *cl) const overrideReturn kTRUE if this class inherits from a class with name ""classname"".Definition TClass.cxx:4941; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TCollectionCollection abstract base class.Definition TCollection.h:65; TCollection::lsvoid ls(Option_t *option="""") const overrideList (ls) all objects in this collection.Definition TCollection.cxx:382; TCollection::GetEntriesvirtual Int_t GetEntries() constDefinition TCollection.h:179; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TFileMergeInfoDefinition TFileMergeInfo.h:42; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetBarOffsetvirtual void SetBarOffset(Float_t offset=0.25)Set the bar offset as fraction of the bin width for drawing mode ""B"".Definition TH1.h:364; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8cxx_source.html:40165,load,load,40165,doc/master/THStack_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THStack_8cxx_source.html,1,['load'],['load']
Performance, TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.; TBufferSQL Implementation of TBuffer to load and write to a SQL database; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCint Interface to CINT C/C++ interpreter; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray A,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:50531,load,load,50531,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,2,['load'],['load']
Performance," TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. Int_t AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. In the context",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38457,cache,cache,38457,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," TBuffer::WriteArrayvirtual void WriteArray(const ULong64_t *l, Int_t n)=0; TBuffer::ReadStaticArrayvirtual Int_t ReadStaticArray(Long_t *l)=0; TBuffer::WriteFastArrayvirtual void WriteFastArray(const Double_t *d, Long64_t n)=0; TBuffer::ReadStaticArrayvirtual Int_t ReadStaticArray(Float_t *f)=0; TBuffer::ReadFastArrayvirtual void ReadFastArray(Int_t *i, Int_t n)=0; TBuffer::ReadArrayvirtual Int_t ReadArray(Double_t *&d)=0; TBuffer::BufferSizeInt_t BufferSize() constDefinition TBuffer.h:98; TBuffer::ReadFastArrayvirtual void ReadFastArray(UChar_t *c, Int_t n)=0; TBuffer::EStatusBitsEStatusBitsDefinition TBuffer.h:74; TBuffer::kCannotHandleMemberWiseStreaming@ kCannotHandleMemberWiseStreamingDefinition TBuffer.h:76; TBuffer::kIsOwner@ kIsOwnerDefinition TBuffer.h:75; TBuffer::WriteFastArrayvirtual void WriteFastArray(const Short_t *h, Long64_t n)=0; TBuffer::WriteClonesvirtual Int_t WriteClones(TClonesArray *a, Int_t nobjects)=0; TBuffer::WriteObjectAnyvirtual Int_t WriteObjectAny(const void *obj, const TClass *ptrClass, Bool_t cacheReuse=kTRUE)=0; TBuffer::SetBuffervoid SetBuffer(void *buf, UInt_t bufsiz=0, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr)Sets a new buffer in an existing TBuffer object.Definition TBuffer.cxx:187; TBuffer::SetStreamerElementNumbervirtual void SetStreamerElementNumber(TStreamerElement *elem, Int_t comp_type)=0; TBuffer::ReadFastArrayvirtual void ReadFastArray(Float_t *f, Int_t n)=0; TBuffer::WriteShortvirtual void WriteShort(Short_t s)=0; TBuffer::WriteFastArrayvirtual void WriteFastArray(const ULong64_t *l, Long64_t n)=0; TBuffer::PushDataCachevirtual void PushDataCache(TVirtualArray *)Push a new data cache area onto the list of area to be used for temporarily store 'missing' data memb...Definition TBuffer.cxx:362; TBuffer::ReadCharPvirtual void ReadCharP(Char_t *c)=0; TBuffer::ReadFastArrayDouble32virtual void ReadFastArrayDouble32(Double_t *d, Int_t n, TStreamerElement *ele=nullptr)=0; TBuffer::SetReAllocFuncvoid SetReAllocF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8h_source.html:33719,cache,cacheReuse,33719,doc/master/TBuffer_8h_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8h_source.html,1,['cache'],['cacheReuse']
Performance," TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Evaluate profile likelihood by minimizing likelihood w.r.t. ;  ; void initializeMinimizer () const;  ; void validateAbsMin () const;  Check that parameters and likelihood value for 'best fit' are still valid. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:49017,cache,cached,49017,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,2,['cache'],"['cache', 'cached']"
Performance," TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetPlayer(TVirtualProofPlayer* player); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidValidateDSet(TDSet* dset).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofSuperMaster.html:20414,cache,cachedir,20414,root/html528/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html528/TProofSuperMaster.html,1,['cache'],['cachedir']
Performance," TClass*IsA() const; RooAbsCacheElement&operator=(const RooAbsCacheElement&); virtual voidoperModeHook(RooAbsArg::OperMode); virtual voidoptimizeCacheMode(const RooArgSet& obs, RooArgSet& optNodes, RooLinkedList& processedNodes); virtual voidprintCompactTreeHook(ostream&, const char*, Int_t curElem, Int_t totElem); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidsetOwner(RooAbsArg* owner); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. enum Action { OperModeChange; OptimizeCaching; FindConstantNodes; };. protected:. RooAbsArg*_owner! Pointer to owning RooAbsArg. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface for server redirect calls. void printCompactTreeHook(ostream& , const char* , Int_t curElem, Int_t totElem); Hook function to print cache guts in tree printing mode of RooAbsArgs. void operModeHook(RooAbsArg::OperMode ); Interface for operation mode change calls. void optimizeCacheMode(const RooArgSet& obs, RooArgSet& optNodes, RooLinkedList& processedNodes); Interface for cache optimization calls. The default implementation is to forward all these; calls to all contained RooAbsArg objects as publicized through containedArg(). void findConstantNodes(const RooArgSet& obs, RooArgSet& cacheList, RooLinkedList& processedNodes); Interface for constant term optimization calls. The default implementation is to forward all these; calls to all contained RooAbsArg objects as publicized through containedArg(). virtual ~RooAbsCacheElement(); Destructor. RooArgList containedArgs(RooAbsCacheElement::Action ). void setOwner(RooAbsArg* owner); Store pointer to owner. » Last changed: Mon Dec 7 13:45:32 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCacheElement.html:2003,cache,cache,2003,root/html526/RooAbsCacheElement.html,https://root.cern,https://root.cern/root/html526/RooAbsCacheElement.html,1,['cache'],['cache']
Performance," TClass.cxx:4440; TClass::StreamerExternalstatic void StreamerExternal(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)There is special streamer for the class.Definition TClass.cxx:6788; TClass::operator&friend bool operator&(UChar_t l, ERuntimeProperties r)Definition TClass.h:270; TClass::fClassPropertyLong_t fClassPropertyProperty See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6814; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6845; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:6945; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7066; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4087; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4283; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstrac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:74986,load,loaded,74986,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['load'],['loaded']
Performance," TClass.cxx:4507; TClass::StreamerExternalstatic void StreamerExternal(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)There is special streamer for the class.Definition TClass.cxx:6855; TClass::operator&friend bool operator&(UChar_t l, ERuntimeProperties r)Definition TClass.h:270; TClass::fClassPropertyLong_t fClassPropertyProperty See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6881; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6912; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:7012; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7133; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4154; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4350; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstrac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:74814,load,loaded,74814,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['load'],['loaded']
Performance," TClass::GetClass(#name); return sIsA; } \; 304 static const char *Class_Name() { return #name; } \; 305 virtual_keyword Bool_t CheckTObjectHashConsistency() const overrd { return true; } \; 306 static Version_t Class_Version() { return id; } \; 307 static TClass *Dictionary() { return 0; } \; 308 virtual_keyword TClass *IsA() const overrd { return name::Class(); } \; 309 virtual_keyword void ShowMembers(TMemberInspector&insp) const overrd { ::ROOT::Class_ShowMembers(name::Class(), this, insp); } \; 310 virtual_keyword void Streamer(TBuffer&) overrd { ::Error(""Streamer"", ""Cannot stream interpreted class.""); } \; 311 void StreamerNVirtual(TBuffer&ClassDef_StreamerNVirtual_b) { name::Streamer(ClassDef_StreamerNVirtual_b); } \; 312 static const char *DeclFileName() { return __FILE__; } \; 313 static int ImplFileLine() { return 0; } \; 314 static const char *ImplFileName() { return __FILE__; }; 315)ICF"";; 316}; 317R__EXTERN int optind;; 318 ; 319// The functions are used to bridge cling/clang/llvm compiled with no-rtti and; 320// ROOT (which uses rtti); 321 ; 322////////////////////////////////////////////////////////////////////////////////; 323/// Print a StackTrace!; 324 ; 325extern ""C""; 326void TCling__PrintStackTrace() {; 327 gSystem->StackTrace();; 328}; 329 ; 330////////////////////////////////////////////////////////////////////////////////; 331/// Load a library.; 332 ; 333extern ""C"" int TCling__LoadLibrary(const char *library); 334{; 335 return gSystem->Load(library, """", false);; 336}; 337 ; 338////////////////////////////////////////////////////////////////////////////////; 339/// Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused.; 340 ; 341extern ""C"" void TCling__RestoreInterpreterMutex(void *delta); 342{; 343 ((TCling*)gCling)->ApplyToInterpreterMutex(delta);; 344}; 345 ; 346////////////////////////////////////////////////////////////////////////////////; 347/// Lookup libraries in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH with mangled_na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:11544,Load,Load,11544,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['Load'],['Load']
Performance," TClass::New is; 7381/// guarantee to succeed.; 7382/// To know if the class described by this TClass has a default constructor; 7383/// (public or not), use; 7384/// \code{.cpp}; 7385/// cl->GetProperty() & kClassHasDefaultCtor; 7386/// \endcode; 7387/// To know if the class described by this TClass has a public default; 7388/// constructor use:; 7389/// \code{.cpp}; 7390/// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; 7391/// \endcode; 7392 ; 7393Bool_t TClass::HasDefaultConstructor(Bool_t testio) const; 7394{; 7395 ; 7396 if (fNew) return kTRUE;; 7397 ; 7398 if (HasInterpreterInfo()) {; 7399 R__LOCKGUARD(gInterpreterMutex);; 7400 return gCling->ClassInfo_HasDefaultConstructor(GetClassInfo(), testio);; 7401 }; 7402 if (fCollectionProxy) {; 7403 return kTRUE;; 7404 }; 7405 if (fCurrentInfo.load()) {; 7406 // Emulated class, we know how to construct them via the TStreamerInfo; 7407 return kTRUE;; 7408 }; 7409 return kFALSE;; 7410}; 7411 ; 7412////////////////////////////////////////////////////////////////////////////////; 7413/// Returns true if this class has an definition and/or overload of the; 7414/// member function Hash.; 7415///; 7416/// For example to test if the class overload TObject::Hash use; 7417/// ~~~ {.cpp}; 7418/// if (cl->IsTObject() && cl->HasLocalHashMember()); 7419/// ~~~; 7420 ; 7421Bool_t TClass::HasLocalHashMember() const; 7422{; 7423 if (fProperty == (-1)); 7424 Property();; 7425 return TestBit(kHasLocalHashMember);; 7426}; 7427 ; 7428////////////////////////////////////////////////////////////////////////////////; 7429/// Return the wrapper around Merge.; 7430 ; 7431ROOT::MergeFunc_t TClass::GetMerge() const; 7432{; 7433 return fMerge;; 7434}; 7435 ; 7436////////////////////////////////////////////////////////////////////////////////; 7437/// Return the wrapper around Merge.; 7438 ; 7439ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge() const; 7440{; 7441 return fResetAfterMerge;; 7442}; 7443 ; 7444/////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:284452,load,load,284452,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['load']
Performance," TClass::New is; 7448/// guarantee to succeed.; 7449/// To know if the class described by this TClass has a default constructor; 7450/// (public or not), use; 7451/// \code{.cpp}; 7452/// cl->GetProperty() & kClassHasDefaultCtor; 7453/// \endcode; 7454/// To know if the class described by this TClass has a public default; 7455/// constructor use:; 7456/// \code{.cpp}; 7457/// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; 7458/// \endcode; 7459 ; 7460Bool_t TClass::HasDefaultConstructor(Bool_t testio) const; 7461{; 7462 ; 7463 if (fNew) return kTRUE;; 7464 ; 7465 if (HasInterpreterInfo()) {; 7466 R__LOCKGUARD(gInterpreterMutex);; 7467 return gCling->ClassInfo_HasDefaultConstructor(GetClassInfo(), testio);; 7468 }; 7469 if (fCollectionProxy) {; 7470 return kTRUE;; 7471 }; 7472 if (fCurrentInfo.load()) {; 7473 // Emulated class, we know how to construct them via the TStreamerInfo; 7474 return kTRUE;; 7475 }; 7476 return kFALSE;; 7477}; 7478 ; 7479////////////////////////////////////////////////////////////////////////////////; 7480/// Returns true if this class has an definition and/or overload of the; 7481/// member function Hash.; 7482///; 7483/// For example to test if the class overload TObject::Hash use; 7484/// ~~~ {.cpp}; 7485/// if (cl->IsTObject() && cl->HasLocalHashMember()); 7486/// ~~~; 7487 ; 7488Bool_t TClass::HasLocalHashMember() const; 7489{; 7490 if (fProperty == (-1)); 7491 Property();; 7492 return TestBit(kHasLocalHashMember);; 7493}; 7494 ; 7495////////////////////////////////////////////////////////////////////////////////; 7496/// Return the wrapper around Merge.; 7497 ; 7498ROOT::MergeFunc_t TClass::GetMerge() const; 7499{; 7500 return fMerge;; 7501}; 7502 ; 7503////////////////////////////////////////////////////////////////////////////////; 7504/// Return the wrapper around Merge.; 7505 ; 7506ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge() const; 7507{; 7508 return fResetAfterMerge;; 7509}; 7510 ; 7511/////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:287203,load,load,287203,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['load']
Performance," TDictionary::ESTLTypeTDictionary::kSet; static TObject::(anonymous)TObject::kSingleKey; static TDictionary::ESTLTypeTDictionary::kVector; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. DataMemberInfo_t*fInfo!pointer to CINT data member info. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGlobal(DataMemberInfo_t* info = 0); Default TGlobal ctor. TGlobal(const TGlobal& ); Copy constructor. TGlobal & operator=(const TGlobal& ); Assignment operator. ~TGlobal(); TGlobal dtor deletes adopted CINT DataMemberInfo object. void * GetAddress() const; Return address of global. Int_t GetArrayDim() const; Return number of array dimensions. TDictionary::DeclId_t GetDeclId() const. Int_t GetMaxIndex(Int_t dim) const; Return maximum index for array dimension ""dim"". const char * GetTypeName() const; Get type of global variable, e,g.: ""class TDirectory*"" -> ""TDirectory"".; Result needs to be used or copied immediately. const char * GetFullTypeName() const; Get full type description of global variable, e,g.: ""class TDirectory*"". Bool_t IsValid(); Return true if this global object is pointing to a currently; loaded global. If a global is unloaded after the TGlobal; is created, the TGlobal will be set to be invalid. Long_t Property() const; Get property description word. For meaning of bits see EProperty. Bool_t Update(DataMemberInfo_t* info); Update the TFunction to reflect the new info. This can be used to implement unloading (info == 0) and then reloading; (info being the 'new' decl address). » Author: Rene Brun 13/11/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 15:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGlobal.html:8174,load,loaded,8174,root/html602/TGlobal.html,https://root.cern,https://root.cern/root/html602/TGlobal.html,1,['load'],['loaded']
Performance," TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodFDAMethodFDA(const TMVA::MethodFDA&); TMVA::MethodFDAMethodFDA(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodFDAMethodFDA(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodFDA&operator=(const TMVA::MethodFDA&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodFDA.html:10235,Optimiz,OptimizeTuningParameters,10235,root/html602/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodFDA.html,2,['Optimiz'],['OptimizeTuningParameters']
Performance," TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodSVMMethodSVM(const TMVA::MethodSVM&); TMVA::MethodSVMMethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodSVMMethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodSVM&operator=(const TMVA::MethodSVM&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodSVM.html:9600,Optimiz,OptimizeTuningParameters,9600,root/html602/TMVA__MethodSVM.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodSVM.html,2,['Optimiz'],['OptimizeTuningParameters']
Performance," TEveScalableStraightLineSet(const char* n = ""ScalableStraightLineSet"", const char* t = """"); virtual~TEveScalableStraightLineSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); TEveStraightLineSet::Line_t*TEveStraightLineSet::AddLine(const TEveVector& p1, const TEveVector& p2); TEveStraightLineSet::Line_t*TEveStraightLineSet::AddLine(Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2); Marker_t*TEveStraightLineSet::AddMarker(const TEveVector& p, Int_t line_id = -1); Marker_t*TEveStraightLineSet::AddMarker(Int_t line_id, Float_t pos); Marker_t*TEveStraightLineSet::AddMarker(Float_t x, Float_t y, Float_t z, Int_t line_id = -1); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveScalableStraightLineSet.html:562,Scalab,ScalableStraightLineSet,562,root/html530/TEveScalableStraightLineSet.html,https://root.cern,https://root.cern/root/html530/TEveScalableStraightLineSet.html,3,['Scalab'],['ScalableStraightLineSet']
Performance," TEveScalableStraightLineSet(const char* n = ""ScalableStraightLineSet"", const char* t = """"); virtual~TEveScalableStraightLineSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); TEveStraightLineSet::Line_t*TEveStraightLineSet::AddLine(const TEveVector& p1, const TEveVector& p2); TEveStraightLineSet::Line_t*TEveStraightLineSet::AddLine(Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2); Marker_t*TEveStraightLineSet::AddMarker(const TEveVector& p, Int_t line_id = -1); Marker_t*TEveStraightLineSet::AddMarker(Int_t line_id, Float_t pos); Marker_t*TEveStraightLineSet::AddMarker(Float_t x, Float_t y, Float_t z, Int_t line_id = -1); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveScalableStraightLineSet.html:562,Scalab,ScalableStraightLineSet,562,root/html528/TEveScalableStraightLineSet.html,https://root.cern,https://root.cern/root/html528/TEveScalableStraightLineSet.html,1,['Scalab'],['ScalableStraightLineSet']
Performance," TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.012591 1.0260 [ -3.3377 5.7307 ]; : var2: 0.0016174 1.0380 [ -4.5569 5.7307 ]; : fvalue: 165.93 84.643 [ 2.0973 391.01 ]; : -----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.012591 1.0260 [ -3.3377 5.7307 ]; : var2: 0.0016174 1.0380 [ -4.5569 5.7307 ]; : fvalue: 165.93 84.643 [ 2.0973 391.01 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 2 ) Batch size = 50 Loss function = R; Layer 0 DENSE Layer: ( Input = 2 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 50 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 50 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 50 , Width = 1 ) Output = ( 1 , 50 , 1 ) Activation Function = Identity; : Using 800 events for training and 200 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 33494.1; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 34747.6 33079.7 0.0192196 0.00176099 45822.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 34222.2 32417.1 0.0195047 0.0017702 45109.9 0; : 3 Minimum Test error found - save the configuration ; : 3 | 33496 31618.4 0.019",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:10848,Optimiz,Optimizer,10848,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Optimiz'],['Optimizer']
Performance," TFile.h. ◆ fIsRootFile. Bool_t TFile::fIsRootFile {kTRUE}. protected . !True is this is a ROOT file, raw file otherwise ; Definition at line 104 of file TFile.h. ◆ fMustFlush. Bool_t TFile::fMustFlush {kTRUE}. protected . !True if the file buffers must be flushed ; Definition at line 106 of file TFile.h. ◆ fNbytesFree. Int_t TFile::fNbytesFree {0}. protected . Number of bytes for free segments structure. ; Definition at line 85 of file TFile.h. ◆ fNbytesInfo. Int_t TFile::fNbytesInfo {0}. protected . Number of bytes for StreamerInfo record. ; Definition at line 86 of file TFile.h. ◆ fNoAnchorInName. Bool_t TFile::fNoAnchorInName {kFALSE}. protected . !True if we don't want to force the anchor to be appended to the file name ; Definition at line 103 of file TFile.h. ◆ fNProcessIDs. Int_t TFile::fNProcessIDs {0}. protected . Number of TProcessID written to this file. ; Definition at line 88 of file TFile.h. ◆ fOffset. Long64_t TFile::fOffset {0}. protected . !Seek offset cache ; Definition at line 96 of file TFile.h. ◆ fOpenPhases. TList* TFile::fOpenPhases {nullptr}. protected . !Time info about open phases ; Definition at line 113 of file TFile.h. ◆ fOption. TString TFile::fOption. protected . File options. ; Definition at line 91 of file TFile.h. ◆ fProcessIDs. TObjArray* TFile::fProcessIDs {nullptr}. protected . !Array of pointers to TProcessIDs ; Definition at line 95 of file TFile.h. ◆ fReadCalls. Int_t TFile::fReadCalls {0}. protected . Number of read calls ( not counting the cache calls ) ; Definition at line 89 of file TFile.h. ◆ fRealName. TString TFile::fRealName. protected . Effective real file name (not original url) ; Definition at line 90 of file TFile.h. ◆ fSeekFree. Long64_t TFile::fSeekFree {0}. protected . Location on disk of free segments structure. ; Definition at line 80 of file TFile.h. ◆ fSeekInfo. Long64_t TFile::fSeekInfo {0}. protected . Location on disk of StreamerInfo record. ; Definition at line 81 of file TFile.h. ◆ fSum2Buffer. Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:109013,cache,cache,109013,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['cache'],['cache']
Performance," TFile.h:199; TFile::fCompressInt_t fCompressCompression level and algorithm.Definition TFile.h:84; TFile::CurrentFilestatic TFile *& CurrentFile()Return the current ROOT file if any.Definition TFile.cxx:1067; TFile::SetCompressionAlgorithmvirtual void SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)See comments for function SetCompressionSettings.Definition TFile.cxx:2305; TFile::GetEndpointUrlvirtual const TUrl * GetEndpointUrl() constDefinition TFile.h:235; TFile::fNbytesFreeInt_t fNbytesFreeNumber of bytes for free segments structure.Definition TFile.h:85; TFile::fDInt_t fDFile descriptor.Definition TFile.h:82; TFile::Class_Versionstatic constexpr Version_t Class_Version()Definition TFile.h:344; TFile::ResetErrnovirtual void ResetErrno() constMethod resetting the errno.Definition TFile.cxx:1254; TFile::SizeofInt_t Sizeof() const overrideReturn the size in bytes of the file header.Definition TFile.cxx:2397; TFile::FlushWriteCacheBool_t FlushWriteCache()Flush the write cache if active.Definition TFile.cxx:1158; TFile::IncrementProcessIDsvirtual void IncrementProcessIDs()Definition TFile.h:257; TFile::fIsPcmFileBool_t fIsPcmFile!True if the file is a ROOT pcm file.Definition TFile.h:107; TFile::fCacheReadTFileCacheRead * fCacheRead!Pointer to the read cache (if any)Definition TFile.h:98; TFile::SysClosevirtual Int_t SysClose(Int_t fd)Interface to system close. All arguments like in POSIX close().Definition TFile.cxx:4497; TFile::TFileTFile()File default Constructor.Definition TFile.cxx:201; TFile::fUnitsChar_t fUnitsNumber of bytes for file pointers.Definition TFile.h:92; TFile::fProcessIDsTObjArray * fProcessIDs!Array of pointers to TProcessIDsDefinition TFile.h:95; TFile::GetTypestatic EFileType GetType(const char *name, Option_t *option="""", TString *prefix=nullptr)Resolve the file type as a function of the protocol field in 'name'.Definition TFile.cxx:4821; TFile::EFileTypeEFileTypeFile type.Definition TFile.h:202; TFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:222842,cache,cache,222842,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cache']
Performance," TFile::EStatusBitsTFile::kWriteError; static TObject::(anonymous)TObject::kZombie. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TUrlTNetFile::fEndpointUrlURL of realfile (after possible redirection); Int_tTNetFile::fErrorCodeerror code returned by rootd (matching gRootdErrStr); TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsPcmFile!True if the file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:20830,cache,cache,20830,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,8,"['Cache', 'cache']","['Cached', 'cache']"
Performance," TFile::GetBytesReadvirtual Long64_t GetBytesRead() constDefinition TFile.h:241; TFile::GetErrnovirtual Int_t GetErrno() constMethod returning errno.Definition TFile.cxx:1246; TFile::SetCompressionSettingsvirtual void SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)Used to specify the compression level and algorithm.Definition TFile.cxx:2338; TFile::fgReadInfostatic Bool_t fgReadInfoif true (default) ReadStreamerInfo is called when opening a fileDefinition TFile.h:135; TFile::Initvirtual void Init(Bool_t create)Initialize a TFile object.Definition TFile.cxx:613; TFile::GetRelOffsetLong64_t GetRelOffset() constDefinition TFile.h:251; TFile::AsyncOpenstatic TFileOpenHandle * AsyncOpen(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Submit an asynchronous open request.Definition TFile.cxx:4351; TFile::SetCacheWritevirtual void SetCacheWrite(TFileCacheWrite *cache)Set a pointer to the write cache.Definition TFile.cxx:2388; TFile::fOptionTString fOptionFile options.Definition TFile.h:91; TFile::WriteBuffervirtual Bool_t WriteBuffer(const char *buf, Int_t len)Write a buffer to the file.Definition TFile.cxx:2476; TFile::SumBuffervoid SumBuffer(Int_t bufsize)Increment statistics for buffer sizes of objects in this file.Definition TFile.cxx:2417; TFile::GetCacheFileDirstatic const char * GetCacheFileDir()Get the directory where to locally stage/cache remote files.Definition TFile.cxx:4654; TFile::EAsyncOpenStatusEAsyncOpenStatusAsynchronous open request status.Definition TFile.h:64; TFile::kAOSSuccess@ kAOSSuccessDefinition TFile.h:65; TFile::kAOSNotAsync@ kAOSNotAsyncDefinition TFile.h:64; TFile::kAOSInProgress@ kAOSInProgressDefinition TFile.h:65; TFile::kAOSFailure@ kAOSFailureDefinition TFile.h:64; TFile::WriteStreamerInfovirtual void WriteStreamerInfo()Write the list of TStreamerInfo as a single object in this file The cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:220460,cache,cache,220460,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,['cache'],['cache']
Performance," TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file);. Long64_t Merge(TCollection* list, Option_t* option = """"); Merge all chains in the collection. (NOT IMPLEMENTED). Long64_t Merge(TFile* file, Int_t basketsize, Option_t* option = """"); Merge all the entries in the chain into a new tree in the current file. Note: The ""file"" parameter is *not* the file where the new; tree will be inserted. The new tree is inserted into; gDirectory, which is usually the most recently opened; file, or the directory most recently cd()'d to. If option = ""C"" is given, the compression level for all branches; in the new Tree is set to the file compression level. By default,; the compression level of all branches is the original compression; level in the old trees. If basketsize > 1000, the basket size for all branches of the; new tree will be set to basketsize. Example using the file generated in $ROOTSYS/test/Event; merge two copies of Event.root. gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");. If the chain is expecting the input tree inside a directory,; this directory is NOT created by this routine. So if you do:. TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");. The resulting file will not have subdirectories. In order to; preserve the directory structure do the following instead:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file);. If 'option' contains the word 'fast' the merge will be done without; unzipping or unstreaming the baskets (i.e., a direct copy of the raw; bytes on disk). When 'fast' is specified, 'option' can also contains a; sorting order for the baskets in the output file. There is currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. When using SortBasketsByOffset the baskets are written in; the output file in the same order as in the original file; (i.e. th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TChain.html:39714,Load,Load,39714,root/html528/TChain.html,https://root.cern,https://root.cern/root/html528/TChain.html,1,['Load'],['Load']
Performance," TFileMergeInfo * ; info . ). virtual . Merge the trees in the TList into this tree. ; If info->fIsFirst is true, first we clone this TTree info the directory info->fOutputDirectory and then overlay the new TTree information onto this TTree object (so that this TTree object is now the appropriate to use for further merging).; Returns the total number of entries in the merged tree. ; Reimplemented in TChain.; Definition at line 6927 of file TTree.cxx. ◆ MergeTrees(). TTree * TTree::MergeTrees ; (; TList * ; li, . Option_t * ; options = """" . ). static . Static function merging the trees in the TList into a new tree. ; Trees in the list can be memory or disk-resident trees. The new tree is created in the current directory (memory if gROOT). ; Definition at line 6851 of file TTree.cxx. ◆ MoveReadCache(). void TTree::MoveReadCache ; (; TFile * ; src, . TDirectory * ; dir . ). protected . Move a cache from a file to the current file in dir. ; if src is null no operation is done, if dir is null or there is no current file the cache is deleted. ; Definition at line 6983 of file TTree.cxx. ◆ Notify(). bool TTree::Notify ; (; ). overridevirtual . Function called when loading a new class library. ; Reimplemented from TObject.; Definition at line 7033 of file TTree.cxx. ◆ operator=(). TTree & TTree::operator= ; (; const TTree & ; tt). delete . ◆ OptimizeBaskets(). void TTree::OptimizeBaskets ; (; ULong64_t ; maxMemory = 10000000, . Float_t ; minComp = 1.1, . Option_t * ; option = """" . ). virtual . This function may be called after having filled some entries in a Tree. ; Using the information in the existing branch buffers, it will reassign new branch buffer sizes to optimize time and memory.; The function computes the best values for branch buffer sizes such that the total buffer sizes is less than maxMemory and nearby entries written at the same time. In case the branch compression factor for the data written so far is less than compMin, the compression is disabled.; if option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:184936,cache,cache,184936,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['cache'],['cache']
Performance," TGLAxis::Init ; (; ). Default initialization. ; Definition at line 43 of file TGLAxis.cxx. ◆ IsA(). TClass * TGLAxis::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TAttLine.; Definition at line 71 of file TGLAxis.h. ◆ operator=(). TGLAxis & TGLAxis::operator= ; (; const TGLAxis & ; ). privatedelete . ◆ PaintGLAxis(). void TGLAxis::PaintGLAxis ; (; const Double_t ; p1[3], . const Double_t ; p2[3], . Double_t ; wmin, . Double_t ; wmax, . Int_t ; ndiv, . Option_t * ; opt = """" . ). Paint GL Axis. . p1, p2 : Axis position in the 3D space.; wmin, wmax : Minimum and maximum values along the axis. wmin < wmax.; ndiv : Number of axis divisions. It is an integer in the form ""ttsspp"" where ""tt"" is the number of tertiary divisions, ""ss"" is the number of secondary divisions and ""pp"" the number of primary divisions.; opt : Options. ""N"" - By default the number of divisions is optimized to get a nice labeling. When option ""N"" is given, the number of divisions is not optimized. . Definition at line 88 of file TGLAxis.cxx. ◆ PaintGLAxisBody(). void TGLAxis::PaintGLAxisBody ; (; ). Paint horizontal axis body at position (0,0,0) ; Definition at line 168 of file TGLAxis.cxx. ◆ PaintGLAxisLabels(). void TGLAxis::PaintGLAxisLabels ; (; ). Paint axis labels on the main tick marks. ; Definition at line 255 of file TGLAxis.cxx. ◆ PaintGLAxisTickMarks(). void TGLAxis::PaintGLAxisTickMarks ; (; ). Paint axis tick marks. ; Definition at line 185 of file TGLAxis.cxx. ◆ SetGridLength(). void TGLAxis::SetGridLength ; (; Double_t ; grid). inline . Definition at line 68 of file TGLAxis.h. ◆ SetLabelsAngles(). void TGLAxis::SetLabelsAngles ; (; Double_t ; a1, . Double_t ; a2, . Double_t ; a3 . ). Set labels' angles. ; Definition at line 446 of file TGLAxis.cxx. ◆ SetLabelsOffset(). void TGLAxis::SetLabelsOffset ; (; Double_t ; offset). inline . Definition at line 66 of file TGLAxis.h. ◆ SetLabelsSize(). void TGLAxis::SetLabelsSize ; (; Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAxis.html:8891,optimiz,optimized,8891,doc/master/classTGLAxis.html,https://root.cern,https://root.cern/doc/master/classTGLAxis.html,1,['optimiz'],['optimized']
Performance," TGLLockable; enum  ELock { kUnlocked; , kDrawLock; , kSelectLock; , kModifyLock; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Types inherited from TGLViewerBase; typedef OverlayElmVec_t::iterator OverlayElmVec_i;  ; typedef std::vector< TGLOverlayElement * > OverlayElmVec_t;  ; typedef SceneInfoList_t::iterator SceneInfoList_i;  ; typedef std::list< TGLSceneInfo * > SceneInfoList_t;  ; typedef SceneInfoVec_t::iterator SceneInfoVec_i;  ; typedef std::vector< TGLSceneInfo * > SceneInfoVec_t;  ; typedef void(TGLSceneBase::* SubRender_foo) (TGLRnrCtx &);  ;  Protected Member Functions inherited from TGLViewer; void FadeView (Float_t alpha);  Draw a rectangle (background color and given alpha) across the whole viewport. ;  ; void InitGL ();  Initialise GL state. ;  ; void MakeCurrent () const;  Make GL context current. ;  ; void PostDraw ();  Perform GL work which must be done after each draw. ;  ; void PreDraw ();  Perform GL work which must be done before each draw. ;  ; void SetupCameras (Bool_t reset);  Setup cameras for current bounding box. ;  ; void SetupClipObject () override;  allow simple guide axes labels to be scaled relative to scene units ;  ; void SetViewport (const TGLRect &vp);  ; void SetViewport (Int_t x, Int_t y, Int_t width, Int_t height);  Set viewer viewport (window area) with bottom/left at (x,y), with dimensions 'width'/'height'. ;  ; void SwapBuffers () const;  Swap GL buffers. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGLViewerBase; SceneInfoList_i FindScene (TGLSceneBase *scene);  Find scene-info corresponding to scene. ;  ; void SubRenderScenes (SubRender_foo render_foo);  Call sub-rendering function render_foo on all currently visible scenes. ;  ;  Protected Member Fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:32143,Perform,Perform,32143,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,1,['Perform'],['Perform']
Performance," TGLPerspectiveCamerafPerspectiveCameraYOZ!; TStringfPictureFileName! default file-name for SavePicture(); Float_tfPointScale! size scale for points; TGLViewer::EPushActionfPushAction; TGLRedrawTimer*fRedrawTimer! timer for triggering redraws; Bool_tfReferenceOn! reference marker on?; TGLVertex3fReferencePos! reference position; Bool_tfResetCamerasOnNextUpdatereposition camera on next update; Bool_tfResetCamerasOnUpdatereposition camera on each update; Bool_tTGLViewerBase::fResetSceneInfosOnRenderRequest rebuild of view-specific scene data.; TGLRnrCtx*TGLViewerBase::fRnrCtx; TGLViewerBase::SceneInfoList_tTGLViewerBase::fScenesRegistered scenes.; TGLSelectRecordfSecSelRec! select record from last secondary select (should go to context); TGLSelectRecordfSelRec! select record from last select (should go to context); TGLManipSet*fSelectedPShapeRef!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfSmartRefresh! cache logicals during scene rebuilds; Bool_tfSmoothLines! smooth line edge rendering; Bool_tfSmoothPoints! smooth point edge rendering; Bool_tfStereo! use stereo rendering; Float_tfStereoEyeOffsetFac!; Float_tfStereoFrustumAsymFac!; Float_tfStereoZeroParallax! position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane; Short_tTGLViewerBase::fStyleViewer-style for rendering.; TGLRectfViewport! viewport - drawn area; TGLViewerBase::SceneInfoVec_tTGLViewerBase::fVisScenesVisible scenes.; Float_tTGLViewerBase::fWFLineWOptional override of scene wire-frame line-width; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TGLColorSetfgDefaultColorSet! a shared, default color-set; static Bool_tfgUseDefaultColorSetForNewViewers! name says it all. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewer(TVirtualPad* pad, Int_t x, Int_t y, Int_t width, Int_t height); Construct the viewer object, with following arguments:; 'pad' - external pad ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewer.html:23426,cache,cache,23426,root/html602/TGLViewer.html,https://root.cern,https://root.cern/root/html602/TGLViewer.html,1,['cache'],['cache']
Performance," TGLVector3fAxes[3]! box axes in global frame - cached for speed; TGLVector3fAxesNorm[3]! normalised box axes in global frame - cached for speed; Double_tfDiagonal! max box diagonal - cached for speed; TGLVertex3fVertex[8]! the 8 bounding box vertices; Double_tfVolume! box volume - cached for speed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLBoundingBox(); Construct an empty bounding box. TGLBoundingBox(const TGLVertex3 vertex[8]); Construct a bounding box from provided 8 vertices. TGLBoundingBox(const Double_t vertex[8][3]); Construct a bounding box from provided 8 vertices. TGLBoundingBox(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); Construct an global axis ALIGNED bounding box from provided low/high vertex pair. TGLBoundingBox(const TGLBoundingBox& other); Construct a bounding box as copy of existing one. ~TGLBoundingBox(); Destroy bounding box. void UpdateCache(); Update the internally cached volume and axes vectors - these are retained; for efficiency - many more reads than modifications. void Set(const TGLVertex3 vertex[8]); Set a bounding box from provided 8 vertices. void Set(const Double_t vertex[8][3]); Set a bounding box from provided 8 vertices. void Set(const TGLBoundingBox& other); Set a bounding box from vertices of other. void SetEmpty(); Set bounding box empty - all vertices at (0,0,0). void SetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); Set ALIGNED box from two low/high vertices. Box axes are aligned with; global frame axes that vertices are specified in. void SetAligned(UInt_t nbPnts, const Double_t* pnts); Set ALIGNED box from one or more points. Box axes are aligned with; global frame axes that points are specified in. void MergeAligned(const TGLBoundingBox& other); Expand current bbox so that it includes other's bbox.; This make the bbox axis-aligned. void ExpandAligned(const TGLVertex3& point); Expand current bbox so that it includes the point.; This make",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBoundingBox.html:3694,cache,cached,3694,root/html528/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html528/TGLBoundingBox.html,6,['cache'],['cached']
Performance," TGLVertex3 WorldToViewport(const TGLVertex3& worldVertex, TGLMatrix* modviewMat = 0) const; Convert a 3D world vertex to '3D' viewport (screen) one. The X()/Y(); components of the viewport vertex are the horizontal/vertical pixel; positions. The Z() component is the viewport depth value - for a; default depth range this is 0.0 (at near clip plane) to 1.0 (at far; clip plane). See OpenGL gluProject & glDepth documentation. Camera must have valid frustum cache - call Apply() after last modifcation, before using. TGLVector3 WorldDeltaToViewport(const TGLVertex3& worldRef, const TGLVector3& worldDelta) const; Convert a 3D vector worldDelta (shift) about vertex worldRef to a viewport; (screen) '3D' vector. The X()/Y() components of the vector are the horizontal; vertical pixel deltas. The Z() component is the viewport depth delta - for a; default depth range between 0.0 (at near clip plane) to 1.0 (at far clip plane); See OpenGL gluProject & glDepth documentation. Camera must have valid frustum cache - call Apply(). TGLVertex3 ViewportToWorld(const TGLVertex3& viewportVertex, TGLMatrix* modviewMat = 0) const; Convert a '3D' viewport vertex to 3D world one. The X()/Y() components; of viewportVertex are the horizontal/vertical pixel position. TGLLine3 ViewportToWorld(Double_t viewportX, Double_t viewportY) const; Convert a 2D viewport position to 3D world line - the projection of the; viewport point into 3D space. Line runs from near to far camera clip planes; (the minimum and maximum visible depth). See also; TGLVertex3 TGLCamera::ViewportToWorld(const TGLVertex3 & viewportVertex) const; for 3D viewport -> 3D world vertex conversions.; See also OpenGL gluUnProject & glDepth documentation. Camera must have valid frustum cache - call Apply() after last modifcation, before using. TGLLine3 ViewportToWorld(const TPoint& viewport) const; Convert a 2D viewport position to 3D world line - the projection of the; viewport point into 3D space. Line runs from near to far camera clip ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:10607,cache,cache,10607,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,6,['cache'],['cache']
Performance," TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display the logs. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressLog.h 32203 2010-02-03 18:47:34Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressLog.html:24106,Load,Load,24106,root/html528/TProofProgressLog.html,https://root.cern,https://root.cern/root/html528/TProofProgressLog.html,1,['Load'],['Load']
Performance," TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display the logs. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressLog.h 32203 2010-02-03 18:47:34Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofProgressLog.html:24259,Load,Load,24259,root/html530/TProofProgressLog.html,https://root.cern,https://root.cern/root/html530/TProofProgressLog.html,1,['Load'],['Load']
Performance," TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display the logs. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressLog.h 32203 2010-02-03 18:47:34Z ganis $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofProgressLog.html:24259,Load,Load,24259,root/html532/TProofProgressLog.html,https://root.cern,https://root.cern/root/html532/TProofProgressLog.html,1,['Load'],['Load']
Performance," TGWin32VirtualXProxy, and TGX11.; Definition at line 1882 of file TVirtualX.cxx. ◆ ListFonts(). char ** TVirtualX::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). virtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2260 of file TVirtualX.cxx. ◆ LoadQueryFont(). FontStruct_t TVirtualX::LoadQueryFont ; (; const char * ; font_name). virtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1299 of file TVirtualX.cxx. ◆ LookupString(). void TVirtualX::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). virtual . Converts the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In ""buf"" a null terminated ASCII string is returned representing the string that is currently mapped to the key code.; Parameters. [in]eventspecifies the event structure to be used ; [in]bufreturns the translated characters ; [in]buflenthe length of the buffer ; [in]keysymreturns the ""keysym"" co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:100147,Load,LoadQueryFont,100147,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Load'],['LoadQueryFont']
Performance," TGenCollectionProxy.cxx:201; TGenListProxy::TGenListProxyTGenListProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:193; TGenMapProxyLocaloptimization class.Definition TGenCollectionProxy.cxx:277; TGenMapProxy::TGenMapProxyTGenMapProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:280; TGenMapProxy::~TGenMapProxy~TGenMapProxy() overrideDefinition TGenCollectionProxy.cxx:284; TGenMapProxy::DeleteItemvoid DeleteItem(Bool_t force, void *ptr) const overrideCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:288; TGenSetProxyLocaloptimization class.Definition TGenCollectionProxy.cxx:232; TGenSetProxy::Atvoid * At(UInt_t idx) overrideReturn the address of the value at index 'idx'.Definition TGenCollectionProxy.cxx:243; TGenSetProxy::~TGenSetProxy~TGenSetProxy() overrideDefinition TGenCollectionProxy.cxx:239; TGenSetProxy::TGenSetProxyTGenSetProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:235; TGenVectorBoolProxyLocal optimization class.Definition TGenCollectionProxy.cxx:88; TGenVectorBoolProxy::fLastValueBool_t fLastValueDefinition TGenCollectionProxy.cxx:89; TGenVectorBoolProxy::Atvoid * At(UInt_t idx) overrideReturn the address of the value at index 'idx'.Definition TGenCollectionProxy.cxx:100; TGenVectorBoolProxy::TGenVectorBoolProxyTGenVectorBoolProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:92; TGenVectorBoolProxy::~TGenVectorBoolProxy~TGenVectorBoolProxy() overrideDefinition TGenCollectionProxy.cxx:96; TGenVectorBoolProxy::DeleteItemvoid DeleteItem(Bool_t force, void *ptr) const overrideCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:115; TGenVectorProxyLocal optimization class.Definition TGenCollectionProxy.cxx:39; TGenVectorProxy::DeleteItemvoid DeleteItem(Bool_t force, void *ptr) const overrideCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:66; TGenVectorProxy::Atvoid * At(UInt_t idx) overrideReturn the add",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:87818,optimiz,optimization,87818,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['optimiz'],['optimization']
Performance," TGenVectorBoolProxy(*this);; 745 } else {; 746 return new TGenVectorProxy(*this);; 747 }; 748 }; 749 case ROOT::kSTLlist:; 750 case ROOT::kSTLforwardlist:; 751 return new TGenListProxy(*this);; 752 case ROOT::kSTLmap:; 753 case ROOT::kSTLunorderedmap:; 754 case ROOT::kSTLmultimap:; 755 case ROOT::kSTLunorderedmultimap:; 756 return new TGenMapProxy(*this);; 757 case ROOT::kSTLset:; 758 case ROOT::kSTLunorderedset:; 759 case ROOT::kSTLmultiset:; 760 case ROOT::kSTLunorderedmultiset:; 761 return new TGenSetProxy(*this);; 762 default:; 763 return new TGenCollectionProxy(*this);; 764 }; 765}; 766 ; 767////////////////////////////////////////////////////////////////////////////////; 768/// Proxy initializer; 769 ; 770TGenCollectionProxy *TGenCollectionProxy::Initialize(Bool_t silent) const; 771{; 772 TGenCollectionProxy* p = const_cast<TGenCollectionProxy*>(this);; 773 if ( fValue.load() ) return p;; 774 return p->InitializeEx(silent);; 775}; 776 ; 777////////////////////////////////////////////////////////////////////////////////; 778/// Reset the info gathered from StreamerInfos and value's TClass.; 779Bool_t TGenCollectionProxy::Reset(); 780{; 781 if (fReadMemberWise); 782 fReadMemberWise->Clear();; 783 delete fWriteMemberWise;; 784 fWriteMemberWise = nullptr;; 785 if (fConversionReadMemberWise); 786 fConversionReadMemberWise->clear();; 787 return kTRUE;; 788}; 789 ; 790////////////////////////////////////////////////////////////////////////////////; 791/// Check existence of function pointers; 792 ; 793void TGenCollectionProxy::CheckFunctions() const; 794{; 795 if ( 0 == fSize.call ) {; 796 Fatal(""TGenCollectionProxy"",""No 'size' function pointer for class %s present."",fName.c_str());; 797 }; 798 if ( 0 == fResize ) {; 799 Fatal(""TGenCollectionProxy"",""No 'resize' function for class %s present."",fName.c_str());; 800 }; 801 if ( 0 == fNext.call ) {; 802 Fatal(""TGenCollectionProxy"",""No 'next' function for class %s present."",fName.c_str());; 803 }; 804 if ( 0 == fFirst.cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:23615,load,load,23615,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['load'],['load']
Performance," TGeoElementTable& ); assignment operator. ~TGeoElementTable(); destructor. void AddElement(const char* name, const char* title, Int_t z, Double_t a); Add an element to the table. Obsolete. void AddElement(const char* name, const char* title, Int_t z, Int_t n, Double_t a); Add an element to the table. void AddElement(TGeoElement* elem); Add a custom element to the table. void AddElementRN(TGeoElementRN* elem); Add a radionuclide to the table and map it. void AddIsotope(TGeoIsotope* isotope); Add isotope to the table. void BuildDefaultElements(); Creates the default element table. void ImportElementsRN(); Creates the list of radionuclides. Bool_t CheckTable() const; Checks status of element table. void ExportElementsRN(const char* filename = """"); Export radionuclides in a file. TGeoElement * FindElement(const char* name) const; Search an element by symbol or full name; Exact matching. TGeoIsotope * FindIsotope(const char* name) const; Find existing isotope by name. Not optimized for a big number of isotopes. TGeoElementRN * GetElementRN(Int_t ENDFcode) const; Retreive a radionuclide by ENDF code. TGeoElementRN * GetElementRN(Int_t a, Int_t z, Int_t iso = 0) const; Retreive a radionuclide by a, z, and isomeric state. void Print(Option_t* option = """") const; Print table of elements. The accepted options are:; """" - prints everything by default; ""D"" - prints default elements only; ""I"" - prints isotopes; ""R"" - prints radio-nuclides only if imported; ""U"" - prints user-defined elements only. TGeoElementRN * GetElement(); {return fElem;}. TObjArray * GetElementsRN() const; {return fListRN;}. Bool_t HasDefaultElements() const; {return TObject::TestBit(kETDefaultElements);}. Bool_t HasRNElements() const; {return TObject::TestBit(kETRNElements);}. Int_t GetNelements() const; {return fNelements;}. Int_t GetNelementsRN() const; {return fNelementsRN;}. » Author: Andrei Gheata 17/06/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Las",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoElementTable.html:7812,optimiz,optimized,7812,root/html534/TGeoElementTable.html,https://root.cern,https://root.cern/root/html534/TGeoElementTable.html,3,['optimiz'],['optimized']
Performance," TGeoHalfSpace (const char *name, Double_t *point[3],; Double_t *norm[3]);; 18.3.3 Composite Shapes; Composite shapes are Boolean combinations of two or more shape components. The supported Boolean operations are union (+), intersection (*) and subtraction(-). Composite shapes derive from the base TGeoShape class, therefore providing all shape features: computation of bounding box, finding if a given point is inside or outside the combination, as well as computing the distance to entering/exiting. They can be directly used for creating volumes or used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of basic shape primitives. They have a binary tree internal structure, therefore all shape-related geometry queries are signals propagated from top level down to the final leaves, while the provided answers are assembled and interpreted back at top. This CSG (composite solid geometry) hierarchy is effective for small number of components, while performance drops dramatically for large structures. Building a complete geometry in this style is virtually possible but highly not recommended.; 18.3.3.1 The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer composite shapes, but basic primitives. The figure shows the composite shapes structure. The composite shapes structure. Suppose that A, B, C and D represent basic shapes, we will illustrate how the internal representation of few combinations look",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:915077,perform,performance,915077,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performance']
Performance," TGeoMatrix& mat); Set transformation matrix from TGeo's matrix. Bool_t AcceptElement(TEveElement* el); Check if el can be added to this element. In the base-class version we only make sure the new child is not; equal to this. void AddElement(TEveElement* el); Add el to the list of children. void RemoveElement(TEveElement* el); Remove el from the list of children. void RemoveElementLocal(TEveElement* el); Perform additional local removal of el.; Called from RemoveElement() which does whole untangling.; Put into special function as framework-related handling of; element removal should really be common to all classes and; clearing of local structures happens in between removal; of list-tree-items and final removal.; If you override this, you should also override; RemoveElementsLocal(). void RemoveElementsInternal(); Remove all elements. This assumes removing of all elements can; be done more efficiently then looping over them and removing one; by one. This protected function performs the removal on the; level of TEveElement. void RemoveElements(); Remove all elements. This assumes removing of all elements can; be done more efficiently then looping over them and removing; them one by one. void RemoveElementsLocal(); Perform additional local removal of all elements.; See comment to RemoveElementlocal(TEveElement*). void ProjectChild(TEveElement* el, Bool_t same_depth = kTRUE); If this is a projectable, loop over all projected replicas and; add the projected image of child 'el' there. This is supposed to; be called after you add a child to a projectable after it has; already been projected.; You might also want to call RecheckImpliedSelections() on this; element or 'el'. If 'same_depth' flag is true, the same depth as for parent object; is used in every projection. Otherwise current depth of each; relevant projection-manager is used. void ProjectAllChildren(Bool_t same_depth = kTRUE); If this is a projectable, loop over all projected replicas and; add the projected image ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:24731,perform,performs,24731,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,6,['perform'],['performs']
Performance," TGeoShape *clip1, *clip2, ...; One might switch between several clipping shapes. Note that these shapes are considered defined in the current MARS. Composite shapes may be used.; 2. gGeoManager->SetClippingShape(clip1);; One can activate or deactivate clipping at any time: gGeoManager->SetClipping(flag);. Perform ray-tracing:gGeoManager->GetTopVolume()->Raytrace();. One can redo the steps 2-3 as many times as needed. Let us look how the rootgeom example looks clipped with a tube. Ray-tracing example with box-clipping. 18.8 Representing Misalignments of the Ideal Geometry; The ideal positioning of a detector does not match its position in the experimental hall. This generally happens not only for the detector modules, but also for their components. The accurate knowledge of the detector real misalignments can be extremely important for getting close to its designed resolution and the expected tracking efficiency. TGeo offers tools for representing positioning misalignments, applying them to the ideal geometry and performing navigation under these conditions. Detector tracking algorithms can then directly query the geometry for navigation purposes or for retrieving actual misalignment information.; 18.8.1 Physical Nodes; Physical nodes are the actual “touchable” objects in the geometry, representing actually a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. The number of physical nodes is given by the total number of possible of branches in the geometry hierarchy. In case of detector geometries and specially for calorimeters this number can be of the order 106-109, therefore it is impossible to create all physical nodes as objects in memory. In TGeo, physical nodes are represented by the class TGeoPhysicalNode and can be created on demand for alignment purposes:; TGeoPhysicalNode(const char* path); The knowledge of the path to the objects that need to be misaligned is essential since there is no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1013501,perform,performing,1013501,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performing']
Performance," TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:27872,load,load,27872,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['load'],['load']
Performance," TH1D.; The projection is made from the cells along the Z axis; ranging from ixmin to ixmax and iymin to iymax included.; By default, bins 1 to nx and 1 to ny are included; By default, underflow and overflow are included in both the X and Y axis.; By Setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded; By setting iymin=1 and/or iymax=NbinsY the underflow and/or overflow in Y will be excluded. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad,; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * DoProject1D(const char* name, const char* title, int imin1, int imax1, int imin2, int imax2, const TAxis* projAxis, const TAxis* axis1, const TAxis* axis2, Option_t* option) const; internal methdod performing the projection to 1D histogram; called from TH3::Project3D. TH1D * DoProject1D(const char* name, const char* title, const TAxis* projAxis, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal methdod performing the projection to 1D histogram; called from other TH3::DoProject1D. TH2D * DoProject2D(const char* name, const char* title, const TAxis* projX, const TAxis* projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal method performing the projection to a 2D histogram; called from TH3::Project3D. TH1 * Project3D(Option_t* option = ""x"") const; Project a 3-d histogram into 1 or 2-d histograms depending on the; option parameter; option may contain a combination of the characters x,y,z,e; option = ""x"" return the x projection into a TH1D histogram; option = ""y"" return the y projection into a TH1D histogram; option = ""z"" return the z projection into a TH1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:45820,perform,performing,45820,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,2,['perform'],['performing']
Performance," THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41. 6 - A member function with parameters of a general C++ class; A TF1 can be created in this case from any member function of a class which has the signature of (double * , double *) and returning a double.; Example:; class MyFunction {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:8259,perform,performed,8259,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['perform'],['performed']
Performance," THttpServer(""http:8080"");; TNamed* n1 = new TNamed(""obj"", ""title"");; serv->Register(""subfolder"", n1);; One could request a JSON representation of such object with the command:; [shell] wget http://localhost:8080/Objects/subfolder/obj/root.json; Then, its representation will look like:; {; ""_typename"" : ""TNamed"",; ""fUniqueID"" : 0,; ""fBits"" : 0,; ""fName"" : ""obj"",; ""fTitle"" : ""title""; }; The following requests can be performed:. Name; Description. root.bin; binary data produced by object streaming with TBufferFile. root.json; ROOT JSON representation for object and objects members. file.root; Creates TMemFile with the only object, from ROOT 6.32. root.xml; ROOT XML representation. root.png; PNG image (if object drawing implemented). root.gif; GIF image. root.jpeg; JPEG image. exe.json; method execution in the object. exe.bin; method execution, return result in binary form. cmd.json; command execution. item.json; item (object) properties, specified on the server. multi.json; perform several requests at once. multi.bin; perform several requests at once, return result in binary form. All data will be automatically zipped if ‘.gz’ extension is appended. Like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/root.json.gz; If the access to the server is restricted with htdigest, it is recommended to use the curl program since only curl correctly implements such authentication method. The command will look like:; [shell] curl --user ""accout:password"" http://localhost:8080/Objects/subfolder/obj/root.json --digest -o root.json; 1.9.1 Objects data access in JSON format; Request root.json implemented with TBufferJSON class. TBufferJSON generates such object representation, which could be directly used in JSROOT for drawing. root.json request returns either complete object or just object member like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/fTitle/root.json; The result will be: ""title"".; For the root.json request one could specify the ‘compact’ parameter,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:14663,perform,perform,14663,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['perform'],['perform']
Performance," TInterpreter::EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; info",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:19327,load,loaded,19327,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,8,['load'],"['load', 'loaded', 'loading']"
Performance, TList::First for the intended behavior. ; Reimplemented from TList.; Definition at line 251 of file TViewPubFunctions.cxx. ◆ FirstLink(). TObjLink * TViewPubFunctions::FirstLink ; (; ); const. overrideprotectedvirtual . FirstLink is not allowed in this class. ; See TList::FirstLink for the intended behavior. ; Reimplemented from TList.; Definition at line 261 of file TViewPubFunctions.cxx. ◆ GetListOfClasses(). virtual const TList * TViewPubFunctions::GetListOfClasses ; (; ); const. inlinevirtual . Definition at line 45 of file TViewPubFunctions.h. ◆ GetObjectRef(). TObject ** TViewPubFunctions::GetObjectRef ; (; const TObject * ; obj); const. overrideprotectedvirtual . GetObjectRef is not allowed in this class. ; See TList::GetObjectRef for the intended behavior. ; Reimplemented from TList.; Definition at line 271 of file TViewPubFunctions.cxx. ◆ GetSize(). Int_t TViewPubFunctions::GetSize ; (; ); const. overridevirtual . Return the total number of public methods (currently loaded in the list of functions) in this class and all its base classes. ; Reimplemented from TCollection.; Definition at line 281 of file TViewPubFunctions.cxx. ◆ Last(). TObject * TViewPubFunctions::Last ; (; ); const. overrideprotectedvirtual . Last is not allowed in this class. ; See TList::Last for the intended behavior. ; Reimplemented from TList.; Definition at line 310 of file TViewPubFunctions.cxx. ◆ LastLink(). TObjLink * TViewPubFunctions::LastLink ; (; ); const. overrideprotectedvirtual . LastLink is not allowed in this class. ; See TList::LastLink for the intended behavior. ; Reimplemented from TList.; Definition at line 320 of file TViewPubFunctions.cxx. ◆ Load(). void TViewPubFunctions::Load ; (; ). Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ; Definition at line 298 of file TViewPubFunctions.cxx. ◆ MakeIterator(). TIterator * TViewPubFunctions::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Return a ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubFunctions.html:26505,load,loaded,26505,doc/master/classTViewPubFunctions.html,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html,1,['load'],['loaded']
Performance," TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVARegressionApplication. ; ; ==> Start TMVARegressionApplication; : Booking ""BDTG method"" of type ""BDT"" from datasetreg/weights/TMVARegression_BDTG.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_BDTG.weights.xml; <HEADER> DataSetInfo : [Default] : Added class ""Regression""; : Booked classifier ""BDTG"" of type: ""BDT""; : Booking ""DNN_CPU method"" of type ""DL"" from datasetreg/weights/TMVARegression_DNN_CPU.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_DNN_CPU.weights.xml; : Booked classifier ""DNN_CPU"" of type: ""DL""; : Booking ""KNN method"" of type ""KNN"" from datasetreg/weights/TMVARegression_KNN.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_KNN.weights.xml; : Creating kd-tree with 1000 events; : Computing scale factor for 1d distributions: (ifrac, bottom, top) = (80%, 10%, 90%); <HEADER> ModulekNN : Optimizing tree for 2 variables with 1000 values; : <Fill> Class 1 has 1000 events; : Booked classifier ""KNN"" of type: ""KNN""; : Booking ""LD method"" of type ""LD"" from datasetreg/weights/TMVARegression_LD.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_LD.weights.xml; : Booked classifier ""LD"" of type: ""LD""; : Booking ""PDEFoam method"" of type ""PDEFoam"" from datasetreg/weights/TMVARegression_PDEFoam.weights.xml.; : Reading weight file: datasetreg/weights/TMVARegression_PDEFoam.weights.xml; : Read foams from file: datasetreg/weights/TMVARegression_PDEFoam.weights_foams.root; : Booked classifier ""PDEFoam"" of type: ""PDEFoam""; --- TMVARegressionApp : Using input file: ./files/tmva_reg_example.root; --- Select signal sample; : Rebuilding Dataset Default; --- End of event loop: Real time 0:00:03, CP time 3.170; --- Created root file: ""TMVARegApp.root"" containing the MVA output histograms; ==> TMVARegressionApplication is done!; ; ; #include <cstdlib>; #include <vector>; #include <iostream>; #include",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C.html:1330,Optimiz,Optimizing,1330,doc/master/TMVARegressionApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C.html,1,['Optimiz'],['Optimizing']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::IMetric calculates the ""distance"" between two points; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo samp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TMVA_Index.html:1152,perform,performs,1152,root/html526/TMVA_Index.html,https://root.cern,https://root.cern/root/html526/TMVA_Index.html,1,['perform'],['performs']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA_Index.html:1154,perform,performs,1154,root/html534/TMVA_Index.html,https://root.cern,https://root.cern/root/html534/TMVA_Index.html,1,['perform'],['performs']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA_Index.html:1154,perform,performs,1154,root/html530/TMVA_Index.html,https://root.cern,https://root.cern/root/html530/TMVA_Index.html,2,['perform'],['performs']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA_Index.html:1139,perform,performs,1139,root/html528/TMVA_Index.html,https://root.cern,https://root.cern/root/html528/TMVA_Index.html,1,['perform'],['performs']
Performance," TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN.; Definition at line 520 of file MethodBase.h. ◆ MakeClassSpecificHeader(). virtual void TMVA::MethodBase::MakeClassSpecificHeader ; (; std::ostream & ; , . const TString & ; = """" . ); const. inlineprotectedvirtual . Reimplemented in TMVA::MethodBDT, TMVA::MethodCrossValidation, TMVA::MethodCFMlpANN, and TMVA::MethodLikelihood.; Definition at line 523 of file MethodBase.h. ◆ MethodBaseDir(). TDirectory * TMVA::MethodBase::MethodBaseDir ; (; ); const. returns the ROOT directory where all instances of the corresponding MVA method are stored ; Definition at line 2020 of file MethodBase.cxx. ◆ NoErrorCalc(). void TMVA::MethodBase::NoErrorCalc ; (; Double_t *const ; err, . Double_t *const ; errUpper . ). protected . Definition at line 837 of file MethodBase.cxx. ◆ OptimizeTuningParameters(). std::map< TString, Double_t > TMVA::MethodBase::OptimizeTuningParameters ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). virtual . call the Optimizer with the set of parameters and ranges that are meant to be tuned. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 623 of file MethodBase.cxx. ◆ PrintHelpMessage(). void TMVA::MethodBase::PrintHelpMessage ; (; ); const. virtual . prints out method-specific help method ; Implements TMVA::IMethod.; Definition at line 3264 of file MethodBase.cxx. ◆ ProcessBaseOptions(). void TMVA::MethodBase::ProcessBaseOptions ; (; ). private . the option string is decoded, for available options see ""DeclareOptions"" ; Definition at line 540 of file MethodBase.cxx. ◆ ProcessOptions(). virtual void TMVA::MethodBase::ProcessOptions ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:64208,Optimiz,OptimizeTuningParameters,64208,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['Optimiz'],['OptimizeTuningParameters']
Performance," TMVA::MethodMLP::ComputeDEDw ; (; ). private . Definition at line 697 of file MethodMLP.cxx. ◆ ComputeEstimator(). Double_t TMVA::MethodMLP::ComputeEstimator ; (; std::vector< Double_t > & ; parameters). this function is called by GeneticANN for GA optimization ; Definition at line 1393 of file MethodMLP.cxx. ◆ DecaySynapseWeights(). void TMVA::MethodMLP::DecaySynapseWeights ; (; Bool_t ; lateEpoch). private . decay synapse weights in last 10 epochs, lower learning rate even more to find a good minimum ; Definition at line 1208 of file MethodMLP.cxx. ◆ DeclareOptions(). void TMVA::MethodMLP::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; know options:. TrainingMethod <string> Training method available values are:; BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs; BPMode <string> Back-propagation learning mode available values are:; sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events . Reimplemented from TMVA::MethodANNBase.; Definition at line 195 of file MethodMLP.cxx. ◆ DeclFileName(). static const char * TMVA::MethodMLP::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 219 of file MethodMLP.h. ◆ DerivDir(). Double_t TMVA::MethodMLP::DerivDir ; (; TMatrixD & ; Dir). private . Definition at line 825 of file MethodMLP.cxx. ◆ EstimatorFunction(). Double_t TMVA::MethodMLP::EstimatorFunction ; (; std::vector< Double_t > & ; parameters). virtual . interface to the estimate ; Implements TMVA::IFitterTarget.; Definition at line 1385 of file MethodMLP.cxx. ◆ GeneticMinimize(). void TMVA::MethodMLP::GeneticMinimize ; (; ). private . create genetics class similar t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:41892,perform,performed,41892,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['perform'],['performed']
Performance," TMap*TVirtualPacketizer::fSlaveStatsslave status, keyed by correspondig TSlave; TTimeTVirtualPacketizer::fStartTimetime offset; Bool_tTVirtualPacketizer::fStopTermination of Process() requested?; Float_tTVirtualPacketizer::fTimeUpdttime between updates; Long64_tTVirtualPacketizer::fTotalEntriestotal number of entries to be distributed;; TVirtualPacketizer::EUseEstOptTVirtualPacketizer::fUseEstOptControl usage of estimated values for the progress info; Bool_tTVirtualPacketizer::fValidConstructed properly?; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstAverage; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstCurrent; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstOff. private:. TList*fActivenodes with unfinished files; Bool_tfDefMaxWrkNodeWhether the default is used for the max workers per node; TList*fFileNodesnodes with files; Bool_tfHeuristicPSizWhether the packet size is calculated heuristically; Int_tfMaxPerfIdxmaximum of our slaves' performance index; Long_tfMaxSlaveCntmaximum number of workers per filenode (Long_t to avoid; Int_tfPacketAsAFractionused to calculate the packet size; Long64_tfPacketSizeglobal base packet size; TList*fPacketsall processed packets; TList*fUnAllocatednodes with unallocated files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizer(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizer(); Destructor. Int_t AddWorkers(TList* workers); Adds new workers. Returns the number of workers added, or -1 on failure. void RemoveUnAllocNode(TPacketizer::TFileNode* ); Remove unallocated node. void RemoveActive(TPacketizer::TFileStat* file); Remove file from the list of actives. void RemoveActiveNode(TPacketizer::TFileNode* ); Remove node from the list of actives. void Reset(); Reset the internal datastructure for packet distribution. void ValidateFiles(TDSet* dset, TList* slaves, Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPacketizer.html:10983,perform,performance,10983,root/html604/TPacketizer.html,https://root.cern,https://root.cern/root/html604/TPacketizer.html,1,['perform'],['performance']
Performance," TMinuit::fVERTppDouble_t * fVERTppDefinition TMinuit.h:122; TMinuit::fVERTsDouble_t * fVERTsDefinition TMinuit.h:121; TMinuit::fXsDouble_t * fXsDefinition TMinuit.h:78; TMinuit::fIcomndInt_t fIcomndDefinition TMinuit.h:144; TMinuit::mncontvirtual void mncont(Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf)Find points along a contour where FCN is minimum.Definition TMinuit.cxx:1395; TMinuit::fMaxintInt_t fMaxintDefinition TMinuit.h:40; TMinuit::fIsyssaInt_t fIsyssaDefinition TMinuit.h:133; TMinuit::fCfromTString fCfromDefinition TMinuit.h:166; TMinuit::mninitvirtual void mninit(Int_t i1, Int_t i2, Int_t i3)Main initialization member function for MINUIT.Definition TMinuit.cxx:4526; TMinuit::fDirinDouble_t * fDirinDefinition TMinuit.h:77; TMinuit::fLreporBool_t fLreporDefinition TMinuit.h:158; TMinuit::fCONTgccDouble_t * fCONTgccDefinition TMinuit.h:100; TMinuit::fEpsma2Double_t fEpsma2Definition TMinuit.h:57; TMinuit::mnseekvirtual void mnseek()Performs a rough (but global) minimization by monte carlo search.Definition TMinuit.cxx:6818; TMinuit::fVERTqDouble_t * fVERTqDefinition TMinuit.h:120; TMinuit::mncalfvirtual void mncalf(Double_t *pvec, Double_t &ycalf)Transform FCN to find further minima.Definition TMinuit.cxx:1070; TMinuit::Commandvirtual Int_t Command(const char *command)Execute a Minuit command.Definition TMinuit.cxx:626; TMinuit::mnpoutvirtual void mnpout(Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) constProvides the user with information concerning the current status.Definition TMinuit.cxx:6247; TMinuit::fEmptyInt_t fEmptyDefinition TMinuit.h:38; TMinuit::fYdircrDouble_t fYdircrDefinition TMinuit.h:66; TMinuit::fMaxpar1Int_t fMaxpar1Definition TMinuit.h:47; TMinuit::fMaxpar5Int_t fMaxpar5Definition TMinuit.h:44; TMinuit::fCOMDplistDouble_t * fCOMDplistDefinition TMinuit.h:123; TMinuit::fLnolimBool_t fLnolimDefinition TMinuit.h:160; TMinuit::Evalvirtual Int_t Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:266890,Perform,Performs,266890,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['Perform'],['Performs']
Performance," TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsString.html:10397,optimiz,optimizeCacheMode,10397,root/html534/RooAbsString.html,https://root.cern,https://root.cern/root/html534/RooAbsString.html,1,['optimiz'],['optimizeCacheMode']
Performance," TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static TStringTString::UItoa(UInt_t value, Int_t base); static TStringTString::ULLtoa(ULong64_t value, Int_t base); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidDrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. charfHotCharhot character; Int_tfHotPosposition of hot character; GContext_tfLastGCcontext used during last drawing; Int_tfOff1variable used during drawing (cache); Int_tfOff2variable used during drawing (cache). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHotString(const char* s); Create a hot string. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw a hot string and underline the hot character. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a hot string in a column with width w. If string is longer than; w wrap it to next line. void DrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw the underline under the hot character. TGHotString(const char* s). Int_t GetHotChar() const; { return fHotChar; }. Int_t GetHotPos() const; { return fHotPos; }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-04-28 16:43; This page has been automatically generated. For comments or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGHotString.html:8721,cache,cache,8721,root/html534/TGHotString.html,https://root.cern,https://root.cern/root/html534/TGHotString.html,2,['cache'],['cache']
Performance," TObjLink *lnk = LinkAt(idx);; 313 if (!lnk); 314 TList::AddLast(obj);; 315 else if (lnk == fFirst.get()); 316 TList::AddFirst(obj);; 317 else {; 318 NewLink(obj, lnk->fPrev.lock());; 319 fSize++;; 320 Changed();; 321 }; 322}; 323 ; 324////////////////////////////////////////////////////////////////////////////////; 325/// Returns the object after object obj. Obj is found using the; 326/// object's IsEqual() method. Returns 0 if obj is last in list.; 327 ; 328TObject *TList::After(const TObject *obj) const; 329{; 330 R__COLLECTION_WRITE_GUARD();; 331 ; 332 TObjLink *t;; 333 ; 334 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 335 ; 336 auto cached = fCache.lock();; 337 if (cached.get() && cached->GetObject() && cached->GetObject()->IsEqual(obj)) {; 338 t = cached.get();; 339 ((TList*)this)->fCache = cached->fNext; //cast const away, fCache should be mutable; 340 } else {; 341 Int_t idx;; 342 t = FindLink(obj, idx);; 343 if (t) ((TList*)this)->fCache = t->fNext;; 344 }; 345 ; 346 if (t && t->Next()); 347 return t->Next()->GetObject();; 348 else; 349 return nullptr;; 350}; 351 ; 352////////////////////////////////////////////////////////////////////////////////; 353/// Returns the object at position idx. Returns 0 if idx is out of range.; 354 ; 355TObject *TList::At(Int_t idx) const; 356{; 357 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 358 R__COLLECTION_WRITE_GUARD();; 359 ; 360 TObjLink *lnk = LinkAt(idx);; 361 if (lnk) return lnk->GetObject();; 362 return nullptr;; 363}; 364 ; 365////////////////////////////////////////////////////////////////////////////////; 366/// Returns the object before object obj. Obj is found using the; 367/// object's IsEqual() method. Returns 0 if obj is first in list.; 368 ; 369TObject *TList::Before(const TObject *obj) const; 370{; 371 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 372 R__COLLECTION_WRITE_GUARD();; 373 ; 374 TObjLink *t;; 375 ; 376 auto cached = fCache.lock();; 377 if (cached.get() && cached->GetObject() && c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:9838,cache,cached,9838,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['cache'],['cached']
Performance," TObject*TDirectory::Remove(TObject*); virtual Int_tReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidSeek(Long64_t, TFile::ERelativeTo = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); static voidTXMLSetup::SetNameSpaceBase(const char* namespacebase); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlySt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXMLFile.html:14296,cache,cache,14296,root/html532/TXMLFile.html,https://root.cern,https://root.cern/root/html532/TXMLFile.html,1,['cache'],['cache']
Performance," TObject*TDirectory::Remove(TObject*); virtual Int_tReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidSeek(Long64_t, TFile::ERelativeTo = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); static voidTXMLSetup::SetNameSpaceBase(const char* namespacebase); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLFile.html:14375,cache,cache,14375,root/html534/TXMLFile.html,https://root.cern,https://root.cern/root/html534/TXMLFile.html,3,['cache'],['cache']
Performance," TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). Int_t AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket; Returns 0 branch added or already included; -1 on error. Int_t AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch added or already included; -1 on error. Int_t DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch dropped or not in cache; -1 on error. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:22816,cache,cache,22816,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['cache'],['cache']
Performance, TObject::EStatusBitsTObject::kMustCleanup; static TTree::ESetBranchAddressStatusTTree::kNoCheck; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TTree::(anonymous)TTree::kSplitCollectionOfPointers; static TTree::ESetBranchAddressStatusTTree::kVoidPtr; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TTree::fAliasesList of aliases for expressions based on the tree branches.; Long64_tTTree::fAutoFlushAutoflush tree when fAutoFlush entries written; Long64_tTTree::fAutoSaveAutosave tree when fAutoSave bytes produced; TBranchRef*TTree::fBranchRefBranch supporting the TRefTable (if any); TObjArrayTTree::fBranchesList of Branches; Bool_tTTree::fCacheDoAutoInit! true if cache auto creation or resize check is needed; Long64_tTTree::fCacheSize! Maximum size of file buffers; Bool_tTTree::fCacheUserSet! true if the cache setting was explicitly given by user; Long64_tTTree::fChainOffset! Offset of 1st entry of this Tree in a TChain; TList*TTree::fClones! List of cloned trees which share our addresses; Long64_t*TTree::fClusterRangeEnd[fNClusterRange] Last entry of a cluster range.; Long64_t*TTree::fClusterSize[fNClusterRange] Number of entries in each cluster for a given range.; Int_tTTree::fDebug! Debug level; Long64_tTTree::fDebugMax! Last entry number to debug; Long64_tTTree::fDebugMin! First entry number to debug; Int_tTTree::fDefaultEntryOffsetLenInitial Length of fEntryOffset table in the basket buffers; TDirectory*TTree::fDirectory! Pointer to directory holding this tree; Long64_tTTree::fEntriesNumber of entries; TEntryList*TTree::fEntryList! Pointer to event selection list (if one); Long64_tTTree::fEstimateNumber of entries to estimate histogram limits; TEventList*TTree::fEventList! Pointer to event select,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THbookTree.html:23986,cache,cache,23986,root/html602/THbookTree.html,https://root.cern,https://root.cern/root/html602/THbookTree.html,2,['cache'],['cache']
Performance," TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static RooExpensiveObjectCache*_instance!; map<TString,RooExpensiveObjectCache::ExpensiveObject*>_map; Int_t_nextUID. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExpensiveObjectCache(); Constructor. RooExpensiveObjectCache(const RooExpensiveObjectCache& ); Copy constructor. ~RooExpensiveObjectCache(); Destructor. RooExpensiveObjectCache& instance(); Return reference to singleton instance. void cleanup(); Static function called by RooSentinel atexit() handler to cleanup at end of program. Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, const RooArgSet& params); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExpensiveObjectCache.html:7265,cache,cacheObject,7265,root/html602/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html602/RooExpensiveObjectCache.html,4,['cache'],"['cache', 'cacheObject']"
Performance," TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TBuffer::EModeTBuffer::kRead; static TObject::(anonymous)TObject::kSingleKey; static TBufferFile::(anonymous)kStreamedMemberWise; static TBufferFile::(anonymous)kTextBasedStreaming; static TBufferFile::(anonymous)kUser1; static TBufferFile::(anonymous)kUser2; static TBufferFile::(anonymous)kUser3; static TBuffer::EModeTBuffer::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. char*TBuffer::fBufCurCurrent position in buffer; char*TBuffer::fBufMaxEnd of buffer; Int_tTBuffer::fBufSizeSize of buffer; char*TBuffer::fBufferBuffer used to store objects; TBuffer::CacheList_tTBuffer::fCacheStackStack of pointers to the cache where to temporarily store the value of 'missing' data members; TExMap*fClassMapMap containing object,class pairs for reading; Int_tfDisplacementValue to be added to the map offsets; TStreamerInfo*fInfoPointer to TStreamerInfo object writing/reading the buffer; TBufferFile::InfoList_tfInfoStackStack of pointers to the TStreamerInfos; TExMap*fMapMap containing object,offset pairs for reading/writing; Int_tfMapCountNumber of objects or classes in map; Int_tfMapSizeDefault size of map; Bool_tTBuffer::fModeRead or write mode; TObject*TBuffer::fParentPointer to parent object owning this buffer; UShort_tfPidOffsetOffset to be added to the pid index in this key/buffer.; ReAllocCharFun_tTBuffer::fReAllocFunc! Realloc function to be used when extending the buffer.; Int_tTBuffer::fVersionBuffer format version; static Int_tfgMapSizeDefault map size for all TBuffer objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBufferFile(TBuffer::EMode mode); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. By default the I/O buffer has a size of; TBuffer::kInitialSize (1024) bytes. TBufferFile(TBuffer::EMode mode, Int_t bufsiz); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferFile.html:18390,cache,cache,18390,root/html602/TBufferFile.html,https://root.cern,https://root.cern/root/html602/TBufferFile.html,2,['cache'],['cache']
Performance," TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TObjArray fAliases;  ! List of TTreeFormula for each alias used. ;  ; std::vector< std::string > fAliasesUsed;  ! List of aliases used during the parsing of the expression. ;  ; TAxis * fAxis;  ! pointer to histogram axis if this is a string ;  ; TObjArray fBranches;  ! List of branches to read. Similar to fLeaves but duplicates are zeroed out. ;  ; Int_t fCodes [kMAXCODES];  List of leaf numbers referenced in formula. ;  ; LongDouble_t * fConstLD;  ! local version of fConsts able to store bigger numbers ;  ; Int_t fCumulSizes [kMAXCODES][kMAXFORMDIM];  Accumulated sizes of lower dimensions for each leaf after variable dimensions has been calculated. ;  ; TObjArray fDataMembers;  ! List of leaf data members ;  ; bool fDidBooleanOptimization;  ! True if we executed one boolean optimization since the last time instance number 0 was evaluated ;  ; TList * fDimensionSetup;  ! list of dimension setups, for delayed creation of the dimension information. ;  ; TObjArray fExternalCuts;  ! List of TCutG and TEntryList used in the formula ;  ; Int_t fFixedSizes [kMAXCODES][kMAXFORMDIM];  Physical sizes of lower dimensions for each leaf. ;  ; bool fHasCast;  Record whether the formula contain a cast operation or not. ;  ; UChar_t fHasMultipleVarDim [kMAXCODES];  True if the corresponding variable is an array with more than one variable dimension. ;  ; Int_t fIndexes [kMAXCODES][kMAXFORMDIM];  Index of array selected by user for each leaf. ;  ; TObjArray fLeafNames;  List of TNamed describing leaves. ;  ; TObjArray fLeaves;  ! List of leaf used in this formula. ;  ; Int_t * fLookupType;  [fNindex] Array indicating how each leaf should be looked-up ;  ; TTreeFormulaManager * fManager;  ! The dimension coordinator. ;  ; TObjArray fMethods;  ! List of leaf method calls ;  ; Int_t fMultiplicity; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:27994,optimiz,optimization,27994,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['optimiz'],['optimization']
Performance," TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); virtual~TPacketizerAdaptive(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAddProcessed(TSlave* sl, TProofProgressStatus* st, Double_t latency, TList** listOfMissingFiles = 0); virtual Int_tTVirtualPacketizer::AddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Int_tCalculatePacketSize(TObject* slstat, Long64_t cachesz, Int_t learnent); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizerAdaptive.html:1504,latency,latency,1504,root/html534/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html534/TPacketizerAdaptive.html,2,"['cache', 'latency']","['cachesz', 'latency']"
Performance," TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); virtual~TPacketizerAdaptive(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAddProcessed(TSlave* sl, TProofProgressStatus* st, Double_t latency, TList** listOfMissingFiles = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Int_tCalculatePacketSize(TObject* slstat, Long64_t cachesz, Int_t learnent); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPacketizerAdaptive.html:1504,latency,latency,1504,root/html528/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html528/TPacketizerAdaptive.html,6,"['cache', 'latency']","['cachesz', 'latency']"
Performance," TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; namechar name[80]Definition TGX11.cxx:110; TObject.h; TPyReturn.h; TObjectMother of all ROOT objects.Definition TObject.h:41; TPyReturnDefinition TPyReturn.h:30; TPythonAccessing the Python interpreter from C++.Definition TPython.h:44; TPython::ExecScriptstatic void ExecScript(const char *name, int argc=0, const char **argv=nullptr)Execute a python stand-alone script, with argv CLI arguments.Definition TPython.cxx:381; TPython::Importstatic Bool_t Import(const char *name)Import the named python module and create Cling equivalents for its classes and methods.Definition TPython.cxx:237; TPython::LoadMacrostatic void LoadMacro(const char *name)Execute the give python script as if it were a macro (effectively an execfile in main),...Definition TPython.cxx:305; TPython::Execstatic Bool_t Exec(const char *cmd, std::any *result=nullptr, std::string const &resultName=""_anyresult"")Executes a Python command within the current Python environment.Definition TPython.cxx:425; TPython::Evalstatic const TPyReturn Eval(const char *expr) R__DEPRECATED(6Evaluate a python expression (e.g.Definition TPython.cxx:465; TPython::Initializestatic Bool_t Initialize()Initialization method: setup the python interpreter and load the ROOT module.Definition TPython.cxx:137; bool; ROOT::Internal::SwapWithObjAtAddrvoid SwapWithObjAtAddr(T &a, std::intptr_t b)Definition TPython.h:39; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. bindingstpythonincTPython.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8h_source.html:5072,load,load,5072,doc/master/TPython_8h_source.html,https://root.cern,https://root.cern/doc/master/TPython_8h_source.html,1,['load'],['load']
Performance," TPrincipal object is filled with normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" generate standard histograms; If option ""p"" and ""c"" generate code of conversion functions. return a pointer to the TPrincipal object. It is the user responsibility to delete this object.; The option default value is ""np""; See TTreePlayer::DrawSelect for explanation of the other parameters. ; Implements TVirtualTreePlayer.; Definition at line 2015 of file TTreePlayer.cxx. ◆ Process() [1/2]. Long64_t TTreePlayer::Process ; (; const char * ; filename, . Option_t * ; option, . Long64_t ; nentries, . Long64_t ; firstentry . ). overridevirtual . Process this tree executing the TSelector code in the specified filename. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success.; The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector, where TSelector has the following member functions:. Begin(): called every time a loop on the tree starts, a convenient place to create your histograms.; SlaveBegin(): called after Begin(), when on PROOF called only on the slave servers.; Process(): called for each event, in this function you decide what to read and fill your histograms.; SlaveTerminate: called at the end of the loop on the tree, when on PROOF called only on the slave servers.; Terminate(): called at the end of the loop on the tree, a convenient place to draw/fit your histograms. If filename is of the form file.C, the file will be interpreted. If filename is of the form file.C++, the file file.C will be compiled and dynamically loaded.; If filename is of the form file.C+, the file file.C will be compiled and dynamically loaded. At next call, if file.C is older than file.o and file.so, the file.C is not compiled, only file.so is loaded. NOTE 1; It may be more interesting to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:39543,load,loaded,39543,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['load'],['loaded']
Performance," TProof::RestoreActiveList ; (; ). private . Restore saved list of active workers. ; Definition at line 11557 of file TProof.cxx. ◆ Retrieve() [1/2]. Int_t TProof::Retrieve ; (; const char * ; ref, . const char * ; path = 0 . ). Send retrieve request for the query specified by ref. ; If path is defined save it to path. Generic method working for all queries known by the server. ; Definition at line 5967 of file TProof.cxx. ◆ Retrieve() [2/2]. Int_t TProof::Retrieve ; (; Int_t ; qry, . const char * ; path = 0 . ). Send retrieve request for the qry-th query in fQueries. ; If path is defined save it to path. ; Definition at line 5948 of file TProof.cxx. ◆ SaveActiveList(). void TProof::SaveActiveList ; (; ). private . Save current list of active workers. ; Definition at line 11542 of file TProof.cxx. ◆ SaveInputData(). Int_t TProof::SaveInputData ; (; TQueryResult * ; qr, . const char * ; cachedir, . TString & ; emsg . ). staticprotected . Save input data file from 'cachedir' into the sandbox or create a the file with input data objects. ; Definition at line 12311 of file TProof.cxx. ◆ SavePerfTree(). Int_t TProof::SavePerfTree ; (; const char * ; pf = 0, . const char * ; ref = 0 . ). Save performance information from TPerfStats to file 'pf'. ; If 'ref' is defined, do it for query 'ref'. Return 0 on sucecss, -1 in case of any error ; Definition at line 12646 of file TProof.cxx. ◆ SaveWorkerInfo(). void TProof::SaveWorkerInfo ; (; ). protectedvirtual . Save information about the worker set in the file .workers in the working dir. ; Called each time there is a change in the worker setup, e.g. by TProof::MarkBad(). ; Definition at line 11808 of file TProof.cxx. ◆ SendCommand(). Int_t TProof::SendCommand ; (; const char * ; cmd, . ESlaves ; list = kActive . ). private . Send command to be executed on the PROOF master and/or slaves. ; Command can be any legal command line command, however commands like "".x file.C"" or "".L file.C"" will not cause the file.C to be transfered to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:135728,cache,cachedir,135728,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['cache'],['cachedir']
Performance," TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Double_t *params);  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:13955,load,load,13955,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,1,['load'],['load']
Performance," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQpSolverBase.html:9916,perform,perform,9916,root/html534/TQpSolverBase.html,https://root.cern,https://root.cern/root/html534/TQpSolverBase.html,1,['perform'],['perform']
Performance," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQpSolverBase.html:10585,perform,perform,10585,root/html604/TQpSolverBase.html,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html,1,['perform'],['perform']
Performance," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpSolverBase.html:10585,perform,perform,10585,root/html602/TQpSolverBase.html,https://root.cern,https://root.cern/root/html602/TQpSolverBase.html,1,['perform'],['perform']
Performance," TRFIOFile. TFileCacheRead * GetCacheRead() const; Return a pointer to the current read cache. TFileCacheWrite * GetCacheWrite() const; Return a pointer to the current write cache. Int_t GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read the logical record header starting at position first.; Maxbytes bytes are read into buf the function reads nread bytes; where nread is the minimum of maxbytes and the number of bytes; before the end of file. The function returns nread.; In output arguments:; nbytes : number of bytes in record; if negative, this is a deleted record; if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header; Note that the arguments objlen and keylen are returned only; if maxbytes >=16. Long64_t GetSize() const; Returns the current file size. Returns -1 in case the file could not; be stat'ed. const TList * GetStreamerInfoCache(); Returns the cached list of StreamerInfos used in this file. TList * GetStreamerInfoList(); Read the list of TStreamerInfo objects written to this file.; The function returns a TList. It is the user'responsability; to delete the list created by this function. Using the list, one can access additional information,eg:; TFile f(""myfile.root"");; TList *list = f.GetStreamerInfoList();; TStreamerInfo *info = (TStreamerInfo*)list->FindObject(""MyClass"");; Int_t classversionid = info->GetClassVersion();; delete list;. void ls(Option_t* option = """") const; List File contents.; Indentation is used to identify the file tree.; Subdirectories are listed first, then objects in memory,; then objects on the file. Bool_t IsOpen() const; Returns kTRUE in case file is open and kFALSE if file is not open. void MakeFree(Long64_t first, Long64_t last); Mark unused bytes on the file.; The list of free segments is in the fFree linked list.; When an object is deleted from the file, the freed space is added; into the FREE ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:30331,cache,cached,30331,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,3,['cache'],['cached']
Performance," TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15453,load,load,15453,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,2,['load'],['load']
Performance," TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFileStager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TString GetPathName (TObject *o);  Return the path name contained in object 'o' allowing for TUrl, TObjString or TFileInfo. ;  ; static TFileStager * Open (const char *stager);  Open a stager, after having loaded the relevant plug-in. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Static Private Member Functions; static void GetPrefix (const char *url, TString &pfx);  Isolate prefix in url. ;  . Private Attributes; TString fPrefix;  ; TNetSystem * fSystem;  . Additional Inherited Members;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFileStager.html:10751,load,loaded,10751,doc/master/classTNetFileStager.html,https://root.cern,https://root.cern/doc/master/classTNetFileStager.html,1,['load'],['loaded']
Performance," TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctions() const; TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed::GetName() const; virtual Int_tTDirectory::GetNbytesKeys() const; Int_tGetNclasses() const; virtual Int_tTDirectory::GetNkeys() const; Int_tGetNtypes() const; voidTDirectory::GetObject(const char* namecycle, void*& ptr); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const char* classname); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const TClass* cl); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual void*TDirectory::GetObjectUnchecked(const char* namecycle); virtual Option_t*TObject::GetOption() const; virtual const char*TDirectory::GetPath() const; virtual const char*TDirectory::GetPathStatic() const; TPluginManager*GetPluginManager() const; TFolder*GetRootFolder() const; virtual Long64_tTDirectory::GetSeekDir() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:7318,load,load,7318,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['load'],['load']
Performance," TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); Int_tCreateSymLinks(TList* files); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); TProofQueryResult*MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); voidTProof::SetDSet(TDSet* dset); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidSetQueryRunning(TProofQueryResult* pq); Int_tSetupWorkers(Int_t opt = 0, TList* wrks = 0); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tTProof::StartSlaves(Bool_t attach = kFALSE); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidTProof::ValidateDSet(TDSet* dset).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:20491,cache,cachedir,20491,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['cache'],['cachedir']
Performance," TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize, Int_t splitlevel, Int_t btype); FIXME: What if the streamer info is optimized here?; -- Constructor when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. void Init(TTree* tree, TBranch* parent, const char* name, TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t btype = 0); -- Init when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. TBranchElement(TTree *tree, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree *tree, TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Init when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TTree *tree, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TBranch *parent, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:17543,optimiz,optimized,17543,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,1,['optimiz'],['optimized']
Performance," TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. std::vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and its branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. TTreeSQL(TSQLServer* server, TString DB, const TString& table). Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeSQL.html:30295,Load,Load,30295,root/html604/TTreeSQL.html,https://root.cern,https://root.cern/root/html604/TTreeSQL.html,3,"['Load', 'load']","['Load', 'LoadTree', 'load']"
Performance," TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. std::vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and its branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. TTreeSQL(TSQLServer* server, TString DB, const TString& table). Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeSQL.html:30200,Load,Load,30200,root/html602/TTreeSQL.html,https://root.cern,https://root.cern/root/html602/TTreeSQL.html,3,"['Load', 'load']","['Load', 'LoadTree', 'load']"
Performance," TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServ.html:27407,cache,cache,27407,root/html532/TProofServ.html,https://root.cern,https://root.cern/root/html532/TProofServ.html,8,['cache'],['cache']
Performance," TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; prioroty is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:27407,cache,cache,27407,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,2,['cache'],['cache']
Performance," TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNovosibirsk.html:42599,cache,cache,42599,root/html534/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html534/RooNovosibirsk.html,1,['cache'],['cache']
Performance," TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalphaInterpolation parameter; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdf1First input shape; RooRealProxypdf2Second input shape; RooRealProxyxObservable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooIntegralMorph.html:49814,cache,cache,49814,root/html602/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html602/RooIntegralMorph.html,2,['cache'],['cache']
Performance," TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void setDefaultStorageType(RooAbsData::StorageType s). void claimVars(RooAbsData* ). Bool_t releaseVars(RooAbsData* ); If return value is true variables can be deleted. RooAbsData(); Default constructor. RooAbsData(const char* name, const char* title, const RooArgSet& vars, RooAbsDataStore* store = 0); Constructor from a set of variables. Only fundamental elements of vars; (RooRealVar,RooCategory etc) are stored as part of the dataset. RooAbsData(const RooAbsData& other, const char* newname = 0); Copy constructor. ~RooAbsData(); Destructor. void convertToVectorStore(); Convert tree-based storage to vector-based storage. Bool_t changeObservableName(const char* from, const char* to). void fill(). Int_t numEntries() const. void reset(). const RooArgSet* get(Int_t index) const. void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Internal method -- Cache given set of functions with data. void resetCache(); Internal method -- Remove cached function values. void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Internal method -- Attach dataset copied with cache contents to copied instances of functions. void setArgStatus(const RooArgSet& set, Bool_t active). void setDirtyProp(Bool_t flag); Control propagation of dirty flags from observables in dataset. RooAbsData* reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Create a reduced copy of this dataset. The caller takes ownership of the returned dataset. The following optional named arguments are accepted. SelectVars(const RooArgSet& vars) -- Only retain the listed observables in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsData.html:16941,cache,cacheArgs,16941,root/html602/RooAbsData.html,https://root.cern,https://root.cern/root/html602/RooAbsData.html,4,"['Cache', 'cache']","['Cache', 'cacheArgs']"
Performance," TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA::Factory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; void ; ). Delete methods. ; Definition at line 324 of file Factory.cxx. ◆ EvaluateAllMethods(). void TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:22772,load,loading,22772,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['load'],['loading']
Performance," TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCachedPdf.h>. Inheritance diagram for RooCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCachedPdf() [1/4]. RooCachedPdf::RooCachedPdf ; (; ). inline . Definition at line 22 of file RooCachedPdf.h. ◆ RooCachedPdf() [2/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf, . const RooArgSet & ; cacheObs . ). Constructor taking name, title and function to be cached and fixed choice of variable to cache. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. If the fixed set of cache observables does not match the observables defined in the use context of the p.d.f the cache is still filled completely. Ee.g. when it is specified to cache x and p and only x is a observable in the given use context the cache histogram will store sampled values for all values of observable x and parameter p. In such a mode of operation the cache will also not be recalculated if the observable p changes ; Definition at line 66 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [3/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf . ). Constructor taking name, title and function to be cached. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:77395,cache,cached,77395,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,2,['cache'],"['cache', 'cached']"
Performance," TString fInsertQuery;  ; TString fQuery;  ; TSQLResult * fResult;  ; TSQLRow * fRow;  ; TSQLServer * fServer;  ; TString fTable;  ; TSQLTableInfo * fTableInfo;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones;  ! List of cloned trees which share our addresses ;  ; Long64_t * fClusterRangeEnd;  [fNClusterRange] Last entry of a cluster range. ;  ; Long64_t * fClusterSize;  [fNClusterRange] Number of entries in each cluster for a given range. ;  ; Int_t fDebug;  ! Debug level ;  ; Long64_t fDebugMax;  ! Last entry number to debug ;  ; Long64_t fDebugMin;  ! First entry number to debug ;  ; Int_t fDefaultEntryOffsetLen;  Initial Length of fEntryOffset table in the basket buffers. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t fEntries;  Number of entries. ;  ; TEntryList * fEntryList;  ! Pointer to event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:42556,cache,cache,42556,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,3,['cache'],['cache']
Performance," TThread classes; libTMVA contains the multivariate analysis toolkit; libTree is the TTree object container system; libTreePlayer is the TTree drawing classes; libTreeViewer is the graphical TTree query interface. 1.6.2.1 Library Dependencies. ROOT libraries dependencies. The libraries are designed and organized to minimize dependencies, such that you can load just enough code for the task at hand rather than having to load all libraries or one monolithic chunk. The core library (libCore.so) contains the essentials; it is a part of all ROOT applications. In the Figure 1-2 you see that libCore.so is made up of base classes, container classes, meta information classes, operating system specific classes, and the ZIP algorithm used for compression of the ROOT files.; The Cling library (libCling.so) is also needed in all ROOT applications, and even by libCore. A program referencing only TObject only needs libCore; libCling will be opened automatically. To add the ability to read and write ROOT objects one also has to load libRIO. As one would expect, none of that depends on graphics or the GUI.; Library dependencies have different consequences; depending on whether you try to build a binary, or you just try to access a class that is defined in a library.; 1.6.2.2 Linktime Library Dependencies; When building your own executable you will have to link against the libraries that contain the classes you use. The ROOT reference guide states the library a class is reference guide defined in. Almost all relevant classes can be found in libraries returned by root-config -glibs; the graphics libraries are retuned by root-config --libs. These commands are commonly used in Makefiles. Using root-config instead of enumerating the libraries by hand allows you to link them in a platform independent way. Also, if ROOT library names change you will not need to change your Makefile.; A batch program that does not have a graphic display, which creates, fills, and saves histograms and trees, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:21242,load,load,21242,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['load']
Performance," TThread*fUnzipThread[10]; static Int_tTTreeCache::fgLearnEntriesnumber of entries used for learning mode; static TTreeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. Bool_t FillBuffer(). void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void StopLearningPhase(); It's the same as TTreeCache::StopLearningPhase but we guarantee that; we start the unzipping just after getting the buffers. void UpdateBranches(TTree* tree); update pointer to current Tree and recompute pointers to the branches in the cache. Bool_t IsParallelUnzip(); Static function that tells wether the multithreading unzipping; is activated. Bool_t IsActiveThread(); This indicates if the thread is active in this moment...; this variable is very important because if we change it from true to; false the thread will stop... ( see StopThreadTreeCacheUnzip() ). Bool_t IsQueueEmpty(); It says if the queue is empty... useful to see if we have to pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:16684,cache,cache,16684,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,1,['cache'],['cache']
Performance," TThread*fUnzipThread[10]; static Int_tTTreeCache::fgLearnEntriesnumber of entries used for learning mode; static TTreeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. Bool_t FillBuffer(). void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void StopLearningPhase(); It's the same as TTreeCache::StopLearningPhase but we guarantee that; we start the unzipping just after getting the buffers. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); update pointer to current Tree and recompute pointers to the branches in the cache. Bool_t IsParallelUnzip(); Static function that tells wether the multithreading unzipping; is activated. Bool_t IsActiveThread(); This indicates if the thread is active in this moment...; this variable is very important because if we change it from true to; false the thread will stop... ( see StopThreadTreeCacheUnzip() ). Bool_t IsQueueEmpty(); It says if the queue is empty... useful t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCacheUnzip.html:14740,cache,cache,14740,root/html532/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html532/TTreeCacheUnzip.html,1,['cache'],['cache']
Performance," TTree BranchObject.Definition TTree.cxx:2074; TTree::GetCacheAutoSizeLong64_t GetCacheAutoSize(bool withDefault=false)Used for automatic sizing of the cache.Definition TTree.cxx:5407; TTree::BranchRefvirtual TBranch * BranchRef()Build the optional branch supporting the TRefTable.Definition TTree.cxx:2328; TTree::GetCurrentFileTFile * GetCurrentFile() constReturn pointer to the current file.Definition TTree.cxx:5479; TTree::GetNotifyTObject * GetNotify() constDefinition TTree.h:543; TTree::fAliasesTList * fAliasesList of aliases for expressions based on the tree branches.Definition TTree.h:124; TTree::BranchTBranch * Branch(const char *name, Longptr_t address, const char *leaflist, Int_t bufsize=32000)Definition TTree.h:384; TTree::CopyTreevirtual TTree * CopyTree(const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Copy a tree with selection.Definition TTree.cxx:3719; TTree::DropBranchFromCachevirtual Int_t DropBranchFromCache(const char *bname, bool subbranches=false)Remove the branch with name 'bname' from the Tree cache.Definition TTree.cxx:1142; TTree::Fitvirtual Int_t Fit(const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Option_t *goption="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Fit a projected item(s) from a tree.Definition TTree.cxx:5079; TTree::fClusterRangeEndLong64_t * fClusterRangeEnd[fNClusterRange] Last entry of a cluster range.Definition TTree.h:103; TTree::fIMTZipBytesstd::atomic< Long64_t > fIMTZipBytes! Zip bytes for the IMT flush baskets.Definition TTree.h:161; TTree::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideMake sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree.Definition TTree.cxx:7881; TTree::GetPlayerTVirtualTreePlayer * GetPlayer()Load the TTreePlayer (if not already done).Definition TTree.cxx:6305; TTree::MakeProxyvirtual Int_t MakeProxy(const char *classname, const char *macrofilename",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:60053,cache,cache,60053,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['cache'],['cache']
Performance," TTree entry, the corresponding entry in the TTree's TBranchRef::fRefTable contains the index of the branch that needs to be loaded to bring the object into memory.; Persistency of a TRefTable is split into two parts:; entry specific information is stored (read) by FillBuffer (ReadBuffer). For each referenced object the object's fUniqueID and the referencing TRef::fPID is stored (to allow the TRefTable to autoload references created by different processes).; non-entry specific, i.e. global information is stored (read) by the Streamer function. This comprises all members marked as persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table of unique IDs is kept for each used TProcessID. There is no natural order of TProcessIDs, so TRefTable stores a vector of the TGUID of all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in this vector defines the index of the auto-loading info in fParentIDs for that TProcessID. The mapping of TProcessID* to index is cached for quick non-persistent lookup. ; Definition at line 35 of file TRefTable.h. Public Types; enum  EStatusBits { kHaveWarnedReadingOld = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TRefTable ();  Default constructor for I/O. ;  ;  TRefTable (const TRefTable &)=delete;  ;  TRefTable (TObject *owner, Int_t size);  Create a TRefTable with initial size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:1591,cache,cached,1591,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['cache'],['cached']
Performance," TTreeCache.cxx:2145; TTreeCache::GetTreeTTree * GetTree() constDefinition TTreeCache.h:149; TTreeCache::SetEntryRangevirtual void SetEntryRange(Long64_t emin, Long64_t emax)Set the minimum and maximum entry number to be processed this information helps to optimize the numbe...Definition TTreeCache.cxx:2106; TTreeCache::DropBranchvirtual Int_t DropBranch(TBranch *b, bool subbranches=false)Remove a branch to the list of branches to be stored in the cache this function is called by TBranch:...Definition TTreeCache.cxx:541; TTreeCache::SetAutoCreatedvoid SetAutoCreated(bool val)Definition TTreeCache.h:164; TTreeCache::StopLearningPhasevirtual void StopLearningPhase()This is the counterpart of StartLearningPhase() and can be used to stop the learning phase.Definition TTreeCache.cxx:2187; TTreeCache::Printvoid Print(Option_t *option="""") const overridePrint cache statistics.Definition TTreeCache.cxx:1899; TTreeCache::AddBranchInt_t AddBranch(TBranch *b, bool subgbranches=false) overrideAdd a branch to the list of branches to be stored in the cache this function is called by the user vi...Definition TTreeCache.cxx:376; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeCloner::kNoWarnings@ kNoWarningsDefinition TTreeCloner.h:100; TTreeCloner::GetWarningconst char * GetWarning() constDefinition TTreeCloner.h:117; TTreeCloner::Execbool Exec()Execute the cloning.Definition TTreeCloner.cxx:222; TTreeCloner::NeedConversionbool NeedConversion()Definition TTreeCloner.h:121; TTreeCloner::IsValidbool IsValid()Definition TTreeCloner.h:120; TTreeCloner::SetCacheSizevoid SetCacheSize(Long64_t size)Set the cache size used by the matching TFile.Definition TTreeCloner.cxx:656; TTreeFriendLeafIterIterator on all the leaves in a TTree and its friend.Definition TTree.h:716; TTreeFriendLeafIter::fTreeTTree * fTreetree being iteratedDefinition TTree.h:719; TTreeFriendLeafIter::operator=TIterator & operator=(const TIterator &rhs) overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:430661,cache,cache,430661,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['cache'],['cache']
Performance," TTreeViewer.h:168; TTreeViewer::ProcessMessagebool ProcessMessage(Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override; TTreeViewer::ExecuteSpidervoid ExecuteSpider(); TTreeViewer::IsScanRedirectedbool IsScanRedirected(); TTreeViewer::fBGRecordTGPictureButton * fBGRecordDefinition TTreeViewer.h:165; TTreeViewer::SetScanFileNamevoid SetScanFileName(const char *name=""""); TTreeViewer::fStatusBarTGStatusBar * fStatusBarStatus bar.Definition TTreeViewer.h:161; TTreeViewer::fSPIDERTGTextButton * fSPIDERSPIDER button.Definition TTreeViewer.h:158; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetTimerIntervalvirtual void SetTimerInterval(Int_t msec=333)Definition TTree.h:693; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::GetListOfLeavesvirtual TObjArray * GetListOfLeaves()Definition TTree.h:529; TTree::GetPlayerTVirtualTreePlayer * GetPlayer()Load the TTreePlayer (if not already done).Definition TTree.cxx:6305; TTree::Processvirtual Long64_t Process(const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Process this tree executing the TSelector code in the specified filename.Definition TTree.cxx:7450; TTree::SetEventListvirtual void SetEventList(TEventList *list)This function transfroms the given TEventList into a TEntryList The new TEntryList is owned by the TT...Definition TTree.cxx:9069; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::MakeSelectorvirtual Int_t MakeSelector(const char *selector=nullptr, Option_t *option="""")Generate skeleton selector class for this tree.Definition TTree.cxx:6822; TTree::GetReadEntryvirtual Long64_t GetReadEntry() constDefinition TTree.h:549; TTree::GetListOfBranchesvirtual TObjArray * GetListOfBranches()Definition TTree.h:528; TTree::GetHistogramTH1 * GetHistogram()Definition TTree.h:519; TTree::Refreshvirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:152658,Load,Load,152658,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['Load'],['Load']
Performance," TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:2291,perform,performed,2291,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['perform'],['performed']
Performance," TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQClass.html:11972,load,load,11972,doc/master/classTQClass.html,https://root.cern,https://root.cern/doc/master/classTQClass.html,3,['load'],['load']
Performance," TVirtualPadEditor. class TVirtualPadEditor. TVirtualPadEditor. Abstract base class used by ROOT graphics editor. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualPadEditor(); virtual voidBuild(); static TClass*Class(); virtual voidDeleteEditors(); virtual voidDrawLine(Double_t, Double_t, Double_t, Double_t); virtual voidDrawLineNDC(Double_t, Double_t, Double_t, Double_t); virtual voidDrawText(Double_t, Double_t, const char*); virtual voidDrawTextNDC(Double_t, Double_t, const char*); virtual voidFillAttributes(Int_t, Int_t); virtual TCanvas*GetCanvas() const; static const char*GetEditorName(); static TVirtualPadEditor*GetPadEditor(Bool_t load = kTRUE); virtual voidHide(); static voidHideEditor(); virtual TClass*IsA() const; virtual Bool_tIsGlobal() const; virtual voidLineAttributes(Int_t, Int_t, Int_t); static TVirtualPadEditor*LoadEditor(); virtual voidMarkerAttributes(Int_t, Int_t, Float_t); TVirtualPadEditor&operator=(const TVirtualPadEditor&); virtual voidSetGlobal(Bool_t); static voidSetPadEditorName(const char* name); virtual voidShow(); static voidShowEditor(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static voidTerminate(); virtual voidTextAttributes(Int_t, Float_t, Int_t, Int_t, Float_t); static voidUpdateFillAttributes(Int_t col, Int_t sty); static voidUpdateLineAttributes(Int_t col, Int_t sty, Int_t width); static voidUpdateMarkerAttributes(Int_t col, Int_t sty, Float_t msiz); static voidUpdateTextAttributes(Int_t align, Float_t angle, Int_t col, Int_t font, Float_t tsize). Data Members; protected:. static TStringfgEditorNamename of the default pad editor ""Ged""; static TVirtualPadEditor*fgPadEditorsingleton editor dialog. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TVirtualPadEditor(); Virtual editor d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualPadEditor.html:1032,load,load,1032,root/html528/TVirtualPadEditor.html,https://root.cern,https://root.cern/root/html528/TVirtualPadEditor.html,6,"['Load', 'load']","['LoadEditor', 'load']"
Performance," TWebCanvas::fWebConn. protected . ! connections ; Definition at line 83 of file TWebCanvas.h. ◆ fWindow. std::shared_ptr<ROOT::RWebWindow> TWebCanvas::fWindow. protected . Definition at line 88 of file TWebCanvas.h. ◆ fWindowGeometry. std::vector<int> TWebCanvas::fWindowGeometry. protected . ! last received window geometry ; Definition at line 108 of file TWebCanvas.h. ◆ gBatchFiles. std::vector< std::string > TWebCanvas::gBatchFiles. staticprotected . ! file names for batch job ; Definition at line 124 of file TWebCanvas.h. ◆ gBatchHeights. std::vector< int > TWebCanvas::gBatchHeights. staticprotected . ! batch job heights ; Definition at line 127 of file TWebCanvas.h. ◆ gBatchImageMode. UInt_t TWebCanvas::gBatchImageMode = 0. staticprotected . ! configured batch size ; Definition at line 122 of file TWebCanvas.h. ◆ gBatchJsons. std::vector< std::string > TWebCanvas::gBatchJsons. staticprotected . ! converted jsons batch job ; Definition at line 125 of file TWebCanvas.h. ◆ gBatchMultiPdf. std::string TWebCanvas::gBatchMultiPdf. staticprotected . ! name of current multi-page pdf file ; Definition at line 123 of file TWebCanvas.h. ◆ gBatchWidths. std::vector< int > TWebCanvas::gBatchWidths. staticprotected . ! batch job widths ; Definition at line 126 of file TWebCanvas.h. ◆ gCustomClasses. std::vector< std::string > TWebCanvas::gCustomClasses = {}. staticprotected . ! list of custom classes, which can be delivered as is to client ; Definition at line 120 of file TWebCanvas.h. ◆ gCustomScripts. std::string TWebCanvas::gCustomScripts = {}. staticprotected . ! custom JavaScript code or URL on JavaScript files to load before start drawing ; Definition at line 119 of file TWebCanvas.h. Libraries for TWebCanvas:. [legend]; The documentation for this class was generated from the following files:; gui/webgui6/inc/TWebCanvas.h; gui/webgui6/src/TWebCanvas.cxx. TWebCanvas. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:46408,load,load,46408,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['load'],['load']
Performance," TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(const Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(const Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:30744,cache,cache,30744,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,2,['cache'],['cache']
Performance," TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(const Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(const Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-07-10 18:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXNetFile.html:30662,cache,cache,30662,root/html604/TXNetFile.html,https://root.cern,https://root.cern/root/html604/TXNetFile.html,2,['cache'],['cache']
Performance, Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of contex-menu toggle objects; TTree Tree descriptor (the main ROOT I/O class); TTreeCache Specialization of TFileCacheRead for a TTree; TTreeCacheUnzip Specialization of TTreeCache for parallel unzipping; TTreeCloner helper used for the fast cloning of TTrees.; TTreeDrawArgsParser Helper class to parse the argument to TTree::Draw; TTreeFormula The Tree formula; TTreeFormulaManager A class coordinating several TTreeFormula objects.; TTreeFriendLeafIter Linked list iterator; TTreeIndex A Tree Index with majorname and minorname.; TTreeInput Simple input dialog; TTreePerfStats TTree I/O performance measurement; TTreePlayer Manager class to play with TTrees; TTreeResult TTree query result; TTreeRow One row of an TTree query result; TTreeSQL TTree Implementation read and write to a SQL database.; TTreeTableInterface Interface to data in a TTree; TTreeViewer A GUI oriented tree viewer; TUDPSocket This class implements UDP client sockets; TUUID Universally Unique IDentifier; TUnfold Unfolding with support for L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution ; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query d,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:136992,perform,performance,136992,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['perform'],['performance']
Performance," The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19074,perform,perform,19074,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,2,['perform'],['perform']
Performance," The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:18585,perform,perform,18585,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,1,['perform'],['perform']
Performance," The file will be downloaded to the cache and opened from there.; 3872/// If the download fails, it will be opened remotely.; 3873/// The file will be downloaded to the directory specified by SetCacheFileDir().; 3874 ; 3875TFile *TFile::OpenFromCache(const char *name, Option_t *, const char *ftitle,; 3876 Int_t compress, Int_t netopt); 3877{; 3878 TFile *f = nullptr;; 3879 ; 3880 if (fgCacheFileDir == """") {; 3881 ::Warning(""TFile::OpenFromCache"",; 3882 ""you want to read through a cache, but you have no valid cache ""; 3883 ""directory set - reading remotely"");; 3884 ::Info(""TFile::OpenFromCache"", ""set cache directory using TFile::SetCacheFileDir()"");; 3885 } else {; 3886 TUrl fileurl(name);; 3887 ; 3888 if ((!strcmp(fileurl.GetProtocol(), ""file""))) {; 3889 // it makes no sense to read local files through a file cache; 3890 if (!fgCacheFileForce); 3891 ::Warning(""TFile::OpenFromCache"",; 3892 ""you want to read through a cache, but you are reading ""; 3893 ""local files - CACHEREAD disabled"");; 3894 } else {; 3895 // this is a remote file and worthwhile to be put into the local cache; 3896 // now create cachepath to put it; 3897 TString cachefilepath;; 3898 TString cachefilepathbasedir;; 3899 cachefilepath = fgCacheFileDir;; 3900 cachefilepath += fileurl.GetFile();; 3901 cachefilepathbasedir = gSystem->GetDirName(cachefilepath);; 3902 if ((gSystem->mkdir(cachefilepathbasedir, kTRUE) < 0) &&; 3903 (gSystem->AccessPathName(cachefilepathbasedir, kFileExists))) {; 3904 ::Warning(""TFile::OpenFromCache"",""you want to read through a cache, but I ""; 3905 ""cannot create the directory %s - CACHEREAD disabled"",; 3906 cachefilepathbasedir.Data());; 3907 } else {; 3908 // check if this should be a zip file; 3909 if (strlen(fileurl.GetAnchor())) {; 3910 // remove the anchor and change the target name; 3911 cachefilepath += ""__"";; 3912 cachefilepath += fileurl.GetAnchor();; 3913 fileurl.SetAnchor("""");; 3914 }; 3915 if (strstr(name,""zip="")) {; 3916 // filter out this option and change the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:141499,cache,cache,141499,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,9,"['CACHE', 'cache']","['CACHEREAD', 'cache', 'cachefilepath', 'cachefilepathbasedir', 'cachepath']"
Performance," The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 1035 of file RooRealIntegral.cxx. Member Data Documentation. ◆ _anaList. RooSetProxy RooRealIntegral::_anaList. protected . Set of observables over which is integrated/summed analytically. ; Definition at line 119 of file RooRealIntegral.h. ◆ _cacheAllNDim. Int_t RooRealIntegral::_cacheAllNDim. staticprotected . ! Cache all integrals with given numeric dimension ; Definition at line 145 of file RooRealIntegral.h. ◆ _cacheNum. bool RooRealIntegral::_cacheNum = false. protected . Cache integral if numeric. ; Definition at line 144 of file RooRealIntegral.h. ◆ _facList. RooSetProxy RooRealIntegral::_facList. protected . Set of observables on which function does not depends, which are integrated nevertheless. ; Definition at line 121 of file RooRealIntegral.h. ◆ _funcNormSet. std::unique_ptr<RooArgSet> RooRealIntegral::_funcNormSet. protected . Optional normalization set passed to function. ; Definition at line 124 of file RooRealIntegral.h. ◆ _function. RooRealProxy RooRealIntegral::_function. protected . Function being integrated. ; Definition at line 123 of file RooRealIntegral.h. ◆ _iconfig. RooNumIntConfig* RooRealIntegral::_iconfig = nullptr. protected . Definition at line 129 of file RooRealIntegral.h. ◆ _intList. RooSetProxy RooRealIntegral::_intList. protected . Set of continuous observables over which is integrated numerically. ; Definition at line 118 of file RooRealIntegral.h. ◆ _intOperMode. IntOperMode RooRealIntegral::_intOperMode = Hybrid. protected . integrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:75853,Cache,Cache,75853,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['Cache'],['Cache']
Performance," The function returns the first occurence of the object in the list of folders. The returned string points to a static char array in TROOT. If this function is called in a loop or recursively, it is the user's responsibility to copy this string in their area. ; Definition at line 1473 of file TROOT.cxx. ◆ FindSpecialObject(). TObject * TROOT::FindSpecialObject ; (; const char * ; name, . void *& ; where . ). Returns address and folder of a ROOT object if it exists. ; This function looks in the following order in the ROOT lists:; List of files; List of memory mapped files; List of functions; List of geometries; List of canvases; List of styles; List of specials; List of materials in current geometry; List of shapes in current geometry; List of matrices in current geometry; List of Nodes in current geometry; Current Directory in memory; Current Directory on file . Definition at line 1367 of file TROOT.cxx. ◆ FindSTLClass(). TClass * TROOT::FindSTLClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent = kFALSE . ); const. return a TClass object corresponding to 'name' assuming it is an STL container. ; In particular we looking for possible alternative name (default template parameter, typedefs template arguments, typedefed name). ; Definition at line 1484 of file TROOT.cxx. ◆ ForceStyle(). void TROOT::ForceStyle ; (; Bool_t ; force = kTRUE). inline . Definition at line 206 of file TROOT.h. ◆ FromPopUp(). Bool_t TROOT::FromPopUp ; (; ); const. inline . Definition at line 207 of file TROOT.h. ◆ GetApplication(). TApplication * TROOT::GetApplication ; (; ); const. inline . Definition at line 209 of file TROOT.h. ◆ GetBinDir(). const TString & TROOT::GetBinDir ; (; ). static . Get the binary directory in the installation. Static utility function. ; Definition at line 2989 of file TROOT.cxx. ◆ GetBuiltDate(). Int_t TROOT::GetBuiltDate ; (; ); const. inline . Definition at line 221 of file TROOT.h. ◆ GetBuiltTime(). Int_t TROOT::GetBuiltTime ; (; ); const. inline ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:47500,load,load,47500,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['load'],['load']
Performance," The function returns the first occurence of the object in the list of folders. The returned string points to a static char array in TROOT. If this function is called in a loop or recursively, it is the user's responsibility to copy this string in their area. ; Definition at line 1473 of file TROOT.cxx. ◆ FindSpecialObject(). TObject * TROOT::FindSpecialObject ; (; const char * ; name, . void *& ; where . ). Returns address and folder of a ROOT object if it exists. ; This function looks in the following order in the ROOT lists:; List of files; List of memory mapped files; List of functions; List of geometries; List of canvases; List of styles; List of specials; List of materials in current geometry; List of shapes in current geometry; List of matrices in current geometry; List of Nodes in current geometry; Current Directory in memory; Current Directory on file . Definition at line 1367 of file TROOT.cxx. ◆ FindSTLClass(). TClass * TROOT::FindSTLClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent = kFALSE . ); const. return a TClass object corresponding to 'name' assuming it is an STL container. ; In particular we looking for possible alternative name (default template parameter, typedefs template arguments, typedefed name). ; Definition at line 1484 of file TROOT.cxx. ◆ ForceStyle(). void TROOT::ForceStyle ; (; Bool_t ; force = kTRUE). inline . Definition at line 206 of file TROOT.h. ◆ FromPopUp(). Bool_t TROOT::FromPopUp ; (; ); const. inline . Definition at line 207 of file TROOT.h. ◆ GetApplication(). TApplication * TROOT::GetApplication ; (; ); const. inline . Definition at line 209 of file TROOT.h. ◆ GetBinDir(). const TString & TROOT::GetBinDir ; (; ). static . Get the binary directory in the installation. Static utility function. ; Definition at line 2993 of file TROOT.cxx. ◆ GetBuiltDate(). Int_t TROOT::GetBuiltDate ; (; ); const. inline . Definition at line 221 of file TROOT.h. ◆ GetBuiltTime(). Int_t TROOT::GetBuiltTime ; (; ); const. inline ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:47469,load,load,47469,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['load'],['load']
Performance," The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Use TKey::ReadObjectAny to read any object non-derived from TObject. Note:; A C style cast can only be used in the case where the final class; of this object derives from TObject as a first inheritance, otherwise; one must use a dynamic_cast. Example1: simplified case:; class MyClass : public TObject, public AnotherClass; then on return, one get away with using:; MyClass *obj = (MyClass*)key->ReadObj();. Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like:; class MyClass : public AnotherClass, public TObject. Of course, dynamic_cast<> can also be used in the example 1. TObject * ReadObjWithBuffer(char* bufferRead); To read a TObject* from bufferRead.; This function is identical to TKey::ReadObj, but it reads directly; from bufferRead instead of reading from a file.; The object associated to this key is read from the buffer into memory; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. NOTE :; This function is called only internally by ROOT classes.; Although being public it is not supposed to be used outside ROOT.; If used, you must make sure that the bufferRead is large enough to; accomodate the object being read. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TKey.html:13863,perform,performance,13863,root/html534/TKey.html,https://root.cern,https://root.cern/root/html534/TKey.html,3,['perform'],['performance']
Performance," The tree is created in the current directory.; Use the various functions Branch below to add branches to this tree. If the first character of title is a ""/"", the function assumes a folder name.; In this case, it creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. void AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache. void DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:36717,cache,cache,36717,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,2,['cache'],['cache']
Performance," The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void UnmarkSaved(); Reset SavePrimitive bits. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute mouse actions on this volume. TGeoNode * FindNode(const char* name) const; search a daughter inside the list of nodes. Int_t GetNodeIndex(const TGeoNode* node, Int_t* check_list, Int_t ncheck) const; Get the index of a daugther within check_list by providing the node pointer. Int_t GetIndex(const TGeoNode* node) const; get index number for a given daughter. char * GetObjectInfo(Int_t px, Int_t py) const; Get volume info for the browser. Bool_t GetOptimalVoxels() const; --- Returns true if cylindrical voxelization is optimal. char * GetPointerName() const; Provide a pointer name containing uid. TGeoVoxelFinder * GetVoxels() const; Getter for optimization structure. void GrabFocus(); Move perspective view focus to this volume. Bool_t IsAssembly() const; Returns true if the volume is an assembly or a scaled assembly. TGeoVolume * CloneVolume() const; Clone this volume.; build a volume with same name, shape and medium. void CloneNodesAndConnect(TGeoVolume* newmother) const; Clone the array of nodes. void MakeCopyNodes(const TGeoVolume* other); make a new list of nodes and copy all nodes of other volume inside. TGeoVolume * MakeCopyVolume(TGeoShape* newshape); make a copy of this volume; build a volume with same name, shape and medium. TGeoVolume * MakeReflectedVolume(const char* newname = """") const; Make a copy of this volume which is reflected with respect to XY plane. void SetAsTopVolume(); Set this volume as the TOP one (the whole geometry starts from here). void SetCurrentPoint(Double_t x, Double_t y, Double_t z); Set the current tracking point. void SetShape(const TGeoShape* shape); set the shape associated ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:40478,optimiz,optimization,40478,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['optimiz'],['optimization']
Performance," Therefore, the; user is asked to provide a minimum relative error ; (TMultiDimFit::SetMinRelativeError), and ; will be considered minimized when. Optionally, the user may impose a functional expression by specifying; the powers of each variable in specified functions ; (TMultiDimFit::SetPowers). In that case, only the; coefficients is calculated by the class. Limiting the Number of Terms. As always when dealing with fits, there's a real chance of; over fitting. As is well-known, it's always possible to fit an; polynomial in to points with ; , but; the polynomial is not likely to fit new data at all; [1]. Therefore, the user is asked to provide an upper; limit, to the number of terms in ; (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of to choose from, the; user is asked to give the maximum power. , of each variable; to be considered in the minimization of ; (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable , is; to perform a regular fit to the dependent quantity , using a; polynomial only in . The maximum power is is then the; power that does not significantly improve the one-dimensional; least-square fit over to [5]. There are still a huge amount of possible choices for ; in fact; there are ; possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a power control limit, ; (TMultiDimFit::SetPowerLimit), and a function; is only accepted if. where is the leading power of variable in function; . (TMultiDimFit::MakeCandidates). So the number of; functions increase with (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation. To further reduce the number of functions in the final expression,; only those functions that significantly reduce is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see 2.3). The functions are generally not orthogonal, which means one will; have to evaluate all possible 's over all data-points before; fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:4020,perform,perform,4020,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['perform'],['perform']
Performance," Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26 of file TCanvas.h. Member Data Documentation. ◆ fBatch. Bool_t TCanvas::fBatch. protected . ! True when in batchmode ; Definition at line 59 of file TCanvas.h. ◆ fCanvasID. Int_t TCanvas::fCanvasID. protected . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:93517,perform,performed,93517,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['perform'],['performed']
Performance," Toggle editor. ; Definition at line 2453 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2431 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2442 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2464 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2489 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2545 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1185 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26 of file TCanvas.h. Member Data Documentation. ◆ fBatch. Bool_t TCanvas::fBatch. protected . ! True when in batchmode ; Definition at line 59 of file TCanvas.h. ◆ fCanvasID. Int_t TCanvas::fCanvasID. protected . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:93962,perform,performed,93962,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['perform'],['performed']
Performance," TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Ja",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:29234,optimiz,optimization,29234,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,2,['optimiz'],['optimization']
Performance," Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normaliz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:41913,cache,cache,41913,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,1,['cache'],['cache']
Performance," Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:40416,cache,cache,40416,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['cache'],['cache']
Performance," Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project configuration; Create the next development version. root.git. Update the release notes in README/ReleaseNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:2080,perform,performance,2080,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['perform'],['performance']
Performance, Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-d,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:25383,optimiz,optimized,25383,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['optimiz'],['optimized']
Performance," Types; enum  EPrefillType { kNoPrefill; , kAllBranches; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCache ();  Default Constructor. ;  ;  TTreeCache (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCache () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ;  ; Int_t AddBranch (TBranch *b, bool subgbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by the user via TTree::AddBranchToCache. ;  ; virtual void Disable ();  ; virtual Int_t DropBranch (const char *branch, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ;  ; virtual Int_t DropBranch (TBranch *b, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket. ;  ; virtual void Enable ();  ; virtual bool FillBuffer ();  Fill the cache buffer with the branches in the cache. ;  ; const TObjArray * GetCachedBranches () const;  ; EPrefillType GetConfiguredPrefillType () const;  Return the desired prefill type ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:12279,cache,cache,12279,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['cache'],['cache']
Performance," Use opt = 'S' for compact version.; Output to 'out' or to screen. void FillFileInfo(Bool_t force = kFALSE); Fill basic worker info; if 'force' rescan the TTree even already done. void SetDebug(Int_t d = 0); Static setter for the verbosity level. void DoDraw(TObject* o, Option_t* opt = """", const char* name = 0); Draw object 'o' with options 'opt'; Save it with 'name' if in saving mode (see SetSaveResult). Int_t SetSaveResult(const char* file = ""results.root"", Option_t* mode = ""RECREATE""); Set save result mode and validate 'file' according to 'mode'.; Return 0 on success, -1 if any problem with the file is encountered; (save result mode is not enabled in such a case).; If 'file' is null saving is disabled. void SetgDebug(Bool_t on = kTRUE); Static setter for the verbosity level. void EventDist(); Display event and packet distribution. void RatePlot(const char* wrks = 0); Show event processing or MB processing rate plot vs time. void LatencyPlot(const char* wrks = 0); Show event processing or MB processing rate plot vs time; Create the histograms. void FileProcPlot(const char* fn, const char* out = 0); Show event processing or MB processing rate plot vs time. void FileRatePlot(const char* fns = 0); Show MB processing rate plot per file vs time. TProofPerfAnalysis(const char* perffile, const char* title = """", const char* treename = ""PROOF_PerfStats""). Bool_t IsValid() const; { return (fFile && fTree) ? kTRUE : kFALSE; }. Bool_t WrkInfoOK() const; { return (fWrksInfo.GetSize() > 0) ? kTRUE : kFALSE; }. Double_t GetEvtRateAvgMax() const; { return fEvtRateAvgMax; }. Double_t GetMBRateAvgMax() const; { return fMBRateAvgMax; }. Double_t GetEvtRateAvg() const; { return fEvtRateAvg; }. Double_t GetMBRateAvg() const; { return fMBRateAvg; }. void GetAverages(Double_t& evtmax, Double_t& mbmax, Double_t& evt, Double_t& mb) const; { evtmax = fEvtRateAvgMax; mbmax = fMBRateAvgMax; evt = fEvtRateAvg; mb = fMBRateAvg; return; }. » Author: G.Ganis Nov 2011 » Copyright (C) 1995-2005, Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPerfAnalysis.html:12236,Latency,LatencyPlot,12236,root/html604/TProofPerfAnalysis.html,https://root.cern,https://root.cern/root/html604/TProofPerfAnalysis.html,1,['Latency'],['LatencyPlot']
Performance," Used to make the caceh information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool_t RegisterDataSet(const char* dsName, TFileCollection* ds, const char* opt = """"); Register the 'dataSet' on the cluster under the current; user, group and the given 'dataSetName'.; Fails if a dataset named 'dataSetName' already exists, unless 'optStr'; contains 'O', i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:28933,cache,cache,28933,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['cache'],['cache']
Performance," Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool_t RegisterDataSet(const char* dsName, TFileCollection* ds, const char* opt = """"); Register the 'dataSet' on the cluster under the current; user, group and the given 'dataSetName'.; Fails if a dataset named 'dataSetName' already exists, unless 'optStr'; contains 'O', i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:32930,cache,cache,32930,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['cache'],['cache']
Performance," UserGroup_t structure. ; The only active fields in the UserGroup_t structure for this call are: fGid and fGroup The returned structure must be deleted by the user. In case of error 0 is returned. ; Reimplemented from TSystem.; Definition at line 2099 of file TUnixSystem.cxx. ◆ GetHomeDirectory(). std::string TUnixSystem::GetHomeDirectory ; (; const char * ; userName = nullptr); const. overridevirtual . Return the user's home directory. ; Reimplemented from TSystem.; Definition at line 1491 of file TUnixSystem.cxx. ◆ GetHostByName(). TInetAddress TUnixSystem::GetHostByName ; (; const char * ; hostname). overridevirtual . Get Internet Protocol (IP) address of host. ; Returns an TInetAddress object. To see if the hostname lookup was successfull call TInetAddress::IsValid(). ; Reimplemented from TSystem.; Definition at line 3046 of file TUnixSystem.cxx. ◆ GetLinkedLibraries(). const char * TUnixSystem::GetLinkedLibraries ; (; ). overrideprotectedvirtual . Get list of shared libraries loaded at the start of the executable. ; Returns 0 in case list cannot be obtained or in case of error. ; Reimplemented from TSystem.; Definition at line 2857 of file TUnixSystem.cxx. ◆ GetMemInfo(). int TUnixSystem::GetMemInfo ; (; MemInfo_t * ; info); const. overridevirtual . Returns ram and swap memory usage info into the MemInfo_t structure. ; Returns -1 in case of error, 0 otherwise. ; Reimplemented from TSystem.; Definition at line 5363 of file TUnixSystem.cxx. ◆ GetPathInfo(). int TUnixSystem::GetPathInfo ; (; const char * ; path, . FileStat_t & ; buf . ). overridevirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 1658 of file TUnixSystem.cxx. ◆ GetPeerName(). TInetAddress TUnixSystem::GetPeerName ; (; int ; sock). overridevirtual . Get Internet Protocol (IP) address of remote host and port #. ; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:52735,load,loaded,52735,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['load'],['loaded']
Performance," Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void Transform (bool dir, UShort_t *indexnew);  Transform the existing fIndices. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UShort_t fCurrent;  ! to fasten Contains() in list mode ;  ; UShort_t * fIndices;  [fN] ;  ; Int_t fLastIndexQueried;  ! to optimize GetEntry() in a loop ;  ; Int_t fLastIndexReturned;  ! to optimize GetEntry() in a loop ;  ; Int_t fN;  size of fIndices for I/O =fNPassed for list, fBlockSize for bits ;  ; Int_t fNPassed;  number of entries in the entry list (if fPassing=0 - number of entries not in the entry list ;  ; bool fPassing;  1 - stores entries that belong to the list 0 - stores entries that don't belong to the list ;  ; Int_t fType;  0 - bits, 1 - list ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TEntryListBlock.h>. Inheritance diagram for TEntryListBlock:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBlockSize . Definition at line 61 of file TEntryListBlock.h. Constructor & Destructor Documentation. ◆ TEntryListBlock() [1/2]. TEntryListBlock::TEntryListBlock ; (; ). Default c-tor. ; Definition at line 53 of file TEntryListBlock.cxx. ◆ TEntryListBlock() [2/2]. TEntryListBlock::TEntryListBlock ; (; const TEntryListBlock & ; eblock). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListBlock.html:12684,optimiz,optimize,12684,doc/master/classTEntryListBlock.html,https://root.cern,https://root.cern/doc/master/classTEntryListBlock.html,2,['optimiz'],['optimize']
Performance," We book first a Likelihood based on KDE (Kernel Density Estimation), a Fischer discriminant, a BDT; and a shallow neural network; ; */; ; ; // Likelihood (""naive Bayes estimator""); if (useLikelihood) {; factory.BookMethod(loader, TMVA::Types::kLikelihood, ""Likelihood"",; ""H:!V:TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10:NSmooth=1:NAvEvtPerBin=50"" );; }; // Use a kernel density estimator to approximate the PDFs; if (useLikelihoodKDE) {; factory.BookMethod(loader, TMVA::Types::kLikelihood, ""LikelihoodKDE"",; ""!H:!V:!TransformOutput:PDFInterpol=KDE:KDEtype=Gauss:KDEiter=Adaptive:KDEFineFactor=0.3:KDEborder=None:NAvEvtPerBin=50"" );; ; }; ; // Fisher discriminant (same as LD); if (useFischer) {; factory.BookMethod(loader, TMVA::Types::kFisher, ""Fisher"", ""H:!V:Fisher:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; }; ; //Boosted Decision Trees; if (useBDT) {; factory.BookMethod(loader,TMVA::Types::kBDT, ""BDT"",; ""!V:NTrees=200:MinNodeSize=2.5%:MaxDepth=2:BoostType=AdaBoost:AdaBoostBeta=0.5:UseBaggedBoost:BaggedSampleFraction=0.5:SeparationType=GiniIndex:nCuts=20"" );; }; ; //Multi-Layer Perceptron (Neural Network); if (useMLP) {; factory.BookMethod(loader, TMVA::Types::kMLP, ""MLP"",; ""!H:!V:NeuronType=tanh:VarTransform=N:NCycles=100:HiddenLayers=N+5:TestRate=5:!UseRegulator"" );; }; ; ; /// Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ; ; /***; ; ## Booking Deep Neural Network; ; Here we define the option string for building the Deep Neural network model.; ; #### 1. Define DNN layout; ; The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; ; We define first the DNN layout:; ; - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; In case of a dense layer as first layer the input layout should be ``1 | 1 | number of in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:62572,load,loader,62572,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['load'],['loader']
Performance," [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooWorks",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:10479,optimiz,optimization,10479,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,2,['optimiz'],['optimization']
Performance," [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:45121,load,loading,45121,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['load'],['loading']
Performance, [================>.............] - ETA: 0s - loss: 0.4291 - accuracy: 0.8060␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 24/26 [==========================>...] - ETA: 0s - loss: 0.4356 - accuracy: 0.8025; Epoch 20: val_loss did not improve from 0.44130; ␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 26/26 [==============================] - 0s 9ms/step - loss: 0.4374 - accuracy: 0.8000 - val_loss: 0.4426 - val_accuracy: 0.8062; : Getting training history for item:0 name = 'loss'; : Getting training history for item:1 name = 'accuracy'; : Getting training history for item:2 name = 'val_loss'; : Getting training history for item:3 name = 'val_accuracy'; : Elapsed time for training with 3200 events: 7.96 sec ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.273 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_PyKeras_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_PyKeras_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: BDTG for Classification; : ; BDTG : #events: (reweighted) sig: 1600 bkg: 1600; : #events: (unweighted) sig: 1600 bkg: 1600; : Training 100 Decision Trees ... patience please; : Elapsed time for training with 3200 events: 1.67 sec ; BDTG : [dataset] : Evaluation of BDTG on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.0185 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_BDTG.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:40366,Load,Loading,40366,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,2,['Load'],"['Loaded', 'Loading']"
Performance," \; 49 { \; 50 name *x=(name*)(arr[index]+ioffset); \; 51 b.WriteFastArray(x,compinfo[i]->fLength); \; 52 }; 53 ; 54#define WriteBasicArray(name) \; 55 { \; 56 WriteBasicArrayElem(name,0); \; 57 }; 58 ; 59#define WriteBasicArrayLoop(name) \; 60 { \; 61 for(int k=0; k<narr; ++k) WriteBasicArrayElem(name,k); \; 62 }; 63 ; 64#define WriteBasicPointerElem(name,index) \; 65 { \; 66 Int_t *l = (Int_t*)(arr[index]+imethod); \; 67 name **f = (name**)(arr[index]+ioffset); \; 68 name *af = *f; \; 69 if (af && *l) b << Char_t(1); \; 70 else {b << Char_t(0); continue;} \; 71 int j; \; 72 for(j=0;j<compinfo[i]->fLength;j++) { \; 73 b.WriteFastArray(f[j],*l); \; 74 } \; 75 }; 76 ; 77#define WriteBasicPointer(name) \; 78 { \; 79 int imethod = compinfo[i]->fMethod+eoffset; \; 80 WriteBasicPointerElem(name,0); \; 81 }; 82 ; 83#define WriteBasicPointerLoop(name) \; 84 { \; 85 int imethod = compinfo[i]->fMethod+eoffset; \; 86 for(int k=0; k<narr; ++k) { \; 87 WriteBasicPointerElem(name,k); \; 88 } \; 89 }; 90 ; 91// Helper function for TStreamerInfo::WriteBuffer; 92namespace {; 93 template <class T> Bool_t R__TestUseCache(TStreamerElement *element); 94 {; 95 return element->TestBit(TStreamerElement::kCache);; 96 }; 97 ; 98 template <> Bool_t R__TestUseCache<TVirtualArray>(TStreamerElement*); 99 {; 100 // We are already using the cache, no need to recurse one more time.; 101 return kFALSE;; 102 }; 103}; 104 ; 105////////////////////////////////////////////////////////////////////////////////; 106/// The object at pointer is serialized to the buffer b; 107/// if (arrayMode & 1) ptr is a pointer to array of pointers to the objects; 108/// otherwise it is a pointer to a pointer to a single object.; 109/// This also means that T is of a type such that arr[i] is a pointer to an; 110/// object. Currently the only anticipated instantiation are for T==char**; 111/// and T==TVirtualCollectionProxy; 112 ; 113template <class T>; 114Int_t TStreamerInfo::WriteBufferAux(TBuffer &b, const T &arr,; 115",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html:2824,cache,cache,2824,doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,1,['cache'],['cache']
Performance," \; 53 defined(R__FBSD) || defined(R__OBSD) || \; 54 defined(R__MACOSX) || defined(R__HURD); 55#define HAS_DIRENT; 56#endif; 57#ifdef HAS_DIRENT; 58# include <dirent.h>; 59#else; 60# include <sys/dir.h>; 61#endif; 62#if defined(ULTRIX) || defined(R__SUN); 63# include <sgtty.h>; 64#endif; 65#if defined(R__AIX) || defined(R__LINUX) || \; 66 defined(R__FBSD) || defined(R__OBSD) || \; 67 defined(R__LYNXOS) || defined(R__MACOSX) || defined(R__HURD); 68# include <sys/ioctl.h>; 69#endif; 70#if defined(R__AIX) || defined(R__SOLARIS); 71# include <sys/select.h>; 72#endif; 73#if defined(R__MACOSX); 74# include <mach-o/dyld.h>; 75# include <sys/mount.h>; 76 extern ""C"" int statfs(const char *file, struct statfs *buffer);; 77#elif defined(R__LINUX) || defined(R__HURD); 78# include <sys/vfs.h>; 79#elif defined(R__FBSD) || defined(R__OBSD); 80# include <sys/param.h>; 81# include <sys/mount.h>; 82# ifdef R__FBSD; 83# include <sys/user.h>; 84# include <sys/types.h>; 85# include <sys/param.h>; 86# include <sys/queue.h>; 87# include <libprocstat.h>; 88# include <libutil.h>; 89# endif; 90#else; 91# include <sys/statfs.h>; 92#endif; 93 ; 94#include <utime.h>; 95#include <syslog.h>; 96#include <sys/stat.h>; 97#include <setjmp.h>; 98#include <signal.h>; 99#include <sys/param.h>; 100#include <pwd.h>; 101#include <grp.h>; 102#include <errno.h>; 103#include <sys/resource.h>; 104#include <sys/wait.h>; 105#include <time.h>; 106#include <sys/time.h>; 107#include <sys/file.h>; 108#include <sys/socket.h>; 109#include <netinet/in.h>; 110#include <netinet/tcp.h>; 111#if defined(R__AIX); 112# define _XOPEN_EXTENDED_SOURCE; 113# include <arpa/inet.h>; 114# undef _XOPEN_EXTENDED_SOURCE; 115# if !defined(_AIX41) && !defined(_AIX43); 116 // AIX 3.2 doesn't have it; 117# define HASNOT_INETATON; 118# endif; 119#else; 120# include <arpa/inet.h>; 121#endif; 122#include <sys/un.h>; 123#include <netdb.h>; 124#include <fcntl.h>; 125#if defined(R__SOLARIS); 126# include <sys/systeminfo.h>; 127# include <sys/fili",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:2814,queue,queue,2814,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['queue'],['queue']
Performance," \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!; 473#ifdef __CLING__; 474# define _R_PragmaStr(x) _Pragma(#x); 475# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(cling load ( #LIBRARY )); 476# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(cling add_include_path ( #PATH )); 477# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(cling add_library_path ( #PATH )); 478#elif defined(R__WIN32); 479# define _R_PragmaStr(x) __pragma(#x); 480# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(comment(lib, #LIBRARY)); 481# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 482# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 483#else; 484// No way to inform linker though preprocessor :-(; 485// We could even inform the user:; 486/*; 487# define R__LOAD_LIBRARY(LIBRARY) \; 488 _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; 489 "". Use -L and -l instead.""); 490*/; 491# define R__LOAD_LIBRARY(LIBRARY); 492# define R__ADD_INCLUDE_PATH(PATH); 493# define R__ADD_LIBRARY_PATH(PATH); 494#endif; 495 ; 496// Convenience macros to disable cling pointer check.; 497#ifdef __CLING__; 498# define R__CLING_PTRCHECK(ONOFF) __attribute__((annotate(""__cling__ptrcheck("" #ONOFF "")""))); 499#else; 500# define R__CLING_PTRCHECK(ONOFF); 501#endif; 502 ; 503#endif; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; RtypesCore.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h_source.html:20258,load,load,20258,doc/v632/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html,1,['load'],['load']
Performance," \cond HIDDEN_SYMBOLS */ \; 466 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 467 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 468 /** \endcond */ \; 469 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 470}; 471 ; 472//---- Macro to load a library into the interpreter --------------; 473// Call as R__LOAD_LIBRARY(libEvent); 474// This macro intentionally does not take string as argument, to; 475// prevent compilation errors with complex diagnostics due to; 476// TString BAD_DO_NOT_TRY = ""lib"";; 477// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!; 478#ifdef __CLING__; 479# define _R_PragmaStr(x) _Pragma(#x); 480# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(cling load ( #LIBRARY )); 481# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(cling add_include_path ( #PATH )); 482# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(cling add_library_path ( #PATH )); 483#elif defined(R__WIN32); 484# define _R_PragmaStr(x) __pragma(#x); 485# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(comment(lib, #LIBRARY)); 486# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 487# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 488#else; 489// No way to inform linker though preprocessor :-(; 490// We could even inform the user:; 491/*; 492# define R__LOAD_LIBRARY(LIBRARY) \; 493 _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; 494 "". Use -L and -l instead.""); 495*/; 496# define R__LOAD_LIBRARY(LIBRARY); 497# define R__ADD_INCLUDE_PATH(PATH); 498# define R__ADD_LIBRARY_PATH(PATH); 499#endif; 500 ; 501// Convenience macros to disable cling pointer check.; 502#ifdef __CLING__; 503# define R__CLING_PTRCHECK(ONOFF) __attribute__((annotate(""__cling__ptrcheck("" #ONOFF "")""))); 504#else; 505# define R__CLING_PTRCHECK(ONOFF); 506#endif; 507 ; 508#endif; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; RtypesCore.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h_source.html:20679,load,load,20679,doc/master/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h_source.html,1,['load'],['load']
Performance," \return \f$ \chi^2 \f$ variable; 4177 ; 4178RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataHist &data, const RooCmdArg &arg1, const RooCmdArg &arg2,; 4179 const RooCmdArg &arg3, const RooCmdArg &arg4,; 4180 const RooCmdArg &arg5, const RooCmdArg &arg6,; 4181 const RooCmdArg &arg7, const RooCmdArg &arg8); 4182{; 4183 RooLinkedList l;; 4184 l.Add((TObject *)&arg1);; 4185 l.Add((TObject *)&arg2);; 4186 l.Add((TObject *)&arg3);; 4187 l.Add((TObject *)&arg4);; 4188 l.Add((TObject *)&arg5);; 4189 l.Add((TObject *)&arg6);; 4190 l.Add((TObject *)&arg7);; 4191 l.Add((TObject *)&arg8);; 4192 return createChi2(data, l);; 4193}; 4194 ; 4195////////////////////////////////////////////////////////////////////////////////; 4196/// \see RooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4197/// \param data hist data; 4198/// \param cmdList List with RooCmdArg() from the table; 4199 ; 4200RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); 4201{; 4202 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4203}; 4204 ; 4205////////////////////////////////////////////////////////////////////////////////; 4206/// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; 4207/// The y values can either be the event weights, or can be another column designated; 4208/// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; 4209/// be well defined.; 4210///; 4211/// <table>; 4212/// <tr><th><th> Options to control construction of the chi-square; 4213/// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; 4214/// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; 4215/// rather than take value at bin center.; 4216///; 4217/// <tr><t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:184654,Perform,Perform,184654,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['Perform'],['Perform']
Performance," _Force_ will start the additional thread even if there is only one core.; the default will be taken as kEnable.; returns 0 if there was an error, 1 otherwise. Int_t StartThreadUnzip(Int_t nthreads); The Thread is only a part of the TTreeCache but it is the part that; waits for info in the queue and process it... unfortunatly, a Thread is; not an object an we have to deal with it in the old C-Style way; Returns 0 if the thread was initialized or 1 if it was already running. Int_t StopThreadUnzip(); To stop the thread we only need to change the value of the variable; fActiveThread to false and the loop will stop (of course, we will have); to do the cleaning after that.; Note: The syncronization part is important here or we will try to delete; teh object while it's still processing the queue. void* UnzipLoop(void* arg); This is a static function.; This is the call that will be executed in the Thread generated by; StartThreadTreeCacheUnzip... what we want to do is to inflate the next; series of buffers leaving them in the second cache.; Returns 0 when it finishes. Int_t GetRecordHeader(char* buf, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read the logical record header from the buffer buf.; That must be the pointer tho the header part not the object by itself and; must contain data of at least maxbytes; Returns nread;; In output arguments:; nbytes : number of bytes in record; if negative, this is a deleted record; if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header; Note that the arguments objlen and keylen are returned only; if maxbytes >=16; Note: This was adapted from TFile... so some things dont apply. void ResetCache(); This will delete the list of buffers that are in the unzipping cache; and will reset certain values in the cache.; This name is ambiguos because the method doesn't reset the whole cache,; only the part related to the unzipping; Note: This method is co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:15316,cache,cache,15316,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,6,['cache'],['cache']
Performance," _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useCdfBoundariesAre c.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedReal.html:33033,cache,cache,33033,root/html526/RooCachedReal.html,https://root.cern,https://root.cern/root/html526/RooCachedReal.html,2,['cache'],['cache']
Performance," _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normalization is zero, nset = "" ; nset->Print(""1"") ;; 430 if(_errorCount == 10) coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "") INFO: no more messages will be printed "" << endl ;; 431 }; 432 }; 433 ; 434 return ret ;; 435}; 436 ; 437 ; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:16844,cache,cache,16844,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['cache'],['cache']
Performance," _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooListProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooUniform.html:44040,cache,cache,44040,root/html602/RooUniform.html,https://root.cern,https://root.cern/root/html602/RooUniform.html,2,['cache'],['cache']
Performance," _x, . const char * ; bname = ""cache"" . ). Construct running integral of function '_func' over x_print from the lower bound on _x to the present value of _x using a numeric sampling technique. ; The sampling frequency is controlled by the binning named 'bname' and a default second order interpolation is applied to smooth the histogram-based c.d.f. ; Definition at line 51 of file RooNumRunningInt.cxx. ◆ RooNumRunningInt() [2/2]. RooNumRunningInt::RooNumRunningInt ; (; const RooNumRunningInt & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 66 of file RooNumRunningInt.cxx. ◆ ~RooNumRunningInt(). RooNumRunningInt::~RooNumRunningInt ; (; ). override . Destructor. ; Definition at line 79 of file RooNumRunningInt.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooNumRunningInt::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return observable in nset to be cached by RooAbsCachedPdf this is always the x observable that is integrated. ; Implements RooAbsCachedReal.; Definition at line 260 of file RooNumRunningInt.cxx. ◆ actualParameters(). RooFit::OwningPtr< RooArgSet > RooNumRunningInt::actualParameters ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return the parameters of the cache created by RooAbsCachedPdf. ; These are always the input functions parameter, but never the integrated variable x. ; Implements RooAbsCachedReal.; Definition at line 274 of file RooNumRunningInt.cxx. ◆ binningName(). const char * RooNumRunningInt::binningName ; (; ); const. inlineoverrideprotectedvirtual . Reimplemented from RooAbsCachedReal.; Definition at line 47 of file RooNumRunningInt.h. ◆ Class(). static TClass * RooNumRunningInt::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumRunningInt::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumRunnin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumRunningInt.html:64288,cache,cached,64288,doc/master/classRooNumRunningInt.html,https://root.cern,https://root.cern/doc/master/classRooNumRunningInt.html,1,['cache'],['cached']
Performance," `TResultProxy` (they are executed one after the other in the; // same order as they were registered). We now request that the partial result is drawn and the TBrowser's TPad is; // updated every 50 events.; h.OnPartialResult(50, [&browserPad](TH1D &hist) {; if (!browserPad); return; // in case root -b was invoked; browserPad->cd();; hist.Draw();; browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:4537,concurren,concurrent,4537,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,1,['concurren'],['concurrent']
Performance," a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetUnzipBufferSize (Long64_t bufferSize);  Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ;  ; void SetUnzipGroupSize (Int_t groupSize);  ; void StopLearningPhase () override;  It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t UnzipBuffer (char **dest, char *src);  Unzips a ROOT specific buffer... by reading the header at the beginning. ;  ; Int_t UnzipCache (Int_t index);  This inflates a basket in the cache. ;  ; void UpdateBranches (TTree *tree) override;  update pointer to current Tree and recompute pointers to the branches in the cache ;  ;  Public Member Functions inherited from TTreeCache;  TTreeCache ();  Default Constructor. ;  ;  TTreeCache (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCache () override;  Destructor. (in general called by the TFile destructor) ;  ; virtual void Disable ();  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:3615,cache,cache,3615,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['cache'],['cache']
Performance," a class that is known to ROOT, e.g. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const;  ; Bool_t IsEscaped () const;  ; Bool_t IsExecutingMacro () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsInterrupted () const;  ; Bool_t IsLineProcessing () const;  ; Bool_t IsProofServ () const;  ; Bool_t IsRootFile (const char *filename) const;  Return true if the file is local and is (likely) to be a ROOT file. ;  ; Bool_t IsWebDisplay () const;  ; Bool_t IsWebDisplayBatch () const;  ; Int_t LoadClass (const char *classname, const char *libname, Bool_t check=kFALSE);  Check if class ""classname"" is known to the interpreter (in fact, this check is not needed anymore, so classname is ignored). ;  ; TClass * LoadClass (const char *name, Bool_t silent=kFALSE) const;  Helper function used by TClass::GetClass(). ;  ; Int_t LoadMacro (const char *filename, Int_t *error=nullptr, Bool_t check=kFALSE);  Load a macro in the interpreter's memory. ;  ; void ls (Option_t *option="""") const override;  To list all objects of the application. ;  ; Longptr_t Macro (const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE);  Execute a macro in the interpreter. ;  ; TCanvas * MakeDefCanvas () const;  Return a default canvas. ;  ; void Message (Int_t id, const TObject *obj);  Process message id called by obj. ;  ; Bool_t MustClean () const;  ; Longptr_t ProcessLine (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Longptr_t ProcessLineFast (const char *line, Int_t *error=nullptr);  Process interpreter command directly via CINT interpreter. ;  ; Longptr_t ProcessLineSync (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Bool_t ReadingObject () const;  Deprecated (will be removed in next release). ;  ; void RecursiveRemove (TObject *obj) override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:10437,Load,LoadMacro,10437,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,4,['Load'],"['Load', 'LoadMacro']"
Performance," a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166107,cache,cache,166107,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['cache'],['cache']
Performance," a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . Public Member Functions;  TFormLeafInfo (const TFormLeafInfo &orig);  Constructor. ;  ;  TFormLeafInfo (TClass *classptr=nullptr, Longptr_t offset=0, TStreamerElement *element=nullptr);  Constructor. ;  ;  ~TFormLeafInfo () override;  Delete this object and all its content. ;  ; virtual void AddOffset (Int_t offset, TStreamerElement ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:1612,load,loading,1612,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['load'],['loading']
Performance," a dot ('.') at the end of the Branch creation; and use the corresponding regular expression. I.e If your Tree has been created in split mode with a parent branch ""parent.""; (note the trailing dot).; T.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; T.SetBranchStatus(""parent*"",1);. Without the trailing dot in the branch creation you have no choice but to; call SetBranchStatus explicitly for each of the sub branches. An alternative to this function is to read directly and only; the interesting branches. Example:; TBranch *brc = T.GetBranch(""c"");; TBranch *bre = T.GetBranch(""e"");; brc->GetEntry(i);; bre->GetEntry(i);. If found is not 0, the number of branch(es) found matching the regular; expression is returned in *found AND the error message 'unknown branch'; is suppressed. void SetBranchStyle(Int_t style = 1); Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. void SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes).; WARNING: Currently only ONE TTree object can be 'cached' per TFile object.; This call disable the cache for the other TTree objects read from the same; TFile object as this TTree (The SetCacheSize called __last__ wins).; To cache multiple TTree objects in the same ROOT file, you must create; one TFile object per TTree object. void SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:119634,cache,cachesize,119634,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,4,['cache'],"['cache', 'cachesize']"
Performance," a file was not specified, try to load the class via the interpreter;; 168 // this returns 0 (== failure) in the case the class is already in memory; 169 // but does not have a dictionary, so we just raise a flag for better; 170 // diagnostic in the case the class is not found in the CINT ClassInfo table.; 171 bool autoloaderr = false;; 172 if (!fromFile && gCling->AutoLoad(localname) != 1); 173 autoloaderr = true;; 174 ; 175 TClass *selCl = TClass::GetClass(localname);; 176 if (selCl) {; 177 // We have all we need.; 178 auto offset = selCl->GetBaseClassOffset(TSelector::Class());; 179 if (offset == -1) {; 180 // TSelector is not a based class.; 181 if (fromFile); 182 ::Error(""TSelector::GetSelector"",; 183 ""The class %s in file %s does not derive from TSelector."", localname.Data(), filename);; 184 else if (autoloaderr); 185 ::Error(""TSelector::GetSelector"", ""class %s could not be loaded"", filename);; 186 else; 187 ::Error(""TSelector::GetSelector"",; 188 ""class %s does not exist or does not derive from TSelector"", filename);; 189 return nullptr;; 190 }; 191 char *result = (char*)selCl->New();; 192 // By adding offset, we support the case where TSelector is not the; 193 // ""left-most"" base class (i.e. offset != 0); 194 return (TSelector*)(result+offset);; 195 ; 196 } else {; 197 ClassInfo_t *cl = gCling->ClassInfo_Factory(localname);; 198 bool ok = false;; 199 bool nameFound = false;; 200 if (cl && gCling->ClassInfo_IsValid(cl)) {; 201 if (localname == gCling->ClassInfo_FullName(cl)) {; 202 nameFound = true;; 203 if (gCling->ClassInfo_IsBase(cl,""TSelector"")) ok = true;; 204 }; 205 }; 206 if (!ok) {; 207 if (fromFile) {; 208 if (nameFound) {; 209 ::Error(""TSelector::GetSelector"",; 210 ""The class %s in file %s does not derive from TSelector."", localname.Data(), filename);; 211 } else {; 212 ::Error(""TSelector::GetSelector"",; 213 ""The file %s does not define a class named %s."", filename, localname.Data());; 214 }; 215 } else {; 216 if (autoloaderr); 217 ::Error(""TSelector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:7784,load,loaded,7784,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['load'],['loaded']
Performance," a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; ; # - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; # convergence; ; # - For the MaxPool layer:; # - MAXPOOL | pool height | pool width | stride height | stride width; ; # The RESHAPE layer is needed to flatten the output before the Dense layer; ; # Note that to run the CNN is required to have CPU or GPU support; ; ; if useTMVACNN:; # Training strategies.; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0""; ); trainingString1 += "",MaxEpochs="" + str(max_epochs); ; ## New DL (CNN); cnnMethodName = ""TMVA_CNN_CPU""; cnnOptions = ""CPU""; # use GPU if available; if hasGPU:; cnnOptions = ""GPU""; cnnMethodName = ""TMVA_CNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; cnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; InputLayout=""1|16|16"",; Layout=""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"",; TrainingStrategy=trainingString1,; Architecture=cnnOptions,; ); ; ; ### Book Convolutional Neural Network in Keras using a generated model; ; ; if usePyTorchCNN:; ROOT.Info(""TMVA_CNN_Classification"", ""Using Convolutional PyTorch Model""); pyTorchFileName = str(ROOT.gROOT.GetTutorialDir()); pyTorchFileName += ""/tmva/PyTorch_Generate_CNN_Model.py""; # check that pytorch can be imported and file defining the model exists; torch_spec = importlib.util.find_spec(""torch""); if torch_spec is not None and os.path.exists(pyTorchFileName):; #cmd = str(ROOT.TMVA.Python_Executable()) + "" "" + pyTorchFileName; #os.system(cmd); #import PyTorch_Generate_CNN_Model; ROOT.Info(""TMVA_CNN_Classification"", ""Booking PyTorch ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:12507,load,loader,12507,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['load'],['loader']
Performance," a function with only one parameter, call this function with p1=0.; Minimum two arguments are required to differentiate this function; from the SetParameters(cont Double_t *params). void SetParName(Int_t ipar, const char* name); Set name of parameter number ipar. void SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10""); Set up to 10 parameter names*-*-*-*-*-; *-* ============================. void Streamer(TBuffer& b); Stream a class object*-*-*-*-*-*-*-; *-* =========================================. void Convert(UInt_t fromVersion); Convert the fOper of a TFormula version fromVersion to the current in memory version. void MakePrimitive(const char* expr, Int_t pos). MakePrimitive; find TFormulaPrimitive replacement for some operands. void Optimize(). MI include. Optimize formula; 1.) Minimize the number of operands; a.) several operanands are glued togther; b.) some primitive functions glued together - exemp. (x+y) => PlusXY(x,y); c.) maximize number of standard calls minimizing number of jumps in Eval cases; d.) variables, parameters and constants are mapped - using fOperOfssets0; Eval procedure use direct acces to data (only one corresponding case statement in eval procedure). pdata[operand={Var,Par,Const}][offset]; pdata[fOperOffsets0[i]][fOperOffset1[i+1]]; 2.) The fastest evaluation function is choosen at the end; a.) fOptimal := pointer to the fastest function for given evaluation string; switch(GetActionOptimized(0)){; case kData : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive0; break;}; case kUnary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive1; break;}; case kBinary : {fOptimal= (TFormulaPrimitive::TFuncG)&TFormula::EvalPrimitive2; break;}; case kThree : {fOptimal= (TFormulaPrim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:29986,Optimiz,Optimize,29986,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,3,['Optimiz'],['Optimize']
Performance," a library based on a missing symbol. ;  ; void LibraryLoaded (const void *dyLibHandle, const char *canonicalName);  ; bool LibraryLoadingFailed (const std::string &, const std::string &, bool, bool);  ; void LibraryUnloaded (const void *dyLibHandle, const char *canonicalName);  ; Int_t Load (const char *filenam, Bool_t system=kFALSE) final;  Load a library file in cling's memory. ;  ; void LoadEnums (TListOfEnums &cl) const final;  Create list of pointers to enums for TClass cl. ;  ; int LoadFile (const char *path) const final;  Load a source file or library called path into the interpreter. ;  ; virtual void LoadFunctionTemplates (TClass *cl) const final;  Create list of pointers to function templates for TClass cl. ;  ; Int_t LoadLibraryMap (const char *rootmapfile=nullptr) final;  Load map between class and library. ;  ; void LoadMacro (const char *filename, EErrorCode *error=nullptr) final;  Load a macro file in cling's memory. ;  ; Bool_t LoadText (const char *text) const final;  Load the declarations from text into the interpreter. ;  ; std::unique_ptr< TInterpreterValue > MakeInterpreterValue () const final;  ; const char * MapCppName (const char *) const final;  Interface to cling function. ;  ; const char * MethodArgInfo_DefaultValue (MethodArgInfo_t *marginfo) const final;  ; void MethodArgInfo_Delete (MethodArgInfo_t *marginfo) const final;  ; MethodArgInfo_t * MethodArgInfo_Factory () const final;  ; MethodArgInfo_t * MethodArgInfo_Factory (MethodInfo_t *minfo) const final;  ; MethodArgInfo_t * MethodArgInfo_FactoryCopy (MethodArgInfo_t *marginfo) const final;  ; bool MethodArgInfo_IsValid (MethodArgInfo_t *marginfo) const final;  ; const char * MethodArgInfo_Name (MethodArgInfo_t *marginfo) const final;  ; int MethodArgInfo_Next (MethodArgInfo_t *marginfo) const final;  ; Long_t MethodArgInfo_Property (MethodArgInfo_t *marginfo) const final;  ; TypeInfo_t * MethodArgInfo_TypeInfo (MethodArgInfo_t *marginfo) const;  ; const char * MethodArgInfo_TypeName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:24302,Load,LoadText,24302,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,2,['Load'],"['Load', 'LoadText']"
Performance," a link from file1 to file2. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1359 of file TSystem.cxx. ◆ ListLibraries(). void TSystem::ListLibraries ; (; const char * ; regexp = """"). virtual . List the loaded shared libraries. ; regexp is a regular expression allowing to filter the list.; Examples:; The following line lists all the libraries currently loaded: gSystem->ListLibraries(); TSystem::ListLibrariesvirtual void ListLibraries(const char *regexp="""")List the loaded shared libraries.Definition TSystem.cxx:2085; The following line lists all the libraries currently loaded having ""RIO"" in their names: gSystem->ListLibraries("".*RIO.*""). Reimplemented in TUnixSystem.; Definition at line 2085 of file TSystem.cxx. ◆ ListSymbols(). void TSystem::ListSymbols ; (; const char * ; module, . const char * ; re = """" . ). virtual . List symbols in a shared library. ; Reimplemented in TUnixSystem.; Definition at line 2064 of file TSystem.cxx. ◆ Load(). int TSystem::Load ; (; const char * ; module, . const char * ; entry = """", . Bool_t ; system = kFALSE . ). virtual . Load a shared library. ; Returns 0 on successful loading, 1 in case lib was already loaded, -1 in case lib does not exist or in case of error and -2 in case of version mismatch. When entry is specified the loaded lib is searched for this entry point (return -1 when entry does not exist, 0 otherwise). When the system flag is kTRUE, the library is considered a permanent system library that should not be unloaded during the course of the session. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1857 of file TSystem.cxx. ◆ LoadAllLibraries(). UInt_t TSystem::LoadAllLibraries ; (; ). virtual . Load all libraries known to ROOT via the rootmap system. ; Returns the number of top level libraries successfully loaded. ; Definition at line 1970 of file TSystem.cxx. ◆ MakeDirectory(). int TSystem::MakeDirectory ; (; const char * ; name). virtual . Make a directory. ; Returns 0 in case",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:72975,Load,Load,72975,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['Load'],['Load']
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:38330,optimiz,optimizeCacheMode,38330,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,6,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:46234,optimiz,optimizeCacheMode,46234,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,27,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:48152,optimiz,optimizeCacheMode,48152,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,21,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:33279,optimiz,optimizeCacheMode,33279,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,405,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:12827,perform,performed,12827,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,3,['perform'],['performed']
Performance," a new canvas window in the current ROOT session.; Open…: popup a dialog to open a file.; Close Canvas: close the canvas window.; Save: save the drawing of the current canvas in a format selectable from the submenu. The current canvas name is used as a file name for various formats such as PostScript, GIF, JPEG, C macro file, root file.; Save As…: popup a dialog for saving the current canvas drawing in a new filename.; Print: popup a dialog to print the current canvas drawing; Quit ROOT: exit the ROOT session. 2.3.1.2 Edit Menu; There is only one active menu entry in the Edit menu. The others menu entries will be implemented and will become active in the near future. Clear: delete all objects in the canvas or in the selected pad according to the selected entry in the submenu. 2.3.1.3 View Menu. Editor: toggles the view of the editor. If it is selected activates and shows up the editor on the left side of the canvas window. According to the selected object, the editor loads the corresponding user interface for easy change of the object’s attributes.; Toolbar: toggles the view of the toolbar. If it is selected activates and shows up the toolbar. It contains buttons for easy and fast access to most frequently used commands and for graphics primitive drawing. Tool tips are provided for helping users.; Status Bar: toggles the view of the status bar. If it is selected, the status bar below the canvas window shows up. There the identification of the objects is displayed when moving the mouse (such as the object’s name, the object’s type, its coordinates, etc.).; Colors: creates a new canvas showing the color palette.; Markers: creates a new canvas showing the various marker styles.; Iconify: create the canvas window icon, does not close the canvas; View With…: If the last selected pad contains a 3-d structure, a new canvas is created with a 3-D picture according to the selection made from the cascaded menu: X3D or OpenGL. The 3-D image can be interactively rotated, zoomed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:38262,load,loads,38262,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loads']
Performance," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:3368,perform,performed,3368,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['perform'],['performed']
Performance," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:3369,perform,performed,3369,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['perform'],['performed']
Performance," able to see a canvas with two pads on it. Both pads keep histograms updated and filled by three different threads. With the CalcPi example, you should be able to see two threads calculating Pi with the given number of intervals as precision.; 23.2.4 TThread in More Details; Cling is not thread safe yet, and it will block the execution of the threads until it has finished executing.; 23.2.4.1 Asynchronous Actions; Different threads can work simultaneously with the same object. Some actions can be dangerous. For example, when two threads create a histogram object, ROOT allocates memory and puts them to the same collection. If it happens at the same time, the results are undetermined. To avoid this problem, the user has to synchronize these actions with:; TThread::Lock() // Locking the following part of code; ... // Create an object, etc...; TThread::UnLock() // Unlocking; The code between Lock() and UnLock() will be performed uninterrupted. No other threads can perform actions or access objects/collections while it is being executed. The methods TThread::Lock()and TThread::UnLock() internally use a global TMutex instance for locking.; The user may also define their own TMutex MyMutex instance and may locally protect their asynchronous actions by calling MyMutex.Lock() and MyMutex.UnLock().; 23.2.4.2 Synchronous Actions: TCondition; To synchronize the actions of different threads you can use the TCondition class, which provides a signaling mechanism. The TCondition instance must be accessible by all threads that need to use it, i.e. it should be a global object (or a member of the class which owns the threaded methods, see below). To create a TCondition object, a TMutex instance is required for the Wait and TimedWait locking methods. One can pass the address of an external mutex to the TCondition constructor:; TMutex MyMutex;; TCondition MyCondition(&MyMutex);; If zero is passed, TCondition creates and uses its own internal mutex:; TCondition MyCondition(0);; You can n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1107759,perform,perform,1107759,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['perform']
Performance," able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDelTextCom() [1/2]. TDelTextCom::TDelTextCom ; (; TGTextEdit * ; te, . TGText * ; txt . ). inline . Definition at line 192 of file TGTextEdit.cxx. ◆ TDelTextCom() [2/2]. TDelTextCom::TDelTextCom ; (; const TDelTextCom & ; dtc). inline . Definition at line 196 of file TGTextEdit.cxx. ◆ ~TDelTextCom(). TDelTextCom::~TDelTextCom ; (; ). inlineoverride . Definition at line 200 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TDelTextCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 217 of file TGTextEdit.cxx. ◆ operator=(). TDelTextCom & TDelTextCom::operator= ; (; const TDelTextCom & ; dtc). inline . Definition at line 202 of file TGTextEdit.cxx. ◆ SetBreakLine(). void TDelTextCom::SetBreakLine ; (; Bool_t ; on). inline . Definition at line 215 of file TGTextEdit.cxx. ◆ SetEndPos(). void TDelTextCom::SetEndPos ; (; TGLongPosition ; end). inline . Definition at line 211 of file TGTextEdit.cxx. Member Data Documentation. ◆ fBreakLine. Bool_t TDelTextCom::fBreakLine. private . Definition at line 189 of file TGTextEdit.cxx. ◆ fEndPos. TGLongPosition TDelTextCom::fEndPos. private . Definition at line 188 of file TGTextEdit.cxx. ◆ fText. TGText* TDelTextCom::fText. private . Definition at line 187 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TDelTextCom. ROOT master - Reference Guide Gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelTextCom.html:10999,load,load,10999,doc/master/classTDelTextCom.html,https://root.cern,https://root.cern/doc/master/classTDelTextCom.html,2,['load'],['load']
Performance," access all members of the Myclass instance from the Thread0 function.; Note: Method Thread0 cannot be a virtual member function, since the cast of Thread0 to void(*) in the TThread constructor may raise problems with C++ virtual function table. However, Thread0 may call another virtual member function virtual void Myclass::Func0() which then can be overridden in a derived class of Myclass. (See example TMhs3).; Class Myclass may also provide a method to stop the running thread:; Int_t Myclass::Threadstop() {; if (mTh) {; TThread::Delete(mTh);; delete mTh;; mTh=0;; return 0;; }; return 1;; }; Example TMhs3: Class TThreadframe (TThreadframe.h, TThreadframe.cxx) is a simple example of a framework class managing up to four threaded methods. Class TMhs3 (TMhs3.h, TMhs3.cxx) inherits from this base class, showing the mhs3 example 8.1 (mhs3.h, mhs3.cxx)within a class. The Makefile of this example builds the shared libraries libTThreadframe.so and libTMhs3.so. These are either loaded or executed by the ROOT script TMhs3demo.C, or are linked against an executable: TMhs3run.cxx.; 23.3.1 Known Problems; Parts of the ROOT framework, like the interpreter, are not yet thread-safe. Therefore, you should use this package with caution. If you restrict your threads to distinct and `simple’ duties, you will able to benefit from their use. The TThread class is available on all platforms, which provide a POSIX compliant thread implementation. On Linux, Xavier Leroy’s Linux Threads implementation is widely used, but the TThread implementation should be usable on all platforms that provide pthread.; Linux Xlib on SMP machines is not yet thread-safe. This may cause crashes during threaded graphics operations; this problem is independent of ROOT.; Object instantiation: there is no implicit locking mechanism for memory allocation and global ROOT lists. The user has to explicitly protect their code when using them.; 23.4 The Signals of ROOT; The list of default signals handled by ROOT is:; k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1116814,load,loaded,1116814,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save sel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:43517,Cache,Cache,43517,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['Cache'],['Cache']
Performance," address of color with index color. ;  ; const char * GetConfigFeatures () const;  ; const char * GetConfigOptions () const;  ; const char * GetCutClassName () const;  ; const char * GetDefCanvasName () const;  ; Bool_t GetEditHistograms () const;  ; Int_t GetEditorMode () const;  ; TFile * GetFile () const override;  ; TFile * GetFile (const char *name) const;  Return pointer to file with name. ;  ; Bool_t GetForceStyle () const;  ; TObject * GetFunction (const char *name) const;  Return pointer to function with name. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; TObject * GetGeometry (const char *name) const;  Return pointer to Geometry with name. ;  ; const char * GetGitBranch () const;  ; const char * GetGitCommit () const;  ; const char * GetGitDate ();  Return date/time make was run. ;  ; TGlobal * GetGlobal (const char *name, Bool_t load=kFALSE) const;  Return pointer to global variable by name. ;  ; TGlobal * GetGlobal (const TObject *obj, Bool_t load=kFALSE) const;  Return pointer to global variable with address addr. ;  ; TFunction * GetGlobalFunction (const char *name, const char *params=nullptr, Bool_t load=kFALSE);  Return pointer to global function by name. ;  ; TFunction * GetGlobalFunctionWithPrototype (const char *name, const char *proto=nullptr, Bool_t load=kFALSE);  Return pointer to global function by name. ;  ; TInterpreter * GetInterpreter () const;  ; TList * GetListOfBrowsables () const;  ; TSeqCollection * GetListOfBrowsers () const;  ; TSeqCollection * GetListOfCanvases () const;  ; TCollection * GetListOfClasses () const;  ; TCollection * GetListOfClassGenerators () const;  ; TSeqCollection * GetListOfCleanups () const;  ; TSeqCollection * GetListOfClosedObjects () const;  ; TSeqCollection * GetListOfColors () const;  ; TSeqCollection * GetListOfDataSets () const;  ; TCollection * GetListOfEnums (Bool_t load=kFALSE);  ; TSeqCollection * GetListOfFiles () const;  ; TCollection * GetListOfFunctionOverloads (const char *n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:6452,load,load,6452,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,2,['load'],['load']
Performance," address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. TClassStreamer(ClassStreamerFunc_t pointer); virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass). protected:. TClassStreamer(); TClassStreamer(const TClassStreamer& rhs); TClassStreamer&operator=(const TClassStreamer& rhs). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(const TClassStreamer& rhs); {}. TClassStreamer & operator=(const TClassStreamer& rhs); { fOnFileClass = rhs.fOnFileClass; fStreamer = rhs.fStreamer; return *this; }. TClassStreamer(ClassStreamerFunc_t pointer); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClassStreamer.html:1884,optimiz,optimize,1884,root/html534/TClassStreamer.html,https://root.cern,https://root.cern/root/html534/TClassStreamer.html,1,['optimiz'],['optimize']
Performance," address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass); TClassStreamer(ClassStreamerFunc_t pointer). protected:. TClassStreamer&operator=(const TClassStreamer& rhs); TClassStreamer(); TClassStreamer(const TClassStreamer& rhs). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(const TClassStreamer& rhs); {}. TClassStreamer & operator=(const TClassStreamer& rhs); { fOnFileClass = rhs.fOnFileClass; fStreamer = rhs.fStreamer; return *this; }. TClassStreamer(ClassStreamerFunc_t pointer); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassStreamer.html:1884,optimiz,optimize,1884,root/html602/TClassStreamer.html,https://root.cern,https://root.cern/root/html602/TClassStreamer.html,1,['optimiz'],['optimize']
Performance," address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass); TClassStreamer(ClassStreamerFunc_t pointer). protected:. TClassStreamer&operator=(const TClassStreamer& rhs); TClassStreamer(); TClassStreamer(const TClassStreamer& rhs). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(const TClassStreamer& rhs); {}. TClassStreamer & operator=(const TClassStreamer& rhs); { fOnFileClass = rhs.fOnFileClass; fStreamer = rhs.fStreamer; return *this; }. TClassStreamer(ClassStreamerFunc_t pointer); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClassStreamer.html:1884,optimiz,optimize,1884,root/html604/TClassStreamer.html,https://root.cern,https://root.cern/root/html604/TClassStreamer.html,1,['optimiz'],['optimize']
Performance," algorithm should be written in Python: it's terribly hard to convert it into C++, and it's incredibly slow in Python (ask the Google developers about youtube).; So C++ is not a good interpreted language, mainly due to its syntactic verbosity and its lack of dynamic interfaces and reflection capabilities - think; const std::type_info& ti = std::type_info::lookup(""MyClass"");; MyBase* ptr = ti.default_construct();; And Python is not appropriate for many use cases due to its lack of type safety and speed, and its lack of native binding to C++. Then which other language should we use?; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Hi Alex, . Hi Alex,; Very good points but let me try to defend python. I have found that a following approach (used by ATLAS that I also adopted in my private code) works fantastically well:; -- Use python to read configuration, find input files, etc;; -- Write performance critical code in C++;; -- Create C++ objects in python (relying on ROOT for dictionary support);; -- Pass configuration from python to C++;; -- Do calculations in C++;; -- Return results to python for processing, ploting, etc;; -- Run entire plot making code in python for stacking, labeling, etc.; Granted, this is probably a more complex approach than most of us in physics are willing to tolerate. I suspect that you do not have much choice since the user community wants CINT-like functionality from ROOT (and one feature of the ROOT project that makes it great is a full consideration of what experiments and users need for data taking and analysis).; Thanks for the interesting discussion! I have learned quite a bit about ROOT plans and it all seems very promising. Cheers!. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . Dependency on Python . In my experience, getting python scripts to work is a very unreliable affair. They almost always have dependencies on external packages and if you don't have EXACTLY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:17846,perform,performance,17846,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['perform'],['performance']
Performance," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:1378,perform,performances,1378,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,1,['perform'],['performances']
Performance," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:1380,perform,performances,1380,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,2,['perform'],['performances']
Performance," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html:1378,perform,performances,1378,root/html528/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html,4,['perform'],['performances']
Performance," all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables. More...;  ; class  RooCategory;  Object to represent discrete states. More...;  ; class  RooChangeTracker;  Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. More...;  ; class  RooChi2Var;  Simple \( \chi^2 \) calculation from a binned dataset and a PDF. More...;  ; class  RooClassFactory;  Similar to TTree::MakeClass(), generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names. More...;  ; class  RooCmdArg;  Named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods. More...;  ; class  RooCmdConfig;  Configurable par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:6011,cache,cache,6011,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['cache'],['cache']
Performance," all members ; ROOT::Experimental::Internal::RVirtualCanvasPainter Class ReferenceabstractGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Abstract interface for painting a canvas. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2017-05-31 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 36 of file RVirtualCanvasPainter.hxx. Classes; class  Generator;  . Public Member Functions; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  ; virtual bool AddPanel (std::shared_ptr< ROOT::RWebWindow >);  ; virtual void CanvasUpdated (uint64_t, bool, CanvasCallback_t)=0;  indicate that canvas changed, provides current version of the canvas ;  ; virtual void DoWhenReady (const std::string &, const std::string &, bool, CanvasCallback_t)=0;  perform special action when drawing is ready ;  ; virtual std::string GetWindowAddr () const =0;  ; virtual std::string GetWindowUrl (bool remote)=0;  ; virtual bool IsCanvasModified (uint64_t) const =0;  return true if canvas modified since last painting ;  ; virtual void NewDisplay (const std::string &where)=0;  ; virtual int NumDisplays () const =0;  ; virtual bool ProduceBatchOutput (const std::string &, int, int)=0;  produce file output in batch mode like png, jpeg, svg or pdf ;  ; virtual std::string ProduceJSON ()=0;  produce canvas JSON ;  ; virtual void Run (double tm=0.)=0;  run canvas functionality in caller thread, not needed when main thread is used ;  ; virtual void SetClearOnClose (const std::shared_ptr< void > &);  . Static Public Member Functions; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  . Static Protected Member Functions; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . #include <ROOT/RVirtualCanvasPainter.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RVirtualCanvasPainter:. This bro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html:1157,perform,perform,1157,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,1,['perform'],['perform']
Performance," all other parameters which is most strongly correlated with i. ; Minimizer must overload method if implemented ; Reimplemented in ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 161 of file Minimizer.cxx. ◆ Hesse(). bool ROOT::Math::Minimizer::Hesse ; (; ). virtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 185 of file Minimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::Minimizer::IsFixedVariable ; (; unsigned int ; ivar); const. virtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented in ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 102 of file Minimizer.cxx. ◆ IsValidError(). bool ROOT::Math::Minimizer::IsValidError ; (; ); const. inline . return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ; Definition at line 320 of file Minimizer.h. ◆ MaxFunctionCalls(). unsigned int ROOT::Math::Minimizer::MaxFunctionCalls ; (; ); const. inline . max number of function calls ; Definition at line 294 of file Minimizer.h. ◆ MaxIterations(). unsigned int ROOT::Math::Minimizer::MaxIterations ; (; ); const. inline . max iterations ; Definition at line 297 of file Minimizer.h. ◆ MinGradient(). virtual const double * ROOT::Math::Minimizer::MinGradient ; (; ); const. inlinevirtual . return pointer to gradient values at the minimum ; Reimplemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, TLinearMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 225 of file Minimizer.h. ◆ Minimize(). virtual bool ROOT::Math::Minimizer::Minimize ; (; ). pure virtual . method to perform the minimization ; Implemented in TFumiliMinimizer, ROOT::Math::Genetic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:21052,perform,performed,21052,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['perform'],['performed']
Performance," all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. RooCacheManager<RooAbsCacheElement>(Int_t maxSize = 10); RooCacheManager<RooAbsCacheElement>(RooAbsArg* owner, Int_t maxSize = 10); RooCacheManager<RooAbsCacheElement>(const RooCacheManager<RooAbsCacheElement>& other, RooAbsArg* owner = 0); virtual~RooCacheManager<RooAbsCacheElement>(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<RooAbsCacheElement>&operator=(const RooCacheManager<RooAbsCacheElement>&); virtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html:2278,optimiz,optimizeCacheMode,2278,root/html526/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html,1,['optimiz'],['optimizeCacheMode']
Performance," all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ; bool HasParameterHessian () const override;  ; bool ParameterG2 (const T *, const double *, T *) const override;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; const TF1 * GetFunction () const;  method to retrieve the internal function pointer ;  ; void SetAndCopyFunction (const TF1 *f=nullptr);  method to set a new function pointer and copy it inside. ;  ; static void SetDerivPrecision (double eps);  precision value used for calculating the derivative step-size h = eps * |x|. ;  ; static double GetDerivPrecision ();  get precision value used for calculating the derivative step-size ;  ; T DoEvalPar (const T *x, const double *p) const override;  evaluate function passing coordinates x and vector of parameters ;  ; T DoEvalVec (const T *x) const;  evaluate function using the cached parameter values (of TF1) re-implement for better efficiency ;  ; T DoEval (const T *x) const override;  evaluate function using the cached parameter values (of TF1) re-implement for better efficiency ;  ; T DoParameterDerivative (const T *x, const double *p, unsigned int ipar) const override;  evaluate the partial derivative with respect to the parameter ;  . #include <Math/WrappedMultiTF1.h>. Inheritance diagram for ROOT::Math::WrappedMultiTF1Templ< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef ROOT::Math::IParametricFunctionMultiDimTempl<T>::BaseFunc ROOT::Math::WrappedMultiTF1Templ< T >::BaseFunc. Definition at line 53 of file WrappedMultiTF1.h. ◆ BaseParamFunc. template<class T > . typedef ROOT::Math::IParametricGradFunctionMultiDimTempl<T> ROOT::Math::WrappedMultiTF1Templ< T >::BaseParamFunc. Definition at line 52 of file WrappedMultiTF1.h. Constructor & Destructor Documentation. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html:5392,cache,cached,5392,doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,2,['cache'],['cached']
Performance," all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedPdf(const RooCachedPdf& other, const char* name = 0); Copy constructor. ~RooCachedPdf(); Destructor. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cachePdf) const; Update contents of cache histogram by resampling the input p.d.f. Note that; the cache is filled with normalized p.d.f values so that the RooHistPdf; that represents the cache contents can be explicitly declared as self normalized; eliminating the need for superfluous numeric calculations of unit normalization.s. void preferredObservableScanOrder(const RooArgSet& obs, RooArgSet& orderedObs) const; Defer preferred scan order to cached pdf prefernece. RooArgSet* actualObservables(const RooArgSet& nset) const; If this pdf is operated with a fixed set of observables, return; the subset of the fixed observables that are actual dependents; of the external input p.d.f. If this p.d.f is operated without; a fixed set of cache observables, return the actual observables; of the external input p.d.f given the choice of observables defined; in nset. RooArgSet* actualParameters(const RooArgSet& nset) const; If this p.d.f is operated with a fixed set of observables, return; all variables of the external input p.d.f that are not one of; the cache observables. If this p.d.f is operated in automatic mode,; return the parameters of the external input p.d.f. RooCachedPdf(); {}. TObject* clone(const char* newname) const; { return new RooCachedPdf(*this,newname); }. const char* inputBaseName() const; Return the base name for cache objects, in this case the name of the cached p.d.f. Double_t evaluate() const; Dummy evaluate, it is never called. » Last changed: Mon Dec 7 13:47:01 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:43282,cache,cache,43282,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,4,['cache'],"['cache', 'cached']"
Performance," alpha = 1.); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMatrixTSub<double>(); TMatrixTSub<double>(const TMatrixTSub<double>& ms); TMatrixTSub<double>(TMatrixT<double>& matrix, Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb); TMatrixTSub<double>(TMatrixTSym<double>& matrix, Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb). Data Members; public:. static TMatrixTSub<double>::(anonymous)kWorkMax. protected:. Int_tTMatrixTSub_const<double>::fColOff; TMatrixTBase<double>*TMatrixTSub_const<double>::fMatrixthe matrix I am a submatrix of; Int_tTMatrixTSub_const<double>::fNcolsSub; Int_tTMatrixTSub_const<double>::fNrowsSub; Int_tTMatrixTSub_const<double>::fRowOff. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TMatrixTSub<Element> Rank1Update(const TVectorT<double>& vec, double alpha = 1.); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. void TMatrixTSub<Element> operator=(Element val); Assign val to every element of the sub matrix. void TMatrixTSub<Element> operator+=(Element val); Add val to every element of the sub matrix. void TMatrixTSub<Element> operator*=(Element val); Multiply every element of the sub matrix by val . void TMatrixTSub<Element> operator=(const TMatrixTSub_const<Element> &ms); Assignment operator. void TMatrixTSub<Element> operator=(const TMatrixTBase<Element> &m); Assignment operator. void TMatrixTSub<Element> operator+=(const TMatrixTSub_const<Element> &ms); Add to every element of the submatrix the corresponding element of submatrix ms. void TMatrixTSub<Element> operator*=(const TMatrixTSub_const<Element> &ms); Multiply submatrix with submatrix ms. void TMatrixTSub<Element> operator+=(const TMatrixTBase<Element> &mt); Add to every element of the submatrix the corresponding element of matrix mt. void TMatrixTSub<Element> operator*=(const TMatrixT<Element> &sourc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSub_double_.html:2749,Perform,Perform,2749,root/html602/TMatrixTSub_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSub_double_.html,2,['Perform'],['Perform']
Performance," alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tfIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with wr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetSystem.html:19850,Cache,Cache,19850,root/html534/TNetSystem.html,https://root.cern,https://root.cern/root/html534/TNetSystem.html,3,['Cache'],['Cache']
Performance," always require a raw tessellation description of points/lines/segments.; Some need the 3D object positions in the global frame, others can cope with local frames + a translation matrix - which can give considerable performance benefits. To cope with these situations the object buffer is filled out in negotiation with the viewer. TBuffer3D classes are conceptually divided into enumerated sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw) are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section in derived shape specific classes allows a more abstract shape description (""a sphere of inner radius x, outer radius y""). This enables a viewer which knows how to draw (tessellate) the shape itself to do so, which can bring considerable performance and quality benefits, while providing a generic fallback suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject() will return flags indicating which ones, otherwise it returns kNone. You must fill the buffer and mark these sections valid, and pass the buffer again. A typical code snippet would be:; TBuffer3DSphere sphereBuffer;; // Fill out kCore...; // Fill out kBoundingBox...; // Fill out kShapeSpecific for TBuffer3DSphere; // Try first add to viewer; Int_t reqSections = viewer-&gt;AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRaw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:1714,perform,performance,1714,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['perform'],['performance']
Performance," an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  ►CTF11-Dim function class ;  CTF1FunctorPointer;  CTF1FunctorPointerImpl;  CTF12A projection of a TF2 along X or Y ;  CTF1AbsComposition;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMergeInfo;  CTFileMergerThis class provides file copy and merging services ;  CTFileOpenHandleClass holding info about the file being opened ;  CTFilePrefetchThe prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries ;  CTFileSet;  CTFileStager;  ►CTFitEditor;  CFuncParamData_tTF1Convolution object ;  CTFitParametersDialog;  CTFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O ;  CTFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointer, i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:150801,cache,cache,150801,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['cache'],['cache']
Performance," analyzing a network.; Fills the two analysis trees. void DrawDInput(Int_t i); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; the ith input. void DrawDInputs(); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; each input.; DrawDInputs() draws something that approximates the distribution of the; derivative of the NN w.r.t. each input. That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const char* bg); Draws the distribution of the neural network (using ith neuron).; Two distributions are drawn, for events passing respectively the ""signal""; and ""background"" cuts. Only the test sample is used. TProfile* DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); Create a profile of the difference of the MLP output minus the; true value for a given output node outnode, vs the true value for; outnode, for all test data events. This method is mainly useful; when doing regression analysis with the MLP (i.e. not classification,; but continuous truth values).; The resulting TProfile histogram is returned.; It is not drawn if option ""goff"" is specified.; Options are passed to TProfile::Draw. THStack* DrawTruthDeviations(Option_t* option = """"); Creates TProfiles of the difference of the MLP output minus the; true value vs the true value, one for each outpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:7776,optimiz,optimizing,7776,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,6,['optimiz'],['optimizing']
Performance," and TFormula::Analyze.; *-* Once a formula has been compiled, it can be evaluated for a given; *-* set of parameters. see graph in TFormula::EvalPar.; -; *-* This class is the base class for the function classes TF1,TF2 and TF3.; *-* It is also used by the ntuple selection mechanism TNtupleFormula.; -; *-* In version 7 of TFormula, the usage of fOper has been changed; *-* to improve the performance of TFormula::EvalPar.; *-* Conceptually, fOper was changed from a simple array of Int_t; *-* to an array of composite values.; *-* For example a 'ylandau(5)' operation used to be encoded as 4105;; *-* it is now encoded as (klandau >> kTFOperShit) + 5; *-* Any class inheriting from TFormula and using directly fOper (which; *-* is now a private data member), needs to be updated to take this; *-* in consideration. The member functions recommended to set and; *-* access fOper are: SetAction, GetAction, GetActionParam; *-* For more performant access to the information, see the implementation; *-* TFormula::EvalPar; -; *-* CHANGING DEFAULT SETTINGS; *-* =========================; *-* When creating complex formula , it may be necessary to increase; *-* some default parameters. see static function TFormula::SetMaxima; -; *-* WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?; *-* ====================================================; *-* This is a frequently asked question.; *-* C++ is a strongly typed language. There is no way for TFormula (without; *-* recompiling this class) to know about all possible user defined data types.; *-* This also apply to the case of a static class function.; *-* Because TMath is a special and frequent case, TFormula is aware; *-* of all TMath functions.; -; -. Function Members (Methods); public:. TFormula(); TFormula(const TFormula& formula); TFormula(const char* name, const char* formula); virtual~TFormula(); voidTObject::AbstractMethod(const char* method) const; virtual voidAnalyze(const char* schain, Int_t& err, Int_t offset = 0); virtual Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:3077,perform,performant,3077,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,3,['perform'],['performant']
Performance," and \""AdaptiveSpeed\"")"" << Endl;; 1783 Log() << ""to individual data sets should also help. Summary:"" << brk << Endl;; 1784 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1785 Log() << "" -> adjust \""MinTemperature\"""" << brk << Endl;; 1786 Log() << "" -> adjust \""TemperatureScale\"""" << brk << Endl;; 1787 Log() << "" -> adjust \""AdaptiveSpeed\"""" << Endl;; 1788 Log() << """" << Endl;; 1789 Log() << ""\""Decreasing Adaptive\"" approach:"" << Endl;; 1790 Log() << """" << Endl;; 1791 Log() << ""The algorithm calculates the initial temperature (based on the effect-"" << Endl;; 1792 Log() << ""iveness of large steps) and the multiplier that ensures to reach the"" << Endl;; 1793 Log() << ""minimal temperature with the requested number of iteration steps."" << Endl;; 1794 Log() << ""The performance can be improved by adjusting the minimal temperature"" << Endl;; 1795 Log() << "" (\""MinTemperature\"") and by increasing number of steps (\""MaxCalls\""):"" << brk << Endl;; 1796 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1797 Log() << "" -> adjust \""MinTemperature\"""" << Endl;; 1798 Log() << "" "" << Endl;; 1799 Log() << ""Other kernels:"" << Endl;; 1800 Log() << """" << Endl;; 1801 Log() << ""Alternative ways of counting the temperature change are implemented. "" << Endl;; 1802 Log() << ""Each of them starts with the maximum temperature (\""MaxTemperature\"")"" << Endl;; 1803 Log() << ""and decreases while changing the temperature according to a given"" << Endl;; 1804 Log() << ""prescription:"" << brk << Endl;; 1805 Log() << ""CurrentTemperature ="" << brk << Endl;; 1806 Log() << "" - Sqrt: InitialTemperature / Sqrt(StepNumber+2) * TemperatureScale"" << brk << Endl;; 1807 Log() << "" - Log: InitialTemperature / Log(StepNumber+2) * TemperatureScale"" << brk << Endl;; 1808 Log() << "" - Homo: InitialTemperature / (StepNumber+2) * TemperatureScale"" << brk << Endl;; 1809 Log() << "" - Sin: (Sin(StepNumber / TemperatureScale) + 1) / (StepNumber + 1)*InitialTemperature + Eps"" << brk << Endl;; 1810 Log() << "" - Geo:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:71989,perform,performance,71989,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['perform'],['performance']
Performance," and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:47562,cache,cache,47562,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,6,['cache'],['cache']
Performance," and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:49410,cache,cache,49410,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,3,['cache'],['cache']
Performance," and background MVA ouput distribution ; Definition at line 434 of file OptimizeConfigParameters.cxx. ◆ GetSigEffAtBkgEff(). Double_t TMVA::OptimizeConfigParameters::GetSigEffAtBkgEff ; (; Double_t ; bkgEff = 0.1). private . calculate the signal efficiency for a given background efficiency ; Definition at line 509 of file OptimizeConfigParameters.cxx. ◆ IsA(). virtual TClass * TMVA::OptimizeConfigParameters::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::IFitterTarget.; Definition at line 100 of file OptimizeConfigParameters.h. ◆ Log(). MsgLogger & TMVA::OptimizeConfigParameters::Log ; (; ); const. inlineprivate . Definition at line 98 of file OptimizeConfigParameters.h. ◆ optimize(). std::map< TString, Double_t > TMVA::OptimizeConfigParameters::optimize ; (; ). Definition at line 127 of file OptimizeConfigParameters.cxx. ◆ optimizeFit(). void TMVA::OptimizeConfigParameters::optimizeFit ; (; ). private . Definition at line 242 of file OptimizeConfigParameters.cxx. ◆ optimizeScan(). void TMVA::OptimizeConfigParameters::optimizeScan ; (; ). private . do the actual optimization using a simple scan method, i.e. ; calculate the FOM for different tuning paraemters and remember which one is gave the best FOM ; Definition at line 164 of file OptimizeConfigParameters.cxx. ◆ Streamer(). virtual void TMVA::OptimizeConfigParameters::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IFitterTarget. ◆ StreamerNVirtual(). void TMVA::OptimizeConfigParameters::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file OptimizeConfigParameters.h. Member Data Documentation. ◆ fAlreadyTrainedParCombination. std::map< std::vector<Double_t> , Double_t> TMVA::OptimizeConfigParameters::fAlreadyTrainedParCombination. private . save parameters for which the FOM is already known (GA seems to evaluate the same parameters several times) ; Definition at line 86 of file OptimizeConfigPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:9445,Optimiz,OptimizeConfigParameters,9445,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Optimiz'],['OptimizeConfigParameters']
Performance," and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:67558,cache,cache,67558,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,8,['cache'],['cache']
Performance," and exit.; 3b. If no, read the peeked data and goto 1.; The function is careful to assume as little as possible about the implementation of peeking. For example, every peek is followed by a read. If the read returns a different amount of data, the process is retried until all data arrives safely.; Reads at most one less than the number of characters specified by maxsize. ; Definition at line 1275 of file TWebFile.cxx. ◆ GetLine(). Int_t TWebFile::GetLine ; (; TSocket * ; s, . char * ; line, . Int_t ; maxsize . ). protectedvirtual . Read a line from the socket. ; Reads at most one less than the number of characters specified by maxsize. Reading stops when a newline character is found, The newline (\n) and cr (\r), if any, are removed. Returns -1 in case of error, or the number of characters read (>= 0) otherwise. ; Definition at line 1212 of file TWebFile.cxx. ◆ GetMaxFullCacheSize(). Long64_t TWebFile::GetMaxFullCacheSize ; (; ). static . Static method returning maxmimal size of full cache, which can be preserved by file instance. ; Definition at line 1440 of file TWebFile.cxx. ◆ GetProxy(). const char * TWebFile::GetProxy ; (; ). static . Static method returning the global proxy URL. ; Definition at line 1420 of file TWebFile.cxx. ◆ GetSize(). Long64_t TWebFile::GetSize ; (; ); const. overridevirtual . Return maximum file size. ; Reimplemented from TFile.; Definition at line 1010 of file TWebFile.cxx. ◆ HttpTerminator(). const char * TWebFile::HttpTerminator ; (; const char * ; start, . const char * ; peeked, . Int_t ; peeklen . ). protectedvirtual . Determine whether [START, PEEKED + PEEKLEN) contains an HTTP new line [\r]\n. ; If so, return the pointer to the position after the line, otherwise return 0. This is used as callback to GetHunk(). The data between START and PEEKED has been read and cannot be ""unread""; the data after PEEKED has only been peeked. ; Definition at line 1350 of file TWebFile.cxx. ◆ Init(). void TWebFile::Init ; (; Bool_t ; readHeadOnly). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:51054,cache,cache,51054,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['cache'],['cache']
Performance," and forwards the interface.; 5.6.6 VariableMetricMinimizer(); The VariableMetricMinimizer is instantiated using default constructor.; 5.6.7 minimize(const FCNBase&, …); The VariableMetricMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.7 MnMinimize and CombinedMinimizer; [api:minimize]; Causes minimization of the function by the method of \(\mbox{MIGRAD}\), as does the MnMigrad class, but switches to the \(\mbox{SIMPLEX}\) method if \(\mbox{MIGRAD}\) fails to converge. Constructor arguments, methods arguments and names of methods are the same as for MnMigrad or MnSimplex and VariableMetricMinimizer or SimplexMinimizer.; 5.8 MnMinos; [api:minos] Causes a \(\mbox{MINOS}\) error analysis to be performed on the parameter whose number is specified. \(\mbox{MINOS}\) errors may be expensive to calculate, but are very reliable since they take account of non-linearities in the problem as well as parameter correlations, and are in general asymmetric. The optional argument \(\mbox{maxcalls}\) specifies the (approximate) maximum number of function calls per parameter requested, after which the calculation will be stopped for that parameter.; 5.8.1 MnMinos(const FCNBase&, const FunctionMinimum&); Construct an MnMinos object from the user’s \(\mbox{FCN}\) and a valid FunctionMinimum. Additional constructors for user specific MnStrategy settings are provided.; 5.8.2 operator(); MnMinos::operator()(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\). The return value is a std::pair\(<\)double,double\(>\) with the lower and upper bounds of parameter \(\mbox{n}\).; 5.8.3 minos(unsigned int n, unsigned int maxcalls); Mn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:50225,perform,performed,50225,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['perform'],['performed']
Performance," and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGeneric& hc, bool adaptive, double clsTarget) const; Run the Hypothesis test at a previous configured point; (internal function called by RunOnePoint). bool RunFixedScan(int nBins, double xMin, double xMax, bool scanLog = false) const; Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX, bool adaptive = false, double clTarget = -1) const; run only one point at the given POI value. bool RunLimit(double& limit, double& limitErr, double absTol = 0, double relTol = 0, const double* hint = 0) const; run an automatic scan until the desired accurancy is reached; Start by default from the full interval (min,max) of the POI and then via bisection find the line crossing; the target line; Optionally an hint can be provided and the scan will be done closer to that value; If by bisection the desired accuracy will not be reached a fit to the points is performed. SamplingDistribution * GetLowerLimitDistribution(bool rebuild = false, int nToys = 100); get the distribution of lower limit; if rebuild = false (default) it will re-use the results of the scan done; for obtained the observed limit and no extra toys will be generated; if rebuild a new set of B toys will be done and the procedure will be repeted; for each toy. SamplingDistribution * GetUpperLimitDistribution(bool rebuild = false, int nToys = 100); get the distribution of lower limit; if rebuild = false (default) it will re-use the results of the scan done; for obtained the observed limit and no extra toys will be generated; if rebuild a new set of B toys will be done and the procedure will be repeted; for each toy; The nuisance parameter value used for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverter.html:9985,perform,performed,9985,root/html534/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverter.html,3,['perform'],['performed']
Performance," and height of the pixmap.; lenname : pixmap name length; pxname : pixmap name. void ImgPickPalette(XImage* image, Int_t& ncol, Int_t*& R, Int_t*& G, Int_t*& B); Returns in R G B the ncol colors of the palette used by the image.; The image pixels are changed to index values in these R G B arrays.; This produces a colormap with only the used colors (so even on displays; with more than 8 planes we will be able to create GIF's when the image; contains no more than 256 different colors). If it does contain more; colors we will have to use GIFquantize to reduce the number of colors.; The R G B arrays must be deleted by the caller. Int_t WriteGIF(char* name); Writes the current window into GIF file. Returns 1 in case of success,; 0 otherwise. void PutImage(Int_t offset, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t* image, Drawable_t id); Draw image. Pixmap_t ReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); If id is NULL - loads the specified gif file at position [x0,y0] in the; current window. Otherwise creates pixmap from gif file. unsigned char * GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Returns an array of pixels created from a part of drawable (defined by x, y, w, h); in format:; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 .. Pixels are numbered from left to right and from top to bottom.; By default all pixels from the whole drawable are returned. Note that return array is 32-bit aligned. Pixmap_t CreatePixmapFromData(unsigned char* bits, UInt_t width, UInt_t height); create pixmap from RGB data. RGB data is in format :; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 .. Pixels are numbered from left to right and from top to bottom.; Note that data must be 32-bit aligned. Int_t AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); Register pixmap created by gVirtualGL; w,h : Width and height of the pixmap.; register new pixmap. Int_t SupportsExtension(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:37332,load,loads,37332,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,4,['load'],['loads']
Performance," and minor number.; Note that this function returns only the entry number, not the data; To read the data corresponding to an entry number, use TTree::GetEntryWithIndex; the BuildIndex function has created a table of Long64_t* of sorted values; corresponding to val = major<<31 + minor;; The function performs binary search in this sorted table.; If it finds a pair that maches val, it returns directly the; index in the table.; If an entry corresponding to major and minor is not found, the function; returns the index of the major,minor pair immediately lower than the; requested value, ie it will return -1 if the pair is lower than; the first entry in the index. See also GetEntryNumberWithIndex. Long64_t GetEntryNumberWithIndex(Long64_t major, Long64_t minor = 0) const; Return entry number corresponding to major and minor number.; Note that this function returns only the entry number, not the data; To read the data corresponding to an entry number, use TTree::GetEntryWithIndex; the BuildIndex function has created a table of Long64_t* of sorted values; corresponding to val = major<<31 + minor;; The function performs binary search in this sorted table.; If it finds a pair that maches val, it returns directly the; index in the table, otherwise it returns -1. See also GetEntryNumberWithBestIndex. Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); Read entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TTree* GetFriend(const char* ) const; Return a pointer to the TTree friend whose name or alias is 'friendname. const char* GetFriendAlias(TTree* ) const; If the 'tree' is a friend, this method returns its alias name. This alias is an alternate name for the tree. It can be used in conjunction with a branch or leaf ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:100021,perform,performs,100021,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['perform'],['performs']
Performance," and not a library; TFunction*fMethod!ctor method or global function; TStringfOriginorigin of plugin handler definition; TStringfPluginplugin library which should contain fClass; TStringfRegexpregular expression which must be matched in URI. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Long_t ExecPlugin(Int_t va_(nargs), ...); Execute ctor for this plugin and return pointer to object of specific; class. User must cast the returned long to the correct class.; This method accepts a variable number of arguments to be passed; to the ctor, where nargs is the number of arguments, followed; by nargs arguments. Returns 0 in case of error. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPluginHandler.html:9963,load,loading,9963,root/html528/TPluginHandler.html,https://root.cern,https://root.cern/root/html528/TPluginHandler.html,4,['load'],['loading']
Performance," and ranges that are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html:10355,tune,tuneParameters,10355,doc/master/classTMVA_1_1MethodCrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html,2,['tune'],['tuneParameters']
Performance," and should be used as the action's output result. In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42098,cache,cached,42098,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['cache'],['cached']
Performance," and slaves. ; Definition at line 11760 of file TProof.cxx. ◆ AddFeedback(). void TProof::AddFeedback ; (; const char * ; name). Add object to feedback list. ; Definition at line 9989 of file TProof.cxx. ◆ AddIncludePath(). Int_t TProof::AddIncludePath ; (; const char * ; incpath, . Bool_t ; onClient = kFALSE, . TList * ; wrks = 0, . Bool_t ; doCollect = kTRUE . ). Add 'incpath' to the inc path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8888 of file TProof.cxx. ◆ AddInput(). void TProof::AddInput ; (; TObject * ; obj). Add objects that might be needed during the processing of the selector (see Process()). ; Definition at line 9734 of file TProof.cxx. ◆ AddInputData(). void TProof::AddInputData ; (; TObject * ; obj, . Bool_t ; push = kFALSE . ). Add data objects that might be needed during the processing of the selector (see Process()). ; This object can be very large, so they are distributed in an optimized way using a dedicated file. If push is TRUE the input data are sent over even if no apparent change occured to the list. ; Definition at line 9522 of file TProof.cxx. ◆ AddWorkers(). Int_t TProof::AddWorkers ; (; TList * ; workerList). protected . Works on the master node only. ; It starts workers on the machines in workerList and sets the paths, packages and macros as on the master. It is a subbstitute for StartSlaves(...) The code is mostly the master part of StartSlaves, with the parallel startup removed. ; Definition at line 1320 of file TProof.cxx. ◆ Archive() [1/2]. Int_t TProof::Archive ; (; const char * ; ref, . const char * ; path = 0 . ). Send archive request for the query specified by ref. ; Generic method working for all queries known by the server. If ref == ""Default"", path is understood as a default path for archiving. ; Definition at line 6077 of file TProof.cxx. ◆ Archive() [2/2]. Int_t TProof::Archive ; (; Int_t ; query, . const char * ; url . ).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:64244,optimiz,optimized,64244,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['optimiz'],['optimized']
Performance," and the Cling the C++ Interpreter to connect signals to slots methods.; Therefore, all necessary elements for an object-oriented editor design are in place. The editor complexity can be reduced by splitting it into discrete units of so-called object editors. Any object editor provides an object specific GUI. The main purpose of the ROOT graphics editor is the organization of the object editors’ appearance and the task sequence between them.; 25.9.1 Object Editors; Every object editor follows a simple naming convention: to have as a name the object class name concatenated with ‘Editor’ (e.g. for TGraph objects the object editor is TGraphEditor). Thanks to the signals/slots communication mechanism and to the method DistancetoPrimitive() that computes a ‘‘distance’’ to an object from the mouse position, it was possible to implement a signal method of the canvas that says which is the selected object and to which pad it belongs. Having this information the graphics editor loads the corresponding object editor and the user interface is ready for use. This way after a click on ‘axis’—the axis editor is active; a click on a ‘pad’ activates the pad editor, etc.; The algorithm in use is simple and is based on the object-oriented relationship and communication. When the user activates the editor, according to the selected object <obj> in the canvas it looks for a class name <obj>Editor. For that reason, the correct naming is very important. If a class with this name is found, the editor verifies that this class derives from the base editor class TGedFrame. If all checks are satisfied, the editor makes an instance of the object editor. Then, it scans all object base classes searching the corresponding object editors. When it finds one, it makes an instance of the base class editor too.; Once the object editor is in place, it sets the user interface elements according to the object’s status. After that, it is ready to interact with the object following the user actions.; The gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1221979,load,loads,1221979,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loads']
Performance," and the learning phase stopped; Returns 0 branch dropped or not in cache; -1 on error. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos if the request is in the list of; prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:24646,Cache,Cache,24646,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['Cache'],['Cache']
Performance," and throw if selected; New arguments: -l –library targetLib name (new) -s targetLib name -m pcmname (can be many -m) (new) -m pcmname (can be many -m) –rootmap -rmf (new) –rootmap-lib -rml (new); genreflex options which rise warnings (feedback is desirable) –no_membertypedefs (it should be irrelevant) –no_templatetypedefs (it should be irrelevant); genreflex options which are ignored (know for sure they are not needed) –pool, –dataonly –interpreteronly –gccxml{path,opt,post}; Exceptions The –deep option of genreflex is passed as function parameter to rootcling since it's not needed at the moment there. ; Definition at line 5608 of file rootcling_impl.cxx. ◆ GetExePath(). const char * GetExePath ; (; ). Returns the executable path name, used e.g. by SetRootSys(). ; Definition at line 196 of file rootcling_impl.cxx. ◆ GetExternalNamespaceAndContainedEntities(). std::pair< std::string, std::string > GetExternalNamespaceAndContainedEntities ; (; const std::string ; line). Performance is not critical here. ; Definition at line 2356 of file rootcling_impl.cxx. ◆ GetFullArrayLength(). size_t GetFullArrayLength ; (; const clang::ConstantArrayType * ; arrayType). Definition at line 417 of file rootcling_impl.cxx. ◆ GetFwdDeclnArgsToKeepString(). std::string GetFwdDeclnArgsToKeepString ; (; const ROOT::TMetaUtils::TNormalizedCtxt & ; normCtxt, . cling::Interpreter & ; interp . ). Definition at line 3047 of file rootcling_impl.cxx. ◆ GetModuleNameFromRdictName(). static llvm::StringRef GetModuleNameFromRdictName ; (; llvm::StringRef ; rdictName). static . Definition at line 4013 of file rootcling_impl.cxx. ◆ GetMostExternalEnclosingClassName(). void GetMostExternalEnclosingClassName ; (; const clang::DeclContext & ; theContext, . std::string & ; ctxtName, . const cling::Interpreter & ; interpreter, . bool ; treatParent = true . ). Extract the proper autoload key for nested classes The routine does not erase the name, just updates it. ; Definition at line 2195 of file rootclin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx.html:40598,Perform,Performance,40598,doc/master/rootcling__impl_8cxx.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx.html,1,['Perform'],['Performance']
Performance," and tubes are the most recommendable shapes for this purpose due to their fast navigation algorithms.; root[] TGeoVolume *top=gGeoManager->MakeBox(""Top"",med,10.,10.,10.);; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; The default units are in centimeters. Now we want to make this volume our world. We have to do this operation before closing the geometry.; root[] gGeoManager->SetTopVolume(top);; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; This should be enough, but it is not since always after defining some geometry hierarchy, TGeo needs to build some optimization structures and perform some checks. Note the messages posted after the statement is executed. We will describe the corresponding operations later.; root[] gGeoManager->CloseGeometry();; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; Now we are really done with geometry building stage, but we would like to see our simple world:; root[] top->SetLineColor(kMagenta);; root[] gGeoManager->SetTopVisible(); // the TOP is invisible; root[] top->Draw();; kMagenta@ kMagentaDefinition Rtypes.h:66; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396. Example 2: A Geometrical Hierarchy Look and Feel; Before going further, let us get a look and feel of interacting with the modeller. For this, we will use one of the example",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:6572,optimiz,optimization,6572,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,2,"['optimiz', 'perform']","['optimization', 'perform']"
Performance," and will reset certain values in the cache. ; This name is ambiguos because the method doesn't reset the whole cache, only the part related to the unzipping Note: This method is completely different from TTreeCache::ResetCache(), in that method we were cleaning the prefetching buffer while here we delete the information about the unzipped buffers ; Reimplemented from TTreeCache.; Definition at line 501 of file TTreeCacheUnzip.cxx. ◆ SetBufferSize(). Int_t TTreeCacheUnzip::SetBufferSize ; (; Int_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TTreeCache.; Definition at line 359 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 375 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional thread even if there is only one core. the default will be taken as kEnable. Returns 0 if there was an error, 1 otherwise. ; Definition at line 436 of file TTreeCacheUnzip.cxx. ◆ SetUnzipBufferSize(). void TTreeCacheUnzip::SetUnzipBufferSize ; (; Long64_t ; bufferSize). Sets the size for the unzipping cache... by default it should be two times the si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:35256,optimiz,optimize,35256,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['optimiz'],['optimize']
Performance," and, thanks to OS optimisations, content is flushed to the output file when a few MBytes of data are available. On the other hand, when reading, one may hit performance problems because of latencies e.g imposed by network. For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the next request comes. Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all entries such that not all branch buffers are read. General Description; This class acts as a file cache, registering automatically the baskets from the branches being processed via direct manipulation of TTrees or with tools such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame when in the learning phase. The learning phase is by default 100 entries. It can be changed via TTreeCache::SetLearnEntries.; The usage of a TTreeCache can considerably improve the runtime performance at the price of a modest investment in memory, in particular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:2091,perform,performance,2091,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['perform'],['performance']
Performance," any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns kTRUE on success. Int_t SetDataSetTreeName(const char* dataset, const char* treename); Set/Change the name of the default tree. The tree name may contain; subdir specification in the form ""subdir/name"".; Returns 0 on success, -1 otherwise. TMap * GetDataSets(const char* uri = """", const char* optStr = """"); Lists all datasets that match given uri. void ShowDataSets(const char* uri = """", const char* optStr = """"); Shows datasets in locations that match the uri.; By default shows the user's datasets and global ones. Bool_t ExistsDataSet(const char* dataset); Returns kTRUE if 'dataset' exists, kFALSE otherwise. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). TFileCollection * GetDataSet(const char* dataset, const char* optStr = """"); Get a list of TFileInfo objects describing the files of the specified; dataset.; To get the short version (containing only the global meta information); specify optStr = ""S:"" or optStr = ""short:"".; To get the sub-dataset of files located on a given server(s) specify; the list of servers (comma-separated) in the 'optStr' field. void ShowDataSet(const char* dataset = """", const char* opt = ""M""); display meta-info for given dataset usi. Int_t RemoveDataSet(const char* dataset, const char* optStr = """"); Remove the specified dataset from the PROOF cluster.; Files are not deleted. TList* FindDataSets(const char* searchString, const char* optStr = """"); Find datasets, returns in a TList all found datasets. Int_t VerifyDataSet(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:81371,cache,cache,81371,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['cache'],['cache']
Performance," appended; 2260/// the macro will be compiled by ACLiC. The filename must have the format:; 2261/// [path/]macro.C[+|++[g|O]].; 2262/// The possible error codes are defined by TInterpreter::EErrorCode.; 2263/// If check is true it will only check if filename exists and is; 2264/// readable.; 2265/// Returns 0 on successful loading and -1 in case filename does not; 2266/// exist or in case of error.; 2267 ; 2268Int_t TROOT::LoadMacro(const char *filename, int *error, Bool_t check); 2269{; 2270 Int_t err = -1;; 2271 Int_t lerr, *terr;; 2272 if (error); 2273 terr = error;; 2274 else; 2275 terr = &lerr;; 2276 ; 2277 if (fInterpreter) {; 2278 TString aclicMode;; 2279 TString arguments;; 2280 TString io;; 2281 TString fname = gSystem->SplitAclicMode(filename, aclicMode, arguments, io);; 2282 ; 2283 if (arguments.Length()) {; 2284 Warning(""LoadMacro"", ""argument(%s) ignored in %s"", arguments.Data(), GetMacroPath());; 2285 }; 2286 char *mac = gSystem->Which(GetMacroPath(), fname, kReadPermission);; 2287 if (!mac) {; 2288 if (!check); 2289 Error(""LoadMacro"", ""macro %s not found in path %s"", fname.Data(), GetMacroPath());; 2290 *terr = TInterpreter::kFatal;; 2291 } else {; 2292 err = 0;; 2293 if (!check) {; 2294 fname = mac;; 2295 fname += aclicMode;; 2296 fname += io;; 2297 gInterpreter->LoadMacro(fname.Data(), (TInterpreter::EErrorCode*)terr);; 2298 if (*terr); 2299 err = -1;; 2300 }; 2301 }; 2302 delete [] mac;; 2303 }; 2304 return err;; 2305}; 2306 ; 2307////////////////////////////////////////////////////////////////////////////////; 2308/// Execute a macro in the interpreter. Equivalent to the command line; 2309/// command "".x filename"". If the filename has ""+"" or ""++"" appended; 2310/// the macro will be compiled by ACLiC. The filename must have the format:; 2311/// [path/]macro.C[+|++[g|O]][(args)].; 2312/// The possible error codes are defined by TInterpreter::EErrorCode.; 2313/// If padUpdate is true (default) update the current pad.; 2314/// Returns the macro return v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:87289,Load,LoadMacro,87289,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['Load'],['LoadMacro']
Performance," are not allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offer the possibility to allocate and delete memory.; Forgetting to delete allocated memory is a programming error that originate ""leaks"",; i.e. the memory of your process grows and eventually your program crashes.; Even if you *always* delete the allocated memory, the recovered space may not be; efficiently reused. The process knows that there are portions of free memory,; but when you allocate it again, a fresh piece of memory is grabbed.; Your program is free from semantic errors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:2422,perform,performance,2422,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['perform'],['performance']
Performance," are satisfied'. - chi2 - chisquare of the test; - ndf - number of degrees of freedom (important, when both histograms have the same; empty bins); - res - normalized residuals for further analysis. Double_t ComputeIntegral(); Compute integral (cumulative sum of bins); The result stored in fIntegral is used by the GetRandom functions.; This function is automatically called by GetRandom when the fIntegral; array does not exist or when the number of entries in the histogram; has changed since the previous call to GetRandom.; The resulting integral is normalized to 1. Double_t * GetIntegral(); Return a pointer to the array of bins integral.; if the pointer fIntegral is null, TH1::ComputeIntegral is called. void Copy(TObject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObJect::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:56615,Perform,Perform,56615,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['Perform'],['Perform']
Performance," are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|50,TANH|50,TANH|50,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""SUMOFSQUARES"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [datasetreg] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Will now use the CPU arc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:3909,Optimiz,Optimizer,3909,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Optimiz'],['Optimizer']
Performance," as a result of using the `root` command; 180 for (auto n = 1; n < *argc; n++) {; 181 std::cerr << ""root: unrecognized option '"" << argv[n] << ""'\n"";; 182 }; 183 std::cerr << ""Try 'root --help' for more information.\n"";; 184 TApplication::Terminate(0);; 185 }; 186 ; 187 fNcmd = 0;; 188 fDefaultPrompt = ""root [%d] "";; 189 fInterrupt = kFALSE;; 190 ; 191 gBenchmark = new TBenchmark();; 192 ; 193 if (!noLogo && !NoLogoOpt()) {; 194 Bool_t lite = (Bool_t) gEnv->GetValue(""Rint.WelcomeLite"", 0);; 195 PrintLogo(lite);; 196 }; 197 ; 198 // Explicitly load libMathCore it cannot be auto-loaded it when using one; 199 // of its freestanding functions. Once functions can trigger autoloading we; 200 // can get rid of this.; 201 if (!gClassTable->GetDict(""TRandom"")); 202 gSystem->Load(""libMathCore"");; 203 ; 204 if (!gInterpreter->HasPCMForLibrary(""std"")) {; 205 // Load some frequently used includes; 206 Int_t includes = gEnv->GetValue(""Rint.Includes"", 1);; 207 // When the interactive ROOT starts, it can automatically load some frequently; 208 // used includes. However, this introduces several overheads; 209 // -The initialisation takes more time; 210 // -Memory overhead when including <vector>; 211 // In $ROOTSYS/etc/system.rootrc, you can set the variable Rint.Includes to 0; 212 // to disable the loading of these includes at startup.; 213 // You can set the variable to 1 (default) to load only <iostream>, <string> and <DllImport.h>; 214 // You can set it to 2 to load in addition <vector> and <utility>; 215 // We strongly recommend setting the variable to 2 if your scripts include <vector>; 216 // and you execute your scripts multiple times.; 217 if (includes > 0) {; 218 TString code;; 219 code = ""#include <iostream>\n""; 220 ""#include <string>\n"" // for std::string std::iostream.; 221 ""#include <DllImport.h>\n"";// Defined R__EXTERN; 222 if (includes > 1) {; 223 code += ""#include <vector>\n""; 224 ""#include <utility>"";; 225 }; 226 ProcessLine(code, kTRUE);; 227 }; 228 }; 229 ; 230 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:6689,load,load,6689,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['load'],['load']
Performance," as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; Optimisation interface; These functions allow RooFit to optimise a computation graph, to keep track of cached values, and to invalidate caches. . virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:20899,cache,cached,20899,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,['cache'],"['cached', 'caches']"
Performance," as a string. mode = -2 : Print line with ***; mode = -1 : Print column names; mode = 0 : Print column values; decform contains the requested format (with the same convention as printf). void ResetLoading(); Tell the formula that we are going to request a new entry. void SetAxis(TAxis* axis = 0); Set the axis (in particular get the type). void Streamer(TBuffer& ); Stream an object of class TTreeFormula. Bool_t StringToNumber(Int_t code); Try to 'demote' a string into an array bytes. If this is not possible,; return false. void UpdateFormulaLeaves(); this function is called TTreePlayer::UpdateFormulaLeaves, itself; called by TChain::LoadTree when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreePlayer. void ResetDimensions(); Populate the TTreeFormulaManager with the dimension information. void LoadBranches(); Make sure that all the branches have been loaded properly. Bool_t LoadCurrentDim(). void Convert(UInt_t fromVersion); Convert the fOper of a TTTreeFormula version fromVersion to the current in memory version. Bool_t SwitchToFormLeafInfo(Int_t code); Convert the underlying lookup method from the direct technique; (dereferencing the address held by the branch) to the method using; TFormLeafInfo. This is in particular usefull in the case where we; need to append an additional TFormLeafInfo (for example to call a; method).; Return false if the switch was unsuccessfull (basically in the; case of an old style split tree). TTreeFormula(const char* name, const char* formula, TTree* tree, const vector<std::string>& aliases). TTreeFormula& operator=(const TTreeFormula& ). Long64_t EvalInstance64(Int_t i = 0, const char** stringStack = 0); {return EvalInstance<Long64_t>(i, stringStack); }. LongDouble_t EvalInstanceLD(Int_t i = 0, const char** stringStack = 0); {return EvalInstance<LongDouble_t>(i, stringStack); }. TTreeFormulaManager* GetManager() const; { return fM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeFormula.html:26571,Load,LoadCurrentDim,26571,root/html534/TTreeFormula.html,https://root.cern,https://root.cern/root/html534/TTreeFormula.html,1,['Load'],['LoadCurrentDim']
Performance," as a string. mode = -2 : Print line with ***; mode = -1 : Print column names; mode = 0 : Print column values; decform contains the requested format (with the same convention as printf). void ResetLoading(); Tell the formula that we are going to request a new entry. void SetAxis(TAxis* axis = 0); Set the axis (in particular get the type). void Streamer(TBuffer& ); Stream an object of class TTreeFormula. Bool_t StringToNumber(Int_t code); Try to 'demote' a string into an array bytes. If this is not possible,; return false. void UpdateFormulaLeaves(); this function is called TTreePlayer::UpdateFormulaLeaves, itself; called by TChain::LoadTree when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreePlayer. void ResetDimensions(); Populate the TTreeFormulaManager with the dimension information. void LoadBranches(); Make sure that all the branches have been loaded properly. Bool_t LoadCurrentDim(). void Convert(UInt_t fromVersion); Convert the fOper of a TTTreeFormula version fromVersion to the current in memory version. Bool_t SwitchToFormLeafInfo(Int_t code); Convert the underlying lookup method from the direct technique; (dereferencing the address held by the branch) to the method using; TFormLeafInfo. This is in particular usefull in the case where we; need to append an additional TFormLeafInfo (for example to call a; method).; Return false if the switch was unsuccessfull (basically in the; case of an old style split tree). TTreeFormula(const char* name, const char* formula, TTree* tree, const vector<string>& aliases). TTreeFormula& operator=(const TTreeFormula& ). Long64_t EvalInstance64(Int_t i = 0, const char*[] stringStack = 0); {return EvalInstance<Long64_t>(i, stringStack); }. LongDouble_t EvalInstanceLD(Int_t i = 0, const char*[] stringStack = 0); {return EvalInstance<LongDouble_t>(i, stringStack); }. TTreeFormulaManager* GetManager() const; { return fMana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFormula.html:31822,Load,LoadCurrentDim,31822,root/html602/TTreeFormula.html,https://root.cern,https://root.cern/root/html602/TTreeFormula.html,2,['Load'],['LoadCurrentDim']
Performance," as an integer to version code as used in RVersion.h.Definition TROOT.cxx:2930; TROOT::ResetClassSavedvoid ResetClassSaved()Reset the ClassSaved status of all classes.Definition TROOT.cxx:1096; TROOT::GetTTFFontDirstatic const TString & GetTTFFontDir()Get the fonts directory in the installation. Static utility function.Definition TROOT.cxx:3189; TROOT::fForceStyleBool_t fForceStyleForce setting of current style when reading objects.Definition TROOT.h:133; TROOT::MakeDefCanvasTCanvas * MakeDefCanvas() constReturn a default canvas.Definition TROOT.cxx:1554; TROOT::fTypesTCollection * fTypesList of data types definition.Definition TROOT.h:141; TROOT::GetColorTColor * GetColor(Int_t color) constReturn address of color with index color.Definition TROOT.cxx:1536; TROOT::GetGlobalTGlobal * GetGlobal(const char *name, Bool_t load=kFALSE) constReturn pointer to global variable by name.Definition TROOT.cxx:1631; TROOT::FindSTLClassTClass * FindSTLClass(const char *name, Bool_t load, Bool_t silent=kFALSE) constreturn a TClass object corresponding to 'name' assuming it is an STL container.Definition TROOT.cxx:1484; TROOT::fStreamerInfoTSeqCollection * fStreamerInfoList of active StreamerInfo classes.Definition TROOT.h:159; TROOT::Appendvoid Append(TObject *obj, Bool_t replace=kFALSE) overrideAppend object to this directory.Definition TROOT.cxx:1047; TROOT::GetIconPathstatic const TString & GetIconPath()Get the icon path in the installation. Static utility function.Definition TROOT.cxx:3168; TROOT::GetListOfGlobalFunctionsTCollection * GetListOfGlobalFunctions(Bool_t load=kFALSE)Return list containing the TFunctions currently defined.Definition TROOT.cxx:1826; TROOT::fGitDateTString fGitDateDate and time when make was run.Definition TROOT.h:122; TROOT::fSpecialsTSeqCollection * fSpecialsList of special objects.Definition TROOT.h:156; TROOT::GetListOfFunctionTemplatesTCollection * GetListOfFunctionTemplates()Definition TROOT.cxx:1771; TROOT::RegisterModulestatic void RegisterModu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:150286,load,load,150286,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['load'],['load']
Performance," as an integer to version code as used in RVersion.h.Definition TROOT.cxx:2934; TROOT::ResetClassSavedvoid ResetClassSaved()Reset the ClassSaved status of all classes.Definition TROOT.cxx:1096; TROOT::GetTTFFontDirstatic const TString & GetTTFFontDir()Get the fonts directory in the installation. Static utility function.Definition TROOT.cxx:3193; TROOT::fForceStyleBool_t fForceStyleForce setting of current style when reading objects.Definition TROOT.h:133; TROOT::MakeDefCanvasTCanvas * MakeDefCanvas() constReturn a default canvas.Definition TROOT.cxx:1554; TROOT::fTypesTCollection * fTypesList of data types definition.Definition TROOT.h:141; TROOT::GetColorTColor * GetColor(Int_t color) constReturn address of color with index color.Definition TROOT.cxx:1536; TROOT::GetGlobalTGlobal * GetGlobal(const char *name, Bool_t load=kFALSE) constReturn pointer to global variable by name.Definition TROOT.cxx:1631; TROOT::FindSTLClassTClass * FindSTLClass(const char *name, Bool_t load, Bool_t silent=kFALSE) constreturn a TClass object corresponding to 'name' assuming it is an STL container.Definition TROOT.cxx:1484; TROOT::fStreamerInfoTSeqCollection * fStreamerInfoList of active StreamerInfo classes.Definition TROOT.h:159; TROOT::Appendvoid Append(TObject *obj, Bool_t replace=kFALSE) overrideAppend object to this directory.Definition TROOT.cxx:1047; TROOT::GetIconPathstatic const TString & GetIconPath()Get the icon path in the installation. Static utility function.Definition TROOT.cxx:3172; TROOT::GetListOfGlobalFunctionsTCollection * GetListOfGlobalFunctions(Bool_t load=kFALSE)Return list containing the TFunctions currently defined.Definition TROOT.cxx:1826; TROOT::fGitDateTString fGitDateDate and time when make was run.Definition TROOT.h:122; TROOT::fSpecialsTSeqCollection * fSpecialsList of special objects.Definition TROOT.h:156; TROOT::GetListOfFunctionTemplatesTCollection * GetListOfFunctionTemplates()Definition TROOT.cxx:1771; TROOT::RegisterModulestatic void RegisterModu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:150462,load,load,150462,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['load'],['load']
Performance," as color boxes; The supported option is:. ""GLCOL"" ; H3 is drawn using semi-transparent colored boxes.; See $ROOTSYS/tutorials/gl/glvox1.C. TH3 as boxes (spheres); The supported options are:. ""GLBOX"" ; TH3 as a set of boxes, size of box is proportional to bin content. ""GLBOX1""; The same as ""glbox"", but spheres are drawn instead of boxes. TH3 as iso-surface(s); The supported option is:. ""GLISO"" ; TH3 is drawn using iso-surfaces. TF3 (implicit function); The supported option is:. ""GLTF3"" ; Draw a TF3. Parametric surfaces; $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric; equations and visualize the surface.; Interaction with the plots; All the interactions are implemented via standard methods; DistancetoPrimitive() and ExecuteEvent(). That's why all the; interactions with the OpenGL plots are possible only when the mouse cursor is; in the plot's area (the plot's area is the part of a the pad occupied by; gl-produced picture). If the mouse cursor is not above gl-picture, the standard; pad interaction is performed.; Selectable parts; Different parts of the plot can be selected:. xoz, yoz, xoy back planes:; When such a plane selected, it's highlighted in green if the; dynamic slicing by this plane is supported, and it's; highlighted in red, if the dynamic slicing is not supported.; The plot itself:; On surfaces, the selected surface is outlined in red. (TF3 and; ISO are not outlined). On lego plots, the selected bin is; highlighted. The bin number and content are displayed in pad's; status bar. In box plots, the box or sphere is highlighted and; the bin info is displayed in pad's status bar. Rotation and zooming. Rotation:; When the plot is selected, it can be rotated by pressing and; holding the left mouse button and move the cursor.; Zoom/Unzoom:; Mouse wheel or 'j', 'J', 'k', 'K' keys. Panning; The selected plot can be moved in a pad's area by pressing and; holding the left mouse button and the shift key.; Box cut; Surface, iso, box, TF3 and parametr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:81022,perform,performed,81022,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,1,['perform'],['performed']
Performance," asynchronous open functionality need to override this method to run the appropriate checks before calling this standard initialization part. See TNetXNGFile::Init for an example. ; Reimplemented from TFile.; Definition at line 677 of file TDavixFile.cxx. ◆ IsA(). virtual TClass * TDavixFile::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TDavixFile.h. ◆ ReadBuffer() [1/2]. Bool_t TDavixFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read specified byte range from remote file via HTTP. ; Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 737 of file TDavixFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TDavixFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented from TFile.; Definition at line 756 of file TDavixFile.cxx. ◆ ReadBufferAsync(). Bool_t TDavixFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented from TFile.; Definition at line 774 of file TDavixFile.cxx. ◆ ReadBuffers(). Bool_t TDavixFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 790 of file TDavixFile.cxx. ◆ Seek(). void TDavixFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Set position from where to start reading. ; Reimplemented from TFile.; Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixFile.html:46229,cache,cache,46229,doc/master/classTDavixFile.html,https://root.cern,https://root.cern/doc/master/classTDavixFile.html,1,['cache'],['cache']
Performance, at line 116 of file RooDataHist.h. ◆ wgtErrHiArray(). double const * RooDataHist::wgtErrHiArray ; (; ); const. inline . Definition at line 218 of file RooDataHist.h. ◆ wgtErrLoArray(). double const * RooDataHist::wgtErrLoArray ; (; ); const. inline . Definition at line 217 of file RooDataHist.h. Friends And Related Symbol Documentation. ◆ RooDataHistSliceIter. friend class RooDataHistSliceIter. friend . Definition at line 227 of file RooDataHist.h. Member Data Documentation. ◆ _arrSize. Int_t RooDataHist::_arrSize {0}. protected . Definition at line 246 of file RooDataHist.h. ◆ _binbounds. std::vector<std::vector<double> > RooDataHist::_binbounds. mutableprotected . ! list of bin bounds per dimension ; Definition at line 260 of file RooDataHist.h. ◆ _binv. double* RooDataHist::_binv {nullptr}. protected . [_arrSize] Bin volume array ; Definition at line 253 of file RooDataHist.h. ◆ _cache_sum. double RooDataHist::_cache_sum {0.}. mutableprotected . ! Cache for sum of entries ; ; Definition at line 264 of file RooDataHist.h. ◆ _cache_sum_valid. Int_t RooDataHist::_cache_sum_valid {kInvalid}. mutableprotected . ! Is cache sum valid? Needs to be Int_t instead of CacheSumState_t for subclasses. ; Definition at line 263 of file RooDataHist.h. ◆ _curIndex. ULong64_t RooDataHist::_curIndex {std::numeric_limits<ULong64_t>::max()}. mutableprotected . Current index. ; Definition at line 255 of file RooDataHist.h. ◆ _errHi. double* RooDataHist::_errHi {nullptr}. mutableprotected . [_arrSize] High-side error on weight array ; Definition at line 251 of file RooDataHist.h. ◆ _errLo. double* RooDataHist::_errLo {nullptr}. mutableprotected . [_arrSize] Low-side error on weight array ; Definition at line 250 of file RooDataHist.h. ◆ _idxMult. std::vector<Int_t> RooDataHist::_idxMult. protected . Definition at line 247 of file RooDataHist.h. ◆ _interpolationBuffer. std::vector<double> RooDataHist::_interpolationBuffer. private . ! Buffer to contain values used for weight interpolatio,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:86935,Cache,Cache,86935,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['Cache'],['Cache']
Performance," at line 1882 of file TVirtualX.cxx. ◆ ListFonts(). char ** TVirtualX::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). virtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2260 of file TVirtualX.cxx. ◆ LoadQueryFont(). FontStruct_t TVirtualX::LoadQueryFont ; (; const char * ; font_name). virtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1299 of file TVirtualX.cxx. ◆ LookupString(). void TVirtualX::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). virtual . Converts the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In ""buf"" a null terminated ASCII string is returned representing the string that is currently mapped to the key code.; Parameters. [in]eventspecifies the event structure to be used ; [in]bufreturns the translated characters ; [in]buflenthe length of the buffer ; [in]keysymreturns the ""keysym"" computed from the event if this argument is no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:100188,Load,LoadQueryFont,100188,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Load'],['LoadQueryFont']
Performance," at line 223 of file TROOT.h. ◆ GetGitDate(). const char * TROOT::GetGitDate ; (; ). Return date/time make was run. ; Definition at line 2474 of file TROOT.cxx. ◆ GetGlobal() [1/2]. TGlobal * TROOT::GetGlobal ; (; const char * ; name, . Bool_t ; load = kFALSE . ); const. Return pointer to global variable by name. ; If load is true force reading of all currently defined globals from CINT (more expensive). ; Definition at line 1631 of file TROOT.cxx. ◆ GetGlobal() [2/2]. TGlobal * TROOT::GetGlobal ; (; const TObject * ; obj, . Bool_t ; load = kFALSE . ); const. Return pointer to global variable with address addr. ; Definition at line 1639 of file TROOT.cxx. ◆ GetGlobalFunction(). TFunction * TROOT::GetGlobalFunction ; (; const char * ; function, . const char * ; params = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If params != 0 it will also resolve overloading other it returns the first name match. If params == 0 and load is true force reading of all currently defined global functions from Cling. The param string must be of the form: ""3189,\""aap\"",1.3"". ; Definition at line 1685 of file TROOT.cxx. ◆ GetGlobalFunctions(). TListOfFunctions * TROOT::GetGlobalFunctions ; (; ). protected . Internal routine returning, and creating if necessary, the list of global function. ; Definition at line 1663 of file TROOT.cxx. ◆ GetGlobalFunctionWithPrototype(). TFunction * TROOT::GetGlobalFunctionWithPrototype ; (; const char * ; function, . const char * ; proto = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If proto != 0 it will also resolve overloading. If load is true force reading of all currently defined global functions from CINT (more expensive). The proto string must be of the form: ""int, char*, float"". ; Definition at line 1718 of file TROOT.cxx. ◆ GetIconPath(). const TString & TROOT::GetIconPath ; (; ). static . Get the icon path in the installation. Static utility function. ; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:53028,load,load,53028,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,2,['load'],['load']
Performance," at line 228 of file TWebCanvas.cxx. ◆ AddSendQueue(). void TWebCanvas::AddSendQueue ; (; unsigned ; connid, . const std::string & ; msg . ). protected . Add message to send queue for specified connection If connid == 0, message will be add to all connections. ; Definition at line 1187 of file TWebCanvas.cxx. ◆ AssignStatusBits(). void TWebCanvas::AssignStatusBits ; (; UInt_t ; bits). protected . Assign clients bits. ; Definition at line 1472 of file TWebCanvas.cxx. ◆ BatchImageMode(). void TWebCanvas::BatchImageMode ; (; UInt_t ; n = 100). static . Configure batch image mode for web graphics. ; Allows to process many images with single headless browser invocation and increase performance of image production. When many canvases are stored as image in difference places, they first collected in batch and then processed when at least n images are prepared. Only then headless browser invoked and create all these images at once. This allows to significantly increase performance of image production in web mode ; Definition at line 156 of file TWebCanvas.cxx. ◆ CalculateColorsHash(). UInt_t TWebCanvas::CalculateColorsHash ; (; ). protected . Calculate hash function for all colors and palette. ; Definition at line 559 of file TWebCanvas.cxx. ◆ CanCreateObject(). virtual Bool_t TWebCanvas::CanCreateObject ; (; const std::string & ; ). inlineprotectedvirtual . Definition at line 170 of file TWebCanvas.h. ◆ CheckCanvasModified(). Bool_t TWebCanvas::CheckCanvasModified ; (; bool ; force_modified = false). protected . Check if any pad on the canvas was modified If yes, increment version of correspondent pad Returns true when canvas really modified. ; Definition at line 2244 of file TWebCanvas.cxx. ◆ CheckDataToSend(). Bool_t TWebCanvas::CheckDataToSend ; (; unsigned ; connid = 0). protected . Check if any data should be send to client If connid != 0, only selected connection will be checked. ; Definition at line 1200 of file TWebCanvas.cxx. ◆ CheckPadModified(). void TWebCanvas::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:21387,perform,performance,21387,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['perform'],['performance']
Performance," at line 271 of file RLoopManager.hxx. ◆ GetUniqueVariationsWithReaders(). std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RVariationsWithReaders > > > & ROOT::Detail::RDF::RLoopManager::GetUniqueVariationsWithReaders ; (; ). inline . Definition at line 276 of file RLoopManager.hxx. ◆ HasDataSourceColumnReaders(). bool RLoopManager::HasDataSourceColumnReaders ; (; const std::string & ; col, . const std::type_info & ; ti . ); const. Return true if AddDataSourceColumnReaders was called for column name col. ; Definition at line 1103 of file RLoopManager.cxx. ◆ IncrChildrenCount(). void ROOT::Detail::RDF::RLoopManager::IncrChildrenCount ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 235 of file RLoopManager.hxx. ◆ InitNodes(). void RLoopManager::InitNodes ; (; ). private . Initialize all nodes of the functional graph before running the event loop. ; This method is called once per event-loop and performs generic initialization operations that do not depend on the specific processing slot (i.e. operations that are common for all threads). ; Definition at line 791 of file RLoopManager.cxx. ◆ InitNodeSlots(). void RLoopManager::InitNodeSlots ; (; TTreeReader * ; r, . unsigned int ; slot . ). private . Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ; Definition at line 728 of file RLoopManager.cxx. ◆ Jit(). void RLoopManager::Jit ; (; ). Add RDF nodes that require just-in-time compilation to the computation graph. ; This method also clears the contents of GetCodeToJit(). ; Definition at line 848 of file RLoopManager.cxx. ◆ JitDeclarations(). void ROOT::Detail::RDF::RLoopManager::JitDeclarations ; (; ). ◆ operator=() [1/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; const RLoopManager & ; ). delete . ◆ operator=() [2/2]. RLoopManager & ROOT::Detail::RDF::RL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:21228,perform,performs,21228,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,1,['perform'],['performs']
Performance," at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 2955 of file TClass.cxx. ◆ GetLastReadInfo(). TVirtualStreamerInfo * TClass::GetLastReadInfo ; (; ); const. inline . Definition at line 444 of file TClass.h. ◆ GetListOfAllPublicDataMembers(). TList * TClass::GetListOfAllPublicDataMembers ; (; Bool_t ; load = kTRUE). Returns a list of all public data members of this class and its base classes. ; Refers to a subset of the data members in GetListOfDatamembers() so don't do GetListOfAllPublicDataMembers()->Delete(). ; Definition at line 3862 of file TClass.cxx. ◆ GetListOfAllPublicMethods(). const TList * TClass::GetListOfAllPublicMethods ; (; Bool_t ; load = kTRUE). Returns a list of all public methods of this class and its base classes. ; Refers to a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; reques",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:81372,load,load,81372,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['load'],['load']
Performance," at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 3022 of file TClass.cxx. ◆ GetLastReadInfo(). TVirtualStreamerInfo * TClass::GetLastReadInfo ; (; ); const. inline . Definition at line 444 of file TClass.h. ◆ GetListOfAllPublicDataMembers(). TList * TClass::GetListOfAllPublicDataMembers ; (; Bool_t ; load = kTRUE). Returns a list of all public data members of this class and its base classes. ; Refers to a subset of the data members in GetListOfDatamembers() so don't do GetListOfAllPublicDataMembers()->Delete(). ; Definition at line 3929 of file TClass.cxx. ◆ GetListOfAllPublicMethods(). const TList * TClass::GetListOfAllPublicMethods ; (; Bool_t ; load = kTRUE). Returns a list of all public methods of this class and its base classes. ; Refers to a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3912 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3703 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3837 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; reques",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:81373,load,load,81373,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['load'],['load']
Performance," attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode==AClean ? (flipAClean() ? ADirty : AClean ) : _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueDirty() const. void clearShapeDirty() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). » Last changed: Mon Dec 7 13:45:31 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:40595,cache,cache,40595,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,2,['cache'],['cache']
Performance," attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DMomentMorphFunction.html:34702,cache,cache,34702,root/html534/Roo2DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html534/Roo2DMomentMorphFunction.html,3,"['Cache', 'cache']","['Cached', 'cache']"
Performance," attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooSetProxy_cacheObsObservable to be cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:37830,cache,cache,37830,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,4,['cache'],['cache']
Performance," automatically created if it does not exist. WARNING: By default the TTree destructor will delete all objects added; to this list. If you do not want these objects to be deleted,; call:. mytree->GetUserInfo()->Clear();. before deleting the tree. void KeepCircular(); Keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(Long64_t maxmemory = 2000000000); Read in memory all baskets from all branches up to the limit of maxmemory bytes. If maxmemory is non null and positive SetMaxVirtualSize is called; with this value. Default for maxmemory is 2000000000 (2 Gigabytes).; The function returns the total number of baskets read into memory; if negative an error occured while loading the branches.; This method may be called to force branch baskets in memory; when random access to branch entries is required.; If random access to only a few branches is required, you should; call directly TBranch::LoadBaskets. Long64_t LoadTree(Long64_t entry); Set current entry. Returns -2 if entry does not exist (just as TChain::LoadTree()). Note: This function is overloaded in TChain. Long64_t LoadTreeFriend(Long64_t entry, TTree* T); Load entry on behalf of our master tree, we may use an index. Called by LoadTree() when the masterTree looks for the entry; number in a friend tree (us) corresponding to the passed entry; number in the masterTree. If we have no index, our entry number and the masterTree entry; number are the same. If we *do* have an index, we must find the (major, minor) value pair; in masterTree to locate our corresponding entry. Int_t MakeClass(const char* classname = 0, Option_t* option = """"); Generate a skeleton analysis class for this tree. The following files are produced: classname.h and classname.C.; If classname is 0, classname will be called ""nameoftree"". The generated code in classname.h includes the following:; - Identification of the original tree and the input file name.; - Definition of an analysis class (data members and member functions).; - The following mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:95628,Load,LoadTree,95628,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['Load'],['LoadTree']
Performance," automatically identified as such; and will be precalculated when fitting to a dataset. By forcibly precalculating functions with non-trivial Jacobians,; or functions of multiple variables occurring in the data set,; using addColumn(), you may alter the outcome of the fit. Only in cases where such a modification of fit behaviour is intentional,; this function should be used. RooArgSet* addColumns(const RooArgList& varList); Utility function to add multiple columns in one call; See addColumn() for details. RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge columns of supplied data set(s) with this data set. All; data sets must have equal number of entries. In case of; duplicate columns the column of the last dataset in the list; prevails. void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void recalculateCache(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void setArgStatus(const RooArgSet& set, Bool_t active); Disabling of branches is (intentionally) not implemented in vector; data stores (as the doesn't result in a net saving of time). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). void Streamer(TBuffer& b); Stream an object of class RooVectorDataStore. RooAbsDataStore* clone(const char* newname = 0) const; { return new RooVectorDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooVectorDataStore.html:15256,cache,cacheArgs,15256,root/html532/RooVectorDataStore.html,https://root.cern,https://root.cern/root/html532/RooVectorDataStore.html,3,"['Cache', 'cache']","['Cache', 'cache', 'cacheArgs']"
Performance," automatically identified as such; and will be precalculated when fitting to a dataset. By forcibly precalculating functions with non-trivial Jacobians,; or functions of multiple variables occurring in the data set,; using addColumn(), you may alter the outcome of the fit. Only in cases where such a modification of fit behaviour is intentional,; this function should be used. RooArgSet* addColumns(const RooArgList& varList); Utility function to add multiple columns in one call; See addColumn() for details. RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge columns of supplied data set(s) with this data set. All; data sets must have equal number of entries. In case of; duplicate columns the column of the last dataset in the list; prevails. void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void setArgStatus(const RooArgSet& set, Bool_t active); Activate or deactivate the branch status of the TTree branch associated; with the given set of dataset observables. void resetCache(); Remove tree with values of cached observables; and clear list of cached observables. void checkInit() const. Stat_t GetEntries() const; Interface function to TTree::GetEntries. void Reset(Option_t* option = 0); Interface function to TTree::Reset. Int_t Fill(); Interface function to TTree::Fill. Int_t GetEntry(Int_t entry = 0, Int_t getall = 0); Interface function to TTree::GetEntry. void Draw(Option_t* option = """"). void Streamer(TBuffer& b); Stream an object of class RooTreeDataStore. RooAbsDataStore* clone(const RooArgSet& vars, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTreeDataStore.html:16317,cache,cacheArgs,16317,root/html526/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html526/RooTreeDataStore.html,9,"['Cache', 'cache']","['Cache', 'cache', 'cacheArgs']"
Performance," average rate on same plot (default); dofit = 0 no fit; 1 fit with the relevant '1st degree related' function; 2 fit with the relevant '2nd degree related' function; 3 fit with varying rcpu function; n0 = for dofit == 3, number of real cores; n1 = for dofit == 3, number of total cores (real + hyperthreaded). TGraphErrors * GetGraph(TDirectory* d, const char* pfn, Int_t& nb, Double_t& xmi, Double_t& xmx, Double_t& ymi, Double_t& ymx, Int_t& kmx, TProfile*& pf); Get from TDirectory 'd' the TProfile named 'pfn' and create the graph.; Return also the max y in mx. void AssertFittingFun(Double_t mi, Double_t mx); Make sure that the fitting functions are defined. void GetPerfSpecs(const char* path = ""."", Int_t degfit = 1); Get performance specs. Check file 'path', or files in directory 'path'; (default current directory).; The degree of the polynomial used for the fit is 'degfit' (default 1). Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); Draw the CPU speedup plot.; opt = 'typewhat', e.g. 'std:max:'; type = 'std:' draw standard plot; 'stdx:' draw standard plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node; what = 'max:' draw max rate; 'avg:' draw average rate; 'all:' draw max and average rate on same plot (default); type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots; dofit = 0 no fit; 1 fit with default 3 parameter saturated I/O formula; 2 fit with 4 par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:11335,Perform,Perform,11335,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,3,['Perform'],['Perform']
Performance," based on treename and filename. This is mostly useful when the TEntryList has multiple sublists for the same tree and filename. . Exceptions. std::runtime_errorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2677 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function creates a special kind of entry list (TEntryListFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2822 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recompu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:99105,load,loads,99105,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['load'],['loads']
Performance," based on treename and filename. This is mostly useful when the TEntryList has multiple sublists for the same tree and filename. . Exceptions. std::runtime_errorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2703 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function creates a special kind of entry list (TEntryListFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2848 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recompu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:99726,load,loads,99726,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['load'],['loads']
Performance," base . ). private . helper function to scan through the all the combinations in the parameter space ; Definition at line 149 of file OptimizeConfigParameters.cxx. ◆ GetSeparation(). Double_t TMVA::OptimizeConfigParameters::GetSeparation ; (; ). private . return the separation between the signal and background MVA ouput distribution ; Definition at line 434 of file OptimizeConfigParameters.cxx. ◆ GetSigEffAtBkgEff(). Double_t TMVA::OptimizeConfigParameters::GetSigEffAtBkgEff ; (; Double_t ; bkgEff = 0.1). private . calculate the signal efficiency for a given background efficiency ; Definition at line 509 of file OptimizeConfigParameters.cxx. ◆ IsA(). virtual TClass * TMVA::OptimizeConfigParameters::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::IFitterTarget.; Definition at line 100 of file OptimizeConfigParameters.h. ◆ Log(). MsgLogger & TMVA::OptimizeConfigParameters::Log ; (; ); const. inlineprivate . Definition at line 98 of file OptimizeConfigParameters.h. ◆ optimize(). std::map< TString, Double_t > TMVA::OptimizeConfigParameters::optimize ; (; ). Definition at line 127 of file OptimizeConfigParameters.cxx. ◆ optimizeFit(). void TMVA::OptimizeConfigParameters::optimizeFit ; (; ). private . Definition at line 242 of file OptimizeConfigParameters.cxx. ◆ optimizeScan(). void TMVA::OptimizeConfigParameters::optimizeScan ; (; ). private . do the actual optimization using a simple scan method, i.e. ; calculate the FOM for different tuning paraemters and remember which one is gave the best FOM ; Definition at line 164 of file OptimizeConfigParameters.cxx. ◆ Streamer(). virtual void TMVA::OptimizeConfigParameters::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IFitterTarget. ◆ StreamerNVirtual(). void TMVA::OptimizeConfigParameters::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file OptimizeConfigParameters.h. Member Data Documentation. ◆ fAlread",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:9148,Optimiz,OptimizeConfigParameters,9148,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Optimiz'],['OptimizeConfigParameters']
Performance," basic information that is practically; view independent. This is called when scene content is changed; or when camera-interest changes. void UpdateSceneInfo(TGLRnrCtx& ctx); Fill scene-info with information needed for rendering, take into; account the render-context (viewer state, camera, clipping).; Usually called from TGLViewer before rendering a scene if some; moderately significant part of render-context has changed. Here we update the basic state (clear last-LOD, mark the time,; set global <-> scene transforamtion matrices) and potentially; study and refine the clipping planes based on scene bounding box. void LodifySceneInfo(TGLRnrCtx& ctx); Setup LOD-dependant values in scene-info. Nothing to be done here but to store the last LOD. void PreDraw(TGLRnrCtx& rnrCtx); Perform basic pre-render initialization:; - calculate LOD, Style, Clipping,; - build draw lists. This is called in the beginning of the GL-viewer draw cycle. void PreRender(TGLRnrCtx& rnrCtx); Perform pre-render initialization - fill rnrCtx with; values stored during PreDraw(). This is called each time before RenderXyzz(). void Render(TGLRnrCtx& rnrCtx); This function does rendering of all stages, the shapes are; rendered in the following order: opaque, transparent,; selected-opaque, selected-transparent. GL-depth buffer is cleared after transparent shapes have been; rendered. This is never called from ROOT GL directly. Use it if you know; you are rendering a single scene. void RenderOpaque(TGLRnrCtx& rnrCtx); Render opaque elements. void RenderTransp(TGLRnrCtx& rnrCtx); Render transparent elements. void RenderSelOpaque(TGLRnrCtx& rnrCtx); Render selected opaque elements. void RenderSelTransp(TGLRnrCtx& rnrCtx); Render selected transparent elements for highlight. void RenderSelOpaqueForHighlight(TGLRnrCtx& rnrCtx); Render selected opaque elements for highlight. void RenderSelTranspForHighlight(TGLRnrCtx& rnrCtx); Render selected transparent elements. void PostRender(TGLRnrCtx& rnrCtx); Perform post-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLSceneBase.html:6033,Perform,Perform,6033,root/html534/TGLSceneBase.html,https://root.cern,https://root.cern/root/html534/TGLSceneBase.html,3,['Perform'],['Perform']
Performance," basic information that is practically; view independent. This is called when scene content is changed; or when camera-interest changes. void UpdateSceneInfo(TGLRnrCtx& ctx); Fill scene-info with information needed for rendering, take into; account the render-context (viewer state, camera, clipping).; Usually called from TGLViewer before rendering a scene if some; moderately significant part of render-context has changed. Here we update the basic state (clear last-LOD, mark the time,; set global <-> scene transforamtion matrices) and potentially; study and refine the clipping planes based on scene bounding box. void LodifySceneInfo(TGLRnrCtx& ctx); Setup LOD-dependant values in scene-info. Nothing to be done here but to store the last LOD. void PreDraw(TGLRnrCtx& rnrCtx); Perform basic pre-render initialization:; - calculate LOD, Style, Clipping,; - build draw lists. This is called in the beginning of the GL-viewer draw cycle. void PreRender(TGLRnrCtx& rnrCtx); Perform pre-render initialization - fill rnrCtx with; values stored during PreDraw(). This is called each time before RenderXyzz(). void Render(TGLRnrCtx& rnrCtx); This function does rendering of all stages, the shapes are; rendered in the following order: opaque, transparent,; selected-opaque, selected-transparent. GL-depth buffer is cleared after transparent shapes have been; rendered. This is never called from ROOT GL directly. Use it if you know; you are rendering a single scene. void RenderOpaque(TGLRnrCtx& rnrCtx); Render opaque elements. void RenderTransp(TGLRnrCtx& rnrCtx); Render transparent elements. void RenderSelOpaque(TGLRnrCtx& rnrCtx); Render selected opaque elements. void RenderSelTransp(TGLRnrCtx& rnrCtx); Render selected transparent elements. void PostRender(TGLRnrCtx& rnrCtx); Perform post-render clean-up. void PostDraw(TGLRnrCtx& rnrCtx); Finalize drawing. This is called at the end of the GL-viewer draw cycle. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); Process selection",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSceneBase.html:5894,Perform,Perform,5894,root/html528/TGLSceneBase.html,https://root.cern,https://root.cern/root/html528/TGLSceneBase.html,3,['Perform'],['Perform']
Performance," batch. ;  . Private Types; using BatchIterator_t = TTensorBatchIterator< Data_t, Architecture_t >;  ; using DeviceBuffer_t = typename Architecture_t::DeviceBuffer_t;  ; using HostBuffer_t = typename Architecture_t::HostBuffer_t;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Shape_t = typename Architecture_t::Tensor_t::Shape_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Private Attributes; size_t fBatchDepth;  The number of matrices in the tensor. ;  ; size_t fBatchHeight;  The number od rows in each matrix. ;  ; size_t fBatchIndex;  The index of the batch when there are multiple batches in parallel. ;  ; size_t fBatchSize;  The size of a batch. ;  ; size_t fBatchWidth;  The number of columns in each matrix. ;  ; const Data_t & fData;  The data that should be loaded in the batches. ;  ; std::vector< DeviceBuffer_t > fDeviceBuffers;  The device buffers used to keep the input, output and weight data. ;  ; std::vector< HostBuffer_t > fHostBuffers;  The host buffers used to load the input, output and weight data. ;  ; Shape_t fInputLayout;  The input data layout (does not include batch size) ;  ; size_t fNOutputFeatures;  The number of outputs from the classifier/regressor. ;  ; size_t fNSamples;  The total number of samples in the dataset. ;  ; size_t fNStreams;  Number of buffer pairs. ;  ; std::vector< size_t > fSampleIndices;  Ordering of the samples in the epoch. ;  . #include <TMVA/DNN/TensorDataLoader.h>; Member Typedef Documentation. ◆ BatchIterator_t. template<typename Data_t , typename Architecture_t > . using TMVA::DNN::TTensorDataLoader< Data_t, Architecture_t >::BatchIterator_t = TTensorBatchIterator<Data_t, Architecture_t>. private . Definition at line 140 of file TensorDataLoader.h. ◆ DeviceBuffer_t. template<typename Data_t , typename Architecture_t > . using TMVA::DNN::TTensorDataLoader< Data_t, Architecture_t >::DeviceBuffer_t = typename Architecture_t::DeviceBuffer_t. private . Definition at line 136 of file TensorDataL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html:7784,load,load,7784,doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html,1,['load'],['load']
Performance," be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Find a dynamic library called lib using the system search paths.; Appends known extensions if needed. Returned string must be deleted; by the user!. const char * FindDynamicLibrary(TString& lib, Bool_t quiet = kFALSE); Find a dynamic library using the system search paths. lib will be updated; to contain the absolute filename if found. Returns lib if found, or NULL; if a library called lib was not found.; This function does not open the library. Func_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:34023,Load,Load,34023,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,4,['Load'],['Load']
Performance," be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wild",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:33051,Load,Load,33051,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,8,['Load'],['Load']
Performance," be available through the function; 2792/// TSystem::SetIncludePath().; 2793/// A good default will be provided so that a typical user session should be at; 2794/// most:; 2795/// ~~~ {.cpp}; 2796/// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; 2797/// -I$HOME/mypackage/include"");; 2798/// root[2] .x myfunc.C++(10,20);; 2799/// ~~~; 2800/// The user may sometimes try to compile a script before it has loaded all the; 2801/// needed shared libraries. In this case we want to be helpful and output a; 2802/// list of the unresolved symbols. So if the loading of the created shared; 2803/// library fails, we will try to build a executable that contains the; 2804/// script. The linker should then output a list of missing symbols.; 2805///; 2806/// To support this we provide a TSystem::SetMakeExe() function, that sets the; 2807/// directive telling how to create an executable. The loader will need; 2808/// to be informed of all the libraries available. The information about; 2809/// the libraries that has been loaded by .L and TSystem::Load() is accessible; 2810/// to the script compiler. However, the information about; 2811/// the libraries that have been selected at link time by the application; 2812/// builder (like the root libraries for root.exe) are not available and need; 2813/// to be explicitly listed in fLinkedLibs (either by default or by a call to; 2814/// TSystem::SetLinkedLibs()).; 2815///; 2816/// To simplify customization we could also add to the .rootrc support for the; 2817/// variables; 2818/// ~~~ {.cpp}; 2819/// Unix.*.Root.IncludePath: -I$ROOTSYS/include; 2820/// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; 2821///; 2822/// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; 2823/// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; 2824/// ~~~; 2825/// And also support for MakeSharedLibs() and MakeExe().; 2826///; 2827/// (the ... have to be replaced by the actual values and are here only to; 2828/// shorten this comment).; 2829///;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:92656,load,loaded,92656,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['load'],['loaded']
Performance," be casted to MethodCategory. /Factory""; 435 << Endl; // DSMTEST; 436 return nullptr;; 437 }; 438 if (fModelPersistence); 439 methCat->SetWeightFileDir(fileDir);; 440 methCat->SetModelPersistence(fModelPersistence);; 441 methCat->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 442 methCat->SetFile(fgTargetFile);; 443 methCat->SetSilentFile(IsSilentFile());; 444 } // DSMTEST; 445 ; 446 if (!method->HasAnalysisType(fAnalysisType, loader->GetDataSetInfo().GetNClasses(),; 447 loader->GetDataSetInfo().GetNTargets())) {; 448 Log() << kWARNING << ""Method "" << method->GetMethodTypeName() << "" is not capable of handling "";; 449 if (fAnalysisType == Types::kRegression) {; 450 Log() << ""regression with "" << loader->GetDataSetInfo().GetNTargets() << "" targets."" << Endl;; 451 } else if (fAnalysisType == Types::kMulticlass) {; 452 Log() << ""multiclass classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 453 } else {; 454 Log() << ""classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 455 }; 456 return 0;; 457 }; 458 ; 459 if (fModelPersistence); 460 method->SetWeightFileDir(fileDir);; 461 method->SetModelPersistence(fModelPersistence);; 462 method->SetAnalysisType(fAnalysisType);; 463 method->SetupMethod();; 464 method->ParseOptions();; 465 method->ProcessSetup();; 466 method->SetFile(fgTargetFile);; 467 method->SetSilentFile(IsSilentFile());; 468 ; 469 // check-for-unused-options is performed; may be overridden by derived classes; 470 method->CheckSetup();; 471 ; 472 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 473 MVector *mvector = new MVector;; 474 fMethodsMap[datasetname] = mvector;; 475 }; 476 fMethodsMap[datasetname]->push_back(method);; 477 return method;; 478}; 479 ; 480////////////////////////////////////////////////////////////////////////////////; 481/// Books MVA method. The option configuration string is custom for each MVA; 482/// the TString field ""theN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:18853,load,loader,18853,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," be convolved ; [in]pdf2Second PDF to be convolved ; [in]ipOrderOrder for interpolation between bins (since FFT is discrete) The binning used for the FFT sampling is controlled by the binning named ""cache"" in the convolution observable convVar. If such a binning is not set, the same number of bins as for convVar will be used. . Definition at line 223 of file RooFFTConvPdf.cxx. ◆ RooFFTConvPdf() [3/4]. RooFFTConvPdf::RooFFTConvPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; pdfConvVar, . RooRealVar & ; convVar, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . Int_t ; ipOrder = 2 . ). Constructor for numerical (FFT) convolution of PDFs. ; Parameters. [in]nameName of this PDF ; [in]titleTitle for plotting this PDF ; [in]convVarObservable to convolve the PDFs in . AttentionUse a high number of bins (>= 1000) for good accuracy. ; Parameters. [in]pdf1First PDF to be convolved ; [in]pdf2Second PDF to be convolved ; [in]ipOrderOrder for interpolation between bins (since FFT is discrete) The binning used for the FFT sampling is controlled by the binning named ""cache"" in the convolution observable convVar. If such a binning is not set, the same number of bins as for convVar will be used. ; [in]pdfConvVarIf the variable used for convolution is a PDF, itself, pass the PDF here, and pass the convolution variable to convVar. See also rf210_angularconv.C in the roofit tutorials . Definition at line 248 of file RooFFTConvPdf.cxx. ◆ RooFFTConvPdf() [4/4]. RooFFTConvPdf::RooFFTConvPdf ; (; const RooFFTConvPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 272 of file RooFFTConvPdf.cxx. ◆ ~RooFFTConvPdf(). RooFFTConvPdf::~RooFFTConvPdf ; (; ). override . Destructor. ; Definition at line 292 of file RooFFTConvPdf.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooFFTConvPdf::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return the observables to be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:86129,cache,cache,86129,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['cache'],['cache']
Performance," be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; TStringfOptimizationFitTypewhich type of optimisation procedure to be used ; map<TString,TMVA::Interval>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__OptimizeConfigParameters.html:2797,optimiz,optimizeScan,2797,root/html528/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html528/TMVA__OptimizeConfigParameters.html,2,['optimiz'],"['optimization', 'optimizeScan']"
Performance," be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42304,cache,cached,42304,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['cache'],['cached']
Performance," be memory or disk-resident trees. The new tree is created in the current directory (memory if gROOT). ; Definition at line 6851 of file TTree.cxx. ◆ MoveReadCache(). void TTree::MoveReadCache ; (; TFile * ; src, . TDirectory * ; dir . ). protected . Move a cache from a file to the current file in dir. ; if src is null no operation is done, if dir is null or there is no current file the cache is deleted. ; Definition at line 6983 of file TTree.cxx. ◆ Notify(). bool TTree::Notify ; (; ). overridevirtual . Function called when loading a new class library. ; Reimplemented from TObject.; Definition at line 7033 of file TTree.cxx. ◆ operator=(). TTree & TTree::operator= ; (; const TTree & ; tt). delete . ◆ OptimizeBaskets(). void TTree::OptimizeBaskets ; (; ULong64_t ; maxMemory = 10000000, . Float_t ; minComp = 1.1, . Option_t * ; option = """" . ). virtual . This function may be called after having filled some entries in a Tree. ; Using the information in the existing branch buffers, it will reassign new branch buffer sizes to optimize time and memory.; The function computes the best values for branch buffer sizes such that the total buffer sizes is less than maxMemory and nearby entries written at the same time. In case the branch compression factor for the data written so far is less than compMin, the compression is disabled.; if option =""d"" an analysis report is printed. ; Definition at line 7057 of file TTree.cxx. ◆ Principal(). TPrincipal * TTree::Principal ; (; const char * ; varexp = """", . const char * ; selection = """", . Option_t * ; option = ""np"", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). Interface to the Principal Components Analysis class. ; Create an instance of TPrincipal; Fill it with the selected variables. if option ""n"" is specified, the TPrincipal object is filled with normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:185584,optimiz,optimize,185584,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['optimiz'],['optimize']
Performance," be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:6866,optimiz,optimizations,6866,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['optimiz'],['optimizations']
Performance," be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are tak",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:22273,cache,cache,22273,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['cache'],['cache']
Performance," be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context hol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:13680,cache,cache,13680,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,4,['cache'],['cache']
Performance," be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:14317,cache,cache,14317,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,2,['cache'],['cache']
Performance," before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQLFile, TXMLFile, TMemFile, TWebFile, and TNetXNGFile.; Definition at line 1347 of file TFile.cxx. ◆ GetStreamerInfoCache(). const TList * TFile::GetStreamerInfoCache ; (; ). Returns the cached list of StreamerInfos used in this file. ; Definition at line 1366 of file TFile.cxx. ◆ GetStreamerInfoList(). TList * TFile::GetStreamerInfoList ; (; ). finalvirtual . Read the list of TStreamerInfo objects written to this file. ; The function returns a TList. It is the user's responsibility to delete the list created by this function.; Note the list, in addition to TStreamerInfo object, contains sometimes a TList named 'listOfRules' and containing the schema evolution rules related to the file's content.; Using the list, one can access additional information, e.g.: TFile f(""myfile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:161. Definition at line 1445 of file TFile.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:69518,cache,cached,69518,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['cache'],['cached']
Performance," before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQLFile, TXMLFile, TMemFile, TWebFile, and TNetXNGFile.; Definition at line 1347 of file TFile.cxx. ◆ GetStreamerInfoCache(). const TList * TFile::GetStreamerInfoCache ; (; ). Returns the cached list of StreamerInfos used in this file. ; Definition at line 1366 of file TFile.cxx. ◆ GetStreamerInfoList(). TList * TFile::GetStreamerInfoList ; (; ). finalvirtual . Read the list of TStreamerInfo objects written to this file. ; The function returns a TList. It is the user's responsibility to delete the list created by this function.; Note the list, in addition to TStreamerInfo object, contains sometimes a TList named 'listOfRules' and containing the schema evolution rules related to the file's content.; Using the list, one can access additional information, e.g.: TFile f(""myfile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:202. Definition at line 1445 of file TFile.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:69584,cache,cached,69584,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['cache'],['cached']
Performance," begin and end of replacementFormula; 2033 replacementFormula.Insert(0, '(');; 2034 replacementFormula.Insert(replacementFormula.Length(), ')');; 2035 formula.Replace(i - name.Length(), name.Length(), replacementFormula, replacementFormula.Length());; 2036 // move forward the index i of the main loop; 2037 i += replacementFormula.Length() - name.Length();; 2038 ; 2039 // we have extracted all the functor for ""fname""; 2040 // std::cout << ""We have extracted all the functors for fname"" << std::endl;; 2041 // std::cout << "" i = "" << i << "" f[i] = "" << formula[i] << "" - "" << formula << std::endl;; 2042 name = """";; 2043 ; 2044 continue;; 2045 }; 2046 ; 2047 // add now functor in; 2048 TString replacement = TString::Format(""{%s}"", name.Data());; 2049 formula.Replace(i - name.Length(), name.Length(), replacement, replacement.Length());; 2050 i += 2;; 2051 fFuncs.push_back(TFormulaFunction(name));; 2052 }; 2053 }; 2054 name = body = """";; 2055 }; 2056}; 2057 ; 2058////////////////////////////////////////////////////////////////////////////////; 2059/// Iterates through functors in fFuncs and performs the appropriate action.; 2060/// If functor has 0 arguments (has only name) can be:; 2061/// - variable; 2062/// * will be replaced with x[num], where x is an array containing value of this variable under num.; 2063/// - pre-defined formula; 2064/// * will be replaced with formulas body; 2065/// - constant; 2066/// * will be replaced with constant value; 2067/// - parameter; 2068/// * will be replaced with p[num], where p is an array containing value of this parameter under num.; 2069/// If has arguments it can be :; 2070/// - function shortcut, eg. sin; 2071/// * will be replaced with fullname of function, eg. sin -> TMath::Sin; 2072/// - function from cling environment, eg. TMath::BreitWigner(x,y,z); 2073/// * first check if function exists, and has same number of arguments, then accept it and set as found.; 2074/// If all functors after iteration are matched with correspondin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:78236,perform,performs,78236,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['perform'],['performs']
Performance," being generated; Bool_tRooAbsGenContext::_isValidIs context in valid state?; static Int_tRooPrintable::_nameLength; Int_tRooAbsGenContext::_nextProtoIndexNext prototype event to load according to LUT; TStringRooAbsGenContext::_normRangeNormalization range of pdf; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooArgSet*_cloneSetInternal clone of p.d.f.; RooAbsReal*_effPointer to efficiency function; RooAbsGenContext*_generatorGenerator context for p.d.f. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooEffGenContext(const RooAbsPdf& model, const RooAbsPdf& pdf, const RooAbsReal& eff, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Constructor of generator context for RooEffProd products. ~RooEffGenContext(); Destructor. void initGenerator(const RooArgSet& theEvent); One-time initialization of generator. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. Generate an event from the p.d.f and; then perform an accept/reject sampling based on the efficiency; function. RooEffGenContext(const RooAbsPdf& model, const RooAbsPdf& pdf, const RooAbsReal& eff, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Thu Sep 23 19:59:30 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffGenContext.html:9350,perform,perform,9350,root/html528/RooEffGenContext.html,https://root.cern,https://root.cern/root/html528/RooEffGenContext.html,1,['perform'],['perform']
Performance," below (above) the data point, ey is ey_low (ey_high).; The approach used to approximate the uncertainty in y because of the errors in x is to make it equal the error in x times the slope of the line. This approach is called ""effective variance method"" and the implementation is provided in the function FitUtil::EvaluateChi2Effective. Linear fitting:; When the fitting function is linear (contains the ++ sign) or the fitting function is a polynomial, a linear fitter is initialised. To create a linear function, use the following syntax: linear parts separated by ++ sign. Example: to fit the parameters of the function p0*x + p1*sin(x), you can create a TF1 object as TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; For such a TF1 you don't have to set the initial conditions and the linear fitter is used. Going via the linear fitter for functions, linear in parameters, gives a considerable advantage in speed. When using the linear fitting it is also possible to perform a robust fitting with the Least Trimmed Square (LTS) regression algorithm, by using the fit option ROB. See the tutorial fitLinearRobust.C. Notes on TGraph/TGraphErrors Fitting:. By using the ""effective variance"" method a simple linear regression becomes a non-linear case, which takes several iterations instead of 0 as in the linear case.; The effective variance technique assumes that there is no correlation between the x and y coordinate.; The standard chi2 (least square) method without error in the coordinates (x) can be forced by using option ""EX0""; The linear fitter doesn't take into account the errors in x. When fitting a TGraphErrors with a linear functions the errors in x will not be considered. If errors in x are important, use option ""F"" for linear function fitting.; When fitting a TGraph (i.e. no errors associated with each point), a correction is applied to the errors on the parameters with the following formula: parameter_error *= sqrt(chisquare/(ndf-1)). General Fitting documentation; See in T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:51597,perform,perform,51597,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['perform'],['perform']
Performance," below to add branches to this tree. If the first character of title is a ""/"", the function assumes a folder name.; In this case, it creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. void AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:35511,cache,cache,35511,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['cache'],['cache']
Performance," between these two functions. See WARNING below about entry. This method is used by PROOF.; bool TSelector::ProcessCut(Long64_t entry). This method is called before processing entry. It is the user's responsibility to read the corresponding entry in memory (may be just a partial read). The function returns true if the entry must be processed, false otherwise. This method is obsolete, use Process(). See WARNING below about entry.; void TSelector::ProcessFill(Long64_t entry). This method is called for all selected entries. User fills histograms in this function. This method is obsolete, use Process(). See WARNING below about entry.; void TSelector::SlaveTerminate(). This method is called at the end of the loop on all PROOF worker nodes. In local mode this method is called on the client too.; void TSelector::Terminate(). This method is called at the end of the loop on all entries. When using PROOF Terminate() is call on the client only. Typically one performs the fits on the produced histograms or write the histograms to file in this method. WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use the pointer to the current Tree to call GetEntry(entry). entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use fChain->GetTree()->GetEntry(entry); ; Definition at line 31 of file TSelector.h. Public Types; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:2519,perform,performs,2519,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['perform'],['performs']
Performance," bin volumes. Bins are indexed according to getIndex(). ;  ; std::string calculateTreeIndexForCodeSquash (RooAbsArg const *klass, RooFit::Detail::CodeSquashContext &ctx, const RooAbsCollection &coords, bool reverse=false) const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; std::string declWeightArrayForCodeSquash (RooFit::Detail::CodeSquashContext &ctx, bool correctForBinSize) const;  ; RooFit::OwningPtr< RooAbsData > emptyClone (const char *newName=nullptr, const char *newTitle=nullptr, const RooArgSet *vars=nullptr, const char *=nullptr) const override;  Return empty clone of this RooDataHist. ;  ; const RooArgSet * get () const override;  Get bin centre of current bin. ;  ; virtual const RooArgSet * get (const RooArgSet &coord) const;  Return a RooArgSet with whose coordinates denote the bin centre of the bin enclosing the point in coord. ;  ; const RooArgSet * get (Int_t binNumber) const override;  Load bin binNumber, and return an argset with the coordinates of the bin centre. ;  ; std::vector< std::unique_ptr< const RooAbsBinning > > const & getBinnings () const;  ; Int_t getIndex (const RooAbsCollection &coord, bool fast=false) const;  Calculate bin number of the given coordinates. ;  ; Int_t getIndex (const RooArgSet &coord, bool fast=false) const;  Calculate bin number of the given coordinates. ;  ; std::span< const double > getWeightBatch (std::size_t first, std::size_t len, bool sumW2=false) const override;  Return event weights of all events in range [first, first+len). ;  ; TClass * IsA () const override;  ; bool isNonPoissonWeighted () const override;  Returns true if dataset contains entries with a non-integer weight. ;  ; bool isWeighted () const override;  Always returns true as all histograms use event weights. ;  ; RooDataHist & operator= (const RooDataHist &)=delete;  ; virtual RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:6023,Load,Load,6023,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['Load'],['Load']
Performance," binding of RooAbsReal func to; variables 'vars'. Use the provided nset as normalization set to; be passed to RooAbsReal::getVal() If rangeName is not null, use; the range of with that name as range associated with the; variables of this function binding. If clipInvalid is true,; values requested to the function binding that are outside the; defined range of the variables are clipped to fit in the defined; range. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); Construct a lightweight function binding of RooAbsReal func to; variables 'vars'. Use the provided nset as normalization set to; be passed to RooAbsReal::getVal() If rangeName is not null, use; the range of with that name as range associated with the; variables of this function binding. If clipInvalid is true,; values requested to the function binding that are outside the; defined range of the variables are clipped to fit in the defined; range. ~RooRealBinding(); Destructor. void saveXVec() const; Save value of all variables. void restoreXVec() const; Restore value of all variables to previously; saved values by saveXVec(). void loadValues(const Double_t* xvector) const; Load the vector of variable values into the RooRealVars associated; as variables with the bound RooAbsReal function. Double_t operator()(const Double_t* xvector) const; Evaluate the bound RooAbsReal at the variable values provided in xvector. Double_t getMinLimit(UInt_t dimension) const; Return lower limit on i-th variable. Double_t getMaxLimit(UInt_t dimension) const; Return upper limit on i-th variable. const char* getName() const; Return name of function. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const. std::list<Double_t>* binBoundaries(Int_t ) const. » Last changed: Fri Dec 2 14:26:59 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealBinding.html:3295,load,loadValues,3295,root/html532/RooRealBinding.html,https://root.cern,https://root.cern/root/html532/RooRealBinding.html,2,"['Load', 'load']","['Load', 'loadValues']"
Performance," binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. If the fixed set of cache observables does not match the observables defined in the use context of the p.d.f the cache is still filled completely. Ee.g. when it is specified to cache x and p and only x is a observable in the given use context the cache histogram will store sampled values for all values of observable x and parameter p. In such a mode of operation the cache will also not be recalculated if the observable p changes ; Definition at line 66 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [3/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf . ). Constructor taking name, title and function to be cached. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. The dimensions of the cache are automatically matched to the number of observables used in each use context. Multiple cache in different observable may exists simultaneously if the cached p.d.f is used with multiple observable configurations simultaneously ; Definition at line 44 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [4/4]. RooCachedPdf::RooCachedPdf ; (; const RooCachedPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 79 of file RooCachedPdf.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooCachedPdf::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . If this pdf is operated with a fixed set of observables, return the subset of the fixed observables that are actual dependents of the external input p.d.f. ; If this p.d.f is operated without a fixed set of cache observables, return the actual observables of the external input p.d.f given the choice of observables defined in nset ; Implements RooAbsCachedPdf.; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:78441,cache,cache,78441,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['cache'],['cache']
Performance," bins with identical labels; will be merged, no matter what their order is.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The axis x may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width.; Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }. TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h.Merge(list);; h->Draw();; }. void Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1; if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. void Multiply(const TH1* h1); -*-*-*-*-*-*-*-*-*Multiply this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this*h1. If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. void Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by multiplication of h1 by h2*-*. thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:92590,Perform,Performs,92590,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['Perform'],['Performs']
Performance," bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TWebFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Long64_t GetMaxFullCacheSize ();  Static method returning maxmimal size of full cache, which can be preserved by file instance. ;  ; static const char * GetProxy ();  Static method returning the global proxy URL. ;  ; static void SetMaxFullCacheSize (Long64_t sz);  Static method, set maxmimal size of full cache,. ;  ; static void SetProxy (const char *url);  Static method setting global proxy URL. ;  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:26899,cache,cache,26899,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['cache'],['cache']
Performance," bool assumeSameType) const; 271{; 272 if (!assumeSameType) {; 273 const RooAbsReal* otherReal = dynamic_cast<const RooAbsReal*>(&other) ;; 274 return otherReal ? operator==(otherReal->getVal()) : false ;; 275 } else {; 276 return getVal() == static_cast<const RooAbsReal&>(other).getVal();; 277 }; 278}; 279 ; 280 ; 281////////////////////////////////////////////////////////////////////////////////; 282/// Return this variable's title string. If appendUnit is true and; 283/// this variable has units, also append a string "" (<unit>)"".; 284 ; 285TString RooAbsReal::getTitle(bool appendUnit) const; 286{; 287 if(appendUnit && 0 != strlen(getUnit())) {; 288 return std::string{GetTitle()} + "" ("" + getUnit() + "")"";; 289 }; 290 return GetTitle();; 291}; 292 ; 293 ; 294 ; 295////////////////////////////////////////////////////////////////////////////////; 296/// Return value of object. If the cache is clean, return the; 297/// cached value, otherwise recalculate on the fly and refill; 298/// the cache; 299 ; 300double RooAbsReal::getValV(const RooArgSet* nset) const; 301{; 302 if (nset && nset->uniqueId().value() != _lastNormSetId) {; 303 const_cast<RooAbsReal*>(this)->setProxyNormSet(nset);; 304 _lastNormSetId = nset->uniqueId().value();; 305 }; 306 ; 307 if (isValueDirtyAndClear()) {; 308 _value = traceEval(nullptr) ;; 309 // clearValueDirty() ;; 310 }; 311 ; 312 return hideOffset() ? _value + offset() : _value;; 313}; 314 ; 315 ; 316////////////////////////////////////////////////////////////////////////////////; 317/// Calculate current value of object, with error tracing wrapper; 318 ; 319double RooAbsReal::traceEval(const RooArgSet* /*nset*/) const; 320{; 321 double value = evaluate() ;; 322 ; 323 if (TMath::IsNaN(value)) {; 324 logEvalError(""function value is NAN"") ;; 325 }; 326 ; 327 //cxcoutD(Tracing) << ""RooAbsReal::getValF("" << GetName() << "") operMode = "" << _operMode << "" recalculated, new value = "" << value << std::endl ;; 328 ; 329 //Standard tracing code goes h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:9973,cache,cache,9973,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,3,['cache'],"['cache', 'cached']"
Performance," bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. bool LinearFit(const ROOT::Fit::BinData& data). do a linear fit on a set of bin-data. { return DoLinearFit(data); }. void SetFunction(const IModelFunction & func, bool useGradient = false). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func, bool useGradient = false). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise an error (false) is returned.; The result will be appended in the fit result class; Optionally a vector of parameter indeces can be passed for selecting; the parameters to analyse using FitConfig::SetMinosErrors. bool IsBinFit() const. query if fit is binned. In cse of false teh fit can be unbinned; or is not defined (like in case of fitting through a ::FitFCN). { return fBinFit; }. ROOT::Math::Minimizer * GetMinimizer() const. return pointer to last used minimizer; (is NULL in case fit is not yet done); This pointer will be valid as far as the data, the objective function; and the fitter class have not been deleted.; To be used only after fitting.; The pointer should not be stored and will be invalided after performing a new fitting.; In this case a new instance of ROOT::Math::Minimizer will be re-created and can be; obtained calling again GetMinimizer(). { return fMinimizer.get(); }. ROOT::Math::IMultiGenFunction * GetFCN() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__Fitter.html:12043,perform,perform,12043,root/html532/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__Fitter.html,3,['perform'],['perform']
Performance," bool isGenreflex, bool isSelXML, bool writeEmptyRootPCM);  ; static std::string GenerateFwdDeclString (const RScanner &scan, const cling::Interpreter &interp);  Generate the fwd declarations of the selected entities. ;  ; void GenerateLinkdef (llvm::cl::list< std::string > &InputFiles, std::string &code_for_parser);  ; void GenerateNecessaryIncludes (std::ostream &dictStream, const std::string &includeForSource, const std::string &extraIncludes);  ; const std::string GenerateStringFromHeadersForClasses (const HeadersDeclsMap_t &headersClassesMap, const std::string &detectedUmbrella, bool payLoadOnly=false);  Generate a string for the dictionary from the headers-classes map. ;  ; int GenReflexMain (int argc, char **argv);  Translate the arguments of genreflex into rootcling ones and forward them to the RootCling function. ;  ; const char * GetExePath ();  Returns the executable path name, used e.g. by SetRootSys(). ;  ; std::pair< std::string, std::string > GetExternalNamespaceAndContainedEntities (const std::string line);  Performance is not critical here. ;  ; size_t GetFullArrayLength (const clang::ConstantArrayType *arrayType);  ; std::string GetFwdDeclnArgsToKeepString (const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt, cling::Interpreter &interp);  ; static llvm::StringRef GetModuleNameFromRdictName (llvm::StringRef rdictName);  ; void GetMostExternalEnclosingClassName (const clang::DeclContext &theContext, std::string &ctxtName, const cling::Interpreter &interpreter, bool treatParent=true);  Extract the proper autoload key for nested classes The routine does not erase the name, just updates it. ;  ; void GetMostExternalEnclosingClassNameFromDecl (const clang::Decl &theDecl, std::string &ctxtName, const cling::Interpreter &interpreter);  ; string GetNonConstMemberName (const clang::FieldDecl &m, const string &prefix="""");  Return the name of the data member so that it can be used by non-const operation (so it includes a const_cast if necessary). ;  ; clang::Qual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx.html:10810,Perform,Performance,10810,doc/master/rootcling__impl_8cxx.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx.html,1,['Perform'],['Performance']
Performance," bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; Optimisation interface; These functions allow RooFit to optimise a computation graph, to keep track of cached values, and to invalidate caches. . virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:21339,cache,cacheList,21339,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,['cache'],"['cacheList', 'cached']"
Performance," bool subbranches); 1061{; 1062 if (!GetTree()) {; 1063 if (LoadTree(0)<0) {; 1064 Error(""AddBranchToCache"",""Could not load a tree"");; 1065 return -1;; 1066 }; 1067 }; 1068 if (GetTree()) {; 1069 if (GetTree() != this) {; 1070 return GetTree()->AddBranchToCache(bname, subbranches);; 1071 }; 1072 } else {; 1073 Error(""AddBranchToCache"", ""No tree is available. Branch was not added to the cache"");; 1074 return -1;; 1075 }; 1076 ; 1077 TFile *f = GetCurrentFile();; 1078 if (!f) {; 1079 Error(""AddBranchToCache"", ""No file is available. Branch was not added to the cache"");; 1080 return -1;; 1081 }; 1082 TTreeCache *tc = GetReadCache(f,true);; 1083 if (!tc) {; 1084 Error(""AddBranchToCache"", ""No cache is available, branch not added"");; 1085 return -1;; 1086 }; 1087 return tc->AddBranch(bname,subbranches);; 1088}; 1089 ; 1090////////////////////////////////////////////////////////////////////////////////; 1091/// Add branch b to the Tree cache.; 1092/// if subbranches is true all the branches of the subbranches are; 1093/// also put to the cache.; 1094///; 1095/// Returns:; 1096/// - 0 branch added or already included; 1097/// - -1 on error; 1098 ; 1099Int_t TTree::AddBranchToCache(TBranch *b, bool subbranches); 1100{; 1101 if (!GetTree()) {; 1102 if (LoadTree(0)<0) {; 1103 Error(""AddBranchToCache"",""Could not load a tree"");; 1104 return -1;; 1105 }; 1106 }; 1107 if (GetTree()) {; 1108 if (GetTree() != this) {; 1109 Int_t res = GetTree()->AddBranchToCache(b, subbranches);; 1110 if (res<0) {; 1111 Error(""AddBranchToCache"", ""Error adding branch"");; 1112 }; 1113 return res;; 1114 }; 1115 } else {; 1116 Error(""AddBranchToCache"", ""No tree is available. Branch was not added to the cache"");; 1117 return -1;; 1118 }; 1119 ; 1120 TFile *f = GetCurrentFile();; 1121 if (!f) {; 1122 Error(""AddBranchToCache"", ""No file is available. Branch was not added to the cache"");; 1123 return -1;; 1124 }; 1125 TTreeCache *tc = GetReadCache(f,true);; 1126 if (!tc) {; 1127 Error(""AddBranchToCache"", ""No ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:39149,cache,cache,39149,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['cache'],['cache']
Performance," box.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!). private:. Double_tfDz; TGLVector3fHighPlaneNorm; TGLVector3fLowPlaneNorm; Double_tfPhi1; Double_tfPhi2; Double_tfR1; Double_tfR2; Double_tfR3; Double_tfR4; Bool_tfSegMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLCylinder(const TBuffer3DTube& buffer); Copy out relevant parts of buffer - we create and delete mesh; parts on demand in DirectDraw() and they are DL cached. ~TGLCylinder(); destructor. UInt_t DLOffset(Short_t lod) const; Return display-list offset for given LOD.; Calculation based on what is done in virtual QuantizeShapeLOD below. Short_t QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; Factor in scene/viewer LOD and quantize. void DirectDraw(TGLRnrCtx& rnrCtx) const; Debug tracing. ELODAxes SupportedLODAxes() const; Cylinders support LOD (tesselation quality) adjustment along; X/Y axes (round the cylinder radius), but not along length (Z). { return ELODAxes(kLODAxesX | kLODAxesY); }. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLCylinder.h 26250 2008-11-17 20:56:44Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCylinder.html:3758,cache,cached,3758,root/html528/TGLCylinder.html,https://root.cern,https://root.cern/root/html528/TGLCylinder.html,1,['cache'],['cached']
Performance," box.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!). private:. Double_tfDz; TGLVector3fHighPlaneNorm; TGLVector3fLowPlaneNorm; Double_tfPhi1; Double_tfPhi2; Double_tfR1; Double_tfR2; Double_tfR3; Double_tfR4; Bool_tfSegMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLCylinder(const TBuffer3DTube& buffer); Copy out relevant parts of buffer - we create and delete mesh; parts on demand in DirectDraw() and they are DL cached. ~TGLCylinder(); destructor. UInt_t DLOffset(Short_t lod) const; Return display-list offset for given LOD.; Calculation based on what is done in virtual QuantizeShapeLOD below. Short_t QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; Factor in scene/viewer LOD and quantize. void DirectDraw(TGLRnrCtx& rnrCtx) const; Debug tracing. ELODAxes SupportedLODAxes() const; Cylinders support LOD (tesselation quality) adjustment along; X/Y axes (round the cylinder radius), but not along length (Z). { return ELODAxes(kLODAxesX | kLODAxesY); }. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLCylinder.h 26250 2008-11-17 20:56:44Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLCylinder.html:3758,cache,cached,3758,root/html530/TGLCylinder.html,https://root.cern,https://root.cern/root/html530/TGLCylinder.html,1,['cache'],['cached']
Performance," box.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!). private:. Double_tfDz; TGLVector3fHighPlaneNorm; TGLVector3fLowPlaneNorm; Double_tfPhi1; Double_tfPhi2; Double_tfR1; Double_tfR2; Double_tfR3; Double_tfR4; Bool_tfSegMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLCylinder(const TBuffer3DTube& buffer); Copy out relevant parts of buffer - we create and delete mesh; parts on demand in DirectDraw() and they are DL cached. ~TGLCylinder(); destructor. UInt_t DLOffset(Short_t lod) const; Return display-list offset for given LOD.; Calculation based on what is done in virtual QuantizeShapeLOD below. Short_t QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; Factor in scene/viewer LOD and quantize. void DirectDraw(TGLRnrCtx& rnrCtx) const; Debug tracing. ELODAxes SupportedLODAxes() const; Cylinders support LOD (tesselation quality) adjustment along; X/Y axes (round the cylinder radius), but not along length (Z). { return ELODAxes(kLODAxesX | kLODAxesY); }. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLCylinder.h 26250 2008-11-17 20:56:44Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLCylinder.html:3758,cache,cached,3758,root/html532/TGLCylinder.html,https://root.cern,https://root.cern/root/html532/TGLCylinder.html,1,['cache'],['cached']
Performance," branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. Bool_t FillBuffer(). void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void StopLearningPhase(); It's the same as TTreeCache::StopLearningPhase but we guarantee that; we start the unzipping just after getting the buffers. void UpdateBranches(TTree* tree); update pointer to current Tree and recompute pointers to the branches in the cache. Bool_t IsParallelUnzip(); Static function that tells wether the multithreading unzipping; is activated. Bool_t IsActiveThread(); This indicates if the thread is active in this moment...; this variable is very important because if we change it from true to; false the thread will stop... ( see StopThreadTreeCacheUnzip() ). Bool_t IsQueueEmpty(); It says if the queue is empty... useful to see if we have to process; it. void WaitUnzipStartSignal(); Here the threads sleep waiting for some blocks to unzip. void SendUnzipStartSignal(Bool_t broadcast); This will send the signal corresponfing to the queue... normally used; when we want to start processing the list of buffers. Int_t SetParallelUnzip(TTreeCacheUnzip::EParUnzipMode option = TTreeCacheUnzip::kEnable); Static function that(de)activates multithreading unzipping; The possible options are:; kEnable _Enable_ it, which causes an automatic detection and launches the; additional thread if the number of cores in the machine is greater than one; kDisable _Disable_ will not activate the additional thread.; kForce _Force_ will start the additional thread even if there is only one core.; the default will be taken as kEnable.; returns 0 if there was an error, 1 otherwise. Int_t StartThreadUnzip(Int_t nthreads); The Thread is only a part of the TTreeCache but it is the part that; waits fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:17600,queue,queue,17600,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,2,['queue'],['queue']
Performance," branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdfProxy to p.d.f being cached. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); Constructor taking name, title and function to be cached. To control; granularity of the binning of the cache histogram set the desired properties; in the binning named ""cache"" in the observables of the function. The dimensions; of the cache are automatically matched to the number of observables used; in each use context. Multiple cache in different observable may exists; simultanously if the cached p.d.f is used with multiple observable; configurations simultaneously. RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); Constructor taking name, title and function to be cached and; fixed choice of variable to cache. To control granularity of the; binning of the cache histogram set the desired properties in the; binning named ""cache"" in the observables of the function.; If the fixed set of cache observables does not match the observables; defined in the use context of the p.d.f the cache is still filled; completely. Ee.g. when it is specified to cache x and p and only x; is a observable in the given use context the cache histogram will; store sampled values for all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedPdf(const RooCachedPdf& other, const char* name = 0); Copy constructor. ~RooCachedPdf(); Dest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedPdf.html:45295,cache,cache,45295,root/html534/RooCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooCachedPdf.html,2,['cache'],"['cache', 'cached']"
Performance," branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooSetProxy_compSetDSet proxy for denominator components ; RooSetProxy_compSetNSet proxy for numerator components ; RooArgSet*_compSetOwnedDOwner of denominator components; RooArgSet*_compSetOwnedNOwner of numerator components ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveDDo we have a denominator term?; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooListProxy_intListMaster integrals representing numerator and denominator; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenProdProj.html:34019,cache,cache,34019,root/html534/RooGenProdProj.html,https://root.cern,https://root.cern/root/html534/RooGenProdProj.html,3,"['Cache', 'cache']","['Cached', 'cache']"
Performance," branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. In the context of a tree (or a chain),; friendship means unrestricted access to the friends data. In this way; it is much like adding another branch to the tree without taking the risk; of damaging it. To add a friend to the list, you can use the TTree::AddFriend; method. The t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38721,cache,cache,38721,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," branches in cache; static Int_tfgLearnEntriesNumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor. void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. TTree * GetOwner() const; return the owner of this cache. TTree * GetTree() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:18045,cache,cache,18045,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,1,['cache'],['cache']
Performance," branches in cache; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor. void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. TTree * GetOwner() const; return the owner of this cache. TTree * GetTree() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:19911,cache,cache,19911,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['cache'],['cache']
Performance," branches to this tree. If the first character of title is a ""/"", the function assumes a folder name.; In this case, it creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. void AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache. void DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree kee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:36772,cache,cache,36772,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,2,['cache'],['cache']
Performance," branchname) const; -- See TTree::GetReadEntry(). TTree::TClusterIterator GetClusterIterator(Long64_t firstentry); Return an iterator over the cluster of baskets starting at firstentry. This iterator is not yet supported for TChain object. Long64_t GetChainEntryNumber(Long64_t entry) const; -- Return absolute entry number in the chain.; The input parameter entry is the entry number in; the current tree of this chain. Long64_t GetEntries() const; -- Return the total number of entries in the chain.; In case the number of entries in each tree is not yet known,; the offset table is computed. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); -- Get entry from the file to memory. getall = 0 : get only active branches; getall = 1 : get all branches. Return the total number of bytes read,; 0 bytes read indicates a failure. Long64_t GetEntryNumber(Long64_t entry) const; -- Return entry number corresponding to entry. if no TEntryList set returns entry; else returns entry #entry from this entry list and; also computes the global entry number (loads all tree headers). Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); -- Return entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TFile* GetFile() const; -- Return a pointer to the current file.; If no file is connected, the first file is automatically loaded. TLeaf* GetLeaf(const char* branchname, const char* leafname); -- Return a pointer to the leaf name in the current tree. TLeaf* GetLeaf(const char* name); -- Return a pointer to the leaf name in the current tree. TObjArray* GetListOfBranches(); -- Return a pointer to the list of branches of the current tree. Warning: If there is no current TTree yet, this routine will open the; first in the chain. Returns 0 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TChain.html:37823,load,loads,37823,root/html532/TChain.html,https://root.cern,https://root.cern/root/html532/TChain.html,4,['load'],['loads']
Performance," branchname) const; -- See TTree::GetReadEntry(). TTree::TClusterIterator GetClusterIterator(Long64_t firstentry); Return an iterator over the cluster of baskets starting at firstentry. This iterator is not yet supported for TChain object. Long64_t GetChainEntryNumber(Long64_t entry) const; -- Return absolute entry number in the chain.; The input parameter entry is the entry number in; the current tree of this chain. Long64_t GetEntries() const; -- Return the total number of entries in the chain.; In case the number of entries in each tree is not yet known,; the offset table is computed. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); -- Get entry from the file to memory. getall = 0 : get only active branches; getall = 1 : get all branches. Return the total number of bytes read,; 0 bytes read indicates a failure. Long64_t GetEntryNumber(Long64_t entry) const; -- Return entry number corresponding to entry. if no TEntryList set returns entry; else returns entry #entry from this entry list and; also computes the global entry number (loads all tree headers). Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); -- Return entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TFile* GetFile() const; -- Return a pointer to the current file.; If no file is connected, the first file is automatically loaded. TLeaf* GetLeaf(const char* name); -- Return a pointer to the leaf name in the current tree. TObjArray* GetListOfBranches(); -- Return a pointer to the list of branches of the current tree. Warning: If there is no current TTree yet, this routine will open the; first in the chain. Returns 0 on failure. TObjArray* GetListOfLeaves(); -- Return a pointer to the list of leaves of the current tree. Warning: May set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TChain.html:37040,load,loads,37040,root/html530/TChain.html,https://root.cern,https://root.cern/root/html530/TChain.html,1,['load'],['loads']
Performance," buffer object. ;  ;  TBuffer (EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  Create an I/O buffer object. ;  ; virtual ~TBuffer ();  Delete an I/O buffer object. ;  ; void AutoExpand (Int_t size_needed);  Automatically calculate a new size and expand the buffer to fit at least size_needed. ;  ; char * Buffer () const;  ; Int_t BufferSize () const;  ; Bool_t ByteSwapBuffer (Long64_t n, EDataType type);  Byte-swap N primitive-elements in the buffer. ;  ; void DetachBuffer ();  ; void Expand (Int_t newsize, Bool_t copy=kTRUE);  Expand (or shrink) the I/O buffer to newsize bytes. ;  ; Int_t GetBufferVersion () const;  ; char * GetCurrent () const;  ; TObject * GetParent () const;  Return pointer to parent of this buffer. ;  ; ReAllocCharFun_t GetReAllocFunc () const;  Return the reallocation method currently used. ;  ; Bool_t IsReading () const;  ; Bool_t IsWriting () const;  ; Int_t Length () const;  ; virtual TVirtualArray * PeekDataCache () const;  Return the 'current' data cache area from the list of area to be used for temporarily store 'missing' data members. ;  ; virtual TVirtualArray * PopDataCache ();  Pop and Return the 'current' data cache area from the list of area to be used for temporarily store 'missing' data members. ;  ; virtual void PushDataCache (TVirtualArray *);  Push a new data cache area onto the list of area to be used for temporarily store 'missing' data members. ;  ; void SetBuffer (void *buf, UInt_t bufsiz=0, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  Sets a new buffer in an existing TBuffer object. ;  ; void SetBufferOffset (Int_t offset=0);  ; void SetParent (TObject *parent);  Set parent owning this buffer. ;  ; void SetReadMode ();  Set buffer in read mode. ;  ; void SetReAllocFunc (ReAllocCharFun_t reallocfunc=nullptr);  Set which memory reallocation method to use. ;  ; void SetWriteMode ();  Set buffer in write mode. ;  ; void StreamerNVirtual (TBuffer &ClassDef_Streamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:24053,cache,cache,24053,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,6,['cache'],['cache']
Performance," buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:36993,load,load,36993,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,1,['load'],['load']
Performance," buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_spec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSystem.html:37062,load,load,37062,root/html530/TSystem.html,https://root.cern,https://root.cern/root/html530/TSystem.html,3,['load'],['load']
Performance," buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code; c : compile only, do not attempt to load the library.; s : silence all informational output; v : output all information output; d : debug ACLiC, keep all the output",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:38673,load,load,38673,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,2,['load'],['load']
Performance," buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). Int_t AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket; Returns 0 branch added or already included; -1 on error. Int_t AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch added or already included; -1 on error. Int_t DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranch(const char* branch, Bool_t subbranches = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:22201,cache,cache,22201,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['cache'],['cache']
Performance," but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().; ; frame2 = m0.frame(Range=(5.288, 5.293), Title=""-log(L) scan vs m0, regions masked""); nll.plotOn(frame2, ShiftToZero=True, PrintEvalErrors=-1, EvalErrorValue=(nll.getVal() + 10), LineColor=""r""); frame2.SetMaximum(15); frame2.SetMinimum(0); ; c = ROOT.TCanvas(""rf606_nllerrorhandling"", ""rf606_nllerrorhandling"", 1200, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.4); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); frame2.Draw(); ; c.SaveAs(""rf606_nllerrorhandling.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_argus_over_argus_Int[m]_argusData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-2417.08) to force MIGRAD to back out of this region. Error log follows.; Parameter values: k=-33.8075 m0=5.29014; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ]; getLogVal() top-level p.d.f not greater than zero @ numerator=argus=0.387202, denominator=argus_Int[m]=0.0305662; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-2417.08) to force MIGRAD to back out of this region. Error log follows.; Parameter values: k=-36.7074 m0=5.2901; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ]; getLogVal() top-level p.d.f not greater than zero @ numerator=argus=0.3706",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html:3782,optimiz,optimization,3782,doc/master/rf606__nllerrorhandling_8py.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html,1,['optimiz'],['optimization']
Performance," but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; Minuit2Minimizer : Invalid minimum - status = 3; FVAL = -2419.31; Edm = -nan; Nfcn = 34; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28374; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 44 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.27133; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 166 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) fixing normalization set for coefficient determination to observables in data; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf606_nllerrorhandling.py. tutorialsroofitrf606_nllerrorhandling.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html:10968,optimiz,optimization,10968,doc/master/rf606__nllerrorhandling_8py.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html,1,['optimiz'],['optimization']
Performance," but only bins inside the selected range will be filled.; 1806///; 1807/// NOTE that if a TH1D named ""name"" exists in the current directory or pad,; 1808/// the histogram is reset and filled again with the projected contents of the TH3.; 1809///; 1810/// implemented using Project3D; 1811 ; 1812TH1D *TH3::ProjectionZ(const char *name, Int_t ixmin, Int_t ixmax,; 1813 Int_t iymin, Int_t iymax, Option_t *option) const; 1814{; 1815 ; 1816 TString hname = name;; 1817 if (hname == ""_pz"") hname = TString::Format(""%s%s"", GetName(), name);; 1818 TString title = TString::Format(""%s ( Projection Z )"",GetTitle());; 1819 ; 1820 // when projecting in Z outer axis are X and Y (order is important. It is defined in the DoProject1D function); 1821 return DoProject1D(hname, title, ixmin, ixmax, iymin, iymax, &fZaxis, &fXaxis, &fYaxis, option);; 1822}; 1823 ; 1824 ; 1825////////////////////////////////////////////////////////////////////////////////; 1826/// internal method performing the projection to 1D histogram; 1827/// called from TH3::Project3D; 1828 ; 1829TH1D *TH3::DoProject1D(const char* name, const char * title, int imin1, int imax1, int imin2, int imax2,; 1830 const TAxis* projAxis, const TAxis * axis1, const TAxis * axis2, Option_t * option) const; 1831{; 1832 ; 1833 TString opt = option;; 1834 opt.ToLower();; 1835 ; 1836 // save previous axis range and bits; 1837 // Int_t iminOld1 = axis1->GetFirst();; 1838 // Int_t imaxOld1 = axis1->GetLast();; 1839 // Int_t iminOld2 = axis2->GetFirst();; 1840 // Int_t imaxOld2 = axis2->GetLast();; 1841 // Bool_t hadRange1 = axis1->TestBit(TAxis::kAxisRange);; 1842 // Bool_t hadRange2 = axis2->TestBit(TAxis::kAxisRange);; 1843 ; 1844 // need to cast-away constness to set range; 1845 TAxis out1(*axis1);; 1846 TAxis out2(*axis2);; 1847 // const_cast<TAxis *>(axis1)->SetRange(imin1, imax1);; 1848 // const_cast<TAxis*>(axis2)->SetRange(imin2,imax2);; 1849 out1.SetRange(imin1, imax1);; 1850 out2.SetRange(imin2, imax2);; 1851 ; 1852 Bool_t compu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:72923,perform,performing,72923,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['perform'],['performing']
Performance," by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXNetFile.html:29702,cache,cache,29702,root/html534/TXNetFile.html,https://root.cern,https://root.cern/root/html534/TXNetFile.html,2,['cache'],['cache']
Performance," by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DKeysPdf.html:43557,cache,cache,43557,root/html534/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html534/Roo2DKeysPdf.html,10,['cache'],['cache']
Performance," by all derived classes. ; Implements RooAbsReal.; Definition at line 99 of file RooJohnson.cxx. ◆ generateEvent(). void RooJohnson::generateEvent ; (; Int_t ; code). overridevirtual . Generate events based on code obtained by getGenerator(). ; So far, only generating mass values is supported. Others will have to be generated by the slower accept/reject method. ; Reimplemented from RooAbsPdf.; Definition at line 218 of file RooJohnson.cxx. ◆ getAnalyticalIntegral(). int RooJohnson::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 126 of file RooJohnson.cxx. ◆ getGenerator(). Int_t RooJohnson::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Advertise which kind of direct event generation is supported. ; So far, only generating mass values is supported. ; Reimplemented from RooAbsPdf.; Definition at line 204 of file RooJohnson.cxx. ◆ IsA(). TClass * RooJohnson::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 61 of file RooJohnson.h. ◆ Streamer(). void RooJohnson::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooJohnson::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file RooJohnson.h. Member Data Documentatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJohnson.html:78393,perform,performed,78393,doc/master/classRooJohnson.html,https://root.cern,https://root.cern/doc/master/classRooJohnson.html,1,['perform'],['performed']
Performance," by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:38934,cache,cache,38934,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['cache'],['cache']
Performance," by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:43649,cache,cached,43649,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['cache'],['cached']
Performance," by this TTree for reading/writing baskets. Int_t AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. In the context of a tree (or a chain),; friendship means unrestricted access to the friends data. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38584,cache,cache,38584,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," by using an `std::any` with a specific name.; root [6] TPython::Exec(""_anyresult = ROOT.std.make_any['Int_t'](1 + 1)"", &res1);; root [7] std::any_cast<int>(res1); (int) 2; TPython::Execstatic Bool_t Exec(const char *cmd, std::any *result=nullptr, std::string const &resultName=""_anyresult"")Executes a Python command within the current Python environment.Definition TPython.cxx:425; int; lTLine lDefinition textangle.C:4; And with a python file MyPyClass.py like this: print 'creating class MyPyClass ... '; ; class MyPyClass:; def __init__( self ):; print 'in MyPyClass.__init__'; ; def gime( self, what ):; return what; one can load a python module, and use the class. Casts are necessary as the type information can not be otherwise derived. root [6] TPython::LoadMacro( ""MyPyClass.py"" );; creating class MyPyClass ...; root [7] MyPyClass m;; in MyPyClass.__init__; root [8] std::string s = (char*)m.gime( ""aap"" );; root [9] s; (class TString)""aap""; TPython::LoadMacrostatic void LoadMacro(const char *name)Execute the give python script as if it were a macro (effectively an execfile in main),...Definition TPython.cxx:305; TStringBasic string class.Definition TString.h:139; mTMarker mDefinition textangle.C:8; It is possible to switch between interpreters by calling TPython::Prompt() on the Cling side, while returning with ^D (EOF). State is preserved between successive switches.; The API part provides (direct) C++ access to the bindings functionality of PyROOT. It allows verifying that you deal with a PyROOT python object in the first place (CPPInstance_Check for CPPInstance and any derived types, as well as CPPInstance_CheckExact for CPPInstance's only); and it allows conversions of void* to an CPPInstance and vice versa. ; Definition at line 44 of file TPython.h. Static Public Member Functions; static const TPyReturn Eval (const char *expr) R__DEPRECATED(6;  Evaluate a python expression (e.g. ;  ; static Bool_t Exec (const char *cmd, std::any *result=nullptr, std::string const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPython.html:2218,Load,LoadMacrostatic,2218,doc/master/classTPython.html,https://root.cern,https://root.cern/doc/master/classTPython.html,2,['Load'],"['LoadMacro', 'LoadMacrostatic']"
Performance," byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooArgSetRooAbsOptTestStatistic::_cachedNodes! List of nodes that are cached as constant expressions; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*RooAbsOptTestStatistic::_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_tRooAbsTestStatistic::_doOffsetApply interval value offset to control numeric precision?; static RooArgSet_emptySetSupports named argument constructor; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; RooAbsData::ErrorType_etypeError type store in associated RooDataHist; Double_tRooAbsTestStatistic::_evalCarry! carry of Kahan sum in evaluatePartition; Int_tRooAbsTestStatistic::_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooChi2Var::FuncMode_funcModeFunction, P.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:37909,cache,cache,37909,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,2,['cache'],['cache']
Performance," byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:42244,cache,cache,42244,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,2,['cache'],['cache']
Performance," byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; static RooCategory*RooAbsHiddenReal::_dummyBlindState; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooUnblindCPAsymVar.html:31174,cache,cache,31174,root/html526/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html526/RooUnblindCPAsymVar.html,8,['cache'],['cache']
Performance," byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; static RooCategory*RooAbsHiddenReal::_dummyBlindState; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooUnblindCPAsymVar.html:31841,cache,cache,31841,root/html530/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html530/RooUnblindCPAsymVar.html,4,['cache'],['cache']
Performance," byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; static RooCategory*RooAbsHiddenReal::_dummyBlindState; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooUnblindCPAsymVar.html:32216,cache,cache,32216,root/html532/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html532/RooUnblindCPAsymVar.html,4,['cache'],['cache']
Performance," bytes read; TList*TEventIter::fPacketslist of packets processed packets; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile, const char* objname = 0); Load a tree from s TDSetElement. Int_t GetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList** evl = 0); Get loop range. void PreProcessEvent(Long64_t ent); Actions to be done just before processing entry 'entry'.; Called by TProofPlayer. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-04 09:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEventIterTree.html:8381,cache,cache,8381,root/html604/TEventIterTree.html,https://root.cern,https://root.cern/root/html604/TEventIterTree.html,1,['cache'],['cache']
Performance," bytes read; TList*TEventIter::fPacketslist of packets processed packets; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile, const char* objname = 0); Load a tree from s TDSetElement. Int_t GetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList** evl = 0); Get loop range. void PreProcessEvent(Long64_t ent); Actions to be done just before processing entry 'entry'.; Called by TProofPlayer. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 14:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEventIterTree.html:8381,cache,cache,8381,root/html602/TEventIterTree.html,https://root.cern,https://root.cern/root/html602/TEventIterTree.html,1,['cache'],['cache']
Performance," bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tfHTTP11true if server support HTTP/1.1; Bool_tfHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsPcmFile!True if the file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringfMsgGetHeadcache GetHead() msg; TStringfMsgReadBuffercache ReadBuffer() msg; TStringfMsgReadBuffer10cache ReadBuffer10() msg; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TWebFile.html:21015,Cache,Cached,21015,root/html602/TWebFile.html,https://root.cern,https://root.cern/root/html602/TWebFile.html,2,['Cache'],['Cached']
Performance, bytes; UInt_tTTree::fFriendLockStatus! Record which method is locking the friend recursion; TList*TTree::fFriendspointer to list of friend elements; TArrayITTree::fIndexIndex of sorted values; TArrayDTTree::fIndexValuesSorted index values; TObjArrayTTree::fLeavesDirect pointers to individual branch leaves; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTTree::fMakeClass! not zero when processing code generated by MakeClass; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Long64_tTTree::fMaxEntriesMaximum number of entries in case of circular buffers; Long64_tTTree::fMaxEntryLoopMaximum number of entries to process; Long64_tTTree::fMaxVirtualSizeMaximum total size of buffers kept in memory; TStringTNamed::fNameobject identifier; Int_tTTree::fNfill! Local for EntryLoop; TObject*TTree::fNotify! Object to be notified when loading a Tree; Int_tfNvarNumber of columns; Int_tTTree::fPacketSize! Number of entries in one packet for parallel root; TVirtualTreePlayer*TTree::fPlayer! Pointer to current Tree player; Long64_tTTree::fReadEntry! Number of the entry being processed; Long64_tTTree::fSavedBytesNumber of autosaved bytes; Int_tTTree::fScanFieldNumber of runs before prompting in Scan; Int_tTTree::fTimerIntervalTimer interval in milliseconds; TStringTNamed::fTitleobject title; Long64_tTTree::fTotBytesTotal number of bytes in all branches before compression; Long64_tTTree::fTotalBuffers! Total number of bytes in branch buffers; TVirtualIndex*TTree::fTreeIndexPointer to the tree Index (if any); Int_tTTree::fUpdateUpdate frequency for EntryLoop; TList*TTree::fUserInfopointer to a list of user objects associated to this Tree; Double_tTTree::fWeightTree weight (see TTree::SetWeight); Long64_tTTree::fZipBytesTotal number of bytes in all branches after compression; static Int_tTTree::fgBranchStyleOld/New branch style,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNtuple.html:22917,load,loading,22917,root/html528/TNtuple.html,https://root.cern,https://root.cern/root/html528/TNtuple.html,2,['load'],['loading']
Performance," cache ;  ;  Public Member Functions inherited from TTreeCache;  TTreeCache ();  Default Constructor. ;  ;  TTreeCache (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCache () override;  Destructor. (in general called by the TFile destructor) ;  ; virtual void Disable ();  ; virtual Int_t DropBranch (const char *branch, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ;  ; virtual Int_t DropBranch (TBranch *b, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket. ;  ; virtual void Enable ();  ; const TObjArray * GetCachedBranches () const;  ; EPrefillType GetConfiguredPrefillType () const;  Return the desired prefill type from the environment or resource variable. ;  ; Double_t GetEfficiency () const;  Give the total efficiency of the primary cache... defined as the ratio of blocks found in the cache vs. ;  ; Double_t GetEfficiencyRel () const;  This will indicate a sort of relative efficiency... a ratio of the reads found in the cache to the number of reads so far. ;  ; virtual Int_t GetEntryMax () const;  ; virtual Int_t GetEntryMin () const;  ; virtual EPrefillType GetLearnPrefill () const;  ; Double_t GetMissEfficiency () const;  The total efficiency of the 'miss cache' - defined as the ratio of blocks found in the cache versus the number of blocks prefetched. ;  ; Double_t GetMissEfficiencyRel () const;  Relative efficiency of the 'miss cache' - ratio of the reads found in cache to the number of reads so far. ;  ; bool GetOptimizeMisses () const;  ; TTree * GetTree () const;  ; bool IsAutoCreated () const;  ; virtual bool IsEnabled () const;  ; bool IsLearning () const override;  ; Int_t LearnBranch (TBranch *b, bool subgbranches=false) override;  Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:5317,cache,cache,5317,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,2,['cache'],['cache']
Performance," cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene Brun 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id$ » Last generated: 2015-03-13 19:23; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFitter.html:16447,cache,cache,16447,root/html534/TFitter.html,https://root.cern,https://root.cern/root/html534/TFitter.html,1,['cache'],['cache']
Performance," cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene Brun 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id$ » Last generated: 2015-06-02 15:48; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFitter.html:17020,cache,cache,17020,root/html604/TFitter.html,https://root.cern,https://root.cern/root/html604/TFitter.html,1,['cache'],['cache']
Performance," cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene Brun 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id$ » Last generated: 2015-06-30 14:49; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:17020,cache,cache,17020,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,1,['cache'],['cache']
Performance," cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene Brun 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id: TFitter.h 20882 2007-11-19 11:31:26Z r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:16359,cache,cache,16359,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,3,['cache'],['cache']
Performance," cache element being inserted ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 175 of file RooObjCacheManager.cxx. ◆ IsA(). TClass * RooObjCacheManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 62 of file RooObjCacheManager.h. ◆ operModeHook(). void RooObjCacheManager::operModeHook ; (; ). overridevirtual . Intercept changes to cache operation mode and forward to cache elements. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 108 of file RooObjCacheManager.cxx. ◆ optimizeCacheMode(). void RooObjCacheManager::optimizeCacheMode ; (; const RooArgSet & ; obs, . RooArgSet & ; optNodes, . RooLinkedList & ; processedNodes . ). overridevirtual . Intercept calls to perform automatic optimization of cache mode operation. ; Forward calls to existing cache elements and save configuration of cache mode optimization so that it can be applied on new cache elements upon insertion ; Reimplemented from RooAbsCache.; Definition at line 129 of file RooObjCacheManager.cxx. ◆ printCompactTreeHook(). void RooObjCacheManager::printCompactTreeHook ; (; std::ostream & ; os, . const char * ; indent . ). overridevirtual . Add details on cache contents when printing in tree mode. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 194 of file RooObjCacheManager.cxx. ◆ redirectServersHook(). bool RooObjCacheManager::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overridevirtual . Intercept server redirect calls. ; If clearOnRedirect was set, sterilize the cache (i.e. keep the structure but delete all contents). If not forward serverRedirect to cache elements ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 84 of file RooObjCacheManager.cxx. ◆ setClearOnRedirect(). v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:10415,cache,cache,10415,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,4,"['cache', 'optimiz']","['cache', 'optimization']"
Performance," cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; RooRealProxy_realVarRealVar with the original error; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooErrorVar(const char* name, const char* title, const RooRealVar& input); Construct an lvalue variable representing the error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooErrorVar.html:37656,cache,cache,37656,root/html532/RooErrorVar.html,https://root.cern,https://root.cern/root/html532/RooErrorVar.html,2,['cache'],['cache']
Performance," cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0, TList* wrks = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool_t RegisterDataSet(const char* dsName, TFileCollection* ds, const char* opt = """"); Register the 'dataSet' on the cluster under the current; user, group and the given 'dataSetName'.; Fails if a dataset named 'dataSetName' already exists, unless 'optStr'; contains 'O', i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:32017,cache,cache,32017,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,2,['cache'],['cache']
Performance," cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_t_floatValue! Transient cache for floating point values from tree branches ; Bool_t_forceNumIntForce numerical integration if flag set; static Bool_t_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intValue! Transient cache for integer values from tree branches ; TString_labelPlot label for objects value; RooArgSet*_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_t_plotBinsNumber of plot bins; Double_t_plotMaxMaximum of plot range; Double_t_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_t_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_t_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_t_treeVar!do not persist; UInt_t_uintValue! Transient cache for unsigned integer values from tree branches ; TString_unitUnit for objects value; Double_t_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:30595,cache,cache,30595,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,4,['cache'],['cache']
Performance," cache. ;  ; RooArgSet selectFromSet1 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 1 with a given index and an input argSet. ;  ; RooArgSet selectFromSet2 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 2 with a given index and an input argSet. ;  ; Int_t setObj (const RooArgSet *nset, const RooArgSet *iset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. ;  ; Int_t setObj (const RooArgSet *nset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Setter function without integration set. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void wireCache () override;  ;  Public Member Functions inherited from RooAbsCache;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static bool clearObsList ();  ; static const char * DeclFileName ();  ; static void doClearObsList (bool flag);  ;  Static Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCache; static TClass * Class ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:4727,cache,cache,4727,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['cache'],['cache']
Performance," cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245. if option = ""a"" the list of blocks in the cache is printed see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being cached is printed. . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 1899 of file TTreeCache.cxx. ◆ ProcessMiss(). bool TTreeCache::ProcessMiss ; (; Long64_t ; pos, . int ; len . ). private . ! Given a file read not in the miss cache, handle (possibly) loading the data. ; Process a cache miss; (pos, len) isn't in the buffer.; The first time we have a miss, we buffer as many baskets we can (up to the maximum size of the TTreeCache) in memory from all branches that are not in the prefetch list.; Subsequent times, we fetch all the buffers corresponding to branches that had previously seen misses. If it turns out the (pos, len) isn't in the list of branches, we treat this as if it was the first miss.; Returns true if we were able to pull the data into the miss cache. ; Definition at line 863 of file TTreeCache.cxx. ◆ ReadBuffer(). Int_t TT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:45439,cache,cache,45439,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['cache'],['cache']
Performance," cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245. if option = ""a"" the list of blocks in the cache is printed see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being cached is printed. . Reimplemented from TTreeCache.; Definition at line 947 of file TTreeCacheUnzip.cxx. ◆ ReadBufferExt(). Int_t TTreeCacheUnzip::ReadBufferExt ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len, . Int_t & ; loc . ). overridevirtual . Reimplemented from TFileCacheRead.; Definition at line 961 of file TTreeCacheUnzip.cxx. ◆ ResetCache(). void TTreeCacheUnzip::ResetCache ; (; ). overridevirtual . This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ; This name is ambiguos because the method doesn't reset the whole cache, only the part related to the unzipping Note: This method is completely different from TTreeCache::ResetCache(), in that method we were cleaning the prefetching buffer while here we delete the information about the unzipped buffers ; Reimplemented from TTreeCache.; Definition at line 501",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:33655,cache,cache,33655,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['cache'],['cache']
Performance," cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245. if option = ""a"" the list of blocks in the cache is printed see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being cached is printed. . Reimplemented from TTreeCache.; Definition at line 948 of file TTreeCacheUnzip.cxx. ◆ ReadBufferExt(). Int_t TTreeCacheUnzip::ReadBufferExt ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len, . Int_t & ; loc . ). overridevirtual . Reimplemented from TFileCacheRead.; Definition at line 962 of file TTreeCacheUnzip.cxx. ◆ ResetCache(). void TTreeCacheUnzip::ResetCache ; (; ). overridevirtual . This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ; This name is ambiguos because the method doesn't reset the whole cache, only the part related to the unzipping Note: This method is completely different from TTreeCache::ResetCache(), in that method we were cleaning the prefetching buffer while here we delete the information about the unzipped buffers ; Reimplemented from TTreeCache.; Definition at line 502",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:33659,cache,cache,33659,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['cache'],['cache']
Performance," cache: 202, total size : 6001193; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245; if option = ""a"" the list of blocks in the cache is printed ; Definition at line 7370 of file TTree.cxx. ◆ Process() [1/2]. Long64_t TTree::Process ; (; const char * ; filename, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Process this tree executing the TSelector code in the specified filename. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success.; The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector, where TSelector has the following member functions:. Begin(): called every time a loop on the tree starts, a convenient place to create your histograms.; SlaveBegin(): called after Begin(), when on PROOF called only on the slave servers.; Process(): called for each event, in this function you decide what to read and fill your histograms.; SlaveTerminate: called at the end of the loop on the tree, when on PROOF called only on the slave servers.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:189147,cache,cache,189147,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['cache'],['cache']
Performance," cache; see SetLearnEntries. TTree * GetOwner() const; return the owner of this cache. TTree * GetTree() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:19718,cache,cache,19718,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,1,['cache'],['cache']
Performance," cacheSize);; 8819 ; 8820 pf->SetAutoCreated(autocache);; 8821 ; 8822 return 0;; 8823}; 8824 ; 8825////////////////////////////////////////////////////////////////////////////////; 8826///interface to TTreeCache to set the cache entry range; 8827///; 8828/// Returns:; 8829/// - 0 entry range set; 8830/// - -1 on error; 8831 ; 8832Int_t TTree::SetCacheEntryRange(Long64_t first, Long64_t last); 8833{; 8834 if (!GetTree()) {; 8835 if (LoadTree(0)<0) {; 8836 Error(""SetCacheEntryRange"",""Could not load a tree"");; 8837 return -1;; 8838 }; 8839 }; 8840 if (GetTree()) {; 8841 if (GetTree() != this) {; 8842 return GetTree()->SetCacheEntryRange(first, last);; 8843 }; 8844 } else {; 8845 Error(""SetCacheEntryRange"", ""No tree is available. Could not set cache entry range"");; 8846 return -1;; 8847 }; 8848 ; 8849 TFile *f = GetCurrentFile();; 8850 if (!f) {; 8851 Error(""SetCacheEntryRange"", ""No file is available. Could not set cache entry range"");; 8852 return -1;; 8853 }; 8854 TTreeCache *tc = GetReadCache(f,true);; 8855 if (!tc) {; 8856 Error(""SetCacheEntryRange"", ""No cache is available. Could not set entry range"");; 8857 return -1;; 8858 }; 8859 tc->SetEntryRange(first,last);; 8860 return 0;; 8861}; 8862 ; 8863////////////////////////////////////////////////////////////////////////////////; 8864/// Interface to TTreeCache to set the number of entries for the learning phase; 8865 ; 8866void TTree::SetCacheLearnEntries(Int_t n); 8867{; 8868 TTreeCache::SetLearnEntries(n);; 8869}; 8870 ; 8871////////////////////////////////////////////////////////////////////////////////; 8872/// Enable/Disable circularity for this tree.; 8873///; 8874/// if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; 8875/// per branch in memory.; 8876/// Note that when this function is called (maxEntries>0) the Tree; 8877/// must be empty or having only one basket per branch.; 8878/// if maxEntries <= 0 the tree circularity is disabled.; 8879///; 8880/// #### NOTE 1:; 8881/// Circular Tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:343458,cache,cache,343458,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['cache'],['cache']
Performance," cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8676 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an existing autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false: this is a user requested cache. cacheSize is used to size the cache. This cache should never be automatically adjusted.; Returns:; 0 size set, or existing autosized cache almost large enough. (cache was created if possible); -1 on error . Definition at line 8702 of file TTree.cxx. ◆ SetChainOffset(). virtual void TTree::SetChainOffset ; (; Long64_t ; offset = 0). inlinevirtual . Definition at line 609 of file TTree.h. ◆ SetCircular(). void TTree::SetCircular ; (; Long64_t ; maxEntries). virtual . Enable/Disable circularity for this tree. ; if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket per branch in memory. Note that when this function is called (maxEntries>0) the Tree must be empty or having only one basket per branch. if maxEntries <= 0 the tree circularity is disabled.; NOTE 1:; Circular Trees are interesting in online real time environments to store the results of the last maxEntries events. NOTE 2:; Calling SetCircular with maxEntries <= 0 is necessary before merging circular Trees that have been saved on files. NOTE 3:; SetCircular with maxEntries <= 0 is automatically called by TChain::Merge NOTE 4:; A circular Tree can still be saved in a file. When read back, it i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:208651,cache,cache,208651,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['cache'],['cache']
Performance," calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, the cached normalization integral (if any) is deleted; 475/// and a new integral is constructed for use with 'nset'.; 476/// Elements in 'nset' can be discrete and real, but must be lvalues.; 477///; 478/// For functions that declare to be self-normalized by overloading the; 479/// selfNormalized() function, a unit normalization is always constructed.; 480 ; 481bool RooAbsPdf::syncNormalization(const RooArgSet* nset, bool adjustProxies) const; 482{; 483 setActiveNormSet(nset);; 484 ; 485 // Check if data sets are identical; 486 CacheElem* cache = static_cast<CacheElem*>(_normMgr.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:17431,cache,cache,17431,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['cache'],['cache']
Performance," call (like writing to a ROOT file).; If TRint is used and the default ROOT interrupt handler is not desired, you should use GetSignalHandler() of TApplication to get the interrupt handler and to remove it by RemoveSignalHandler()of TSystem .; 23.5 Glossary; The following glossary is adapted from the description of the Rogue Wave Threads.h++ package.; A process is a program that is loaded into memory and prepared for execution. Each process has a private address space. Processes begin with a single thread.; A thread is a sequence of instructions being executed in a program. A thread has a program counter and a private stack to keep track of local variables and return addresses. A multithreaded process is associated with one or more threads. Threads execute independently. All threads in a given process share the private address space of that process.; Concurrency exists when at least two threads are in progress at the same time. A system with only a single processor can support concurrency by switching execution contexts among multiple threads.; Parallelism arises when at least two threads are executing simultaneously. This requires a system with multiple processors. Parallelism implies concurrency, but not vice-versa.; A function is reentrant if it will behave correctly even if a thread of execution enters the function while one or more threads are already executing within the function. These could be the same thread, in the case of recursion, or different threads, in the case of concurrency.; Thread-specific data (TSD) is also known as thread-local storage (TLS). Normally, any data that has lifetime beyond the local variables on the thread’s private stack are shared among all threads within the process. Thread-specific data is a form of static or global data that is maintained on a per-thread basis. That is, each thread gets its own private copy of the data.; Left to their own devices, threads execute independently. Synchronization is the work that must be done whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1120059,concurren,concurrency,1120059,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['concurren'],['concurrency']
Performance," camera destructor. ;  ; Bool_t AdjustAndClampVal (Double_t &val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const;  Adjust a passed REFERENCE value 'val', based on screenShift delta. ;  ; Double_t AdjustDelta (Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const;  Adjust a passed screen value and apply modifiers. ;  ; void DrawDebugAids () const;  Draw out some debugging aids for the camera: ;  ; TGLVector3 EyeDirection () const;  Extract the camera eye direction (vector), running from EyePoint() Camera must have valid frustum cache - call Apply() after last modification, before using. ;  ; TGLVertex3 EyePoint () const;  Return the camera eye point (vertex) in world space Camera must have valid frustum cache - call Apply() after last modification, before using. ;  ; TGLVertex3 FrustumCenter () const;  Find the center of the camera frustum from intersection of planes This method will work even with parallel left/right & top/bottom and infinite eye point of ortho cameras Camera must have valid frustum cache - call Apply() after last modification, before using. ;  ; Rgl::EOverlap FrustumOverlap (const TGLBoundingBox &box) const;  Calculate overlap (kInside, kOutside, kPartial) of box with camera frustum Camera must have valid frustum cache - call Apply() after last modification, before using. ;  ; const TGLPlane & FrustumPlane (EFrustumPlane plane) const;  ; const TGLMatrix & GetCamBase () const;  ; const TGLMatrix & GetCamTrans () const;  ; Double_t * GetCenterVec ();  ; Bool_t GetExternalCenter ();  ; Double_t GetFarClip () const;  ; Double_t * GetFixDefCenterVec ();  ; Double_t GetNearClip () const;  ; Double_t GetTheta () const;  Get angle between camera up axis. ;  ; Float_t GetVAxisMinAngle ();  ; void IncTimeStamp ();  ; Bool_t IsCacheDirty () const;  ; virtual Bool_t IsPerspective () const;  ; Bool_t OfInterest (const TGLBoundingBox &box, Bool_t ignoreSize) const;  Calculate if the an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:5388,cache,cache,5388,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,1,['cache'],['cache']
Performance," can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 1105 of file RooNDKeysPdf.cxx. ◆ getWeights(). TMatrixD RooNDKeysPdf::getWeights ; (; const int & ; k); const. Return evaluated weights. ; Definition at line 1291 of file RooNDKeysPdf.cxx. ◆ initialize(). void RooNDKeysPdf::initialize ; (; RooDataSet const & ; data). protected . initialization ; Definition at line 406 of file RooNDKeysPdf.cxx. ◆ IsA(). TClass * RooNDKeysPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 198 of file RooNDKeysPdf.h. ◆ loadDataSet(). void RooNDKeysPdf::loadDataSet ; (; bool ; firstCall, . RooDataSet const & ; data . ). protected . copy the dataset and calculate some useful variables ; Definition at line 476 of file RooNDKeysPdf.cxx. ◆ loadWeightSet(). void RooNDKeysPdf::loadWeightSet ; (; RooDataSet const & ; data). protected . Definition at line 696 of file RooNDKeysPdf.cxx. ◆ loopRange(). void RooNDKeysPdf::loopRange ; (; std::vector< double > & ; x, . std::vector< Int_t > & ; indices . ); const. protected . determine closest points to x, to loop over in evaluate() ; Definition at line 974 of file RooNDKeysPdf.cxx. ◆ mirrorDataSet(). void RooNDKeysPdf::mirrorDataSet ; (; ). protected . determine mirror dataset. ; mirror points are added around the physical boundaries of the dataset Two steps:; For each entry, determine if it should be mirrored (the mirror configuration).; For each mirror configuration, make the mirror points. . Definition at line 607 of file RooNDKeysPdf.cxx. ◆ setOptions(). void RooNDKeysPdf::setOptions ; (; ). protected . set the configuration ; Definition at line 369 of file RooNDKeysPdf.cxx. ◆ sortDataIndices(). void RooNDKeysPdf::sortDataIndices ; (; BoxInfo * ; bi = nullptr). protected . sort entri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:88222,load,loadWeightSet,88222,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['load'],['loadWeightSet']
Performance," can be accessed via normal web server. From the browser side, JSROOT could regularly read the specified objects and update their drawings. But such solution has three major caveats.; First of all, one need to store the data of all objects, which only potentially could be displayed in the browser. In case of 10 objects it does not matter, but for 1000 or 100000 objects this will be a major performance penalty. With such big amount of data one will never achieve higher update rate.; The second problem is I/O. To read the first object from the ROOT file, one need to perform several (about 5) file-reading operations via http protocol. There is no http file locking mechanism (at least not for standard web servers), therefore there is no guarantee that the file content is not changed/replaced between consequent read operations. Therefore, one should expect frequent I/O failures while trying to monitor data from ROOT binary files. There is a workaround for the problem - one could load the file completely and exclude many partial I/O operations by this. To achieve this with JSROOT, one should add “+” sign at the end of the file name. Of course, it only could work for small files.; If somebody still wants to use monitoring of data from ROOT files, could try link like:. https://root.cern/js/latest/?nobrowser&file=../files/hsimple.root+&item=hpx;1&monitoring=2000. In this particular case, the histogram is not changing.; 1.11 JSROOT API; JSROOT can be used in arbitrary HTML pages to display data, produced with or without ROOT-based applications.; Many different examples of JSROOT API usage can be found on JSROOT API examples page.; 1.11.1 Import JSROOT functionality; Major JSROOT functions are located in main.mjs module and can be imported like:; <script type='module'>; import { openFile, draw } from 'https://root.cern/js/latest/modules/main.mjs';; let filename = ""https://root.cern/js/files/hsimple.root"";; let file = await openFile(filename);; let obj = await file.readObject(""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:22106,load,load,22106,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['load'],['load']
Performance," can be overriden by supplying an optional set of dependents; to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface; to modify the default projection behavour. RooPlot* plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0) const; OBSOLETE -- RETAINED FOR BACKWARD COMPATIBILITY. Use the plotOn(frame,Slice(...)) instead. RooPlot* plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))). Plot asymmetry of ourselves, defined as. asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ). on frame. If frame contains a histogram, all dimensions of the plotted; asymmetry function that occur in the previously plotted dataset are projected via partial integration.; Otherwise no projections are performed,. The asymmetry function can be multiplied with an optional scale factor. The default projection; behaviour can be overriden by supplying an optional set of dependents to project. Double_t getPropagatedError(const RooFitResult& fr); Calculate error on self by propagated errors on parameters with correlations as given by fit result; The linearly propagated error is calculated as follows; T; error(x) = F_a(x) * Corr(a,a') F_a'(x). where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2, with f(x) this function and 'da' taken from the fit result; Corr(a,a') = the correlation matrix from the fit result. RooPlot* plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Plot function or p.d.f. on frame with support for visualization of the uncertainty encoded in the given fit result fr.; If params is non-zero, only the subset of the parameters in fr that occur in params is considered for the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:51833,perform,performed,51833,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,5,['perform'],['performed']
Performance," can be specified at a time, i.e. ""path1:path2"" is NOT supported. ; WarningOnly the path to the directory should be specified, without prepending the -I prefix, i.e. gCling->AddIncludePath(""/path/to/my/includes""). If the -I prefix is used it will be ignored. ; Implements TInterpreter.; Definition at line 2662 of file TCling.cxx. ◆ ApplyToInterpreterMutex(). void TCling::ApplyToInterpreterMutex ; (; void * ; delta). Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused. ; Definition at line 9634 of file TCling.cxx. ◆ AutoLoad() [1/2]. Int_t TCling::AutoLoad ; (; const char * ; cls, . Bool_t ; knowDictNotLoaded = kFALSE . ). finalvirtual . Load library containing the specified class. ; Returns 0 in case of error and 1 in case if success. ; Implements TInterpreter.; Definition at line 6265 of file TCling.cxx. ◆ AutoLoad() [2/2]. Int_t TCling::AutoLoad ; (; const std::type_info & ; typeinfo, . Bool_t ; knowDictNotLoaded = kFALSE . ). finalvirtual . Load library containing the specified class. ; Returns 0 in case of error and 1 in case if success. ; Implements TInterpreter.; Definition at line 6124 of file TCling.cxx. ◆ AutoParse(). Int_t TCling::AutoParse ; (; const char * ; cls). finalvirtual . Parse the headers relative to the class Returns 1 in case of success, 0 in case of failure. ; Implements TInterpreter.; Definition at line 6523 of file TCling.cxx. ◆ AutoParseImplRecurse(). UInt_t TCling::AutoParseImplRecurse ; (; const char * ; cls, . bool ; topLevel . ). private . Helper routine for TCling::AutoParse implementing the actual call to the parser and looping over template parameters (if any) and when they don't have a registered header to autoparse, recurse over their template parameters. ; Returns the number of header parsed. ; Definition at line 6381 of file TCling.cxx. ◆ BaseClassInfo_ClassInfo(). ClassInfo_t * TCling::BaseClassInfo_ClassInfo ; (; BaseClassInfo_t * ; bcinfo); const. finalvirtual . Implements TInterpreter.; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:55286,Load,Load,55286,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Load'],['Load']
Performance," can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if successful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t SetClassSharedLibs(const char* cls, const char* libs); Register the autoloading information for a class.; libs is a space separated list of libraries. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:30442,Load,Load,30442,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Load'],['Load']
Performance," can utilize extra functionality; defined in such a derived cache class. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const. RooArgSet* actualObservables(const RooArgSet& nset) const; If this pdf is operated with a fixed set of observables, return; the subset of the fixed observables that are actual dependents; of the external input p.d.f. If this p.d.f is operated without; a fixed set of cache observables, return the actual observables; of the external input p.d.f given the choice of observables defined; in nset. RooArgSet* actualParameters(const RooArgSet& nset) const; If this p.d.f is operated with a fixed set of observables, return; all variables of the external input p.d.f that are not one of; the cache observables. If this p.d.f is operated in automatic mode,; return the parameters of the external input p.d.f. void operModeHook(). RooCachedReal(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooCachedReal(*this,newname); }. void setCdfBoundaries(Bool_t flag); If flag is true the RooHistFunc that represent the cache histogram; will use special boundary conditions for use with cumulative distribution; functions: at the lower bound the function is forced to converge at zero and the upper; bound is the function is forced to converge at 1.0. Bool_t getCdfBoundaries() const; If true the c.d.f boundary mode is active. Bool_t cacheSource() const; { return _cacheSource ; }. void setCacheSource(Bool_t flag); { _cacheSource = flag ; }. const char* inputBaseName() const; Return base name for caches, i.e. the name of the cached function. Double_t evaluate() const; Dummy evaluate, it is never called. const char* payloadUniqueSuffix() const; { return func.arg().aggregateCacheUniqueSuffix() ; }. » Last changed: Sat Sep 5 17:29:27 2015 » Last generated: 2015-09-05 17:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCachedReal.html:41329,cache,cache,41329,root/html604/RooCachedReal.html,https://root.cern,https://root.cern/root/html604/RooCachedReal.html,4,['cache'],"['cache', 'cacheSource', 'cached', 'caches']"
Performance," canonicalName . ). Definition at line 6974 of file TCling.cxx. ◆ LibraryLoadingFailed(). bool TCling::LibraryLoadingFailed ; (; const std::string & ; errmessage, . const std::string & ; libStem, . bool ; permanent, . bool ; resolved . ). Definition at line 6568 of file TCling.cxx. ◆ LibraryUnloaded(). void TCling::LibraryUnloaded ; (; const void * ; dyLibHandle, . const char * ; canonicalName . ). Definition at line 6981 of file TCling.cxx. ◆ Load(). Int_t TCling::Load ; (; const char * ; filename, . Bool_t ; system = kFALSE . ). finalvirtual . Load a library file in cling's memory. ; if 'system' is true, the library is never unloaded. Return 0 on success, -1 on failure. ; Implements TInterpreter.; Definition at line 3515 of file TCling.cxx. ◆ LoadEnums(). void TCling::LoadEnums ; (; TListOfEnums & ; cl); const. finalvirtual . Create list of pointers to enums for TClass cl. ; Implements TInterpreter.; Definition at line 4395 of file TCling.cxx. ◆ LoadFile(). int TCling::LoadFile ; (; const char * ; path); const. finalvirtual . Load a source file or library called path into the interpreter. ; Reimplemented from TInterpreter.; Definition at line 7500 of file TCling.cxx. ◆ LoadFunctionTemplates(). void TCling::LoadFunctionTemplates ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to function templates for TClass cl. ; Implements TInterpreter.; Definition at line 4442 of file TCling.cxx. ◆ LoadLibraryMap(). Int_t TCling::LoadLibraryMap ; (; const char * ; rootmapfile = nullptr). finalvirtual . Load map between class and library. ; If rootmapfile is specified a specific rootmap file can be added (typically used by ACLiC). In case of error -1 is returned, 0 otherwise. The interpreter uses this information to automatically load the shared library for a class (autoload mechanism), see the AutoLoad() methods below. ; Implements TInterpreter.; Definition at line 5741 of file TCling.cxx. ◆ LoadMacro(). void TCling::LoadMacro ; (; const char * ; filename, . EE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:113139,Load,LoadFile,113139,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Load'],['LoadFile']
Performance," canvas color.; 1222///; 1223/// Pads are automatically named `canvasname_n` where `n` is the division number; 1224/// starting from top left pad.; 1225///; 1226/// Example if canvasname=c1 , nx=2, ny=3:; 1227///; 1228/// \image html gpad_pad3.png; 1229///; 1230/// Once a pad is divided into sub-pads, one can set the current pad; 1231/// to a subpad with a given division number as illustrated above; 1232/// with TPad::cd(subpad_number).; 1233///; 1234/// For example, to set the current pad to c1_4, one can do:; 1235/// ~~~ {.cpp}; 1236/// c1->cd(4); 1237/// ~~~; 1238/// __Note1:__ c1.cd() is equivalent to c1.cd(0) and sets the current pad; 1239/// to c1 itself.; 1240///; 1241/// __Note2:__ after a statement like c1.cd(6), the global variable gPad; 1242/// points to the current pad. One can use gPad to set attributes; 1243/// of the current pad.; 1244///; 1245/// __Note3:__ in case xmargin <=0 and ymargin <= 0, there is no space; 1246/// between pads. The current pad margins are recomputed to; 1247/// optimize the layout.; 1248 ; 1249void TPad::Divide(Int_t nx, Int_t ny, Float_t xmargin, Float_t ymargin, Int_t color); 1250{; 1251 if (!IsEditable()) return;; 1252 ; 1253 if (gThreadXAR) {; 1254 void *arr[7];; 1255 arr[1] = this; arr[2] = (void*)&nx;arr[3] = (void*)& ny;; 1256 arr[4] = (void*)&xmargin; arr[5] = (void *)& ymargin; arr[6] = (void *)&color;; 1257 if ((*gThreadXAR)(""PDCD"", 7, arr, nullptr)) return;; 1258 }; 1259 ; 1260 TContext ctxt(kTRUE);; 1261 ; 1262 cd();; 1263 if (nx <= 0) nx = 1;; 1264 if (ny <= 0) ny = 1;; 1265 Int_t ix, iy;; 1266 Double_t x1, y1, x2, y2, dx, dy;; 1267 TPad *pad;; 1268 TString name, title;; 1269 Int_t n = 0;; 1270 if (color == 0) color = GetFillColor();; 1271 if (xmargin > 0 && ymargin > 0) {; 1272 //general case; 1273 dy = 1/Double_t(ny);; 1274 dx = 1/Double_t(nx);; 1275 for (iy=0;iy<ny;iy++) {; 1276 y2 = 1 - iy*dy - ymargin;; 1277 y1 = y2 - dy + 2*ymargin;; 1278 if (y1 < 0) y1 = 0;; 1279 if (y1 > y2) continue;; 1280 for (ix=0;ix<nx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:39208,optimiz,optimize,39208,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['optimiz'],['optimize']
Performance," capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); longer to calculate. RooPlot* plotOn(RooPlot* frame, RooLinkedList& argList); Internal back-end function of plotOn() with named arguments. RooPlot* plotOn(RooPlot *frame, PlotOpt o); Plotting engine function for internal use. Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; function that occur in the previously plotted dataset are projected via partial integration,; otherwise no projections are performed. Optionally, certain projections can be performed; by summing over the values present in a provided dataset ('projData'), to correctly; project out data dependents that are not properly described by the PDF (e.g. per-event errors). The functions value can be multiplied with an optional scale factor. The interpretation; of the scale factor is unique for generic real functions, for PDFs there are various interpretations; possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details). The default projection behaviour can be overriden by supplying an optional set of dependents; to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface; to modify the default projection behavour. RooPlot* plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0) const; OBSOLETE -- RETAINED FOR BACKWARD COMPATIBILITY. Use the plotOn(frame,Slice(...)) instead. RooPlot* plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:50323,perform,performed,50323,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['perform'],['performed']
Performance," case file name contains information about a special backend (e.g.); 4289 if (strcmp(name, urlname.GetFileAndOptions()) != 0); 4290 f = TFile::Open(urlname.GetFileAndOptions(), option, ftitle, compress);; 4291 }; 4292 }; 4293 }; 4294 ; 4295 if (f && f->IsZombie()) {; 4296 TString newUrl = f->GetNewUrl();; 4297 delete f;; 4298 if( newUrl.Length() && (newUrl != name) && gEnv->GetValue(""TFile.CrossProtocolRedirects"", 1) ); 4299 f = TFile::Open( newUrl, option, ftitle, compress );; 4300 else; 4301 f = nullptr;; 4302 }; 4303 }; 4304 ; 4305 if (rediroutput) {; 4306 // Restore output to stdout; 4307 gSystem->RedirectOutput(0, """", &rh);; 4308 // If we failed print error messages; 4309 if (!f); 4310 gSystem->ShowOutput(&rh);; 4311 // Remove the file; 4312 gSystem->Unlink(rh.fFile);; 4313 }; 4314 ; 4315 // if the file is writable, non local, and not opened in raw mode; 4316 // we create a default write cache of 512 KBytes; 4317 if (type != kLocal && type != kFile &&; 4318 f && f->IsWritable() && !f->IsRaw()) {; 4319 new TFileCacheWrite(f, 1);; 4320 }; 4321 ; 4322 return f;; 4323}; 4324 ; 4325////////////////////////////////////////////////////////////////////////////////; 4326/// Submit an asynchronous open request.; 4327 ; 4328/// See TFile::Open(const char *, ...) for an; 4329/// explanation of the arguments. A handler is returned which is to be passed; 4330/// to TFile::Open(TFileOpenHandle *) to get the real TFile instance once; 4331/// the file is open.; 4332/// This call never blocks and it is provided to allow parallel submission; 4333/// of file opening operations expected to take a long time.; 4334/// TFile::Open(TFileOpenHandle *) may block if the file is not yet ready.; 4335/// The sequence; 4336///; 4337/// TFile::Open(TFile::AsyncOpen(const char *, ...)); 4338///; 4339/// is equivalent to; 4340///; 4341/// TFile::Open(const char *, ...); 4342///; 4343/// To be effective, the underlying TFile implementation must be able to; 4344/// support asynchronous open functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:157805,cache,cache,157805,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cache']
Performance," case of success. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Resets the state of this chain. void ResetAfterMerge(TFileMergeInfo* ); Resets the state of this chain after a merge (keep the customization but; forget the data). Long64_t Scan(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); -- Loop on tree and print entries passing selection.; If varexp is 0 (or """") then print only first 8 columns.; If varexp = ""*"" print all columns.; Otherwise a columns selection can be made using ""var1:var2:var3"".; See TTreePlayer::Scan for more information. void SetAutoDelete(Bool_t autodel = kTRUE); -- Set the global branch kAutoDelete bit. When LoadTree loads a new Tree, the branches for which; the address is set will have the option AutoDelete set; For more details on AutoDelete, see TBranch::SetAutoDelete. Int_t SetCacheSize(Long64_t cacheSize = -1); Set the cache size of the underlying TTree,; See TTree::SetCacheSize.; Returns 0 cache state ok (exists or not, as appropriate); -1 on error. void ResetBranchAddress(TBranch* ); -- Reset the addresses of the branch. void ResetBranchAddresses(); Reset the addresses of the branches. Int_t SetBranchAddress(const char* bname, void* add, TBranch** ptr = 0); Set branch address. bname is the name of a branch.; add is the address of the branch. Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the add parameter. IMPORTANT REMARK:; In case TChain::SetBranchStatus is called, it must be called; BEFORE calling this function. See TTree::CheckBranchAddressType for the semantic of the return value. Int_t SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); Check if bnam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TChain.html:52353,Load,LoadTree,52353,root/html604/TChain.html,https://root.cern,https://root.cern/root/html604/TChain.html,2,"['Load', 'load']","['LoadTree', 'loads']"
Performance," case of success. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Resets the state of this chain. void ResetAfterMerge(TFileMergeInfo* ); Resets the state of this chain after a merge (keep the customization but; forget the data). Long64_t Scan(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); -- Loop on tree and print entries passing selection.; If varexp is 0 (or """") then print only first 8 columns.; If varexp = ""*"" print all columns.; Otherwise a columns selection can be made using ""var1:var2:var3"".; See TTreePlayer::Scan for more information. void SetAutoDelete(Bool_t autodel = kTRUE); -- Set the global branch kAutoDelete bit. When LoadTree loads a new Tree, the branches for which; the address is set will have the option AutoDelete set; For more details on AutoDelete, see TBranch::SetAutoDelete. void SetCacheSize(Long64_t cacheSize = -1); Set the cache size of the underlying TTree,; See TTree::SetCacheSize. void ResetBranchAddress(TBranch* ); -- Reset the addresses of the branch. void ResetBranchAddresses(); Reset the addresses of the branches. Int_t SetBranchAddress(const char* bname, void* add, TBranch** ptr = 0); Set branch address. bname is the name of a branch.; add is the address of the branch. Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the add parameter. IMPORTANT REMARK:; In case TChain::SetBranchStatus is called, it must be called; BEFORE calling this function. See TTree::CheckBranchAddressType for the semantic of the return value. Int_t SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); Check if bname is already in the status list, and if not, create a TChainElement objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TChain.html:52258,Load,LoadTree,52258,root/html602/TChain.html,https://root.cern,https://root.cern/root/html602/TChain.html,2,"['Load', 'load']","['LoadTree', 'loads']"
Performance," case of success. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Resets the state of this chain. void ResetAfterMerge(TFileMergeInfo* ); Resets the state of this chain after a merge (keep the customization but; forget the data). Long64_t Scan(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); -- Loop on tree and print entries passing selection.; If varexp is 0 (or """") then print only first 8 columns.; If varexp = ""*"" print all columns.; Otherwise a columns selection can be made using ""var1:var2:var3"".; See TTreePlayer::Scan for more information. void SetAutoDelete(Bool_t autodel = kTRUE); -- Set the global branch kAutoDelete bit. When LoadTree loads a new Tree, the branches for which; the address is set will have the option AutoDelete set; For more details on AutoDelete, see TBranch::SetAutoDelete. void SetCacheSize(Long64_t cacheSize); Set the cache size of the underlying TTree,; See TTree::SetCacheSize. void ResetBranchAddress(TBranch* ); -- Reset the addresses of the branch. void ResetBranchAddresses(); Reset the addresses of the branches. Int_t SetBranchAddress(const char *bname, void* add, TBranch** ptr); Set branch address. bname is the name of a branch.; add is the address of the branch. Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the add parameter. IMPORTANT REMARK:; In case TChain::SetBranchStatus is called, it must be called; BEFORE calling this function. See TTree::CheckBranchAddressType for the semantic of the return value. Int_t SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); Check if bname is already in the status list, and if not, create a TChainElement object and set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChain.html:50562,Load,LoadTree,50562,root/html534/TChain.html,https://root.cern,https://root.cern/root/html534/TChain.html,2,"['Load', 'load']","['LoadTree', 'loads']"
Performance," case the aspect; ratio is not preserved. if both xsize = 0 and ysize = 0, then the scaling is automatic.; the largest dimension will be allocated a size of 20 centimeters. void Streamer(TBuffer& b); Stream a class object. void ToggleAutoExec(); Toggle pad auto execution of list of TExecs. void ToggleEventStatus(); Toggle event statusbar. void ToggleToolBar(); Toggle toolbar. void ToggleEditor(); Toggle editor. void ToggleToolTips(); Toggle tooltip display. void Update(); Update canvas pad buffers. void DisconnectWidget(); Used by friend class TCanvasImp. Bool_t IsGrayscale(); Check whether this canvas is to be drawn in grayscale mode. void SetGrayscale(Bool_t set = kTRUE); Set whether this canvas should be painted in grayscale, and re-paint; it if necessary. void CreatePainter(); Probably, TPadPainter must be placed in a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. TCanvas(const TCanvas &canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCanvas.html:44505,load,loaded,44505,root/html526/TCanvas.html,https://root.cern,https://root.cern/root/html526/TCanvas.html,1,['load'],['loaded']
Performance," case the aspect; ratio is not preserved. if both xsize = 0 and ysize = 0, then the scaling is automatic.; the largest dimension will be allocated a size of 20 centimeters. void Streamer(TBuffer& b); Stream a class object. void ToggleAutoExec(); Toggle pad auto execution of list of TExecs. void ToggleEventStatus(); Toggle event statusbar. void ToggleToolBar(); Toggle toolbar. void ToggleEditor(); Toggle editor. void ToggleToolTips(); Toggle tooltip display. void Update(); Update canvas pad buffers. void DisconnectWidget(); Used by friend class TCanvasImp. Bool_t IsGrayscale(); Check whether this canvas is to be drawn in grayscale mode. void SetGrayscale(Bool_t set = kTRUE); Set whether this canvas should be painted in grayscale, and re-paint; it if necessary. void CreatePainter(); Probably, TPadPainter must be placed in a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. TCanvas(const TCanvas& canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCanvas.html:44499,load,loaded,44499,root/html528/TCanvas.html,https://root.cern,https://root.cern/root/html528/TCanvas.html,3,['load'],['loaded']
Performance," char * RooMomentMorphFuncND::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 162 of file RooMomentMorphFuncND.h. ◆ evaluate(). double RooMomentMorphFuncND::evaluate ; (; ); const. overridevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 533 of file RooMomentMorphFuncND.cxx. ◆ findShape(). void RooMomentMorphFuncND::findShape ; (; const std::vector< double > & ; x); const. protected . Definition at line 712 of file RooMomentMorphFuncND.cxx. ◆ getCache(). RooMomentMorphFuncND::CacheElem * RooMomentMorphFuncND::getCache ; (; const RooArgSet * ; nset); const. protected . Definition at line 351 of file RooMomentMorphFuncND.cxx. ◆ getValV(). double RooMomentMorphFuncND::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented from RooAbsReal.; Definition at line 514 of file RooMomentMorphFuncND.cxx. ◆ initialize(). void RooMomentMorphFuncND::initialize ; (; ). protected . Definition at line 200 of file RooMomentMorphFuncND.cxx. ◆ IsA(). TClass * RooMomentMorphFuncND::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 162 of file RooMomentMorphFuncND.h. ◆ setBinIntegrator(). bool RooMomentMorphFuncND::setBinIntegrator ; (; RooArgSet & ; allVars). Definition at line 795 of file RooMomentMorphFuncND.cxx. ◆ setMode(). void RooMomentMorphFuncND::setMode ; (; const Setting & ; setting). inline . Definition at line 110 of file RooMomentMorphFuncND.h. ◆ setPdfMode(). void RooMomentMorphFuncND::setPdfMode ; (; bool ; flag = true). inline . Setting flag makes this RooMomentMorphFuncND instance behave like the former RooMomentMorphND class, with the the only difference being the base",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFuncND.html:65058,cache,cache,65058,doc/master/classRooMomentMorphFuncND.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFuncND.html,3,['cache'],"['cache', 'cached']"
Performance," char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TClass; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQClass.html:33464,load,load,33464,doc/master/classTQClass.html,https://root.cern,https://root.cern/doc/master/classTQClass.html,2,['load'],['load']
Performance," char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy _asym;  ; RooBlindTools _blindEngine;  ;  Protected Attributes inherited from RooAbsHiddenReal; RooCategoryProxy _state;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:57722,Cache,Cache,57722,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,1,['Cache'],['Cache']
Performance," char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ;  ;  TGraph2D (const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with name, title and three vectors of doubles as input. ;  ;  TGraph2D (const TGraph2D &);  Graph2D copy constructor. ;  ;  TGraph2D (Int_t n);  Graph2D constructor. ;  ;  TGraph2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2 (h2) as input. ;  ;  ~TGraph2D () override;  TGraph2D destructor. ;  ; virtual void Add (TF2 *f, Double_t c1=1);  Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated. ;  ; virtual void AddPoint (Double_t x, Double_t y, Double_t z);  Append a new point to the graph. ;  ; virtual void Apply (TF2 *f);  Apply function f to all the data points f may be a 2-D function TF2 or 3-d function TF3 The Z values of the 2D graph are replaced by the new values computed using the function. ;  ; void Browse (TBrowser *) override;  Browse. ;  ; void Clear (Option_t *option="""") override;  Free all memory allocated by this object. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the graph to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point px,py to a graph. ;  ; void Draw (Option_t *option=""P0"") override;  Specific drawing options can be used to paint a TGraph2D: ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Executes action corresponding to one event. ;  ; TObject * FindObject (const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D.html:12202,Perform,Performs,12202,doc/master/classTGraph2D.html,https://root.cern,https://root.cern/doc/master/classTGraph2D.html,3,['Perform'],['Performs']
Performance," char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; int; When using the TEntryList interface directly, you can get the 'tree number' and entry in the current tree (i.e. value similar to the return value of LoadTree) from calling TEntryList::GetEntryAndTree: Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);; TEntryList::GetEntryAndTreevirtual Long64_t GetEntryAndTree(Long64_t index, Int_t &treenum)Return the index of ""index""-th non-zero entry in the TTree or TChain and the # of the corresponding t...Definition TEntryList.cxx:835; to obtain the entry number within the chain you need to add to it the value of treeEntry+ch->GetTreeOffset()[treenum] such that the loop in the previous example can also be written as: for (Long64_t el = 0; el < listEntries; el++) {; Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);; Long64_t chainEntry = treeEntry+ch->GetTreeOffset()[treenum];; printf(""el=%lld, treeEntry=%lld, chainEntry=%lld, treenum=%d\n"", el, treeEntry, chainEntry, treenum);; ; ch->LoadTree(chainEntry); // this also returns treeEntry; needed_branch->GetEntry(treeEntry);; }; ; TSelectors; To fill an TEntryList from a TSelector correctly, one must add the TEntryList object to the output list of the selector (TSelector::fOutput). This is the only way to make the sub-lists of the TEntryList switch when the current tree of the TChain is changed. Using a TEntryList as input (TTree::SetEntryList() and TChain::SetEntryList()); while the TTree::SetEntryList() function is only setting the TTree::fEntryList data member, the same function in TChain also finds correspondence between the TTrees of this TChain and the sub-lists of this TEntryList. TEntryList and the current directory; TEntryList objects are automatically added to the current directory (like TTrees). However, in case of a TEntryList for a chain, only the top-level entry list is added, not the sub-list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryList.html:5031,Load,LoadTree,5031,doc/master/classTEntryList.html,https://root.cern,https://root.cern/doc/master/classTEntryList.html,1,['Load'],['LoadTree']
Performance," char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _high;  ; std::vector< double > _low;  ; double _nominal = 0;  ; RooListProxy _paramList;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html:55617,Cache,Cache,55617,doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,1,['Cache'],['Cache']
Performance," char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDraw.html:10513,load,loaded,10513,doc/master/classTProofDraw.html,https://root.cern,https://root.cern/doc/master/classTProofDraw.html,11,['load'],['loaded']
Performance," char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TEveScalableStraightLineSet.h>. Inheritance diagram for TEveScalableStraightLineSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveScalableStraightLineSet() [1/2]. TEveScalableStraightLineSet::TEveScalableStraightLineSet ; (; const TEveScalableStraightLineSet & ; ). private . ◆ TEveScalableStraightLineSet() [2/2]. TEveScalableStraightLineSet::TEveScalableStraightLineSet ; (; const char * ; n = ""ScalableStraightLineSet"", . const char * ; t = """" . ). Constructor. ; Definition at line 26 of file TEveScalableStraightLineSet.cxx. ◆ ~TEveScalableStraightLineSet(). TEveScalableStraightLineSet::~TEveScalableStraightLineSet ; (; ). inlineoverride . Definition at line 29 of file TEveScalableStraightLineSet.h. Member Function Documentation. ◆ Class(). static TClass * TEveScalableStraightLineSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveScalableStraightLineSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveScalableStraightLineSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 36 of file TEveScalableStraightLineSet.h. ◆ DeclFileName(). static const char * TEveScalableStraightLineSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:45270,Scalab,ScalableStraightLineSet,45270,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,1,['Scalab'],['ScalableStraightLineSet']
Performance," char * ; name = ""REveVSD"", . const char * ; title = """" . ). Constructor. ; Definition at line 27 of file REveVSD.cxx. ◆ ~REveVSD(). REveVSD::~REveVSD ; (; ). override . Destructor. ; Definition at line 58 of file REveVSD.cxx. Member Function Documentation. ◆ ClassDefOverride(). ROOT::Experimental::REveVSD::ClassDefOverride ; (; REveVSD ; , . 1 ;  . ). ◆ CreateBranches(). void REveVSD::CreateBranches ; (; ). virtual . Create internal VSD branches. ; Definition at line 103 of file REveVSD.cxx. ◆ CreateTrees(). void REveVSD::CreateTrees ; (; ). virtual . Create internal trees. ; Definition at line 73 of file REveVSD.cxx. ◆ DeleteTrees(). void REveVSD::DeleteTrees ; (; ). virtual . Delete internal trees. ; Definition at line 89 of file REveVSD.cxx. ◆ DisableTObjectStreamersForVSDStruct(). void REveVSD::DisableTObjectStreamersForVSDStruct ; (; ). static . Disable TObject streamers for those VSD structs that inherit from TObject directly. ; Definition at line 190 of file REveVSD.cxx. ◆ LoadTrees(). void REveVSD::LoadTrees ; (; ). virtual . Load internal trees from directory. ; Definition at line 150 of file REveVSD.cxx. ◆ operator=(). REveVSD & ROOT::Experimental::REveVSD::operator= ; (; const REveVSD & ; ). privatedelete . ◆ SetBranchAddresses(). void REveVSD::SetBranchAddresses ; (; ). virtual . Set branche addresses of internal trees. ; Definition at line 123 of file REveVSD.cxx. ◆ SetDirectory(). void REveVSD::SetDirectory ; (; TDirectory * ; dir). virtual . Set directory in which the trees are (or will be) created. ; Definition at line 65 of file REveVSD.cxx. ◆ WriteTrees(). void REveVSD::WriteTrees ; (; ). virtual . Does nothing here ... reimplemented in sub-classes. ; Definition at line 143 of file REveVSD.cxx. Member Data Documentation. ◆ fBuffSize. Int_t ROOT::Experimental::REveVSD::fBuffSize {0}. protected . Definition at line 33 of file REveVSD.hxx. ◆ fC. REveCluster ROOT::Experimental::REveVSD::fC. Definition at line 48 of file REveVSD.hxx. ◆ fCC. REveRecCasca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:12846,Load,LoadTrees,12846,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html,1,['Load'],['LoadTrees']
Performance," char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TLeaf::GetLenvirtual Int_t GetLen() constReturn the number of effective elements of this leaf, for the current entry.Definition TLeaf.cxx:404; and the value in the BranchCount corresponding to that entry (can be obtained from branch->GetBranchCount()).; NoteThis interface is not meant to be exposed to end users, but rather it should be wrapped by higher-level interfaces. See TBranch::GetEntriesSerialized() for an alternative that does not perform byte swapping (useful to save one pass over data in some cases). ; Definition at line 1472 of file TBranch.cxx. ◆ GetBulkRead(). ROOT::Experimental::Internal::TBulkBranchRead & TBranch::GetBulkRead ; (; ). inline . Definition at line 218 of file TBranch.h. ◆ GetClassName(). const char * TBranch::GetClassName ; (; ); const. virtual . Return the name of the user class whose content is stored in this branch, if any. ; If this branch was created using the 'leaflist' technique, this function returns an empty string. ; Reimplemented in TBranchClones, TBranchElement, TBranchObject, and TBranchSTL.; Definition at line 1324 of file TBranch.cxx. ◆ GetCompressionAlgorithm(). Int_t TBranch::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 299 of file TBranch.h. ◆ GetCompressionLevel(). Int_t TBranch::GetCompressionLevel ; (; ); const. inline . Definition at line 305 of file TBranch.h. ◆ GetCompressionSettings(). Int_t TBranch::GetCompressionSettings ; (; ); const. inline .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:44694,perform,perform,44694,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['perform'],['perform']
Performance," char* method) const; TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodDTMethodDT(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = NULL); TMVA::MethodDTMethodDT(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::IMethod&TMVA::IMethod::operator=(const TMVA::IMethod&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; virtual voidProcessOptions(); voidTMVA::MethodBase::ProcessSetup(); Double_tPruneTree(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodDT.html:12229,Optimiz,OptimizeTuningParameters,12229,root/html534/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodDT.html,1,['Optimiz'],['OptimizeTuningParameters']
Performance," char* method) const; TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodMLPMethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); TMVA::MethodMLPMethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::IMethod&TMVA::IMethod::operator=(const TMVA::IMethod&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; virtual voidTMVA::MethodANNBase::PrintNetwork() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodMLP.html:9363,Optimiz,OptimizeTuningParameters,9363,root/html534/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodMLP.html,1,['Optimiz'],['OptimizeTuningParameters']
Performance," char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitBranches(Long64_t entry); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTTree::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual Int_tTTree::LoadBaskets(Long64_t maxmemory = 2000000000); virtual Long64_tTTree::LoadTree(Long64_t entry); virtual Long64_tTTree::LoadTreeFriend(Long64_t entry, TTree* T); virtual voidTNamed::ls(Option_t* option = """") const; virtual Int_tTTree::MakeClass(const char* classname = 0, Option_t* option = """"); virtual Int_tTTree::MakeCode(const char* filename = 0); virtual Int_tTTree::MakeProxy(const char* classname, const char* macrofilename = 0, const char* cutfilename = 0, const char* option = 0, Int_t maxUnrolling = 3); virtual Int_tTTree::MakeSelector(const char* selector = 0); char*MakeX(Int_t nvars); voidTObject::MayNotUse(const char* method) const; Bool_tTTree::MemoryFull(Int_t nbytes); virtual Long64_tTTree::Merge(TCollection* list, Option_t* option = """"); static TTree*TTree::MergeTrees(TList* list, Option_t* option = """"); virtual voidTAttLine::Modify(); virtual Bool_tTTree::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTTree::OptimizeBaskets(Int_t maxMemory = 10000000, Float_t minComp = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookTree.html:12489,Optimiz,OptimizeBaskets,12489,root/html528/THbookTree.html,https://root.cern,https://root.cern/root/html528/THbookTree.html,1,['Optimiz'],['OptimizeBaskets']
Performance," char* name, Bool_t load = kFALSE) const; TGlobal*GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; TFunction*GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); TFunction*GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctions() const; TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed::GetName() const; virtual Int_tTDirectory::GetNbytesKeys() const; Int_tGetNclasses() const; virtual Int_tTDirectory::GetNkeys() const; Int_tGetNtypes() const; voidTDirectory::GetObject(const char* namecycle, void*& ptr); virtual void*TDirectory::GetObjectChecked(const char* namecycle, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:6780,load,load,6780,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['load'],['load']
Performance," char* name, const char* title, RooAbsPdf& _pdf); Constructor taking name, title and function to be cached. To control; granularity of the binning of the cache histogram set the desired properties; in the binning named ""cache"" in the observables of the function. The dimensions; of the cache are automatically matched to the number of observables used; in each use context. Multiple cache in different observable may exists; simultanously if the cached p.d.f is used with multiple observable; configurations simultaneously. RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); Constructor taking name, title and function to be cached and; fixed choice of variable to cache. To control granularity of the; binning of the cache histogram set the desired properties in the; binning named ""cache"" in the observables of the function.; If the fixed set of cache observables does not match the observables; defined in the use context of the p.d.f the cache is still filled; completely. Ee.g. when it is specified to cache x and p and only x; is a observable in the given use context the cache histogram will; store sampled values for all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedPdf(const RooCachedPdf& other, const char* name = 0); Copy constructor. ~RooCachedPdf(); Destructor. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cachePdf) const; Update contents of cache histogram by resampling the input p.d.f. Note that; the cache is filled with normalized p.d.f values so that the RooHistPdf; that represents the cache contents can be explicitly declared as self normalized; eliminating the need for superfluous numeric calculations of unit normalization.s. void preferredObservableScanOrder(const RooArgSet& obs, RooArgSet& orderedObs) const; Defer preferred scan order to cached pdf prefernece. RooArgSet* actualObservables(const RooArgSet& nset) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:42056,cache,cache,42056,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,7,['cache'],['cache']
Performance," char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheSource() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedReal.html:2328,Cache,CacheModeRooAbsArg,2328,root/html534/RooCachedReal.html,https://root.cern,https://root.cern/root/html534/RooCachedReal.html,1,['Cache'],['CacheModeRooAbsArg']
Performance," char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files, TList* wrks = 0); Create in each worker sandbox symlinks to the files in the list; Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0, TList* wrks = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for heade",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:31265,cache,cache,31265,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,2,['cache'],['cache']
Performance," check); 2185{; 2186 TString lib(libname);; 2187 ; 2188 // Check if libname exists in path or not; 2189 if (char *path = gSystem->DynamicPathName(lib, kTRUE)) {; 2190 // If check == true, only check if it exists and if it's readable; 2191 if (check) {; 2192 delete [] path;; 2193 return 0;; 2194 }; 2195 ; 2196 // If check == false, try to load the library; 2197 else {; 2198 int err = gSystem->Load(path, nullptr, kTRUE);; 2199 delete [] path;; 2200 ; 2201 // TSystem::Load returns 1 when the library was already loaded, return success in this case.; 2202 if (err == 1); 2203 err = 0;; 2204 return err;; 2205 }; 2206 } else {; 2207 // This is the branch where libname didn't exist; 2208 if (check) {; 2209 FileStat_t stat;; 2210 if (!gSystem->GetPathInfo(libname, stat) && (R_ISREG(stat.fMode) &&; 2211 !gSystem->AccessPathName(libname, kReadPermission))); 2212 return 0;; 2213 }; 2214 ; 2215 // Take care of user who didn't write the whole name; 2216 if (!lib.BeginsWith(""lib"")) {; 2217 lib = ""lib"" + lib;; 2218 return LoadClass("""", lib.Data(), check);; 2219 }; 2220 }; 2221 ; 2222 // Execution reaches here when library was prefixed with lib, check is false and couldn't find; 2223 // the library name.; 2224 return -1;; 2225}; 2226 ; 2227////////////////////////////////////////////////////////////////////////////////; 2228/// Return true if the file is local and is (likely) to be a ROOT file; 2229 ; 2230Bool_t TROOT::IsRootFile(const char *filename) const; 2231{; 2232 Bool_t result = kFALSE;; 2233 FILE *mayberootfile = fopen(filename,""rb"");; 2234 if (mayberootfile) {; 2235 char header[5];; 2236 if (fgets(header,5,mayberootfile)) {; 2237 result = strncmp(header,""root"",4)==0;; 2238 }; 2239 fclose(mayberootfile);; 2240 }; 2241 return result;; 2242}; 2243 ; 2244////////////////////////////////////////////////////////////////////////////////; 2245/// To list all objects of the application.; 2246/// Loop on all objects created in the ROOT linked lists.; 2247/// Objects may be files and wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:84761,Load,LoadClass,84761,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['Load'],['LoadClass']
Performance, churn. ! Number of reallocations basket memory buffers. ; Definition at line 152 of file TTree.h. ◆ fAutoFlush. Long64_t TTree::fAutoFlush. protected . Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ; Definition at line 101 of file TTree.h. ◆ fAutoSave. Long64_t TTree::fAutoSave. protected . Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ; Definition at line 100 of file TTree.h. ◆ fBranches. TObjArray TTree::fBranches. protected . List of Branches. ; Definition at line 122 of file TTree.h. ◆ fBranchRef. TBranchRef* TTree::fBranchRef. protected . Branch supporting the TRefTable (if any) ; Definition at line 136 of file TTree.h. ◆ fCacheDoAutoInit. bool TTree::fCacheDoAutoInit. protected . ! true if cache auto creation or resize check is needed ; Definition at line 139 of file TTree.h. ◆ fCacheDoClusterPrefetch. bool TTree::fCacheDoClusterPrefetch. protected . ! true if cache is prefetching whole clusters ; Definition at line 140 of file TTree.h. ◆ fCacheSize. Long64_t TTree::fCacheSize. protected . ! Maximum size of file buffers ; Definition at line 105 of file TTree.h. ◆ fCacheUserSet. bool TTree::fCacheUserSet. protected . ! true if the cache setting was explicitly given by user ; Definition at line 141 of file TTree.h. ◆ fChainOffset. Long64_t TTree::fChainOffset. protected . ! Offset of 1st entry of this Tree in a TChain ; Definition at line 106 of file TTree.h. ◆ fClones. TList* TTree::fClones. protected . ! List of cloned trees which share our addresses ; Definition at line 135 of file TTree.h. ◆ fClusterRangeEnd. Long64_t* TTree::fClusterRangeEnd. protected . [fNClusterRange] Last entry of a cluster range. ; Definition at line 103 of file TTree.h. ◆ fClusterSize. Long64_t* TTree::fClusterSize. protected . [fNClusterRange] Number of entries in each cluster for a given range. ; Definition at line 104 of file TTree.h. ◆ fDebug. Int_t TTree::fDebug. protected . ! Debug level ; D,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:227941,cache,cache,227941,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['cache'],['cache']
Performance," cl, Bool_t useBcnt = kFALSE); Copies class version to buffer, but not writes it to xml; Version will be written with next I/O operation or; will be added as attribute of class tag, created by IncrementLevel call. void* ReadObjectAny(const TClass* clCast); Read object from buffer. Only used from TBuffer. void SkipObjectAny(); Skip any kind of object from buffer; Actually skip only one node on current level of xml structure. void WriteObjectClass(const void* actualObjStart, const TClass* actualClass); Write object to buffer. Only used from TBuffer. void ReadFloat16(Float_t* f, TStreamerElement* ele = 0); read a Float16_t from the buffer. void ReadDouble32(Double_t* d, TStreamerElement* ele = 0); read a Double32_t from the buffer. void ReadWithFactor(Float_t* ptr, Double_t factor, Double_t minvalue); Read a Double32_t from the buffer when the factor and minimun value have been specified; see comments about Double32_t encoding at TBufferFile::WriteDouble32().; Currently TBufferXML does not optimize space in this case. void ReadWithNbits(Float_t* ptr, Int_t nbits); Read a Float16_t from the buffer when the number of bits is specified (explicitly or not); see comments about Float16_t encoding at TBufferFile::WriteFloat16().; Currently TBufferXML does not optimize space in this case. void ReadWithFactor(Double_t* ptr, Double_t factor, Double_t minvalue); Read a Double32_t from the buffer when the factor and minimun value have been specified; see comments about Double32_t encoding at TBufferFile::WriteDouble32().; Currently TBufferXML does not optimize space in this case. void ReadWithNbits(Double_t* ptr, Int_t nbits); Read a Double32_t from the buffer when the number of bits is specified (explicitly or not); see comments about Double32_t encoding at TBufferFile::WriteDouble32().; Currently TBufferXML does not optimize space in this case. void WriteFloat16(Float_t* f, TStreamerElement* ele = 0); write a Float16_t to the buffer. void WriteDouble32(Double_t* d, TStreamerElem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferXML.html:32652,optimiz,optimize,32652,root/html528/TBufferXML.html,https://root.cern,https://root.cern/root/html528/TBufferXML.html,6,['optimiz'],['optimize']
Performance," cl->fState = TClass::kEmulated;; 4147 } else {; 4148 cl->fState = TClass::kForwardDeclared;; 4149 }; 4150// }; 4151 }; 4152 }; 4153 if (cl->fClassInfo) {; 4154 TClass::AddClassToDeclIdMap(((TClingClassInfo*)cl->fClassInfo)->GetDeclId(), cl);; 4155 }; 4156}; 4157 ; 4158////////////////////////////////////////////////////////////////////////////////; 4159/// Checks if an entity with the specified name is defined in Cling.; 4160/// Returns kUnknown if the entity is not defined.; 4161/// Returns kWithClassDefInline if the entity exists and has a ClassDefInline; 4162/// Returns kKnown if the entity is defined.; 4163///; 4164/// By default, structs, namespaces, classes, enums and unions are looked for.; 4165/// If the flag isClassOrNamespaceOnly is true, classes, structs and; 4166/// namespaces only are considered. I.e. if the name is an enum or a union,; 4167/// the returned value is false.; 4168///; 4169/// In the case where the class is not loaded and belongs to a namespace; 4170/// or is nested, looking for the full class name is outputting a lots of; 4171/// (expected) error messages. Currently the only way to avoid this is to; 4172/// specifically check that each level of nesting is already loaded.; 4173/// In case of templates the idea is that everything between the outer; 4174/// '<' and '>' has to be skipped, e.g.: `aap<pippo<noot>::klaas>::a_class`; 4175 ; 4176TInterpreter::ECheckClassInfo; 4177TCling::CheckClassInfo(const char *name, Bool_t autoload, Bool_t isClassOrNamespaceOnly /* = kFALSE*/); 4178{; 4179 R__LOCKGUARD(gInterpreterMutex);; 4180 static const char *anonEnum = ""anonymous enum "";; 4181 static const int cmplen = strlen(anonEnum);; 4182 ; 4183 if (fIsShuttingDown || 0 == strncmp(name, anonEnum, cmplen)) {; 4184 return kUnknown;; 4185 }; 4186 ; 4187 // Do not turn on the AutoLoading if it is globally off.; 4188 autoload = autoload && IsClassAutoLoadingEnabled();; 4189 ; 4190 // Avoid the double search below in case the name is a fundamental type; 41",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:161385,load,loaded,161385,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," cl;; 972 //fValue must be set last since we use it to indicate that we are initialized; 973 fValue = newfValue;; 974 return this;; 975 }; 976 Fatal(""TGenCollectionProxy"",""Components of %s not analysed!"",cl->GetName());; 977 }; 978 Fatal(""TGenCollectionProxy"",""Collection class %s not found!"",fTypeinfo.name());; 979 return 0;; 980}; 981 ; 982////////////////////////////////////////////////////////////////////////////////; 983/// Return a pointer to the TClass representing the container; 984 ; 985TClass *TGenCollectionProxy::GetCollectionClass() const; 986{; 987 return fClass ? fClass : Initialize(kFALSE)->fClass;; 988}; 989 ; 990////////////////////////////////////////////////////////////////////////////////; 991/// Return the type of collection see TClassEdit::ESTLType; 992 ; 993Int_t TGenCollectionProxy::GetCollectionType() const; 994{; 995 if (!fValue.load(std::memory_order_relaxed)) {; 996 Initialize(kFALSE);; 997 }; 998 return fSTL_type;; 999}; 1000 ; 1001////////////////////////////////////////////////////////////////////////////////; 1002/// Return the offset between two consecutive value_types (memory layout).; 1003 ; 1004ULong_t TGenCollectionProxy::GetIncrement() const {; 1005 if (!fValue.load(std::memory_order_relaxed)) {; 1006 Initialize(kFALSE);; 1007 }; 1008 return fValDiff;; 1009}; 1010 ; 1011////////////////////////////////////////////////////////////////////////////////; 1012/// Return the sizeof the collection object.; 1013 ; 1014UInt_t TGenCollectionProxy::Sizeof() const; 1015{; 1016 return fClass->Size();; 1017}; 1018 ; 1019////////////////////////////////////////////////////////////////////////////////; 1020/// Return true if the content is of type 'pointer to'; 1021 ; 1022Bool_t TGenCollectionProxy::HasPointers() const; 1023{; 1024 // Initialize proxy in case it hasn't been initialized yet; 1025 if( !fValue.load(std::memory_order_relaxed) ); 1026 Initialize(kFALSE);; 1027 ; 1028 // The content of a map and multimap is always a 'pair' and hence; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:32154,load,load,32154,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['load'],['load']
Performance, class ; Definition at line 100 of file OptimizeConfigParameters.h. ◆ DeclFileName(). static const char * TMVA::OptimizeConfigParameters::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file OptimizeConfigParameters.h. ◆ EstimatorFunction(). Double_t TMVA::OptimizeConfigParameters::EstimatorFunction ; (; std::vector< Double_t > & ; pars). privatevirtual . return the estimator (from current FOM) for the fitting interface ; Implements TMVA::IFitterTarget.; Definition at line 307 of file OptimizeConfigParameters.cxx. ◆ GetBkgEffAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgEffAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background efficiency for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 546 of file OptimizeConfigParameters.cxx. ◆ GetBkgRejAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgRejAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background rejection for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 583 of file OptimizeConfigParameters.cxx. ◆ GetFOM(). Double_t TMVA::OptimizeConfigParameters::GetFOM ; (; ). private . Return the Figure of Merit (FOM) used in the parameter optimization process. ; Definition at line 350 of file OptimizeConfigParameters.cxx. ◆ GetMethod(). MethodBase * TMVA::OptimizeConfigParameters::GetMethod ; (; ). inlineprivate . Definition at line 72 of file OptimizeConfigParameters.h. ◆ GetMVADists(). void TMVA::OptimizeConfigParameters::GetMVADists ; (; ). private . fill the private histograms with the mva distributions for sig/bkg ; Definition at line 393 of file OptimizeConfigParameters.cxx. ◆ GetROCIntegral(). Double_t TMVA::OptimizeConfigParameters::GetROCIntegral ; (; ). private . calculate the area (integral) under the ROC cur,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:6497,Optimiz,OptimizeConfigParameters,6497,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Optimiz'],['OptimizeConfigParameters']
Performance," class ;  CTDecompBKThe Bunch-Kaufman diagonal pivoting method decomposes a real symmetric matrix A using ;  CTDecompCholCholesky Decomposition class ;  CTDecompLULU Decomposition class ;  CTDecompQRHQR Decomposition class ;  CTDecompSparseSparse Symmetric Decomposition class ;  CTDecompSVDSingle Value Decomposition class ;  CTDialogCanvasA canvas specialized to set attributes ;  CTDiamondDraw a Diamond ;  CTDictAttributeMapThe ROOT object has a list of properties which are stored and retrieved using TDictAttributeMap ;  CTDictionaryThis class defines an abstract interface that must be implemented by all classes that contain dictionary information ;  ►CTDirectoryDescribe directory structure in memory ;  CTContext;  CTDirectoryFileA ROOT file is structured in Directories (like a file system) ;  CTDNDData;  CTDocDirective;  CTDocHtmlDirective;  CTDocLatexDirective;  CTDocMacroDirective;  CTDocMethodWrapper;  CTDocOutput;  CTDocParser;  CTDOMParser;  CTDrawFeedbackUtility class to draw objects in the feedback list during queries ;  CTDSetThis class implements a data set to be used for PROOF processing ;  CTDSetElementManages an element of a TDSet ;  CTDSetProxy;  CTDsKey;  CTEditQueryFrame;  CTEfficiencyClass to handle efficiency histograms ;  CTElementActionT;  CTElementPosActionT;  CTEllipseDraw Ellipses ;  CTELTUA cylinder with an elliptical section ;  CTEmulatedCollectionProxyStreamer around an arbitrary STL like container, which implements basic container functionality ;  CTEmulatedMapProxyStreamer around a map container ;  CTEntryListA List of entry numbers in a TTree or TChain ;  CTEntryListArrayA list of entries and subentries in a TTree or TChain ;  CTEntryListBlockUsed by TEntryList to store the entry numbers ;  CTEntryListFromFileManages entry lists from different files, when they are not loaded in memory at the same time ;  CTEnumImplements the enum type ;  CTEnumConstantImplements the constants of the enum type ;  CTEnvReads config files, by default named .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:121019,load,loaded,121019,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['load'],['loaded']
Performance," class RooSimWSTool::ObjSplitRule. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to build with multiple prototype p.d.fs by specifying a; mapping between the prototype to use and the names of states of; a 'maste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html:1282,perform,performed,1282,root/html534/RooSimWSTool__ObjSplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html,3,['perform'],['performed']
Performance," class and create a heap object:; root[] .L Quad.cxx; root[] Quad *my_objptr = new Quad(1.,2.,-3.);; To delete the object:; root[] delete my_objptr;; root[] my_objptr = 0;; You should see the print out from its destructor. Setting the pointer to zero afterwards is not strictly necessary (and Cling does it automatically), but the object is no more accessible, and any attempt to use the pointer again will, as has already been stated, cause grief. So much for heap objects, but how are stack objects deleted? In C++, a stack object is deleted as soon as control leaves the innermost compound statement that encloses it. Therefore, it is singularly futile to do something like:; root[] { Quad my_object(1.,2.,-3.); }; Cling does not follow this rule; if you type in the above line, you will not see the destructor message. As explained in the Script lesson, you can load in compound statements, which would be a bit pointless if everything disappeared as soon as it was loaded! Instead, to reset the stack you have to type:; root[] gROOT->Reset();; This sends the Reset message via the global pointer to the ROOT object, which, amongst its many roles, acts as a resource manager. Start ROOT again and type in the following:; root[] .L Quad.cxx; root[] Quad my_object(1.,2.,-3.);; root[] Quad *my_objptr = new Quad(4.,5.,-6.);; root[] gROOT->Reset();; You will see that this deletes the first object but not the second. We have also painted ourselves into a corner, as my_objptr was also on the stack. This command will fail.; root[] my_objptr->Solve();; Cling no longer knows what my_objptr is. This is a great example of a memory leak; the heap object exists but we have lost our way to access it. In general, this is not a problem. If any object will outlive the compound statement in which it was created then a more permanent pointer will point to it, which frequently is part of another heap object. See Resetting the Interpreter Environment in the chapter “Cling the C++ Interpreter”.; 7 The C++",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:254587,load,load,254587,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['load'],"['load', 'loaded']"
Performance," class charts. ROOT; » GRAF2D; » GPAD; » TPad. class TPad: public TVirtualPad, public TAttBBox2D. The Pad class is the most important graphics class in the ROOT system. /*. */. A Pad is contained in a Canvas.; A Pad may contain other pads (unlimited pad hierarchy).; A pad is a linked list of primitives of any type (graphics objects,; histograms, detectors, tracks, etc.).; Adding a new element into a pad is in general performed by the Draw; member function of the object classes.; It is important to realize that the pad is a linked list of references; to the original object.; For example, in case of a histogram, the histogram.Draw() operation; only stores a reference to the histogram object and not a graphical; representation of this histogram.; When the mouse is used to change (say the bin content), the bin content; of the original histogram is changed !!. The convention used in ROOT is that a Draw operation only adds; a reference to the object. The effective drawing is performed; when the canvas receives a signal to be painted.; This signal is generally sent when typing carriage return in the; command input or when a graphical operation has been performed on one; of the pads of this canvas.; When a Canvas/Pad is repainted, the member function Paint for all; objects in the Pad linked list is invoked. When the mouse is moved on the Pad, The member function DistancetoPrimitive; is called for all the elements in the pad. DistancetoPrimitive returns; the distance in pixels to this object.; when the object is within the distance window, the member function; ExecuteEvent is called for this object.; in ExecuteEvent, move, changes can be performed on the object.; For examples of DistancetoPrimitive and ExecuteEvent functions,; see classes TLine::DistancetoPrimitive, TLine::ExecuteEvent; TBox::DistancetoPrimitive, TBox::ExecuteEvent; TH1::DistancetoPrimitive, TH1::ExecuteEvent. A Pad supports linear and log scales coordinate systems.; The transformation coefficients are explai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:1184,perform,performed,1184,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,3,['perform'],['performed']
Performance," class definition and Cling will execute the requested member function. This shortcut is quite natural for an interactive system and saves much typing. In this example, ROOT searches for hpx and finds it in hsimple.root.; The next, fundamental extension is shown below. There is no need to put a semicolon at the end of a line. When you leave it off the value of the expression will be printed on the next line. For example:; root[] 23+5; (int)28; root[] 23+5;; root[] TMath::Sin; (Double_t (*)(Double_t)) Function @0x7ffff7ebb090; at include/TMath.h:418:; inline Double_t TMath::Sin(Double_t x); { return sin(x); }; Be aware that these extensions do not work when a compiler replaces the interpreter. Your code will not compile, hence when writing large scripts, it is best to stay away from these shortcuts. It will save you from having problems compiling your scripts using a real C++ compiler.; 7.4 ACLiC: Compiling Scripts Into Libraries; Instead of having Cling interpret your script there is a way to have your scripts compiled, linked and dynamically loaded using the C++ compiler and linker. The advantage of this is that your scripts will run with the speed of compiled C++ and that you can use language constructs that are not fully supported by Cling. On the other hand, you cannot use any Cling shortcuts (see “C++ Extensions To Ease Scripting” above) and for small scripts, the overhead of the compile/link cycle might be larger than just executing the script in the interpreter.; ACLiC will build a dictionary and a shared library from your C++ script, using the compiler and the compiler options that were used to compile the ROOT executable. You do not have to write a Makefile remembering the correct compiler options, and you do not have to exit ROOT.; 7.4.1 Usage; Before you can compile your interpreted script you need to add include statements for the classes used in the script. Once you did that, you can build and load a shared library containing your script. To load it use ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:268098,load,loaded,268098,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," class must have a default constructor. For meaning of; 5207/// defConstructor, see TClass::IsCallingNew().; 5208 ; 5209TClass::ObjectPtr TClass::NewObjectArray(Long_t nElements, ENewType defConstructor) const; 5210{; 5211 ObjectPtr p;; 5212 ; 5213 if (fNewArray) {; 5214 // We have the new operator wrapper function,; 5215 // so there is a dictionary and it was generated; 5216 // by rootcint, so there should be a default; 5217 // constructor we can call through the wrapper.; 5218 {; 5219 TClass__GetCallingNewRAII callingNew(defConstructor);; 5220 p = fNewArray(nElements, nullptr);; 5221 }; 5222 if (!p) {; 5223 Error(""NewArray"", ""cannot create object of class %s version %d"", GetName(), fClassVersion);; 5224 }; 5225 } else if (HasInterpreterInfo()) {; 5226 // We have the dictionary but do not have the; 5227 // constructor wrapper, so the dictionary was; 5228 // not generated by rootcint. Let's try to; 5229 // create the object by having the interpreter; 5230 // call the new operator, hopefully the class; 5231 // library is loaded and there will be a default; 5232 // constructor we can call.; 5233 // [This is very unlikely to work, but who knows!]; 5234 {; 5235 TClass__GetCallingNewRAII callingNew(defConstructor);; 5236 p = gCling->ClassInfo_New(GetClassInfo(),nElements);; 5237 }; 5238 if (!p) {; 5239 Error(""NewArray"", ""cannot create object of class %s version %d"", GetName(), fClassVersion);; 5240 }; 5241 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5242 // There is no dictionary at all, so this is an emulated; 5243 // class; however we do have the services of a collection proxy,; 5244 // so this is an emulated STL class.; 5245 {; 5246 TClass__GetCallingNewRAII callingNew(defConstructor);; 5247 p = fCollectionProxy->NewObjectArray(nElements);; 5248 }; 5249 } else if (!HasInterpreterInfo() && !fCollectionProxy) {; 5250 // There is no dictionary at all and we do not have; 5251 // the services of a collection proxy available, so; 5252 // use the streamer info to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:199665,load,loaded,199665,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," class must have a default constructor. For meaning of; 5274/// defConstructor, see TClass::IsCallingNew().; 5275 ; 5276TClass::ObjectPtr TClass::NewObjectArray(Long_t nElements, ENewType defConstructor) const; 5277{; 5278 ObjectPtr p;; 5279 ; 5280 if (fNewArray) {; 5281 // We have the new operator wrapper function,; 5282 // so there is a dictionary and it was generated; 5283 // by rootcint, so there should be a default; 5284 // constructor we can call through the wrapper.; 5285 {; 5286 TClass__GetCallingNewRAII callingNew(defConstructor);; 5287 p = fNewArray(nElements, nullptr);; 5288 }; 5289 if (!p) {; 5290 Error(""NewArray"", ""cannot create object of class %s version %d"", GetName(), fClassVersion);; 5291 }; 5292 } else if (HasInterpreterInfo()) {; 5293 // We have the dictionary but do not have the; 5294 // constructor wrapper, so the dictionary was; 5295 // not generated by rootcint. Let's try to; 5296 // create the object by having the interpreter; 5297 // call the new operator, hopefully the class; 5298 // library is loaded and there will be a default; 5299 // constructor we can call.; 5300 // [This is very unlikely to work, but who knows!]; 5301 {; 5302 TClass__GetCallingNewRAII callingNew(defConstructor);; 5303 p = gCling->ClassInfo_New(GetClassInfo(),nElements);; 5304 }; 5305 if (!p) {; 5306 Error(""NewArray"", ""cannot create object of class %s version %d"", GetName(), fClassVersion);; 5307 }; 5308 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5309 // There is no dictionary at all, so this is an emulated; 5310 // class; however we do have the services of a collection proxy,; 5311 // so this is an emulated STL class.; 5312 {; 5313 TClass__GetCallingNewRAII callingNew(defConstructor);; 5314 p = fCollectionProxy->NewObjectArray(nElements);; 5315 }; 5316 } else if (!HasInterpreterInfo() && !fCollectionProxy) {; 5317 // There is no dictionary at all and we do not have; 5318 // the services of a collection proxy available, so; 5319 // use the streamer info to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:202416,load,loaded,202416,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," class that are used only for transient members). The 'requestedname' is expected to be already normalized. TClass * LoadClassDefault(const char* requestedname, Bool_t silent); Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname' from; the TClassTable or the autoloader.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. TClass * LoadClassCustom(const char* requestedname, Bool_t silent); Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. void LoadClassInfo() const; Try to load the classInfo (it may require parsing the header file; and/or loading data from the clang pcm). void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initial",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:52983,Load,LoadClassInfo,52983,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,6,"['Load', 'load']","['LoadClassInfo', 'load', 'loading']"
Performance, clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOrigina,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsAnaConvPdf.html:44498,cache,cache,44498,root/html602/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html,2,['cache'],['cache']
Performance," clean-up HDFS file. Long64_t CopyTo(void* to, Long64_t maxsize) const; Copy the binary representation of the TMemFile into; the memory area starting at 'to' and of length at most 'maxsize'; returns the number of bytes actually copied. void CopyTo(TBuffer& tobuf) const; Copy the binary representation of the TMemFile into; the TBuffer tobuf. Long64_t GetSize() const; Return the current size of the memory file. void Print(Option_t* option = """") const. void ResetAfterMerge(TFileMergeInfo* ); Wipe all the data from the permanent buffer but keep, the in-memory object; alive. void ResetObjects(TDirectoryFile* , TFileMergeInfo* ) const; Wipe all the data from the permanent buffer but keep, the in-memory object; alive. Int_t SysRead(Int_t fd, void* buf, Int_t len); Read specified number of bytes from current offset into the buffer.; See documentation for TFile::SysRead(). Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Seek to a specified position in the file. See TFile::SysSeek().; Note that TMemFile does not support seeks when the file is open for write. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Open a file in 'MemFile'. Int_t SysClose(Int_t fd); Close the mem file. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Write a buffer into the file;. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Perform a stat on the HDFS file; see TFile::SysStat(). Int_t SysSync(Int_t fd); Sync remaining data to disk;; Nothing to do here. void ResetErrno() const; ResetErrno; simply calls TSystem::ResetErrno(). TMemBlock & operator=(const TMemFile& ). Long64_t MemRead(Int_t fd, void* buf, Long64_t len) const. » Author: Philippe Canal, May 2011 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMemFile.html:25020,Perform,Perform,25020,root/html534/TMemFile.html,https://root.cern,https://root.cern/root/html534/TMemFile.html,1,['Perform'],['Perform']
Performance," clean-up HDFS file. Long64_t CopyTo(void* to, Long64_t maxsize) const; Copy the binary representation of the TMemFile into; the memory area starting at 'to' and of length at most 'maxsize'; returns the number of bytes actually copied. void CopyTo(TBuffer& tobuf) const; Copy the binary representation of the TMemFile into; the TBuffer tobuf. Long64_t GetSize() const; Return the current size of the memory file. void Print(Option_t* option = """") const. void ResetAfterMerge(TFileMergeInfo* ); Wipe all the data from the permanent buffer but keep, the in-memory object; alive. void ResetObjects(TDirectoryFile* , TFileMergeInfo* ) const; Wipe all the data from the permanent buffer but keep, the in-memory object; alive. Int_t SysRead(Int_t fd, void* buf, Int_t len); Read specified number of bytes from current offset into the buffer.; See documentation for TFile::SysRead(). Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Seek to a specified position in the file. See TFile::SysSeek().; Note that TMemFile does not support seeks when the file is open for write. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Open a file in 'MemFile'. Int_t SysClose(Int_t fd); Close the mem file. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Write a buffer into the file;. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Perform a stat on the HDFS file; see TFile::SysStat(). Int_t SysSync(Int_t fd); Sync remaining data to disk;; Nothing to do here. void ResetErrno() const; ResetErrno; simply calls TSystem::ResetErrno(). TMemBlock & operator=(const TMemFile& ). Long64_t MemRead(Int_t fd, void* buf, Long64_t len) const. » Author: Philippe Canal, May 2011 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-18 17:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMemFile.html:25955,Perform,Perform,25955,root/html604/TMemFile.html,https://root.cern,https://root.cern/root/html604/TMemFile.html,1,['Perform'],['Perform']
Performance," clean-up HDFS file. Long64_t CopyTo(void* to, Long64_t maxsize) const; Copy the binary representation of the TMemFile into; the memory area starting at 'to' and of length at most 'maxsize'; returns the number of bytes actually copied. void CopyTo(TBuffer& tobuf) const; Copy the binary representation of the TMemFile into; the TBuffer tobuf. Long64_t GetSize() const; Return the current size of the memory file. void Print(Option_t* option = """") const. void ResetAfterMerge(TFileMergeInfo* ); Wipe all the data from the permanent buffer but keep, the in-memory object; alive. void ResetObjects(TDirectoryFile* , TFileMergeInfo* ) const; Wipe all the data from the permanent buffer but keep, the in-memory object; alive. Int_t SysRead(Int_t fd, void* buf, Int_t len); Read specified number of bytes from current offset into the buffer.; See documentation for TFile::SysRead(). Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Seek to a specified position in the file. See TFile::SysSeek().; Note that TMemFile does not support seeks when the file is open for write. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Open a file in 'MemFile'. Int_t SysClose(Int_t fd); Close the mem file. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Write a buffer into the file;. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Perform a stat on the HDFS file; see TFile::SysStat(). Int_t SysSync(Int_t fd); Sync remaining data to disk;; Nothing to do here. void ResetErrno() const; ResetErrno; simply calls TSystem::ResetErrno(). TMemBlock & operator=(const TMemFile& ). Long64_t MemRead(Int_t fd, void* buf, Long64_t len) const. » Author: Philippe Canal, May 2011 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMemFile.html:25955,Perform,Perform,25955,root/html602/TMemFile.html,https://root.cern,https://root.cern/root/html602/TMemFile.html,1,['Perform'],['Perform']
Performance, cluster for a given range. ;  ; Int_t fDebug;  ! Debug level ;  ; Long64_t fDebugMax;  ! Last entry number to debug ;  ; Long64_t fDebugMin;  ! First entry number to debug ;  ; Int_t fDefaultEntryOffsetLen;  Initial Length of fEntryOffset table in the basket buffers. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t fEntries;  Number of entries. ;  ; TEntryList * fEntryList;  ! Pointer to event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * fExternalFriends;  ! List of TFriendsElement pointing to us and need to be notified of LoadTree. Content not owned. ;  ; Int_t fFileNumber;  ! current file number (if file extensions) ;  ; Long64_t fFlushedBytes;  Number of auto-flushed bytes. ;  ; UInt_t fFriendLockStatus;  ! Record which method is locking the friend recursion ;  ; TList * fFriends;  pointer to list of friend elements ;  ; bool fIMTEnabled;  ! true if implicit multi-threading is enabled for this tree ;  ; TArrayI fIndex;  Index of sorted values. ;  ; TArrayD fIndexValues;  Sorted index values. ;  ; TIOFeatures fIOFeatures {0};  IO features to define for newly-written baskets and branches. ;  ; TObjArray fLeaves;  Direct pointers to individual branch leaves. ;  ; Int_t fMakeClass;  ! not zero when processing code generated by MakeClass ;  ; Int_t fMaxClusterRange;  ! Memory allocated for the cluster range. ;  ; Long64_t fMaxEntries;  Maximum number of entries in case of circular buffers. ;  ; Long64_t fMaxEntryLoop;  Maximum number of entries to process. ;  ; Long64_t fMaxVirtualSize;  Maximum total size of buffers kept in memory. ;  ; Int_t fNClusterRange;  Number of Cluster range in addition to the one defined by 'AutoFlush'. ;  ; UInt_t fNEntriesSinceSorting;  ! Number of entries processed since the last re-sorting of branches ;  ; Int_t fNfill;  ! Local for EntryLoop ;  ; TObject * fNotif,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:41319,multi-thread,multi-threading,41319,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,9,['multi-thread'],['multi-threading']
Performance," code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::clon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGaussModel.html:2758,cache,cacheUniqueSuffix,2758,root/html534/RooGaussModel.html,https://root.cern,https://root.cern/root/html534/RooGaussModel.html,3,['cache'],['cacheUniqueSuffix']
Performance," code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3094,cache,cacheUniqueSuffix,3094,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,1,['cache'],['cacheUniqueSuffix']
Performance," code:; obj->SaveAs(""file.json"");; To access data from a remote web server, it is recommended to use the httpRequest method. For instance to receive object from a THttpServer server one could do:; import { httpRequest } from 'https://root.cern/js/latest/modules/main.mjs';; let obj = await httpRequest(""http://your_root_server:8080/Canvases/c1/root.json"", ""object""); console.log('Read object of type', obj._typename);; Function returns Promise, which provides parsed object (or Error in case of failure).; If JSON string was obtained by different method, it could be parsed with parse function:; import { parse } from 'https://root.cern/js/latest/modules/main.mjs';; let obj = parse(json_string);; 1.11.3 Objects drawing; After an object has been created, one can directly draw it. If HTML page has <div> element:; <div id=""drawing""></div>; One could use the draw function:; import { draw } from 'https://root.cern/js/latest/modules/main.mjs';; draw(""drawing"", obj, ""colz"");; The first argument is the id of the HTML div element, where drawing will be performed. The second argument is the object to draw and the third one is the drawing option.; Here is complete running example ans source code:; import { httpRequest, draw, redraw, resize, cleanup } from 'https://root.cern/js/latest/modules/main.mjs';; let filename = ""https://root.cern/js/files/th2ul.json.gz"";; let obj = await httpRequest(filename, 'object');; draw(""drawing"", obj, ""lego"");; In very seldom cases one need to access painter object, created in draw() function. This can be done via handling Promise results like:; let painter = await draw(""drawing"", obj, ""colz"");; console.log('Object type in painter', painter.getClassName());; One is also able to update the drawing with a new version of the object:; // after some interval request object again; redraw(""drawing"", obj2, ""colz"");; The redraw function will call draw if the drawing was not performed before.; In the case when changing of HTML layout leads to resize of element wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:26587,perform,performed,26587,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['perform'],['performed']
Performance," coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:2055,Cache,CacheElem,2055,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,2,['Cache'],['CacheElem']
Performance," colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Text colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Text Size; If the text precision (see next paragraph) is smaller than 3, the text ; size is expressed in percentage of the current pad height.; The textsize in pixels (say charheight) will be:. charheight = textsize*canvas_height if current pad is horizontal.; charheight = textsize*canvas_width if current pad is vertical. If the text precision is equal to 3, the character size is given in pixel: . charheight = number of pixels. The text size of any class inheriting from TAttText can; be changed using the method SetTextSize and retrieved using the; method GetTextSize.; Text Font and Precision; The text font code is combination of the font number and the precision. Text font code = 10*fontnumber + precision. Font numbers must be between 1 and 14. The precision can be:; precision = 0 fast hardware fonts (steps in the size); precision = 1 scalable and rotatable hardware fonts (see below); precision = 2 scalable and rotatable hardware fonts; precision = 3 scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from TAttText can; be changed using the method SetTextFont and retrieved using the; method GetTextFont.; Font quality and speed; When precision 0 is used, only the original non-scaled system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts. However TTF are slow.; How to use True Type Fonts; One can activate the TTF by adding (or activating) the following line; in the .rootrc file:. Unix.*.Root.UseTTFonts: true. It is possible to check the TTF are in use in a Root ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttText.html:4550,scalab,scalable,4550,root/html526/TAttText.html,https://root.cern,https://root.cern/root/html526/TAttText.html,3,['scalab'],['scalable']
Performance," combine with a RotationX; 93 return EulerAngles ( Quaternion(*this) * r );; 94}; 95 ; 96EulerAngles EulerAngles::operator * (const RotationY & r) const {; 97 // combine with a RotationY; 98 return EulerAngles ( Quaternion(*this) * r );; 99}; 100 ; 101EulerAngles EulerAngles::operator * (const RotationZ & r) const {; 102 // combine with a RotationZ; 103 // TODO -- this can be made much faster because it merely adds; 104 // the r.Angle() to phi.; 105 Scalar newPhi = fPhi + r.Angle();; 106 if ( newPhi <= -Pi()|| newPhi > Pi() ) {; 107 newPhi = newPhi - std::floor( newPhi/(2*Pi()) +.5 ) * 2*Pi();; 108 }; 109 return EulerAngles ( newPhi, fTheta, fPsi );; 110}; 111 ; 112EulerAngles operator * ( RotationX const & r, EulerAngles const & e ) {; 113 return EulerAngles(r) * e; // TODO: improve performance; 114}; 115 ; 116EulerAngles operator * ( RotationY const & r, EulerAngles const & e ) {; 117 return EulerAngles(r) * e; // TODO: improve performance; 118}; 119 ; 120EulerAngles; 121operator * ( RotationZ const & r, EulerAngles const & e ) {; 122 return EulerAngles(r) * e; // TODO: improve performance; 123}; 124 ; 125// ========== I/O =====================; 126 ; 127std::ostream & operator<< (std::ostream & os, const EulerAngles & e) {; 128 // TODO - this will need changing for machine-readable issues; 129 // and even the human readable form may need formatting improvements; 130 os << ""\n{phi: "" << e.Phi() << "" theta: "" << e.Theta(); 131 << "" psi: "" << e.Psi() << ""}\n"";; 132 return os;; 133}; 134 ; 135 ; 136} //namespace Math; 137} //namespace ROOT; AxisAnglefwd.h; Cartesian3D.h; DisplacementVector3D.h; EulerAngles.h; Quaternion.h; Rotation3D.h; RotationX.h; RotationY.h; RotationZ.h; a#define a(i)Definition RSha256.hxx:99; e#define e(i)Definition RSha256.hxx:103; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/EulerAngles_8cxx_source.html:3592,perform,performance,3592,doc/master/EulerAngles_8cxx_source.html,https://root.cern,https://root.cern/doc/master/EulerAngles_8cxx_source.html,3,['perform'],['performance']
Performance," common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:72013,multi-thread,multi-thread,72013,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['multi-thread'],['multi-thread']
Performance," compRes= fInterpreter->declare(uniqueString.Data(), &T);; 5894 assert(cling::Interpreter::kSuccess == compRes && ""A declaration in a rootmap could not be compiled"");; 5895 ; 5896 if (compRes!=cling::Interpreter::kSuccess){; 5897 Warning(""LoadLibraryMap"",; 5898 ""Problems in %s declaring '%s' were encountered."", rootmapfile, uniqueString.Data()) ;; 5899 }; 5900 ; 5901 if (T) {; 5902 ExtVisibleStorageAdder evsAdder(fNSFromRootmaps);; 5903 for (auto declIt = T->decls_begin(); declIt < T->decls_end(); ++declIt) {; 5904 if (declIt->m_DGR.isSingleDecl()) {; 5905 if (Decl* D = declIt->m_DGR.getSingleDecl()) {; 5906 if (clang::isa<TagDecl>(D) || clang::isa<NamespaceDecl>(D)) {; 5907 evsAdder.TraverseDecl(D);; 5908 }; 5909 }; 5910 }; 5911 }; 5912 }; 5913 ; 5914 // clear duplicates; 5915 ; 5916 return 0;; 5917}; 5918 ; 5919////////////////////////////////////////////////////////////////////////////////; 5920/// Scan again along the dynamic path for library maps. Entries for the loaded; 5921/// shared libraries are unloaded first. This can be useful after reseting; 5922/// the dynamic path through TSystem::SetDynamicPath(); 5923/// In case of error -1 is returned, 0 otherwise.; 5924 ; 5925Int_t TCling::RescanLibraryMap(); 5926{; 5927 UnloadAllSharedLibraryMaps();; 5928 LoadLibraryMap();; 5929 return 0;; 5930}; 5931 ; 5932////////////////////////////////////////////////////////////////////////////////; 5933/// Reload the library map entries coming from all the loaded shared libraries,; 5934/// after first unloading the current ones.; 5935/// In case of error -1 is returned, 0 otherwise.; 5936 ; 5937Int_t TCling::ReloadAllSharedLibraryMaps(); 5938{; 5939 const TString sharedLibLStr = GetSharedLibs();; 5940 const TObjArray* sharedLibL = sharedLibLStr.Tokenize("" "");; 5941 const Int_t nrSharedLibs = sharedLibL->GetEntriesFast();; 5942 for (Int_t ilib = 0; ilib < nrSharedLibs; ilib++) {; 5943 const TString sharedLibStr = ((TObjString*)sharedLibL->At(ilib))->GetString();; 5944 const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:229953,load,loaded,229953,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeConfigParameters Interface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDistr Class for Event density; TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::Ranking Method-specific ranking for input variables ; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculations for Friedman's RuleFit method; TMVA::RuleFitAPI Friedman's RuleFit method; TMVA::SVEvent Event for SVM; TMVA::SdivSqrtSplusB Implementation of the SdivSqrtSplusB as separation criterion; TMVA::SeparationBase Interface to different separation critiera used in training algorithms; TMVA::SimulatedAnnealing Base class for Simulated Annealing fitting; TMVA::SimulatedAnnealingFitter Fitter usin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:101777,Optimiz,OptimizeConfigParameters,101777,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,2,['Optimiz'],['OptimizeConfigParameters']
Performance," component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooNumRunningInt::funcProxy to functions whose running integral is calculated; RooRealProxyRooNumRunningInt::xIntergrated observable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumCdf.html:34165,cache,cache,34165,root/html530/RooNumCdf.html,https://root.cern,https://root.cern/root/html530/RooNumCdf.html,1,['cache'],['cache']
Performance," component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction4Binding_double_double_double_double_double_.html:33818,cache,cache,33818,root/html532/RooCFunction4Binding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction4Binding_double_double_double_double_double_.html,1,['cache'],['cache']
Performance," component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooRealProxy_nominalThe nominal value; RooObjCacheManager_normIntMgrThe integration cache manager; RooListProxy_normSetinterpolation parameters; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/PiecewiseInterpolation.html:34587,cache,cache,34587,root/html534/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html534/PiecewiseInterpolation.html,1,['cache'],['cache']
Performance," components; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*_dataPointer to original input dataset; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*_funcPointer to original input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_paramSetParameters of the test statistic (=parameters of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:31871,cache,cache,31871,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,3,['cache'],['cache']
Performance," composite p.d.fs.Definition RooAbsReal.cxx:1438; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate an object that represents the integral of the function over one or more observables listed in ...Definition RooAbsReal.cxx:514; RooAbsReal::ScaleTypeScaleTypeDefinition RooAbsReal.h:276; RooAbsReal::NumEvent@ NumEventDefinition RooAbsReal.h:276; RooAbsReal::Relative@ RelativeDefinition RooAbsReal.h:276; RooAbsReal::Raw@ RawDefinition RooAbsReal.h:276; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276; RooAbsReal::getValdouble getVal(const RooArgSet *normalisationSet=nullptr) constEvaluate object.Definition RooAbsReal.h:103; RooAbsReal::plotSanityChecksbool plotSanityChecks(RooPlot *frame) constUtility function for plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:157072,perform,perform,157072,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['perform'],['perform']
Performance," confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:3672,queue,queue,3672,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['queue'],['queue']
Performance," confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:3671,queue,queue,3671,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['queue'],['queue']
Performance," consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TGTable; Bool_t fAllData;  Is the data bigger than the table. ;  ; TGCanvas * fCanvas;  Canvas that will contains the cells. ;  ; UInt_t fCellHeight;  Default cell width. ;  ; UInt_t fCellWidth;  Default cell width. ;  ; TObjArray * fColumnHeaders;  Array of column headers. ;  ; TTableRange * fCurrentRange;  Range of data currently loaded. ;  ; TTableRange * fDataRange;  Full range of the data set. ;  ; TTableRange * fGotoRange;  Range used by Goto frame. ;  ; TVirtualTableInterface * fInterface;  ; Bool_t fReadOnly;  Table readonly state. ;  ; TObjArray * fRowHeaders;  Array of row headers. ;  ; TObjArray * fRows;  Array of rows. ;  ; Pixel_t fSelectColor;  Select Color. ;  ; TGTableFrame * fTableFrame;  Container for the frames. ;  ; TGTableHeader * fTableHeader;  Top left element of the table. ;  ; Int_t fTMode;  Text justify mode. ;  ; TGTableHeaderFrame * fCHdrFrame;  Frame that contains the row headers. ;  ; TGTableHeaderFrame * fRHdrFrame;  Frame that contains the row headers. ;  ; TGHorizontalFrame * fRangeFrame;  Frame that contains the top part. ;  ; TGHorizontalFrame * fTopFrame;  Frame that contains the top part. ;  ; TGHorizontalFrame * fTopExtraFrame;  Dev idea. ;  ; TGHorizontalFrame * fBottomFrame;  Frame that contains the bottom part. ;  ; TGHorizontalFrame * fButtonFram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSimpleTable.html:35005,load,loaded,35005,doc/master/classTGSimpleTable.html,https://root.cern,https://root.cern/doc/master/classTGSimpleTable.html,1,['load'],['loaded']
Performance," const & ; funcname, . Args_t const &... ; args . ). inline . Build the code to call the function with name funcname, passing some arguments. ; The arguments can either be doubles or some RooFit arguments whose results will be looked up in the context. ; Definition at line 82 of file CodeSquashContext.h. ◆ collectFunction(). void RooFit::Detail::CodeSquashContext::collectFunction ; (; std::string const & ; name). Register a function that is only know to the interpreter to the context. ; This is useful to dump the standalone C++ code for the computation graph. ; Definition at line 270 of file CodeSquashContext.cxx. ◆ endLoop(). void RooFit::Detail::CodeSquashContext::endLoop ; (; LoopScope const & ; scope). private . Definition at line 173 of file CodeSquashContext.cxx. ◆ getResult() [1/2]. std::string const & RooFit::Detail::CodeSquashContext::getResult ; (; RooAbsArg const & ; arg). Gets the result for the given node using the node name. ; This node also performs the necessary code generation through recursive calls to 'translate'. A call to this function modifies the already existing code body. Parameters. keyThe node to get the result string for. . ReturnsString representing the result of this node. ; Definition at line 53 of file CodeSquashContext.cxx. ◆ getResult() [2/2]. template<class T > . std::string const & RooFit::Detail::CodeSquashContext::getResult ; (; RooTemplateProxy< T > const & ; key). inline . Definition at line 53 of file CodeSquashContext.h. ◆ getTmpVarName(). std::string RooFit::Detail::CodeSquashContext::getTmpVarName ; (; ); const. Get a unique variable name to be used in the generated code. ; Definition at line 191 of file CodeSquashContext.cxx. ◆ isScopeIndependent(). bool RooFit::Detail::CodeSquashContext::isScopeIndependent ; (; RooAbsArg const * ; in); const. private . Definition at line 263 of file CodeSquashContext.cxx. ◆ outputSize(). std::size_t RooFit::Detail::CodeSquashContext::outputSize ; (; RooFit::Detail::DataKey ; key); const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html:13455,perform,performs,13455,doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,1,['perform'],['performs']
Performance," const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:63732,cache,cached,63732,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,2,['cache'],"['cache', 'cached']"
Performance," const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:65504,cache,cached,65504,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,20,['cache'],"['cache', 'cached']"
Performance," const Double_t *params=nullptr);  Evaluate this formula. ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  Reconstruct the formula expression from the internal TFormula member variables. ;  ; virtual const TObject * GetLinearPart (Int_t i);  Return linear part. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNumber () const;  ; Double_t GetParameter (const char *name) const;  Return value of parameter named parName. ;  ; Double_t GetParameter (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; virtual const char * GetParName (Int_t ipar) const;  Return name of one parameter. ;  ; virtual Int_t GetParNumber (const char *name) const;  Return parameter number by name. ;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsNormalized () const;  ; TFormula & operator= (const TFormula &rhs);  Operator =. ;  ; void Optimize ();  MI include. ;  ; void Print (Option_t *option="""") const override;  Dump this formula with its attributes. ;  ; virtual void ProcessLinear (TString &replaceformula);  If the formula is for linear fitting, change the title to normal and fill the LinearParts array. ;  ; virtual void SetNumber (Int_t number);  ; virtual void SetParameter (const char *name, Double_t parvalue);  Initialize parameter number ipar. ;  ; virtual void SetParameter (Int_t ipar, Double_t parvalue);  Initialize parameter number ipar. ;  ; virtual void SetParameters (const Double_t *params);  Initialize array of all parameters. ;  ; virtual void SetParameters (Double_t p0, Double_t p1, Double_t p2=0, Double_t p3=0, Double_t p4=0, Double_t p5=0, Double_t p6=0, Double_t p7=0, Double_t p8=0, Double_t p9=0, Double_t p10=0);  Initialize up to 11 parameters All arguments except THE FIRST TWO are optional In case of a function with only one parameter, call this function with p1=0. ;  ; virtual void SetParName (Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:7269,Optimiz,Optimize,7269,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['Optimiz'],['Optimize']
Performance, const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of file GSLNLSMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLNLSMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 89 of file GSLNLSMinimizer.h. ◆ ProvidesError(). bool ROOT::Math::GSLNLSMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 96 of file GSLNLSMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLNLSMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 235 of file GSLNLSMinimizer.cxx. Member Data Documentation. ◆ fCovMatrix. std::vecto,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:13592,perform,perform,13592,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,1,['perform'],['perform']
Performance," const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,int,int>&operator=(const RooCFunction2Binding<double,int,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_int_int_.html:19844,optimiz,optimizeCacheMode,19844,root/html602/RooCFunction2Binding_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_int_int_.html,2,['optimiz'],['optimizeCacheMode']
Performance," const RooArgList & ; prodSet . ). Construct function representing the product of functions in prodSet. ; Definition at line 71 of file RooProduct.cxx. ◆ RooProduct() [3/4]. RooProduct::RooProduct ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; real1, . RooAbsReal & ; real2 . ). Definition at line 84 of file RooProduct.cxx. ◆ RooProduct() [4/4]. RooProduct::RooProduct ; (; const RooProduct & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 91 of file RooProduct.cxx. ◆ ~RooProduct(). RooProduct::~RooProduct ; (; ). override . Destructor. ; Definition at line 61 of file RooProduct.cxx. Member Function Documentation. ◆ addTerm(). void RooProduct::addTerm ; (; RooAbsArg * ; term). Add a term to this product. ; Definition at line 103 of file RooProduct.cxx. ◆ analyticalIntegral(). double RooProduct::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Calculate integral internally from appropriate partial integral cache. ; Reimplemented from RooAbsReal.; Definition at line 299 of file RooProduct.cxx. ◆ binBoundaries(). std::list< double > * RooProduct::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Forward the plot sampling hint from the p.d.f. that defines the observable obs. ; Reimplemented from RooAbsReal.; Definition at line 406 of file RooProduct.cxx. ◆ calculate(). double RooProduct::calculate ; (; const RooArgList & ; partIntList); const. protected . The cache manager. ; Calculate and return product of partial terms in partIntList. ; Definition at line 320 of file RooProduct.cxx. ◆ canNodeBeCached(). CacheMode RooProduct::canNodeBeCached ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsArg.; Definition at line 63 of file RooProduct.h. ◆ categoricalComponents(). const RooArgList & RooProduct::categoricalComponents ; (; ); const. inline . Definition at line 51 of file RooProduct.h. ◆ Class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:62271,cache,cache,62271,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['cache'],['cache']
Performance," const RooArgSet & ; nset); const. protectedpure virtual . Implemented in RooIntegralMorph, RooCachedPdf, and RooFFTConvPdf. ◆ actualParameters(). virtual RooFit::OwningPtr< RooArgSet > RooAbsCachedPdf::actualParameters ; (; const RooArgSet & ; nset); const. protectedpure virtual . Implemented in RooIntegralMorph, RooCachedPdf, and RooFFTConvPdf. ◆ analyticalIntegralWN(). double RooAbsCachedPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implements internal (analytical) integration capabilities. ; Call is forwarded to RooHistPdf cache p.d.f of cache that is used for given choice of observables ; Reimplemented from RooAbsReal.; Definition at line 376 of file RooAbsCachedPdf.cxx. ◆ binningName(). virtual const char * RooAbsCachedPdf::binningName ; (; ); const. inlineprotectedvirtual . Definition at line 97 of file RooAbsCachedPdf.h. ◆ cacheNameSuffix(). std::string RooAbsCachedPdf::cacheNameSuffix ; (; const RooArgSet & ; nset); const. protected . Construct string with unique suffix for cache objects based on observable names that define cache configuration. ; Definition at line 241 of file RooAbsCachedPdf.cxx. ◆ Class(). static TClass * RooAbsCachedPdf::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCachedPdf::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCachedPdf::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 137 of file RooAbsCachedPdf.h. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooAbsCachedPdf::compileForNormSet ; (; RooArgSet const & ; normSet, . RooFit::Detail::CompileContext & ; ctx . ); const. overridevirtual . Reimplemented from RooAbsArg.; Definition at line 410 of file RooAbsCachedPdf.cxx. ◆ createCache(). virtual PdfCacheElem * RooAbsCachedPdf::createCache ; (; const RooArgSet * ; nset)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:78621,cache,cacheNameSuffix,78621,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['cache'],['cacheNameSuffix']
Performance," const RooArgSet *projectedVars=nullptr, bool scaling=true, const RooArgSet *condObs=nullptr, bool setError=true) constFill the ROOT histogram 'hist' with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:947; RooAbsReal::createScanRIRooFit::OwningPtr< RooAbsReal > createScanRI(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Utility function for createRunningIntegral that construct an object implementing the numeric scanning...Definition RooAbsReal.cxx:3810; RooAbsReal::_DEBUG_getValdouble _DEBUG_getVal(const RooArgSet *normalisationSet) constDebug version of getVal(), which is slow and does error checking.Definition RooAbsReal.cxx:4434; RooAbsReal::createFundamentalRooFit::OwningPtr< RooAbsArg > createFundamental(const char *newname=nullptr) const overrideCreate a RooRealVar fundamental object with our properties.Definition RooAbsReal.cxx:3130; RooAbsReal::plotSanityChecksbool plotSanityChecks(RooPlot *frame) constUtility function for plotOn(), perform general sanity check on frame to ensure safe plotting operatio...Definition RooAbsReal.cxx:2860; RooAbsReal::bindVarsRooFit::OwningPtr< RooAbsFunc > bindVars(const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) constCreate an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order).Definition RooAbsReal.cxx:2980; RooAbsReal::selectNormalizationvirtual void selectNormalization(const RooArgSet *depSet=nullptr, bool force=false)Interface function to force use of a given set of observables to interpret function value.Definition RooAbsReal.cxx:3360; RooAbsReal::derivativeRooDerivative * derivative(RooRealVar &obs, Int_t order=1, double eps=0.001)Return function representing first, second or third order derivative of this function.Definition RooAbsReal.cxx:3987; RooAbsReal::chi2FitTovirtual RooFit::OwningPtr< RooFitResult > chi2FitTo(RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:220667,perform,perform,220667,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['perform'],['perform']
Performance," const RooArgSet& exclLVBranches, const RooArgSet& allBranches) const; Utility function that returns true if 'object server' is a server; to exactly one of the RooAbsArgs in 'exclLVBranches'. Bool_t initNumIntegrator() const; (Re)Initialize numerical integration engine if necessary. Return kTRUE if; successful, or otherwise kFALSE. RooRealIntegral(const RooRealIntegral& other, const char* name = 0); Copy constructor. ~RooRealIntegral(); Destructor. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const. Double_t getValV(const RooArgSet* set = 0) const; Return value of object. If the cache is clean, return the; cached value, otherwise recalculate on the fly and refill; the cache. Double_t evaluate() const; Perform the integration and return the result. Double_t jacobianProduct() const; Return product of jacobian terms originating from analytical integration. Double_t sum() const; Perform summation of list of category dependents to be integrated. Double_t integrate() const; Perform hybrid numerical/analytical integration over all real-valued dependents. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCache",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealIntegral.html:39091,Perform,Perform,39091,root/html534/RooRealIntegral.html,https://root.cern,https://root.cern/root/html534/RooRealIntegral.html,3,['Perform'],['Perform']
Performance," const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Fri Dec 2 14:2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProjectedPdf.html:44168,cache,cache,44168,root/html532/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html532/RooProjectedPdf.html,1,['cache'],['cache']
Performance," const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Mon Dec 7 13:4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProjectedPdf.html:41875,cache,cache,41875,root/html526/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html526/RooProjectedPdf.html,1,['cache'],['cache']
Performance," const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Mon Jul 4 15:2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProjectedPdf.html:42911,cache,cache,42911,root/html530/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html530/RooProjectedPdf.html,1,['cache'],['cache']
Performance," const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Sat Oct 9 20:4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProjectedPdf.html:42351,cache,cache,42351,root/html528/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html528/RooProjectedPdf.html,1,['cache'],['cache']
Performance," const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Tue Jun 2 15:3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooProjectedPdf.html:47337,cache,cache,47337,root/html604/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html604/RooProjectedPdf.html,1,['cache'],['cache']
Performance," const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Tue Jun 30 14:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProjectedPdf.html:47337,cache,cache,47337,root/html602/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html602/RooProjectedPdf.html,1,['cache'],['cache']
Performance," const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Tue Mar 10 17:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProjectedPdf.html:45671,cache,cache,45671,root/html534/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html534/RooProjectedPdf.html,1,['cache'],['cache']
Performance," const RooDataSet* prototype, Double_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tisValidReal(Double_t value, Bool_t printError) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenericPdf.html:36160,optimiz,optimizeDirtyHook,36160,root/html534/RooGenericPdf.html,https://root.cern,https://root.cern/root/html534/RooGenericPdf.html,1,['optimiz'],['optimizeDirtyHook']
Performance," const RooDataSet*_prototypePrototype data set; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimGenContext(const RooSimultaneous& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); Constructor of specialized generator context for RooSimultaneous p.d.f.s. This; context creates a dedicated context for each component p.d.f.s and delegates; generation of events to the appropriate component generator context. ~RooSimGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach the index category clone to the given event buffer. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate event appropriate for current index state.; The index state is taken either from the prototype; or is generated from the fraction threshold table. void setProtoDataOrder(Int_t* lut); Set the traversal order of the prototype data to that in the; given lookup table. This information is passed to all; component generator contexts. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooSimGenContext(const RooSimultaneous& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). » Last changed: Mon Dec 7 13:49:02 2009 » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimGenContext.html:9337,Perform,Perform,9337,root/html526/RooSimGenContext.html,https://root.cern,https://root.cern/root/html526/RooSimGenContext.html,1,['Perform'],['Perform']
Performance," const RooDataSet*_prototypePrototype data set; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimGenContext(const RooSimultaneous& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); Constructor of specialized generator context for RooSimultaneous p.d.f.s. This; context creates a dedicated context for each component p.d.f.s and delegates; generation of events to the appropriate component generator context. ~RooSimGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach the index category clone to the given event buffer. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate event appropriate for current index state.; The index state is taken either from the prototype; or is generated from the fraction threshold table. void setProtoDataOrder(Int_t* lut); Set the traversal order of the prototype data to that in the; given lookup table. This information is passed to all; component generator contexts. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooSimGenContext(const RooSimultaneous& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). » Last changed: Sat Oct 9 20:48:36 2010 » Last generated: 2010-10-09 20:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimGenContext.html:9386,Perform,Perform,9386,root/html528/RooSimGenContext.html,https://root.cern,https://root.cern/root/html528/RooSimGenContext.html,1,['Perform'],['Perform']
Performance," const TMatrixDSym& cov). RooMultiVarGaussian(const char *name, const char *title,					 const RooArgList& xvec, const RooFitResult& fr). RooMultiVarGaussian(const char *name, const char *title,					 const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& cov). RooMultiVarGaussian(const char *name, const char *title,					 const RooArgList& xvec, const TMatrixDSym& cov). RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0). void syncMuVec() const. Double_t evaluate() const; Represent observables as vector. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Analytical integral known over all observables. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Handle full integral here. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Special case: generate all observables. void initGenerator(Int_t code); Clear the GenData cache as its content is not invariant under changes in; the mu vector. void generateEvent(Int_t code); Retrieve generator config from cache. void decodeCode(Int_t code, vector<int>& map1, vector<int>& map2) const; Decode analytical integration/generation code into index map of integrated/generated (map2); and non-integrated/generated observables (map1). void blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); Block decomposition of covI according to given maps of observables. RooMultiVarGaussian(); {}. void setAnaIntZ(Double_t z); { _z = z ; }. TObject* clone(const char* newname) const; { return new RooMultiVarGaussian(*this,newname); }. virtual ~RooMultiVarGaussian(); { }. const TMatrixDSym& covarianceMatrix() const; { return _cov ; }. AnaIntData& anaIntData(Int_t code) const. GenData& genData(Int_t code) const. » Last changed: Mon Dec 7 13:48:21 2009 » Last generated: 2009-12-07 13:48; This p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:41382,cache,cache,41382,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,1,['cache'],['cache']
Performance," const TMatrixT< Scalar_t > & ; weights_output, . const TMatrixT< Scalar_t > & ; weights_input_state, . const TMatrixT< Scalar_t > & ; weights_forget_state, . const TMatrixT< Scalar_t > & ; weights_candidate_state, . const TMatrixT< Scalar_t > & ; weights_output_state, . const TMatrixT< Scalar_t > & ; input, . TMatrixT< Scalar_t > & ; input_gradient, . TMatrixT< Scalar_t > & ; cell_gradient, . TMatrixT< Scalar_t > & ; cell_tanh . ). static . Backward pass for LSTM Network. ; Definition at line 86 of file RecurrentPropagation.hxx. ◆ MaxPoolLayerBackward(). template<typename AReal > . void TMVA::DNN::TReference< AReal >::MaxPoolLayerBackward ; (; TMatrixT< AReal > & ; activationGradientsBackward, . const TMatrixT< AReal > & ; activationGradients, . const TMatrixT< AReal > & ; indexMatrix, . size_t ; imgHeight, . size_t ; imgWidth, . size_t ; fltHeight, . size_t ; fltWidth, . size_t ; strideRows, . size_t ; strideCol, . size_t ; nLocalViews . ). static . Perform the complete backward propagation step in a Max Pooling Layer. ; Based on the winning indices stored in the index matrix, it just forwards the activation gradients to the previous layer. ; Definition at line 367 of file Propagation.hxx. ◆ MeanSquaredError(). template<typename AReal > . AReal TMVA::DNN::TReference< AReal >::MeanSquaredError ; (; const TMatrixT< AReal > & ; Y, . const TMatrixT< AReal > & ; output, . const TMatrixT< AReal > & ; weights . ). static . Definition at line 25 of file LossFunctions.hxx. ◆ MeanSquaredErrorGradients(). template<typename AReal > . void TMVA::DNN::TReference< AReal >::MeanSquaredErrorGradients ; (; TMatrixT< AReal > & ; dY, . const TMatrixT< AReal > & ; Y, . const TMatrixT< AReal > & ; output, . const TMatrixT< AReal > & ; weights . ). static . Definition at line 45 of file LossFunctions.hxx. ◆ MultiplyTranspose(). template<typename AReal > . void TMVA::DNN::TReference< AReal >::MultiplyTranspose ; (; TMatrixT< Scalar_t > & ; output, . const TMatrixT< Scalar_t > & ; input, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:36185,Perform,Perform,36185,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,1,['Perform'],['Perform']
Performance," const TNamed* rangeName = 0); virtual~RooRealAnalytic(); virtual list<Double_t>*RooRealBinding::binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Bool_tRooRealBinding::_clipInvalid; Int_t_code; list<RooAbsReal*>RooRealBinding::_compList!; list<Double_t>RooRealBinding::_compSave!; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*RooRealBinding::_func; Double_tRooRealBinding::_funcSave!; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*RooRealBinding::_nset; const TNamed*RooRealBinding::_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**RooRealBinding::_vars; Double_t*RooRealBinding::_xsave; Bool_tRooRealBinding::_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t operator()(const Double_t* xvector) const; Evaluate our analytic integral at the specified values of the dependents. inline RooRealAnalytic(const RooAbsReal& func, const RooArgSet& vars, Int_t code, const RooArgSet* normSet = 0, const TNamed* rangeName = 0); { }. virtual ~RooRealAnalytic(); {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealAnalytic.html:1648,load,loadValues,1648,root/html534/RooRealAnalytic.html,https://root.cern,https://root.cern/root/html534/RooRealAnalytic.html,1,['load'],['loadValues']
Performance," const char * RooEfficiency::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file RooEfficiency.h. ◆ evaluate(). double RooEfficiency::evaluate ; (; ); const. overrideprotectedvirtual . Calculate the raw value of this p.d.f which is the effFunc value if cat==1 and it is (1-effFunc) if cat==0. ; Implements RooAbsReal.; Definition at line 74 of file RooEfficiency.cxx. ◆ getAnalyticalIntegral(). int RooEfficiency::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 80 of file RooEfficiency.cxx. ◆ IsA(). TClass * RooEfficiency::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 48 of file RooEfficiency.h. ◆ Streamer(). void RooEfficiency::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooEfficiency::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file RooEfficiency.h. ◆ translate(). void RooEfficiency::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from transl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:77607,perform,performed,77607,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['perform'],['performed']
Performance," const char *TypeName(const char *s) = 0;; 242 virtual std::string ToString(const char *type, void *obj) = 0;; 243 ; 244 virtual void SnapshotMutexState(ROOT::TVirtualRWMutex* mtx) = 0;; 245 virtual void ForgetMutexState() = 0;; 246 ; 247 // All the functions below must be virtual with a dummy implementation; 248 // These functions are redefined in TCling.; 249 ; 250 // Misc; 251 virtual int DisplayClass(FILE * /* fout */,const char * /* name */,int /* base */,int /* start */) const {return 0;}; 252 virtual int DisplayIncludePath(FILE * /* fout */) const {return 0;}; 253 virtual void *FindSym(const char * /* entry */) const {return nullptr;}; 254 virtual void GenericError(const char * /* error */) const {}; 255 virtual Long_t GetExecByteCode() const {return 0;}; 256 virtual const char *GetTopLevelMacroName() const {return nullptr;};; 257 virtual const char *GetCurrentMacroName() const {return nullptr;};; 258 virtual int GetSecurityError() const{return 0;}; 259 virtual int LoadFile(const char * /* path */) const {return 0;}; 260 virtual Bool_t LoadText(const char * /* text */) const {return kFALSE;}; 261 virtual const char *MapCppName(const char*) const {return nullptr;}; 262 virtual void SetAlloclockfunc(void (*)()) const {}; 263 virtual void SetAllocunlockfunc(void (*)()) const {}; 264 virtual int SetClassAutoLoading(int) const {return 0;}; 265 int SetClassAutoloading(int a) const { return SetClassAutoLoading(a); } // Deprecated; 266 virtual int SetClassAutoparsing(int) {return 0;};; 267 virtual void SetErrmsgcallback(void * /* p */) const {}; 268 /// \brief Report diagnostics to the ROOT error handler (see TError.h).; 269 virtual void ReportDiagnosticsToErrorHandler(bool /*enable*/ = true) {}; 270 virtual void SetTempLevel(int /* val */) const {}; 271 virtual int UnloadFile(const char * /* path */) const {return 0;}; 272 ; 273 /// The created temporary must be deleted by the caller.; 274 /// Deprecated! Please use MakeInterpreterValue().; 275 TInterpreterValue *Cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:11806,Load,LoadFile,11806,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,2,['Load'],"['LoadFile', 'LoadText']"
Performance," const char * ; options = """", . Bool_t ; isRegexp = kTRUE . ). virtual . Return a space separated list of loaded shared libraries. ; Regexp is a wildcard expression, see TRegexp::MakeWildcard. This list is of a format suitable for a linker, i.e it may contain -Lpathname and/or -lNameOfLib. Option can be any of:; S: shared libraries loaded at the start of the executable, because they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; L: this option is ignored, and available for backward compatibility. . Reimplemented in TWinNTSystem.; Definition at line 2136 of file TSystem.cxx. ◆ GetLinkdefSuffix(). const char * TSystem::GetLinkdefSuffix ; (; ); const. virtual . Return the linkdef suffix chosen by the user for ACLiC. ; See TSystem::CompileMacro for more details. ; Definition at line 4001 of file TSystem.cxx. ◆ GetLinkedLibraries(). const char * TSystem::GetLinkedLibraries ; (; ). protectedvirtual . Get list of shared libraries loaded at the start of the executable. ; Returns 0 in case list cannot be obtained or in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2120 of file TSystem.cxx. ◆ GetLinkedLibs(). const char * TSystem::GetLinkedLibs ; (; ); const. virtual . Return the list of library linked to this executable. ; See TSystem::CompileMacro for more details. ; Definition at line 3992 of file TSystem.cxx. ◆ GetListOfFileHandlers(). virtual TSeqCollection * TSystem::GetListOfFileHandlers ; (; ); const. inlinevirtual . Definition at line 382 of file TSystem.h. ◆ GetListOfSignalHandlers(). virtual TSeqCollection * TSystem::GetListOfSignalHandlers ; (; ); const. inlinevirtual . Definition at line 379 of file TSystem.h. ◆ GetListOfStdExceptionHandlers(). virtual TSeqCollection * TSystem::GetListOfStdExceptionHandlers ; (; ); const. inlinevirtual . Definition at line 385 of file TSystem.h. ◆ GetListOfTimers(). virtual TList * TSystem::GetListOfTimers ; (; ); const. inlinevirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:62264,load,loaded,62264,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['load'],['loaded']
Performance," const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double calculate (const RooArgList &partIntList) const;  The cache manager. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Evaluate product of input functions. ;  ; Int_t getPartIntList (const RooArgSet *iset, const char *rangeName=nullptr) const;  Return list of (partial) integrals whose product defines the integral of this RooProduct over the observables in iset in range isetRange. ;  ; ProdMap * groupProductTerms (const RooArgSet &) const;  Group observables into subsets in which the product factorizes and that can thus be integrated separately. ;  ; void ioStreamerPass2 () override;  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; const char * makeFPName (const char *pfx, const RooArgSet &terms) const;  Construct automatic name for internal product terms. ;  ;  Protected Member Functions inherited from RooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:48085,cache,cache,48085,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['cache'],['cache']
Performance," const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:29876,perform,perform,29876,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['perform'],['perform']
Performance," const char* addCoefRangeName). ~RooAbsOptTestStatistic(); Destructor. Double_t combinedValue(RooAbsReal** gofArray, Int_t nVal) const; Method to combined test statistic results calculated into partitions into; the global result. This default implementation adds the partition return; values. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Catch server redirect calls and forward to internal clone of function. void printCompactTreeHook(ostream& os, const char* indent = """"); Catch print hook function and forward to function clone. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Driver function to propagate constant term optimizations in test statistic.; If code Activate is sent, constant term optimization will be executed.; If code Deacivate is sent, any existing constant term optimizations will; be abanoned. If codes ConfigChange or ValueChange are sent, any existing; constant term optimizations will be redone. void optimizeCaching(); This method changes the value caching logic for all nodes that depends on any of the observables; as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; with a dataset the observables are guaranteed to change with every call, thus there is no point; in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t , Bool_t = kTRUE); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:38609,optimiz,optimizations,38609,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,4,['optimiz'],['optimizations']
Performance," const char* command = 0); Int_tIgnoreInclude(const char* fname, const char* expandedfname); static Int_tIncreaseDirLevel(); static voidIndentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:10538,Load,LoadClass,10538,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['Load'],['LoadClass']
Performance," const char* cutSpec = 0, const char* cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Fri Dec 2 14:26:35 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsData.html:38534,cache,cacheClone,38534,root/html532/RooAbsData.html,https://root.cern,https://root.cern/root/html532/RooAbsData.html,1,['cache'],['cacheClone']
Performance," const char* cutSpec = 0, const char* cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Mon Dec 7 13:45:37 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:37199,cache,cacheClone,37199,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['cache'],['cacheClone']
Performance," const char* cutSpec = 0, const char* cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Mon Jul 4 15:21:21 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsData.html:38009,cache,cacheClone,38009,root/html530/RooAbsData.html,https://root.cern,https://root.cern/root/html530/RooAbsData.html,1,['cache'],['cacheClone']
Performance," const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:5632,load,loadopts,5632,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['load'],['loadopts']
Performance," const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:5853,load,loadopts,5853,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['load'],['loadopts']
Performance," const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistPdf.html:2471,Cache,CacheModeRooAbsArg,2471,root/html534/RooHistPdf.html,https://root.cern,https://root.cern/root/html534/RooHistPdf.html,1,['Cache'],['CacheModeRooAbsArg']
Performance," const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; TIterator*RooAbsCategory::typeIterator() const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tvolume(const char* rangeName) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategoryLValue.html:17410,cache,cache,17410,root/html534/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsCategoryLValue.html,1,['cache'],['cache']
Performance," const override;  ; void PaintGLAxis (const Double_t p1[3], const Double_t p2[3], Double_t wmin, Double_t wmax, Int_t ndiv, Option_t *opt="""");  Paint GL Axis. ;  ; void PaintGLAxisBody ();  Paint horizontal axis body at position (0,0,0) ;  ; void PaintGLAxisLabels ();  Paint axis labels on the main tick marks. ;  ; void PaintGLAxisTickMarks ();  Paint axis tick marks. ;  ; void SetGridLength (Double_t grid);  ; void SetLabelsAngles (Double_t a1, Double_t a2, Double_t a3);  Set labels' angles. ;  ; void SetLabelsOffset (Double_t offset);  ; void SetLabelsSize (Double_t size);  ; void SetTickMarksLength (Double_t length);  ; void SetTickMarksOrientation (Int_t tmo);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TicksPositions (Option_t *opt="""");  Compute ticks positions. ;  ; void TicksPositionsNoOpt ();  Compute ticks positions. Linear and not optimized. ;  ; void TicksPositionsOpt ();  Compute ticks positions. Linear and optimized. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAxis.html:1652,optimiz,optimized,1652,doc/master/classTGLAxis.html,https://root.cern,https://root.cern/doc/master/classTGLAxis.html,1,['optimiz'],['optimized']
Performance," const overrideTNamedvirtual; MakeClass(const TString &datasetname, const TString &methodTitle="""") constTMVA::Factoryvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; MVector typedefTMVA::Factory; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; OptimizeAllMethods(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")TMVA::Factory; OptimizeAllMethodsForClassification(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")TMVA::Factoryinline; OptimizeAllMethodsForRegression(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")TMVA::Factoryinline; Paint(Option_t *option="""")TObjectvirtual; ParseOptions()TMVA::Configurablevirtual; Pop()TObjectvirtual; Print(Option_t *option="""") const overrideTNamedvirtual; PrintHelpMessage(const TString &datasetname, const TString &methodTitle="""") constTMVA::Factory; PrintOptions() constTMVA::Configurable; Read(const char *name)TObjectvirtual; ReadOptionsFromStream(std::istream &istr)TMVA::Configurable; ReadOptionsFromXML(void *node)TMVA::Configurable; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; ResetSetFlag()TMVA::Configurableprotected; RootBaseDir()TMVA::Factoryinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetConfigDescription(const char *d)TMVA::Configurableinline; SetConfigName(const char *n)TMVA::Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory-members.html:9232,Optimiz,OptimizeAllMethodsForRegression,9232,doc/master/classTMVA_1_1Factory-members.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html,1,['Optimiz'],['OptimizeAllMethodsForRegression']
Performance," const void * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 559 of file TInterpreter.h. ◆ Load(). virtual Int_t TInterpreter::Load ; (; const char * ; filenam, . Bool_t ; system = kFALSE . ). pure virtual . Implemented in TCling. ◆ LoadEnums(). virtual void TInterpreter::LoadEnums ; (; TListOfEnums & ; cl); const. pure virtual . Implemented in TCling. ◆ LoadFile(). virtual int TInterpreter::LoadFile ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 259 of file TInterpreter.h. ◆ LoadFunctionTemplates(). virtual void TInterpreter::LoadFunctionTemplates ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ LoadLibraryMap(). virtual Int_t TInterpreter::LoadLibraryMap ; (; const char * ; rootmapfile = nullptr). pure virtual . Implemented in TCling. ◆ LoadMacro(). virtual void TInterpreter::LoadMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ LoadText(). virtual Bool_t TInterpreter::LoadText ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 260 of file TInterpreter.h. ◆ MakeInterpreterValue(). virtual std::unique_ptr< TInterpreterValue > TInterpreter::MakeInterpreterValue ; (; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 278 of file TInterpreter.h. ◆ MapCppName(). virtual const char * TInterpreter::MapCppName ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 261 of file TInterpreter.h. ◆ MethodArgInfo_DefaultValue(). virtual const char * TInterpreter::MethodArgInfo_DefaultValue ; (; MethodArgInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 516 of file TInterpreter.h. ◆ MethodArgInfo_Delete(). virtual void TInterpreter::MethodArgInfo_Delete ; (; MethodArgInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 509 of file TInterpreter.h. ◆ MethodArgInfo_Factory() [1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:79190,Load,LoadText,79190,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Load'],['LoadText']
Performance," const void * ; QualTypePtr); const. virtual . Reimplemented from TInterpreter.; Definition at line 9587 of file TCling.cxx. ◆ LazyFunctionCreatorAutoload(). void * TCling::LazyFunctionCreatorAutoload ; (; const std::string & ; mangled_name). Autoload a library based on a missing symbol. ; Definition at line 6591 of file TCling.cxx. ◆ LibraryLoaded(). void TCling::LibraryLoaded ; (; const void * ; dyLibHandle, . const char * ; canonicalName . ). Definition at line 6974 of file TCling.cxx. ◆ LibraryLoadingFailed(). bool TCling::LibraryLoadingFailed ; (; const std::string & ; errmessage, . const std::string & ; libStem, . bool ; permanent, . bool ; resolved . ). Definition at line 6568 of file TCling.cxx. ◆ LibraryUnloaded(). void TCling::LibraryUnloaded ; (; const void * ; dyLibHandle, . const char * ; canonicalName . ). Definition at line 6981 of file TCling.cxx. ◆ Load(). Int_t TCling::Load ; (; const char * ; filename, . Bool_t ; system = kFALSE . ). finalvirtual . Load a library file in cling's memory. ; if 'system' is true, the library is never unloaded. Return 0 on success, -1 on failure. ; Implements TInterpreter.; Definition at line 3515 of file TCling.cxx. ◆ LoadEnums(). void TCling::LoadEnums ; (; TListOfEnums & ; cl); const. finalvirtual . Create list of pointers to enums for TClass cl. ; Implements TInterpreter.; Definition at line 4395 of file TCling.cxx. ◆ LoadFile(). int TCling::LoadFile ; (; const char * ; path); const. finalvirtual . Load a source file or library called path into the interpreter. ; Reimplemented from TInterpreter.; Definition at line 7500 of file TCling.cxx. ◆ LoadFunctionTemplates(). void TCling::LoadFunctionTemplates ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to function templates for TClass cl. ; Implements TInterpreter.; Definition at line 4442 of file TCling.cxx. ◆ LoadLibraryMap(). Int_t TCling::LoadLibraryMap ; (; const char * ; rootmapfile = nullptr). finalvirtual . Load map between class and library. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:112705,Load,Load,112705,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Load'],['Load']
Performance," const. overridevirtual . Get the weights of the events in the range [first, first+len). ; This implementation will fill a vector with every event retrieved one by one (even if the weight is constant). Then, it returns a span. ; Implements RooAbsDataStore.; Definition at line 1197 of file RooTreeDataStore.cxx. ◆ initialize(). void RooTreeDataStore::initialize ; (; ). private . One-time initialization common to all constructor forms. ; Attach variables of internal ArgSet to the corresponding TTree branches ; Definition at line 307 of file RooTreeDataStore.cxx. ◆ IsA(). TClass * RooTreeDataStore::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsDataStore.; Definition at line 181 of file RooTreeDataStore.h. ◆ isWeighted(). bool RooTreeDataStore::isWeighted ; (; ); const. inlineoverridevirtual . Implements RooAbsDataStore.; Definition at line 74 of file RooTreeDataStore.h. ◆ loadValues() [1/2]. void RooTreeDataStore::loadValues ; (; const RooAbsDataStore * ; tds, . const RooFormulaVar * ; select = nullptr, . const char * ; rangeName = nullptr, . std::size_t ; nStart = 0, . std::size_t ; nStop = std::numeric_limits<std::size_t>::max() . ). overridevirtual . Load values from dataset 't' into this data collection, optionally selecting events using 'select' RooFormulaVar. ; Implements RooAbsDataStore.; Definition at line 470 of file RooTreeDataStore.cxx. ◆ loadValues() [2/2]. void RooTreeDataStore::loadValues ; (; const TTree * ; t, . const RooFormulaVar * ; select = nullptr, . const char * ; rangeName = nullptr, . Int_t ; nStart = 0, . Int_t ; nStop = 2000000000 . ). Load values from tree 't' into this data collection, optionally selecting events using the RooFormulaVar 'select'. ; The source tree 't' is cloned to not disturb its branch structure when retrieving information from it. ; Definition at line 367 of file RooTreeDataStore.cxx. ◆ makeTreeName(). std::string RooTreeDataStore::makeTreeName ; (; ); const. p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:33452,load,loadValues,33452,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['load'],['loadValues']
Performance," const. protected:. voidRooAbsArg::attachToStore(RooAbsDataStore& store); virtual voidRooAbsString::attachToTree(TTree& t, Int_t bufSize = 32000); virtual voidRooAbsString::attachToVStore(RooVectorDataStore&); TStringRooAbsArg::cleanBranchName() const; virtual voidRooAbsString::copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDiry = kTRUE); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual TStringRooAbsString::evaluate() const; virtual voidRooAbsString::fillTreeBranch(TTree& t); virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; virtual Bool_tRooAbsString::isValid() const; virtual Bool_tRooAbsString::isValidString(const char*, Bool_t printError = kFALSE) const; voidTObject::MakeZombie(); Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); voidRooAbsArg::printAttribList(ostream& os) const; voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); voidRooAbsArg::setProxyNormSet(const RooArgSet* nset); voidRooAbsArg::setShapeDirty(const RooAbsArg* source) const; virtual voidRooAbsString::setTreeBranchStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsString::syncCache(const RooArgSet* nset = 0); const char*RooAbsString::traceEval() const; virtual Bool_tRooAbsString::traceEvalHook(const char* value) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStringVar.html:17126,optimiz,optimizeDirtyHook,17126,root/html534/RooStringVar.html,https://root.cern,https://root.cern/root/html534/RooStringVar.html,1,['optimiz'],['optimizeDirtyHook']
Performance," const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3Binding<double,double,double,double>&operator=(const RooCFunction3Binding<double,double,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_double_.html:19922,optimiz,optimizeCacheMode,19922,root/html602/RooCFunction3Binding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_double_.html,2,['optimiz'],['optimizeCacheMode']
Performance," const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. RooAbsArg& pdfObservable(RooAbsArg& histObservable) const; { return histObservable ; }. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const. TString histNameSuffix() const; { return TString("""") ; }. void disableCache(Bool_t flag); Flag to disable caching mechanism. » Last changed: Fri Dec 2 14:26:32 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:45847,cache,cache,45847,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,3,['cache'],['cache']
Performance," const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. RooAbsArg& pdfObservable(RooAbsArg& histObservable) const; { return histObservable ; }. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const. TString histNameSuffix() const; { return TString("""") ; }. void disableCache(Bool_t flag); Flag to disable caching mechanism. » Last changed: Mon Jul 4 15:21:18 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:44591,cache,cache,44591,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,3,['cache'],['cache']
Performance," const; Return pointer to global variable with address addr. If load is true; force reading of all currently defined globals from CINT (more; expensive). TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name. If params != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return list containing all TDataTypes (typedefs) currently defined.; Since types can be added and removed during execution of the; program, we need to update the list of types every time we; execute this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:24601,load,load,24601,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,4,['load'],['load']
Performance," const; Return the reallocation method currently used. void SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); Set which memory reallocation method to use. If reallocafunc is null,; reset it to the defaul value (TStorage::ReAlloc). void SetReadMode(); Set buffer in read mode. void SetWriteMode(); Set buffer in write mode. TClass * GetClass(const type_info& typeinfo); Forward to TROOT::GetClass(). TClass * GetClass(const char* className); Forward to TROOT::GetClass(). TProcessID * ReadProcessID(UShort_t pidf); Return the current PRocessID. UShort_t WriteProcessID(TProcessID* pid); Always return 0 (current processID). void PushDataCache(TVirtualArray* ); Push a new data cache area onto the list of area to be used for; temporarily store 'missing' data members. TVirtualArray * PeekDataCache() const; Return the 'current' data cache area from the list of area to be used for; temporarily store 'missing' data members. TVirtualArray * PopDataCache(); Pop and Return the 'current' data cache area from the list of area to be used for; temporarily store 'missing' data members. TBuffer(); Default ctor. {}. TBuffer(const TBuffer& ); TBuffer objects cannot be copied or assigned. void operator=(const TBuffer& ). Int_t Read(const char* name); { return TObject::Read(name); }. Int_t Write(const char* name, Int_t opt, Int_t bufs); { return TObject::Write(name, opt, bufs); }. Int_t Write(const char* name, Int_t opt, Int_t bufs) const; { return TObject::Write(name, opt, bufs); }. Int_t GetBufferVersion() const; { return fVersion; }. Bool_t IsReading() const; { return (fMode & kWrite) == 0; }. Bool_t IsWriting() const; { return (fMode & kWrite) != 0; }. void SetBufferOffset(Int_t offset = 0); { fBufCur = fBuffer+offset; }. char * Buffer() const; { return fBuffer; }. Int_t BufferSize() const; { return fBufSize; }. void DetachBuffer(); { fBuffer = 0; }. Int_t Length() const; { return (Int_t)(fBufCur - fBuffer); }. Bool_t CheckObject(const TObject* obj). Bool_t CheckObject(const void* obj, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBuffer.html:21189,cache,cache,21189,root/html602/TBuffer.html,https://root.cern,https://root.cern/root/html602/TBuffer.html,2,['cache'],['cache']
Performance," const; Return the reallocation method currently used. void SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); Set which memory reallocation method to use. If reallocafunc is null,; reset it to the defaul value (TStorage::ReAlloc). void SetReadMode(); Set buffer in read mode. void SetWriteMode(); Set buffer in write mode. TClass * GetClass(const type_info& typeinfo); Forward to TROOT::GetClass(). TClass * GetClass(const char* className); Forward to TROOT::GetClass(). TProcessID * ReadProcessID(UShort_t pidf); Return the current PRocessID. UShort_t WriteProcessID(TProcessID* pid); Always return 0 (current processID). void PushDataCache(TVirtualArray* ); Push a new data cache area onto the list of area to be used for; temporarily store 'missing' data members. TVirtualArray * PeekDataCache() const; Return the 'current' data cache area from the list of area to be used for; temporarily store 'missing' data members. TVirtualArray * PopDataCache(); Pop and Return the 'current' data cache area from the list of area to be used for; temporarily store 'missing' data members. void operator=(const TBuffer& ). Int_t Read(const char* name); { return TObject::Read(name); }. Int_t Write(const char* name, Int_t opt, Int_t bufs); { return TObject::Write(name, opt, bufs); }. Int_t Write(const char* name, Int_t opt, Int_t bufs) const; { return TObject::Write(name, opt, bufs); }. Int_t GetBufferVersion() const; { return fVersion; }. Bool_t IsReading() const; { return (fMode & kWrite) == 0; }. Bool_t IsWriting() const; { return (fMode & kWrite) != 0; }. void SetBufferOffset(Int_t offset = 0); { fBufCur = fBuffer+offset; }. char * Buffer() const; { return fBuffer; }. Int_t BufferSize() const; { return fBufSize; }. void DetachBuffer(); { fBuffer = 0; }. Int_t Length() const; { return (Int_t)(fBufCur - fBuffer); }. Bool_t CheckObject(const TObject* obj). Bool_t CheckObject(const void* obj, const TClass* ptrClass). Int_t ReadBuf(void* buf, Int_t max). void WriteBuf(const void* buf, Int_t max). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBuffer.html:18170,cache,cache,18170,root/html528/TBuffer.html,https://root.cern,https://root.cern/root/html528/TBuffer.html,4,['cache'],['cache']
Performance," const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); voidRooAbsPdf::setNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsPdf::setTraceCounter(Int_t value, Bool_t allNodes = kFALS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:30060,cache,cache,30060,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['cache'],['cache']
Performance," const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:25275,cache,cache,25275,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,1,['cache'],['cache']
Performance," const; TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodKNNMethodKNN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); TMVA::MethodKNNMethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = NULL); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::IMethod&TMVA::IMethod::operator=(const TMVA::IMethod&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodKNN.html:8948,Optimiz,OptimizeTuningParameters,8948,root/html534/TMVA__MethodKNN.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodKNN.html,1,['Optimiz'],['OptimizeTuningParameters']
Performance," const; TMVA::MethodMLPMethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); TMVA::MethodMLPMethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); virtual Bool_tTMVA::MethodBase::MonitorBoost(TMVA::MethodBoost*); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::IMethod&TMVA::IMethod::operator=(const TMVA::IMethod&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; virtual voidTMVA::MethodANNBase::PrintNetwork() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodMLP.html:9275,Optimiz,OptimizeTuningParameters,9275,root/html530/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodMLP.html,2,['Optimiz'],['OptimizeTuningParameters']
Performance," const; TMVA::RegressionVariance&operator=(const TMVA::RegressionVariance&); TMVA::RegressionVarianceRegressionVariance(); TMVA::RegressionVarianceRegressionVariance(const TMVA::RegressionVariance& s); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringfNamename of the concrete Separation Index impementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationGain(const Double_t& nLeft, const Double_t& targetLeft, const Double_t& target2Left, const Double_t& nTot, const Double_t& targetTot, const Double_t& target2Tot); Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality crition which is optimized for when trying; to increase the information in the system; for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)); which is used as a ""separation"" index should be as small as possible.; the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms... Double_t GetSeparationIndex(const Double_t& n, const Double_t& target, const Double_t& target2); Separation Index: a simple Variance. RegressionVariance(); default constructor. {fName = ""Variance for Regression"";}. RegressionVariance(const TMVA::RegressionVariance& s); copy constructor. {}. virtual ~RegressionVariance(); destructor. {}. TString GetName(); Return the name of the concrete Index implementation. { return fName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__RegressionVariance.html:1698,optimiz,optimized,1698,root/html534/TMVA__RegressionVariance.html,https://root.cern,https://root.cern/root/html534/TMVA__RegressionVariance.html,1,['optimiz'],['optimized']
Performance," const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetListOfFunctionTemplates(); TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed::GetName() const; virtual Int_tTDirectory::GetNbytesKeys() const; Int_tGetNclasses() const; virtual Int_tTDirectory::GetNkeys() const; Int_tGetNtypes() const; virtual void*TDirectory::GetObjectChecked(const char* namecycle, const char* classname); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const TClass* cl); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual void*TDirectory::GetObjectUnchecked(const char* namecycle); virtual Option_t*TObject::GetOption() const; virtual const char*TDirectory::GetPath() const; virtual const char*TDirectory::GetPathStatic() const; TPluginManager*GetPluginManager() const; TFolder*GetRootFolder() const; virtual Long64_tTDirectory::GetSeekDir() const; virtual Long64_tTDirectory::GetSeekKeys() const; virtual L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:7857,load,load,7857,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['load'],['load']
Performance," const; static TClass*Class(); voidTGLLogicalShape::DestroyPhysicals(); virtual voidDirectDraw(TGLRnrCtx& rnrCtx) const; virtual voidTGLLogicalShape::DLCacheClear(); virtual voidDLCacheDrop(); virtual voidDLCachePurge(); virtual UInt_tTGLLogicalShape::DLOffset(Short_t) const; virtual voidTGLLogicalShape::Draw(TGLRnrCtx& rnrCtx) const; virtual voidDrawHighlight(TGLRnrCtx& rnrCtx, const TGLPhysicalShape* ps, Int_t lvl = -1) const; TObject*TGLLogicalShape::GetExternal() const; const TGLPhysicalShape*TGLLogicalShape::GetFirstPhysical() const; static TClass*TGLObject::GetGLRenderer(TClass* isa); static Bool_tTGLLogicalShape::GetIgnoreSizeForCameraInterest(); TGLScene*TGLLogicalShape::GetScene() const; TObject*TGLLogicalShape::ID() const; virtual Bool_tTGLLogicalShape::IgnoreSizeForOfInterest() const; voidTGLLogicalShape::InvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; virtual TClass*IsA() const; virtual Bool_tTGLObject::KeepDuringSmartRefresh() const; virtual voidProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); virtual Short_tTGLLogicalShape::QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; UInt_tTGLLogicalShape::Ref() const; virtual voidSetBBox(); Bool_tTGLLogicalShape::SetDLCache(Bool_t cached); static voidTGLLogicalShape::SetIgnoreSizeForCameraInterest(Bool_t isfci); virtual Bool_tSetModel(TObject* obj, const Option_t* opt = 0); virtual Bool_tTGLObject::ShouldDLCache(const TGLRnrCtx& rnrCtx) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTGLLogicalShape::StrongRef(Bool_t strong) const; voidTGLLogicalShape::SubRef(TGLPhysicalShape* phys) const; virtual TGLLogicalShape::ELODAxesTGLLogicalShape::SupportedLODAxes() const; virtual Bool_tSupportsSecondarySelect() const; TEveCaloLegoGL(); UInt_tTGLLogicalShape::UnrefFirstPhysical(); virtual voidTGLObject::UpdateBoundingBox(); voidTGLLogicalShape::UpdateBoundingBoxesOfPhysicals().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCaloLegoGL.html:1805,cache,cached,1805,root/html602/TEveCaloLegoGL.html,https://root.cern,https://root.cern/root/html602/TEveCaloLegoGL.html,2,['cache'],['cached']
Performance," const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsString.html:9385,optimiz,optimizeCacheMode,9385,root/html526/RooAbsString.html,https://root.cern,https://root.cern/root/html526/RooAbsString.html,1,['optimiz'],['optimizeCacheMode']
Performance," const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsString.html:9500,optimiz,optimizeCacheMode,9500,root/html528/RooAbsString.html,https://root.cern,https://root.cern/root/html528/RooAbsString.html,1,['optimiz'],['optimizeCacheMode']
Performance," const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsString::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); RooStringVar(); RooStringVar(const RooStringVar& other, const char* name = 0); RooStringVar(const char* name, const char* title, const char* value, Int_t size = 1024); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStringVar.html:12716,cache,cache,12716,root/html602/RooStringVar.html,https://root.cern,https://root.cern/root/html602/RooStringVar.html,2,['cache'],['cache']
Performance," const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsString::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); virtual voidTNamed::SetName(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStringVar.html:11758,cache,cache,11758,root/html526/RooStringVar.html,https://root.cern,https://root.cern/root/html526/RooStringVar.html,2,['cache'],['cache']
Performance," const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsString::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); virtual voidTNamed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStringVar.html:12129,cache,cache,12129,root/html532/RooStringVar.html,https://root.cern,https://root.cern/root/html532/RooStringVar.html,1,['cache'],['cache']
Performance," const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsString::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStringVar.html:12872,cache,cache,12872,root/html534/RooStringVar.html,https://root.cern,https://root.cern/root/html534/RooStringVar.html,1,['cache'],['cache']
Performance," const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsString::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); virtual voidTNamed::SetName(const char* name)MENU ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStringVar.html:12046,cache,cache,12046,root/html530/RooStringVar.html,https://root.cern,https://root.cern/root/html530/RooStringVar.html,1,['cache'],['cache']
Performance," const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tTSystem::Init(); virtual voidTSystem::InnerLoop(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSystem::IsAbsoluteFileName(const char* dir); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTSystem::IsFileInIncludePath(const char* name, char** fullpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTSystem::IsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intTSystem::Link(const char* from, const char* to); virtual voidTSystem::ListLibraries(const char* regexp = """"); virtual voidTSystem::ListSymbols(const char* module, const char* re = """"); virtual intTSystem::Load(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual voidTNamed::ls(Option_t* option = """") const; virtual Int_tMakeDirectory(const char* name); voidTObject::MayNotUse(const char* method) const; virtual intTSystem::mkdir(const char* name, Bool_t recursive = kFALSE); virtual Long_tTSystem::NextTimeOut(Bool_t mode); virtual Bool_tTObject::Notify(); virtual voidTSystem::NotifyApplicationCreated(); virtual TTimeTSystem::Now(); virtual intTSystem::OpenConnection(const char* server, int port, int tcpwindowsize = -1); virtual void*OpenDirectory(const char* name); virtual voidTSystem::Openlog(const char* name, Int_t options, ELogFacility facility); virtual FILE*TSystem::OpenPipe(const char* command, const char* mode); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheSystem.html:8607,Load,Load,8607,root/html526/TDCacheSystem.html,https://root.cern,https://root.cern/root/html526/TDCacheSystem.html,4,['Load'],['Load']
Performance," const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tTSystem::Init(); virtual voidTSystem::InnerLoop(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSystem::IsAbsoluteFileName(const char* dir); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTSystem::IsFileInIncludePath(const char* name, char** fullpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTSystem::IsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intTSystem::Link(const char* from, const char* to); virtual voidTSystem::ListLibraries(const char* regexp = """"); virtual voidTSystem::ListSymbols(const char* module, const char* re = """"); virtual intTSystem::Load(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual voidTNamed::ls(Option_t* option = """") const; virtual Int_tMakeDirectory(const char* name); voidTObject::MayNotUse(const char* method) const; virtual intTSystem::mkdir(const char* name, Bool_t recursive = kFALSE); virtual Long_tTSystem::NextTimeOut(Bool_t mode); virtual Bool_tTObject::Notify(); virtual voidTSystem::NotifyApplicationCreated(); virtual TTimeTSystem::Now(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual intTSystem::OpenConnection(const char* server, int port, int tcpwindowsize = -1); virtual void*OpenDirectory(const char* name); virtual voidTSystem::Openlog(const char* name, Int_t options, ELogFacility facility); virtual FILE*TSystem::OpenPipe(const char* command, const char* mode); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDCacheSystem.html:8718,Load,Load,8718,root/html530/TDCacheSystem.html,https://root.cern,https://root.cern/root/html530/TDCacheSystem.html,4,['Load'],['Load']
Performance," const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tTSystem::Init(); virtual voidTSystem::InnerLoop(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSystem::IsAbsoluteFileName(const char* dir); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTSystem::IsFileInIncludePath(const char* name, char** fullpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTSystem::IsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intTSystem::Link(const char* from, const char* to); virtual voidTSystem::ListLibraries(const char* regexp = """"); virtual voidTSystem::ListSymbols(const char* module, const char* re = """"); virtual intTSystem::Load(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual voidTNamed::ls(Option_t* option = """") const; virtual Int_tMakeDirectory(const char* name); voidTObject::MayNotUse(const char* method) const; virtual intTSystem::mkdir(const char* name, Bool_t recursive = kFALSE); virtual Long_tTSystem::NextTimeOut(Bool_t mode); virtual Bool_tTObject::Notify(); virtual voidTSystem::NotifyApplicationCreated(); virtual TTimeTSystem::Now(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual intTSystem::OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); virtual void*OpenDirectory(const char* name); virtual voidTSystem::Openlog(const char* name, Int_t options, ELogFacility facility); virtual FILE*TSystem::OpenPipe(const char* command, const char* mode); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDCacheSystem.html:8781,Load,Load,8781,root/html532/TDCacheSystem.html,https://root.cern,https://root.cern/root/html532/TDCacheSystem.html,6,['Load'],['Load']
Performance," const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tTSystem::Init(); virtual voidTSystem::InnerLoop(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSystem::IsAbsoluteFileName(const char* dir); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTSystem::IsFileInIncludePath(const char* name, char** fullpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTSystem::IsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intTSystem::Link(const char* from, const char* to); virtual voidTSystem::ListLibraries(const char* regexp = """"); virtual voidTSystem::ListSymbols(const char* module, const char* re = """"); virtual intTSystem::Load(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual voidTNamed::ls(Option_t* option = """") const; virtual Int_tMakeDirectory(const char* name); voidTObject::MayNotUse(const char* method) const; virtual intTSystem::mkdir(const char* name, Bool_t recursive = kFALSE); virtual Long_tTSystem::NextTimeOut(Bool_t mode); virtual Bool_tTObject::Notify(); virtual voidTSystem::NotifyApplicationCreated(); virtual TTimeTSystem::Now(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual intTSystem::OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); virtual void*OpenDirectory(const char* name); virtual voidTSystem::Openlog(const char* name, Int_t options, ELogFacility facility); virtual FILE*TSystem::OpenPipe(const char* command, const char* mode); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetSystem.html:10809,Load,Load,10809,root/html602/TNetSystem.html,https://root.cern,https://root.cern/root/html602/TNetSystem.html,4,['Load'],['Load']
Performance," const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; TClass * IsA () const override;  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:10482,cache,cached,10482,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,3,['cache'],['cached']
Performance," const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TWebFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Long64_t GetMaxFullCacheSize ();  Static method returning maxmimal size of full cache, which can be preserved by file instance. ;  ; static const char * GetProxy ();  Static method returning the global proxy URL. ;  ; static void SetMaxFullCacheSize (Long64_t sz);  Static method, set maxmimal size of full cache,. ;  ; static void SetProxy (const char *url);  Static method setting global proxy URL. ;  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:27126,cache,cache,27126,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['cache'],['cache']
Performance," constReturns global matrix for current node.Definition TGeoNode.cxx:1163; TGeoIterator::SetTopNamevoid SetTopName(const char *name)Set the top name for path.Definition TGeoNode.cxx:1234; TGeoIterator::GetLevelInt_t GetLevel() constDefinition TGeoNode.h:294; TGeoIterator::GetPathvoid GetPath(TString &path) constReturns the path for the current node.Definition TGeoNode.cxx:1193; TGeoIterator::SetUserPluginvoid SetUserPlugin(TGeoIteratorPlugin *plugin)Set a plugin.Definition TGeoNode.cxx:1282; TGeoIterator::Skipvoid Skip()Stop iterating the current branch.Definition TGeoNode.cxx:1243; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::GetMotherTGeoNode * GetMother(Int_t up=1) constDefinition TGeoManager.h:493; TGeoManager::FindNormalFastDouble_t * FindNormalFast()Computes fast normal to next crossed boundary, assuming that the current point is close enough to the...Definition TGeoManager.cxx:2799; TGeoManager::DoRestoreStatevoid DoRestoreState()Restore a backed-up state without affecting the cache stack.Definition TGeoManager.cxx:1106; TGeoManager::GetCurrentDirectionconst Double_t * GetCurrentDirection() constDefinition TGeoManager.h:502; TGeoManager::CdUpvoid CdUp()Go one level up in geometry.Definition TGeoManager.cxx:1681; TGeoManager::DoBackupStatevoid DoBackupState()Backup the current state without affecting the cache stack.Definition TGeoManager.cxx:1098; TGeoManager::GetListOfVolumesTObjArray * GetListOfVolumes() constDefinition TGeoManager.h:473; TGeoManager::SetMatrixReflectionvoid SetMatrixReflection(Bool_t flag=kTRUE)Definition TGeoManager.h:399; TGeoManager::cdvirtual Bool_t cd(const char *path="""")Browse the tree of nodes starting from fTopNode according to pathname.Definition TGeoManager.cxx:1707; TGeoManager::LocalToMastervoid LocalToMaster(const Double_t *local, Double_t *master) constDefinition TGeoManager.h:526; TGeoManager::GetRTmodeInt_t GetRTmode() constDefinition TGeoManager.h:440; TGeoManager::IsClosedBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:87228,cache,cache,87228,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['cache'],['cache']
Performance," constructor taking a pointer to the profile likelihood ratio, parameter of interest and; optionally a snaphot of best parameter of interest for interval. ~LikelihoodInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const; This is the main method to satisfy the RooStats::ConfInterval interface.; It returns true if the parameter point is in the interval. RooArgSet* GetParameters() const; returns list of parameters. Bool_t CheckParameters(const RooArgSet& ) const; check that the parameters are correct. Double_t LowerLimit(const RooRealVar& param); compute the interval lower limit for the specified confidence level; or size using MINOS; Note that both lower and upper limit are computed and cached internally so; any subsequent calls (for the same CL will be fast to execute). Double_t UpperLimit(const RooRealVar& param); compute the interval upper limit for the specified confidence level; or size using MINOS.; Note that both lower and upper limit are computed and cached internally so; any subsequent calls (for the same CL will be fast to execute). void ResetLimits(); reset map with cached limits - called every time the test size or CL has been changed. bool CreateMinimizer(); internal function to create minimizer object needed to find contours or interval limits; (running MINOS).; Minimizer must be Minuit or Minuit2. bool FindLimits(const RooRealVar& param, double& lower, double& upper); Method to find both lower and upper limits using MINOS; If cached values exist (limits have been already found) return them in that case. Int_t GetContourPoints(const RooRealVar& paramX, const RooRealVar& paramY, Double_t* x, Double_t* y, Int_t npoints = 30); use Minuit to find the contour of the likelihood function at the desired CL. explicit LikelihoodInterval(const char* name = 0); defult constructor. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g 0.682 for a 1-sigma interval). {fConfidenceLevel = cl; ResetLimits(); }. Double_t Confide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodInterval.html:9469,cache,cached,9469,root/html526/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodInterval.html,1,['cache'],['cached']
Performance," constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:33381,Load,Load,33381,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,4,['Load'],['Load']
Performance," constructor; 97 //virtual const char* GetName() const { return ""Factory""; }; 98 ; 99 ; 100 MethodBase* BookMethod( DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption = """" );; 101 MethodBase* BookMethod( DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption = """" );; 102 MethodBase* BookMethod( DataLoader *, TMVA::Types::EMVA /*theMethod*/,; 103 TString /*methodTitle*/,; 104 TString /*methodOption*/,; 105 TMVA::Types::EMVA /*theComposite*/,; 106 TString /*compositeOption = """"*/ ) { return nullptr; }; 107 ; 108 // optimize all booked methods (well, if desired by the method); 109 std::map<TString,Double_t> OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 110 void OptimizeAllMethodsForClassification(TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 111 void OptimizeAllMethodsForRegression (TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 112 ; 113 // training for all booked methods; 114 void TrainAllMethods ();; 115 void TrainAllMethodsForClassification( void ) { TrainAllMethods(); }; 116 void TrainAllMethodsForRegression ( void ) { TrainAllMethods(); }; 117 ; 118 // testing; 119 void TestAllMethods();; 120 ; 121 // performance evaluation; 122 void EvaluateAllMethods( void );; 123 void EvaluateAllVariables(DataLoader *loader, TString options = """" );; 124 ; 125 TH1F* EvaluateImportance( DataLoader *loader,VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption = """" );; 126 ; 127 // delete all methods and reset the method vector; 128 void DeleteAllMethods( void );; 129 ; 130 // accessors; 131 IMethod* GetMethod( const TString& datasetname, const TString& title ) const;; 132 Bool_t HasMethod( const TString& datasetname, const TString& title ) const;; 133 ; 134 Bool_t Verbose( void ) const { return fVerbose; }; 135 void SetVerbose( Bool_t v=kTRUE );; 136 ; 137 // make ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:4478,Optimiz,OptimizeAllMethods,4478,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['Optimiz'],['OptimizeAllMethods']
Performance," container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Value(); voidDeleteItem(void* ptr); Bool_tIsValid(); TGenCollectionProxy::Value&operator=(const TGenCollectionProxy::Value&); TGenCollectionProxy::Value&operator=(TGenCollectionProxy::Value&&); TGenCollectionProxy::ValueValue(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(TGenCollectionProxy::Value&&); TGenCollectionProxy::ValueValue(const string& info, Bool_t silent). Data Members; public:. UInt_tfCasetype of data of Value_type; ROOT::NewFunc_tfCtorMethod cache for containee constructor; ROOT::DelFunc_tfDeleteMethod cache for containee delete; ROOT::DesFunc_tfDtorMethod cache for containee destructor; EDataTypefKindkind of ROOT-fundamental type; UInt_tfPropertiesAdditional properties of the value type (kNeedDelete); size_tfSizefSize of the contained object; TClassReffTypeTClass reference of Value_type in collection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Value(const string& info, Bool_t silent); Constructor. Bool_t IsValid(); Return true if the Value has been properly initialized. void DeleteItem(void* ptr); Delete an item. Value(const string& info, Bool_t silent); Default copy constructor has the correct implementation.; Initializing constructor. Method & operator=(const Method& m); { call = m.call; return *this; }. Method0 & operator=(const Method0& m); { call = m.call; return *this; }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 14:59; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy__Value.html:1215,cache,cache,1215,root/html602/TGenCollectionProxy__Value.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy__Value.html,3,['cache'],['cache']
Performance," container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Value(); voidDeleteItem(void* ptr); Bool_tIsValid(); TGenCollectionProxy::Value&operator=(const TGenCollectionProxy::Value&); TGenCollectionProxy::Value&operator=(TGenCollectionProxy::Value&&); TGenCollectionProxy::ValueValue(const TGenCollectionProxy::Value&); TGenCollectionProxy::ValueValue(TGenCollectionProxy::Value&&); TGenCollectionProxy::ValueValue(const string& info, Bool_t silent). Data Members; public:. UInt_tfCasetype of data of Value_type; ROOT::NewFunc_tfCtorMethod cache for containee constructor; ROOT::DelFunc_tfDeleteMethod cache for containee delete; ROOT::DesFunc_tfDtorMethod cache for containee destructor; EDataTypefKindkind of ROOT-fundamental type; UInt_tfPropertiesAdditional properties of the value type (kNeedDelete); size_tfSizefSize of the contained object; TClassReffTypeTClass reference of Value_type in collection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Value(const string& info, Bool_t silent); Constructor. Bool_t IsValid(); Return true if the Value has been properly initialized. void DeleteItem(void* ptr); Delete an item. Value(const string& info, Bool_t silent); Default copy constructor has the correct implementation.; Initializing constructor. Method & operator=(const Method& m); { call = m.call; return *this; }. Method0 & operator=(const Method0& m); { call = m.call; return *this; }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGenCollectionProxy__Value.html:1215,cache,cache,1215,root/html604/TGenCollectionProxy__Value.html,https://root.cern,https://root.cern/root/html604/TGenCollectionProxy__Value.html,3,['cache'],['cache']
Performance," containing the cumulative The; cumulative can be computed both in the forward (default) or backward; direction; the name of the new histogram is constructed from; the name of this histogram with the suffix suffix appended. The cumulative distribution is formed by filling each bin of the; resulting histogram with the sum of that bin and all previous; (forward == kTRUE) or following (forward = kFALSE) bins. note: while cumulative distributions make sense in one dimension, you; may not be getting what you expect in more than 1D because the concept; of a cumulative distribution is much trickier to define; make sure you; understand the order of summation before you use this method with; histograms of dimension >= 2. void Copy(TObject& hnew) const; Copy this histogram structure to newth1. Note that this function does not copy the list of associated functions.; Use TObject::Clone to make a full copy of an histogram. TObject* Clone(const char* newname = 0) const; Make a clone of an object bur for performance we are not using the; Streamer facility for TH1 and derived. Instead we rely on the; (required) implementation of Copy. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. Bool_t Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:62676,perform,performance,62676,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,1,['perform'],['performance']
Performance," content; (see TProfile3D::GetBinError). Int_t BufferEmpty(Int_t action = 0); Fill histogram with all entries in the buffer.; action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is filled from the buffer; action = 1 histogram is filled and buffer is deleted; The buffer is automatically deleted when the number of entries; in the buffer is greater than the number of entries in the histogram. Int_t BufferFill(Double_t x, Double_t y, Double_t z, Double_t t, Double_t w); accumulate arguments in buffer. When buffer is full, empty the buffer; fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry; fBuffer[3] = y of first entry; fBuffer[4] = z of first entry; fBuffer[5] = t of first entry. void Copy(TObject& hnew) const; -*-*-*-*Copy a Profile3D histogram to a new profile2D histogram; *-* =======================================================. void Divide(TF1* h1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1). void Divide(const TH1* h1); Divide this profile2D by h1*-*-; *-* ===========================. this = this/h1. void Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*Replace contents of this profile2D by the division of h1 by h2; *-* ==============================================================. this = c1*h1/(c2*h2). TH1 * DrawCopy(Option_t* option = """") const; Draw a copy of this profile3D histogram*-*-*-; *-* =======================================. Int_t Fill(Double_t x, Double_t y, Double_t z, Double_t t); -*-*-*Fill a Profile3D histogram (no weights); *-* =======================================. Int_t Fill(Double_t x, Double_t y, Double_t z, Double_t t, Double_t w); -*-*-*Fill a Profile3D histogram with weights; *-* =======================================. Double_t GetBinContent(Int_t bin) const; Return bin content of a Profile3D histogram*-*-; *-* ==========================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:33621,Perform,Performs,33621,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,3,['Perform'],['Performs']
Performance," contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:37391,cache,cache,37391,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,1,['cache'],['cache']
Performance," contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:37773,cache,cache,37773,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,2,['cache'],['cache']
Performance," coordinates and a corresponding value/weight with optionally an error on the value or the coordinate and the ROOT::Fit::UnBinData for un-binned data sets, which consists only of a vector of coordinate values. The coordinate values can be one-dimensional (i.e. one entry per event) or multi-dimensional (N entries per event).; Function classes defining the type of fit (the objective function used for fitting):. ROOT::Fit::Chi2FCN for chi2 (least-square fits),; ROOT::Fit::PoissonLikelihoodFCN for binned likelihood fits of histograms,; ROOT::Fit::LogLikelihoodFCN for generic un-binned likelihood fits. These classes are templated on the type of function interface they implement (see later). User convenient typedefs are also provided. They derive from the common generic interface multi-dimensional for function evaluation, ROOT::Math::IBaseFunctionMultiDim. In addition the fitter classes make uses of the generic interfaces for parametric function evaluations, ROOT::Math::IParametricFunctionMultiDim to define the fit model function and use the ROOT::Math::Minimizer interface to perform the minimization of the objective function. More information about the function interface and the multi-dimensional minimization in ROOT is given in the Mathematical Library chapter.; Here we present a detailed description of the ROOT::Fit classes and how to use them. Using these classes instead of the interface provided directly in the ROOT data objects, like TH1::Fit allow are more fine control to configure and customise the fits. For example, using these classes a combined fit of several histograms can be performed.; To understand how these class work, let’s go through a simple example, such as fitting an histogram.; When fitting an histogram, instead of using TH1::Fit we will show in the following hot wo use the ROOT::Fit classes. We will show how to perform the following different type of fits with the histogram data: * a least square fit using the observed errors (Neyman chi-squared); *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:189986,perform,perform,189986,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['perform']
Performance," corner. Marker sizes smaller than 1 can be; specified. The marker size does not refer to any coordinate systems, it is an; absolute value. Therefore the marker size is not affected by any change ; in TPad's scale.; The marker size of any class inheriting from TAttMarker can ; be changed using the method SetMarkerSize and retrieved using the ; method GetMarkerSize. Picture; Source. {; c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; TMarker marker;; marker.SetMarkerStyle(3);; Double_t x = 0;; Double_t dx = 1/6.0;; for (Int_t i=1; i<6; i++) {; x += dx;; marker.SetMarkerSize(i*0.2); marker.DrawMarker(x,.165);; marker.SetMarkerSize(i*0.8); marker.DrawMarker(x,.495);; marker.SetMarkerSize(i*1.0); marker.DrawMarker(x,.835);; }; return c;; }. Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They ; are meant to be very fast to draw and are always drawn with the same number of; pixels; therefore SetMarkerSize does not apply on them. To have a ; ""scalable dot"" a filled circle should be used instead, i.e. the marker style; number 20. By default (if SetMarkerStyle is not specified), the marker ; style used is 1. That's the most common one to draw scatter plots.; . Function Members (Methods); public:. TAttMarker(); TAttMarker(const TAttMarker&); TAttMarker(Color_t color, Style_t style, Size_t msize); virtual~TAttMarker(); static TClass*Class(); voidCopy(TAttMarker& attmarker) const; virtual Color_tGetMarkerColor() const; virtual Size_tGetMarkerSize() const; virtual Style_tGetMarkerStyle() const; virtual TClass*IsA() const; virtual voidModify(); TAttMarker&operator=(const TAttMarker&); virtual voidResetAttMarker(Option_t* toption = """"); virtual voidSaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSetMarkerAttributes()MENU ; virtual voidSetMarkerColor(Color_t tcolor = 1); virtual voidSetMarkerSize(Size_t msize = 1); virtual voidSetMarkerStyle(Style_t mstyle = 1); virtual voidShowMemb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttMarker.html:3228,scalab,scalable,3228,root/html526/TAttMarker.html,https://root.cern,https://root.cern/root/html526/TAttMarker.html,1,['scalab'],['scalable']
Performance," corresponding TTree branches ; Definition at line 307 of file RooTreeDataStore.cxx. ◆ IsA(). TClass * RooTreeDataStore::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsDataStore.; Definition at line 181 of file RooTreeDataStore.h. ◆ isWeighted(). bool RooTreeDataStore::isWeighted ; (; ); const. inlineoverridevirtual . Implements RooAbsDataStore.; Definition at line 74 of file RooTreeDataStore.h. ◆ loadValues() [1/2]. void RooTreeDataStore::loadValues ; (; const RooAbsDataStore * ; tds, . const RooFormulaVar * ; select = nullptr, . const char * ; rangeName = nullptr, . std::size_t ; nStart = 0, . std::size_t ; nStop = std::numeric_limits<std::size_t>::max() . ). overridevirtual . Load values from dataset 't' into this data collection, optionally selecting events using 'select' RooFormulaVar. ; Implements RooAbsDataStore.; Definition at line 470 of file RooTreeDataStore.cxx. ◆ loadValues() [2/2]. void RooTreeDataStore::loadValues ; (; const TTree * ; t, . const RooFormulaVar * ; select = nullptr, . const char * ; rangeName = nullptr, . Int_t ; nStart = 0, . Int_t ; nStop = 2000000000 . ). Load values from tree 't' into this data collection, optionally selecting events using the RooFormulaVar 'select'. ; The source tree 't' is cloned to not disturb its branch structure when retrieving information from it. ; Definition at line 367 of file RooTreeDataStore.cxx. ◆ makeTreeName(). std::string RooTreeDataStore::makeTreeName ; (; ); const. private . Generate a name for the storage tree from the name and title of this instance. ; Definition at line 1185 of file RooTreeDataStore.cxx. ◆ merge(). RooAbsDataStore * RooTreeDataStore::merge ; (; const RooArgSet & ; allVars, . std::list< RooAbsDataStore * > ; dstoreList . ). overridevirtual . Merge columns of supplied data set(s) with this data set. ; All data sets must have equal number of entries. In case of duplicate columns the column of the last dataset in the list ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:33939,load,loadValues,33939,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['load'],['loadValues']
Performance," cpuinfo->fSys = ((Float_t)(100 * systicks)) / ((Float_t)totalticks);; 5209 cpuinfo->fTotal = cpuinfo->fUser + cpuinfo->fSys;; 5210 cpuinfo->fIdle = ((Float_t)(100 * idleticks)) / ((Float_t)totalticks);; 5211 }; 5212}; 5213 ; 5214////////////////////////////////////////////////////////////////////////////////; 5215/// Get VM stat for Linux.; 5216 ; 5217static void GetLinuxMemInfo(MemInfo_t *meminfo); 5218{; 5219 TString s;; 5220 FILE *f = fopen(""/proc/meminfo"", ""r"");; 5221 if (!f) return;; 5222 while (s.Gets(f)) {; 5223 if (s.BeginsWith(""MemTotal"")) {; 5224 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5225 meminfo->fMemTotal = (s.Atoi() / 1024);; 5226 }; 5227 if (s.BeginsWith(""MemFree"")) {; 5228 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5229 meminfo->fMemFree = (s.Atoi() / 1024);; 5230 }; 5231 if (s.BeginsWith(""MemAvailable"")) {; 5232 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5233 meminfo->fMemAvailable = (s.Atoi() / 1024);; 5234 }; 5235 if (s.BeginsWith(""Cached"")) {; 5236 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5237 meminfo->fMemCached = (s.Atoi() / 1024);; 5238 }; 5239 if (s.BeginsWith(""Buffers"")) {; 5240 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5241 meminfo->fMemBuffer = (s.Atoi() / 1024);; 5242 }; 5243 if (s.BeginsWith(""Shmem"")) {; 5244 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5245 meminfo->fMemShared = (s.Atoi() / 1024);; 5246 }; 5247 if (s.BeginsWith(""SwapTotal"")) {; 5248 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5249 meminfo->fSwapTotal = (s.Atoi() / 1024);; 5250 }; 5251 if (s.BeginsWith(""SwapFree"")) {; 5252 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5253 meminfo->fSwapFree = (s.Atoi() / 1024);; 5254 }; 5255 if (s.BeginsWith(""SwapCached"")) {; 5256 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5257 meminfo->fSwapCached = (s.Atoi() / 1024);; 5258 }; 5259 if (s.BeginsWith(""SReclaimable"")) {; 5260 TPRegexp(""^.+: *([^ ]+).*"").Substitute(s, ""$1"");; 5261 meminfo->fSReclaimable = (s.Atoi() / 1024);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:169424,Cache,Cached,169424,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['Cache'],['Cached']
Performance," create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicted UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesting too many UUIDs within a single; system clock tick, the UUID generator will stall until the; system clock catches up. Function Members (Methods); public:. TUUID(); TUUID(const char* uuid_str); TUUID(const TUUID&); virtual~TUUID(); const char*AsString() const; static TClass*Class(); Int_tCompare(const TUUID& u) const; voidFillBuffer(char*& buffer); TInetAddressGetHostAddress() const; TDatimeGetTime() const; voidGetUUID(UChar_t* uuid) const; UInt_tGetUUIDNumber() const; UShort_tHash() const; virtual TClass*IsA() const; TUUID&operator=(const TUUID&); voidPrint() const; voidReadBuffer(char*& buffer); voidSetUUID(const char* uuid_str); voidSetUUIDNumber(UInt_t index); virtual voidShowMembers(TMemberInspector& insp); Int_tSizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidStreamerV1(TBuffer& b). protected:. Int_tCmpTime(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUUID.html:3230,perform,performance,3230,root/html528/TUUID.html,https://root.cern,https://root.cern/root/html528/TUUID.html,3,['perform'],['performance']
Performance," create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicted UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesting too many UUIDs within a single; system clock tick, the UUID generator will stall until the; system clock catches up. Function Members (Methods); public:. TUUID(); TUUID(const char* uuid_str); TUUID(const TUUID&); virtual~TUUID(); const char*AsString() const; static TClass*Class(); Int_tCompare(const TUUID& u) const; voidFillBuffer(char*& buffer); TInetAddressGetHostAddress() const; TDatimeGetTime() const; voidGetUUID(UChar_t* uuid) const; UInt_tGetUUIDNumber() const; UShort_tHash() const; virtual TClass*IsA() const; TUUID&operator=(const TUUID&); voidPrint() const; voidReadBuffer(char*& buffer); voidSetUUID(const char* uuid_str); voidSetUUIDNumber(UInt_t index); virtual voidShowMembers(TMemberInspector&); Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidStreamerV1(TBuffer& b). protec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUUID.html:3230,perform,performance,3230,root/html534/TUUID.html,https://root.cern,https://root.cern/root/html534/TUUID.html,1,['perform'],['performance']
Performance," create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicted UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesting too many UUIDs within a single; system clock tick, the UUID generator will stall until the; system clock catches up. Function Members (Methods); public:. virtual~TUUID(); const char*AsString() const; static TClass*Class(); Int_tCompare(const TUUID& u) const; voidFillBuffer(char*& buffer); TInetAddressGetHostAddress() const; TDatimeGetTime() const; voidGetUUID(UChar_t[16] uuid) const; UInt_tGetUUIDNumber() const; UShort_tHash() const; virtual TClass*IsA() const; TUUID&operator=(const TUUID&); voidPrint() const; voidReadBuffer(char*& buffer); voidSetUUID(const char* uuid_str); voidSetUUIDNumber(UInt_t index); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidStreamerV1(TBuffer& b); TUUID(); TUUID(const char* uuid_str); TUUID(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUUID.html:3254,perform,performance,3254,root/html602/TUUID.html,https://root.cern,https://root.cern/root/html602/TUUID.html,2,['perform'],['performance']
Performance," create an index using leaves Run and Event; tree.BuildIndex(""Run"",""Event"");; // to read entry corresponding to Run=1234 and Event=56789; tree.GetEntryWithIndex(1234,56789);; Note that majorname and minorname may be expressions using original tree variables e.g.: “run-90000”, “event +3*xx”. In case an expression is specified, the equivalent expression must be computed when calling GetEntryWithIndex(). To build an index with only majorname, specify minorname=""0"" (default).; Note that once the index is built, it can be saved with the TTree object with:; tree.Write(); //if the file has been open in ""update"" mode; The most convenient place to create the index is at the end of the filling process just before saving the tree header. If a previous index was computed, it is redefined by this new call.; Note that this function can also be applied to a TChain. The return value is the number of entries in the Index (< 0 indicates failure).; 12.8 Branches; The organization of branches allows the designer to optimize the data for the anticipated use. The class for a branch is called TBranch. If two variables are independent, and the designer knows the variables will not be used together, they should be placed on separate branches. If, however, the variables are related, such as the coordinates of a point, it is most efficient to create one branch with both coordinates on it. A variable on a TBranch is called a leaf (yes - TLeaf). Another point to keep in mind when designing trees is that branches of the same TTree can be written to separate files. To add a TBranch to a TTree we call the method TTree::Branch(). Note that we DO NOT use the TBranch constructor.; The TTree::Branch method has several signatures. The branch type differs by what is stored in it. A branch can hold an entire object, a list of simple variables, contents of a folder, contents of a TList, or an array of objects. Let’s see some examples. To follow along you will need the shared library libEvent.so. First, ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:536432,optimiz,optimize,536432,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['optimiz'],['optimize']
Performance," created with bounds [-10,10]; [#1] INFO:Eval -- RooRealVar::setRange(y) new range named 'fit_nll_model_modelData' created with bounds [-10,0]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_model_modelData_SB1' created with bounds [-10,10]; [#1] INFO:Eval -- RooRealVar::setRange(y) new range named 'fit_nll_model_modelData_SB1' created with bounds [-10,0]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_model_modelData_SB2' created with bounds [-10,0]; [#1] INFO:Eval -- RooRealVar::setRange(y) new range named 'fit_nll_model_modelData_SB2' created with bounds [0,10]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf312__multirangefit_8C.html:6787,optimiz,optimization,6787,doc/master/rf312__multirangefit_8C.html,https://root.cern,https://root.cern/doc/master/rf312__multirangefit_8C.html,2,['optimiz'],['optimization']
Performance," creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. Int_t AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38320,cache,cache,38320,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the ele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html:2450,cache,cached,2450,doc/master/classTStreamerObjectAnyPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html,2,['cache'],['cached']
Performance," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTrans",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObject.html:2252,cache,cached,2252,doc/master/classTStreamerObject.html,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html,2,['cache'],['cached']
Performance," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerString.html:2145,cache,cached,2145,doc/master/classTStreamerString.html,https://root.cern,https://root.cern/doc/master/classTStreamerString.html,1,['cache'],['cached']
Performance," current buffer); if option =""*"" includes all sub-branches of this branch too. Long64_t GetZipBytes(Option_t* option = """") const; Return total number of zip bytes in the branch; if option =""*"" includes all sub-branches of this branch too. Bool_t IsAutoDelete() const; Return kTRUE if an existing object in a TBranchObject must be deleted. Bool_t IsFolder() const; Return kTRUE if more than one leaf or browsables, kFALSE otherwise. void KeepCircular(Long64_t maxEntries); keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(); Baskets associated to this branch are forced to be in memory.; You can call TTree::SetMaxVirtualSize(maxmemory) to instruct; the system that the total size of the imported baskets does not; exceed maxmemory bytes.; The function returns the number of baskets that have been put in memory.; This method may be called to force all baskets of one or more branches; in memory when random access to entries in this branch is required.; See also TTree::LoadBaskets to load all baskets of all branches in memory. void Print(Option_t* option = """") const; Print TBranch parameters. void ReadBasket(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeaves(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void Refresh(TBranch* b); refresh this branch using new information in b; This function is called by TTree::Refresh. void Reset(Option_t* option = """"); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Reset the address of the branch. void ResetCount(); Static function resetting fgCount. void SetAddress(void* add); Set address of this branch. void SetAutoDelete(Bool_t autodel = kTRUE); Set the automatic delete bit. This bit is used by TBranchObject::ReadBasket to decide if an object; referenced by a TBranchObject must be deleted or not before reading; a new entry. If autodel is kTRUE, this existing object will be deleted, a new object; created by the default const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranch.html:21122,Load,LoadBaskets,21122,root/html526/TBranch.html,https://root.cern,https://root.cern/root/html526/TBranch.html,2,"['Load', 'load']","['LoadBaskets', 'load']"
Performance," current buffer); if option =""*"" includes all sub-branches of this branch too. Long64_t GetZipBytes(Option_t* option = """") const; Return total number of zip bytes in the branch; if option =""*"" includes all sub-branches of this branch too. Bool_t IsAutoDelete() const; Return kTRUE if an existing object in a TBranchObject must be deleted. Bool_t IsFolder() const; Return kTRUE if more than one leaf or browsables, kFALSE otherwise. void KeepCircular(Long64_t maxEntries); keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(); Baskets associated to this branch are forced to be in memory.; You can call TTree::SetMaxVirtualSize(maxmemory) to instruct; the system that the total size of the imported baskets does not; exceed maxmemory bytes.; The function returns the number of baskets that have been put in memory.; This method may be called to force all baskets of one or more branches; in memory when random access to entries in this branch is required.; See also TTree::LoadBaskets to load all baskets of all branches in memory. void Print(Option_t* option = """") const; Print TBranch parameters. void ReadBasket(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeavesImpl(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeaves0Impl(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeaves1Impl(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeaves2Impl(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void Refresh(TBranch* b); refresh this branch using new information in b; This function is called by TTree::Refresh. void Reset(Option_t* option = """"); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Reset the address of the branch. void ResetCount(); Static function resetting fgCount. void SetAddress(void* add); Set address of this branch. void SetAutoDelete(Bool_t autodel = kTRUE); Set th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranch.html:24225,Load,LoadBaskets,24225,root/html530/TBranch.html,https://root.cern,https://root.cern/root/html530/TBranch.html,2,"['Load', 'load']","['LoadBaskets', 'load']"
Performance," current buffer); if option =""*"" includes all sub-branches of this branch too. Long64_t GetZipBytes(Option_t* option = """") const; Return total number of zip bytes in the branch; if option =""*"" includes all sub-branches of this branch too. Bool_t IsAutoDelete() const; Return kTRUE if an existing object in a TBranchObject must be deleted. Bool_t IsFolder() const; Return kTRUE if more than one leaf or browsables, kFALSE otherwise. void KeepCircular(Long64_t maxEntries); keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(); Baskets associated to this branch are forced to be in memory.; You can call TTree::SetMaxVirtualSize(maxmemory) to instruct; the system that the total size of the imported baskets does not; exceed maxmemory bytes.; The function returns the number of baskets that have been put in memory.; This method may be called to force all baskets of one or more branches; in memory when random access to entries in this branch is required.; See also TTree::LoadBaskets to load all baskets of all branches in memory. void Print(Option_t* option = """") const; Print TBranch parameters. void ReadBasket(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeavesImpl(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeaves0Impl(TBuffer& b); Read zero leaves without the overhead of a loop. void ReadLeaves1Impl(TBuffer& b); Read one leaf without the overhead of a loop. void ReadLeaves2Impl(TBuffer& b); Read two leaves without the overhead of a loop. void FillLeavesImpl(TBuffer& b); Loop on all leaves of this branch to fill Basket buffer. void Refresh(TBranch* b); refresh this branch using new information in b; This function is called by TTree::Refresh. void Reset(Option_t* option = """"); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Reset the ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBranch.html:21903,Load,LoadBaskets,21903,root/html532/TBranch.html,https://root.cern,https://root.cern/root/html532/TBranch.html,8,"['Load', 'load']","['LoadBaskets', 'load']"
Performance," current buffer); if option =""*"" includes all sub-branches of this branch too. Long64_t GetZipBytes(Option_t* option = """") const; Return total number of zip bytes in the branch; if option =""*"" includes all sub-branches of this branch too. Bool_t IsAutoDelete() const; Return kTRUE if an existing object in a TBranchObject must be deleted. Bool_t IsFolder() const; Return kTRUE if more than one leaf or browsables, kFALSE otherwise. void KeepCircular(Long64_t maxEntries); keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(); Baskets associated to this branch are forced to be in memory.; You can call TTree::SetMaxVirtualSize(maxmemory) to instruct; the system that the total size of the imported baskets does not; exceed maxmemory bytes.; The function returns the number of baskets that have been put in memory.; This method may be called to force all baskets of one or more branches; in memory when random access to entries in this branch is required.; See also TTree::LoadBaskets to load all baskets of all branches in memory. void Print(Option_t* option = """") const; Print TBranch parameters. void ReadBasket(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void ReadLeavesImpl(TBuffer& b); Loop on all leaves of this branch to read Basket buffer. void Refresh(TBranch* b); refresh this branch using new information in b; This function is called by TTree::Refresh. void Reset(Option_t* option = """"); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Reset the address of the branch. void ResetCount(); Static function resetting fgCount. void SetAddress(void* add); Set address of this branch. void SetAutoDelete(Bool_t autodel = kTRUE); Set the automatic delete bit. This bit is used by TBranchObject::ReadBasket to decide if an object; referenced by a TBranchObject must be deleted or not before reading; a new entry. If autodel is kTRUE, this existing object will be deleted, a new object; created by the default c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:22119,Load,LoadBaskets,22119,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,2,"['Load', 'load']","['LoadBaskets', 'load']"
Performance," cut or copy it to the clipboard. A subsequent paste operation will insert the contents of the clipboard at the current cursor location.; Text Search; The editor uses a standard Search dialog. You can specify a forward or backward search direction starting from the current cursor location according to the selection made of a case sensitive mode or not. The last search can be repeated by pressing F3.; Text Font; You can change the text font by selecting Edit menu / Set Font. The Font Dialog pops up and shows the Name, Style, and Size of any available font. The selected font sample is shown in the preview area.; Executing Macros; You can execute the currently loaded macro in the editor by selecting Tools menu / Execute Macro; by clicking on the corresponding toolbar button, or by using Ctrl+F5 accelerator keys. This is identical to the command "".x macro.C"" in the root prompt command line.; Compiling Macros; The currently loaded macro can be compiled with ACLiC if you select Tools menu / Compile Macro; by clicking on the corresponding toolbar button, or by using Ctrl+F7 accelerator keys. This is identical to the command "".L macro.C++"" in the root prompt command line.; Interrupting a Running Macro; You can interrupt a running macro by selecting the Tools menu / Interrupt; by clicking on the corresponding toolbar button, or by using Shift+F5 accelerator keys.; Interface to CINT Interpreter; Any command entered in the Command combo box will be passed to the CINT interpreter. This combo box will keep the commands history and will allow you to re-execute the same commands during an editor session.; Keyboard Bindings; The following table lists the keyboard shortcuts and accelerator keys. Key: Action . Up Move cursor up. . Shift+Up Move cursor up and extend selection. . Down Move cursor down. . Shift+Down Move cursor down and extend selection. . Left Move cursor left. . Shift+Left Move cursor left and extend selection. . Right Move cursor right. . Shift+Right Move cursor righ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:2727,load,loaded,2727,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,1,['load'],['loaded']
Performance," cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. StorageType getDefaultStorageType(). RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Sat Sep 5 16:39:53 2015 » Last generated: 2015-09-05 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:38838,cache,cacheClone,38838,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,1,['cache'],['cacheClone']
Performance," cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return covarianceMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* correlationMatrix(const char* cutSpec = 0, const char* cutRange = 0) const; { return correlationMatrix(*get(),cutSpec,cutRange) ; }. TMatrixDSym* covarianceMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kFALSE) ; }. TMatrixDSym* correlationMatrix(const RooArgList& vars, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcovMatrix(vars,cutSpec,cutRange,kTRUE) ; }. StorageType getDefaultStorageType(). RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0). RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE). » Last changed: Sat Sep 5 17:28:32 2015 » Last generated: 2015-09-05 17:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsData.html:40612,cache,cacheClone,40612,root/html604/RooAbsData.html,https://root.cern,https://root.cern/root/html604/RooAbsData.html,1,['cache'],['cacheClone']
Performance," d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTMVA::MethodBase::SetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMaxDepth(Int_t d); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidSetNodeMinEvents(Int_t d); voidSetNodePurityLimit(Double_t l); voidSetNTrees(Int_t d); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidSetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); Double_tTestTreeQuality(TMVA::DecisionTree* dt); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBDT.html:15750,tune,tuneParameters,15750,root/html530/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBDT.html,2,['tune'],['tuneParameters']
Performance," dCache server (for more on the dCache daemon see http://www-dcache.desy.de/ ;  CTDCacheSystem;  CTDecayChannel;  CTDecompBase;  CTDecompBK;  CTDecompChol;  CTDecompLU;  CTDecompQRH;  CTDecompSparse;  CTDecompSVD;  CTDialogCanvasA canvas specialized to set attributes ;  CTDiamondDraw a Diamond ;  CTDictAttributeMapThe ROOT object has a list of properties which are stored and retrieved using TDictAttributeMap ;  CTDictionaryThis class defines an abstract interface that must be implemented by all classes that contain dictionary information ;  ►CTDirectoryDescribe directory structure in memory ;  CTContext;  CTDirectoryFileA ROOT file is structured in Directories (like a file system) ;  CTDNDData;  CTDocDirective;  CTDocHtmlDirective;  CTDocLatexDirective;  CTDocMacroDirective;  CTDocMethodWrapper;  CTDocOutput;  CTDocParser;  CTDOMParser;  CTDrawFeedback;  CTDSet;  CTDSetElement;  CTDSetProxy;  CTDsKey;  CTEditQueryFrame;  CTEfficiencyClass to handle efficiency histograms ;  CTElementActionT;  CTElementPosActionT;  CTEllipseDraw Ellipses ;  CTELTUA cylinder with an elliptical section ;  CtemplateSmall helper to implement the function to create,access and destroy iterators ;  CtemplateSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CTEmulatedCollectionProxyStreamer around an arbitrary STL like container, which implements basic container functionality ;  CTEmulatedMapProxyStreamer around a map container ;  CTEntryListA List of entry numbers in a TTree or TChain ;  CTEntryListArrayA list of entries and subentries in a TTree or TChain ;  CTEntryListBlockUsed by TEntryList to store the entry numbers ;  CTEntryListFromFileManages entry lists from different files, when they are not loaded in memory at the same time ;  CTEnumImplements the enum type ;  CTEnumConstantImplements the constants of the enum type ;  CTEnvReads config files, by default named .rootrc ;  CTEnvRec;  CTestDialog;  CTestMainFrame;  CTestMsgBox;  CTestPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:98279,load,loaded,98279,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['load'],['loaded']
Performance," data from the client. ;  ; void SaveCreatedFile (std::string &reply);  Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ;  . Private Attributes; RCanvas & fCanvas;  ! Canvas we are painting, *this will be owned by canvas ;  ; std::list< std::shared_ptr< WebCommand > > fCmds;  ! list of submitted commands ;  ; uint64_t fCmdsCnt {0};  ! commands counter ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; int fJsonComp {23};  ! json compression for data send to client ;  ; uint64_t fSnapshotDelivered {0};  ! minimal version delivered to all connections ;  ; std::list< WebUpdate > fUpdatesLst;  ! list of callbacks for canvas update ;  ; std::list< WebConn > fWebConn;  !< configured display ;  ; std::shared_ptr< ROOT::RWebWindow > fWindow;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . Inheritance diagram for ROOT::Experimental::RCanvasPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MenuItemsVector. typedef std::vector<Detail::RMenuItem> ROOT::Experimental::RCanvasPainter::MenuItemsVector. private . Definition at line 107 of file RCanvasPainter.cxx. Constructor & Destructor Documentation. ◆ RCanvasPainter() [1/2]. ROOT::Experimental::RCanvasPainter::RCanvasPainter ; (; const RCanvasPainter & ; ). privatedelete . Disable copy construction. . ◆ RCanvasPainter() [2/2]. RCanvasPainter::RCanvasPainter ; (; RCanvas & ; canv). Constructor. ; Definition at line 219 of file RCanvasP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:4734,Load,Loads,4734,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,1,['Load'],['Loads']
Performance," data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBrentRootFinder. class RooBrentRootFinder: public RooAbsRootFinder. Implement the abstract 1-dimensional root finding interface using; the Brent-Decker method. This implementation is based on the one; in the GNU scientific library (v0.99).; . Function Members (Methods); public:. virtual~RooBrentRootFinder(); static TClass*Class(); virtual Bool_tfindRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; virtual TClass*IsA() const; RooBrentRootFinder&operator=(const RooBrentRootFinder&); RooBrentRootFinder(const RooAbsFunc& function); RooBrentRootFinder(const RooBrentRootFinder&); voidsetTol(Double_t tol); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. static RooBrentRootFinder::(anonymous)MaxIterations; const RooAbsFunc*RooAbsRootFinder::_functionPointer to input function; Double_t_tol; Bool_tRooAbsRootFinder::_validTrue if current state is valid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBrentRootFinder(const RooAbsFunc& function); Constructor taking function binding as input. Bool_t findRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; Do the root finding using the Brent-Decker method. Returns a boolean status and; loads 'result' with our best guess at the root if true.; Prints a warning if the initial interval does not bracket a single; root or if the root is not found after a fixed number of iterations. RooBrentRootFinder(const RooAbsFunc& function). virtual ~RooBrentRootFinder(); { }. void setTol(Double_t tol); Set convergence tolerance parameter. » Last changed: Tue Jun 2 15:28:09 2015 » Last generated: 2015-06-02 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooBrentRootFinder.html:1627,load,loads,1627,root/html604/RooBrentRootFinder.html,https://root.cern,https://root.cern/root/html604/RooBrentRootFinder.html,1,['load'],['loads']
Performance," data. void AddObjectData(TSQLObjectData* objdata); add element with pointer to object data. TSQLObjectData* GetObjectData(Bool_t search = false); searchs for objects data. void Print(Option_t* option = """") const; print content of complete structure. void PrintLevel(Int_t level) const; print content of current structure. Bool_t IsNumericType(Int_t typ); defines if value is numeric and not requires quotes when writing. const char* GetSimpleTypeName(Int_t typ); provides name for basic types; used as suffix for column name or field suffix in raw table. Long64_t FindMaxObjectId(); define maximum reference id, used for objects. Bool_t ConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); Convert structure to sql statements; This function is called immidiately after TBufferSQL2 produces; this structure with object data; Should be only called for toplevel structure. void PerformConversion(TSqlRegistry* reg, TSqlRawBuffer* blobs, const char* topname, Bool_t useblob = kFALSE); perform conversion of structure to sql statements; first tries convert it to normal form; if fails, produces data for raw table. Bool_t StoreObject(TSqlRegistry* reg, Long64_t objid, TClass* cl, Bool_t registerobj = kTRUE); convert object data to sql statements; if normal (columnwise) representation is not possible,; complete object will be converted to raw format. Bool_t StoreObjectInNormalForm(TSqlRegistry* reg); this function verify object child elements and; calls transformation to class table. Bool_t StoreClassInNormalForm(TSqlRegistry* reg); produces data for complete class table; where not possible, raw data for some elements are created. TString MakeArrayIndex(TStreamerElement* elem, Int_t n); produce string with complete index like [1][2][0]. Bool_t StoreElementInNormalForm(TSqlRegistry* reg, TSQLTableData* columns); tries to store element data in column. Bool_t TryConvertObjectArray(TSqlRegistry* reg, TSqlRawBuffer* blobs); tries to write array of objects as lis of object refereneces",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLStructure.html:12862,Perform,PerformConversion,12862,root/html530/TSQLStructure.html,https://root.cern,https://root.cern/root/html530/TSQLStructure.html,10,"['Perform', 'perform']","['PerformConversion', 'perform']"
Performance," dataset sampled from G(y). RooProdPdf(const char* name, const char* title, const RooArgSet& fullPdfSet, const RooLinkedList& cmdArgList); Internal constructor from list of named arguments. RooProdPdf(const RooProdPdf& other, const char* name = 0); Copy constructor. void initializeFromCmdArgList(const RooArgSet& fullPdfSet, const RooLinkedList& l); Initialize RooProdPdf configuration from given list of RooCmdArg configuration arguments; and set of 'regular' p.d.f.s in product. ~RooProdPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Overload getVal() to intercept normalization set for use in evaluate(). Double_t evaluate() const; Calculate current value of object. Double_t calculate(const RooArgList* partIntList, const RooLinkedList* normSetList) const; Calculate running product of pdfs terms, using the supplied; normalization set in 'normSetList' for each component. Double_t calculate(const RooProdPdf::CacheElem& cache, Bool_t verbose = kFALSE) const; Calculate running product of pdfs terms, using the supplied; normalization set in 'normSetList' for each component. void factorizeProduct(const RooArgSet& normSet, const RooArgSet& intSet, RooLinkedList& termList, RooLinkedList& normList, RooLinkedList& impDepList, RooLinkedList& crossDepList, RooLinkedList& intList) const; Factorize product in irreducible terms for given choice of integration/normalization. void getPartIntList(const RooArgSet* nset, const RooArgSet* iset, RooArgList*& partList, RooLinkedList*& nsetList, Int_t& code, const char* isetRangeName = 0) const; Return list of (partial) integrals of product terms for integration; of p.d.f over observables iset while normalization over observables nset.; Also return list of normalization sets to be used to evaluate; each component in the list correctly. RooAbsReal* makeCondPdfRatioCorr(RooAbsReal& term, const RooArgSet& termNset, const RooArgSet& termImpSet, const char* normRange, const char* refRange) const; For single normalization ranges.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:50984,Cache,CacheElem,50984,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,4,"['Cache', 'cache']","['CacheElem', 'cache']"
Performance," dataset sampled from G(y). RooProdPdf(const char* name, const char* title, const RooArgSet& fullPdfSet, const RooLinkedList& cmdArgList); Internal constructor from list of named arguments. RooProdPdf(const RooProdPdf& other, const char* name = 0); Copy constructor. void initializeFromCmdArgList(const RooArgSet& fullPdfSet, const RooLinkedList& l); Initialize RooProdPdf configuration from given list of RooCmdArg configuration arguments; and set of 'regular' p.d.f.s in product. ~RooProdPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Overload getVal() to intercept normalization set for use in evaluate(). Double_t evaluate() const; Calculate current value of object. Double_t calculate(const RooArgList* partIntList, const RooLinkedList* normSetList) const; Calculate running product of pdfs terms, using the supplied; normalization set in 'normSetList' for each component. Double_t calculate(const RooProdPdf::CacheElem& cache, Bool_t verbose = kFALSE) const; Calculate running product of pdfs terms, using the supplied; normalization set in 'normSetList' for each component. void factorizeProduct(const RooArgSet& normSet, const RooArgSet& intSet, RooLinkedList& termList, RooLinkedList& normList, RooLinkedList& impDepList, RooLinkedList& crossDepList, RooLinkedList& intList) const; Factorize product in irreducible terms for given choice of integration/normalization. void getPartIntList(const RooArgSet* nset, const RooArgSet* iset, pRooArgList& partList, pRooLinkedList& nsetList, Int_t& code, const char* isetRangeName = 0) const; Return list of (partial) integrals of product terms for integration; of p.d.f over observables iset while normalization over observables nset.; Also return list of normalization sets to be used to evaluate; each component in the list correctly. RooAbsReal* makeCondPdfRatioCorr(RooAbsReal& term, const RooArgSet& termNset, const RooArgSet& termImpSet, const char* normRange, const char* refRange) const; For single normalization ranges.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:54120,Cache,CacheElem,54120,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,4,"['Cache', 'cache']","['CacheElem', 'cache']"
Performance," dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:10134,perform,perform,10134,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['perform'],['perform']
Performance," daughters. For a better understanding of the hierarchy, have a look at https://root.cern.ch/doc/master/classTGeoManager.html.; Just close now the X3D window and focus at the wire frame picture drawn in a pad. Activate Options/Event Status. Moving the mouse in the pad, you will notice that objects are sometimes changing color to red. Volumes are highlighted in this way whenever the mouse pointer is close enough to one of its vertices. When this happens, the corresponding volume is selected and you will see in the bottom right size of the ROOT canvas its name, shape type and corresponding path in the physical tree. Right clicking on the screen when a volume is selected will also open its context menu (picking). Note that there are several actions that can be performed both at view (no volume selected) and volume level.; TView (mouse not selecting any volume):. Click-and-drag rotates the view.; Pressing some keys perform different actions:; J/K - zoom / unzoom; H, L, U, I - move the viewpoint; Right click + SetParallel ()/SetPerspective () - switch from parallel to perspective view.; Right click + ShowAxis() - show coordinate axes.; Right click + Centered/Left/Side/Top - change view direction. TGeoVolume (mouse selecting a volume):. Double click will focus the corresponding volume.; Right click + CheckOverlaps() - run overlap checker on current volume.; Right click + Draw () - draw that volume according current global visualization options; Right click + DrawOnly()-draw only the selected volume.; Right click + InspectShape/Material() - print info about shape or material.; Right click + Raytrace() - initiate a ray tracing algorithm on current view.; Right click + RandomPoints/Rays() - shoot random points or rays inside the bounding box of the clicked volume and display only those inside visible volumes.; Right click + Weight() - estimates the weight of a volume within a given precision. Note that there are several additional methods for visibility and line attributes se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:885754,perform,perform,885754,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['perform']
Performance," debug mode or optimized. ;  ; virtual Int_t GetAclicProperties () const;  Return the ACLiC properties field. ;  ; void GetBeepDefaults (Int_t &freq, Int_t &duration) const;  ; virtual const char * GetBuildArch () const;  Return the build architecture. ;  ; virtual const char * GetBuildCompiler () const;  Return the build compiler. ;  ; virtual const char * GetBuildCompilerVersion () const;  Return the build compiler version. ;  ; virtual const char * GetBuildCompilerVersionStr () const;  Return the build compiler version identifier string. ;  ; virtual const char * GetBuildDir () const;  Return the path of the build directory. ;  ; virtual const char * GetBuildNode () const;  Return the build node name. ;  ; virtual TString GetDirName (const char *pathname);  Return the directory name in pathname. ;  ; virtual void * GetDirPtr () const;  ; const char * GetErrorStr () const;  ; virtual const char * GetFlagsDebug () const;  Return the debug flags. ;  ; virtual const char * GetFlagsOpt () const;  Return the optimization flags. ;  ; virtual TString GetFromPipe (const char *command);  Execute command and return output in TString. ;  ; virtual const char * GetIncludePath ();  Get the list of include path. ;  ; virtual const char * GetLibraries (const char *regexp="""", const char *option="""", Bool_t isRegexp=kTRUE);  Return a space separated list of loaded shared libraries. ;  ; virtual const char * GetLinkdefSuffix () const;  Return the linkdef suffix chosen by the user for ACLiC. ;  ; virtual const char * GetLinkedLibs () const;  Return the list of library linked to this executable. ;  ; virtual TSeqCollection * GetListOfFileHandlers () const;  ; virtual TSeqCollection * GetListOfSignalHandlers () const;  ; virtual TSeqCollection * GetListOfStdExceptionHandlers () const;  ; virtual TList * GetListOfTimers () const;  ; virtual const char * GetMakeExe () const;  Return the command line use to make an executable. ;  ; virtual const char * GetMakeSharedLib () const;  Return t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:15438,optimiz,optimization,15438,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,2,['optimiz'],['optimization']
Performance," decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12014,concurren,concurrently,12014,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['concurren'],['concurrently']
Performance," decomposition process of matrix \(A\) in the user-definable part of TObject::fBits, see the next table. This guarantees the correct order of the operations:. kMatrixSet; kDecomposed; kDetermined; kCondition; kSingular; \(A\) assigned; \(A\) decomposed, bit kMatrixSet must have been set.; det \(A\) calculated, bit kDecomposed must have been set.; ||A||1 ||A-1||1 is calculated bit kDecomposed must have been set.; \(A\) is singular. The state is reset by assigning a new matrix through SetMatrix(TMatrixD &A) for TDecompBK and TDecompChol (actually SetMatrix(TMatrixDSym &A) and SetMatrix(TMatrixDSparse &A) for TMatrixDSparse).; As the code example below shows, the user does not have to worry about the decomposition step before calling a solve method, because the decomposition class checks before invoking Solve that the matrix has been decomposed.; TVectorD b = ..;; TMatrixD a = ..;; .; TDecompLU lu(a);; Bool_t ok;; lu.Solve(b,ok);; In the next example, we show again the same decomposition but now performed in a loop and all necessary steps are manually invoked. This example also demonstrates another very important point concerning memory management! Note that the vector, matrix and decomposition class are constructed outside the loop since the dimensions of vector/matrix are constant. If we would have replaced lu.SetMatrix(a) by TDecompLU lu(a), we would construct/deconstruct the array elements of lu on the stack.; TVectorD b(n);; TMatrixD a(n,n);; TDecompLU lu(n);; Bool_t ok;; for (....) {; b = ..;; a = ..;; lu.SetMatrix(a);; lu.Decompose();; lu.Solve(b,ok);; }; 14.6.1 Tolerances and Scaling; The tolerance parameter fTol (a member of the base class TDecompBase) plays a crucial role in all operations of the decomposition classes. It gives the user a tool to monitor and steer the operations its default value is \(\varepsilon\) where \(1+\varepsilon=1\).; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:791950,perform,performed,791950,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performed']
Performance," default c-tor. TEntryListBlock(const TEntryListBlock& eblock); copy c-tor. ~TEntryListBlock(); destructor. TEntryListBlock & operator=(const TEntryListBlock& rhs). Bool_t Enter(Int_t entry); If the block has already been optimized and the entries; are stored as a list and not as bits, trying to enter a new entry; will make the block switch to bits representation. Bool_t Remove(Int_t entry); Remove entry #entry; If the block has already been optimized and the entries; are stored as a list and not as bits, trying to remove a new entry; will make the block switch to bits representation. Int_t Contains(Int_t entry); true if the block contains entry #entry. Int_t Merge(TEntryListBlock* block); Merge with the other block; Returns the resulting number of entries in the block. Int_t GetNPassed(); Returns the number of entries, passing the selection.; In case, when the block stores entries that pass (fPassing=1) returns fNPassed. Int_t GetEntry(Int_t entry); Return entry #entry; See also Next(). Int_t Next(); Return the next non-zero entry; Faster than GetEntry() function. void Print(const Option_t* option = """") const; Print the entries in this block. void PrintWithShift(Int_t shift) const; print the indices of this block + shift (used from TEntryList::Print()) to; print the corrent values. void OptimizeStorage(); if there are < kBlockSize or >kBlockSize*15 entries, change to an array representation. void Transform(Bool_t dir, UShort_t* indexnew); Transform the existing fIndices; dir=0 - transform from bits to a list; dir=1 - tranform from a list to bits. void ResetIndices(); {fLastIndexQueried = -1, fLastIndexReturned = -1;}. Int_t GetType(); { return fType; }. » Author: Anna Kreshuk 27/10/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 15:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEntryListBlock.html:16818,Optimiz,OptimizeStorage,16818,root/html604/TEntryListBlock.html,https://root.cern,https://root.cern/root/html604/TEntryListBlock.html,1,['Optimiz'],['OptimizeStorage']
Performance," default c-tor. TEntryListBlock(const TEntryListBlock& eblock); copy c-tor. ~TEntryListBlock(); destructor. TEntryListBlock & operator=(const TEntryListBlock& rhs). Bool_t Enter(Int_t entry); If the block has already been optimized and the entries; are stored as a list and not as bits, trying to enter a new entry; will make the block switch to bits representation. Bool_t Remove(Int_t entry); Remove entry #entry; If the block has already been optimized and the entries; are stored as a list and not as bits, trying to remove a new entry; will make the block switch to bits representation. Int_t Contains(Int_t entry); true if the block contains entry #entry. Int_t Merge(TEntryListBlock* block); Merge with the other block; Returns the resulting number of entries in the block. Int_t GetNPassed(); Returns the number of entries, passing the selection.; In case, when the block stores entries that pass (fPassing=1) returns fNPassed. Int_t GetEntry(Int_t entry); Return entry #entry; See also Next(). Int_t Next(); Return the next non-zero entry; Faster than GetEntry() function. void Print(const Option_t* option = """") const; Print the entries in this block. void PrintWithShift(Int_t shift) const; print the indices of this block + shift (used from TEntryList::Print()) to; print the corrent values. void OptimizeStorage(); if there are < kBlockSize or >kBlockSize*15 entries, change to an array representation. void Transform(Bool_t dir, UShort_t* indexnew); Transform the existing fIndices; dir=0 - transform from bits to a list; dir=1 - tranform from a list to bits. void ResetIndices(); {fLastIndexQueried = -1, fLastIndexReturned = -1;}. Int_t GetType(); { return fType; }. » Author: Anna Kreshuk 27/10/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 14:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEntryListBlock.html:16818,Optimiz,OptimizeStorage,16818,root/html602/TEntryListBlock.html,https://root.cern,https://root.cern/root/html602/TEntryListBlock.html,1,['Optimiz'],['OptimizeStorage']
Performance," default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. RooAbsCachedReal(); {}. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. void disableCache(Bool_t flag); Switch to disable caching mechanism. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Returns name of binning to be used for cache histogram creation. FuncCacheElem* createCache(const RooArgSet* nset) const. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const. » Last changed: Tue Jun 2 15:26:56 2015 » Last generated: 2015-06-02 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsCachedReal.html:40270,cache,cache,40270,root/html604/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html604/RooAbsCachedReal.html,3,['cache'],['cache']
Performance," defaultPrintContents(Option_t* opt) const; Define default print options, for a given print style. void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent) const; Detailed printing interface. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const. Int_t fill(); Write current row. const RooArgSet* get(Int_t index) const; Retrieve a row. const RooArgSet* get() const; { return &_vars ; }. Double_t weight() const. Double_t weightError(RooAbsData::ErrorType etype = RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Double_t weight(Int_t index) const. Bool_t isWeighted() const. Bool_t changeObservableName(const char* from, const char* to); Change observable name. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add one or more columns. RooArgSet* addColumns(const RooArgList& varList). RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge column-wise. void append(RooAbsDataStore& other); Add rows. Int_t numEntries() const. void reset(). void Print(Option_t* options = 0) const; Printing interface (human readable). void cacheArgs(const RooAbsArg* cacheOwner, RooArgSet& varSet, const RooArgSet* nset = 0); Constant term optimizer interface. const RooAbsArg* cacheOwner(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars). void setArgStatus(const RooArgSet& set, Bool_t active). const RooArgSet& cachedVars() const; { return _cachedVars ; }. void resetCache(). void setDirtyProp(Bool_t flag); { _doDirtyProp = flag ; }. void checkInit() const; {}. Bool_t hasFilledCache() const; { return _cachedVars.getSize()>0 ; }. const TTree* tree() const; { return 0 ; }. » Last changed: Mon Dec 7 13:45:37 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsDataStore.html:10247,cache,cacheArgs,10247,root/html526/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html526/RooAbsDataStore.html,6,"['cache', 'optimiz']","['cacheArgs', 'cacheOwner', 'cachedVars', 'optimizer']"
Performance," defaultPrintContents(Option_t* opt) const; Define default print options, for a given print style. void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent) const; Detailed printing interface. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const. Int_t fill(); Write current row. const RooArgSet* get(Int_t index) const; Retrieve a row. const RooArgSet* get() const; { return &_vars ; }. Double_t weight() const. Double_t weightError(RooAbsData::ErrorType etype = RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Double_t weight(Int_t index) const. Bool_t isWeighted() const. Bool_t changeObservableName(const char* from, const char* to); Change observable name. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add one or more columns. RooArgSet* addColumns(const RooArgList& varList). RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge column-wise. void append(RooAbsDataStore& other); Add rows. Int_t numEntries() const. void reset(). void Print(Option_t* options = 0) const; Printing interface (human readable). void cacheArgs(const RooAbsArg* cacheOwner, RooArgSet& varSet, const RooArgSet* nset = 0); Constant term optimizer interface. const RooAbsArg* cacheOwner(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars). void setArgStatus(const RooArgSet& set, Bool_t active). const RooArgSet& cachedVars() const; { return _cachedVars ; }. void resetCache(). void setDirtyProp(Bool_t flag); { _doDirtyProp = flag ; }. void checkInit() const; {}. Bool_t hasFilledCache() const; { return _cachedVars.getSize()>0 ; }. const TTree* tree() const; { return 0 ; }. » Last changed: Mon Jul 4 15:21:22 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsDataStore.html:10302,cache,cacheArgs,10302,root/html530/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html530/RooAbsDataStore.html,6,"['cache', 'optimiz']","['cacheArgs', 'cacheOwner', 'cachedVars', 'optimizer']"
Performance," defined by arrays A,Z and WMAT, having an unique id. TGeoMaterial * Mixture(const char* name, Double_t* a, Double_t* z, Double_t dens, Int_t nelem, Double_t* wmat, Int_t uid); Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem; materials defined by arrays A,Z and WMAT, having an unique id. TGeoMedium * Medium(const char* name, Int_t numed, Int_t nmat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin); Create tracking medium. numed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm). ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking; performed with g3helix; ifield = 3 if tracking performed with g3helx3. void Node(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, Bool_t isOnly, Float_t* upar, Int_t npar = 0); Create a node called <name_nr> pointing to the volume called <name>; as daughter of the volume called <mother> (gspos). The relative matrix is; made of : a translation (x,y,z) and a rotation matrix named <matIROT>.; In case npar>0, create the volume to be positioned in mother, according; its actual parameters (gsposp).; NAME Volume name; NUMBER Copy number of the volume; MOTHER Mother volume name; X X coord. of the volume in mother ref. sys.; Y Y coord. of the volume in mother ref. sys.; Z Z coord. of the volume in mother ref. sys.; IROT Rotation matrix number w.r.t. mother ref. sys.; ISONLY ONLY/MANY flag. void Node(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, Bool_t isOnly, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBuilder.html:17639,perform,performed,17639,root/html528/TGeoBuilder.html,https://root.cern,https://root.cern/root/html528/TGeoBuilder.html,36,['perform'],['performed']
Performance," defined for any keycode, returns zero. ; Reimplemented from TVirtualX.; Definition at line 2757 of file TGCocoa.mm. ◆ ListFonts(). char ** TGCocoa::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented from TVirtualX.; Definition at line 2882 of file TGCocoa.mm. ◆ LoadQueryFont(). FontStruct_t TGCocoa::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented from TVirtualX.; Definition at line 2809 of file TGCocoa.mm. ◆ LookupString(). void TGCocoa::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Converts the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In ""buf"" a null terminated ASCII string is returned representing the string that is currently mapped to the key code.; Parameters. [in]eventspecifies the event structure to be used ; [in]bufreturns the translated characters ; [in]buflenthe length of the buffer ; [in]keysymreturns the ""keysym"" computed from the event if this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:96245,Load,LoadQueryFont,96245,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['Load'],['LoadQueryFont']
Performance," definition of the TRef data member in the original class, do:; TRef fRef; //EXEC:execName points to something; When the special keyword ""EXEC:"" is found in the comment field of the member, the next string is assumed to be the name of a TExec object. When a file is connected, the dictionary of the classes on the file is read in memory (see TFile::ReadStreamerInfo). When the TStreamerElement object is read, a TExec object is automatically created with the name specified after the keyword ""EXEC:"" in case a TExec with a same name does not already exist.; The action to be executed via this TExec can be specified with:. A call to the TExec constructor, if the constructor is called before; Opening the file.; A call to TExec::SetAction at any time. One can compute a pointer to an existing TExec with a name with:; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; The parameter actionCommand is a string containing a Cling instruction. Examples:; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; When a TRef is de-referenced via TRef::GetObject, its TExec** is automatically executed. The TExec function/script can do one or more of the following:**. Load a file containing the referenced object. This function typically looks in the file catalog.; Compute a pointer to the referenced object and communicate this pointer back to the calling function TRef::SetObject via:. TRef::SetObject(object); As soon as an object is returned to GetObject, the fUniqueID of the TRef is set to the fUniqueID of the referenced object. At the next call to GetObject, the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is in $ROOTSYS/test/Event.h:; TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject will automatically invoke the script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below:; void GetWebHistogram(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:487015,Load,LoadHits,487015,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Load'],['LoadHits']
Performance," delta, Bool_t mod1, Bool_t mod2). protected:. voidTGLCamera::UpdateCache() const. Data Members; public:. enum TGLCamera::EFrustumPlane { kNear; kLeft; kRight; kTop; kBottom; kFar; kPlanesPerFrustum; };. protected:. Bool_tTGLCamera::fCacheDirty! cached items dirty?; TGLMatrixTGLCamera::fCamBase! tranformation to center and rotation from up to x vector; TGLMatrixTGLCamera::fCamTrans! transformation relative to fCamTrans; TGLVector3*TGLCamera::fCenter! current camera center; TGLMatrixTGLCamera::fClipM! object space clip matrix (cached); TGLVector3TGLCamera::fDefCenter! deafult camera center; Double_tTGLCamera::fDollyDefault! default distnce from viewing centre; Double_tTGLCamera::fDollyDistance! unit distance for camera movement in fwd/bck direction; TGLVector3TGLCamera::fExtCenter! external camera center; Bool_tTGLCamera::fExternalCenter! use external center insead of scene center; TGLVector3TGLCamera::fFDCenter! fixed deafult camera center; Double_tTGLCamera::fFarClip! last applied far-clip; Bool_tTGLCamera::fFixDefCenter! use fixed default center; TGLPlaneTGLCamera::fFrustumPlanes[6]! frustum planes (cached); TGLBoundingBoxTGLCamera::fInterestBox! the interest box - created in UpdateInterest(); Double_tTGLCamera::fLargestSeen! largest box diagonal seen in OfInterest() - used when; TGLMatrixTGLCamera::fLastNoPickProjM! no-pick projection matrix (cached); TGLMatrixTGLCamera::fModVM! modelView matrix (cached); Double_tTGLCamera::fNearClip! last applied near-clip; TGLMatrixTGLCamera::fProjM! projection matrix (cached); UInt_tTGLCamera::fTimeStamp! timestamp; Float_tTGLCamera::fVAxisMinAngle! minimal allowed angle between up and fCamTrans Z vector; TGLRectTGLCamera::fViewport! viewport (GL coords - origin bottom left); static UInt_tTGLCamera::fgDollyDeltaSens. private:. Double_tfFOV!; static Double_tfgFOVDefault; static UInt_tfgFOVDeltaSens; static Double_tfgFOVMax; static Double_tfgFOVMin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function docum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPerspectiveCamera.html:5165,cache,cached,5165,root/html528/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html528/TGLPerspectiveCamera.html,18,['cache'],['cached']
Performance," depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBinningCategory.html:10588,optimiz,optimizeCacheMode,10588,root/html530/RooBinningCategory.html,https://root.cern,https://root.cern/root/html530/RooBinningCategory.html,15,['optimiz'],['optimizeCacheMode']
Performance," dependent on the current keyboard mapping). If the specified ""keysym"" is not defined for any keycode, returns zero. ; Reimplemented from TVirtualX. ◆ ListFonts(). char ** TGWin32VirtualXProxy::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented from TVirtualX. ◆ LoadQueryFont(). FontStruct_t TGWin32VirtualXProxy::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented from TVirtualX. ◆ LookupString(). void TGWin32VirtualXProxy::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In buf a null terminated ASCII string is returned representing the string that is currently mapped to the key code. ; Reimplemented from TVirtualX.; Definition at line 285 of file TGWin32VirtualXProxy.cxx. ◆ LowerWindow(). void TGWin32VirtualXProxy::LowerWindow ; (; Window_t ; id). overridevirtual . Lowers the specified window ""id"" to the bott",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:93347,Load,LoadQueryFont,93347,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Load'],['LoadQueryFont']
Performance," description can be any valid shell command, including; 4102/// the use of ';' to separate several instructions. However, shell specific; 4103/// construct should be avoided. In particular this description can contain; 4104/// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; 4105/// ~~~ {.cpp}; 4106/// Five special variables will be expanded before execution:; 4107/// Variable name Expands to; 4108/// ------------- ----------; 4109/// $SourceFiles Name of source files to be compiled; 4110/// $SharedLib Name of the shared library being created; 4111/// $LibName Name of shared library without extension; 4112/// $BuildDir Directory where the files will be created; 4113/// $IncludePath value of fIncludePath; 4114/// $LinkedLibs value of fLinkedLibs; 4115/// $DepLibs libraries on which this library depends on; 4116/// $ObjectFiles Name of source files to be compiler with; 4117/// their extension changed to .o or .obj; 4118/// $Opt location of the optimization/debug options; 4119/// set fFlagsDebug and fFlagsOpt; 4120/// ~~~; 4121/// e.g.:; 4122/// ~~~ {.cpp}; 4123/// gSystem->SetMakeSharedLib(; 4124/// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; 4125/// --no_exceptions --signed_chars --display_error_number; 4126/// --diag_suppress 68 -o $SharedLib"");; 4127///; 4128/// gSystem->setMakeSharedLib(; 4129/// ""Cxx $IncludePath -c $SourceFile;; 4130/// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; 4131/// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; 4132/// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; 4133///; 4134/// gSystem->SetMakeSharedLib(; 4135/// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; 4136/// -shared -o $SharedLib"");; 4137///; 4138/// gSystem->SetMakeSharedLib(; 4139/// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; 4140/// -D_WINDOWS $IncludePath $SourceFile; 4141/// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLOGO; 4142/// $Link",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:140854,optimiz,optimization,140854,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['optimiz'],['optimization']
Performance," description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes do not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLogicalShape.html:1158,perform,performed,1158,root/html532/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html532/TGLLogicalShape.html,4,['perform'],['performed']
Performance," description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes does not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLogicalShape.html:1158,perform,performed,1158,root/html528/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html528/TGLLogicalShape.html,2,['perform'],['performed']
Performance," dictionary are concerned, if the current TClass is; 3010 // in interpreted state, we are sure there is nothing to load.; 3011 //; 3012 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3013 // by a user provided TClassGenerator. We have no way of knowing whether; 3014 // those do (or even can) behave the same way as the ROOT dictionary and; 3015 // have the 'dictionary is now available for use' step informs the existing; 3016 // TClass that their dictionary is now available.; 3017 ; 3018 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3019 load = kTRUE;; 3020 }; 3021 ; 3022 if (TClassEdit::IsArtificial(name)) {; 3023 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3024 // from an already normalized name for the purpose of supporting schema evolution.; 3025 // There is no dictionary or interpreter information about this kind of class, the only; 3026 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3027 // auto-loading or auto-parsing based on the scope of the name.; 3028 return cl;; 3029 }; 3030 ; 3031 // To avoid spurious auto parsing, let's check if the name as-is is; 3032 // known in the TClassTable.; 3033 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3034 if (dict) {; 3035 // The name is normalized, so the result of the first search is; 3036 // authoritative.; 3037 if (!cl && !load) return nullptr;; 3038 ; 3039 TClass *loadedcl = (dict)();; 3040 if (loadedcl) {; 3041 loadedcl->PostLoadCheck();; 3042 return loadedcl;; 3043 }; 3044 ; 3045 // We should really not fall through to here, but if we do, let's just; 3046 // continue as before ...; 3047 }; 3048 ; 3049 std::string normalizedName;; 3050 Bool_t checkTable = kFALSE;; 3051 ; 3052 if (!cl) {; 3053 {; 3054 TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; 3055 TClassEdit::GetNormalizedName(normalizedName, name);; 3056 }; 3057 // Try the nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:114160,load,loading,114160,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['loading']
Performance," dictionary are concerned, if the current TClass is; 3077 // in interpreted state, we are sure there is nothing to load.; 3078 //; 3079 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3080 // by a user provided TClassGenerator. We have no way of knowing whether; 3081 // those do (or even can) behave the same way as the ROOT dictionary and; 3082 // have the 'dictionary is now available for use' step informs the existing; 3083 // TClass that their dictionary is now available.; 3084 ; 3085 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3086 load = kTRUE;; 3087 }; 3088 ; 3089 if (TClassEdit::IsArtificial(name)) {; 3090 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3091 // from an already normalized name for the purpose of supporting schema evolution.; 3092 // There is no dictionary or interpreter information about this kind of class, the only; 3093 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3094 // auto-loading or auto-parsing based on the scope of the name.; 3095 return cl;; 3096 }; 3097 ; 3098 // To avoid spurious auto parsing, let's check if the name as-is is; 3099 // known in the TClassTable.; 3100 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3101 if (dict) {; 3102 // The name is normalized, so the result of the first search is; 3103 // authoritative.; 3104 if (!cl && !load) return nullptr;; 3105 ; 3106 TClass *loadedcl = (dict)();; 3107 if (loadedcl) {; 3108 loadedcl->PostLoadCheck();; 3109 return loadedcl;; 3110 }; 3111 ; 3112 // We should really not fall through to here, but if we do, let's just; 3113 // continue as before ...; 3114 }; 3115 ; 3116 std::string normalizedName;; 3117 Bool_t checkTable = kFALSE;; 3118 ; 3119 if (!cl) {; 3120 {; 3121 TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; 3122 TClassEdit::GetNormalizedName(normalizedName, name);; 3123 }; 3124 // Try the nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:116911,load,loading,116911,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['loading']
Performance," differences between events in the training set. The speed of the k-NN; : method also increases with larger values of k. ; : ; : The k-NN method assigns equal weight to all input variables. Different scales ; : among the input variables is compensated using ScaleFrac parameter: the input ; : variables are scaled so that the widths for central ScaleFrac*100% events are ; : equal among all the input variables.; : ; : ␛[1m--- Additional configuration options: ␛[0m; : ; : The method inclues an option to use a Gaussian kernel to smooth out the k-NN; : response. The kernel re-weights events using a distance to the test event.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; KNN : <Train> start...; : Reading 2000 events; : Number of signal events 1000; : Number of background events 1000; : Creating kd-tree with 2000 events; : Computing scale factor for 1d distributions: (ifrac, bottom, top) = (80%, 10%, 90%); ModulekNN : Optimizing tree for 4 variables with 2000 values; : <Fill> Class 1 has 1000 events; : <Fill> Class 2 has 1000 events; : Elapsed time for training with 2000 events: 0.00292 sec ; KNN : [dataset] : Evaluation of KNN on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.0394 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_KNN.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_KNN.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: LD for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ LD ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : Linear discriminants select events by distinguishing the mean ; : values of the signal and background distributions in a trans- ; : formed variable space where linear correlations are removed.; : The LD implementation here ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:34661,Optimiz,Optimizing,34661,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Optimiz'],['Optimizing']
Performance," different meanings:; If p=1 the points represent the outliers. If they are shown, it means some parts of the underlying distribution are not covered by the whiskers. This can only occur when the whiskers are set to option w=2. Here the whiskers can have a maximum length of \( 1.5 \times iqr \). So any points outside the whiskers will be drawn as outliers. The outliers will be represented by crosses.; If p=2 all points in the distribution will be painted as crosses. This is useful for small datasets only (up to 10 or 20 points per candle). The outliers are shown along the candle. Because the underlying distribution is binned, is frequently occurs that a bin contains more than one value. Because of this the points will be randomly scattered within their bin along the candle axis. If the bin content for a bin is exactly 1 (usually this happens for the outliers) if will be drawn in the middle of the bin along the candle axis. As the maximum number of points per candle is limited by kNMax/2 on very large datasets scaling will be performed automatically. In that case one would loose all outliers because they have usually a bin content of 1 (and a bin content between 0 and 1 after the scaling). Because of this all bin contents between 0 and 1 - after the scaling - will be forced to be 1.; As the drawing of all values on large datasets can lead to big amounts of crosses, one can show all values as a scatter plot instead by choosing p=3. The points will be drawn as dots and will be scattered within the width of the candle. The color of the points will be the color of the candle-chart. Other Options; Is is possible to combine all options of candle and violin plots with each other. E.g. a box-plot with a histogram.; How to use the candle-plots drawing option; There are six predefined candle-plot representations:. ""CANDLEX1"": Standard candle (whiskers cover the whole distribution); ""CANDLEX2"": Standard candle with better whisker definition + outliers. It is a good compromise; """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:64484,perform,performed,64484,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['perform'],['performed']
Performance," dimSet) const; voidcheckBinBounds() const; Double_tRooAbsData::corrcov(RooRealVar& x, RooRealVar& y, const char* cutSpec, const char* cutRange, Bool_t corr) const; TMatrixDSym*RooAbsData::corrcovMatrix(const RooArgList& vars, const char* cutSpec, const char* cutRange, Bool_t corr) const; RooRealVar*RooAbsData::dataRealVar(const char* methodname, RooRealVar& extVar) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidimportDHistSet(const RooArgList& vars, RooCategory& indexCat, map<string,RooDataHist*> dmap, Double_t initWgt); voidimportTH1(const RooArgList& vars, TH1& histo, Double_t initWgt, Bool_t doDensityCorrection); voidimportTH1Set(const RooArgList& vars, RooCategory& indexCat, map<string,TH1*> hmap, Double_t initWgt, Bool_t doDensityCorrection); voidinitialize(const char* binningName = 0, Bool_t fillTree = kTRUE); Double_tinterpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); voidTObject::MakeZombie(); virtual voidRooAbsData::optimizeReadingWithCaching(RooAbsArg& arg, const RooArgSet& cacheList, const RooArgSet& keepObsList); virtual RooPlot*RooAbsData::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsData::PlotOpt o) const; virtual RooPlot*RooAbsData::plotEffOn(RooPlot* frame, const RooAbsCategoryLValue& effCat, RooAbsData::PlotOpt o) const; virtual RooAbsData*reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); voidRooDirItem::removeFromDir(TObject* obj); virtual voidRooAbsData::resetCache(); RooDataHist(const char* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); voidsetAllWeights(Double_t value); virtual voidRooAbsData::setArgStatus(const RooArgSet& set, Bool_t active).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataHist.html:16235,optimiz,optimizeReadingWithCaching,16235,root/html602/RooDataHist.html,https://root.cern,https://root.cern/root/html602/RooDataHist.html,4,"['cache', 'optimiz']","['cacheList', 'optimizeReadingWithCaching']"
Performance," dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:39837,cache,cache,39837,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['cache'],['cache']
Performance, dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooCategoryProxy_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; Int_t_numPdfNumber of registered PDFs; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooObjCacheManager_partIntMgrComponent normalization manager; TList_pdfProxyListList of PDF proxies (named after applicable category state); Int_tRooAbsReal::_plotBinsNumber of plot bins; const TNamed*_plotCoefNormRange; RooSetProxy_plotCoefNormSet,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:37991,cache,cache,37991,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['cache'],['cache']
Performance, dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooCategoryProxy_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; Int_t_numPdfNumber of registered PDFs; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooObjCacheManager_partIntMgrComponent normalization manager; TList_pdfProxyListList of PDF proxies (named after applicable category state); Int_tRooAbsRe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimultaneous.html:38565,cache,cache,38565,root/html528/RooSimultaneous.html,https://root.cern,https://root.cern/root/html528/RooSimultaneous.html,2,['cache'],['cache']
Performance," dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characters like ~. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Returns the path of a shared library (searches for library in the shared library search path). ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file ""wfil"" in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a Unix file system directory. ;  ; int GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Get next Unix file system directory entry. Returns 0 if no more entries. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ; Int_t GetEffectiveGid () override;  Returns the effective group id. ;  ; Int_t GetEffectiveUid () override;  Returns the effective user id. ;  ; const char * Getenv (const char *name) override;  Get environment variable. ;  ; const char * GetError () override;  Return system error string. ;  ; Int_t GetFPEMask () override;  Return the bitmap of conditions that trigger a floating point exception. ;  ; int GetFsInfo (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:4035,load,load,4035,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,4,['load'],['load']
Performance," distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46407,multi-thread,multi-thread,46407,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['multi-thread'],['multi-thread']
Performance," do *not* insert ourself into the current directory. TTree(const char* name, const char* title, Int_t splitlevel = 99); Normal tree constructor. The tree is created in the current directory.; Use the various functions Branch below to add branches to this tree. If the first character of title is a ""/"", the function assumes a folder name.; In this case, it creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. Int_t AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:37987,cache,cache,37987,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor. void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. TTree * GetOwner() const; return the owner of this cache. TTree * GetTree() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Readin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:18223,cache,cache,18223,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,2,['cache'],['cache']
Performance," done analytically rather than introducing them as formal fit parameters. Some special care needs to be taken in the case of bins with zero content. For more details please see the original publication cited above.; An example application of this fit is given below. For a TH1* histogram (""data"") fitted as the sum of three Monte Carlo sources (""mc""):; {; TH1F *data; //data histogram; TH1F *mc0; // first MC histogram; TH1F *mc1; // second MC histogram; TH1F *mc2; // third MC histogram; .... // retrieve histograms; TObjArray *mc = new TObjArray(3); // MC histograms are put in this array; mc->Add(mc0);; mc->Add(mc1);; mc->Add(mc2);; TFractionFitter* fit = new TFractionFitter(data, mc); // initialise; fit->Constrain(1,0.0,1.0); // constrain fraction 1 to be between 0 and 1; fit->SetRangeX(1,15); // use only the first 15 bins in the fit; Int_t status = fit->Fit(); // perform the fit; std::cout << ""fit status: "" << status << std::endl;; if (status == 0) { // check on fit status; TH1F* result = (TH1F*) fit->GetPlot();; data->Draw(""Ep"");; result->Draw(""same"");; }; }; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TFractionFitterFits MC fractions to data histogram.Definition TFractionFitter.h:27; TFractionFitter::TFractionFitterTFractionFitter()TFractionFitter default constructor.Definition TFractionFitter.cxx:163; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Addvoid Add(TObject *obj) overrideDefinitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:1823,perform,perform,1823,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['perform'],['perform']
Performance," double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ; Definition at line 403 of file IParamFunction.h. ◆ ParameterDerivative() [2/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values (multi-dim like interface) ; Definition at line 412 of file IParamFunction.h. ◆ ParameterDerivative() [3/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values (multi-dim like interface) ; Definition at line 377 of file IParamFunction.h. ◆ ParameterGradient() [3/4]. virtual void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . const double * ; p, . double * ; grad . ); const. inlinevirtual . Evaluate the derivatives of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:6535,cache,cached,6535,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,1,['cache'],['cached']
Performance," double ROOT::Math::Interpolator::Integ ; (; double ; a, . double ; b . ); const. Return the Integral of the interpolated function over the range [a,b]. ; Definition at line 92 of file Interpolator.cxx. ◆ operator=() [1/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; const Interpolator & ; ). delete . ◆ operator=() [2/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; Interpolator && ; ). delete . ◆ SetData() [1/2]. bool ROOT::Math::Interpolator::SetData ; (; const std::vector< double > & ; x, . const std::vector< double > & ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 68 of file Interpolator.cxx. ◆ SetData() [2/2]. bool ROOT::Math::Interpolator::SetData ; (; unsigned int ; ndata, . const double * ; x, . const double * ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 64 of file Interpolator.cxx. ◆ Type(). std::string ROOT::Math::Interpolator::Type ; (; ); const. Return the type of interpolation method. ; Definition at line 101 of file Interpolator.cxx. ◆ TypeGet(). std::string ROOT::Math::Interpolator::TypeGet ; (; ); const. Definition at line 97 of file Interpolator.cxx. Member Data Documentation. ◆ fInterp. GSLInterpolator* ROOT::Math::Interpolator::fInterp. private . Definition at line 138 of file Interpolator.h. Libraries for ROOT::Math::Interpolator:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Interpolator.h; math/mathmore/src/Interpolator.cxx. ROOTMathInterpolator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:5960,perform,performed,5960,doc/master/classROOT_1_1Math_1_1Interpolator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html,1,['perform'],['performed']
Performance," double& Aki) const; voidGetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; boolIsExcluded(Int_t bin) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayfAjiarray of pointers to predictions of real template distributions; Double_tfChisquareTemplate fit chisquare; TH1*fDatapointer to the ""data"" histogram to be fitted to; vector<Int_t>fExcludedBinsbins excluded from the fit; Bool_tfFitDoneflags whether a valid fit has been performed; Double_t*fFractionstemplate fractions scaled to the ""data"" histogram statistics; Int_tfHighLimitXlast bin in X dimension; Int_tfHighLimitYlast bin in Y dimension; Int_tfHighLimitZlast bin in Z dimension; Double_tfIntegralData""data"" histogram content integral over allowed fit range; Double_t*fIntegralMCssame for template histograms (weights not taken into account); Int_tfLowLimitXfirst bin in X dimension; Int_tfLowLimitYfirst bin in Y dimension; Int_tfLowLimitZfirst bin in Z dimension; TObjArrayfMCsarray of pointers to template histograms; Int_tfNDFNumber of degrees of freedom in the fit; Int_tfNparnumber of fit parameters; Int_tfNpfitsNumber of points used in the fit; TH1*fPlotpointer to histogram containing summed template predictions; TObjArrayfWeightsarray of pointers to corresponding weight factors (may be null). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFractionFitter(); TFractionFitter default constructor. TFractionFitter(TH1* data, TObjArray* MCs, Option_t* option = """"); TFractionFitter constructor. Does a complete initialisation (including; consistency checks, default fit range as the whole histogram but without; under- and overflows, and declaration of the fit parameters). Note that; the hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFractionFitter.html:11574,perform,performed,11574,root/html530/TFractionFitter.html,https://root.cern,https://root.cern/root/html530/TFractionFitter.html,2,['perform'],['performed']
Performance," double& weight, RooAbsPdf& pdf) const; This method generates a toy data set for the given parameter point taking; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. RooAbsData* Generate(RooAbsPdf& pdf, RooArgSet& observables, const RooDataSet* protoData = NULL, int forceEvents = 0) const; This is the generate function to use in the context of the ToyMCSampler; instead of the standard RooAbsPdf::generate(...).; It takes into account whether the number of events is given explicitly; or whether it should use the expected number of events. It also takes; into account the option to generate a binned data set (ie RooDataHist). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC). void ClearCache(); clear the cache obtained from the pdf used for speeding the toy and global observables generation; needs to be called every time the model pdf (fPdf) changes. ToyMCSampler(). void SetUseMultiGen(Bool_t flag); { fUseMultiGen = flag ; }. void AddTestStatistic(RooStats::TestStatistic* t = NULL); The pdf can be NULL in which case the density from SetPdf(); is used. The snapshot and TestStatistic is also optional. RooAbsData* GenerateToyData(RooArgSet& paramPoint, RooAbsPdf& pdf) const; generates toy data; without weight. return GenerateToyData(paramPoint, weight, pdf). RooAbsData* GenerateToyData(RooArgSet& paramPoint) const; with weight. { return GenerateToyData(paramPoint,*fPdf); }. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); Main interface to evaluate the test statistic on a dataset. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); { return EvaluateTestStatistic( data,nullPOI, 0 ); }. TestStatistic* GetTestStatistic(unsigned int i) const. TestStatistic* GetTestStatistic(unsigned int i) const; { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCSampler.html:7581,cache,cache,7581,root/html534/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCSampler.html,1,['cache'],['cache']
Performance," double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IGradientOneDim.html:2117,Optimiz,Optimized,2117,root/html602/ROOT__Math__IGradientOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IGradientOneDim.html,1,['Optimiz'],['Optimized']
Performance," double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:2117,Optimiz,Optimized,2117,root/html604/ROOT__Math__IGradientOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html,1,['Optimiz'],['Optimized']
Performance," dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; TH1F.h; TROOT.h; TStopwatch.h; TString.h; TSystem.h; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TTree.h; Tools.h; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TMVA::ReaderThe Reader class serves to use the MVAs in a specific analysis context.Definition Reader.h:64; TMVA::Reader::BookMVAIMethod * BookMVA(const TString &methodTag, const TString &weightfile)read method name from weight fileDefinition Reader.cxx:368; TMVA::Reader::EvaluateMulticlassconst std::vector< Float_t > & EvaluateMulticlass(const TString &methodTag, Double_t aux=0)evaluates MVA for given set of input variablesDefinition Reader.cxx:630; TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlassApplication_8C.html:10396,cache,cacheDir,10396,doc/master/TMVAMulticlassApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlassApplication_8C.html,4,['cache'],"['cache', 'cacheDir']"
Performance," draw action query ; Definition at line 58 of file TQueryResult.h. ◆ fEnd. TDatime TQueryResult::fEnd. protected . time when processing ended ; Definition at line 61 of file TQueryResult.h. ◆ fEntries. Long64_t TQueryResult::fEntries. protected . number of entries processed ; Definition at line 65 of file TQueryResult.h. ◆ fFinalized. bool TQueryResult::fFinalized. protected . whether Terminate has been run ; Definition at line 74 of file TQueryResult.h. ◆ fFirst. Long64_t TQueryResult::fFirst. protected . first entry processed ; Definition at line 66 of file TQueryResult.h. ◆ fInitTime. Float_t TQueryResult::fInitTime. protected . Initialization time (seconds) (millisec precision) ; Definition at line 78 of file TQueryResult.h. ◆ fInputList. TList* TQueryResult::fInputList. protected . input list; contains also data sets, entry list, ... ; Definition at line 64 of file TQueryResult.h. ◆ fLibList. TString TQueryResult::fLibList. protected . blank-separated list of libs loaded at fStart ; Definition at line 71 of file TQueryResult.h. ◆ fLogFile. TMacro* TQueryResult::fLogFile. protected . file with log messages from the query ; Definition at line 68 of file TQueryResult.h. ◆ fMergeTime. Float_t TQueryResult::fMergeTime. protected . Merging time (seconds) (millisec precision) ; Definition at line 80 of file TQueryResult.h. ◆ fNumMergers. Int_t TQueryResult::fNumMergers. protected . Number of submergers. ; Definition at line 84 of file TQueryResult.h. ◆ fNumWrks. Int_t TQueryResult::fNumWrks. protected . Number of workers at start. ; Definition at line 83 of file TQueryResult.h. ◆ fOptions. TString TQueryResult::fOptions. protected . processing options + aclic mode (< opt >#< aclic_mode >) ; Definition at line 63 of file TQueryResult.h. ◆ fOutputList. TList* TQueryResult::fOutputList. protected . output list ; Definition at line 73 of file TQueryResult.h. ◆ fParList. TString TQueryResult::fParList. protected . colon-separated list of PAR loaded at fStart ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResult.html:27223,load,loaded,27223,doc/master/classTQueryResult.html,https://root.cern,https://root.cern/doc/master/classTQueryResult.html,1,['load'],['loaded']
Performance," dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weight(const RooArgSet& bin, Int_t intOrder = 1, Bool_t correctForBinSize = kFALSE, Bool_t cdfBoundaries = kFALSE); Return the weight at given coordinates with optional; interpolation. If intOrder is zero, the weight; for the bin enclosing the coordinates; contained in 'bin' is returned. For higher values,; the result is interpolated in the real dimensions; of the dataset. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t weight, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataHist.html:28063,Perform,Perform,28063,root/html528/RooDataHist.html,https://root.cern,https://root.cern/root/html528/RooDataHist.html,1,['Perform'],['Perform']
Performance," dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weight(const RooArgSet& bin, Int_t intOrder = 1, Bool_t correctForBinSize = kFALSE, Bool_t cdfBoundaries = kFALSE); Return the weight at given coordinates with optional; interpolation. If intOrder is zero, the weight; for the bin enclosing the coordinates; contained in 'bin' is returned. For higher values,; the result is interpolated in the real dimensions; of the dataset. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t wgt, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the spec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataHist.html:27256,Perform,Perform,27256,root/html526/RooDataHist.html,https://root.cern,https://root.cern/root/html526/RooDataHist.html,1,['Perform'],['Perform']
Performance," element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer ; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform comand line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TText Text; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns sin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:128063,Perform,Perform,128063,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['Perform'],['Perform']
Performance," element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform command line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TTeXDump Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precisi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:129362,Perform,Perform,129362,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['Perform'],['Perform']
Performance," element represent a base class.Definition TStreamerElement.cxx:431; TStreamerElement::SetOffsetvirtual void SetOffset(Int_t offset)Definition TStreamerElement.h:136; TStreamerElement::Classstatic TClass * Class(); TStreamerElement::kWholeObject@ kWholeObjectDefinition TStreamerElement.h:82; TStreamerElement::kWrite@ kWriteDefinition TStreamerElement.h:80; TStreamerElement::kRepeat@ kRepeatDefinition TStreamerElement.h:78; TStreamerElement::kCache@ kCacheDefinition TStreamerElement.h:77; TStreamerElement::kDoNotDelete@ kDoNotDeleteDefinition TStreamerElement.h:81; TStreamerElement::SetNewTypevirtual void SetNewType(Int_t dtype)Definition TStreamerElement.h:140; TStreamerElement::SetMaxIndexvirtual void SetMaxIndex(Int_t dim, Int_t max)set maximum index for array with dimension dimDefinition TStreamerElement.cxx:490; TStreamerElement::HasCountervirtual Bool_t HasCounter() constDefinition TStreamerElement.h:129; TStreamerElement::GetSequenceTypevoid GetSequenceType(TString &type) constFill type with the string representation of sequence information including 'cached',...Definition TStreamerElement.cxx:356; TStreamerInfoActions::TActionSequence::fActionsActionContainer_t fActionsDefinition TStreamerInfoActions.h:212; TStreamerInfo::TCompInfo::Updatevoid Update(const TClass *oldcl, TClass *newcl)Update the TClass pointer cached in this object.Definition TStreamerInfo.cxx:5644; TStreamerInfo::TCompInfo::fTypeInt_t fTypeDefinition TStreamerInfo.h:47; TStreamerInfo::TCompInfo::fClassTClass * fClassNot Owned.Definition TStreamerInfo.h:53; TStreamerInfo::TCompInfo::fOffsetInt_t fOffsetDefinition TStreamerInfo.h:49; TStreamerInfo::TCompInfo::fElemTStreamerElement * fElemNot Owned.Definition TStreamerInfo.h:51; TStreamerInfo::TCompInfo::fClassNameTString fClassNameDefinition TStreamerInfo.h:55; TStreamerInfo::TCompInfo::fMethodULongptr_t fMethodDefinition TStreamerInfo.h:52; TStreamerInfo::TCompInfo::fNewTypeInt_t fNewTypeDefinition TStreamerInfo.h:48; TStreamerInfo::TCompInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:274754,cache,cached,274754,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['cache'],['cached']
Performance," element:; <div id=""drawing""></div>; One could use the draw function:; import { draw } from 'https://root.cern/js/latest/modules/main.mjs';; draw(""drawing"", obj, ""colz"");; The first argument is the id of the HTML div element, where drawing will be performed. The second argument is the object to draw and the third one is the drawing option.; Here is complete running example ans source code:; import { httpRequest, draw, redraw, resize, cleanup } from 'https://root.cern/js/latest/modules/main.mjs';; let filename = ""https://root.cern/js/files/th2ul.json.gz"";; let obj = await httpRequest(filename, 'object');; draw(""drawing"", obj, ""lego"");; In very seldom cases one need to access painter object, created in draw() function. This can be done via handling Promise results like:; let painter = await draw(""drawing"", obj, ""colz"");; console.log('Object type in painter', painter.getClassName());; One is also able to update the drawing with a new version of the object:; // after some interval request object again; redraw(""drawing"", obj2, ""colz"");; The redraw function will call draw if the drawing was not performed before.; In the case when changing of HTML layout leads to resize of element with JSROOT drawing, one should call resize() to let JSROOT adjust drawing size. One should do:; resize(""drawing"");; As second argument one could specify exact size for draw elements like:; resize(""drawing"", { width: 500, height: 200 });; To correctly cleanup JSROOT drawings from HTML element, one should call:; cleanup(""drawing"");; 1.11.4 File API; JSROOT defines the TFile class, which can be used to access binary ROOT files. One should always remember that all I/O operations are asynchronous in JSROOT. Therefore promises are used to retrieve results when the I/O operation is completed. For example, reading an object from a file and displaying it will look like:; import { openFile, draw } from 'https://root.cern/js/latest/modules/main.mjs';; let filename = ""https://root.cern/js/files/hsimple.root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:27445,perform,performed,27445,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['perform'],['performed']
Performance," elements corresponding to each entries.; For each entry the number of elements is the multiplication of; TLeaf *leaf = dynamic_cast<TLeaf*>(branch->GetListOfLeaves()->At(0));; auto len = leaf->GetLen();; and the value in the BranchCount corresponding to that entry (can be obtained from branch->GetBranchCount()).; NoteThis interface is not meant to be exposed to end users, but rather it should be wrapped by higher-level interfaces. See TBranch::GetBulkEntries() for an alternative that also performs byte swapping. ; Definition at line 1586 of file TBranch.cxx. ◆ GetEntry(). Int_t TBranch::GetEntry ; (; Long64_t ; entry = 0, . Int_t ; getall = 0 . ). virtual . Read all leaves of entry and return total number of bytes read. ; The input argument ""entry"" is the entry number in the current tree. In case of a TChain, the entry number in the current Tree must be found before calling this function. For example:; TChain* chain = ...;; Long64_t localEntry = chain->LoadTree(entry);; branch->GetEntry(localEntry);; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TChain::LoadTreeLong64_t LoadTree(Long64_t entry) overrideFind the tree which contains entry, and set it as the current tree.Definition TChain.cxx:1324; The function returns the number of bytes read from the input buffer. If entry does not exist, the function returns 0. If an I/O error occurs, the function returns -1.; See IMPORTANT REMARKS in TTree::GetEntry. ; Reimplemented in THbookBranch, TBranchClones, TBranchElement, TBranchObject, and TBranchSTL.; Definition at line 1706 of file TBranch.cxx. ◆ GetEntryExport(). Int_t TBranch::GetEntryExport ; (; Long64_t ; entry, . Int_t ; getall, . TClonesArray * ; li, . Int_t ; nentries . ). virtual . Read all leaves of an entry and export buffers to real objects in a TClonesArray list. ; Returns total number of bytes read. ; Definition at line 1762 of file TBranch.cxx. ◆ GetEntryNumber()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:48992,Load,LoadTree,48992,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['Load'],['LoadTree']
Performance," emulated class, the list of emulated TRealData is built. TRealData* GetRealData(const char* name) const; -- Return pointer to TRealData element with name ""name"". Name can be a data member in the class itself,; one of its base classes, or a member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. TFunctionTemplate * GetFunctionTemplate(const char* name). const char * GetSharedLibs(); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. TList * GetListOfBases(); Return list containing the TBaseClass(es) of a class. TList * GetListOfEnums(Bool_t load = kTRUE); Return list containing the TEnums of a class. TList * GetListOfDataMembers(Bool_t load = kTRUE); Return list containing the TDataMembers of a class. TList * GetListOfFunctionTemplates(Bool_t load = kTRUE); Return list containing the TEnums of a class. TList * GetListOfMethods(Bool_t load = kTRUE); Return list containing the TMethods of a class.; If load is true, the list is populated with all the defined function; and currently instantiated function template. TCollection * GetListOfMethodOverloads(const char* name) const; Return the collection of functions named ""name"". const TList * GetListOfAllPublicMethods(Bool_t load = kTRUE); Returns a list of all public methods of this class and its base classes.; Refers to a subset of the methods in GetListOfMethods() so don't do; GetListOfAllPublicMethods()->Delete().; Algorithm used to get the list is:; - put all methods of the class in the list (also protected and private; ones).; - loop over all base classes and add only those methods not already in the; list (also protected and private ones).; - once finished, loop over resulting list and remove all private and; protected methods. TList * GetListOfAllPublicDataMembers(Bool_t load = kTRU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:37799,load,load,37799,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['load'],['load']
Performance," engine if necessary. ;  ; virtual double integrate () const;  Perform hybrid numerical/analytical integration over all real-valued dependents. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if current value is valid. ;  ; virtual double jacobianProduct () const;  Return product of jacobian terms originating from analytical integration. ;  ; const RooArgSet & parameters () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Intercept server redirects and reconfigure internal object accordingly. ;  ; virtual double sum () const;  Perform summation of list of category dependents to be integrated. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:50997,cache,cached,50997,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,2,['cache'],"['cache', 'cached']"
Performance," engine; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; static RooCategory*RooAbsHiddenReal::_dummyBlindState; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooUnblindPrecision.html:31096,cache,cache,31096,root/html526/RooUnblindPrecision.html,https://root.cern,https://root.cern/root/html526/RooUnblindPrecision.html,4,['cache'],['cache']
Performance," entries have been accepted and rejected by the filters. See the section on [named filters](#named-filters-and-cutflow-reports) for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. |; 139| Stats() | Return a TStatistic object filled with the input columns. |; 140| StdDev() | Return the unbiased standard deviation of the processed column values. |; 141| Sum() | Return the sum of the values in the column. If the type of the column is inferred, the return type is `double`, the type of the column otherwise. |; 142| Take() | Extract a column from the dataset as a collection of values, e.g. a `std::vector<float>` for a column of type `float`. |; 143 ; 144| **Instant action** | **Description** |; 145|---------------------|-----------------|; 146| Foreach() | Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; 147| ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 148| Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|; 149 ; 150 ; 151### Queries; 152 ; 153These operations do not modify the dataframe or book computations but simply return info",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:10582,multi-thread,multi-threading,10582,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['multi-thread'],['multi-threading']
Performance," entries have been accepted and rejected by the filters. See the section on [named filters](#named-filters-and-cutflow-reports) for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. |; 143| Stats() | Return a TStatistic object filled with the input columns. |; 144| StdDev() | Return the unbiased standard deviation of the processed column values. |; 145| Sum() | Return the sum of the values in the column. If the type of the column is inferred, the return type is `double`, the type of the column otherwise. |; 146| Take() | Extract a column from the dataset as a collection of values, e.g. a `std::vector<float>` for a column of type `float`. |; 147 ; 148| **Instant action** | **Description** |; 149|---------------------|-----------------|; 150| Foreach() | Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; 151| ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 152| Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|; 153 ; 154 ; 155### Queries; 156 ; 157These operations do not modify the dataframe or book computations but simply return info",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:11024,multi-thread,multi-threading,11024,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['multi-thread'],['multi-threading']
Performance," entry. Int_t LoadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Load basket buffers in memory without unziping.; This function is called by TTreeCloner.; The function returns 0 in case of success, 1 in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.). void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBasket.html:10767,cache,cache,10767,root/html528/TBasket.html,https://root.cern,https://root.cern/root/html528/TBasket.html,1,['cache'],['cache']
Performance," entry. Int_t LoadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Load basket buffers in memory without unziping.; This function is called by TTreeCloner.; The function returns 0 in case of success, 1 in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket&). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBasket.html:10550,cache,cache,10550,root/html526/TBasket.html,https://root.cern,https://root.cern/root/html526/TBasket.html,1,['cache'],['cache']
Performance," enum valueTObject; kProcessing enum valueTInterpreter; kRecoverable enum valueTInterpreter; kSingleKey enum valueTObject; kUnknown enum valueTInterpreter; kWithClassDefInline enum valueTInterpreter; kWriteDelete enum valueTObject; kZombie enum valueTObject; LazyFunctionCreatorAutoload(const std::string &mangled_name)TCling; LibraryLoaded(const void *dyLibHandle, const char *canonicalName)TCling; LibraryLoadingFailed(const std::string &, const std::string &, bool, bool)TCling; LibraryUnloaded(const void *dyLibHandle, const char *canonicalName)TCling; Load(const char *filenam, Bool_t system=kFALSE) finalTClingvirtual; LoadEnums(TListOfEnums &cl) const finalTClingvirtual; LoadFile(const char *path) const finalTClingvirtual; LoadFunctionTemplates(TClass *cl) const finalTClingvirtual; LoadLibraryMap(const char *rootmapfile=nullptr) finalTClingvirtual; LoadMacro(const char *filename, EErrorCode *error=nullptr) finalTClingvirtual; LoadPCM(std::string pcmFileNameFullPath)TClingprivate; LoadPCMImpl(TFile &pcmFile)TClingprivate; LoadText(const char *text) const finalTClingvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeInterpreterValue() const finalTClingvirtual; MakeZombie()TObjectinlineprotected; MapCppName(const char *) const finalTClingvirtual; MayNotUse(const char *method) constTObject; MembersMap_t typedefTInterpreter; MethodArgInfo_DefaultValue(MethodArgInfo_t *marginfo) const finalTClingvirtual; MethodArgInfo_Delete(MethodArgInfo_t *marginfo) const finalTClingvirtual; MethodArgInfo_Factory() const finalTClingvirtual; MethodArgInfo_Factory(MethodInfo_t *minfo) const finalTClingvirtual; MethodArgInfo_FactoryCopy(MethodArgInfo_t *marginfo) const finalTClingvirtual; MethodArgInfo_IsValid(MethodArgInfo_t *marginfo) const finalTClingvirtual; MethodArgInfo_Name(MethodArgInfo_t *marginfo) const finalTClingvirtual; MethodArgInfo_Next(MethodArgInfo_t *marginfo) const finalTClingvirtual; MethodArgInfo_Property(MethodArgInfo_t *marginfo) const finalTClingvirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling-members.html:23724,Load,LoadPCMImpl,23724,doc/master/classTCling-members.html,https://root.cern,https://root.cern/doc/master/classTCling-members.html,1,['Load'],['LoadPCMImpl']
Performance," enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; Log() constTMVA::Configurableinline; LooseOptionCheckingEnabled() constTMVA::Configurableinlineprotected; ls(Option_t *option="""") const overrideTNamedvirtual; MakeClass(const TString &datasetname, const TString &methodTitle="""") constTMVA::Factoryvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; MVector typedefTMVA::Factory; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; OptimizeAllMethods(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")TMVA::Factory; OptimizeAllMethodsForClassification(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")TMVA::Factoryinline; OptimizeAllMethodsForRegression(TString fomType=""ROCIntegral"", TString fitType=""FitGA"")TMVA::Factoryinline; Paint(Option_t *option="""")TObjectvirtual; ParseOptions()TMVA::Configurablevirtual; Pop()TObjectvirtual; Print(Option_t *option="""") const overrideTNamedvirtual; PrintHelpMessage(const TString &datasetname, const TString &methodTitle="""") constTMVA::Factory; PrintOptions() constTMVA::Configurable; Read(const char *name)TObjectvirtual; ReadOptionsFromStream(std::istream &istr)TMVA::Configurable; ReadOptionsFromXML(void *node)TMVA::Configurable; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; ResetSetFlag()TMVA::Configurableprotected; RootBaseDir()TMVA::Factoryinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory-members.html:9031,Optimiz,OptimizeAllMethods,9031,doc/master/classTMVA_1_1Factory-members.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html,1,['Optimiz'],['OptimizeAllMethods']
Performance," enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TQpVar ();  Default constructor. ;  ;  TQpVar (const TQpVar &another);  Copy constructor. ;  ;  TQpVar (Int_t nx, Int_t my, Int_t mz, TVectorD &ixlow, TVectorD &ixupp, TVectorD &iclow, TVectorD &icupp);  Constructor. ;  ;  TQpVar (TVectorD &x_in, TVectorD &s_in, TVectorD &y_in, TVectorD &z_in, TVectorD &v_in, TVectorD &gamma_in, TVectorD &w_in, TVectorD &phi_in, TVectorD &t_in, TVectorD &lambda_in, TVectorD &u_in, TVectorD &pi_in, TVectorD &ixlow_in, TVectorD &ixupp_in, TVectorD &iclow_in, TVectorD &icupp_in);  Constructor. ;  ;  ~TQpVar () override;  ; virtual Double_t FindBlocking (TQpVar *step, Double_t &primalValue, Double_t &primalStep, Double_t &dualValue, Double_t &dualStep, Int_t &firstOrSecond);  Performs the same function as StepBound, and supplies additional information about which component of the nonnegative variables is responsible for restricting alpha. ;  ; virtual Double_t GetMu ();  compute complementarity gap, obtained by taking the inner product of the complementary vectors and dividing by the total number of components computes mu = (t'lambda +u'pi + v'gamma + w'phi)/(mclow+mcupp+nxlow+nxupp) ;  ; virtual void InteriorPoint (Double_t alpha, Double_t beta);  Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. ;  ; virtual Bool_t IsInteriorPoint ();  Is the current position an interior point ? ;  ; virtual Double_t MuStep (TQpVar *step, Double_t alpha);  Compute the complementarity gap resulting from a step of length ""alpha"" along direction ""step"". ;  ; virtual void Negate ();  Perform a ""negate"" operation on all data vectors : x = -x. ;  ; virtual Double_t Norm1 ();  Return the sum of the vector-norm1's. ;  ; virtual Double_t NormInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:2060,Perform,Performs,2060,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['Perform'],['Performs']
Performance," enum. If a enum is unloaded after the TEnum; is created, the TEnum will be set to be invalid. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void Update(TDictionary::DeclId_t id). TEnum * GetEnum(const std::type_info &ti, ESearchAction sa). TEnum * GetEnum(const char* enumName, TEnum::ESearchAction sa = kALoadAndInterpLookup); Static function to retrieve enumerator from the ROOT's typesystem.; It has no side effect, except when the load flag is true. In this case,; the load of the library containing the scope of the enumerator is attempted.; There are two top level code paths: the enumerator is scoped or isn't.; If it is not, a lookup in the list of global enums is performed.; If it is, two lookups are carried out for its scope: one in the list of; classes and one in the list of protoclasses. If a scope with the desired name; is found, the enum is searched. If the scope is not found, and the load flag is; true, the aforementioned two steps are performed again after an autoload attempt; with the name of the scope as key is tried out.; If the interpreter lookup flag is false, the ListOfEnums objects are not treated; as such, but rather as THashList objects. This prevents any flow of information; from the interpreter into the ROOT's typesystem: a snapshot of the typesystem; status is taken. TEnum(); {}. TEnum(const char* name, void* info, TClass* cls). TClass * GetClass() const. const TSeqCollection * GetConstants() const. const TEnumConstant * GetConstant(const char* name) const. DeclId_t GetDeclId() const. void SetClass(TClass* cl). const char* GetQualifiedName() const; { return fQualName.c_str(); }. » Author: Bianca-Cristina Cristescu 09/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-02 15:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEnum.html:9373,load,load,9373,root/html604/TEnum.html,https://root.cern,https://root.cern/root/html604/TEnum.html,2,"['load', 'perform']","['load', 'performed']"
Performance," enum. If a enum is unloaded after the TEnum; is created, the TEnum will be set to be invalid. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void Update(TDictionary::DeclId_t id). TEnum * GetEnum(const std::type_info &ti, ESearchAction sa). TEnum * GetEnum(const char* enumName, TEnum::ESearchAction sa = kALoadAndInterpLookup); Static function to retrieve enumerator from the ROOT's typesystem.; It has no side effect, except when the load flag is true. In this case,; the load of the library containing the scope of the enumerator is attempted.; There are two top level code paths: the enumerator is scoped or isn't.; If it is not, a lookup in the list of global enums is performed.; If it is, two lookups are carried out for its scope: one in the list of; classes and one in the list of protoclasses. If a scope with the desired name; is found, the enum is searched. If the scope is not found, and the load flag is; true, the aforementioned two steps are performed again after an autoload attempt; with the name of the scope as key is tried out.; If the interpreter lookup flag is false, the ListOfEnums objects are not treated; as such, but rather as THashList objects. This prevents any flow of information; from the interpreter into the ROOT's typesystem: a snapshot of the typesystem; status is taken. TEnum(); {}. TEnum(const char* name, void* info, TClass* cls). TClass * GetClass() const. const TSeqCollection * GetConstants() const. const TEnumConstant * GetConstant(const char* name) const. DeclId_t GetDeclId() const. void SetClass(TClass* cl). const char* GetQualifiedName() const; { return fQualName.c_str(); }. » Author: Bianca-Cristina Cristescu 09/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 14:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEnum.html:9084,load,load,9084,root/html602/TEnum.html,https://root.cern,https://root.cern/root/html602/TEnum.html,2,"['load', 'perform']","['load', 'performed']"
Performance," error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodCalculator(); default constructor. ProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.05, const RooArgSet* nullParams = 0); constructor from pdf and parameters; the pdf must contain eventually the nuisance parameters. ProfileLikelihoodCalculator(RooAbsData& data, RooStats::ModelConfig& model, Double_t size = 0.05); construct from a ModelConfig. Assume data model.GetPdf() will provide full description of model including; constraint term on the nuisances parameters. ~ProfileLikelihoodCalculator(); destructor; cannot delete prod pdf because it will delete all the composing pdf's; if (fOwnPdf) delete fPdf;; fPdf = 0;. void DoReset() const; reset and clear fit result; to be called when a new model or data are set in the calculator. void DoGlobalFit() const; perform a global fit of the likelihood letting with all parameter of interest and; nuisance parameters; keep the list of fitted parameters. LikelihoodInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a profile likelihood ratio and uses that to construct a RooStats::LikelihoodInterval. HypoTestResult* GetHypoTest() const; Main interface to get a HypoTestResult.; It does two fits:; the first lets the null parameters float, so it's a maximum likelihood estimate; the second is to the null (fixing null parameters to their specified values): eg. a conditional maximum likelihood; the ratio of the likelihood at the conditional MLE to the MLE is the profile likelihood ratio.; Wilks' theorem is used to get p-values. ProfileLikelihoodCalculator(); default constructor (needed for I/O). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: ProfileLikelihoodCalculator.h 34109 2010-06-24 15:00:16Z mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html:6264,perform,perform,6264,root/html528/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html,1,['perform'],['perform']
Performance," error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodCalculator(); default constructor. ProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.05, const RooArgSet* nullParams = 0); constructor from pdf and parameters; the pdf must contain eventually the nuisance parameters. ProfileLikelihoodCalculator(RooAbsData& data, RooStats::ModelConfig& model, Double_t size = 0.05); construct from a ModelConfig. Assume data model.GetPdf() will provide full description of model including; constraint term on the nuisances parameters. ~ProfileLikelihoodCalculator(); destructor; cannot delete prod pdf because it will delete all the composing pdf's; if (fOwnPdf) delete fPdf;; fPdf = 0;. void DoReset() const; reset and clear fit result; to be called when a new model or data are set in the calculator. void DoGlobalFit() const; perform a global fit of the likelihood letting with all parameter of interest and; nuisance parameters; keep the list of fitted parameters. LikelihoodInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a profile likelihood ratio and uses that to construct a RooStats::LikelihoodInterval. HypoTestResult* GetHypoTest() const; Main interface to get a HypoTestResult.; It does two fits:; the first lets the null parameters float, so it's a maximum likelihood estimate; the second is to the null (fixing null parameters to their specified values): eg. a conditional maximum likelihood; the ratio of the likelihood at the conditional MLE to the MLE is the profile likelihood ratio.; Wilks' theorem is used to get p-values. ProfileLikelihoodCalculator(); default constructor (needed for I/O). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: ProfileLikelihoodCalculator.h 39391 2011-05-26 09:51:59Z mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html:6274,perform,perform,6274,root/html530/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html,2,['perform'],['perform']
Performance," errors, re-normalize errors using fitted chi2 values). The initial parameter values can be set directly in the input model function object. However, for setting parameter bounds and step sizes to values different than the automatically computed ones, one needs to use the ROOT::Fit::ParameterSetting class. This example code will set the lower/upper bounds for the first parameter and a lower bound for the second parameter; fitter.SetFunction( fitFunction, false);; fitter.Config().ParSettings(0).SetLimits(0,1.E6);; fitter.Config().ParSettings(2).SetLowerLimit(0);; Note that a ROOT::Fit::ParameterSettings objects exists for each fit parameter and it created by the ROOT::Fit::FitConfig class, after the model function has been set in the Fitter. Only when the function is set, the number of parameter is known and automatically the FitConfig creates the corresponding ParameterSetting objects.; When fitting, different minimizer can be used. The can be implemented in different libraries and loaded ar run time by the plug-in manager system of ROOT. Each different minimizer (e.g. Minuit, Minuit2, Fumili, etc.) consists of a different implementation of the ROOT::Math::Minimizer interface. Within the same minimizer, thus within the same class implementing the Minimizer interface, different algorithms can exist. For example in the case of Minuit, we have Migrad, Simplex or Minimize. The minimizer and its corresponding algorithm, when available, can be set by using the function FitConfig::SetMinimizer(""minimizerName"") or by using directly the ROOT:Math::MinimizerOptions class.; If the requested minimizer is not available in ROOT, the default one is used. The default minimizer type and algorithm can be specified by using the static function ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""minimizerName""); 5.7.4 Minimizer Libraries and Algorithms; The list of available minimizer libraries currently available in ROOT, with their corresponding available algorithms is the following o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:201278,load,loaded,201278,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," etype = RooAbsData::Poisson) const. Double_t weight(Int_t index) const. Bool_t isWeighted() const. Bool_t changeObservableName(const char* from, const char* to); Change observable name. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add one or more columns. RooArgSet* addColumns(const RooArgList& varList). RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge column-wise. void append(RooAbsDataStore& other); Add rows. Int_t numEntries() const. Double_t sumEntries() const; { return 0 ; }. void reset(). void attachBuffers(const RooArgSet& extObs); Buffer redirection routines used in inside RooAbsOptTestStatistics. void resetBuffers(). void setExternalWeightArray(Double_t* , Double_t* , Double_t* , Double_t* ); {}. void Print(Option_t* options = 0) const; Printing interface (human readable). void cacheArgs(const RooAbsArg* cacheOwner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Constant term optimizer interface. const RooAbsArg* cacheOwner(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars). void setArgStatus(const RooArgSet& set, Bool_t active). const RooArgSet& cachedVars() const; { return _cachedVars ; }. void resetCache(). void recalculateCache(const RooArgSet* , Int_t , Int_t , Int_t , Bool_t ); {}. void setDirtyProp(Bool_t flag); { _doDirtyProp = flag ; }. Bool_t dirtyProp() const; { return _doDirtyProp ; }. void checkInit() const; {}. Bool_t hasFilledCache() const; { return kFALSE ; }. const TTree* tree() const; { return 0 ; }. void dump(); {}. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). void forceCacheUpdate(); {}. » Last changed: Tue Jun 30 14:30:06 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsDataStore.html:12990,cache,cacheOwner,12990,root/html602/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html602/RooAbsDataStore.html,4,"['cache', 'load']","['cacheOwner', 'cachedVars', 'loadValues']"
Performance," etype = RooAbsData::Poisson) const. Double_t weight(Int_t index) const. Bool_t isWeighted() const. Bool_t changeObservableName(const char* from, const char* to); Change observable name. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add one or more columns. RooArgSet* addColumns(const RooArgList& varList). RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge column-wise. void append(RooAbsDataStore& other); Add rows. Int_t numEntries() const. Double_t sumEntries() const; { return 0 ; }. void reset(). void attachBuffers(const RooArgSet& extObs); Buffer redirection routines used in inside RooAbsOptTestStatistics. void resetBuffers(). void setExternalWeightArray(Double_t* , Double_t* , Double_t* , Double_t* ); {}. void Print(Option_t* options = 0) const; Printing interface (human readable). void cacheArgs(const RooAbsArg* cacheOwner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Constant term optimizer interface. const RooAbsArg* cacheOwner(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars). void setArgStatus(const RooArgSet& set, Bool_t active). const RooArgSet& cachedVars() const; { return _cachedVars ; }. void resetCache(). void recalculateCache(const RooArgSet* , Int_t , Int_t , Int_t , Bool_t ); {}. void setDirtyProp(Bool_t flag); { _doDirtyProp = flag ; }. Bool_t dirtyProp() const; { return _doDirtyProp ; }. void checkInit() const; {}. Bool_t hasFilledCache() const; { return kFALSE ; }. const TTree* tree() const; { return 0 ; }. void dump(); {}. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). void forceCacheUpdate(); {}. » Last changed: Tue Mar 10 17:13:58 2015 » Last generated: 2015-03-10 17:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsDataStore.html:11416,cache,cacheOwner,11416,root/html534/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html534/RooAbsDataStore.html,4,"['cache', 'load']","['cacheOwner', 'cachedVars', 'loadValues']"
Performance," evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize simultaneous p.d.f processing mode. Strip simultaneous; p.d.f into individual components, split dataset in subset; matching each component and create component test statistics for; each of them. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE); Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the inp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:37881,optimiz,optimization,37881,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,4,['optimiz'],['optimization']
Performance," eve-window ;  CTEveWindowSlotDescription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  CTF11-Dim function class ;  CTF12A projection of a TF2 along X or Y ;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMergeInfo;  CTFileMergerThis class provides file copy and merging services ;  CTFileOpenHandleClass holding info about the file being opened ;  CTFilePrefetchThe prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries ;  CTFileSet;  CTFileStager;  ►CTFitEditor;  CFuncParamData_tTF1Convolution object ;  CTFitParametersDialog;  CTFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O ;  CTFitResultPtrProvides an indirection to the TFitResult class and with a semantics iden",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:135248,cache,cache,135248,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['cache'],['cache']
Performance," event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the caceh information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:28698,Load,Load,28698,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['Load'],['Load']
Performance," event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:32695,Load,Load,32695,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['Load'],['Load']
Performance," events: 0.936 sec ; FDA_GA : [dataset] : Evaluation of FDA_GA on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.000508 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_FDA_GA.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_FDA_GA.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: MLPBNN for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ MLPBNN ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The MLP artificial neural network (ANN) is a traditional feed-; : forward multilayer perceptron implementation. The MLP has a user-; : defined hidden layer architecture, while the number of input (output); : nodes is determined by the input variables (output classes, i.e., ; : signal and one background). ; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Neural networks are stable and performing for a large variety of ; : linear and non-linear classification problems. However, in contrast; : to (e.g.) boosted decision trees, the user is advised to reduce the ; : number of input variables that have only little discrimination power. ; : ; : In the tests we have carried out so far, the MLP and ROOT networks; : (TMlpANN, interfaced via TMVA) performed equally well, with however; : a clear speed advantage for the MLP. The Clermont-Ferrand neural ; : net (CFMlpANN) exhibited worse classification performance in these; : tests, which is partly due to the slow convergence of its training; : (at least 10k training cycles are required to achieve approximately; : competitive results).; : ; : ␛[1mOvertraining: ␛[0monly the TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; :",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:42102,Perform,Performance,42102,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Perform', 'perform']","['Performance', 'performing']"
Performance," example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each; with no cache will imply 10s penalty where a local read of the 10 MBytes would; take about 1 second.; The TreeCache will try to prefetch all the buffers for the selected branches; such that instead of transfering 1000 buffers of 10 Kbytes, it will be able; to transfer one single large buffer of 10 Mbytes in one single transaction.; Not only the TreeCache minimizes the number of transfers, but in addition; it can sort the blocks to be read in increasing order such that the file; is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TreeCache in; reading ahead as much data as they can and return to the application; the maximum data specified in the cache and have the next chunk of data ready; when the next request comes. HOW TO USE the TreeCache. A few use cases are discussed below. A cache may be created with automatic sizing; when a TTree is used:. Caches are created and automatically sized for TTrees when TTreeCache.Size or; the environment variable ROOT_TTREECACHE_SIZE is set to a sizing factor. But there are many possible configurations where manual control may be wanted.; In some applications you know a priori the list of branches to read. In other; applications the analysis loop calls several layers of user functions where it; is impossible to predict a priori which branches will be used. This; is probably the most frequent case. In this case ROOT I/O will flag used; branches automatically when a branch buffer is read during the learning phase.; The TreeCache interface provides functions to instruct the cache about the used; branches if they are known a priori. In the examples below, portions of analysis; code are shown. The few statements involving the TreeCache are marked with //<<<. 1- with TTree::Draw. the TreeCache is automatically used by TTree::Draw. The function knows; which branches are used in the query and it puts automatically these branches; in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:3815,Cache,Caches,3815,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,3,['Cache'],['Caches']
Performance," expanded value of the alias. Search in the friends if any. TBranch* GetBranch(const char* name); -- Return pointer to the branch name in the current tree. Bool_t GetBranchStatus(const char* branchname) const; -- See TTree::GetReadEntry(). Long64_t GetChainEntryNumber(Long64_t entry) const; -- Return absolute entry number in the chain.; The input parameter entry is the entry number in; the current tree of this chain. Long64_t GetEntries() const; -- Return the total number of entries in the chain.; In case the number of entries in each tree is not yet known,; the offset table is computed. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); -- Get entry from the file to memory. getall = 0 : get only active branches; getall = 1 : get all branches. Return the total number of bytes read,; 0 bytes read indicates a failure. Long64_t GetEntryNumber(Long64_t entry) const; -- Return entry number corresponding to entry. if no TEntryList set returns entry; else returns entry #entry from this entry list and; also computes the global entry number (loads all tree headers). Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); -- Return entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TFile* GetFile() const; -- Return a pointer to the current file.; If no file is connected, the first file is automatically loaded. TLeaf* GetLeaf(const char* name); -- Return a pointer to the leaf name in the current tree. TObjArray* GetListOfBranches(); -- Return a pointer to the list of branches of the current tree. Warning: If there is no current TTree yet, this routine will open the; first in the chain. Returns 0 on failure. TObjArray* GetListOfLeaves(); -- Return a pointer to the list of leaves of the current tree. Warning: May set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TChain.html:35737,load,loads,35737,root/html528/TChain.html,https://root.cern,https://root.cern/root/html528/TChain.html,1,['load'],['loads']
Performance," expanded value of the alias. Search in the friends if any. TBranch* GetBranch(const char* name); -- Return pointer to the branch name in the current tree. Bool_t GetBranchStatus(const char* branchname) const; -- See TTree::GetReadEntry(). Long64_t GetChainEntryNumber(Long64_t entry) const; -- Return absolute entry number in the chain.; The input parameter entry is the entry number in; the current tree of this chain. Long64_t GetEntries() const; -- Return the total number of entries in the chain.; In case the number of entries in each tree is not yet known,; the offset table is computed. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); -- Get entry from the file to memory. getall = 0 : get only active branches; getall = 1 : get all branches. Return the total number of bytes read,; 0 bytes read indicates a failure. Long64_t GetEntryNumber(Long64_t entry) const; -- Return entry number corresponding to entry. if no TEntryList set returns entry; else returns entry #entry from this entry list and; also computes the global entry number (loads all tree headers). Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); -- Return entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TFile* GetFile() const; -- Return a pointer to the current file.; If no file is connected, the first file is automatically loaded. TLeaf* GetLeaf(const char* name); -- Return a pointer to the leaf name in the current tree. TObjArray* GetListOfBranches(); -- Return a pointer to the list of branches of the current tree. Warning: May set current tree!. Returns 1 on success and 0 on failure. TObjArray* GetListOfLeaves(); -- Return a pointer to the list of leaves of the current tree. Warning: May set the current tree!. Double_t GetMaximum(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:35183,load,loads,35183,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,1,['load'],['loads']
Performance," expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class RooConvGenContext;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:73636,Cache,CacheMode,73636,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,2,['Cache'],['CacheMode']
Performance," expressive in user code (see snippet below). Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will be executed sequentially. Callbacks are executed in the order they were registered. The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g. auto h = tdf.Histo1D(""x"");; // h.kOnce is 0; // decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:11617,concurren,concurrently,11617,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['concurren'],['concurrently']
Performance," fDim; ++d); checkx += x[d];; check += checkx * v;; ; if (fgDebug > 1) {; printf(""sparse%d"", fDim);; for (Int_t d = 0; d < fDim; ++d); printf(""[%d]"", x[d]);; printf("" = %g\n"", v);; }; }; }; check /= fNum;; if (fgDebug > 0); printf(""check %s%d = %g\n"", hist == kHist ? (fDim < 4 ? ""hist"" : ""arr"") : ""sparse"", fDim, check);; return check;; }; ; ; void sparsehist() {; // Exclude this macro also for Cling as this script requires exception support; // which is not supported in Cling as of v6.00/00.; #if defined (__CLING__); printf(""Please run this script in compiled mode by running \"".x sparsehist.C+\""\n"");; return;; #endif; ; TH2F* htime[TTimeHists::kNumHist][TTimeHists::kNumTime];; for (int h = 0; h < TTimeHists::kNumHist; ++h); for (int t = 0; t < TTimeHists::kNumTime; ++t) {; TString name(""htime_"");; if (h == 0) name += ""arr"";; else name += ""sp"";; if (t == 0) name += ""_r"";; ; TString title;; title.Form(""Throughput (fill,get) %s (%s, 1M entries/sec);dim;bins;1M entries/sec"", h == 0 ? ""TH1/2/3/nF"" : ""THnSparseF"", t == 0 ? ""real"" : ""CPU"");; htime[h][t] = new TH2F(name, title, 6, 0.5, 6.5, 10, 5, 105);; }; ; TH2F* hsparse_mem = new TH2F(""hsparse_mem"", ""Fractional memory usage;dim;bins;fraction of memory used"", 6, 0.5, 6.5, 10, 5, 105);; TH2F* hsparse_bins = new TH2F(""hsparse_bins"", ""Fractional number of used bins;dim;bins;fraction of filled bins"", 6, 0.5, 6.5, 10, 5, 105);; ; // TTimeHists::SetDebug(2);; Double_t max = -1.;; for (Int_t dim = 1; dim < 7; ++dim) {; printf(""Processing dimension %d"", dim);; for (Int_t bins = 10; bins <= 100; bins += 10) {; TTimeHists timer(dim, bins, /*num*/ 1000);; timer.Run();; for (int h = 0; h < TTimeHists::kNumHist; ++h) {; for (int t = 0; t < TTimeHists::kNumTime; ++t) {; Double_t time = timer.GetTime((TTimeHists::EHist)h, (TTimeHists::ETime)t);; if (time >= 0.); htime[h][t]->Fill(dim, bins, time);; }; }; hsparse_mem->Fill(dim, bins, timer.GetSparse()->GetSparseFractionMem());; hsparse_bins->Fill(dim, bins, timer.GetSparse()->GetSparseFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/sparsehist_8C.html:8364,Throughput,Throughput,8364,doc/master/sparsehist_8C.html,https://root.cern,https://root.cern/doc/master/sparsehist_8C.html,1,['Throughput'],['Throughput']
Performance," fEnums = nullptr;; 1701 ; 1702 if (fFuncTemplate); 1703 fFuncTemplate->Delete();; 1704 delete fFuncTemplate; fFuncTemplate = nullptr;; 1705 ; 1706 if (fMethod.load()); 1707 (*fMethod).Delete();; 1708 delete fMethod.load(); fMethod=nullptr;; 1709 ; 1710 if (fRealData); 1711 fRealData->Delete();; 1712 delete fRealData; fRealData=nullptr;; 1713 ; 1714 if (fStreamerInfo); 1715 fStreamerInfo->Delete();; 1716 delete fStreamerInfo; fStreamerInfo = nullptr;; 1717 ; 1718 if (fDeclFileLine >= -1); 1719 TClass::RemoveClass(this);; 1720 ; 1721 gCling->ClassInfo_Delete(fClassInfo);; 1722 fClassInfo=nullptr;; 1723 ; 1724 if (fClassMenuList); 1725 fClassMenuList->Delete();; 1726 delete fClassMenuList; fClassMenuList=nullptr;; 1727 ; 1728 fIsOffsetStreamerSet=kFALSE;; 1729 ; 1730 if ( fIsA ) delete fIsA;; 1731 ; 1732 if ( fRefProxy ) fRefProxy->Release();; 1733 fRefProxy = nullptr;; 1734 ; 1735 delete fStreamer;; 1736 delete fCollectionProxy;; 1737 delete fIsAMethod.load();; 1738 delete fSchemaRules;; 1739 if (fConversionStreamerInfo.load()) {; 1740 std::map<std::string, TObjArray*>::iterator it;; 1741 std::map<std::string, TObjArray*>::iterator end = (*fConversionStreamerInfo).end();; 1742 for( it = (*fConversionStreamerInfo).begin(); it != end; ++it ) {; 1743 delete it->second;; 1744 }; 1745 delete fConversionStreamerInfo.load();; 1746 }; 1747}; 1748 ; 1749////////////////////////////////////////////////////////////////////////////////; 1750 ; 1751namespace {; 1752 Int_t ReadRulesContent(FILE *f); 1753 {; 1754 // Read a class.rules file which contains one rule per line with comment; 1755 // starting with a #; 1756 // Returns the number of rules loaded.; 1757 // Returns -1 in case of error.; 1758 ; 1759 R__ASSERT(f!=nullptr);; 1760 TString rule(1024);; 1761 int c, state = 0;; 1762 Int_t count = 0;; 1763 ; 1764 while ((c = fgetc(f)) != EOF) {; 1765 if (c == 13) // ignore CR; 1766 continue;; 1767 if (c == '\n') {; 1768 if (state != 3) {; 1769 state = 0;; 1770 if (rule.Length() > 0) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:66345,load,load,66345,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['load']
Performance," fEnums = nullptr;; 1768 ; 1769 if (fFuncTemplate); 1770 fFuncTemplate->Delete();; 1771 delete fFuncTemplate; fFuncTemplate = nullptr;; 1772 ; 1773 if (fMethod.load()); 1774 (*fMethod).Delete();; 1775 delete fMethod.load(); fMethod=nullptr;; 1776 ; 1777 if (fRealData); 1778 fRealData->Delete();; 1779 delete fRealData; fRealData=nullptr;; 1780 ; 1781 if (fStreamerInfo); 1782 fStreamerInfo->Delete();; 1783 delete fStreamerInfo; fStreamerInfo = nullptr;; 1784 ; 1785 if (fDeclFileLine >= -1); 1786 TClass::RemoveClass(this);; 1787 ; 1788 gCling->ClassInfo_Delete(fClassInfo);; 1789 fClassInfo=nullptr;; 1790 ; 1791 if (fClassMenuList); 1792 fClassMenuList->Delete();; 1793 delete fClassMenuList; fClassMenuList=nullptr;; 1794 ; 1795 fIsOffsetStreamerSet=kFALSE;; 1796 ; 1797 if ( fIsA ) delete fIsA;; 1798 ; 1799 if ( fRefProxy ) fRefProxy->Release();; 1800 fRefProxy = nullptr;; 1801 ; 1802 delete fStreamer;; 1803 delete fCollectionProxy;; 1804 delete fIsAMethod.load();; 1805 delete fSchemaRules;; 1806 if (fConversionStreamerInfo.load()) {; 1807 std::map<std::string, TObjArray*>::iterator it;; 1808 std::map<std::string, TObjArray*>::iterator end = (*fConversionStreamerInfo).end();; 1809 for( it = (*fConversionStreamerInfo).begin(); it != end; ++it ) {; 1810 delete it->second;; 1811 }; 1812 delete fConversionStreamerInfo.load();; 1813 }; 1814}; 1815 ; 1816////////////////////////////////////////////////////////////////////////////////; 1817 ; 1818namespace {; 1819 Int_t ReadRulesContent(FILE *f); 1820 {; 1821 // Read a class.rules file which contains one rule per line with comment; 1822 // starting with a #; 1823 // Returns the number of rules loaded.; 1824 // Returns -1 in case of error.; 1825 ; 1826 R__ASSERT(f!=nullptr);; 1827 TString rule(1024);; 1828 int c, state = 0;; 1829 Int_t count = 0;; 1830 ; 1831 while ((c = fgetc(f)) != EOF) {; 1832 if (c == 13) // ignore CR; 1833 continue;; 1834 if (c == '\n') {; 1835 if (state != 3) {; 1836 state = 0;; 1837 if (rule.Length() > 0) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:69096,load,load,69096,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['load']
Performance," fGraphTime->GetEY()[i] = 0;; 353 }; 354}; 355 ; 356////////////////////////////////////////////////////////////////////////////////; 357/// Update the fBranchIndexCache collection to match the current TTree given; 358/// the ordered list of branch names.; 359 ; 360void TTreePerfStats::UpdateBranchIndices(TObjArray *branches); 361{; 362 fBranchIndexCache.clear();; 363 ; 364 for (int i = 0; i < branches->GetEntries(); ++i) {; 365 fBranchIndexCache.emplace((TBranch*)(branches->UncheckedAt(i)), i);; 366 }; 367}; 368 ; 369////////////////////////////////////////////////////////////////////////////////; 370/// Return the BasketInfo corresponding to the given branch and basket.; 371 ; 372TTreePerfStats::BasketInfo &TTreePerfStats::GetBasketInfo(TBranch *br, size_t basketNumber); 373{; 374 static BasketInfo fallback;; 375 ; 376 // First find the branch index.; 377 TFile *file = fTree->GetCurrentFile();; 378 if (!file); 379 return fallback;; 380 ; 381 TTreeCache *cache = dynamic_cast<TTreeCache *>(file->GetCacheRead(fTree));; 382 if (!cache); 383 return fallback;; 384 ; 385 Int_t index = -1;; 386 auto iter = fBranchIndexCache.find(br);; 387 if (iter == fBranchIndexCache.end()) {; 388 auto branches = cache->GetCachedBranches();; 389 for (Int_t i = 0; i < branches->GetEntries(); ++i) {; 390 if (br == branches->UncheckedAt(i)) {; 391 index = i;; 392 break;; 393 }; 394 }; 395 if (index < 0); 396 return fallback;; 397 fBranchIndexCache.emplace(br, index);; 398 } else {; 399 index = iter->second;; 400 }; 401 ; 402 return GetBasketInfo(index, basketNumber);; 403}; 404 ; 405////////////////////////////////////////////////////////////////////////////////; 406/// Return the BasketInfo corresponding to the given branch and basket.; 407 ; 408TTreePerfStats::BasketInfo &TTreePerfStats::GetBasketInfo(size_t index, size_t basketNumber); 409{; 410 if (fBasketsInfo.size() <= (size_t)index); 411 fBasketsInfo.resize(index + 1);; 412 ; 413 auto &brvec(fBasketsInfo[index]);; 414 if (brvec.size(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreePerfStats_8cxx_source.html:13193,cache,cache,13193,doc/master/TTreePerfStats_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreePerfStats_8cxx_source.html,2,['cache'],['cache']
Performance," fPtr(ptr), fAllocator(allocator) {}; 146 ; 147 void *GetPtr() const { return fPtr; }; 148 ; 149 TVirtualStreamerInfo *GetAllocator() const { return fAllocator; }; 150 ; 151 operator bool() const { return fPtr != nullptr; }; 152 };; 153 ; 154private:; 155 ; 156 ; 157 ; 158 class TDeclNameRegistry {; 159 // A class which is used to collect decl names starting from normalised; 160 // names (typedef resolution is excluded here, just string manipulation; 161 // is performed). At the heart of the implementation, an unordered set.; 162 public:; 163 TDeclNameRegistry(Int_t verbLevel=0);; 164 void AddQualifiedName(const char *name);; 165 Bool_t HasDeclName(const char *name) const;; 166 ~TDeclNameRegistry();; 167 private:; 168 Int_t fVerbLevel=0;; 169 std::unordered_set<std::string> fClassNamesSet;; 170 mutable std::atomic_flag fSpinLock; // MSVC doesn't support = ATOMIC_FLAG_INIT;; 171 };; 172 ; 173 class InsertTClassInRegistryRAII {; 174 // Trivial RAII used to insert names in the registry; 175 TClass::EState& fState;; 176 const char* fName;; 177 TDeclNameRegistry& fNoInfoOrEmuOrFwdDeclNameRegistry;; 178 public:; 179 InsertTClassInRegistryRAII(TClass::EState &state, const char *name, TDeclNameRegistry &emuRegistry);; 180 ~InsertTClassInRegistryRAII();; 181 };; 182 ; 183 // TClass objects can be created as a result of opening a TFile (in which; 184 // they are in emulated mode) or as a result of loading the dictionary for; 185 // the corresponding class. When a dictionary is loaded any pre-existing; 186 // emulated TClass is replaced by the one created/coming from the dictionary.; 187 // To have a reference that always point to the 'current' TClass object for; 188 // a given class, one should use a TClassRef.; 189 // TClassRef works by holding on to the fPersistentRef which is updated; 190 // atomically whenever a TClass is replaced. During the replacement the; 191 // value of fPersistentRef is set to zero, leading the TClassRef to call; 192 // TClass::GetClass which is als",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:6526,load,loading,6526,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,2,['load'],['loading']
Performance," fSEEKxbest;; 768 delete [] fSIMPy;; 769 delete [] fVERTq;; 770 delete [] fVERTs;; 771 delete [] fVERTpp;; 772 delete [] fCOMDplist;; 773 delete [] fPARSplist;; 774 ; 775 fEmpty = 1;; 776}; 777 ; 778////////////////////////////////////////////////////////////////////////////////; 779/// Evaluate the minimisation function; 780/// Input parameters:; 781/// - npar: number of currently variable parameters; 782/// - par: array of (constant and variable) parameters; 783/// - flag: Indicates what is to be calculated (see example below); 784/// - grad: array of gradients; 785/// Output parameters:; 786/// - fval: The calculated function value.; 787/// - grad: The (optional) vector of first derivatives).; 788///; 789/// The meaning of the parameters par is of course defined by the user,; 790/// who uses the values of those parameters to calculate their function value.; 791/// The starting values must be specified by the user.; 792/// Later values are determined by Minuit as it searches for the minimum; 793/// or performs whatever analysis is requested by the user.; 794///; 795/// Note that this virtual function may be redefined in a class derived from TMinuit.; 796/// The default function calls the function specified in SetFCN; 797///; 798/// Example of Minimisation function:; 799 ; 800Int_t TMinuit::Eval(Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag); 801{; 802/*; 803 if (flag == 1) {; 804 read input data,; 805 calculate any necessary constants, etc.; 806 }; 807 if (flag == 2) {; 808 calculate GRAD, the first derivatives of FVAL; 809 (this is optional); 810 }; 811 Always calculate the value of the function, FVAL,; 812 which is usually a chisquare or log likelihood.; 813 if (iflag == 3) {; 814 will come here only after the fit is finished.; 815 Perform any final calculations, output fitted data, etc.; 816 }; 817*/; 818// See concrete examples in TH1::H1FitChisquare, H1FitLikelihood; 819 ; 820 if (fFCN) (*fFCN)(npar,grad,fval,par,flag);; 821 return 0;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:29996,perform,performs,29996,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['perform'],['performs']
Performance," fVERTsDefinition TMinuit.h:121; TMinuit::fXsDouble_t * fXsDefinition TMinuit.h:78; TMinuit::fIcomndInt_t fIcomndDefinition TMinuit.h:144; TMinuit::mncontvirtual void mncont(Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf)Find points along a contour where FCN is minimum.Definition TMinuit.cxx:1395; TMinuit::fMaxintInt_t fMaxintDefinition TMinuit.h:40; TMinuit::fIsyssaInt_t fIsyssaDefinition TMinuit.h:133; TMinuit::fCfromTString fCfromDefinition TMinuit.h:166; TMinuit::mninitvirtual void mninit(Int_t i1, Int_t i2, Int_t i3)Main initialization member function for MINUIT.Definition TMinuit.cxx:4526; TMinuit::fDirinDouble_t * fDirinDefinition TMinuit.h:77; TMinuit::SetObjectFitvirtual void SetObjectFit(TObject *obj)Definition TMinuit.h:265; TMinuit::fLreporBool_t fLreporDefinition TMinuit.h:158; TMinuit::fCONTgccDouble_t * fCONTgccDefinition TMinuit.h:100; TMinuit::fEpsma2Double_t fEpsma2Definition TMinuit.h:57; TMinuit::mnseekvirtual void mnseek()Performs a rough (but global) minimization by monte carlo search.Definition TMinuit.cxx:6818; TMinuit::fVERTqDouble_t * fVERTqDefinition TMinuit.h:120; TMinuit::mncalfvirtual void mncalf(Double_t *pvec, Double_t &ycalf)Transform FCN to find further minima.Definition TMinuit.cxx:1070; TMinuit::Commandvirtual Int_t Command(const char *command)Execute a Minuit command.Definition TMinuit.cxx:626; TMinuit::mnpoutvirtual void mnpout(Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) constProvides the user with information concerning the current status.Definition TMinuit.cxx:6247; TMinuit::fEmptyInt_t fEmptyDefinition TMinuit.h:38; TMinuit::fYdircrDouble_t fYdircrDefinition TMinuit.h:66; TMinuit::fMaxpar1Int_t fMaxpar1Definition TMinuit.h:47; TMinuit::fMaxpar5Int_t fMaxpar5Definition TMinuit.h:44; TMinuit::fCOMDplistDouble_t * fCOMDplistDefinition TMinuit.h:123; TMinuit::fLnolimBool_t fLnolimDefinition TMinuit.h:160; TMinuit::Evalvirtual Int_t Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8h_source.html:25038,Perform,Performs,25038,doc/master/TMinuit_8h_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8h_source.html,1,['Perform'],['Performs']
Performance," false . ). static . Called by static dictionary initialization to register clang modules for headers. ; Calls TCling::RegisterModule() unless gCling is NULL, i.e. during startup, where the information is buffered in the static GetModuleHeaderInfoBuffer(). ; Definition at line 2535 of file TROOT.cxx. ◆ Remove(). TObject * TROOT::Remove ; (; TObject * ; obj). overridevirtual . Remove an object from the in-memory list. ; Since TROOT is global resource, this is lock protected. ; Reimplemented from TDirectory.; Definition at line 2618 of file TROOT.cxx. ◆ RemoveClass(). void TROOT::RemoveClass ; (; TClass * ; oldcl). Remove a class from the list and map of classes. ; This routine is deprecated, use TClass::RemoveClass directly. ; Definition at line 2628 of file TROOT.cxx. ◆ Reset(). void TROOT::Reset ; (; Option_t * ; option = """"). Delete all global interpreter objects created since the last call to Reset. ; If option=""a"" is set reset to startup context (i.e. unload also all loaded files, classes, structs, typedefs, etc.).; This function is typically used at the beginning (or end) of an unnamed macro to clean the environment.; IMPORTANT WARNING: Do not use this call from within any function (neither compiled nor interpreted. This should only be used from a unnamed macro (which starts with a { (curly braces) ). For example, using TROOT::Reset from within an interpreted function will lead to the unloading of the dictionary and source file, including the one defining the function being executed. ; Definition at line 2651 of file TROOT.cxx. ◆ ResetClassSaved(). void TROOT::ResetClassSaved ; (; ). Reset the ClassSaved status of all classes. ; Definition at line 1096 of file TROOT.cxx. ◆ RootVersionCode(). Int_t TROOT::RootVersionCode ; (; ). static . Return ROOT version code as defined in RVersion.h. ; Definition at line 2941 of file TROOT.cxx. ◆ SaveContext(). void TROOT::SaveContext ; (; ). Save the current interpreter context. ; Definition at line 2671 of file TROOT.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:73788,load,loaded,73788,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['load'],['loaded']
Performance," false . ). static . Called by static dictionary initialization to register clang modules for headers. ; Calls TCling::RegisterModule() unless gCling is NULL, i.e. during startup, where the information is buffered in the static GetModuleHeaderInfoBuffer(). ; Definition at line 2535 of file TROOT.cxx. ◆ Remove(). TObject * TROOT::Remove ; (; TObject * ; obj). overridevirtual . Remove an object from the in-memory list. ; Since TROOT is global resource, this is lock protected. ; Reimplemented from TDirectory.; Definition at line 2618 of file TROOT.cxx. ◆ RemoveClass(). void TROOT::RemoveClass ; (; TClass * ; oldcl). Remove a class from the list and map of classes. ; This routine is deprecated, use TClass::RemoveClass directly. ; Definition at line 2628 of file TROOT.cxx. ◆ Reset(). void TROOT::Reset ; (; Option_t * ; option = """"). Delete all global interpreter objects created since the last call to Reset. ; If option=""a"" is set reset to startup context (i.e. unload also all loaded files, classes, structs, typedefs, etc.).; This function is typically used at the beginning (or end) of an unnamed macro to clean the environment.; IMPORTANT WARNING: Do not use this call from within any function (neither compiled nor interpreted. This should only be used from a unnamed macro (which starts with a { (curly braces) ). For example, using TROOT::Reset from within an interpreted function will lead to the unloading of the dictionary and source file, including the one defining the function being executed. ; Definition at line 2651 of file TROOT.cxx. ◆ ResetClassSaved(). void TROOT::ResetClassSaved ; (; ). Reset the ClassSaved status of all classes. ; Definition at line 1096 of file TROOT.cxx. ◆ RootVersionCode(). Int_t TROOT::RootVersionCode ; (; ). static . Return ROOT version code as defined in RVersion.h. ; Definition at line 2945 of file TROOT.cxx. ◆ SaveContext(). void TROOT::SaveContext ; (; ). Save the current interpreter context. ; Definition at line 2671 of file TROOT.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:73757,load,loaded,73757,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['load'],['loaded']
Performance," feature of algorithm is the technique for step restriction. For an initial value of parameter \({\vec\theta}^0\) a parallelepiped \(P_0\) is built with the center at \({\vec\theta}^0\) and axes parallel to coordinate axes \(\theta_i\). The lengths of parallelepiped sides along i-th axis is \(2b_i\), where \(b_i\) is such a value that the functions \(f_j(\vec\theta)\) are quasi-linear all over the parallelepiped.; FUMILI takes into account simple linear inequalities in the form:; \[ \theta_i^{min}\le\theta_i\le\theta^{max}_i\]; They form parallelepiped \(P\) (\(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument.; 5.12 Neural Networks; 5.12.1 Introduction; Neural Networks are used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are image analysis, financial movements’ predictions and analysis, or sales forecast and product shipping optimization. In particles physics neural networks are mainly used for classification tasks (signal over background discrimination). A vast majority of commonly used neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package, which remains one of the fastest tools for neural networks studies.; 5.12.2 The MLP; The multilayer perceptron is a simple feed-forward network with the following structure showed on the left. It is made of neurons characterized by a bias and weighted links in between - let’s call those links synapses. The input neurons receive the inputs, normalize them and forward them to the first hidden layer. Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:230610,optimiz,optimization,230610,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['optimiz'],['optimization']
Performance," fetchValueTmp(block, ""MaxEpochs"", 2000);; 337 settings.testInterval = fetchValueTmp(block, ""TestRepetitions"", 7);; 338 settings.weightDecay = fetchValueTmp(block, ""WeightDecay"", 0.0);; 339 settings.learningRate = fetchValueTmp(block, ""LearningRate"", 1e-5);; 340 settings.momentum = fetchValueTmp(block, ""Momentum"", 0.3);; 341 settings.dropoutProbabilities = fetchValueTmp(block, ""DropConfig"", std::vector<Double_t>());; 342 ; 343 TString regularization = fetchValueTmp(block, ""Regularization"", TString(""NONE""));; 344 if (regularization == ""L1"") {; 345 settings.regularization = DNN::ERegularization::kL1;; 346 } else if (regularization == ""L2"") {; 347 settings.regularization = DNN::ERegularization::kL2;; 348 } else {; 349 settings.regularization = DNN::ERegularization::kNone;; 350 }; 351 ; 352 TString optimizer = fetchValueTmp(block, ""Optimizer"", TString(""ADAM""));; 353 settings.optimizerName = optimizer;; 354 if (optimizer == ""SGD"") {; 355 settings.optimizer = DNN::EOptimizer::kSGD;; 356 } else if (optimizer == ""ADAM"") {; 357 settings.optimizer = DNN::EOptimizer::kAdam;; 358 } else if (optimizer == ""ADAGRAD"") {; 359 settings.optimizer = DNN::EOptimizer::kAdagrad;; 360 } else if (optimizer == ""RMSPROP"") {; 361 settings.optimizer = DNN::EOptimizer::kRMSProp;; 362 } else if (optimizer == ""ADADELTA"") {; 363 settings.optimizer = DNN::EOptimizer::kAdadelta;; 364 } else {; 365 // Make Adam as default choice if the input string is; 366 // incorrect.; 367 settings.optimizer = DNN::EOptimizer::kAdam;; 368 settings.optimizerName = ""ADAM"";; 369 }; 370 // check for specific optimizer parameters; 371 std::vector<TString> optimParamLabels = {""_beta1"", ""_beta2"", ""_eps"", ""_rho""};; 372 //default values; 373 std::map<TString, double> defaultValues = {; 374 {""ADADELTA_eps"", 1.E-8}, {""ADADELTA_rho"", 0.95},; 375 {""ADAGRAD_eps"", 1.E-8},; 376 {""ADAM_beta1"", 0.9}, {""ADAM_beta2"", 0.999}, {""ADAM_eps"", 1.E-7},; 377 {""RMSPROP_eps"", 1.E-7}, {""RMSPROP_rho"", 0.9},; 378 };; 379 for (auto &pN : optimParamL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:13791,optimiz,optimizer,13791,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,2,['optimiz'],['optimizer']
Performance," fgClassTypedefHash) {; 1592 ; 1593 // Check for existing equivalent.; 1594 ; 1595 if (resolvedThis != fName) {; 1596 oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(resolvedThis);; 1597 if (oldcl && oldcl != this) {; 1598 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1599 ForceReload (oldcl);; 1600 }; 1601 }; 1602 TIter next( fgClassTypedefHash->GetListForObject(resolvedThis) );; 1603 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1604 if (resolvedThis != htmp->String()) continue;; 1605 oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(htmp->fOrigName); // gROOT->GetClass (htmp->fOrigName, kFALSE);; 1606 if (oldcl && oldcl != this) {; 1607 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1608 ForceReload (oldcl);; 1609 }; 1610 }; 1611 }; 1612 if (fClassInfo) {; 1613 SetTitle(gCling->ClassInfo_Title(fClassInfo));; 1614 if ( fDeclFileName == nullptr || fDeclFileName[0] == '\0' ) {; 1615 fDeclFileName = kUndeterminedClassInfoName;; 1616 // Missing interface:; 1617 // fDeclFileLine = gInterpreter->ClassInfo_FileLine( fClassInfo );; 1618 ; 1619 // But really do not want to set ImplFileLine as it is currently the; 1620 // marker of being 'loaded' or not (reminder loaded == has a TClass bootstrap).; 1621 }; 1622 }; 1623 ; 1624 if (persistentRef) {; 1625 fPersistentRef = persistentRef;; 1626 } else {; 1627 fPersistentRef = new TClass*;; 1628 }; 1629 *fPersistentRef = this;; 1630 ; 1631 if ( isStl || !strncmp(GetName(),""stdext::hash_"",13) || !strncmp(GetName(),""__gnu_cxx::hash_"",16) ) {; 1632 if (fState != kHasTClassInit) {; 1633 // If we have a TClass compiled initialization, we can safely assume that; 1634 // there will also be a collection proxy.; 1635 fCollectionProxy = TVirtualStreamerInfo::Factory()->GenEmulatedProxy( GetName(), silent );; 1636 if (fCollectionProxy) {; 1637 fSizeof = fCollectionProxy->Sizeof();; 1638 ; 1639 // Numeric Collections have implicit conversions:; 1640 GetSchemaRules(kTRUE);; 1641 ; 1642",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:62596,load,loaded,62596,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['load'],['loaded']
Performance," fgClassTypedefHash) {; 1659 ; 1660 // Check for existing equivalent.; 1661 ; 1662 if (resolvedThis != fName) {; 1663 oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(resolvedThis);; 1664 if (oldcl && oldcl != this) {; 1665 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1666 ForceReload (oldcl);; 1667 }; 1668 }; 1669 TIter next( fgClassTypedefHash->GetListForObject(resolvedThis) );; 1670 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1671 if (resolvedThis != htmp->String()) continue;; 1672 oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(htmp->fOrigName); // gROOT->GetClass (htmp->fOrigName, kFALSE);; 1673 if (oldcl && oldcl != this) {; 1674 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1675 ForceReload (oldcl);; 1676 }; 1677 }; 1678 }; 1679 if (fClassInfo) {; 1680 SetTitle(gCling->ClassInfo_Title(fClassInfo));; 1681 if ( fDeclFileName == nullptr || fDeclFileName[0] == '\0' ) {; 1682 fDeclFileName = kUndeterminedClassInfoName;; 1683 // Missing interface:; 1684 // fDeclFileLine = gInterpreter->ClassInfo_FileLine( fClassInfo );; 1685 ; 1686 // But really do not want to set ImplFileLine as it is currently the; 1687 // marker of being 'loaded' or not (reminder loaded == has a TClass bootstrap).; 1688 }; 1689 }; 1690 ; 1691 if (persistentRef) {; 1692 fPersistentRef = persistentRef;; 1693 } else {; 1694 fPersistentRef = new TClass*;; 1695 }; 1696 *fPersistentRef = this;; 1697 ; 1698 if ( isStl || !strncmp(GetName(),""stdext::hash_"",13) || !strncmp(GetName(),""__gnu_cxx::hash_"",16) ) {; 1699 if (fState != kHasTClassInit) {; 1700 // If we have a TClass compiled initialization, we can safely assume that; 1701 // there will also be a collection proxy.; 1702 fCollectionProxy = TVirtualStreamerInfo::Factory()->GenEmulatedProxy( GetName(), silent );; 1703 if (fCollectionProxy) {; 1704 fSizeof = fCollectionProxy->Sizeof();; 1705 ; 1706 // Numeric Collections have implicit conversions:; 1707 GetSchemaRules(kTRUE);; 1708 ; 1709",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:65347,load,loaded,65347,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['load'],['loaded']
Performance," file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisation (DataLoader *dataloader);  ;  ~HyperParameterOptimisation ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; TString GetFiiter ();  ; TString GetFOMType ();  ; UInt_t GetNumFolds ();  ; const HyperParameterOptimisationResult & GetResults () const;  ; virtual TClass * IsA () const;  ; void SetFitter (TString fitType);  ; void SetFOMType (TString ftype);  ; void SetNumFolds (UInt_t folds);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:1406,perform,perform,1406,doc/master/classTMVA_1_1HyperParameterOptimisation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html,1,['perform'],['perform']
Performance," file RooAbsArg.h. ◆ _dataToken. std::size_t RooAbsArg::_dataToken = std::numeric_limits<std::size_t>::max(). protected . In which workspace do I live, if any. ; Definition at line 708 of file RooAbsArg.h. ◆ _deleteWatch. bool RooAbsArg::_deleteWatch = false. protected . Definition at line 669 of file RooAbsArg.h. ◆ _eocache. RooExpensiveObjectCache* RooAbsArg::_eocache {nullptr}. mutableprotected . Prohibit server redirects – Debugging tool. ; Definition at line 696 of file RooAbsArg.h. ◆ _fast. bool RooAbsArg::_fast = false. mutableprotected . Definition at line 689 of file RooAbsArg.h. ◆ _inhibitDirty. bool RooAbsArg::_inhibitDirty. staticprotected . Definition at line 668 of file RooAbsArg.h. ◆ _isConstant. bool RooAbsArg::_isConstant = false. protected . De-duplicated name pointer. This will be equal for all objects with the same name. ; Definition at line 699 of file RooAbsArg.h. ◆ _localNoInhibitDirty. bool RooAbsArg::_localNoInhibitDirty = false. mutableprotected . Cached isConstant status. ; Definition at line 701 of file RooAbsArg.h. ◆ _myws. RooWorkspace* RooAbsArg::_myws = nullptr. mutableprotected . Prevent 'AlwaysDirty' mode for this node. ; Definition at line 706 of file RooAbsArg.h. ◆ _namePtr. const TNamed* RooAbsArg::_namePtr = nullptr. mutableprotected . Pointer to global cache manager for any expensive components created by this object. ; Definition at line 698 of file RooAbsArg.h. ◆ _operMode. OperMode RooAbsArg::_operMode = Auto. mutableprotected . Definition at line 688 of file RooAbsArg.h. ◆ _ownedComponents. RooArgSet* RooAbsArg::_ownedComponents = nullptr. protected . Definition at line 692 of file RooAbsArg.h. ◆ _prohibitServerRedirect. bool RooAbsArg::_prohibitServerRedirect = false. mutableprotected . Set of owned component. ; Definition at line 694 of file RooAbsArg.h. ◆ _proxyList. RooRefArray RooAbsArg::_proxyList. protected . Definition at line 611 of file RooAbsArg.h. ◆ _proxyListCache. ProxyListCache RooAbsArg::_proxyListCache. pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:109377,Cache,Cached,109377,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['Cache'],['Cached']
Performance, file TFile.h. ◆ fAsyncOpenStatus. EAsyncOpenStatus TFile::fAsyncOpenStatus {kAOSNotAsync}. protected . !Status of an asynchronous open request ; Definition at line 109 of file TFile.h. ◆ fBEGIN. Long64_t TFile::fBEGIN {0}. protected . First used byte in file. ; Definition at line 78 of file TFile.h. ◆ fBytesRead. Long64_t TFile::fBytesRead {0}. protected . Number of bytes read from this file. ; Definition at line 76 of file TFile.h. ◆ fBytesReadExtra. Long64_t TFile::fBytesReadExtra {0}. protected . Number of extra bytes (overhead) read by the readahead buffer. ; Definition at line 77 of file TFile.h. ◆ fBytesWrite. Long64_t TFile::fBytesWrite {0}. protected . Number of bytes written to this file. ; Definition at line 75 of file TFile.h. ◆ fCacheRead. TFileCacheRead* TFile::fCacheRead {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 98 of file TFile.h. ◆ fCacheReadMap. TMap* TFile::fCacheReadMap {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 99 of file TFile.h. ◆ fCacheWrite. TFileCacheWrite* TFile::fCacheWrite {nullptr}. protected . !Pointer to the write cache (if any) ; Definition at line 100 of file TFile.h. ◆ fClassIndex. TArrayC* TFile::fClassIndex {nullptr}. protected . !Index of TStreamerInfo classes written to this file ; Definition at line 94 of file TFile.h. ◆ fCompress. Int_t TFile::fCompress {0}. protected . Compression level and algorithm. ; Definition at line 84 of file TFile.h. ◆ fD. Int_t TFile::fD {-1}. protected . File descriptor. ; Definition at line 82 of file TFile.h. ◆ fEND. Long64_t TFile::fEND {0}. protected . Last used byte in file. ; Definition at line 79 of file TFile.h. ◆ fFree. TList* TFile::fFree {nullptr}. protected . Free segments linked list table. ; Definition at line 93 of file TFile.h. ◆ fgAsyncOpenRequests. TList * TFile::fgAsyncOpenRequests = nullptr. staticprotected . Definition at line 122 of file TFile.h. ◆ fgBytesRead. std::atomic< Long64_t > TFile::fgBytesRead ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:104265,cache,cache,104265,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['cache'],['cache']
Performance, file TFormula.h. ◆ fExpr. TString* ROOT::v5::TFormula::fExpr. protected . Definition at line 78 of file TFormula.h. ◆ fExprOptimized. TString* ROOT::v5::TFormula::fExprOptimized. protected . Number of operators after optimization. ; Definition at line 92 of file TFormula.h. ◆ fFunctions. TObjArray ROOT::v5::TFormula::fFunctions. protected . Definition at line 85 of file TFormula.h. ◆ fLinearParts. TObjArray ROOT::v5::TFormula::fLinearParts. protected . Definition at line 86 of file TFormula.h. ◆ fNames. TString* ROOT::v5::TFormula::fNames. protected . Definition at line 84 of file TFormula.h. ◆ fNconst. Int_t ROOT::v5::TFormula::fNconst. protected . Definition at line 74 of file TFormula.h. ◆ fNdim. Int_t ROOT::v5::TFormula::fNdim. protected . Definition at line 71 of file TFormula.h. ◆ fNoper. Int_t ROOT::v5::TFormula::fNoper. protected . Definition at line 73 of file TFormula.h. ◆ fNOperOptimized. Int_t ROOT::v5::TFormula::fNOperOptimized. protected . cache for information ; Definition at line 91 of file TFormula.h. ◆ fNpar. Int_t ROOT::v5::TFormula::fNpar. protected . Definition at line 72 of file TFormula.h. ◆ fNstring. Int_t ROOT::v5::TFormula::fNstring. protected . Definition at line 77 of file TFormula.h. ◆ fNumber. Int_t ROOT::v5::TFormula::fNumber. protected . Definition at line 75 of file TFormula.h. ◆ fNval. Int_t ROOT::v5::TFormula::fNval. protected . Definition at line 76 of file TFormula.h. ◆ fOper. Int_t* ROOT::v5::TFormula::fOper. private . Definition at line 80 of file TFormula.h. ◆ fOperOffset. TOperOffset* ROOT::v5::TFormula::fOperOffset. protected . [fNOperOptimized] List of operators. (See documentation for changes made at version 7) ; Definition at line 94 of file TFormula.h. ◆ fOperOptimized. Int_t* ROOT::v5::TFormula::fOperOptimized. protected . [fNOperOptimized] List of expressions ; Definition at line 93 of file TFormula.h. ◆ fOptimal. TFuncG ROOT::v5::TFormula::fOptimal. protected . [fNPar] predefined function ; Definition at line 96 of f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:53982,cache,cache,53982,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['cache'],['cache']
Performance," file TFormula_v5.cxx. ◆ StreamerNVirtual(). void ROOT::v5::TFormula::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 271 of file TFormula.h. ◆ StringToNumber(). Bool_t TFormula::StringToNumber ; (; Int_t ; code). protectedvirtual . Try to 'demote' a string into an array bytes. ; If this is not possible, return false. ; Reimplemented in TTreeFormula.; Definition at line 2201 of file TFormula_v5.cxx. ◆ Update(). virtual void ROOT::v5::TFormula::Update ; (; ). inlinevirtual . Definition at line 263 of file TFormula.h. Member Data Documentation. ◆ fAlreadyFound. TBits ROOT::v5::TFormula::fAlreadyFound. protected . Definition at line 88 of file TFormula.h. ◆ fConst. Double_t* ROOT::v5::TFormula::fConst. protected . Definition at line 82 of file TFormula.h. ◆ fExpr. TString* ROOT::v5::TFormula::fExpr. protected . Definition at line 78 of file TFormula.h. ◆ fExprOptimized. TString* ROOT::v5::TFormula::fExprOptimized. protected . Number of operators after optimization. ; Definition at line 92 of file TFormula.h. ◆ fFunctions. TObjArray ROOT::v5::TFormula::fFunctions. protected . Definition at line 85 of file TFormula.h. ◆ fLinearParts. TObjArray ROOT::v5::TFormula::fLinearParts. protected . Definition at line 86 of file TFormula.h. ◆ fNames. TString* ROOT::v5::TFormula::fNames. protected . Definition at line 84 of file TFormula.h. ◆ fNconst. Int_t ROOT::v5::TFormula::fNconst. protected . Definition at line 74 of file TFormula.h. ◆ fNdim. Int_t ROOT::v5::TFormula::fNdim. protected . Definition at line 71 of file TFormula.h. ◆ fNoper. Int_t ROOT::v5::TFormula::fNoper. protected . Definition at line 73 of file TFormula.h. ◆ fNOperOptimized. Int_t ROOT::v5::TFormula::fNOperOptimized. protected . cache for information ; Definition at line 91 of file TFormula.h. ◆ fNpar. Int_t ROOT::v5::TFormula::fNpar. protected . Definition at line 72 of file TFormula.h. ◆ fNstring. Int_t ROOT::v5::TFormula::fNstring. protected . Definition at line 7",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:53231,optimiz,optimization,53231,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['optimiz'],['optimization']
Performance," file TUnuran.cxx. ◆ InitBinomial(). bool TUnuran::InitBinomial ; (; unsigned int ; ntot, . double ; prob, . const std::string & ; method = ""dstd"" . ). Initialize method for the Binomial distribution. ; Used to generate poisson numbers for a constant parameters (n,p) of the Binomial distribution. Use after the method TUnuran::SampleDiscr to generate the numbers. The flag reinit perform a fast re-initialization when only the distribution parameters are changed in the subsequent calls. If the same TUnuran object is used to generate with other distributions it cannot be used. ; Definition at line 462 of file TUnuran.cxx. ◆ InitPoisson(). bool TUnuran::InitPoisson ; (; double ; mu, . const std::string & ; method = ""dstd"" . ). Initialize method for the Poisson distribution. ; Used to generate poisson numbers for a constant parameter mu of the Poisson distribution. Use after the method TUnuran::SampleDiscr to generate the numbers. The flag reinit perform a fast re-initialization when only the distribution parameters are changed in the subsequent calls. If the same TUnuran object is used to generate with other distributions it cannot be used. ; Definition at line 448 of file TUnuran.cxx. ◆ IsDistCont(). bool TUnuran::IsDistCont ; (; ); const. Return true for a univariate continuous distribution. ; Definition at line 390 of file TUnuran.cxx. ◆ IsDistDiscrete(). bool TUnuran::IsDistDiscrete ; (; ); const. Return true for a discrete distribution. ; Definition at line 398 of file TUnuran.cxx. ◆ IsDistEmpirical(). bool TUnuran::IsDistEmpirical ; (; ); const. Return true for an empirical distribution. ; Definition at line 402 of file TUnuran.cxx. ◆ IsDistMultiCont(). bool TUnuran::IsDistMultiCont ; (; ); const. Return true for a multivariate continuous distribution. ; Definition at line 394 of file TUnuran.cxx. ◆ MethodName(). const std::string & TUnuran::MethodName ; (; ); const. inline . used Unuran method ; Definition at line 281 of file TUnuran.h. ◆ operator=() [1/2]. TUnura",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuran.html:10973,perform,perform,10973,doc/master/classTUnuran.html,https://root.cern,https://root.cern/doc/master/classTUnuran.html,1,['perform'],['perform']
Performance," file TWebCanvas.h. ◆ fFixedSize. Bool_t TWebCanvas::fFixedSize {kFALSE}. protected . ! is canvas size fixed ; Definition at line 109 of file TWebCanvas.h. ◆ fHelpHandles. std::vector<std::unique_ptr<ROOT::RWebDisplayHandle> > TWebCanvas::fHelpHandles. protected . ! array of handles for help widgets ; Definition at line 117 of file TWebCanvas.h. ◆ fJsonComp. Int_t TWebCanvas::fJsonComp {0}. protected . ! compression factor for messages send to the client ; Definition at line 98 of file TWebCanvas.h. ◆ fLongerPolling. Bool_t TWebCanvas::fLongerPolling {kFALSE}. protected . ! when true, make longer polling in blocking operations ; Definition at line 100 of file TWebCanvas.h. ◆ fObjSelectSignal. ObjectSelectSignal_t TWebCanvas::fObjSelectSignal. protected . ! signal emitted when new object selected in the pad ; Definition at line 115 of file TWebCanvas.h. ◆ fPadClickedSignal. PadClickedSignal_t TWebCanvas::fPadClickedSignal. protected . ! signal emitted when simple mouse click performed on the pad ; Definition at line 113 of file TWebCanvas.h. ◆ fPadDblClickedSignal. PadClickedSignal_t TWebCanvas::fPadDblClickedSignal. protected . ! signal emitted when simple mouse click performed on the pad ; Definition at line 114 of file TWebCanvas.h. ◆ fPadsStatus. std::map<TPad*, PadStatus> TWebCanvas::fPadsStatus. protected . ! map of pads in canvas and their status flags ; Definition at line 86 of file TWebCanvas.h. ◆ fPaletteDelivery. Int_t TWebCanvas::fPaletteDelivery {1}. protected . ! colors palette delivery 0:never, 1:once, 2:always, 3:per subpad ; Definition at line 96 of file TWebCanvas.h. ◆ fPrimitivesMerge. Int_t TWebCanvas::fPrimitivesMerge {100}. protected . ! number of PS primitives, which will be merged together ; Definition at line 97 of file TWebCanvas.h. ◆ fProcessingData. Bool_t TWebCanvas::fProcessingData {kFALSE}. protected . ! flag used to prevent blocking methods when process data is invoked ; Definition at line 101 of file TWebCanvas.h. ◆ fReadOnly. Bool_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:42406,perform,performed,42406,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['perform'],['performed']
Performance," file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void StreamerNVirtual (TBuffer &Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:9887,cache,cache,9887,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,10,['cache'],['cache']
Performance," file of the Snapshot call. Thus, checkFile=false will; 3183 // prevent the function from trying to open a non-existent file.; 3184 auto newRDF = std::make_shared<RInterface<RLoopManager>>(ROOT::Detail::RDF::CreateLMFromTTree(; 3185 fullTreeName, filename, /*defaultColumns=*/columnListWithoutSizeColumns, /*checkFile=*/false));; 3186 ; 3187 // The Snapshot helper will use validCols (with aliases resolved) as input columns, and; 3188 // columnListWithoutSizeColumns (still with aliases in it, passed through snapHelperArgs) as output column names.; 3189 auto resPtr = CreateAction<RDFInternal::ActionTags::Snapshot, ColumnTypes...>(validCols, newRDF, snapHelperArgs,; 3190 fProxiedPtr);; 3191 ; 3192 if (!options.fLazy); 3193 *resPtr;; 3194 return resPtr;; 3195 }; 3196 ; 3197 ////////////////////////////////////////////////////////////////////////////; 3198 /// \brief Implementation of cache.; 3199 template <typename... ColTypes, std::size_t... S>; 3200 RInterface<RLoopManager> CacheImpl(const ColumnNames_t &columnList, std::index_sequence<S...>); 3201 {; 3202 const auto columnListWithoutSizeColumns = RDFInternal::FilterArraySizeColNames(columnList, ""Snapshot"");; 3203 ; 3204 // Check at compile time that the columns types are copy constructible; 3205 constexpr bool areCopyConstructible =; 3206 RDFInternal::TEvalAnd<std::is_copy_constructible<ColTypes>::value...>::value;; 3207 static_assert(areCopyConstructible, ""Columns of a type which is not copy constructible cannot be cached yet."");; 3208 ; 3209 RDFInternal::CheckTypesAndPars(sizeof...(ColTypes), columnListWithoutSizeColumns.size());; 3210 ; 3211 auto colHolders = std::make_tuple(Take<ColTypes>(columnListWithoutSizeColumns[S])...);; 3212 auto ds = std::make_unique<RLazyDS<ColTypes...>>(; 3213 std::make_pair(columnListWithoutSizeColumns[S], std::get<S>(colHolders))...);; 3214 ; 3215 RInterface<RLoopManager> cachedRDF(std::make_shared<RLoopManager>(std::move(ds), columnListWithoutSizeColumns));; 3216 ; 3217 return cachedRD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:182157,Cache,CacheImpl,182157,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['Cache'],['CacheImpl']
Performance," file. void Flush(); Synchronize a file's in-core and on-disk states. Bool_t FlushWriteCache(); Flush the write cache if active.; Return kTRUE in case of error. void FillBuffer(char*& buffer); Encode file output buffer.; The file output buffer contains only the FREE data record. Int_t GetBestBuffer() const; Return the best buffer size of objects on this file.; The best buffer size is estimated based on the current mean value; and standard deviation of all objects written so far to this file.; Returns mean value + one standard deviation. Float_t GetCompressionFactor(); Return the file compression factor.; Add total number of compressed/uncompressed bytes for each key.; return ratio of the two. Int_t GetErrno() const; Method returning errno. Is overriden in TRFIOFile. void ResetErrno() const; Method resetting the errno. Is overridden in TRFIOFile. TFileCacheRead * GetCacheRead(TObject* tree = 0) const; Return a pointer to the current read cache. TFileCacheWrite * GetCacheWrite() const; Return a pointer to the current write cache. Int_t GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read the logical record header starting at position first.; Maxbytes bytes are read into buf the function reads nread bytes; where nread is the minimum of maxbytes and the number of bytes; before the end of file. The function returns nread.; In output arguments:; nbytes : number of bytes in record; if negative, this is a deleted record; if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header; Note that the arguments objlen and keylen are returned only; if maxbytes >=16. Long64_t GetSize() const; Returns the current file size. Returns -1 in case the file could not; be stat'ed. const TList * GetStreamerInfoCache(); Returns the cached list of StreamerInfos used in this file. TList * GetStreamerInfoList(); Read the list of TStreamerInfo objects written to this f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFile.html:31179,cache,cache,31179,root/html534/TFile.html,https://root.cern,https://root.cern/root/html534/TFile.html,3,['cache'],['cache']
Performance," file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented from TFile.; Definition at line 232 of file TSQLFile.h. ◆ MakeSelectQuery(). TString TSQLFile::MakeSelectQuery ; (; TClass * ; cl). Produce SELECT statement which can be used to get all data of class cl in one SELECT statement. ; This statement also can be used to create VIEW by command like mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$ Where $CLASSSELECT$ argument should be produced by call f->MakeSelectQuery(TH1I::Class()); VIEWs supported by latest MySQL 5 and Oracle ; Definition at line 1215 of file TSQLFile.cxx. ◆ Map() [1/2]. void TSQLFile::Map ; (; ). inlinefinalvirtual . Reimplemented from TFile.; Definition at line 234 of file TSQL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:78142,load,load,78142,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['load'],['load']
Performance," file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented from TFile.; Definition at line 78 of file TXMLFile.h. ◆ Map() [1/2]. void TXMLFile::Map ; (; ). inlinefinalvirtual . Reimplemented from TFile.; Definition at line 80 of file TXMLFile.h. ◆ Map() [2/2]. void TXMLFile::Map ; (; Option_t * ; opt). inlinefinalvirtual . List the contents of a file sequentially. ; For each logical record found, it prints: Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; Example of output 20010404/150437 At:64 N=150 TFile; 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 20010404/15044",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:60616,load,load,60616,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['load'],['load']
Performance," file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:77497,load,load,77497,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['load'],['load']
Performance," file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCacheManager<RooAbsCacheElement>. class RooCacheManager<RooAbsCacheElement>: public RooAbsCache. Template class RooCacheManager manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to faciliate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). ; For efficiency reasons these normalization set pointer are; derefenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. RooCacheManager<RooAbsCacheElement>(Int_t maxSize = 10); RooCacheManager<RooAbsCacheElement>(RooAbsArg* owner, Int_t maxSize = 10); RooCacheManager<RooAbsCacheElement>(const RooCacheManager<RooAbsCacheElement>& other, RooAbsArg* owner = 0); virtual~RooCacheManager<RooAbsCacheElement>(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html:1161,cache,cached,1161,root/html526/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html,4,['cache'],['cached']
Performance," file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCacheManager<RooAbsCacheElement>. class RooCacheManager<RooAbsCacheElement>: public RooAbsCache. Template class RooCacheManager manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to faciliate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). ; For efficiency reasons these normalization set pointer are; derefenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. RooCacheManager<RooAbsCacheElement>(Int_t maxSize = 2); RooCacheManager<RooAbsCacheElement>(RooAbsArg* owner, Int_t maxSize = 2); RooCacheManager<RooAbsCacheElement>(const RooCacheManager<RooAbsCacheElement>& other, RooAbsArg* owner = 0); virtual~RooCacheManager<RooAbsCacheElement>(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); RooAbsCacheElement*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html:1161,cache,cached,1161,root/html534/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html,1,['cache'],['cached']
Performance," file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCacheManager<RooAbsCacheElement>. class RooCacheManager<RooAbsCacheElement>: public RooAbsCache. Template class RooCacheManager manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to faciliate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). ; For efficiency reasons these normalization set pointer are; derefenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. virtual~RooCacheManager<RooAbsCacheElement>(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); RooAbsCacheElement*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<RooAbsCacheElement>&operator=(const RooCacheManager<RooAbsCacheElement>&); virtual voidoper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_RooAbsCacheElement_.html:1161,cache,cached,1161,root/html602/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_RooAbsCacheElement_.html,2,['cache'],['cached']
Performance," filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tselfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCdfBoundaries(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidsetInterpolationOrder(Int_t order); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistPdf.html:29228,cache,cache,29228,root/html534/RooHistPdf.html,https://root.cern,https://root.cern/root/html534/RooHistPdf.html,3,['cache'],['cache']
Performance," first 100 tracks of each entry and plot Px. To do this we change the Loop method.; ...; if (fChain == 0) return;; Int_t nentries = Int_t(fChain->GetEntries());; TH1F *myHisto = new TH1F(""myHisto"",""fPx"", 100, -5,5);; TH1F *smallHisto = new TH1F(""small"",""fPx"", 100, -5,5);; ...; In the for-loop, we need to add another for-loop to go over all the tracks. In the outer for-loop, we get the entry and the number of tracks. In the inner for-loop, we fill the large histogram (myHisto) with all tracks and the small histogram (smallHisto) with the track if it is in the first 100.; ...; for (Int_t jentry=0; jentry<nentries;jentry++) {; GetEntry(jentry);; for (Int_t j = 0; j < 100; j++) {; myHisto->Fill(fTracks_fPx[j]);; if (j < 100) {; smallHisto->Fill(fTracks_fPx[j]);; }; }; }; ...; Outside of the for-loop, we draw both histograms on the same canvas.; ...; myHisto->Draw();; smallHisto->Draw(""Same"");; ...; Save these changes to MyClass.C and start a fresh root session. We will now load MyClass and experiment with its methods.; 12.21.5 Loading MyClass; The first step is to load the library and the class file. Then we can instantiate a MyClass object.; root[] .L libEvent.so; root[] .L MyClass.C; root[] MyClass m; Now we can get a specific entry and populate the event leaf. In the code snipped below, we get entry 0, and print the number of tracks (594). Then we get entry 1 and print the number of tracks (597).; root[] m.GetEntry(0); (int)57503; root[] m.fNtrack(); (Int_t)594; root[] m.GetEntry(1); (int)48045; root[] m.fNtrack(); (Int_t)597; Now we can call the Loop method, which will build and display the two histograms.; root[] m.Loop(); You should now see a canvas that looks like this. To conclude the discussion on MakeClass let us lists the steps that got us here. Call TTree::MakeClass, which automatically creates a class to loop over the tree.; Modify the MyClass::Loop() method in MyClass.C to fit your task.; Load and instantiate MyClass, and run MyClass::Loop(). 12.22 Using T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:642242,load,load,642242,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['load']
Performance," flag controls the consistency checks performed inspecting the AST. In some cases, we explicitly alter the datamembers in the typesystem with respect to the AST and therefore we must not enforce consistency. ; Definition at line 273 of file TListOfDataMembers.cxx. ◆ Get() [2/2]. TDictionary * TListOfDataMembers::Get ; (; DeclId_t ; id). Return (after creating it if necessary) the TDataMember describing the data member corresponding to the Decl 'id'. ; Definition at line 216 of file TListOfDataMembers.cxx. ◆ GetClass(). TClass * TListOfDataMembers::GetClass ; (; ); const. inline . Definition at line 90 of file TListOfDataMembers.h. ◆ IsA(). TClass * TListOfDataMembers::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from THashList.; Definition at line 102 of file TListOfDataMembers.h. ◆ IsLoaded(). Bool_t TListOfDataMembers::IsLoaded ; (; ); const. inline . Definition at line 79 of file TListOfDataMembers.h. ◆ Load(). void TListOfDataMembers::Load ; (; ). Load all the DataMembers known to the interpreter for the scope 'fClass' into this collection. ; Definition at line 399 of file TListOfDataMembers.cxx. ◆ MapObject(). void TListOfDataMembers::MapObject ; (; TObject * ; obj). private . Add a pair<id, object> to the map of data members and their ids. ; Definition at line 50 of file TListOfDataMembers.cxx. ◆ operator=(). TListOfDataMembers & TListOfDataMembers::operator= ; (; const TListOfDataMembers & ; ). privatedelete . ◆ RecursiveRemove(). void TListOfDataMembers::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Remove object from this collection and recursively remove the object from all other objects (and collections). ; This function overrides TCollection::RecursiveRemove that calls the Remove function. THashList::Remove cannot be called because it uses the hash value of the hash table. This hash value is not available anymore when RecursiveRemove is called from the TObject destructor. ; Reimplemented fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfDataMembers.html:30847,Load,Load,30847,doc/master/classTListOfDataMembers.html,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html,1,['Load'],['Load']
Performance," flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsHiddenReal.html:26439,cache,cache,26439,root/html534/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html534/RooAbsHiddenReal.html,3,['cache'],['cache']
Performance," flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). » Last changed: Fri Dec 2 14:26:31 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:41629,cache,cacheUniqueSuffix,41629,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,3,['cache'],"['cache', 'cacheUniqueSuffix']"
Performance," floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooPolyVar.html:32746,cache,cache,32746,root/html530/RooPolyVar.html,https://root.cern,https://root.cern/root/html530/RooPolyVar.html,1,['cache'],['cache']
Performance," floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; TString_rangeName; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRangeBoolean.html:32461,cache,cache,32461,root/html530/RooRangeBoolean.html,https://root.cern,https://root.cern/root/html530/RooRangeBoolean.html,1,['cache'],['cache']
Performance," fly if so requested. void setBinning(const RooAbsBinning& binning, const char* name = 0); Store given binning with this variable under the given name. void setMin(const char* name, Double_t value); Set the lower bound of the range with the given name to the given value; If name is a null pointer, set the lower bound of the default range. void setMax(const char* name, Double_t value); Set the upper bound of the range with the given name to the given value; If name is a null pointer, set the upper bound of the default range. void setRange(const char* name, Double_t min, Double_t max); Set the upper and lower lower bound of the range with the given name to the given values; If name is a null pointer, set the upper and lower bounds of the default range. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write value to stream. void syncCache(const RooArgSet* set = 0); Force the internal value cache to be up to date. inline RooErrorVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooErrorVar(*this,newname); }. Double_t evaluate() const; return error of input RooRealVar. void setVal(Double_t value); Set error of input RooRealVar to value. Bool_t isFundamental() const; Return kTRUE as we implement a fundamental type of AbsArg that can be stored in a dataset. void setMin(Double_t value); Set/get finite fit range limits. void setMax(Double_t value); Set upper bound of default range to value. void setRange(Double_t min, Double_t max); Set default ranges to [min,max]. void setBins(Int_t nBins); Set default binning to nBins uniform bins. void removeMin(const char* name = 0); Set infinite fit range limits. void removeMax(const char* name = 0); Remove upper bound from named binning, or default binning if name is null. void removeRange(const char* name = 0); Remove both upper and lower bounds from named binning, or; def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooErrorVar.html:39074,cache,cache,39074,root/html526/RooErrorVar.html,https://root.cern,https://root.cern/root/html526/RooErrorVar.html,4,['cache'],['cache']
Performance," follows a; simple naming convention: it has as a name the object class name; concatinated with 'Editor' (e.g. for TGraph objects the object; editor is TGraphEditor). The ROOT graphics editor can be activated by selecting 'Editor'; from the View canvas menu, or SetLine/Fill/Text/MarkerAttributes; from the context menu. The algorithm in use is simple: according to; the selected object <obj> in the canvas it looks for a class name; <obj>Editor. If a class with this name exists, the editor verifies; that this class derives from the base editor class TGedFrame.; It makes an instance of the object editor, scans all object base; classes searching the corresponding object editors and makes an; instance of the base class editor too. Once the object editor is in; place, it sets the user interface elements according to the object; state and is ready for interactions. When a new object of a; different class is selected, a new object editor is loaded in the; editor frame. The old one is cached in memory for potential reuse. Any created canvas will be shown with the editor if you have a; .rootrc file in your working directory containing the the line:; Canvas.ShowEditor: true. An created object can be set as selected in a macro by:; canvas->Selected(parent_pad_of_object, object, 1);; The first parameter can be the canvas itself or the pad containing; 'object'. //; /*. */. Function Members (Methods); public:. TGedEditor(TCanvas* canvas = 0, UInt_t width = 175, UInt_t height = 20); virtual~TGedEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidActivateEditor(TClass* cl, Bool_t recurse); voidActivateEditors(TList* bcl, Bool_t recurse); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedEditor.html:1595,cache,cached,1595,root/html528/TGedEditor.html,https://root.cern,https://root.cern/root/html528/TGedEditor.html,4,['cache'],['cached']
Performance," follows a; simple naming convention: it has as a name the object class name; concatinated with 'Editor' (e.g. for TGraph objects the object; editor is TGraphEditor). The ROOT graphics editor can be activated by selecting 'Editor'; from the View canvas menu, or SetLine/Fill/Text/MarkerAttributes; from the context menu. The algorithm in use is simple: according to; the selected object <obj> in the canvas it looks for a class name; <obj>Editor. If a class with this name exists, the editor verifies; that this class derives from the base editor class TGedFrame.; It makes an instance of the object editor, scans all object base; classes searching the corresponding object editors and makes an; instance of the base class editor too. Once the object editor is in; place, it sets the user interface elements according to the object; state and is ready for interactions. When a new object of a; different class is selected, a new object editor is loaded in the; editor frame. The old one is cached in memory for potential reuse. Any created canvas will be shown with the editor if you have a; .rootrc file in your working directory containing the the line:; Canvas.ShowEditor: true. An created object can be set as selected in a macro by:; canvas->Selected(parent_pad_of_object, object, 1);; The first parameter can be the canvas itself or the pad containing; 'object'. //; /*. */. Function Members (Methods); public:. virtual~TGedEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidActivateEditor(TClass* cl, Bool_t recurse); voidActivateEditors(TList* bcl, Bool_t recurse); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGedEditor.html:1595,cache,cached,1595,root/html602/TGedEditor.html,https://root.cern,https://root.cern/root/html602/TGedEditor.html,2,['cache'],['cached']
Performance," font library; static Int_tfgNumGlyphsnumber of glyphs in the string; static FT_Matrix*fgRotMatrixrotation matrix; static Bool_tfgSmoothinguse anti-aliasing (true when >8 planes, false otherwise); static Int_tfgSymbItaFontIdxSymbol italic font index; static Int_tfgTBlankWtrailing blanks width; static Int_tfgWidthstring width, used to compute X alignment. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TTF(); Cleanup TTF environment. void Init(); Initialise the TrueType fonts interface. void Cleanup(); Cleanup. Is called by the gCleanupTTF destructor. Short_t CharToUnicode(UInt_t code); Map char to unicode. Returns 0 in case no mapping exists. void GetTextExtent(UInt_t& w, UInt_t& h, char* text); Get width (w) and height (h) when text is horizontal. void GetTextAdvance(UInt_t& a, char* text); Get advance (a) when text is horizontal. void LayoutGlyphs(); Compute the glyps positions, fgAscent and fgWidth (needed for alignment).; Perform the Glyphs transformation.; Compute the string control box.; If required take the ""kerning"" into account.; SetRotation and PrepareString should have been called before. void PrepareString(const char* string); Put the characters in ""string"" in the ""glyphs"" array. void SetHinting(Bool_t state); Set hinting flag. void SetKerning(Bool_t state); Set kerning flag. void SetRotationMatrix(Float_t angle); Set the rotation matrix used to rotate the font outlines. void SetSmoothing(Bool_t state); Set smoothing (anti-aliasing) flag. Int_t SetTextFont(const char* fontname, Int_t italic = 0); Set text font to specified name.; font : font name; italic : the fonts should be slanted. Used for symbol font. Set text font to specified name. This function returns 0 if; the specified font is found, 1 if not. void SetTextFont(Font_t fontnumber); Set specified font.; List of the currently supported fonts (screen and PostScript). Font ID X11 TTF; 1 : times-medium-i-normal timesi.ttf; 2 : times-bold-r-normal timesbd.tt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTF.html:3074,Perform,Perform,3074,root/html528/TTF.html,https://root.cern,https://root.cern/root/html528/TTF.html,3,['Perform'],['Perform']
Performance, for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  ROOT::Math::VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  ROOT::Math::VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  ROOT::Math::VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  . Enumerations; enum  ROOT::Math::Integration::GKRule { ;   ROOT::Math::Integration::kGAUS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Integration.html:2003,perform,performing,2003,doc/master/group__Integration.html,https://root.cern,https://root.cern/doc/master/group__Integration.html,1,['perform'],['performing']
Performance," for a given background efficiency ; Definition at line 509 of file OptimizeConfigParameters.cxx. ◆ IsA(). virtual TClass * TMVA::OptimizeConfigParameters::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::IFitterTarget.; Definition at line 100 of file OptimizeConfigParameters.h. ◆ Log(). MsgLogger & TMVA::OptimizeConfigParameters::Log ; (; ); const. inlineprivate . Definition at line 98 of file OptimizeConfigParameters.h. ◆ optimize(). std::map< TString, Double_t > TMVA::OptimizeConfigParameters::optimize ; (; ). Definition at line 127 of file OptimizeConfigParameters.cxx. ◆ optimizeFit(). void TMVA::OptimizeConfigParameters::optimizeFit ; (; ). private . Definition at line 242 of file OptimizeConfigParameters.cxx. ◆ optimizeScan(). void TMVA::OptimizeConfigParameters::optimizeScan ; (; ). private . do the actual optimization using a simple scan method, i.e. ; calculate the FOM for different tuning paraemters and remember which one is gave the best FOM ; Definition at line 164 of file OptimizeConfigParameters.cxx. ◆ Streamer(). virtual void TMVA::OptimizeConfigParameters::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IFitterTarget. ◆ StreamerNVirtual(). void TMVA::OptimizeConfigParameters::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file OptimizeConfigParameters.h. Member Data Documentation. ◆ fAlreadyTrainedParCombination. std::map< std::vector<Double_t> , Double_t> TMVA::OptimizeConfigParameters::fAlreadyTrainedParCombination. private . save parameters for which the FOM is already known (GA seems to evaluate the same parameters several times) ; Definition at line 86 of file OptimizeConfigParameters.h. ◆ fFOMType. TString TMVA::OptimizeConfigParameters::fFOMType. private . the FOM type (Separation, ROC integra.. whatever you implemented.. ; Definition at line 87 of file OptimizeConfigParameters.h. ◆ fFOMvsIter. std::vector<Float_t> TMVA::Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:9750,Optimiz,OptimizeConfigParameters,9750,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Optimiz'],['OptimizeConfigParameters']
Performance," for all seeds; 2317 }; 2318 ; 2319 for (x = 0; x < range; x++) {; 2320 SROC = ROC[x];; 2321 for (uint32_t i = 0; i < VIBITS; ++i) {; 2322 if (x & (uint64_t(1) << i)) {; 2323 y = x & ~(1 << i);; 2324 std::bitset<VIBITS> ybitset(y);; 2325 // need at least one variable; 2326 // NOTE: if sub-seed is zero then is the special case; 2327 // that count in xbitset is 1; 2328 uint32_t ny = static_cast<uint32_t>( log(x - y) / 0.693147 ) ;; 2329 if (y == 0) {; 2330 importances[ny] = SROC - 0.5;; 2331 continue;; 2332 }; 2333 ; 2334 // getting ROC; 2335 SSROC = ROC[y];; 2336 importances[ny] += SROC - SSROC;; 2337 // cleaning information; 2338 }; 2339 }; 2340 }; 2341 std::cout << ""--- Variable Importance Results (All)"" << std::endl;; 2342 return GetImportance(nbits, importances, varNames);; 2343}; 2344 ; 2345static uint64_t sum(uint64_t i); 2346{; 2347 // add a limit for overflows; 2348 if (i > 62) return 0;; 2349 return static_cast<uint64_t>( std::pow(2, i + 1)) - 1;; 2350 // uint64_t _sum = 0;; 2351 // for (uint64_t n = 0; n < i; n++); 2352 // _sum += pow(2, n);; 2353 // return _sum;; 2354}; 2355 ; 2356////////////////////////////////////////////////////////////////////////////////; 2357 ; 2358TH1F *TMVA::Factory::EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle,; 2359 const char *theOption); 2360{; 2361 uint64_t x = 0;; 2362 uint64_t y = 0;; 2363 ; 2364 // getting number of variables and variable names from loader; 2365 const int nbits = loader->GetDataSetInfo().GetNVariables();; 2366 std::vector<TString> varNames = loader->GetDataSetInfo().GetListOfVariables();; 2367 ; 2368 if (nbits > 60) {; 2369 Log() << kERROR << ""Number of combinations is too large , is 2^"" << nbits << Endl;; 2370 return nullptr;; 2371 }; 2372 long int range = sum(nbits);; 2373 // std::cout<<range<<std::endl;; 2374 // vector to save importances; 2375 std::vector<Double_t> importances(nbits);; 2376 for (int i = 0; i < nbits; i++); 2377 importances[i] = 0;; 2378 ; 2379 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:98675,load,loader,98675,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,3,['load'],['loader']
Performance," for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*_dataPointer to original input dataset; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*_funcPointer to original input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:32088,cache,cache,32088,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,3,['cache'],['cache']
Performance," for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooArgSetRooAbsOptTestStatistic::_cachedNodes! List of nodes that are cached as constant expressions; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*RooAbsOptTestStatistic::_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; Bool_tRooAbsTestStatistic::_doOffsetApply interval value offset to control numeric precision?; static RooArgSet_emptySetSupports named argument constructor; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; RooDataHist::ErrorType_etypeError type store in associated RooDataHist; Double_tRooAbsTestStatistic::_evalCarry! carry of Kahan sum in evaluatePartition; Int_tRooAbsTestStatistic::_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooChi2Var::FuncMode_funcModeFunction, P.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChi2Var.html:39617,cache,cache,39617,root/html602/RooChi2Var.html,https://root.cern,https://root.cern/root/html602/RooChi2Var.html,4,['cache'],['cache']
Performance," for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4Binding_double_double_double_double_double_.html:33439,cache,cache,33439,root/html530/RooCFunction4Binding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4Binding_double_double_double_double_double_.html,1,['cache'],['cache']
Performance," for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset = 0) const; Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset = 0) const; Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedPdf.html:45577,cache,cache,45577,root/html534/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedPdf.html,1,['cache'],['cache']
Performance," for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsCachedReal(const char* name, const char* title, Int_t ipOrder = 0); Constructor. RooAbsCachedReal(const RooAbsCachedReal& other, const char* name = 0); Copy constructor. ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. RooAbsCachedReal(); {}. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. void disableCache(Bool_t flag); Switch to disable caching mechanism. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedReal.html:39656,cache,cache,39656,root/html602/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedReal.html,2,['cache'],['cache']
Performance," for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooRealProxy_offsetOffset of transformation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooRealProxy_slopeSlope of transformation; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooRealProxy_varInput observable; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooLinearVar.html:36861,cache,cache,36861,root/html526/RooLinearVar.html,https://root.cern,https://root.cern/root/html526/RooLinearVar.html,2,['cache'],['cache']
Performance, for local knn analysis ; Definition at line 138 of file MethodKNN.h. ◆ fModule. kNN::ModulekNN* TMVA::MethodKNN::fModule. private . ! module where all work is done ; Definition at line 121 of file MethodKNN.h. ◆ fnkNN. Int_t TMVA::MethodKNN::fnkNN. private . number of k-nearest neighbors ; Definition at line 123 of file MethodKNN.h. ◆ fScaleFrac. Float_t TMVA::MethodKNN::fScaleFrac. private . fraction of events used to compute variable width ; Definition at line 126 of file MethodKNN.h. ◆ fSigmaFact. Float_t TMVA::MethodKNN::fSigmaFact. private . scale factor for Gaussian sigma in Gaus. kernel ; Definition at line 127 of file MethodKNN.h. ◆ fSumOfWeightsB. Double_t TMVA::MethodKNN::fSumOfWeightsB. private . sum-of-weights for background training events ; Definition at line 119 of file MethodKNN.h. ◆ fSumOfWeightsS. Double_t TMVA::MethodKNN::fSumOfWeightsS. private . sum-of-weights for signal training events ; Definition at line 118 of file MethodKNN.h. ◆ fTreeOptDepth. Int_t TMVA::MethodKNN::fTreeOptDepth. private . number of binary tree levels used for optimization ; Definition at line 141 of file MethodKNN.h. ◆ fTrim. Bool_t TMVA::MethodKNN::fTrim. private . set equal number of signal and background events ; Definition at line 131 of file MethodKNN.h. ◆ fUseKernel. Bool_t TMVA::MethodKNN::fUseKernel. private . use polynomial kernel weight function ; Definition at line 132 of file MethodKNN.h. ◆ fUseLDA. Bool_t TMVA::MethodKNN::fUseLDA. private . use local linear discriminant analysis to compute MVA ; Definition at line 134 of file MethodKNN.h. ◆ fUseWeight. Bool_t TMVA::MethodKNN::fUseWeight. private . use weights to count kNN ; Definition at line 133 of file MethodKNN.h. Libraries for TMVA::MethodKNN:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodKNN.h; tmva/tmva/src/MethodKNN.cxx. TMVAMethodKNN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html:38319,optimiz,optimization,38319,doc/master/classTMVA_1_1MethodKNN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html,1,['optimiz'],['optimization']
Performance," for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); gives,. {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompBase.html:1706,perform,performed,1706,root/html528/TDecompBase.html,https://root.cern,https://root.cern/root/html528/TDecompBase.html,6,['perform'],['performed']
Performance," for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedPdf(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset); Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset); Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedPdf.html:41587,cache,cache,41587,root/html526/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedPdf.html,1,['cache'],['cache']
Performance," for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; RooRealProxy_realVarRealVar with the original error; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooErrorVar(const char* name, const char* title, const RooRealVar& input); Construct an lvalue variable representing the erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooErrorVar.html:39547,cache,cache,39547,root/html534/RooErrorVar.html,https://root.cern,https://root.cern/root/html534/RooErrorVar.html,2,['cache'],['cache']
Performance," for other coordinates,...Definition DataRange.cxx:124; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetParamsSettingsvoid SetParamsSettings(unsigned int npar, const double *params, const double *vstep=nullptr)set the parameter settings from number of parameters and a vector of values and optionally step value...Definition FitConfig.cxx:135; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/combinedFit_8C.html:6582,perform,performing,6582,doc/master/combinedFit_8C.html,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html,2,['perform'],['performing']
Performance," for processing; Int_tTEventIter::fEventListPos! current position in the eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile); Load a tree from s TDSetElement. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TEventIter.h 30859 2009-10-24 14:53:07Z ganis $ » Last generated: 2010-12-08 16:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEventIterTree.html:7405,cache,cache,7405,root/html528/TEventIterTree.html,https://root.cern,https://root.cern/root/html528/TEventIterTree.html,3,"['Load', 'cache']","['Load', 'cache']"
Performance," for s in samples:; if ""data"" in s:; df[s] = df[s].Define(""weight"", ""1.0""); else:; df[s] = df[s].Define(""weight"", ""scaleFactor_ELE * scaleFactor_MUON * scaleFactor_LepTRIGGER * scaleFactor_PILEUP * mcWeight * {} / {} * {}"".format(xsecs[s], sumws[s], lumi)); ; # Compute transverse mass of the W boson using the lepton and the missing transverse energy and make a histogram; ROOT.gInterpreter.Declare(""""""; float ComputeTransverseMass(float met_et, float met_phi, float lep_pt, float lep_eta, float lep_phi, float lep_e); {; ROOT::Math::PtEtaPhiEVector met(met_et, 0, met_phi, met_et);; ROOT::Math::PtEtaPhiEVector lep(lep_pt, lep_eta, lep_phi, lep_e);; return (met + lep).Mt() / 1000.0;; }; """"""); ; histos = {}; for s in samples:; df[s] = df[s].Define(""mt_w"", ""ComputeTransverseMass(met_et, met_phi, lep_pt[idx], lep_eta[idx], lep_phi[idx], lep_E[idx])""); histos[s] = df[s].Histo1D(ROOT.RDF.TH1DModel(s, ""mt_w"", 24, 60, 180), ""mt_w"", ""weight""); ; # Run the event loop and merge histograms of the respective processes; ; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.; ROOT.RDF.RunGraphs([histos[s] for s in samples]); ; def merge_histos(label):; h = None; for i, d in enumerate(files[label]):; t = histos[d[1]].GetValue(); if i == 0: h = t.Clone(); else: h.Add(t); h.SetNameTitle(label, label); return h; ; data = merge_histos(""data""); wjets = merge_histos(""wjets""); zjets = merge_histos(""zjets""); ttbar = merge_histos(""ttbar""); diboson = merge_histos(""diboson""); singletop = merge_histos(""singletop""); ; # Create the plot; ; # Set styles; ROOT.gROOT.SetStyle(""ATLAS""); ; # Create canvas; c = ROOT.TCanvas(""c"", """", 600, 600); c.SetTickx(0); c.SetTicky(0); c.SetLogy(); ; # Draw stack with MC contributions; stack = ROOT.THStack(); for h, color in zip(; [singletop, diboson, tt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html:5899,concurren,concurrently,5899,doc/master/df105__WBosonAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html,1,['concurren'],['concurrently']
Performance," for the object ownership policy of the underlying (user) data. ; Reimplemented in THbookTree, TChain, and TTreeSQL.; Definition at line 5638 of file TTree.cxx. ◆ GetEntryList(). TEntryList * TTree::GetEntryList ; (; ). virtual . Returns the entry list assigned to this tree. ; Definition at line 5854 of file TTree.cxx. ◆ GetEntryNumber(). Long64_t TTree::GetEntryNumber ; (; Long64_t ; entry); const. virtual . Return entry number corresponding to entry. ; if no TEntryList set returns entry else returns the entry number corresponding to the list index=entry ; Reimplemented in TChain.; Definition at line 5865 of file TTree.cxx. ◆ GetEntryNumberWithBestIndex(). Long64_t TTree::GetEntryNumberWithBestIndex ; (; Long64_t ; major, . Long64_t ; minor = 0 . ); const. virtual . Return entry number corresponding to major and minor number. ; Note that this function returns only the entry number, not the data To read the data corresponding to an entry number, use TTree::GetEntryWithIndex the BuildIndex function has created a table of Long64_t* of sorted values corresponding to val = major<<31 + minor; The function performs binary search in this sorted table. If it finds a pair that matches val, it returns directly the index in the table. If an entry corresponding to major and minor is not found, the function returns the index of the major,minor pair immediately lower than the requested value, ie it will return -1 if the pair is lower than the first entry in the index.; See also GetEntryNumberWithIndex ; Definition at line 5890 of file TTree.cxx. ◆ GetEntryNumberWithIndex(). Long64_t TTree::GetEntryNumberWithIndex ; (; Long64_t ; major, . Long64_t ; minor = 0 . ); const. virtual . Return entry number corresponding to major and minor number. ; Note that this function returns only the entry number, not the data To read the data corresponding to an entry number, use TTree::GetEntryWithIndex the BuildIndex function has created a table of Long64_t* of sorted values corresponding to val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:156913,perform,performs,156913,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['perform'],['performs']
Performance," for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerceptron.cxx. ◆ BFGSDir(). void TMultiLayerPerceptron::BFGSDir ; (; TMatrixD & ; bfgsh, . Double_t * ; dir . ). protected . Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ; Definition at line 2494 of file TMultiLayerPerceptron.cxx. ◆ BuildFirstLayer(). void TMultiLayerPerceptron::BuildFirstLayer ; (; TString & ; input). private . Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ; Definition at line 1401 of file TMultiLayerPerceptron.cxx. ◆ BuildHiddenLayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:34047,perform,performance,34047,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['perform'],['performance']
Performance," for the special case xmargin <=0 and ymargin <=0); color is the color of the new pads. If 0, color is the canvas color.; Pads are automatically named canvasname_n where n is the division number; starting from top left pad.; Example if canvasname=c1 , nx=2, ny=3. . . .; . . .; . . .; . c1_1 . c1_2 .; . . .; . . .; . . . . . .; . . .; . . .; . c1_3 . c1_4 .; . . .; . . .; . . . . . .; . . .; . . .; . c1_5 . c1_6 .; . . .; . . . Once a pad is divided into subpads, one can set the current pad; to a subpad with a given division number as illustrated above; with TPad::cd(subpad_number).; For example, to set the current pad to c1_4, one can do:; c1->cd(4). Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to set attributes; of the current pad.; Note3: in case xmargin <=0 and ymargin <= 0, there is no space; between pads. The current pad margins are recomputed to; optimize the layout. void DivideSquare(Int_t n, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0); ""n"" is the total number of sub-pads. The number of sub-pads along the X; and Y axis are computed according to the square root of n. void Draw(Option_t* option = """"); Draw Pad in Current pad (re-parent pad if necessary). void DrawClassObject(const TObject* obj, Option_t* option = """"); Draw class inheritance tree of the class to which obj belongs.; If a class B inherits from a class A, description of B is drawn; on the right side of description of A.; Member functions overridden by B are shown in class A with a blue line; crossing-out the corresponding member function.; The following picture is the class inheritance tree of class TPaveLabel:. /*; ; */. void DrawCrosshair(); Function called to draw a crosshair in the canvas. Example:; Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.SetCrosshair();; When moving the mouse in the canvas, a crosshair i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:38629,optimiz,optimize,38629,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,3,['optimiz'],['optimize']
Performance," for the special case xmargin <=0 and ymargin <=0); color is the color of the new pads. If 0, color is the canvas color.; Pads are automatically named canvasname_n where n is the division number; starting from top left pad.; Example if canvasname=c1 , nx=2, ny=3. . . .; . . .; . . .; . c1_1 . c1_2 .; . . .; . . .; . . . . . .; . . .; . . .; . c1_3 . c1_4 .; . . .; . . .; . . . . . .; . . .; . . .; . c1_5 . c1_6 .; . . .; . . . Once a pad is divided into subpads, one can set the current pad; to a subpad with a given division number as illustrated above; with TPad::cd(subpad_number).; For example, to set the current pad to c1_4, one can do:; c1->cd(4). Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to set attributes; of the current pad.; Note3: in case xmargin <=0 and ymargin <= 0, there is no space; between pads. The current pad margins are recomputed to; optimize the layout. void Draw(Option_t* option = """"); Draw Pad in Current pad (re-parent pad if necessary). void DrawClassObject(const TObject* obj, Option_t* option = """"); Draw class inheritance tree of the class to which obj belongs.; If a class B inherits from a class A, description of B is drawn; on the right side of description of A.; Member functions overridden by B are shown in class A with a blue line; crossing-out the corresponding member function.; The following picture is the class inheritance tree of class TPaveLabel:. /*; ; */. void DrawCrosshair(); Function called to draw a crosshair in the canvas. Example:; Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.SetCrosshair();; When moving the mouse in the canvas, a crosshair is drawn. if the canvas fCrosshair = 1 , the crosshair spans the full canvas; if the canvas fCrosshair > 1 , the crosshair spans only the pad. TH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:37221,optimiz,optimize,37221,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,3,['optimiz'],['optimize']
Performance," for the tree (see TTree::BuildIndex). TTree * CopyTree(const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); copy a Tree with selection; make a clone of this Tree header.; then copy the selected entries. selection is a standard selection expression (see TTreePlayer::Draw); option is reserved for possible future use; nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). IMPORTANT: The copied tree stays connected with this tree until this tree; is deleted. In particular, any changes in branch addresses; in this tree are forwarded to the clone trees. Any changes; made to the branch addresses of the copied trees are over-ridden; anytime this tree changes its branch addresses.; Once this tree is deleted, all the addresses of the copied tree; are reset to their default values. The following example illustrates how to copy some events from the Tree; generated in $ROOTSYS/test/Event. gSystem->Load(""libEvent"");; TFile f(""Event.root"");; TTree *T = (TTree*)f.Get(""T"");; Event *event = new Event();; T->SetBranchAddress(""event"",&event);; TFile f2(""Event2.root"",""recreate"");; TTree *T2 = T->CopyTree(""fNtrack<595"");; T2->Write();. void DeleteSelectorFromFile(); Delete any selector created by this object.; The selector has been created using TSelector::GetSelector(file). Long64_t DrawScript(const char* wrapperPrefix, const char* macrofilename, const char* cutfilename, Option_t* option, Long64_t nentries, Long64_t firstentry); Draw the result of a C++ script. The macrofilename and optionally cutfilename are assumed to contain; at least a method with the same name as the file. The method; should return a value that can be automatically cast to; respectively a double and a boolean. Both methods will be executed in a context such that the; branch names can be used as C++ variables. This is; accomplished by generating a TTreeProxy (see MakeProxy); and including the files in the proper location. If th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:17198,Load,Load,17198,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,6,['Load'],['Load']
Performance," for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:57595,Cache,CacheMode,57595,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,38,['Cache'],['CacheMode']
Performance," for which the list was not loaded fully at; 3697 // first use.; 3698 R__LOCKGUARD(gROOTMutex);; 3699 temp->Load();; 3700 }; 3701 }; 3702 return temp;; 3703 }; 3704 ; 3705 if (!requestListLoading) {; 3706 if (fProperty == -1) Property();; 3707 R__LOCKGUARD(gInterpreterMutex);; 3708 if (fEnums.load()) {; 3709 return fEnums.load();; 3710 }; 3711 ; 3712 if (IsFromRootCling()) // rootcling is single thread (this save some space in the rootpcm).; 3713 fEnums = new TListOfEnums(this);; 3714 else; 3715 fEnums = new TListOfEnumsWithLock(this);; 3716 return fEnums;; 3717 }; 3718 ; 3719 R__LOCKGUARD(gInterpreterMutex);; 3720 if (fEnums.load()) {; 3721 (*fEnums).Load();; 3722 return fEnums.load();; 3723 }; 3724 if (fProperty == -1) Property();; 3725 if ( (kIsClass | kIsStruct | kIsUnion) & fProperty) {; 3726 // For this case, the list will be immutable; 3727 temp = new TListOfEnums(this);; 3728 } else {; 3729 //namespaces can have enums added to them; 3730 temp = new TListOfEnumsWithLock(this);; 3731 }; 3732 temp->Load();; 3733 fEnums = temp;; 3734 return temp;; 3735}; 3736 ; 3737////////////////////////////////////////////////////////////////////////////////; 3738/// Create the list containing the TDataMembers (of actual data members or members; 3739/// pulled in through using declarations) of a class.; 3740 ; 3741TList *TClass::CreateListOfDataMembers(std::atomic<TListOfDataMembers*> &data, TDictionary::EMemberSelection selection, bool load); 3742{; 3743 R__LOCKGUARD(gInterpreterMutex);; 3744 ; 3745 if (!data) {; 3746 if (fCanLoadClassInfo && fState == kHasTClassInit) {; 3747 // The members are in our ProtoClass; we don't need the class info.; 3748 TProtoClass *proto = TClassTable::GetProtoNorm(GetName());; 3749 if (proto && proto->FillTClass(this)); 3750 return data;; 3751 }; 3752 ; 3753 data = new TListOfDataMembers(this, selection);; 3754 }; 3755 if (IsClassStructOrUnion()) {; 3756 // If the we have a class or struct or union, the order; 3757 // of data members is the list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:140725,load,load,140725,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,"['Load', 'load']","['Load', 'load']"
Performance," for which the list was not loaded fully at; 3764 // first use.; 3765 R__LOCKGUARD(gROOTMutex);; 3766 temp->Load();; 3767 }; 3768 }; 3769 return temp;; 3770 }; 3771 ; 3772 if (!requestListLoading) {; 3773 if (fProperty == -1) Property();; 3774 R__LOCKGUARD(gInterpreterMutex);; 3775 if (fEnums.load()) {; 3776 return fEnums.load();; 3777 }; 3778 ; 3779 if (IsFromRootCling()) // rootcling is single thread (this save some space in the rootpcm).; 3780 fEnums = new TListOfEnums(this);; 3781 else; 3782 fEnums = new TListOfEnumsWithLock(this);; 3783 return fEnums;; 3784 }; 3785 ; 3786 R__LOCKGUARD(gInterpreterMutex);; 3787 if (fEnums.load()) {; 3788 (*fEnums).Load();; 3789 return fEnums.load();; 3790 }; 3791 if (fProperty == -1) Property();; 3792 if ( (kIsClass | kIsStruct | kIsUnion) & fProperty) {; 3793 // For this case, the list will be immutable; 3794 temp = new TListOfEnums(this);; 3795 } else {; 3796 //namespaces can have enums added to them; 3797 temp = new TListOfEnumsWithLock(this);; 3798 }; 3799 temp->Load();; 3800 fEnums = temp;; 3801 return temp;; 3802}; 3803 ; 3804////////////////////////////////////////////////////////////////////////////////; 3805/// Create the list containing the TDataMembers (of actual data members or members; 3806/// pulled in through using declarations) of a class.; 3807 ; 3808TList *TClass::CreateListOfDataMembers(std::atomic<TListOfDataMembers*> &data, TDictionary::EMemberSelection selection, bool load); 3809{; 3810 R__LOCKGUARD(gInterpreterMutex);; 3811 ; 3812 if (!data) {; 3813 if (fCanLoadClassInfo && fState == kHasTClassInit) {; 3814 // The members are in our ProtoClass; we don't need the class info.; 3815 TProtoClass *proto = TClassTable::GetProtoNorm(GetName());; 3816 if (proto && proto->FillTClass(this)); 3817 return data;; 3818 }; 3819 ; 3820 data = new TListOfDataMembers(this, selection);; 3821 }; 3822 if (IsClassStructOrUnion()) {; 3823 // If the we have a class or struct or union, the order; 3824 // of data members is the list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:143476,load,load,143476,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,"['Load', 'load']","['Load', 'load']"
Performance," forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. RooAbsArg& pdfObservable(RooAbsArg& histObservable) const; { return histObservable ; }. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const. TString histNameSuffix() const; { return TString("""") ; }. void disableCache(Bool_t flag); Flag to disable caching mechanism. » Last changed: Fri Dec 2 14:26:32 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:45608,cache,cached,45608,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['cache'],['cached']
Performance," forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. RooAbsArg& pdfObservable(RooAbsArg& histObservable) const; { return histObservable ; }. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const. TString histNameSuffix() const; { return TString("""") ; }. void disableCache(Bool_t flag); Flag to disable caching mechanism. » Last changed: Mon Jul 4 15:21:18 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:44352,cache,cached,44352,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,1,['cache'],['cached']
Performance," forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. RooAbsArg& pdfObservable(RooAbsArg& histObservable) const; { return histObservable ; }. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const. TString histNameSuffix() const; { return TString("""") ; }. void disableCache(Bool_t flag); Flag to disable caching mechanism. » Last changed: Thu Sep 23 19:58:06 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:43792,cache,cached,43792,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,1,['cache'],['cached']
Performance," forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. RooAbsArg& pdfObservable(RooAbsArg& histObservable) const; { return histObservable ; }. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const. TString histNameSuffix() const; { return TString("""") ; }. void disableCache(Bool_t flag); Flag to disable caching mechanism. » Last changed: Tue Mar 10 17:13:53 2015 » Last generated: 2015-03-10 17:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedPdf.html:47115,cache,cached,47115,root/html534/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedPdf.html,1,['cache'],['cached']
Performance," forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetCompressionSettings. ; Definition at line 2305 of file TFile.cxx. ◆ SetCompressionLevel(). void TFile::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). virtual . S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:92523,cache,cache,92523,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['cache'],['cache']
Performance," format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an animated GIF file is produced, where NN is delay in 10ms units. TVirtualX * GetVirtualX(); { return fgTQt;}. Int_t LoadQt(const char* shareLibFileName); Make sure we load the GUI DLL from the gui thread. Int_t processQtEvents(Int_t maxtime = 300); Force processing the Qt events only without entering the ROOT event loop. void operator=(const TGQt& ). TGQt(). QPaintDevice * GetSelectedWindow(); Include the base TVirtualX class interface; extracted methods. { return fSelectedWindow; }. void SetTextDecoder(const char* ); {;}. Bool_t IsHandleValid(Window_t id). void SetQClientFilter(TQtClientFilter* filter); {fQClientFilter = filter;}. TQtClientFilter * QClientFilter() const; {return fQClientFilter;}. QColor QtColor(ULong_t pixel). void SendDestroyEvent(TQtClientWidget* ) const. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGQt.html:42284,Load,LoadQt,42284,root/html604/TGQt.html,https://root.cern,https://root.cern/root/html604/TGQt.html,2,"['Load', 'load']","['LoadQt', 'load']"
Performance," format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an animated GIF file is produced, where NN is delay in 10ms units. TVirtualX * GetVirtualX(); { return fgTQt;}. Int_t LoadQt(const char* shareLibFileName); Make sure we load the GUI DLL from the gui thread. Int_t processQtEvents(Int_t maxtime = 300); Force processing the Qt events only without entering the ROOT event loop. void operator=(const TGQt& ). TGQt(). QPaintDevice * GetSelectedWindow(); Include the base TVirtualX class interface; extracted methods. { return fSelectedWindow; }. void SetTextDecoder(const char* ); {;}. Bool_t IsHandleValid(Window_t id). void SetQClientFilter(TQtClientFilter* filter); {fQClientFilter = filter;}. TQtClientFilter * QClientFilter() const; {return fQClientFilter;}. QColor QtColor(ULong_t pixel). void SendDestroyEvent(TQtClientWidget* ) const. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-30 14:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGQt.html:42167,Load,LoadQt,42167,root/html602/TGQt.html,https://root.cern,https://root.cern/root/html602/TGQt.html,2,"['Load', 'load']","['LoadQt', 'load']"
Performance," fr, . bool ; reduceToConditional = true . ). Definition at line 77 of file RooMultiVarGaussian.cxx. ◆ RooMultiVarGaussian() [4/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; const char * ; name, . const char * ; title, . const RooArgList & ; xvec, . const TVectorD & ; mu, . const TMatrixDBase & ; covMatrix . ). Definition at line 136 of file RooMultiVarGaussian.cxx. ◆ RooMultiVarGaussian() [5/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; const char * ; name, . const char * ; title, . const RooArgList & ; xvec, . const TMatrixDBase & ; covMatrix . ). Definition at line 144 of file RooMultiVarGaussian.cxx. ◆ RooMultiVarGaussian() [6/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; const RooMultiVarGaussian & ; other, . const char * ; name = nullptr . ). Definition at line 153 of file RooMultiVarGaussian.cxx. Member Function Documentation. ◆ anaIntData(). RooMultiVarGaussian::AnaIntData & RooMultiVarGaussian::anaIntData ; (; Int_t ; code); const. protected . Check if cache entry was previously created. ; Definition at line 317 of file RooMultiVarGaussian.cxx. ◆ analyticalIntegral(). double RooMultiVarGaussian::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Handle full integral here. ; Reimplemented from RooAbsReal.; Definition at line 288 of file RooMultiVarGaussian.cxx. ◆ blockDecompose(). void RooMultiVarGaussian::blockDecompose ; (; const TMatrixD & ; input, . const std::vector< int > & ; map1, . const std::vector< int > & ; map2, . TMatrixDSym & ; S11, . TMatrixD & ; S12, . TMatrixD & ; S21, . TMatrixDSym & ; S22 . ). static . Block decomposition of covI according to given maps of observables. ; Definition at line 623 of file RooMultiVarGaussian.cxx. ◆ Class(). static TClass * RooMultiVarGaussian::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooMultiVarGaussian::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static conste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:76302,cache,cache,76302,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['cache'],['cache']
Performance," fraction of domain size ; RooFFTConvPdf::BufStrat_bufStratStrategy to fill the buffer; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooSetProxy_cacheObsNon-convolution observables that are also cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Preven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:46641,cache,cache,46641,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,1,['cache'],['cache']
Performance," fraction of domain size ; RooFFTConvPdf::BufStrat_bufStratStrategy to fill the buffer; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooSetProxy_cacheObsNon-convolution observables that are also cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:43018,cache,cache,43018,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,4,['cache'],['cache']
Performance," frame = x.frame(40); data.plotOn(frame); modelx.plotOn(frame); ; # Make 2D histogram of model(x,y); hh = model.createHistogram(""x,y""); hh.SetLineColor(ROOT.kBlue); ; c = ROOT.TCanvas(""rf315_projectpdf"", ""rf315_projectpdf"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.20); hh.GetZaxis().SetTitleOffset(2.5); hh.Draw(""surf""); c.SaveAs(""rf315_projectpdf.png""); [#0] WARNING:InputArguments -- The parameter 'sigmax' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_Int[y]_Norm[x,y]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_Int[y]_Norm[x,y]_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a1: using 0.4; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for y: using 0.4; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); ; prevFCN = 12037.78496 a1=-1.469, ; prevFCN = 1900.132597 a1=-1.531, ; prevFCN = 1901.591671 a1=-1.497, ; prevFCN = 1900.088181 a1=-1.503, ; prevFCN = 1900.238998 a1=-1.5, y=0.03051, ; prevFCN = 1900.156536 y=-0.03051, ; prevFCN = 1900.156536 y=0.003051, ; prevFCN = 1900.156536 y=-0.003051, ; prevFCN = 1900.156536 a1=-1.497, y=0, ; prevFCN = 19",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf315__projectpdf_8py.html:3059,optimiz,optimization,3059,doc/master/rf315__projectpdf_8py.html,https://root.cern,https://root.cern/doc/master/rf315__projectpdf_8py.html,1,['optimiz'],['optimization']
Performance," freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Mon Jul 4 15:21:35 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddModel.html:49235,Cache,CacheElem,49235,root/html530/RooAddModel.html,https://root.cern,https://root.cern/root/html530/RooAddModel.html,1,['Cache'],['CacheElem']
Performance," freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Sat Oct 9 22:38:33 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:48867,Cache,CacheElem,48867,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,1,['Cache'],['CacheElem']
Performance," freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Thu Nov 3 20:06:55 2011 » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:49642,Cache,CacheElem,49642,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,1,['Cache'],['CacheElem']
