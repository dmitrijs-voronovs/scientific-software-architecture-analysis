quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"nd likelihood used in the fit) ...Definition FitMethodFunction.h:38; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IParametricFunctionMultiDimTempl< double >; ROOT::Math::IParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is ...Definition IParamFunction.h:161; ROOT::Math::IParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition ...Definition IParamFunction.h:227; ROOT::Math::IParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to...Definition IParamFunction.h:330; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::WrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-...Definition WrappedFunction.h:143; RooFit::MinimizerRooCmdArg Minimizer(const char *type, const char *alg=nullptr)Definition RooGlobalFunc.cxx:751; MathNamespace for new Math classes and functions.; ROOT::Math::FitMethodFunctionBasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunctionDefinition Fitter.h:43; ROOT::Math::FitMethodGradFunctionBasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunctionDefinition Fitter.h:44; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kSequential@ kSequential. mathmathcoreincFitFitter.h. ROOT master - Referenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:42493,interface,interface,42493,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['interface'],['interface']
Integrability,"nd managed by the Fitter class ; Definition at line 544 of file Fitter.h. ◆ operator=(). Fitter & ROOT::Fit::Fitter::operator= ; (; const Fitter & ; ). delete . Assignment operator (disabled, class is not copyable) . ◆ Result(). const FitResult & ROOT::Fit::Fitter::Result ; (; ); const. inline . get fit result ; Definition at line 394 of file Fitter.h. ◆ SetData() [1/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const Data & ; data). inlineprotected . Set the input data for the fit (Copying the given data object) ; Definition at line 526 of file Fitter.h. ◆ SetData() [2/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const std::shared_ptr< Data > & ; data). inlineprotected . Set the input data for the fit using a shared ptr (No Copying) ; Definition at line 520 of file Fitter.h. ◆ SetFCN() [1/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 195 of file Fitter.cxx. ◆ SetFCN() [2/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ SetFCN() [3/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ; Definition at line 179 of file Fitter.cxx. ◆ SetFCN() [4/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:32320,interface,interface,32320,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['interface'],['interface']
Integrability,"nd return a pointer to that object. ; NULL might be returned. ; Definition at line 162 of file TGHtmlImage.cxx. ◆ GetImageAlignment(). int TGHtml::GetImageAlignment ; (; TGHtmlElement * ; p). protected . Find the alignment for an image. ; Definition at line 84 of file TGHtmlImage.cxx. ◆ GetImageAt(). int TGHtml::GetImageAt ; (; int ; x, . int ; y . ). protected . This routine searchs for an image beneath the coordinates x,y and returns the token number of the image, or -1 if no image found. ; Definition at line 368 of file TGHtmlImage.cxx. ◆ GetIndex(). int TGHtml::GetIndex ; (; const char * ; zIndex, . TGHtmlElement ** ; ppToken, . int * ; pIndex . ). protected . This routine decodes a complete index specification. ; A complete index consists of the base specification followed by modifiers. ; Definition at line 538 of file TGHtmlIndex.cxx. ◆ GetInputElement(). TGHtmlInput * TGHtml::GetInputElement ; (; int ; x, . int ; y . ). This routine searches for a hyperlink beneath the coordinates x,y and returns a pointer to the HREF for that hyperlink. ; The text is held in one of the markup argv[] fields of the markup. ; Definition at line 1151 of file TGHtml.cxx. ◆ GetLightShadowColor(). int TGHtml::GetLightShadowColor ; (; int ; iBgColor). protected . Given that the background color is iBgColor, figure out an appropriate color for the bright part of the 3D shadow. ; Definition at line 1734 of file TGHtml.cxx. ◆ GetLinkColor(). int TGHtml::GetLinkColor ; (; const char * ; zURL). protected . For the markup <a href=XXX>, find out if the URL has been visited before or not. ; Return COLOR_Visited or COLOR_Unvisited, as appropriate. ; Definition at line 159 of file TGHtmlSizer.cxx. ◆ GetMap(). TGHtmlElement * TGHtml::GetMap ; (; const char * ; name). Returns html map element. ; Definition at line 1593 of file TGHtml.cxx. ◆ GetMarginHeight(). int TGHtml::GetMarginHeight ; (; ). inline . Definition at line 968 of file TGHtml.h. ◆ GetMarginWidth(). int TGHtml::GetMarginWidth ; (;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:68300,rout,routine,68300,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,"nd single bounds) The class manages the passed function pointer ;  CMinimTransformVariableMinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineMixMaxEngine is a wrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAda",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:49731,wrap,wrapper,49731,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['wrap'],['wrapper']
Integrability,"nd single bounds) The class manages the passed function pointer ;  CMinimTransformVariableMinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineMixMaxEngine is a wrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:44091,wrap,wrapper,44091,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['wrap'],['wrapper']
Integrability,"nd the TGeoRotation for it; TGDMMapHelper<TGeoScale>fsclmap!Map containing scale names and the TGeoScale for it; TGDMMapHelper<TGeoShape>fsolmap!Map containing solid names and the TGeoShape for it; TGDMMapHelper<TGeoVolume>fvolmap!Map containing volume names and the TGeoVolume for it. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoVolume* GDMLReadFile(const char* filename = ""test.gdml""); creates the new instance of the XMLEngine called 'gdml', using the filename >>; then parses the file and creates the DOM tree. Then passes the DOM to the; next function to translate it. const char* ParseGDML(TXMLEngine* gdml, XMLNodePointer_t node); this function recursively moves thru the DOM tree of the GDML file. It checks for; key words along the way and if a key word is found it calls the corresponding; function to interpret the node. double Evaluate(const char* evalline). Int_t SetAxis(const char* axisString); When using the 'divide' process in the geometry this function; sets the variable 'axis' depending on what is specified. const char* NameShort(const char* name); this function looks thru a string for the chars '0x' next to; each other, when it finds this, it calls another function to strip; the hex address. It does this recursively until the end of the; string is reached, returning a string without any hex addresses. XMLNodePointer_t ConProcess(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the define section of the GDML file, constants can be declared.; when the constant keyword is found, this function is called, and the; name and value of the constant is stored in the ""fformvec"" vector as; a TFormula class, representing a constant function. TString GetScale(const char* unit); Throughout the GDML file, a unit can de specified. Whether it be; angular or linear, values can be used as well as abbreviations such as; 'mm' or 'deg'. This function is passed the specified unit and if it is; found, replaces it wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGDMLParse.html:10696,depend,depending,10696,root/html532/TGDMLParse.html,https://root.cern,https://root.cern/root/html532/TGDMLParse.html,2,['depend'],['depending']
Integrability,"nd the TGeoRotation for it; TGDMMapHelper<TGeoScale>fsclmap!Map containing scale names and the TGeoScale for it; TGDMMapHelper<TGeoShape>fsolmap!Map containing solid names and the TGeoShape for it; TGDMMapHelper<TGeoVolume>fvolmap!Map containing volume names and the TGeoVolume for it. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoVolume* GDMLReadFile(const char* filename = ""test.gdml""); creates the new instance of the XMLEngine called 'gdml', using the filename >>; then parses the file and creates the DOM tree. Then passes the DOM to the; next function to translate it. const char* ParseGDML(TXMLEngine* gdml, XMLNodePointer_t node); this function recursively moves thru the DOM tree of the GDML file. It checks for; key words along the way and if a key word is found it calls the corresponding; function to interpret the node. double Evaluate(const char* evalline). Int_t SetAxis(const char* axisString); When using the 'divide' process in the geometry this function; sets the variable 'axis' depending on what is specified. const char* NameShort(const char* name); this function looks thru a string for the chars '0x' next to; each other, when it finds this, it calls another function to strip; the hex address. It does this recursively until the end of the; string is reached, returning a string without any hex addresses. XMLNodePointer_t ConProcess(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the define section of the GDML file, constants can be declared.; when the constant keyword is found, this function is called, and the; name and value of the constant is stored in the ""fformvec"" vector as; a TFormula class, representing a constant function. const char* GetScale(const char* unit); Throughout the GDML file, a unit can de specified. Whether it be; angular or linear, values can be used as well as abbreviations such as; 'mm' or 'deg'. This function is passed the specified unit and if it is; found, replaces i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDMLParse.html:10631,depend,depending,10631,root/html528/TGDMLParse.html,https://root.cern,https://root.cern/root/html528/TGDMLParse.html,2,['depend'],['depending']
Integrability,"nd then Y axis; It is also possible to invert all the transformation or return their inverse:; Rotation3D r1(...);; r1.Invert(); //invert the rotation modifying its content; Rotation3D r2 =r1.Inverse(); //return the inverse in a new; //rotation class; We have used rotation as examples, but all these operations can be applied to all the transformation classes.; 13.12.5.3 Set/GetComponents Methods; Common methods to all transformations are Get and SetComponents. They can be used to retrieve all the scalar values on which the transformation is based.; RotationX rx;; rx.SetComponents(1.); //set agle of the X rotation; double d[9] = {........};; Rotation3D r;; r.SetComponents(d,d+9); //set 9 components of 3D rotation; double d[16];; LorentzRotation lr;; lr.GetComponents(d,d+16); //get 16 components of a LorentzRotation; TMatrixD(3,4) m;; Transform3D t;; t.GetComponens(m); //fill 3x4 matrix with components of t; TheGetComponents and SetComponents methods can be used with a signature based iterators or by using any foreign matrix which implements the operator(i,j) or a different signatures depending on the transformation type. For more details on all methods see the reference documentation of any specific transformation class.; 13.12.6 Example with External Packages; 13.12.6.1 Connection to Linear Algebra Classes; It is possible to use the vector and rotation classes together with the linear algebra classes and to set and get the contents of any 3D or 4D vector from a linear algebra vector class which implements an iterator or something which behaves like an iterator. For example a pointer to a C array (double*) behaves like an iterator. It is then assumed that the coordinates, like (x,y,z) will be stored contiguously.; TVectorD r2(N); //ROOT Linear Algebra Vector containing; //many vectors; XYZVector v2;; //construct vector from x=r[INDEX], y=r[INDEX+1], z=r[INDEX+2]; v2.SetCoordinates(&r2[INDEX],&r2[index]+3);; To fill a linear algebra vector from a 3D or 4D vector, with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:745700,depend,depending,745700,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['depend'],['depending']
Integrability,"nd use setAttribute() on the x object: objectToReplaceX.setAttribute(""ORIGNAME:x""); Now, the renamed object will be selected based on the attribute ""ORIGNAME:<name>"". ; [in]isRecursionStepInternal switch used when called from recursiveRedirectServers(). . Definition at line 1036 of file RooAbsArg.cxx. ◆ redirectServers() [2/2]. bool RooAbsArg::redirectServers ; (; std::unordered_map< RooAbsArg *, RooAbsArg * > const & ; replacements). Replace some servers of this object. ; If there are proxies that correspond to the replaced servers, these proxies are adjusted as well. Parameters. [in]replacementsMap that specifies which args replace which servers. . Definition at line 1150 of file RooAbsArg.cxx. ◆ redirectServersHook(). bool RooAbsArg::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). virtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsOptTestStatistic, RooAbsTestStatistic, RooAbsPdf, RooAbsReal, and RooProjectedPdf.; Definition at line 1313 of file RooAbsArg.cxx. ◆ registerCache(). void RooAbsArg::registerCache ; (; RooAbsCache & ; cache). Register RooAbsCache with this object. ; This function is called by RooAbsCache constructors for objects that are a datamember of this RooAbsArg. By registering itself the RooAbsArg is aware of all its cache data members and will forward server change and cache mode change cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:91196,inject,inject,91196,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,"['depend', 'inject']","['dependent', 'inject']"
Integrability,"nd using a class instead. However, we do support them for legacy applications written in C or FORTRAN. The example struct holds simple variables and arrays. It maps to a Geant3 common block /gctrak/.This is the definition of the common block/structure:; const Int_t MAXMEC = 30;; // PARAMETER (MAXMEC=30); // COMMON/GCTRAK/VECT(7),GETOT,GEKIN,VOUT(7); // + ,NMEC,LMEC(MAXMEC); // + ,NAMEC(MAXMEC),NSTEP; // + ,PID,DESTEP,DESTEL,SAFETY,SLENG; // + ,STEP,SNEXT,SFIELD,TOFG,GEKRAT,UPWGHT. typedef struct {; Float_t vect[7];; Float_t getot;; Float_t gekin;; Float_t vout[7];; Int_t nmec;; Int_t lmec[MAXMEC];; Int_t namec[MAXMEC];; Int_t nstep;; Int_t pid;; Float_t destep;; Float_t destel;; Float_t safety;; Float_t sleng;; Float_t step;; Float_t snext;; Float_t sfield;; Float_t tofg;; Float_t gekrat;; Float_t upwght;; } Gctrak_t;; When using Geant3, the common block is filled by Geant3 routines at each step and only the TTree::Fill method needs to be called. In this example we emulate the Geant3 step routine with the helixStep function. We also emulate the filling of the particle values. The calls to the Branch methods are the same as if Geant3 were used.; void helixStep(Float_t step, Float_t *vect, Float_t *vout); {; // extrapolate track in constant field; Float_t field = 20; // field in kilogauss; enum Evect {kX,kY,kZ,kPX,kPY,kPZ,kPP};; vout[kPP] = vect[kPP];. Float_t h4 = field*2.99792e-4;; Float_t rho = -h4/vect[kPP];; Float_t tet = rho*step;; Float_t tsint = tet*tet/6;; Float_t sintt = 1 - tsint;; Float_t sint = tet*sintt;; Float_t cos1t = tet/2;; Float_t f1 = step*sintt;; Float_t f2 = step*cos1t;; Float_t f3 = step*tsint*vect[kPZ];; Float_t f4 = -tet*cos1t;; Float_t f5 = sint;; Float_t f6 = tet*cos1t*vect[kPZ];. vout[kX] = vect[kX] + (f1*vect[kPX] - f2*vect[kPY]);; vout[kY] = vect[kY] + (f1*vect[kPY] + f2*vect[kPX]);; vout[kZ] = vect[kZ] + (f1*vect[kPZ] + f3);; vout[kPX] = vect[kPX] + (f4*vect[kPX] - f5*vect[kPY]);; vout[kPY] = vect[kPY] + (f4*vect[kPY] + f5*vect[kPX]);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:561508,rout,routine,561508,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['rout'],['routine']
Integrability,"nd(p,pidf);; 1994 p->IncrementCount();; 1995 return p;; 1996 }; 1997 ; 1998 pids->AddAtAndExpand(pid,pidf);; 1999 pid->IncrementCount();; 2000 ; 2001 {; 2002 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 2003 pidslist->Add(pid);; 2004 Int_t ind = pidslist->IndexOf(pid);; 2005 pid->SetUniqueID((UInt_t)ind);; 2006 }; 2007 ; 2008 return pid;; 2009}; 2010 ; 2011 ; 2012////////////////////////////////////////////////////////////////////////////////; 2013/// Attempt to recover file if not correctly closed; 2014///; 2015/// The function returns the number of keys that have been recovered.; 2016/// If no keys can be recovered, the file will be declared Zombie by; 2017/// the calling function. This function is automatically called when; 2018/// opening a file.; 2019/// If the file is open in read only mode, the file is not modified.; 2020/// If open in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:72199,message,message,72199,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['message'],['message']
Integrability,"ndEntry.; 335 Long64_t fEndEntry = -1LL;; 336 Long64_t fBeginEntry = 0LL; ///< This allows us to propagate the range to the TTreeCache; 337 bool fProxiesSet = false; ///< True if the proxies have been set, false otherwise; 338 bool fSetEntryBaseCallingLoadTree = false; ///< True if during the LoadTree execution triggered by SetEntryBase.; 339 ; 340 // Flag to activate or deactivate warnings in case the friend trees have; 341 // more entries than the main one. In some cases we may want to deactivate; 342 // this behaviour, notably in multithreaded runs where we have to partition; 343 // the main tree but keep the entire friend trees in every thread to ensure; 344 // alignment.; 345 bool fWarnAboutLongerFriends{true};; 346 void WarnIfFriendsHaveMoreEntries();; 347 ; 348 // List of branches for which we want to suppress the printed error about; 349 // missing branch when switching to a new tree; 350 std::vector<std::string> fSuppressErrorsForMissingBranches{};; 351 std::vector<std::string> fMissingProxies{};; 352 ; 353 friend class ROOT::Internal::TTreeReaderValueBase;; 354 friend class ROOT::Internal::TTreeReaderArrayBase;; 355 ; 356 ClassDefOverride(TTreeReader, 0); // A simple interface to read trees; 357};; 358 ; 359#endif // defined TTreeReader; Long64_tlong long Long64_tDefinition RtypesCore.h:69; BIT#define BIT(n)Definition Rtypes.h:90; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TNotifyLink.h; TTreeReaderUtils.h; TTree.h; ROOT::Internal::TFriendProxyDefinition TFriendProxy.h:22; ROOT::Internal::TNamedBranchProxyDefinition TTreeReaderUtils.h:43; ROOT::Internal::TTreeReaderArrayBaseBase class of TTreeReaderArray.Definition TTreeReaderArray.h:29; ROOT::Internal::TTreeReaderValueBaseBase class of TTreeReaderValue.Definition TTreeReaderValue.h:45; TBranchProxyDirectorThis class is used to 'drive' and hold a serie of TBranchProxy objects which represen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:14805,interface,interface,14805,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['interface'],['interface']
Integrability,"ndOfLineAction(). void TCling::EndOfLineAction ; (; ). finalvirtual . It calls a ""fantom"" method to synchronize user keyboard input and ROOT prompt line. ; Implements TInterpreter.; Definition at line 3121 of file TCling.cxx. ◆ Evaluate(). int TCling::Evaluate ; (; const char * ; code, . TInterpreterValue & ; value . ). finalvirtual . Get the interpreter value corresponding to the statement. ; Reimplemented from TInterpreter.; Definition at line 7678 of file TCling.cxx. ◆ Execute() [1/5]. void TCling::Execute ; (; const char * ; function, . const char * ; params, . int * ; error = nullptr . ). finalvirtual . Execute a global function with arguments params. ; FIXME: The cint-based version of this code does not check if the SetFunc() call works, and does not do any real checking for errors from the Exec() call. It did fetch the most recent cint security error and return that in error, but this does not really translate well to cling/clang. We should enhance these interfaces so that we can report compilation and runtime errors properly. ; Implements TInterpreter.; Definition at line 5233 of file TCling.cxx. ◆ Execute() [2/5]. void TCling::Execute ; (; TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). inlinefinalprivatevirtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Implements TInterpreter.; Definition at line 628 of file TCling.h. ◆ Execute() [3/5]. void TCling::Execute ; (; TObject * ; obj, . TClass * ; cl, . const char * ; method, . const char * ; params, . Bool_t ; objectIsConst, . int * ; error = nullptr . ). Execute a method from class cl with arguments params. ; FIXME: The cint-based version of this code does not check if the SetFunc() call works, and does not do any real checking for errors from th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:84208,interface,interfaces,84208,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['interface'],['interfaces']
Integrability,"ndaries for parameterized binning implementations. void printValue(ostream& os) const; Print binning value, i.e the bin boundary positions. void Streamer(TBuffer& ); Custom streamer implementing schema evolution between V1 and V2 persistent binnings. RooAbsBinning(const char* name = 0). TObject* Clone(const char* newname = 0) const; { return clone(newname) ; }. RooAbsBinning* clone(const char* name = 0) const. Int_t numBins() const; Return number of bins. return numBoundaries(). Int_t binNumber(Double_t x) const. Int_t rawBinNumber(Double_t x) const; { return binNumber(x) ; }. Double_t binCenter(Int_t bin) const. Double_t binWidth(Int_t bin) const. Double_t binLow(Int_t bin) const. Double_t binHigh(Int_t bin) const. Bool_t isUniform() const; { return kFALSE ; }. void setRange(Double_t xlo, Double_t xhi). void setMin(Double_t xlo); Change lower bound to xlo. void setMax(Double_t xhi); Change upper bound to xhi. Double_t lowBound() const. Double_t highBound() const. Double_t averageBinWidth() const. Double_t* array() const. void Print(Option_t* options = 0) const; Printing interface. Bool_t isParameterized() const; Interface function. If true, min/max of binning is parameterized by external RooAbsReals. RooAbsReal* lowBoundFunc() const; Return pointer to RooAbsReal parameterized lower bound, if any. RooAbsReal* highBoundFunc() const; Return pointer to RooAbsReal parameterized upper bound, if any. Bool_t isShareable() const; If true (default) range definition can be shared across clones of a RooRealVar. void insertHook(RooAbsRealLValue& ) const; Hook interface function to execute code upon insertion into a RooAbsRealLValue. void removeHook(RooAbsRealLValue& ) const; Hook interface functionto execute code upon removal from a RooAbsRealLValue. » Last changed: Tue Jun 2 15:26:51 2015 » Last generated: 2015-06-02 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsBinning.html:10465,interface,interface,10465,root/html604/RooAbsBinning.html,https://root.cern,https://root.cern/root/html604/RooAbsBinning.html,3,['interface'],['interface']
Integrability,"ndau distribution; with location parameter mu and scale parameter sigma:; Landau( (x-mu)/sigma ); Note that mu is not the mpv(most probable value) of the Landa distribution; and sigma is not the standard deviation of the distribution which is not defined.; For mu =0 and sigma=1, the mpv = -0.22278. The Landau random number generation is implemented using the; function landau_quantile(x,sigma), which provides; the inverse of the landau cumulative distribution.; landau_quantile has been converted from CERNLIB ranlan(G110). Int_t Poisson(Double_t mean); Generates a random integer N according to a Poisson law.; Prob(N) = exp(-mean)*mean^N/Factorial(N). Use a different procedure according to the mean value.; The algorithm is the same used by CLHEP.; For lower value (mean < 25) use the rejection method based on; the exponential.; For higher values use a rejection method comparing with a Lorentzian; distribution, as suggested by several authors.; This routine since is returning 32 bits integer will not work for values; larger than 2*10**9.; One should then use the Trandom::PoissonD for such large values. Double_t PoissonD(Double_t mean); Generates a random number according to a Poisson law.; Prob(N) = exp(-mean)*mean^N/Factorial(N). This function is a variant of TRandom::Poisson returning a double; instead of an integer. void Rannor(Float_t& a, Float_t& b); Return 2 numbers distributed following a gaussian with mean=0 and sigma=1. void Rannor(Double_t& a, Double_t& b); Return 2 numbers distributed following a gaussian with mean=0 and sigma=1. void ReadRandom(const char* filename); Reads saved random generator status from filename. Double_t Rndm(Int_t i = 0); Machine independent random number generator.; Based on the BSD Unix (Rand) Linear congrential generator.; Produces uniformly-distributed floating points between 0 and 1.; Identical sequence on all machines of >= 32 bits.; Periodicity = 2**31, generates a number in (0,1).; Note that this is a generator which is known to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRandom.html:14123,rout,routine,14123,root/html534/TRandom.html,https://root.cern,https://root.cern/root/html534/TRandom.html,3,['rout'],['routine']
Integrability,"ndau(""landau"", ""landau"", x, 0.0, 0.1); ; # Disable analytic integration from demonstration purposes; landau.forceNumInt(True); ; # Activate debug-level messages for topic integration to be able to follow; # actions below; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Integration); ; # Calculate integral over landau with default choice of numeric integrator; intLandau = landau.createIntegral({x}); val = intLandau.getVal(); print("" [1] int_dx landau(x) = "", val) # setprecision(15); ; # Same with custom configuration; # -----------------------------------------------------------; ; # Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; # for closed 1D integrals; customConfig = ROOT.RooNumIntConfig(ROOT.RooAbsReal.defaultIntegratorConfig()); integratorGKNotExisting = customConfig.method1D().setLabel(""RooAdaptiveGaussKronrodIntegrator1D""); if integratorGKNotExisting:; print(""WARNING: RooAdaptiveGaussKronrodIntegrator is not existing because ROOT is built without Mathmore support""); ; # Calculate integral over landau with custom integral specification; intLandau2 = landau.createIntegral({x}, NumIntConfig=customConfig); val2 = intLandau2.getVal(); print("" [2] int_dx landau(x) = "", val2); ; # Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; ; # Another possibility: associate custom numeric integration configuration; # as default for object 'landau'; landau.setIntegratorConfig(customConfig); ; # Calculate integral over landau custom numeric integrator specified as; # object default; intLandau3 = landau.createIntegral({x}); val3 = intLandau3.getVal(); print("" [3] int_dx landau(x) = "", val3); ; # Another possibility: Change global default for 1D numeric integration; # strategy on finite domains; if not integratorGKNotExisting:; ROOT.RooAbsReal.defaultIntegratorConfig().method1D().setLabel(""RooAdaptiveGaussKronrodIntegrator1D""); ; # Adj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8py.html:2553,integrat,integratorGKNotExisting,2553,doc/master/rf901__numintconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8py.html,1,['integrat'],['integratorGKNotExisting']
Integrability,"nderThreadsbool fUseSenderThreads! use extra threads for sending data from RWebWindow to clientsDefinition RWebWindowsManager.hxx:48; ROOT::RWebWindowsManager::fServerstd::unique_ptr< THttpServer > fServer! central communication with the all used displaysDefinition RWebWindowsManager.hxx:41; ROOT::RWebWindowsManager::SetLoopbackModestatic void SetLoopbackMode(bool on=true)Set loopback mode for THttpServer used for web widgets By default is on.Definition RWebWindowsManager.cxx:128; ROOT::RWebWindowsManager::IsMainThrdstatic bool IsMainThrd()Returns true when called from main process Main process recognized at the moment when library is load...Definition RWebWindowsManager.cxx:104; ROOT::RWebWindowsManager::Instancestatic std::shared_ptr< RWebWindowsManager > & Instance()Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel.Definition RWebWindowsManager.cxx:78; ROOT::RWebWindowsManager::InformListenerbool InformListener(const std::string &msg)If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket.Definition RWebWindowsManager.cxx:227; ROOT::RWebWindowsManager::fLaunchTmoutfloat fLaunchTmout! timeout in seconds to start browser process, default 30sDefinition RWebWindowsManager.hxx:49; ROOT::RWebWindowsManager::GetUrlstd::string GetUrl(RWebWindow &win, bool remote=false, std::string *produced_key=nullptr)Provide URL address to access specified window from inside or from remote.Definition RWebWindowsManager.cxx:600; ROOT::RWebWindowsManager::Unregistervoid Unregister(RWebWindow &win)Release all references to specified window Called from RWebWindow destructor.Definition RWebWindowsManager.cxx:591; ROOT::RWebWindowsManager::IsLoopbackModestatic bool IsLoopbackMode()Returns true if loopback mode used by THttpServer for web widgets.Definition RWebWindowsManager.cxx:146; ROOT::RWebWindowsManager::CreateWindowstd::shared_ptr< RWebWindow > CreateWindow()Creates new window To show window, RWebWindow:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindowsManager_8hxx_source.html:10949,message,message,10949,doc/v632/RWebWindowsManager_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindowsManager_8hxx_source.html,1,['message'],['message']
Integrability,"nderThreadsbool fUseSenderThreads! use extra threads for sending data from RWebWindow to clientsDefinition RWebWindowsManager.hxx:52; ROOT::RWebWindowsManager::fServerstd::unique_ptr< THttpServer > fServer! central communication with the all used displaysDefinition RWebWindowsManager.hxx:45; ROOT::RWebWindowsManager::SetLoopbackModestatic void SetLoopbackMode(bool on=true)Set loopback mode for THttpServer used for web widgets By default is on.Definition RWebWindowsManager.cxx:129; ROOT::RWebWindowsManager::IsMainThrdstatic bool IsMainThrd()Returns true when called from main process Main process recognized at the moment when library is load...Definition RWebWindowsManager.cxx:105; ROOT::RWebWindowsManager::Instancestatic std::shared_ptr< RWebWindowsManager > & Instance()Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel.Definition RWebWindowsManager.cxx:79; ROOT::RWebWindowsManager::InformListenerbool InformListener(const std::string &msg)If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket.Definition RWebWindowsManager.cxx:299; ROOT::RWebWindowsManager::fLaunchTmoutfloat fLaunchTmout! timeout in seconds to start browser process, default 30sDefinition RWebWindowsManager.hxx:53; ROOT::RWebWindowsManager::GetServerLocationsstatic std::map< std::string, std::string > GetServerLocations()Returns server locations as <std::string, std::string> Key is location name (with slash at the end) a...Definition RWebWindowsManager.cxx:209; ROOT::RWebWindowsManager::GetUrlstd::string GetUrl(RWebWindow &win, bool remote=false, std::string *produced_key=nullptr)Provide URL address to access specified window from inside or from remote.Definition RWebWindowsManager.cxx:686; ROOT::RWebWindowsManager::Unregistervoid Unregister(RWebWindow &win)Release all references to specified window Called from RWebWindow destructor.Definition RWebWindowsManager.cxx:674; ROOT::RWebWindowsManager::IsLoopbackModestatic boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html:12448,message,message,12448,doc/master/RWebWindowsManager_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html,1,['message'],['message']
Integrability,"ndex numbers. ; Triggers a recomputation if the shape is dirty. ; Definition at line 168 of file RooAbsCategory.h. ◆ stateNames() [2/2]. const std::map< std::string, value_type > & RooAbsCategory::stateNames ; (; ); const. inlineprotected . Access the map of state names to index numbers. ; Triggers a recomputation if the shape is dirty. ; Definition at line 158 of file RooAbsCategory.h. ◆ Streamer(). void RooAbsCategory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooAbsCategoryLValue, RooBinningCategory, RooCategory, RooMappedCategory, RooMultiCategory, RooSuperCategory, and RooThresholdCategory. ◆ StreamerNVirtual(). void RooAbsCategory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 226 of file RooAbsCategory.h. ◆ syncCache(). void RooAbsCategory::syncCache ; (; const RooArgSet * ; set = nullptr). overrideprotectedvirtual . Explicitly synchronize RooAbsCategory internal cache. ; Implements RooAbsArg.; Definition at line 547 of file RooAbsCategory.cxx. ◆ typeIterator(). TIterator * RooAbsCategory::typeIterator ; (; ); const. Deprecated:Use begin() and end() instead. ; NoteUsing this iterator creates useless RooCatType instances, which will leak unless deleted by the user. ; Definition at line 678 of file RooAbsCategory.cxx. ◆ writeToStream(). void RooAbsCategory::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to ostream. ; Implements RooAbsArg.; Reimplemented in RooCategory, RooMappedCategory, RooMultiCategory, and RooThresholdCategory.; Definition at line 391 of file RooAbsCategory.cxx. Friends And Related Symbol Documentation. ◆ RooVectorDataStore. friend class RooVectorDataStore. friend . Definition at line 203 of file RooAbsCategory.h. Member Data Documentation. ◆ _currentIndex. value_type RooAbsCategory::_currentIndex {std::numeric_limits<int>::min()}. mutableprotec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:63422,synchroniz,synchronize,63422,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['synchroniz'],['synchronize']
Integrability,"ndices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](int j); { return (*fMat)(fRow,j); }. const T & operator[](int j); { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same defult algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:7899,rout,routine,7899,root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,15,['rout'],['routine']
Integrability,"nding Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.; TVirtualPerfStats ABC for collecting PROOF statistics; TVirtualProofPlayer Abstract PROOF player; TVirtualStreamerInfo Abstract Interface describing Streamer information for one class; TVirtualTableInterface ; TVirtualTreePlayer Abstract interface for Tree players; TVirtualViewer3D Abstract interface to 3D viewers; TVirtualX ABC defining a generic interface to graphics system; TVolume Description of parameters to position a 3-D geometry object; TVolumePosition Description of parameters to position a 3-D geometry object; TVolumeView Special kind of TDataSet; TVolumeViewIter Volume view iterator; TWbox A window box (box with 3-D effects); TWebFile A ROOT file that reads via a http server; TWebSystem Directory handler for HTTP (TWebFiles); TX11GLManager X11-specific version of TGLManager; TXHandler Template class for handling of async events; TXMLAttr XML attribute pair; TXMLDocument XML document created by the DOM parser; TXMLEngine ROOT XML I/O parser, user by TXMLFile to read/write xml files; TXMLFile ROOT file in XML format; TXMLNode XML node under DOM tree; TXMLParser XML SAX parser; TXMLPlayer Generation of external xml streamers; TXMLSetup settings to be stored in XML files; TXNetFile TFile implementation to deal with new xrootd server.; TXNetFileStager Interface to a 'XRD' staging; TXNetSystem System management class for xrootd servers; TXProofMgr XrdProofd PROOF manager interface; TXProofServ XRD PROOF Server Application Interface; TXSlave Xrd PROOF slave server; TXSocket A high level connection class for PROOF; TXSocketHandler Input handler class for xproofd sockets; TXTRU TXTRU shape; TXUnixSoc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:126717,interface,interface,126717,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,21,['interface'],['interface']
Integrability,"nding of integrand; Int_t_numBins! Size of integration range; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; vector<Double_t>_xmax! Upper integration bound; vector<Double_t>_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooBinIntegrator, is parameters and capabilities with RooNumIntFactory. RooBinIntegrator(); Default constructor. RooBinIntegrator(const RooAbsFunc& function); Construct integrator on given function binding binding. RooBinIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding binding. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. ~RooBinIntegrator(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. RooBinIntegrator(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinIntegrator.html:7456,integrat,integrator,7456,root/html532/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html532/RooBinIntegrator.html,4,['integrat'],['integrator']
Integrability,"nding on the ROOT environment variable ""Root.ObjStat"" (see TEnv) the object is added to the global TObjectTable for bookkeeping. ; Definition at line 254 of file TObject.h. ◆ TObject() [2/2]. TObject::TObject ; (; const TObject & ; object). inline . TObject copy ctor. ; Definition at line 272 of file TObject.h. ◆ ~TObject(). TObject::~TObject ; (; ). virtual . TObject destructor. ; Removes object from all canvases and object browsers if observer bit is on and remove from the global object table. ; Definition at line 158 of file TObject.cxx. Member Function Documentation. ◆ AbstractMethod(). void TObject::AbstractMethod ; (; const char * ; method); const. Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ; Definition at line 1029 of file TObject.cxx. ◆ AddToTObjectTable(). void TObject::AddToTObjectTable ; (; TObject * ; op). staticprivate . Private helper function which will dispatch to TObjectTable::AddObj. ; Included here to avoid circular dependency between header files. ; Definition at line 175 of file TObject.cxx. ◆ AppendPad(). void TObject::AppendPad ; (; Option_t * ; option = """"). virtual . Append graphics object to current pad. ; In case no current pad is set yet, create a default canvas with the name ""c1"". ; Definition at line 184 of file TObject.cxx. ◆ Browse(). void TObject::Browse ; (; TBrowser * ; b). virtual . Browse object. May be overridden for another default action. ; Reimplemented in TASImage, TRecorder, TEfficiency, TGraph2D, TChain, TTree, TDirectory, TFolder, TMacro, TRemoteObject, TROOT, TStyle, TSystemDirectory, TSystemFile, TTask, TCollection, TPair, TBrowserObject, TBaseClass, TClass, TGeoManager, TGeoNode, TGeoVolume, TGeoOverlap, TGeoTrack, TCanvas, TPad, TAxis3D, TGeometry, TNode, TRootIconList, THbookBranch, THbookFile, THbookKey, TF1, TGraph, TH1, THnBase, ROOT::Internal::THnBaseBrowsable, THStack, TMultiDimFit, TMultiGraph, TPrincipal, TDirectoryFile, TKey, TKeyMapFile, TMapFile, TSPlot, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:20009,depend,dependency,20009,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['depend'],['dependency']
Integrability,"nding on the ROOT environment variable ""Root.ObjStat"" (see TEnv) the object is added to the global TObjectTable for bookkeeping. ; Definition at line 254 of file TObject.h. ◆ TObject() [2/2]. TObject::TObject ; (; const TObject & ; object). inline . TObject copy ctor. ; Definition at line 272 of file TObject.h. ◆ ~TObject(). TObject::~TObject ; (; ). virtual . TObject destructor. ; Removes object from all canvases and object browsers if observer bit is on and remove from the global object table. ; Definition at line 164 of file TObject.cxx. Member Function Documentation. ◆ AbstractMethod(). void TObject::AbstractMethod ; (; const char * ; method); const. Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ; Definition at line 1035 of file TObject.cxx. ◆ AddToTObjectTable(). void TObject::AddToTObjectTable ; (; TObject * ; op). staticprivate . Private helper function which will dispatch to TObjectTable::AddObj. ; Included here to avoid circular dependency between header files. ; Definition at line 181 of file TObject.cxx. ◆ AppendPad(). void TObject::AppendPad ; (; Option_t * ; option = """"). virtual . Append graphics object to current pad. ; In case no current pad is set yet, create a default canvas with the name ""c1"". ; Definition at line 190 of file TObject.cxx. ◆ Browse(). void TObject::Browse ; (; TBrowser * ; b). virtual . Browse object. May be overridden for another default action. ; Reimplemented in TASImage, TRecorder, TEfficiency, TGraph2D, TChain, TTree, TDirectory, TFolder, TMacro, TRemoteObject, TROOT, TStyle, TSystemDirectory, TSystemFile, TTask, TCollection, TPair, TBrowserObject, TBaseClass, TClass, TGeoManager, TGeoNode, TGeoVolume, TGeoOverlap, TGeoTrack, TCanvas, TPad, TAxis3D, TGeometry, TNode, TRootIconList, THbookBranch, THbookFile, THbookKey, TF1, TGraph, TH1, THnBase, ROOT::Internal::THnBaseBrowsable, THStack, TMultiDimFit, TMultiGraph, TPrincipal, TDirectoryFile, TKey, TKeyMapFile, TMapFile, TSPlot, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:20010,depend,dependency,20010,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['depend'],['dependency']
Integrability,"nding to external C functions; RooCFunction4Binding<double,double,double,double,double> RooAbsReal binding to external C functions; RooCFunction4Binding<double,double,double,double,int> RooAbsReal binding to external C functions; RooCFunction4PdfBinding<double,double,double,double,bool> RooAbsReal binding to external C functions; RooCFunction4PdfBinding<double,double,double,double,double> RooAbsReal binding to external C functions; RooCFunction4PdfBinding<double,double,double,double,int> RooAbsReal binding to external C functions; RooCFunction4Ref<double,double,double,double,bool> Persistable reference to C function pointer; RooCFunction4Ref<double,double,double,double,double> Persistable reference to C function pointer; RooCFunction4Ref<double,double,double,double,int> Persistable reference to C function pointer; RooCacheManager<RooAbsCacheElement> Cache Manager class generic objects; RooCacheManager<vector<double> > Cache Manager class generic objects; RooCachedPdf P.d.f class that wraps another p.d.f and caches its output ; RooCachedReal P.d.f class that wraps another p.d.f and caches its output ; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit ; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory ; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:31921,wrap,wraps,31921,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,4,['wrap'],['wraps']
Integrability,"ndl;. return 0;; }; 13.8 Numerical Integration; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. ROOT::Math::VirtualIntegrator defines the most basic functionality while the specific behaviours for one or multiple dimensions are implemented in ROOT::Math::VirtualIntegratorOneDim and ROOT::Math::VirtualIntegratorMultiDim. These interfaces define the integrator functionality with abstract methods to set the function, to compute the integral or to set the integration tolerance. These methods must be implemented in the concrete classes existing for the different integration algorithms. The user cannot create directly these virtual integrator interfaces. He needs to create the ROOT::Math::IntegratorOneDim class for integrating one-dimensional functions and ROOT::Math::IntegratorMultiDim for multi-dimensional functions. Through the ROOT Plug-In Manager, the user can initialize ROOT::Math::IntegratorOneDim or ROOT::Math::IntegratorMultiDim with any of the concrete integration classes without dealing with them directly. These two classes provide the same interface as in VirtualIntegratorOneDim and VirtualIntegratorMultiDim, but with the possibility to choose in the constructor, which method will be used to perform the integration.; The method to set the function to be integrated, must be of the function interface type described before. ROOT::Math::IBaseFunctionOneDimFunction is used for ROOT::Math::IBaseFunctionMultiDim and The only difference between the ROOT::Math::IntegratorOneDim and ROOT::Math::IntegratorMultiDim resides in the dimensionality of that function and some specific that will be seen afterwards for the one dimensional one. ROOT::Math Numerical Integrator classes. The rest of the classes shown above in the diagram are the specialized classes provided. Each one implements a different method that will be explained in detail. It is important to notice that the two grayed classes (the one w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:700687,integrat,integration,700687,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integration']
Integrability,"ndler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:1296,message,message,1296,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,2,['message'],['message']
Integrability,"ndler; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TASLogHandler (const char *cmd, TSocket *s, const char *pfx="""");  Execute 'cmd' in a pipe and handle output messages from the related file. ;  ;  TASLogHandler (FILE *f, TSocket *s, const char *pfx="""");  Handle available message from the open file 'f'. ;  ; virtual ~TASLogHandler ();  Handle available message in the open file. ;  ; Bool_t IsValid ();  ; Bool_t Notify () override;  Handle available message in the open file. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASLogHandler.html:1500,message,message,1500,doc/master/classTASLogHandler.html,https://root.cern,https://root.cern/doc/master/classTASLogHandler.html,1,['message'],['message']
Integrability,ndor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofNodeInfo Class describing a PROOF node; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite Local worker PROOF Server Application Interface; TProofSuperMaster PROOF contro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:111147,interface,interface,111147,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['interface'],['interface']
Integrability,ndor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofNodeInfo Class describing a PROOF node; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite Local worker PROOF Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVect,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:109201,interface,interface,109201,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['interface'],['interface']
Integrability,"ndow(). void TGCocoa::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconifies the window ""id"". ; Reimplemented from TVirtualX.; Definition at line 1308 of file TGCocoa.mm. ◆ Init(). Bool_t TGCocoa::Init ; (; void * ; display). overridevirtual . Initializes the X system. ; Returns kFALSE in case of failure. It is implementation dependent. ; Reimplemented from TVirtualX.; Definition at line 491 of file TGCocoa.mm. ◆ InitWindow(). Int_t TGCocoa::InitWindow ; (; ULong_t ; window). overridevirtual . Creates a new window and return window number. ; Returns -1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 640 of file TGCocoa.mm. ◆ InternAtom(). Atom_t TGCocoa::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Returns the atom identifier associated with the specified ""atom_name"" string. ; If ""only_if_exists"" is False, the atom is created if it does not exist. If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent. Uppercase and lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all designate different atoms. ; Reimplemented from TVirtualX.; Definition at line 3577 of file TGCocoa.mm. ◆ IntersectRegion(). void TGCocoa::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the intersection of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX.; Definition at line 4334 of file TGCocoa.mm. ◆ IsA(). TClass * TGCocoa::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGQuartz.; Definition at line 476 of file TGCocoa.h. ◆ IsCmdThread(). Bool_t TGCocoa::IsCmdThread ; (; ); const. inlineoverridevirtual . Reimplemented from TVirtualX.; Definition at line 429 of file TGCoco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:93608,depend,dependent,93608,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['depend'],['dependent']
Integrability,"ndow) at x,y position. ;  ; void PolyPoint (UInt_t npt, TPoint *ppt, const char *col=""#000000"", TImage::ECoordMode mode=kCoordModeOrigin) override;  Draw a poly point. ;  ; void PutPixel (Int_t x, Int_t y, const char *col=""#000000"") override;  Draw a point at the specified position. ;  ; void ReadImage (const char *file, EImageFileTypes type=TImage::kUnknown) override;  Read specified image file. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Scale (UInt_t width, UInt_t height) override;  Scale the original image. ;  ; void SetEditable (Bool_t on=kTRUE) override;  ; void SetImage (ASImage *image);  ; void SetImage (const Double_t *imageData, UInt_t width, UInt_t height, TImagePalette *palette=nullptr) override;  Deletes the old image and creates a new image depending on the values of imageData. ;  ; void SetImage (const TArrayD &imageData, UInt_t width, TImagePalette *palette=nullptr) override;  Delete the old image and creates a new image depending on the values of imageData. ;  ; void SetImage (const TVectorD &imageData, UInt_t width, TImagePalette *palette=nullptr) override;  Delete the old image and creates a new image depending on the values of imageData. ;  ; void SetImage (Pixmap_t pxm, Pixmap_t mask=0) override;  Create image from pixmap. ;  ; Bool_t SetImageBuffer (char **buffer, EImageFileTypes type=TImage::kPng) override;  Create image from compressed buffer. ;  ; Bool_t SetJpegDpi (const char *name, UInt_t dpi=72);  Set an image printing resolution in Dots Per Inch units. ;  ; void SetPalette (const TImagePalette *palette) override;  Set a new palette to an image. ;  ; void SetPaletteEnabled (Bool_t on=kTRUE) override;  Switch on/off the image palette. ;  ; void SetTitle (const char *title="""") override;  Set a title for an image. ;  ; void Slice (UInt_t xStart, UInt_t xEnd, UInt_t yStart, UInt_t yEnd, UInt_t toWidth, UInt_t toHeight) override;  Another m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:12511,depend,depending,12511,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['depend'],['depending']
Integrability,"ndowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGView(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t xMargin = 0, UInt_t yMargin = 0, UInt_t options = kSunkenFrame | kDoubleBorder, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create an editor view, containing an TGEditorFrame and (optionally); a horizontal and vertical scrollbar. ~TGView(); Delete view. void Clear(Option_t* = """"); Clear view. void SetVisibleStart(Int_t newTop, Int_t direction); Scroll view in specified direction to make newTop the visible location. void DrawRegion(Int_t x, Int_t y, UInt_t width, UInt_t height); Draw region. void UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); update a part of view. void UpdateBackgroundStart(); set some gc values. Bool_t HandleButton(Event_t* event); handle button. void DoRedraw(); redraw. Bool_t HandleExpose(Event_t* event); Handle expose events. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process scrollbar messages. void Layout(); layout view. void DrawBorder(); Draw the border of the text edit widget. void ScrollToPosition(TGLongPosition newPos); Scroll the canvas to pos. void ScrollCanvas(Int_t newTop, Int_t direction); Scroll the canvas to new_top in the kVertical or kHorizontal direction. void ChangeBackground(Pixel_t ); Change background color of the canvas frame. void SetBackgroundColor(Pixel_t ); Set background color of the canvas frame. void SetBackgroundPixmap(Pixmap_t p); Set backgound pixmap. Bool_t ItemLayout(); { return kFALSE; }. TGView(const TGView& ). TGView& operator=(const TGView& ). TGViewFrame * GetCanvas() const; { return fCanvas; }. void SetLayoutManager(TGLayoutManager* ); { }. void ScrollUp(Int_t pixels); { ScrollToPosition(TGLongPosition(fVisible.fX, fVisible.fY + pixels)); }. void ScrollDown(Int_t pixels); { ScrollToPosition(TGLongPosition(fVisible.fX, fVisible.fY - pixels)); }. void ScrollLeft(Int_t pixels); { ScrollToPositio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGView.html:23047,message,messages,23047,root/html602/TGView.html,https://root.cern,https://root.cern/root/html602/TGView.html,2,['message'],['messages']
Integrability,"ndowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. void HandleShiftTab(); Handle Shift+Tab key event (set focus to the previous number entry field). void HandleTab(); Handle Tab key event (set focus to the next number entry field). TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0). » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id$ » Last generated: 2015-06-02 15:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFitParametersDialog.html:26430,depend,dependent,26430,root/html604/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html604/TFitParametersDialog.html,1,['depend'],['dependent']
Integrability,"ndowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. void HandleShiftTab(); Handle Shift+Tab key event (set focus to the previous number entry field). void HandleTab(); Handle Tab key event (set focus to the next number entry field). TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0). » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitParametersDialog.html:26430,depend,dependent,26430,root/html602/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html602/TFitParametersDialog.html,1,['depend'],['dependent']
Integrability,"ndowSize; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfBlockSizesize of data buffer used to transfer; Long64_tfBytesReadnumber of bytes received; Long64_tfBytesWritenumber of bytes sent; TStringfCurrentFilefile currently being get or put; Bool_tfDirIndicates if a remote directory is open; TStringfHostFQDN of remote host; Int_tfLastBlocklast block successfully transfered; Int_tfModebinary or ascii file transfer mode; Int_tfParallelnumber of parallel sockets; Int_tfPortport to which to connect; Int_tfProtocolrootd protocol level; Long64_tfRestartAtrestart transmission at specified offset; TSocket*fSocket! connection to rootd; TStringfUserremote user; Int_tfWindowSizetcp window size used; static Long64_tfgBytesReadnumber of bytes received by all TFTP objects; static Long64_tfgBytesWritenumber of bytes sent by all TFTP objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFTP(const char* url, Int_t parallel = 1, Int_t wsize = kDfltWindowSize, TSocket* sock = 0); Open connection to host specified by the url using par parallel sockets.; The url has the form: [root[s,k]://]host[:port].; If port is not specified the default rootd port (1094) will be used.; Using wsize one can specify the tcp window size. Normally this is not; needed when using parallel sockets.; An existing connection (TSocket *sock) can also be used to establish; the FTP session. void Init(const char* url, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFTP.html:8032,protocol,protocol,8032,root/html602/TFTP.html,https://root.cern,https://root.cern/root/html602/TFTP.html,2,['protocol'],['protocol']
Integrability,"ndow_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedMarkerSelect(const TGWindow* p, Style_t markerStyle, Int_t id); Create and show marker popup window. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages according to the user input. void DoRedraw(); Draw selected marker type as current one. void SetMarkerStyle(Style_t pattern); Set marker. void SavePrimitive(ostream& out, Option_t* = """"); Save the pattern select widget as a C++ statement(s) on output stream out. virtual ~TGedMarkerSelect(); { if(fPicture) gClient->FreePicture(fPicture);}. Style_t GetMarkerStyle() const; { return fMarkerStyle; }. void MarkerSelected(Style_t marker = 0); { Emit(""MarkerSelected(Style_t)"", marker ? marker : GetMarkerStyle()); }. TGDimension GetDefaultSize() const; { return TGDimension(38, 21); }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TGedMarkerSelect.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedMarkerSelect.html:22921,message,messages,22921,root/html528/TGedMarkerSelect.html,https://root.cern,https://root.cern/root/html528/TGedMarkerSelect.html,1,['message'],['messages']
Integrability,"ndow_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedMarkerSelect(const TGWindow* p, Style_t markerStyle, Int_t id); Create and show marker popup window. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages according to the user input. void DoRedraw(); Draw selected marker type as current one. void SetMarkerStyle(Style_t pattern); Set marker. void SavePrimitive(ostream& out, Option_t* = """"); Save the pattern select widget as a C++ statement(s) on output stream out. virtual ~TGedMarkerSelect(); { if(fPicture) gClient->FreePicture(fPicture);}. Style_t GetMarkerStyle() const; { return fMarkerStyle; }. void MarkerSelected(Style_t marker = 0); { Emit(""MarkerSelected(Style_t)"", marker ? marker : GetMarkerStyle()); }. TGDimension GetDefaultSize() const; { return TGDimension(38, 21); }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TGedMarkerSelect.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGedMarkerSelect.html:23315,message,messages,23315,root/html530/TGedMarkerSelect.html,https://root.cern,https://root.cern/root/html530/TGedMarkerSelect.html,1,['message'],['messages']
Integrability,"ndow_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedMarkerSelect(const TGWindow* p, Style_t markerStyle, Int_t id); Create and show marker popup window. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages according to the user input. void DoRedraw(); Draw selected marker type as current one. void SetMarkerStyle(Style_t pattern); Set marker. void SavePrimitive(ostream& out, Option_t* = """"); Save the pattern select widget as a C++ statement(s) on output stream out. virtual ~TGedMarkerSelect(); { if(fPicture) gClient->FreePicture(fPicture);}. Style_t GetMarkerStyle() const; { return fMarkerStyle; }. void MarkerSelected(Style_t marker = 0); { Emit(""MarkerSelected(Style_t)"", marker ? marker : GetMarkerStyle()); }. TGDimension GetDefaultSize() const; { return TGDimension(38, 21); }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TGedMarkerSelect.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGedMarkerSelect.html:23315,message,messages,23315,root/html532/TGedMarkerSelect.html,https://root.cern,https://root.cern/root/html532/TGedMarkerSelect.html,1,['message'],['messages']
Integrability,"nds like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); Send command to be executed on node of ordinal 'ord' (use ""0"" for master).; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster.; If logtomacro is TRUE the text result of the action is saved in the fMacroLog; TMacro, accessible via TMacro::GetMacroLog();; Returns -1 in case of error, >=0 in case of succes. Int_t SendCommand(const char* cmd, TProof::ESlaves list = kActive); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command, however commands; like "".x file.C"" or "".L file.C"" will not cause the file.C to be; transfered to the PROOF cluster. In that case use TProof::Exec().; Returns the status send by the remote server as part of the; kPROOF_LOGDONE message. Typically this is the return code of the; command on the remote side. Returns -1 in case of error. TString Getenv(const char* env, const char* ord = ""0""); Get value of environment variable 'env' on node 'ord'. Int_t GetRC(const char* RCenv, Int_t& env, const char* ord = ""0""); Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, TString& env, const char* ord = ""0""); Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. Int_t SendCurrentState(TList* list); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:62808,message,message,62808,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,2,['message'],['message']
Integrability,"nds like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); Send command to be executed on node of ordinal 'ord' (use ""0"" for master).; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster.; If logtomacro is TRUE the text result of the action is saved in the fMacroLog; TMacro, accessible via TMacro::GetMacroLog();; Returns -1 in case of error, >=0 in case of succes. Int_t SendCommand(const char* cmd, TProof::ESlaves list = kActive); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command, however commands; like "".x file.C"" or "".L file.C"" will not cause the file.C to be; transfered to the PROOF cluster. In that case use TProof::Exec().; Returns the status send by the remote server as part of the; kPROOF_LOGDONE message. Typically this is the return code of the; command on the remote side. Returns -1 in case of error. TString Getenv(const char* env, const char* ord = ""0""); Get value of environment variable 'env' on node 'ord'. Int_t GetRC(const char* RCenv, Int_t& env, const char* ord = ""0""); Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, TString& env, const char* ord = ""0""); Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. curren",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:65197,message,message,65197,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['message'],['message']
Integrability,"ndtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNextFreeMerger(); Return a merger, which is both active and still accepts some workers to be; assigned to it. It works on the 'round-robin' basis. void AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:43000,message,message,43000,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['message'],['message']
Integrability,"ndtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection.; Collect also stops its execution from time to time to check for new; workers in Dynamic Startup mode. Int_t PollForNewWorkers(); Asks the PROOF Serv for new workers in Dynamic Startup mode and activates; them. Returns the number of new workers found, or <0 on errors. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:46856,message,message,46856,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['message'],['message']
Integrability,"ne . Provides a representation of the columns in the dataset. ; Parameters. [in]columnListNames of the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsNumber of maximum elements in collection. . Returnsthe RDisplay instance wrapped in a RResultPtr.; See the previous overloads for further details. ; Definition at line 3091 of file RInterface.hxx. ◆ Display() [4/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; std::string_view ; columnNameRegexp = """", . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Parameters. [in]columnNameRegexpA regular expression to select the columns. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsMaximum number of collection elements to display per row. . Returnsthe RDisplay instance wrapped in a RResultPtr.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for further details. ; Definition at line 3075 of file RInterface.hxx. ◆ Fill(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T > . RResultPtr< std::decay_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Fill ; (; T && ; model, . const ColumnNames_t & ; columnList . ). inline . Return an object of type T on which T::Fill will be called once per event (lazy action). ; Type T must provide at least:; a copy-constructor; a Fill method that accepts as many arguments and with same types as the column names passed as columnList (these types can also be passed as template parameters to this method); a Merge method with signature Merge(TCollection *) or Merge(const std::vector<T *>&) that merges the objects ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:65266,wrap,wrapped,65266,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['wrap'],['wrapped']
Integrability,"ne 236 of file TSQLFile.h. ◆ ProduceClassSelectQuery(). Bool_t TSQLFile::ProduceClassSelectQuery ; (; TVirtualStreamerInfo * ; info, . TSQLClassInfo * ; sqlinfo, . TString & ; columns, . TString & ; tables, . Int_t & ; tablecnt . ). protected . used by MakeClassSelectQuery method to add columns from table of class, specified by TVirtualStreamerInfo structure ; Definition at line 1237 of file TSQLFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TSQLFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). inlinefinalvirtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 237 of file TSQLFile.h. ◆ ReadBuffer() [2/2]. Bool_t TSQLFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). inlinefinalvirtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented from TFile.; Definition at line 238 of file TSQLFile.h. ◆ ReadConfigurations(). Bool_t TSQLFile::ReadConfigurations ; (; ). protected . read table configurations as special table ; Definition at line 1054 of file TSQLFile.cxx. ◆ ReadFree(). void TSQLFile::ReadFree ; (; ). inlinefinalvirtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented from TFile.; Definition at line 239 of file TSQLFile.h. ◆ ReadSpecialObject(). TObject * TSQLFile::ReadSpecialObject ; (; Long64_t ; keyid, . TObject * ; obj = nullptr . ). protected . Read data of special kind of objects. ; Definition at line 851 of file TSQLFile.cxx. ◆ ReadSQLClassInfos(). void TSQLFile::ReadSQLClassInfos ; (; ). protected . Read all class infos from IdsTable. ; Definition at line 1911 of file TSQLFile.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:83342,rout,routine,83342,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['rout'],['routine']
Integrability,"ne 2715 of file TGCocoa.mm. ◆ GrabPointer(). void TGCocoa::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX.; Definition at line 2678 of file TGCocoa.mm. ◆ HasTTFonts(). Bool_t TGCocoa::HasTTFonts ; (; ); const. overridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX.; Definition at line 2841 of file TGCocoa.mm. ◆ IconifyWindow(). void TGCocoa::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconifies the window ""id"". ; Reimplemented from TVirtualX.; Definition at line 1308 of file TGCocoa.mm. ◆ Init(). Bool_t TGCocoa::Init ; (; void * ; display). overridevirtual . Initializes the X system. ; Returns kFALSE in case of failure. It is implementation dependent. ; Reimplemented from TVirtualX.; Definition at line 491 of file TGCocoa.mm. ◆ InitWindow(). Int_t TGCocoa::InitWindow ; (; ULong_t ; window). overridevirtual . Creates a new window and return window number. ; Returns -1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 640 of file TGCocoa.mm. ◆ InternAtom(). Atom_t TGCocoa::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Returns the atom identifier associated with the specified ""atom_name"" string. ; If ""only_if_exists"" is False, the atom is created if it does not exist. If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent. Uppercase and lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all designate different atoms. ; Reimplemented from TVirtualX.; Definition at line 3577 of file TGCocoa.mm. ◆ IntersectRegion(). void TGCocoa::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:92901,depend,dependent,92901,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['depend'],['dependent']
Integrability,"ne 45 of file WrappedTF1.h. ◆ BaseGradFunc. typedef ROOT::Math::IParamGradFunction ROOT::Math::WrappedTF1::BaseGradFunc. Definition at line 44 of file WrappedTF1.h. ◆ IGrad. typedef ROOT::Math::IGradientFunctionOneDim ROOT::Math::WrappedTF1::IGrad. Definition at line 43 of file WrappedTF1.h. Constructor & Destructor Documentation. ◆ WrappedTF1() [1/2]. ROOT::Math::WrappedTF1::WrappedTF1 ; (; TF1 & ; f). constructor from a TF1 function pointer. ; Definition at line 41 of file WrappedTF1.cxx. ◆ ~WrappedTF1(). ROOT::Math::WrappedTF1::~WrappedTF1 ; (; ). inlineoverride . Destructor (no operations). ; TF1 Function pointer is not owned ; Definition at line 56 of file WrappedTF1.h. ◆ WrappedTF1() [2/2]. ROOT::Math::WrappedTF1::WrappedTF1 ; (; const WrappedTF1 & ; rhs). Copy constructor. ; Definition at line 69 of file WrappedTF1.cxx. Member Function Documentation. ◆ Clone(). ROOT::Math::IGenFunction * ROOT::Math::WrappedTF1::Clone ; (; ); const. inlineoverridevirtual . Clone the wrapper but not the original function. ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 73 of file WrappedTF1.h. ◆ DoDerivative(). double ROOT::Math::WrappedTF1::DoDerivative ; (; double ; x); const. overrideprivatevirtual . return the function derivatives w.r.t. x ; Implements ROOT::Math::IGradientFunctionOneDim.; Definition at line 110 of file WrappedTF1.cxx. ◆ DoEval(). double ROOT::Math::WrappedTF1::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . evaluate function using the cached parameter values (of TF1) re-implement for better efficiency ; Reimplemented from ROOT::Math::IParametricFunctionOneDim.; Definition at line 142 of file WrappedTF1.h. ◆ DoEvalPar(). double ROOT::Math::WrappedTF1::DoEvalPar ; (; double ; x, . const double * ; p . ); const. inlineoverrideprivatevirtual . evaluate function passing coordinates x and vector of parameters ; Implements ROOT::Math::IParametricFunctionOneDim.; Definition at line 133 of file WrappedTF1.h. ◆ DoParameterDerivative()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html:7501,wrap,wrapper,7501,doc/master/classROOT_1_1Math_1_1WrappedTF1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html,1,['wrap'],['wrapper']
Integrability,"ne 46 of file RooLegendre.h. ◆ doEval(). void RooLegendre::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 146 of file RooLegendre.cxx. ◆ evaluate(). double RooLegendre::evaluate ; (; ); const. overrideprotectedvirtual . Note: P_0^0 = 1, so P_l^m = P_l^m P_0^0. ; Implements RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 96 of file RooLegendre.cxx. ◆ getAnalyticalIntegral(). Int_t RooLegendre::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 165 of file RooLegendre.cxx. ◆ getMaxVal(). Int_t RooLegendre::getMaxVal ; (; const RooArgSet & ; vars); const. overridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 205 of file RooLegendre.cxx. ◆ IsA(). TClass * RooLegendre::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 46 of file Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:63148,depend,dependents,63148,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,3,"['depend', 'integrat']","['dependents', 'integrate', 'integration']"
Integrability,ne 73 of file RooNumGenConfig.h. ◆ _method1D. RooCategory RooNumGenConfig::_method1D. protected . Selects integration method for 1D p.d.f.s. ; Definition at line 58 of file RooNumGenConfig.h. ◆ _method1DCat. RooCategory RooNumGenConfig::_method1DCat. protected . Selects integration method for 1D p.d.f.s with categories. ; Definition at line 59 of file RooNumGenConfig.h. ◆ _method1DCond. RooCategory RooNumGenConfig::_method1DCond. protected . Selects integration method for 1D conditional p.d.f.s. ; Definition at line 60 of file RooNumGenConfig.h. ◆ _method1DCondCat. RooCategory RooNumGenConfig::_method1DCondCat. protected . Selects integration method for 1D conditional p.d.f.s with categories. ; Definition at line 61 of file RooNumGenConfig.h. ◆ _method2D. RooCategory RooNumGenConfig::_method2D. protected . Selects integration method for 2D p.d.f.s. ; Definition at line 63 of file RooNumGenConfig.h. ◆ _method2DCat. RooCategory RooNumGenConfig::_method2DCat. protected . Selects integration method for 2D p.d.f.s with categories. ; Definition at line 64 of file RooNumGenConfig.h. ◆ _method2DCond. RooCategory RooNumGenConfig::_method2DCond. protected . Selects integration method for 2D conditional p.d.f.s. ; Definition at line 65 of file RooNumGenConfig.h. ◆ _method2DCondCat. RooCategory RooNumGenConfig::_method2DCondCat. protected . Selects integration method for 2D conditional p.d.f.s with categories. ; Definition at line 66 of file RooNumGenConfig.h. ◆ _methodND. RooCategory RooNumGenConfig::_methodND. protected . Selects integration method for ND p.d.f.s. ; Definition at line 68 of file RooNumGenConfig.h. ◆ _methodNDCat. RooCategory RooNumGenConfig::_methodNDCat. protected . Selects integration method for ND p.d.f.s with categories. ; Definition at line 69 of file RooNumGenConfig.h. ◆ _methodNDCond. RooCategory RooNumGenConfig::_methodNDCond. protected . Selects integration method for ND conditional p.d.f.s. ; Definition at line 70 of file RooNumGenConfig.h. ◆ _method,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:20821,integrat,integration,20821,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Integrability,"ne 734 of file TSystem.cxx. ◆ Streamer(). void TSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed.; Reimplemented in TUnixSystem, TWinNTSystem, and TWebSystem. ◆ StreamerNVirtual(). void TSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 558 of file TSystem.h. ◆ StripOffProto(). const char * TSystem::StripOffProto ; (; const char * ; path, . const char * ; proto . ). staticprotected . Strip off protocol string from specified path. ; Definition at line 117 of file TSystem.cxx. ◆ Symlink(). int TSystem::Symlink ; (; const char * ; from, . const char * ; to . ). virtual . Create a symbolic link from file1 to file2. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1368 of file TSystem.cxx. ◆ Syslog(). void TSystem::Syslog ; (; ELogLevel ; level, . const char * ; mess . ). virtual . Send mess to syslog daemon. ; Level is the logging level and mess the message that will be written on the log. ; Reimplemented in TUnixSystem.; Definition at line 1686 of file TSystem.cxx. ◆ TempDirectory(). const char * TSystem::TempDirectory ; (; ); const. virtual . Return a user configured or systemwide directory to create temporary files in. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1482 of file TSystem.cxx. ◆ TempFileName(). FILE * TSystem::TempFileName ; (; TString & ; base, . const char * ; dir = nullptr, . const char * ; suffix = nullptr . ). virtual . Create a secure temporary file by appending a unique 6 letter string to base. ; The file will be created in a standard (system) directory or in the directory provided in dir. Optionally one can provide suffix append to the final name - like extension "".txt"" or "".html"". The full filename is returned in base and a filepointer is returned for safely writing to the file (this avoids certain security problems). Returns 0 in case of error. ; Reimplemented in TUnixSystem, and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:94356,message,message,94356,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['message'],['message']
Integrability,"ne 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new function ; Definition at line 127 of file IntegratorMultiDim.h. ◆ Integral() [3/3]. template<class Function > . double ROOT::Math::IntegratorMultiDim::Integral ; (; Function & ; f, . unsigned int ; dim, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new generic function ; Definition at line 134 of file IntegratorMultiDim.h. ◆ Name(). std::string ROOT::Math::IntegratorMultiDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 183 of file IntegratorMultiDim.h. ◆ operator=(). IntegratorMultiDim & ROOT::Math::IntegratorMultiDim::operator= ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 114 of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:8143,integrat,integrator,8143,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,1,['integrat'],['integrator']
Integrability,"ne 84 of file TGLScenePad.h. ◆ GetPad(). TVirtualPad * TGLScenePad::GetPad ; (; ); const. inline . Definition at line 62 of file TGLScenePad.h. ◆ GetSmartRefresh(). Bool_t TGLScenePad::GetSmartRefresh ; (; ); const. inline . Definition at line 72 of file TGLScenePad.h. ◆ IsA(). TClass * TGLScenePad::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 98 of file TGLScenePad.h. ◆ ObjectPaint(). void TGLScenePad::ObjectPaint ; (; TObject * ; obj, . Option_t * ; opt = """" . ). overridevirtual . Override of virtual TVirtualViewer3D::ObjectPaint(). ; Special handling of 2D/3D histograms to activate Timur's histo-painters. ; Reimplemented from TVirtualViewer3D.; Definition at line 189 of file TGLScenePad.cxx. ◆ OpenComposite(). Bool_t TGLScenePad::OpenComposite ; (; const TBuffer3D & ; buffer, . Bool_t * ; addChildren = nullptr . ). overridevirtual . Open new composite container. ; TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 482 of file TGLScenePad.cxx. ◆ operator=(). TGLScenePad & TGLScenePad::operator= ; (; const TGLScenePad & ; ). privatedelete . ◆ PadPaint(). void TGLScenePad::PadPaint ; (; TVirtualPad * ; pad). overridevirtual . Entry point for updating scene contents via VirtualViewer3D interface. ; For now this is handled by TGLViewer as it remains the 'Viewer3D' of given pad. ; Reimplemented from TVirtualViewer3D.; Definition at line 233 of file TGLScenePad.cxx. ◆ PadPaintFromViewer(). void TGLScenePad::PadPaintFromViewer ; (; TGLViewer * ; viewer). virtual . Entry point for requesting update of scene's contents from gl-viewer. ; Definition at line 217 of file TGLScenePad.cxx. ◆ PreferLocalFrame(). Bool_t TGLScenePad::PreferLocalFrame ; (; ); const. inlineoverridevirtual . Implements TVirtualViewer3D.; Definition at line 86 of file TGLScenePad.h. ◆ SetPad(). void TGLScen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:31741,interface,interface,31741,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['interface'],['interface']
Integrability,"ne before handing them over to Minit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply his own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize the \(\mbox{FCN}\) in several minimization steps, re-using the result of the preceeding minimization in the next step and change parameters in between (fix/release/put limits on them, etc.). How M minimizations can be performed is shown in [example:main].; 4.4.1 Direct usage of minimizers; Minimizers such as the VariableMetricMinimizer are designed as state-less minimization engines, which means that they do not depend on the current function and its parameters. Any \(\mbox{FCN}\) function can be minimized with the same minimizer. The interface is restricted to minimization and no parameter interaction is possible.; 4.4.2 Using an application (MnMigrad); MnMigrad uses the VariableMetricMinimizer for minimization but allows as well for parameter interaction by the user. An instance of MnMigrad is specific to the current \(\mbox{FCN}\) and user parameters. Any parameter interaction of the user between two minimization steps will make use of the result of the preceeding minimization in an optimal way. The interface for parameters (see [api:parameters], [api:covariance] and [api:state]) is forwardedin MnMigrad.; 4.4.3 Subsequent minimizations; M takes care that all information is treated in an optimal and correct wayif the user interacts with the parameters between two minimizations. MnMigrad retains the result of the last minimization and uses t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:39268,depend,depend,39268,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['depend'],['depend']
Integrability,"ne dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Static Protected Member Functions; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  . Protected Attributes; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . Private Attributes; std::vector< std::vector< double > > fCoords;  This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ;  ; std::vector< const double * > fCoordsPtr;  ; DataOptions fOptions;  ; double * fpTmpCoordVector;  ; DataRange fRange;  . #include <Fit/FitData.h>. Inheritance diagram for ROOT::Fit::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:4635,rout,routines,4635,doc/master/classROOT_1_1Fit_1_1FitData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html,1,['rout'],['routines']
Integrability,"ne member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built ; Definition at line 3477 of file TClass.cxx. ◆ GetDeclFileLine(). Short_t TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return name of the file containing the declaration of this class. ; Definition at line 3463 of file TClass.cxx. ◆ GetDeclIdMap(). DeclIdMap_t * TClass::GetDeclIdMap ; (; ). staticprivate . Definition at line 480 of file TClass.cxx. ◆ GetDelete(). ROOT::DelFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3607 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:79189,wrap,wrapper,79189,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['wrap'],['wrapper']
Integrability,"ne member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built ; Definition at line 3544 of file TClass.cxx. ◆ GetDeclFileLine(). Short_t TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return name of the file containing the declaration of this class. ; Definition at line 3530 of file TClass.cxx. ◆ GetDeclIdMap(). DeclIdMap_t * TClass::GetDeclIdMap ; (; ). staticprivate . Definition at line 480 of file TClass.cxx. ◆ GetDelete(). ROOT::DelFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7530 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7538 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7546 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3489 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3498 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7554 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3674 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:79190,wrap,wrapper,79190,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['wrap'],['wrapper']
Integrability,"ne thread (probably depending whether MyCondition had been signaled before). MyCondition.TimedWait(secs,nanosecs) waits for MyCondition until the absolute time in seconds and nanoseconds since beginning of the epoch (January, 1st, 1970) is reached; to use relative timeouts ‘‘delta’‘, it is required to calculate the absolute time at the beginning of waiting ‘‘now’’; for example:. Ulong_t now,then,delta; // seconds; TDatime myTime; // root daytime class; myTime.Set(); // myTime set to ""now""; now=myTime.Convert(); // to seconds since 1970. Return value wait of MyCondition.TimedWait should be 0, if MyCondition.Signal() was received, and should be nonzero, if timeout was reached. The conditions example shows how three threaded functions are synchronized using TCondition: a ROOT script condstart.C starts the threads, which are defined in a shared library (conditions.cxx, conditions.h).; 23.2.4.3 Xlib Connections; Usually Xlib is not thread safe. This means that calls to the X could fail, when it receives X-messages from different threads. The actual result depends strongly on which version of Xlib has been installed on your system. The only thing we can do here within ROOT is calling a special function XInitThreads()(which is part of the Xlib), which should (!) prepare the Xlib for the usage with threads.; To avoid further problems within ROOT some redefinition of the gPad pointer was done (that’s the main reason for the recompilation). When a thread creates a TCanvas, this object is actually created in the main thread; this should be transparent to the user. Actions on the canvas are controlled via a function, which returns a pointer to either thread specific data (TSD) or the main thread pointer. This mechanism works currently only for gPad, gDirectory, gFile and will be implemented soon for other global Objects as e.g. gVirtualX.; 23.2.4.4 Canceling a TThread; Canceling of a thread is a rather dangerous action. In TThread canceling is forbidden by default. The user can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1110511,message,messages,1110511,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['message'],['messages']
Integrability,"ne) ;; 3507 ; 3508 if (evalErrorData().mode == PrintErrors) {; 3509 coutE(Eval) << ""RooAbsReal::logEvalError("" << GetName() << "") evaluation error, "" << std::endl; 3510 << "" origin : "" << oss2.str() << std::endl; 3511 << "" message : "" << ee._msg << std::endl; 3512 << "" server values: "" << ee._srvval << std::endl ;; 3513 } else if (evalErrorData().mode == CollectErrors) {; 3514 auto &evalErrorList = evalErrorData().errorList[this];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554////////////////////////////////////////////////////////////////////////////////; 3555/// Retrieve bin boundaries if this distributio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:150840,message,message,150840,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['message'],['message']
Integrability,"ne-dimensional function:. #include ""Math/IFunction.h"". class MyGradientFunction: public ROOT::Math::IGradientFunctionOneDim; {; public:; double DoEval(double x) const; {; return sin(x);; }. ROOT::Math::IBaseFunctionOneDim* Clone() const; {; return new MyGradientFunction();; }. double DoDerivative(double x) const; {; return -cos(x);; }. };; 13.7.2 Multi-dimensional Function Interfaces; The most generic case of a multidimensional function has similar approach. Some examples will be shown next. It is important to notice, that one dimensional functions can be also implemented through the interfaces that will be presented here. Nevertheless, the user needs to implement those following the indications of the previous chapter, for algorithm working exclusivly on one-dimensional functions. For algorithms working on both one-dimensional and multi-dimensional functions they should instead use this interface. ROOT::Math::IBaseFunctionMultiDim: This interface provides the double operator() (const double*) that takes an array of doubles with all the values for the different dimensions. In this case, the user has to provide the functionality for two different functions: double DoEval(const double*) and unsigned int NDim(). The first ones evaluates the function given the array that represents the multiple variables. The second returns the number of dimensions of the function.; Example of implementing a basic multi-dimensional function:. #include ""Math/IFunction.h"". class MyFunction: public ROOT::Math::IBaseFunctionMultiDim; {; public:; double DoEval(const double* x) const; {; return x[0] + sin(x[1]);; }. unsigned int NDim() const; {; return 2;; }. ROOT::Math::IBaseFunctionMultiDim* Clone() const; {; return new MyFunction();; }. };. ROOT::Math::IGradientFunctionMultiDim: This interface offers the same functionality as the base function plus the calculation of the derivative. It only adds the double Derivative(double* x, uint ivar) method for the user to implement. This method must ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:689560,interface,interface,689560,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['interface'],['interface']
Integrability,"ne; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25238,message,messages,25238,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,2,['message'],['messages']
Integrability,"neOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/PiecewiseInterpolation.html:16676,message,message,16676,root/html532/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html532/PiecewiseInterpolation.html,1,['message'],['message']
Integrability,"neOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:18598,message,message,18598,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,1,['message'],['message']
Integrability,"neOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMinuit*minuit(); RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumEval() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProfileLL.html:16802,message,message,16802,root/html532/RooProfileLL.html,https://root.cern,https://root.cern/root/html532/RooProfileLL.html,1,['message'],['message']
Integrability,"neOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ParamHistFunc.html:16962,message,message,16962,root/html532/ParamHistFunc.html,https://root.cern,https://root.cern/root/html532/ParamHistFunc.html,7,['message'],['message']
Integrability,"neOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo1DMomentMorphFunction.html:16410,message,message,16410,root/html532/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html532/Roo1DMomentMorphFunction.html,39,['message'],['message']
Integrability,"neOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooLegendre.html:16280,message,message,16280,root/html532/RooLegendre.html,https://root.cern,https://root.cern/root/html532/RooLegendre.html,2,['message'],['message']
Integrability,"nePad(); Just a wrapper. void EditorBar(); Just a wrapper. void EnterLeave(TPad* prevSelPad, TObject* prevSelObj); just a wrapper. void FeedbackMode(Bool_t set); just a wrapper. void Flush(); just a wrapper. void UseCurrentStyle(); just a wrapper. void ForceUpdate(); just a wrapper. const char * GetDISPLAY(); just a wrapper. TContextMenu * GetContextMenu(); just a wrapper. Int_t GetDoubleBuffer(); just a wrapper. Int_t GetEvent(); just a wrapper. Int_t GetEventX(); just a wrapper. Int_t GetEventY(); just a wrapper. Color_t GetHighLightColor(); just a wrapper. TVirtualPad * GetPadSave(); just a wrapper. TObject * GetSelected(); just a wrapper. Option_t * GetSelectedOpt(); just a wrapper. TVirtualPad * GetSelectedPad(); just a wrapper. Bool_t GetShowEventStatus(); just a wrapper. Bool_t GetAutoExec(); just a wrapper. Size_t GetXsizeUser(); just a wrapper. Size_t GetYsizeUser(); just a wrapper. Size_t GetXsizeReal(); just a wrapper. Size_t GetYsizeReal(); just a wrapper. Int_t GetCanvasID(); just a wrapper. Int_t GetWindowTopX(); just a wrapper. Int_t GetWindowTopY(); just a wrapper. UInt_t GetWindowWidth(); just a wrapper. UInt_t GetWindowHeight(); just a wrapper. UInt_t GetWw(); just a wrapper. UInt_t GetWh(); just a wrapper. void GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UInt_t& wh); just a wrapper. void HandleInput(EEventType button, Int_t x, Int_t y); just a wrapper. Bool_t HasMenuBar(); just a wrapper. void Iconify(); just a wrapper. Bool_t IsBatch(); just a wrapper. Bool_t IsRetained(); just a wrapper. void ls(Option_t* option = """"); just a wrapper. void MoveOpaque(Int_t set = 1); just a wrapper. Bool_t OpaqueMoving(); just a wrapper. Bool_t OpaqueResizing(); just a wrapper. void Paint(Option_t* option = """"); just a wrapper. TPad * Pick(Int_t px, Int_t py, TObjLink*& pickobj); just a wrapper. TPad * Pick(Int_t px, Int_t py, TObject* prevSelObj); just a wrapper. void Resize(Option_t* option = """"); just a wrapper. void ResizeOpaque(Int_t set = 1); just a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootCanvas.html:6119,wrap,wrapper,6119,root/html528/TQRootCanvas.html,https://root.cern,https://root.cern/root/html528/TQRootCanvas.html,3,['wrap'],['wrapper']
Integrability,"neSet->find(GetName()));; 879 ; 880 // The remaining entries in our list of leaf nodes are the external; 881 // dependents (x) and parameters (p) of the projection. Patch them back; 882 // into the theClone. This orphans the nodes they replace, but the orphans; 883 // are still in the cloneList and so will be cleaned up eventually.; 884 //cout << ""redirection leafNodes : "" ; leafNodes.Print(""1"") ;; 885 ; 886 std::unique_ptr<RooArgSet> plotLeafNodes{leafNodes.selectCommon(dependentVars)};; 887 theClone->recursiveRedirectServers(*plotLeafNodes,false,false,false);; 888 ; 889 // Create the set of normalization variables to use in the projection integrand; 890 RooArgSet normSet(dependentVars);; 891 if(nullptr != projectedVars) normSet.add(*projectedVars);; 892 if(nullptr != condObs) {; 893 normSet.remove(*condObs,true,true) ;; 894 }; 895 ; 896 // Try to create a valid projection integral. If no variables are to be projected,; 897 // create a null projection anyway to bind our normalization over the dependents; 898 // consistently with the way they would be bound with a non-trivial projection.; 899 RooArgSet empty;; 900 if(nullptr == projectedVars) projectedVars= &empty;; 901 ; 902 std::string name = GetName();; 903 name += integralNameSuffix(*projectedVars,&normSet,rangeName,true) ;; 904 ; 905 std::string title = std::string{""Projection of ""} + GetTitle();; 906 ; 907 std::unique_ptr<RooAbsReal> projected{theClone->createIntegral(*projectedVars,normSet,rangeName)};; 908 ; 909 if(nullptr == projected || !projected->isValid()) {; 910 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: cannot integrate out "";; 911 projectedVars->printStream(std::cout,kName|kArgs,kSingleLine);; 912 return nullptr;; 913 }; 914 ; 915 if(projected->InheritsFrom(RooRealIntegral::Class())){; 916 static_cast<RooRealIntegral&>(*projected).setAllowComponentSelection(true);; 917 }; 918 ; 919 projected->SetName(name.c_str()) ;; 920 projected->SetTitle(title.c_str()) ;; 921 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:36167,depend,dependents,36167,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['depend'],['dependents']
Integrability,"neTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); Bool_tdefineType(const char* label, Int_t index); virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCategory.html:3386,depend,dependsOn,3386,root/html532/RooCategory.html,https://root.cern,https://root.cern/root/html532/RooCategory.html,1,['depend'],['dependsOn']
Integrability,"nealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:38576,interface,interface,38576,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['interface'],['interface']
Integrability,"nearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different efficiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:104606,interface,interface,104606,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['interface'],['interface']
Integrability,"nearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:95570,interface,interface,95570,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['interface'],['interface']
Integrability,"nearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  ►CRooMomentMorphFunc;  CCacheElem;  ►CRooMomentMorphFuncND;  CCacheElem;  CDigits;  CGrid2;  ►CRooMomentMorphND;  CCacheElem;  CGrid;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different efficiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:111489,interface,interface,111489,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['interface'],['interface']
Integrability,"nect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions; Int_t Broadcast (const char *mess, Int_t kind=kMESS_STRING, Int_t type=kRRT_Undef);  Broadcast a character string buffer to the remote session. ;  ; Int_t Broadcast (const TMessage &mess);  Broadcast a message to the remote session. ;  ; Int_t Broadcast (Int_t kind, Int_t type=kRRT_Undef);  ; Int_t BroadcastObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Broadcast an object to the remote session. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length);  Broadcast a raw buffer of specified length to the remote session. ;  ; Bool_t CheckFile (const char *file, Long_t modtime);  Check if a file needs to be send to the server. ;  ; Int_t Collect (Long_t timeout=-1);  Collect responses from the remote server. ;  ; Int_t CollectInput ();  Collect and analyze available input from the socket. ;  ; void RecvLogFile (Int_t size);  Receive the log file from the server. ;  . Private Attributes; THashList * fFileList;  ; Bool_t fInterrupt;  ; TSignalHandler * fIntHandler;  ; TString fLogFilePath;  ; TMonitor * fMonitor;  ; TString fName;  ; Int_t fProtocol;  ; TObject * fReceivedObject;  ; TSeqCollection * fRootFiles;  ; TSocket * fSocket;  ; TUrl fUrl;  ; TRemoteObject * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:18539,message,message,18539,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['message'],['message']
Integrability,"nect GUI signals from fit panel slots. void SetCanvas(TCanvas* c); Connect to another canvas. void Hide(); Hide the fit panel and set it to non-active state. void Show(TVirtualPad* pad, TObject* obj); Show the fit panel (possible only via context menu). void CloseWindow(); Close fit panel window. void Terminate(); Called to delete the fit panel. void UpdateGUI(); Set the fit panel GUI according to the selected object. void SetFitObject(TVirtualPad* pad, TObject* obj, Int_t event); Slot called when the user clicks on an object inside a canvas.; Updates pointers to the parent pad and the selected object; for fitting (if suitable). void DoNoSelection(); Slot called when users close a TCanvas or when the user select; no object. void RecursiveRemove(TObject* obj); When obj is deleted, clear fFitObject if fFitObject = obj. void FillFunctionList(Int_t selected = -1); Fills the list of functions depending on the type of fit; selected. void FillMinMethodList(Int_t selected = -1); Fills the list of methods depending on the minimization library; selected. void FillDataSetList(); Create a combo box with all the possible objects to be fitted. TGComboBox* BuildMethodList(TGFrame* parent, Int_t id); Create method list in a combo box. void DoAdvancedOptions(); Slot connected to advanced option button (opens a dialog). void DoEmptyBinsAllWeights1(); Slot connected to 'include emtry bins and forse all weights to 1' setting. void DoUseFuncRange(). void DoAllWeights1(); Slot connected to 'set all weights to 1' setting. void DoClose(); Close the fit panel. void DoUpdate(); Easy here!. void DoFit(); Perform a fit with current parameters' settings. Int_t CheckFunctionString(const char* str); Check entered function string. void DoAddition(Bool_t on); Slot connected to addition of predefined functions. It will; insert the next selected function with a plus sign so that it; doesn't override the current content of the formula. void DoDataSet(Int_t sel); Selects the data set to be fitted. void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:32965,depend,depending,32965,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,5,['depend'],['depending']
Integrability,"nect GUI signals from fit panel slots. void SetCanvas(TCanvas* c); Connect to another canvas. void Hide(); Hide the fit panel and set it to non-active state. void Show(TVirtualPad* pad, TObject* obj); Show the fit panel (possible only via context menu). void CloseWindow(); Close fit panel window. void Terminate(); Called to delete the fit panel. void UpdateGUI(); Set the fit panel GUI according to the selected object. void SetFitObject(TVirtualPad* pad, TObject* obj, Int_t event); Slot called when the user clicks on an object inside a canvas.; Updates pointers to the parent pad and the selected object; for fitting (if suitable). void DoNoSelection(); Slot called when users close a TCanvas or when the user select; no object. void RecursiveRemove(TObject* obj); When obj is deleted, clear fFitObject if fFitObject = obj. void FillFunctionList(Int_t selected = -1); Fills the list of functions depending on the type of fit; selected. void FillMinMethodList(Int_t selected = -1); Fills the list of methods depending on the minimization library; selected. void FillDataSetList(); Create a combo box with all the possible objects to be fitted. TGComboBox* BuildMethodList(TGFrame* parent, Int_t id); Create method list in a combo box. void DoAdvancedOptions(); Slot connected to advanced option button (opens a dialog). void DoEmptyBinsAllWeights1(); Slot connected to 'include emtry bins and forse all weights to 1' setting. void DoUseFuncRange(). void DoAllWeights1(); Slot connected to 'set all weights to 1' setting. void DoClose(); Close the fit panel. void DoUpdate(); Easy here!. void DoFit(); Perform a fit with current parameters' settings. Int_t CheckFunctionString(const char* str); Check entered function string. void DoAddition(Bool_t on); Slot connected to addition of predefined functions. It will; insert the next selected function with a plus sign so that it; doesn't override the current content of the formula. void DoNormAddition(Bool_t on); Slot connected to addition of pred",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFitEditor.html:34350,depend,depending,34350,root/html604/TFitEditor.html,https://root.cern,https://root.cern/root/html604/TFitEditor.html,1,['depend'],['depending']
Integrability,"nectDefinition TFile.h:70; TFile::Flushvirtual void Flush()Synchronize a file's in-memory and on-disk states.Definition TFile.cxx:1141; TFile::MakeFreevirtual void MakeFree(Long64_t first, Long64_t last)Mark unused bytes on the file.Definition TFile.cxx:1484; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::WriteHeadervirtual void WriteHeader()Write File Header.Definition TFile.cxx:2615; TFile::GetRecordHeaderInt_t GetRecordHeader(char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen)Read the logical record header starting at a certain postion.Definition TFile.cxx:1301; TFile::GetCacheReadTFileCacheRead * GetCacheRead(const TObject *tree=nullptr) constReturn a pointer to the current read cache.Definition TFile.cxx:1262; TFolder<div class=""legacybox""><h2>Legacy Code</h2> TFolder is a legacy interface: there will be no bug fixes...Definition TFolder.h:30; TFolder::GetListOfFoldersTCollection * GetListOfFolders() constDefinition TFolder.h:55; TFolder::Occurencevirtual Int_t Occurence(const TObject *obj) constReturn occurence number of object in the list of objects of this folder.Definition TFolder.cxx:427; TFolder::Classstatic TClass * Class(); TFriendElementA TFriendElement TF describes a TTree object TF in a file.Definition TFriendElement.h:33; TFriendElement::ResetUpdatedvoid ResetUpdated()Definition TFriendElement.h:68; TFriendElement::kFromChain@ kFromChainDefinition TFriendElement.h:49; TFriendElement::GetTreeNamevirtual const char * GetTreeName() constGet the actual TTree name of the friend.Definition TFriendElement.h:64; TFriendElement::GetTreevirtual TTree * GetTree()Return pointer to friend TTree.Definition TFriendElement.cxx:217; TFriendElement::IsUpdatedbool IsUpdated() constDefinition TFriendElement.h:67; TFriendElement::GetFilevirtual TFil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:413375,interface,interface,413375,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['interface'],['interface']
Integrability,"nection on a parallel server socket. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TServerSocket;  TServerSocket (const char *service, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a server socket object for a named service. ;  ;  TServerSocket (Int_t port, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a server socket object on a specified port. ;  ; virtual ~TServerSocket ();  Destructor: cleanup authentication stuff (if any) and close. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of host to which the server socket is bound, i.e. ;  ; Int_t GetLocalPort () override;  Get port # to which server socket is bound. In case of error returns -1. ;  ; TClass * IsA () const override;  ; Int_t Recv (char *, Int_t) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *, Int_t, Int_t &) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &, Int_t &) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *, Int_t, ESendRecvOptions=kDefault) override;  Receive a raw buffer of specified length bytes. ;  ; Int_t Send (const char *, Int_t=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &) override;  Send a TMessage object. ;  ; Int_t Send (Int_t) override;  Send a single message opcode. ;  ; Int_t Send (Int_t, Int_t) override;  Send a status and a single message opcode. ;  ; Int_t SendObject (const TObject *, Int_t=kMESS_OBJECT) override;  Send an object. ;  ; Int_t SendRaw (const void *, Int_t, ESendRecvOptions=kDefault) override;  Send a raw buffer of specified length. ;  ; void Streamer (TBuffer &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPServerSocket.html:1872,message,message,1872,doc/master/classTPServerSocket.html,https://root.cern,https://root.cern/doc/master/classTPServerSocket.html,1,['message'],['message']
Integrability,"nections; between any two RooAbsArgs in the expression tree headed by this object; in the linkSet argument. Bool_t inhibitDirty(); Return current status of the inhibitDirty global flag. If true; no dirty state change tracking occurs and all caches are considered; to be always dirty. Bool_t addOwnedComponents(const RooArgSet& comps); Take ownership of the contents of 'comps'. RooAbsArg* cloneTree(const char* newname = 0) const; Clone tree expression of objects. All tree nodes will be owned by; the head node return by cloneTree(). RooExpensiveObjectCache& expensiveObjectCache() const. Bool_t flipAClean(). TObject* clone(const char* newname) const. TObject* Clone(const char* newname = 0) const. Bool_t isDerived() const; Accessors to client-server relation information. Bool_t dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg=0); Does this arg depend on the value of any of of the values in serverList?. Bool_t dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg=0); Does this arg depend on the value of server?. Bool_t hasClients() const; { return _clientList.GetSize()>0 ? kTRUE : kFALSE ; }. TIterator* clientIterator() const; Return iterator over all client RooAbsArgs. TIterator* valueClientIterator() const; Return iterator over all value client RooAbsArgs. TIterator* shapeClientIterator() const; Return iterator over all shape client RooAbsArgs. TIterator* serverIterator() const; Return iterator over all server RooAbsArgs. RooAbsArg* findServer(const char *name); Return server of this arg with given name. Returns null if not found. RooAbsArg* findServer(const RooAbsArg& arg); Return server of this arg with name of given input arg. Returns null if not found. RooAbsArg* findServer(Int_t index); Return i-th server from server list. Bool_t isValueServer(const RooAbsArg& arg); If true, arg is a value server of self. Bool_t isValueServer(const char* name); If true, we have a server with given name. Bool_t isShapeServer(const RooAbsArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:35330,depend,dependsOnValue,35330,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,2,['depend'],"['depend', 'dependsOnValue']"
Integrability,"ned in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle again",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:8343,message,message,8343,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,2,['message'],['message']
Integrability,"ned int NFitPoints() constDefinition LogLikelihoodFCN.h:118; ROOT::Fit::LogLikelihoodFCN::fGradstd::vector< double > fGradfor derivativesDefinition LogLikelihoodFCN.h:174; ROOT::Fit::LogLikelihoodFCN::Type_tBaseObjFunction::Type_t Type_tDefinition LogLikelihoodFCN.h:51; ROOT::Fit::LogLikelihoodFCN::fIsExtendedbool fIsExtendedflag for indicating if likelihood is extendedDefinition LogLikelihoodFCN.h:168; ROOT::Fit::LogLikelihoodFCN::fExecutionPolicy::ROOT::EExecutionPolicy fExecutionPolicyExecution policy.Definition LogLikelihoodFCN.h:176; ROOT::Fit::LogLikelihoodFCN::fNEffPointsunsigned int fNEffPointsnumber of effective points used in the fitDefinition LogLikelihoodFCN.h:172; ROOT::Fit::LogLikelihoodFCN::DataElementvirtual double DataElement(const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) consti-th likelihood contribution and its gradientDefinition LogLikelihoodFCN.h:121; ROOT::Fit::LogLikelihoodFCN::DoEvalvirtual double DoEval(const double *x) constEvaluation of the function (required by interface)Definition LogLikelihoodFCN.h:155; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::BasicFitMethodFunction< DerivFunType >::Type_tType_tenumeration specifying the possible fit method typesDefinition FitMethodFunction.h:46; ROOT::Math::BasicFitMethodFunction< DerivFunType >::kLogLikelihood@ kLogLikelihoodDefinition FitMethodFunction.h:46; ROOT::Math::BasicFitMethodFunction< DerivFunType >::IsAGradFCNstatic bool IsAGradFCN()Static function to indicate if a function is supporting gradient.Definition FitMethodFunction.h:135; ROOT::Math::BasicFitMethodFunction< DerivFunType >::BaseFunctionFunctionType::BaseFunc BaseFunctionDefinition FitMethodFunction.h:43; ROOT::Math::BasicFitMethodFunction< DerivFunType >::UpdateNCallsvirtual void UpdateNCalls() constupdate number of callsDefinition FitMethodFunction.h:124; ROOT::Math::IParametricFunctionMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:12066,interface,interface,12066,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,1,['interface'],['interface']
Integrability,"ned int ncall = 100000); doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). IntegratorMultiDim(const Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html:2384,integrat,integration,2384,root/html526/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"ned intfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; boolfOwnFuncflag to indicate we own the TF1 function pointer; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3794,interface,interface,3794,root/html602/ROOT__Math__WrappedMultiTF1.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html,1,['interface'],['interface']
Integrability,"ned intfNFree; vector<double>fParams; static TFumili*fgFumilistatic instance (used by fcn function); static ROOT::Math::FitMethodFunction*fgFunc; static ROOT::Math::FitMethodGradFunction*fgGradFunc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFumiliMinimizer(int dummy = 0); Constructor for TFumiliMinimier class. ~TFumiliMinimizer(); Destructor implementation. TFumiliMinimizer(const TFumiliMinimizer& ); Implementation of copy constructor (it is private). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Fumili. void SetFunction(const ROOT::Math::IMultiGradFunction & func); Set the objective function to be minimized, by passing a function object implement the; multi-dim gradient Function interface. In this case the function derivatives are provided; by the user via this interface and there not calculated by Fumili. void Fcn(int& , double* , double& f, double* , int ); implementation of FCN static function used internally by TFumili.; Adapt IMultiGenFunction interface to TFumili FCN static function. double EvaluateFCN(const double* x, double* g); function callaed to evaluate the FCN at the value x; calculates also the matrices of the second derivatives of the objective function needed by FUMILI. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int ivar, double val); set the variable value. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFumiliMinimizer.html:6837,interface,interface,6837,root/html602/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html602/TFumiliMinimizer.html,2,['interface'],['interface']
Integrability,"ned(R__SEEK64); 4045 struct stat64 sbuf;; 4046 if (path && lstat64(path, &sbuf) == 0) {; 4047#else; 4048 struct stat sbuf;; 4049 if (path && lstat(path, &sbuf) == 0) {; 4050#endif; 4051 buf.fIsLink = S_ISLNK(sbuf.st_mode);; 4052 if (buf.fIsLink) {; 4053#if defined(R__SEEK64); 4054 if (stat64(path, &sbuf) == -1) {; 4055#else; 4056 if (stat(path, &sbuf) == -1) {; 4057#endif; 4058 return 1;; 4059 }; 4060 }; 4061 buf.fDev = sbuf.st_dev;; 4062 buf.fIno = sbuf.st_ino;; 4063 buf.fMode = sbuf.st_mode;; 4064 buf.fUid = sbuf.st_uid;; 4065 buf.fGid = sbuf.st_gid;; 4066 buf.fSize = sbuf.st_size;; 4067 buf.fMtime = sbuf.st_mtime;; 4068 ; 4069 return 0;; 4070 }; 4071 return 1;; 4072}; 4073 ; 4074////////////////////////////////////////////////////////////////////////////////; 4075/// Get info about a file system: id, bsize, bfree, blocks.; 4076/// Id is file system type (machine dependend, see statfs()); 4077/// Bsize is block size of file system; 4078/// Blocks is total number of blocks in file system; 4079/// Bfree is number of free blocks in file system; 4080/// The function returns 0 in case of success and 1 if the file system could; 4081/// not be stat'ed.; 4082 ; 4083int TUnixSystem::UnixFSstat(const char *path, Long_t *id, Long_t *bsize,; 4084 Long_t *blocks, Long_t *bfree); 4085{; 4086 struct statfs statfsbuf;; 4087#if (defined(R__SOLARIS) && !defined(R__LINUX)); 4088 if (statfs(path, &statfsbuf, sizeof(struct statfs), 0) == 0) {; 4089 *id = statfsbuf.f_fstyp;; 4090 *bsize = statfsbuf.f_bsize;; 4091 *blocks = statfsbuf.f_blocks;; 4092 *bfree = statfsbuf.f_bfree;; 4093#else; 4094 if (statfs((char*)path, &statfsbuf) == 0) {; 4095#ifdef R__OBSD; 4096 // Convert BSD filesystem names to Linux filesystem type numbers; 4097 // where possible. Linux statfs uses a value of -1 to indicate; 4098 // an unsupported field.; 4099 ; 4100 if (!strcmp(statfsbuf.f_fstypename, MOUNT_FFS) ||; 4101 !strcmp(statfsbuf.f_fstypename, MOUNT_MFS)); 4102 *id = 0x11954;; 4103 else if (!strcmp(statfsbuf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:130272,depend,dependend,130272,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['depend'],['dependend']
Integrability,"nedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:55885,wrap,wrapped,55885,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['wrap'],['wrapped']
Integrability,"nel (see TH1 documentation) ;  CTH3D3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3F3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3I3-D histogram with a int per channel (see TH1 documentation)} ;  CTH3S3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CTFileSysDir;  CTFileSysEntry;  CTFileSysRoot;  CTHelperBase;  CTModuleDefinition;  CTPathDefinition;  CTHttpCallArg;  CTHttpEngine;  CTHttpServer;  CTHYPEAn hyperboloid (not implemented) ;  CTIdleTOTimer;  CTIdleTOTimerGuard;  CTileFrame;  CTImageAn abstract interface to image processing library ;  CTImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:137010,interface,interface,137010,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['interface'],['interface']
Integrability,"nents with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 658 of file RooAbsAnaConvPdf.cxx. ◆ Streamer(). void RooAbsAnaConvPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, RooDecay, and RooNonCPEigenDecay. ◆ StreamerNVirtual(). void RooAbsAnaConvPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file RooAbsAnaConvPdf.h. Friends And Related Symbol Documentation. ◆ RooConvGenContext. friend class RooConvGenContext. friend . Definition at line 94 of file RooAbsAnaConvPdf.h. Member Data Documentation. ◆ _basisList. RooArgList RooAbsAnaConvPdf::_basisList. protected . ! List of created basis functions ; Definition at line 102 of file RooAbsAnaConvPdf.h. ◆ _codeReg. RooAICRegistry RooAbsAnaConvPdf::_codeReg. mutableprotected . ! Registry of analytical integration codes ; Definition at line 118 of file RooAbsAnaConvPdf.h. ◆ _coefNormMgr. RooObjCacheManager RooAbsAnaConvPdf::_coefNormMgr. mutableprotected . ! Coefficient normalization manager ; Definition at line 116 of file RooAbsAnaConvPdf.h. ◆ _convSet. RooListProxy RooAbsAnaConvPdf::_convSet. protected . Set of (resModel (x) basisFunc) convolution objects. ; Definition at line 101 of file RooAbsAnaConvPdf.h. ◆ _convVar. RooRealProxy RooAbsAnaConvPdf::_convVar. protected . Convolution variable. ; Definition at line 97 of file RooAbsAnaConvPdf.h. ◆ _isCopy. bool RooAbsAnaConvPdf::_isCopy. protected . Definition at line 88 of file RooAbsAnaConvPdf.h. ◆ _model. RooRealProxy RooAbsAnaConvPdf::_model. protected . Original model. ; Definition at line 96 of file RooAbsAnaConvPdf.h. Libraries for RooAbsAnaConvPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsAnaConvPdf.h; roofit/roofitcore/src/RooAbsAnaConvPdf.cxx. RooAbsAnaConvPdf. ROOT maste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:91170,integrat,integration,91170,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['integrat'],['integration']
Integrability,"nents: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly2,sinhGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:9536,integrat,integrates,9536,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,2,['integrat'],['integrates']
Integrability,"neprivate . Definition at line 633 of file TProof.h. ◆ BroadcastFile() [1/2]. Int_t TProof::BroadcastFile ; (; const char * ; file, . Int_t ; opt, . const char * ; rfile, . TList * ; wrks . ). private . Broadcast file to all workers in the specified list. ; Returns the number of workers the buffer was sent to. Returns -1 in case of error. ; Definition at line 2610 of file TProof.cxx. ◆ BroadcastFile() [2/2]. Int_t TProof::BroadcastFile ; (; const char * ; file, . Int_t ; opt, . const char * ; rfile = 0, . ESlaves ; list = kAllUnique . ). private . Broadcast file to all workers in the specified list. ; Returns the number of workers the buffer was sent to. Returns -1 in case of error. ; Definition at line 2639 of file TProof.cxx. ◆ BroadcastGroupPriority() [1/2]. Int_t TProof::BroadcastGroupPriority ; (; const char * ; grp, . Int_t ; priority, . ESlaves ; list = kAllUnique . ). private . Broadcast the group priority to all workers in the specified list. ; Returns the number of workers the message was successfully sent to. Returns -1 in case of error. ; Definition at line 2451 of file TProof.cxx. ◆ BroadcastGroupPriority() [2/2]. Int_t TProof::BroadcastGroupPriority ; (; const char * ; grp, . Int_t ; priority, . TList * ; workers . ). private . Broadcast the group priority to all workers in the specified list. ; Returns the number of workers the message was successfully sent to. Returns -1 in case of error. ; Definition at line 2424 of file TProof.cxx. ◆ BroadcastObject() [1/2]. Int_t TProof::BroadcastObject ; (; const TObject * ; obj, . Int_t ; kind, . TList * ; slaves . ). private . Broadcast an object to all slaves in the specified list. ; Use kind to set the TMEssage what field. Returns the number of slaves the message was sent to. Returns -1 in case of error. ; Definition at line 2543 of file TProof.cxx. ◆ BroadcastObject() [2/2]. Int_t TProof::BroadcastObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT, . ESlaves ; list = kActive . ). private . Broa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:69372,message,message,69372,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['message'],['message']
Integrability,ner::fLastActiveEllast active item; Bool_tTGContainer::fLastCasecase sensetivity of last search; Bool_tTGContainer::fLastDirdirection of last search; TStringTGContainer::fLastNamethe name of object of last search; Bool_tTGContainer::fLastSubstringsubstring search option of last search; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TGListView*TGLVContainer::fListViewlistview which contains this container; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGContainer::fMsgWindowwindow handling container messages; Bool_tTGLVContainer::fMultiSelecttrue = multiple file selection; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; Bool_tTGContainer::fOnMouseOverkTRUE when mouse pointer is over entry; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TTimer*TGContainer::fScrollTimerautoscroll timer; Bool_tTGContainer::fScrollingkTRUE - when scrolling is ON; Int_tTGContainer::fSelectednumber of selected items; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTGContainer::fTotaltotal items; EListViewModeTGLVContainer::fViewModelist view viewing mode; TGViewPort*TGContainer::fViewPortcontainer viewport; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGContainer::fX0; Int_tTGContainer::fXDND; Int_tTGContainer::fXf; Int_tTGContainer::fXp; Int_tTGFrame::fYframe y posit,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTVLVContainer.html:22997,message,messages,22997,root/html530/TTVLVContainer.html,https://root.cern,https://root.cern/root/html530/TTVLVContainer.html,3,['message'],['messages']
Integrability,ner::fLastActiveEllast active item; Bool_tTGContainer::fLastCasecase sensetivity of last search; Bool_tTGContainer::fLastDirdirection of last search; TStringTGContainer::fLastNamethe name of object of last search; Bool_tTGContainer::fLastSubstringsubstring search option of last search; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TGListView*TGLVContainer::fListViewlistview which contains this container; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGContainer::fMsgWindowwindow handling container messages; Bool_tTGLVContainer::fMultiSelecttrue = multiple file selection; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; Bool_tTGContainer::fOnMouseOverkTRUE when mouse pointer is over entry; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TTimer*TGContainer::fScrollTimerautoscroll timer; Bool_tTGContainer::fScrollingkTRUE - when scrolling is ON; Int_tTGContainer::fSelectednumber of selected items; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTGContainer::fTotaltotal items; EListViewModeTGLVContainer::fViewModelist view viewing mode; TGViewPort*TGContainer::fViewPortcontainer viewport; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGContainer::fX0corner of rubber band box; Int_tTGContainer::fXDND; Int_tTGContainer::fXfother corner of rubber band b,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTVLVContainer.html:23842,message,messages,23842,root/html602/TTVLVContainer.html,https://root.cern,https://root.cern/root/html602/TTVLVContainer.html,2,['message'],['messages']
Integrability,ner::fLastActiveEllast active item; Bool_tTGContainer::fLastCasecase sensetivity of last search; Bool_tTGContainer::fLastDirdirection of last search; TStringTGContainer::fLastNamethe name of object of last search; Bool_tTGContainer::fLastSubstringsubstring search option of last search; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TGListView*TGLVContainer::fListViewlistview which contains this container; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGContainer::fMsgWindowwindow handling container messages; ULong_tfMtimedirectory modification time; Bool_tTGLVContainer::fMultiSelecttrue = multiple file selection; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; Bool_tTGContainer::fOnMouseOverkTRUE when mouse pointer is over entry; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TViewUpdateTimer*fRefreshrefresh timer; TTimer*TGContainer::fScrollTimerautoscroll timer; Bool_tTGContainer::fScrollingkTRUE - when scrolling is ON; Int_tTGContainer::fSelectednumber of selected items; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; const TGPicture*fSlink_sbig symbolic link icon; const TGPicture*fSlink_tsmall symbolic link icon; EFSSortModefSortTypesorting mode of contents; Int_tTGContainer::fTotaltotal items; EListViewModeTGLVContainer::fViewModelist view viewing mode; TGViewPort*TGConta,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileContainer.html:23912,message,messages,23912,root/html528/TGFileContainer.html,https://root.cern,https://root.cern/root/html528/TGFileContainer.html,6,['message'],['messages']
Integrability,"neral : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:43296,wrap,wrap,43296,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['wrap'],['wrap']
Integrability,"nerateToyData(RooArgSet& ) const; This method generates a toy data set for the given parameter point taking; global observables into account. RooAbsData* Generate(RooAbsPdf& pdf, RooArgSet& observables, const RooDataSet* protoData = NULL, int forceEvents = 0) const; This is the generate function to use in the context of the ToyMCSampler; instead of the standard RooAbsPdf::generate(...).; It takes into account whether the number of events is given explicitly; or whether it should use the expected number of events. It also takes; into account the option to generate a binned data set (ie RooDataHist). ToyMCSampler(); Proof constructor. Do not use. ToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys). virtual ~ToyMCSampler(). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; { return fTestStat; }. Double_t ConfidenceLevel() const; { return 1. - fSize; }. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); { return fNToys; }. void SetNToys(const Int_t ntoy); { fNToys = ntoy; }. void SetNEventsPerToy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); specify the values of parameters used when evaluating test statistic. { fNullPOI = (RooArgSet*)nullpoi.snapshot(); }. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. { fPdf = &pdf; }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. { fPriorNuisance = pdf; }. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSampler.html:5484,interface,interface,5484,root/html528/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSampler.html,1,['interface'],['interface']
Integrability,"nergy of system; for frame==""FIXT"" - momentum of beam particle; for frame==""USER"" - dummy - see documentation. void Pyinit(char* frame, char* beam, char* target, double wint); Calls Pyinit with the same parameters after performing some checking,; sets correct title. This method should preferably be called instead of PyInit.; PURPOSE: to initialize the generation procedure.; ARGUMENTS: See documentation for details.; frame: - specifies the frame of the experiment:; ""CMS"",""FIXT"",""USER"",""FOUR"",""FIVE"",""NONE""; beam,; target: - beam and target particles (with additionaly charges,; tildes or ""bar"":; e,nu_e,mu,nu_mu,tau,nu_tau,gamma,pi,n,p,Lambda,Sigma,Xi,Omega,; pomeron,reggeon; win: - related to energy system:; for frame==""CMS"" - total energy of system; for frame==""FIXT"" - momentum of beam particle; for frame==""USER"" - dummy - see documentation. int Pycomp(int kf); interface with fortran routine pycomp. void Pyedit(int medit); interface with fortran routine pyedit. void Pydiff(); interface with fortran routine pydiff. void Pyevnt(); interface with fortran routine pyevnt. void Pyexec(); interface with fortran routine pyexec. void Pygive(const char* param); interface with fortran routine pygive. void Pyhepc(int mconv); interface with fortran routine pyhepc. void Pylist(int flag); interface with fortran routine pylist. void Pyname(int kf, char* name); Note that the array name must be dimensioned in the calling program; to at least name[16]. double Pyr(int idummy); interface with fortran routine pyr. void Pyrget(int lun, int move); interface with fortran routine pyrget. void Pyrset(int lun, int move); interface with fortran routine pyrset. void Pystat(int flag); interface with fortran routine pystat. void Pytest(int flag); interface with fortran routine pytest. void Pytune(int itune); interface with fortran routine pytune. void Pyupda(int mupda, int lun); interface with fortran routine pyupda. double Pymass(int kf); interface with fortran routine pymass. int Pychge(int kf); i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPythia6.html:15534,interface,interface,15534,root/html528/TPythia6.html,https://root.cern,https://root.cern/root/html528/TPythia6.html,4,"['interface', 'rout']","['interface', 'routine']"
Integrability,"nergy of system; for frame==""FIXT"" - momentum of beam particle; for frame==""USER"" - dummy - see documentation. void Pyinit(char* frame, char* beam, char* target, double wint); Calls Pyinit with the same parameters after performing some checking,; sets correct title. This method should preferably be called instead of PyInit.; PURPOSE: to initialize the generation procedure.; ARGUMENTS: See documentation for details.; frame: - specifies the frame of the experiment:; ""CMS"",""FIXT"",""USER"",""FOUR"",""FIVE"",""NONE""; beam,; target: - beam and target particles (with additionaly charges,; tildes or ""bar"":; e,nu_e,mu,nu_mu,tau,nu_tau,gamma,pi,n,p,Lambda,Sigma,Xi,Omega,; pomeron,reggeon; win: - related to energy system:; for frame==""CMS"" - total energy of system; for frame==""FIXT"" - momentum of beam particle; for frame==""USER"" - dummy - see documentation. int Pycomp(int kf); interface with fortran routine pycomp. void Pyedit(int medit); interface with fortran routine pyedit. void Pydiff(); interface with fortran routine pydiff. void Pyevnt(); interface with fortran routine pyevnt. void Pyexec(); interface with fortran routine pyexec. void Pygive(const char* param); interface with fortran routine pygive. void Pyhepc(int mconv); interface with fortran routine pyhepc. void Pylist(int flag); interface with fortran routine pylist. void Pyname(int kf, char* name); Note that the array name must be dimensioned in the calling program; to at least name[16]. double Pyr(int idummy); interface with fortran routine pyr. void Pyrget(int lun, int move); interface with fortran routine pyrget. void Pyrset(int lun, int move); interface with fortran routine pyrset. void Pystat(int flag); interface with fortran routine pystat. void Pytest(int flag); interface with fortran routine pytest. void Pyupda(int mupda, int lun); interface with fortran routine pyupda. double Pymass(int kf); interface with fortran routine pymass. int Pychge(int kf); interface with fortran routine pychge. void Py1ent(Int_t line, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPythia6.html:15580,interface,interface,15580,root/html532/TPythia6.html,https://root.cern,https://root.cern/root/html532/TPythia6.html,2,"['interface', 'rout']","['interface', 'routine']"
Integrability,"nes names of message levels; and mapping of topic codes to topic names; Install default message streams. ~RooMsgService(); Destructor. Bool_t anyDebug(); Returns true if any debug level stream is active. Int_t addStream(RooFit::MsgLevel level, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg()); Add a message logging stream for message with given RooFit::MsgLevel or higher (i.e. more severe); This method accepts the following arguments to configure the stream. Output Style options. Prefix(Bool_t flag=kTRUE) -- Prefix all messages in this stream with Topic/Originator information. Filtering options. Topic(const char*) -- Restrict stream to messages on given topic; ObjectName(const char*) -- Restrict stream to messages from object with given name; ClassName(const char*) -- Restrict stream to messages from objects with given class name; BaseClassName(const char*)-- Restrict stream to messages from objects with given base class name; LabelName(const chat*) -- Restrict stream to messages from objects setAtrribute(const char*) tag with given name. Output redirection options. OutputFile(const char*) -- Send output to file with given name. Multiple streams can write to same file.; OutputStream(ostream&) -- Send output to given C++ stream. Multiple message streams can write to same c++ stream. The return value is the unique ID code of the defined stream. void deleteStream(Int_t id); Delete stream with given unique ID code. void setStreamStatus(Int_t id, Bool_t active); (De)Activate stream with given unique ID. Bool_t getStreamStatus(Int_t id) const; Get activation status of stream with given unique ID. RooMsgService& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMsgService.html:9037,message,messages,9037,root/html526/RooMsgService.html,https://root.cern,https://root.cern/root/html526/RooMsgService.html,5,['message'],['messages']
Integrability,"nes the best edge candidate and the position of the cell division plane in case of the variance reduction for future cell division, using results of the MC exploration run stored in fHistEdg ; Definition at line 672 of file TFoam.cxx. Member Data Documentation. ◆ fAlpha. Double_t* TFoam::fAlpha. protected . [fDim] Internal parameters of the hyper-rectangle ; Definition at line 74 of file TFoam.h. ◆ fCells. TFoamCell** TFoam::fCells = nullptr. protected . [fNCells] Array of ALL cells ; Definition at line 46 of file TFoam.h. ◆ fCellsAct. std::vector<Long_t> TFoam::fCellsAct. protected . Index of active cells, constructed at the end of foam build-up. ; Definition at line 50 of file TFoam.h. ◆ fChat. Int_t TFoam::fChat. protected . Chat=0,1,2 chat level in output, Chat=1 normal level. ; Definition at line 32 of file TFoam.h. ◆ fDate. TString TFoam::fDate. protected . Release date of FOAM. ; Definition at line 26 of file TFoam.h. ◆ fDim. Int_t TFoam::fDim. protected . Dimension of the integration/simulation space. ; Definition at line 27 of file TFoam.h. ◆ fEvPerBin. Int_t TFoam::fEvPerBin. protected . Maximum number of effective (wt=1) events per bin. ; Definition at line 37 of file TFoam.h. ◆ fHistDbg. TObjArray* TFoam::fHistDbg. protected . Histograms of wt, for debug. ; Definition at line 53 of file TFoam.h. ◆ fHistEdg. TObjArray* TFoam::fHistEdg. protected . Histograms of wt, one for each cell edge. ; Definition at line 52 of file TFoam.h. ◆ fHistWt. TH1D* TFoam::fHistWt. protected . Histogram of the MC wt. ; Definition at line 54 of file TFoam.h. ◆ fInhiDiv. Int_t* TFoam::fInhiDiv. protected . ! [fDim] Flags for inhibiting cell division ; Definition at line 40 of file TFoam.h. ◆ fLastCe. Int_t TFoam::fLastCe. protected . Index of the last cell. ; Definition at line 45 of file TFoam.h. ◆ fMaskDiv. Int_t* TFoam::fMaskDiv. protected . ! [fDim] Dynamic Mask for cell division ; Definition at line 39 of file TFoam.h. ◆ fMaxWtRej. Double_t TFoam::fMaxWtRej. protected . Max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:41055,integrat,integration,41055,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['integrat'],['integration']
Integrability,"new TGeoManager class, create an empty canvas and start the editor in the left-sided editor frame attached to the canvas. To open the editor in a separate frame one should provide a non-empty string as option to the Edit() method. The geometry manager editor. The Geometry Manager Editor. Accessing/creating different categories of editable objects; The second use case applies when starting to edit an existing geometry. Supposing the geometry was loaded into memory, besides the first method that still applies one can also edit drawn geometry objects. For this, the menu entry View/Editor of the canvas containing for instance a drawn volume must be activated. For starting the volume editor one can click on a volume. The GUI of the TGeoManager class can be started by clicking on the top-right 40x40 pixels corner of the pad with a drawn geometry.; This is the main entry point for editing the geometry or creating new objects. Once the interface is created (using one of the methods described above), several categories can be accessed via a shutter GUI widget:. General. This allows changing the name/title of the geometry, setting the top volume, closing the geometry and saving the geometry in a file. The file name is formed by geometry_name.C or .root depending if the geometry need to be saved as a C macro or a .root file.; Shapes. The category provides buttons for creation of all supported shapes. The new shape name is chosen by the interface, but can be changed from the shape editor GUI. Existing shapes can be browsed and edited from the same category.; Volumes. The category allows the creation of a new volume having a given name, shape and medium. For creating a volume assembly only the name is relevant. Existing volumes can be browsed or edited from this category.; Materials. Allows creation of new materials/mixtures or editing existing ones.; Media. The same for creation/editing of tracking media (materials having a set of properties related to tracking); Matrices. Allo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:138279,interface,interface,138279,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['interface'],['interface']
Integrability,"new1 = f1;; 632 }; 633 fnew1->SetParent( h1 );; 634 fnew1->SetRange(xmin,xmax);; 635 fnew1->Save(xmin,xmax,0,0,0,0);; 636 if (!drawFunction) fnew1->SetBit(TF1::kNotDraw);; 637 fnew1->AddToGlobalList(false);; 638 } else if (ndim < 3) {; 639 if (!reuseOldFunction) {; 640 fnew2 = (TF2*)f1->IsA()->New();; 641 R__ASSERT(fnew2);; 642 f1->Copy(*fnew2);; 643 funcList->Add(fnew2);; 644 }; 645 else {; 646 fnew2 = dynamic_cast<TF2*>(f1);; 647 R__ASSERT(fnew2);; 648 }; 649 fnew2->SetRange(xmin,ymin,xmax,ymax);; 650 fnew2->SetParent( h1 );; 651 fnew2->Save(xmin,xmax,ymin,ymax,0,0);; 652 if (!drawFunction) fnew2->SetBit(TF1::kNotDraw);; 653 fnew2->AddToGlobalList(false);; 654 } else {; 655 if (!reuseOldFunction) {; 656 fnew3 = (TF3*)f1->IsA()->New();; 657 R__ASSERT(fnew3);; 658 f1->Copy(*fnew3);; 659 funcList->Add(fnew3);; 660 }; 661 else {; 662 fnew3 = dynamic_cast<TF3*>(f1);; 663 R__ASSERT(fnew3);; 664 }; 665 fnew3->SetRange(xmin,ymin,zmin,xmax,ymax,zmax);; 666 fnew3->SetParent( h1 );; 667 fnew3->Save(xmin,xmax,ymin,ymax,zmin,zmax);; 668 if (!drawFunction) fnew3->SetBit(TF1::kNotDraw);; 669 fnew3->AddToGlobalList(false);; 670 }; 671 if (h1->TestBit(kCanDelete)) return;; 672 // draw only in case of histograms; 673 if (drawFunction && ndim < 3 && h1->InheritsFrom(TH1::Class() ) ) {; 674 // no need to re-draw the histogram if the histogram is already in the pad; 675 // in that case the function will be just drawn (if option N is not set); 676 if (!gPad || (gPad && gPad->GetListOfPrimitives()->FindObject(h1) == nullptr ) ); 677 h1->Draw(goption);; 678 }; 679 if (gPad) gPad->Modified(); // this is not in TH1 code (needed ??); 680 ; 681 return;; 682}; 683 ; 684 ; 685void ROOT::Fit::FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption) {; 686 // - Decode list of options into fitOption (used by both TGraph and TH1); 687 // works for both histograms and graph depending on the enum FitObjectType defined in HFit; 688 if(ROOT::IsImplicitMTEnabled()) {; 689 fitOption.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:25329,depend,depending,25329,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['depend'],['depending']
Integrability,"newstate, Bool_t deletePreviousState = kTRUE); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TRecorder(const TRecorder&); TRecorder&operator=(const TRecorder&). Data Members; public:. enum EReplayModes { kRealtime; };; enum ERecorderState { kInactive; kRecording; kPaused; kReplaying; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPrev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorder.html:8540,depend,depending,8540,root/html534/TRecorder.html,https://root.cern,https://root.cern/root/html534/TRecorder.html,1,['depend'],['depending']
Integrability,"nf)Definition Integrator.h:278; ROOT::Math::IntegratorOneDim::Integraldouble Integral(Function &f, double a, double b)evaluate the Integral of a function f over the defined interval (a,b)Definition Integrator.h:499; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(const IGenFunction &f, double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:296; TF1Convolution_EvalWrapperDefinition TF1Convolution.cxx:48; TF1Convolution_EvalWrapper::fT0Double_t fT0Definition TF1Convolution.cxx:51; TF1Convolution_EvalWrapper::TF1Convolution_EvalWrapperTF1Convolution_EvalWrapper(TF1 &f1, TF1 &f2, Double_t t)Definition TF1Convolution.cxx:54; TF1Convolution_EvalWrapper::fFunc1TF1 * fFunc1Definition TF1Convolution.cxx:49; TF1Convolution_EvalWrapper::fFunc2TF1 * fFunc2Definition TF1Convolution.cxx:50; TF1Convolution_EvalWrapper::operator()Double_t operator()(Double_t x) constDefinition TF1Convolution.cxx:59; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::fNofParams2Int_t fNofParams2Definition TF1Convolution.h:33; TF1Convolution::fParams1std::vector< Double_t > fParams1Definition TF1Convolution.h:25; TF1Convolution::operator()Double_t operator()(const Double_t *x, const Double_t *p) overrideUsed in TF1 when doing the fit, will be evaluated at each point.Definition TF1Convolution.cxx:367; TF1Convolution::SetParametersvoid SetParameters(const Double_t *params) overrideSet the vector of parameters p for the convolution function g(x,p) = f1 * f2.Definition TF1Convolution.cxx:393; TF1Convolution::fCstIndexInt_t fCstIndexIndex of the constant parameter f the first function.Definition TF1Convolution.h:34; TF1Convolution::GetRangevoid GetRange(Double_t &a, Double_t &b) constGet the range used for the convolution.Definition TF1Convolution.cxx:487; TF1Convolution::fParNamesstd::vector< TString > fParNamesParameters' names.Definition TF1Convolution.h:28; TF1Convolutio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1Convolution_8cxx_source.html:23251,wrap,wrapping,23251,doc/master/TF1Convolution_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1Convolution_8cxx_source.html,1,['wrap'],['wrapping']
Integrability,"nfig& other); Assignment operator from other RooNumIntConfig. Bool_t addConfigSection(const RooAbsIntegrator* proto, const RooArgSet& defaultConfig); Add a configuration section for a particular integrator. Integrator name and capabilities are; automatically determined from instance passed as 'proto'. The defaultConfig object is associated; as the default configuration for the integrator. RooArgSet& getConfigSection(const char* name); Return section with configuration parameters for integrator with given (class) name. const RooArgSet& getConfigSection(const char* name); Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D(); { return _method1D ; }. const RooCategory& method2D(); { return _method2D ; }. const RooCategory& methodND(); { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen(); { return _method1DOpen ; }. const RooCategory& method2DOpen(); { return _method2DOpen ; }. const RooCategory& methodNDOpen(); { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntConfig.html:9613,interface,interface,9613,root/html526/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html526/RooNumIntConfig.html,1,['interface'],['interface']
Integrability,nfig.h. Member Data Documentation. ◆ _configSets. RooLinkedList RooNumIntConfig::_configSets. protected . List of configuration sets for individual integration methods. ; Definition at line 85 of file RooNumIntConfig.h. ◆ _epsAbs. double RooNumIntConfig::_epsAbs. protected . Absolute precision. ; Definition at line 75 of file RooNumIntConfig.h. ◆ _epsRel. double RooNumIntConfig::_epsRel. protected . Relative precision. ; Definition at line 76 of file RooNumIntConfig.h. ◆ _method1D. RooCategory RooNumIntConfig::_method1D. protected . Selects integration method for 1D integrals. ; Definition at line 79 of file RooNumIntConfig.h. ◆ _method1DOpen. RooCategory RooNumIntConfig::_method1DOpen. protected . Selects integration method for open ended 1D integrals. ; Definition at line 82 of file RooNumIntConfig.h. ◆ _method2D. RooCategory RooNumIntConfig::_method2D. protected . Selects integration method for 2D integrals. ; Definition at line 80 of file RooNumIntConfig.h. ◆ _method2DOpen. RooCategory RooNumIntConfig::_method2DOpen. protected . Selects integration method for open ended 2D integrals. ; Definition at line 83 of file RooNumIntConfig.h. ◆ _methodND. RooCategory RooNumIntConfig::_methodND. protected . Selects integration method for ND integrals. ; Definition at line 81 of file RooNumIntConfig.h. ◆ _methodNDOpen. RooCategory RooNumIntConfig::_methodNDOpen. protected . Selects integration method for open ended ND integrals. ; Definition at line 84 of file RooNumIntConfig.h. ◆ _printEvalCounter. bool RooNumIntConfig::_printEvalCounter. protected . Flag to control printing of function evaluation counter. ; Definition at line 77 of file RooNumIntConfig.h. Libraries for RooNumIntConfig:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooNumIntConfig.h; roofit/roofitcore/src/RooNumIntConfig.cxx. RooNumIntConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:22605,integrat,integration,22605,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,3,['integrat'],['integration']
Integrability,"nfiguration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_t_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Return current value, normalizated by integrating over; the observables in 'nset'. If 'nset' is 0, the unnormalized value.; is returned. All elements of 'nset' must be lvalues. Unnormalized values are not cached; Doing so would be complicated as _norm->getVal() could; spoil the cache and interfere with returning the cached; return value. Since unnormalized calls are typically; done in integration calls, there is no performance hit. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). This function applies the normalization specified by 'normSet' to the integral returned; by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; to return a normalized answer. Bool_t traceEvalPdf(Double_t value) const; Check that passed value is positive and not 'not-a-number'. If; not, print an error, until the error counter reaches its s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:46135,integrat,integrating,46135,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,1,['integrat'],['integrating']
Integrability,"nfo for the class Bar is created in optimized mode in such a way that data members of the same type are written as an array improving the I/O performance. In a new program, T1 is read and a new Tree T2 is created with the object Foo in split > 1.; When the T2branch is created, the StreamerInfo for the class Bar is created with no optimization (mandatory for the split mode). The optimized Bar StreamerInfo is going to be used to read the TClonesArray in T1. The result will be Bar objects with data member values not in the right sequence. The solution to this problem is to call BypassStreamer(kFALSE) for the TClonesArray. In this case, the normal Bar::Streamer function will be called. The Bar::Streamer function works OK independently if the Bar StreamerInfohad been generated in optimized mode or not.; 11.4 Pointers and References in Persistency; An object pointer as a data member presents a challenge to the streaming software. If the object pointed to is saved every time, it could create circular dependencies and consume a large amount of disk space. The network of references must be preserved on disk and recreated upon reading the file.; If you use independent I/O operations for pointers and their referenced objects you can use the TRef class. Later in this section is an example that compares disk space, memory usage, and I/O times of C++ pointers and TRefs. In general, a TRef is faster than C++ but the advantage of a C++ pointer is that it is already C++.; 11.4.1 Streaming C++ Pointers; When ROOT encounters a pointer data member it calls the Streamer of the object and labels it with a unique object identifier. The object identifier is unique for one I/O operation. If there is another pointer to the object in the same I/O operation, the first object is referenced i.e. it is not saved again. When reading the file, the object is rebuilt and the references recalculated. Streaming object pointers. In this way, the network of pointers and their objects is rebuilt and ready",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:478407,depend,dependencies,478407,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['depend'],['dependencies']
Integrability,"nfo); Merge all chains in the collection. (NOT IMPLEMENTED). Long64_t Merge(TFile* file, Int_t basketsize, Option_t* option = """"); Merge all the entries in the chain into a new tree in the current file. Note: The ""file"" parameter is *not* the file where the new; tree will be inserted. The new tree is inserted into; gDirectory, which is usually the most recently opened; file, or the directory most recently cd()'d to. If option = ""C"" is given, the compression level for all branches; in the new Tree is set to the file compression level. By default,; the compression level of all branches is the original compression; level in the old trees. If basketsize > 1000, the basket size for all branches of the; new tree will be set to basketsize. Example using the file generated in $ROOTSYS/test/Event; merge two copies of Event.root. gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");. If the chain is expecting the input tree inside a directory,; this directory is NOT created by this routine. So if you do:. TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");. The resulting file will not have subdirectories. In order to; preserve the directory structure do the following instead:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file);. If 'option' contains the word 'fast' the merge will be done without; unzipping or unstreaming the baskets (i.e., a direct copy of the raw; bytes on disk). When 'fast' is specified, 'option' can also contains a; sorting order for the baskets in the output file. There is currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. When using SortBasketsByOffset the baskets are written in; the output file in the same order as in the original file; (i.e. the basket are sorted on their offset in the original; file; Usually this also means that the baskets are sorted; on the index/number of the _l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TChain.html:41336,rout,routine,41336,root/html530/TChain.html,https://root.cern,https://root.cern/root/html530/TChain.html,5,['rout'],['routine']
Integrability,"nfo);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:23905,wrap,wrapper,23905,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,2,['wrap'],['wrapper']
Integrability,"nfo);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQClass.html:22110,wrap,wrapper,22110,doc/master/classTQClass.html,https://root.cern,https://root.cern/doc/master/classTQClass.html,1,['wrap'],['wrapper']
Integrability,"nfo::fNextvoid *(* fNext)(void *iter, const void *end)Definition TCollectionProxyInfo.h:525; ROOT::Detail::TCollectionProxyInfo::fCreateEnvvoid *(* fCreateEnv)()Definition TCollectionProxyInfo.h:512; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClassRef::GetClassTClass * GetClass() constDefinition TClassRef.h:66; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::IsSyntheticPairBool_t IsSyntheticPair() constDefinition TClass.h:521; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::ForceReloadvoid ForceReload(TClass *oldcl)we found at least one equivalent.Definition TClass.cxx:1403; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetDestructorROOT::DesFunc_t GetDestructor() constReturn the wrapper around the destructor.Definition TClass.cxx:7546; TClass::GetNewROOT::NewFunc_t GetNew() constReturn the wrapper around new ThisClass().Definition TClass.cxx:7514; TClass::HasInterpreterInfoBool_t HasInterpreterInfo() constDefinition TClass.h:410; TClass::SizeInt_t Size() constReturn size of object of this class.Definition TClass.cxx:5771; TClass::IsLoadedBool_t IsLoaded() constReturn true if the shared library of this class is currently in the a process's memory.Definition TClass.cxx:5979; TClass::GetStreamerInfoTVirtualStreamerInfo * GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constreturns a pointer to the TVirtualStreamerInfo object for version If the object does not exist,...Definition TClass.cxx:4666; TClass::GetCollectionProxyTVirtualCollectionProxy * GetCollectionProxy() constReturn the proxy describing the collection (if any).Definition TClass.cxx:2964; TClass::GetClassSizeInt_t GetClassSize() constDefinition TClass.h:425; TClass::GetConversionStreamerInfoTVirtualStreamerInfo * GetConversionStreamerInfo(const char *onfile_classname, Int_t version) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:72214,wrap,wrapper,72214,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,"nfo_IsValid(MethodArgInfo_t *marginfo) const finalDefinition TCling.cxx:9272; TCling::TypeInfo_Sizeint TypeInfo_Size(TypeInfo_t *tinfo) const finalDefinition TCling.cxx:9412; TCling::DeleteGlobalInt_t DeleteGlobal(void *obj) finalDelete obj from Cling symbol table so it cannot be accessed anymore.Definition TCling.cxx:3783; TCling::GetSecurityErrorint GetSecurityError() const finalInterface to cling function.Definition TCling.cxx:7487; TCling::SetTempLevelvoid SetTempLevel(int val) const finalCreate / close a scope for temporaries.Definition TCling.cxx:7642; TCling::fPayloadsstd::set< size_t > fPayloadsDefinition TCling.h:122; TCling::FuncTempInfo_TemplateNargsUInt_t FuncTempInfo_TemplateNargs(FuncTempInfo_t *) const finalReturn the maximum number of template arguments of the function template described by ft_info.Definition TCling.cxx:8849; TCling::GetFunctionWithPrototypeDeclId_t GetFunctionWithPrototype(ClassInfo_t *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch) finalReturn pointer to cling interface function for a method of a class with a certain prototype,...Definition TCling.cxx:5155; TCling::TypedefInfo_FactoryTypedefInfo_t * TypedefInfo_Factory() const finalDefinition TCling.cxx:9449; TCling::fRootmapFilesTObjArray * fRootmapFilesDefinition TCling.h:126; TCling::IsVoidPointerTypebool IsVoidPointerType(const void *QualTypePtr) constDefinition TCling.cxx:9587; TCling::ProcessLineLongptr_t ProcessLine(const char *line, EErrorCode *error=nullptr) finalDefinition TCling.cxx:2453; TCling::ClassInfo_Sizeint ClassInfo_Size(ClassInfo_t *info) const finalDefinition TCling.cxx:8400; TCling::MethodArgInfo_TypeNameconst char * MethodArgInfo_TypeName(MethodArgInfo_t *marginfo) const finalDefinition TCling.cxx:9312; TCling::GetInterpreterImplcling::Interpreter * GetInterpreterImpl() constDefinition TCling.h:644; TCling::ExecuteMacroLongptr_t ExecuteMacro(const char *filename, EErrorCode *error=nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:430106,interface,interface,430106,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['interface'],['interface']
Integrability,"nfo_IsValidbool TypeInfo_IsValid(TypeInfo_t *tinfo) const finalDefinition TCling.cxx:9380; TCling::RegisterPrebuiltModulePathbool RegisterPrebuiltModulePath(const std::string &FullPath, const std::string &ModuleMapName=""module.modulemap"") const finalDefinition TCling.cxx:1906; TCling::MethodInfo_TypeNormalizedNamestd::string MethodInfo_TypeNormalizedName(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9156; TCling::ClassInfo_Nameconst char * ClassInfo_Name(ClassInfo_t *info) const finalDefinition TCling.cxx:8434; TCling::GenerateTClassTClass * GenerateTClass(const char *classname, Bool_t emulation, Bool_t silent=kFALSE) finalGenerate a TClass for the given class.Definition TCling.cxx:4554; TCling::fTransactionCountULong64_t fTransactionCountDefinition TCling.h:148; TCling::ClassInfo_HasDefaultConstructorbool ClassInfo_HasDefaultConstructor(ClassInfo_t *info, Bool_t testio=kFALSE) const finalDefinition TCling.cxx:8253; TCling::EndOfLineActionvoid EndOfLineAction() finalIt calls a ""fantom"" method to synchronize user keyboard input and ROOT prompt line.Definition TCling.cxx:3121; TCling::TypeInfo_FactoryCopyTypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t *) const finalDefinition TCling.cxx:9364; TCling::TypeInfo_QualTypePtrvoid * TypeInfo_QualTypePtr(TypeInfo_t *tinfo) constDefinition TCling.cxx:9428; TCling::ClassInfo_HasMethodbool ClassInfo_HasMethod(ClassInfo_t *info, const char *name) const finalDefinition TCling.cxx:8261; TCling::ClassInfo_DeleteArrayvoid ClassInfo_DeleteArray(ClassInfo_t *info, void *arena, bool dtorOnly) const finalDefinition TCling.cxx:8199; TCling::fClassesHeadersMapstd::map< size_t, std::vector< const char * > > fClassesHeadersMapDefinition TCling.h:119; TCling::DataMemberInfo_TypeTrueNameconst char * DataMemberInfo_TypeTrueName(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8690; TCling::ShutDownvirtual void ShutDown() finalDefinition TCling.cxx:1655; TCling::GetInterpreterStateMarkerunsigned long long GetInterpreterStateMarke",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:89326,synchroniz,synchronize,89326,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['synchroniz'],['synchronize']
Integrability,"nfo_IsValidbool TypeInfo_IsValid(TypeInfo_t *tinfo) const finalDefinition TCling.cxx:9380; TCling::RegisterPrebuiltModulePathbool RegisterPrebuiltModulePath(const std::string &FullPath, const std::string &ModuleMapName=""module.modulemap"") const finalDefinition TCling.cxx:1906; TCling::MethodInfo_TypeNormalizedNamestd::string MethodInfo_TypeNormalizedName(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9156; TCling::ClassInfo_Nameconst char * ClassInfo_Name(ClassInfo_t *info) const finalDefinition TCling.cxx:8434; TCling::GenerateTClassTClass * GenerateTClass(const char *classname, Bool_t emulation, Bool_t silent=kFALSE) finalGenerate a TClass for the given class.Definition TCling.cxx:4554; TCling::fTransactionCountULong64_t fTransactionCountDefinition TCling.h:148; TCling::ClassInfo_HasDefaultConstructorbool ClassInfo_HasDefaultConstructor(ClassInfo_t *info, Bool_t testio=kFALSE) const finalDefinition TCling.cxx:8253; TCling::EndOfLineActionvoid EndOfLineAction() finalIt calls a ""fantom"" method to synchronize user keyboard input and ROOT prompt line.Definition TCling.cxx:3121; TCling::TypeInfo_FactoryCopyTypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t *) const finalDefinition TCling.cxx:9364; TCling::TypeInfo_QualTypePtrvoid * TypeInfo_QualTypePtr(TypeInfo_t *tinfo) constDefinition TCling.cxx:9428; TCling::ClassInfo_HasMethodbool ClassInfo_HasMethod(ClassInfo_t *info, const char *name) const finalDefinition TCling.cxx:8261; TCling::ClassInfo_DeleteArrayvoid ClassInfo_DeleteArray(ClassInfo_t *info, void *arena, bool dtorOnly) const finalDefinition TCling.cxx:8199; TCling::fClassesHeadersMapstd::map< size_t, std::vector< const char * > > fClassesHeadersMapDefinition TCling.h:119; TCling::DataMemberInfo_TypeTrueNameconst char * DataMemberInfo_TypeTrueName(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8690; TCling::ShutDownvirtual void ShutDown() finalDefinition TCling.cxx:1655; TCling::UpdateListOfTypesvoid UpdateListOfTypes() finalNo op: see TClingCall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:461971,synchroniz,synchronize,461971,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['synchroniz'],['synchronize']
Integrability,"nfo_t structure. ;  ; virtual Int_t GetUid (const char *user=nullptr);  Returns the user's id. If user = 0, returns current user's id. ;  ; virtual UserGroup_t * GetUserInfo (const char *user=nullptr);  Returns all user info in the UserGroup_t structure. ;  ; virtual UserGroup_t * GetUserInfo (Int_t uid);  Returns all user info in the UserGroup_t structure. ;  ; virtual TList * GetVolumes (Option_t *) const;  ; virtual std::string GetWorkingDirectory () const;  Return working directory. ;  ; virtual const char * HomeDirectory (const char *userName=nullptr);  Return the user's home directory. ;  ; virtual const char * HostName ();  Return the system's host name. ;  ; virtual void IgnoreInterrupt (Bool_t ignore=kTRUE);  If ignore is true ignore the interrupt signal, else restore previous behaviour. ;  ; virtual void IgnoreSignal (ESignals sig, Bool_t ignore=kTRUE);  If ignore is true ignore the specified signal, else restore previous behaviour. ;  ; Bool_t InControl () const;  ; virtual Bool_t Init ();  Initialize the OS interface. ;  ; virtual void InnerLoop ();  Inner event loop. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsAbsoluteFileName (const char *dir);  Return true if dir is an absolute pathname. ;  ; virtual Bool_t IsFileInIncludePath (const char *name, char **fullpath=nullptr);  Return true if 'name' is a file that can be found in the ROOT include path or the current directory. ;  ; virtual Bool_t IsPathLocal (const char *path);  Returns TRUE if the url in 'path' points to the local file system. ;  ; virtual int Link (const char *from, const char *to);  Create a link from file1 to file2. ;  ; virtual void ListLibraries (const char *regexp="""");  List the loaded shared libraries. ;  ; virtual void ListSymbols (const char *module, const char *re="""");  List symbols in a shared library. ;  ; virtual int Load (const char *module, const char *entry="""", Bool_t system=kFALSE);  Load a shared library. ;  ; virtual UInt_t LoadAllLibraries ();  Load all libr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheSystem.html:11411,interface,interface,11411,doc/master/classTDCacheSystem.html,https://root.cern,https://root.cern/doc/master/classTDCacheSystem.html,3,['interface'],['interface']
Integrability,"nfo_t structure. ;  ; virtual Int_t GetUid (const char *user=nullptr);  Returns the user's id. If user = 0, returns current user's id. ;  ; virtual UserGroup_t * GetUserInfo (const char *user=nullptr);  Returns all user info in the UserGroup_t structure. ;  ; virtual UserGroup_t * GetUserInfo (Int_t uid);  Returns all user info in the UserGroup_t structure. ;  ; virtual TList * GetVolumes (Option_t *) const;  ; virtual std::string GetWorkingDirectory () const;  Return working directory. ;  ; virtual const char * HomeDirectory (const char *userName=nullptr);  Return the user's home directory. ;  ; virtual const char * HostName ();  Return the system's host name. ;  ; virtual void IgnoreInterrupt (Bool_t ignore=kTRUE);  If ignore is true ignore the interrupt signal, else restore previous behaviour. ;  ; virtual void IgnoreSignal (ESignals sig, Bool_t ignore=kTRUE);  If ignore is true ignore the specified signal, else restore previous behaviour. ;  ; Bool_t InControl () const;  ; virtual Bool_t Init ();  Initialize the OS interface. ;  ; virtual void InnerLoop ();  Inner event loop. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsAbsoluteFileName (const char *dir);  Return true if dir is an absolute pathname. ;  ; virtual Bool_t IsFileInIncludePath (const char *name, char **fullpath=nullptr);  Return true if 'name' is a file that can be found in the ROOT include path or the current directory. ;  ; virtual int Link (const char *from, const char *to);  Create a link from file1 to file2. ;  ; virtual void ListLibraries (const char *regexp="""");  List the loaded shared libraries. ;  ; virtual void ListSymbols (const char *module, const char *re="""");  List symbols in a shared library. ;  ; virtual int Load (const char *module, const char *entry="""", Bool_t system=kFALSE);  Load a shared library. ;  ; virtual UInt_t LoadAllLibraries ();  Load all libraries known to ROOT via the rootmap system. ;  ; virtual int mkdir (const char *name, Bool_t recursive=kFALSE);  Make a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:11843,interface,interface,11843,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,2,['interface'],['interface']
Integrability,"nfo_t structure. ;  ; virtual Int_t GetUid (const char *user=nullptr);  Returns the user's id. If user = 0, returns current user's id. ;  ; virtual UserGroup_t * GetUserInfo (const char *user=nullptr);  Returns all user info in the UserGroup_t structure. ;  ; virtual UserGroup_t * GetUserInfo (Int_t uid);  Returns all user info in the UserGroup_t structure. ;  ; virtual TList * GetVolumes (Option_t *) const;  ; virtual std::string GetWorkingDirectory () const;  Return working directory. ;  ; virtual const char * HomeDirectory (const char *userName=nullptr);  Return the user's home directory. ;  ; virtual const char * HostName ();  Return the system's host name. ;  ; virtual void IgnoreInterrupt (Bool_t ignore=kTRUE);  If ignore is true ignore the interrupt signal, else restore previous behaviour. ;  ; virtual void IgnoreSignal (ESignals sig, Bool_t ignore=kTRUE);  If ignore is true ignore the specified signal, else restore previous behaviour. ;  ; Bool_t InControl () const;  ; virtual Bool_t Init ();  Initialize the OS interface. ;  ; virtual void InnerLoop ();  Inner event loop. ;  ; virtual Bool_t IsAbsoluteFileName (const char *dir);  Return true if dir is an absolute pathname. ;  ; virtual Bool_t IsFileInIncludePath (const char *name, char **fullpath=nullptr);  Return true if 'name' is a file that can be found in the ROOT include path or the current directory. ;  ; virtual Bool_t IsPathLocal (const char *path);  Returns TRUE if the url in 'path' points to the local file system. ;  ; virtual int Link (const char *from, const char *to);  Create a link from file1 to file2. ;  ; virtual void ListLibraries (const char *regexp="""");  List the loaded shared libraries. ;  ; virtual void ListSymbols (const char *module, const char *re="""");  List symbols in a shared library. ;  ; virtual int Load (const char *module, const char *entry="""", Bool_t system=kFALSE);  Load a shared library. ;  ; virtual UInt_t LoadAllLibraries ();  Load all libraries known to ROOT via the rootmap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebSystem.html:11537,interface,interface,11537,doc/master/classTWebSystem.html,https://root.cern,https://root.cern/doc/master/classTWebSystem.html,1,['interface'],['interface']
Integrability,"nfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo( const char* classname, Int_t version ); Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo( const TClass* cl, Int_t version ); Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const char* classname, UInt_t checksum ); Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const TClass* cl, UInt_t checksum ); Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:41451,wrap,wrapper,41451,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,1,['wrap'],['wrapper']
Integrability,"ng &string);  Returns kTRUE, if the given string does not contain RFC 3986 reserved characters. ;  ; static Bool_t IsUserInfo (const TString &);  Return kTRUE is string qualifies as valid URI userinfo: ;  ; static const TString MergePaths (const TUri &reference, const TUri &base);  RFC 3986, 5.3.2. ;  ; static const TString PctDecode (const TString &source);  Percent-decode the given string according to chapter 2.1 we assume a valid pct-encoded string. ;  ; static const TString PctDecodeUnreserved (const TString &source);  Percent-decode the given string according to chapter 2.1 we assume a valid pct-encoded string. ;  ; static const TString PctEncode (const TString &source);  Percent-encode and return the given string according to RFC 3986 in principle, this function cannot fail or produce an error. ;  ; static const TString PctNormalise (const TString &source);  Normalise the percent-encoded parts of the string i.e. ;  ; static const TString RemoveDotSegments (const TString &);  This functions implements the ""remove_dot_segments"" routine of chapter 5.2.4 ""for interpreting and removing the special '. ;  ; static TUri Transform (const TUri &reference, const TUri &base);  Transform a URI reference into its target URI using given a base URI. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TString fFragment;  ; Bool_t fHasFragment;  ; Bool_t fHasHost;  ; Bool_t fHasPath;  ; Bool_t fHasPort;  ; Bool_t fHasQuery;  ; Bool_t fHasScheme;  ; Bool_t fHasUserinfo;  ; TString fHost;  ; TStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUri.html:14271,rout,routine,14271,doc/master/classTUri.html,https://root.cern,https://root.cern/doc/master/classTUri.html,1,['rout'],['routine']
Integrability,"ng ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_t;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:160121,interface,interface,160121,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['interface'],['interface']
Integrability,"ng INFO stream; # ---------------------------------------------------; ; # Print streams configuration; ROOT.RooMsgService.instance().Print(); ; # Add Integration topic to existing INFO stream; ROOT.RooMsgService.instance().getStream(1).addTopic(ROOT.RooFit.Integration); ; # Construct integral over gauss to demonstrate message stream; igauss = gauss.createIntegral({x}); igauss.Print(); ; # Print streams configuration in verbose, also shows inactive streams; ROOT.RooMsgService.instance().Print(); ; # Remove stream; ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Integration); ; # Examples of pdf value tracing; # -----------------------------------------------------------------------; ; # Show DEBUG level message on function tracing, ROOT.RooGaussian only; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, ClassName=""RooGaussian""); ; # Perform a fit to generate some tracing messages; model.fitTo(data, Verbose=True); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); ; # Show DEBUG level message on function tracing on all objects, output to; # file; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, OutputFile=""rf506_debug.log""); ; # Perform a fit to generate some tracing messages; model.fitTo(data, Verbose=True); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); ; # Example of another debugging stream; # ---------------------------------------------------------------------; ; # Show DEBUG level messages on client/server link state management; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.LinkStateMgmt); ROOT.RooMsgService.instance().Print(""v""); ; # Clone composite pdf g to trigger some link state management activity; gprime = gauss.cloneTree(); gprime.Print(); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:2093,message,message,2093,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,1,['message'],['message']
Integrability,"ng a double.; 390 // The class name is not needed when using compile code, while it is required when using; 391 // interpreted code via the specialized constructor with void *.; 392 // An instance of the C++ function class or its pointer can both be used. The former is reccomended when using; 393 // C++ compiled code, but if CINT compatibility is needed, then a pointer to the function class must be used.; 394 // xmin and xmax specify the plotting range, npar is the number of parameters.; 395 // See the tutorial math/exampleFunctor.C for an example of using this constructor; 396 template <typename Func>; 397 TF1(const char *name, Func f, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim = 1, EAddToList addToGlobList = EAddToList::kDefault) :; 398 TF1(EFType::kTemplScalar, name, xmin, xmax, npar, ndim, addToGlobList); 399 {; 400 //actual fType set in TF1Builder; 401 ROOT::Internal::TF1Builder<Func>::Build(this, f);; 402 }; 403 ; 404 // backward compatible interface; 405 template <typename Func>; 406 TF1(const char *name, Func f, Double_t xmin, Double_t xmax, Int_t npar, const char *, EAddToList addToGlobList = EAddToList::kDefault) :; 407 TF1(EFType::kTemplScalar, name, xmin, xmax, npar, 1, addToGlobList, new TF1Parameters(npar)); 408 {; 409 ROOT::Internal::TF1Builder<Func>::Build(this, f);; 410 }; 411 ; 412 ; 413 // Template constructors from a pointer to any C++ class of type PtrObj with a specific member function of type; 414 // MemFn.; 415 // The member function must have the signature of (double * , double *) and returning a double.; 416 // The class name and the method name are not needed when using compile code; 417 // (the member function pointer is used in this case), while they are required when using interpreted; 418 // code via the specialized constructor with void *.; 419 // xmin and xmax specify the plotting range, npar is the number of parameters.; 420 // See the tutorial math/exampleFunctor.C for an example of using this constructor; 421 template <c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:15945,interface,interface,15945,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['interface'],['interface']
Integrability,"ng a new fit to avoid deleting this information. ; Definition at line 37 of file TBackCompFitter.h. Public Types; enum  EStatusBits { kCanDeleteLast = (1ULL << ( 9 )); };  ;  Public Types inherited from TVirtualFitter; typedef void(* FCNFunc_t) (Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBackCompFitter ();  Constructor needed by TVirtualFitter interface. ;  ;  TBackCompFitter (const std::shared_ptr< ROOT::Fit::Fitter > &fitter, const std::shared_ptr< ROOT::Fit::FitData > &data);  Constructor used after having fit using directly ROOT::Fit::Fitter will create a dummy fitter copying configuration and parameter settings. ;  ;  ~TBackCompFitter () override;  Destructor - delete the managed objects. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  Do chisquare calculations in case of likelihood fits Do evaluation a the minimum only. ;  ; void Clear (Option_t *option="""") override;  Clear resources for consecutive fits. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:3137,interface,interface,3137,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['interface'],['interface']
Integrability,"ng category sample as index:; // associate model with the physics state and model_ctl with the control state; RooSimultaneous simPdf(""simPdf"", ""simultaneous pdf"", {{""physics"", &model}, {""control"", &model_ctl}}, sample);; ; // P e r f o r m a s i m u l t a n e o u s f i t; // ---------------------------------------------------; ; // Perform simultaneous fit of model to data and model_ctl to data_ctl; std::unique_ptr<RooFitResult> fitResult{simPdf.fitTo(combData, PrintLevel(-1), Save(), PrintLevel(-1))};; fitResult->Print();; ; // P l o t m o d e l s l i c e s o n d a t a s l i c e s; // ----------------------------------------------------------------; ; // Make a frame for the physics sample; RooPlot *frame1 = x.frame(Title(""Physics sample""));; ; // Plot all data tagged as physics sample; combData.plotOn(frame1, Cut(""sample==sample::physics""));; ; // Plot ""physics"" slice of simultaneous pdf.; // NBL You _must_ project the sample index category with data using ProjWData; // as a RooSimultaneous makes no prediction on the shape in the index category; // and can thus not be integrated.; // In other words: Since the PDF doesn't know the number of events in the different; // category states, it doesn't know how much of each component it has to project out.; // This information is read from the data.; simPdf.plotOn(frame1, Slice(sample, ""physics""), ProjWData(sample, combData));; simPdf.plotOn(frame1, Slice(sample, ""physics""), Components(""px""), ProjWData(sample, combData), LineStyle(kDashed));; ; // The same plot for the control sample slice. We do this with a different; // approach this time, for illustration purposes. Here, we are slicing the; // dataset and then use the data slice for the projection, because then the; // RooFit::Slice() becomes unnecessary. This approach is more general,; // because you can plot sums of slices by using logical or in the Cut(); // command.; RooPlot *frame2 = x.frame(Bins(30), Title(""Control sample""));; std::unique_ptr<RooAbsData> slicedDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf501__simultaneouspdf_8C.html:4125,integrat,integrated,4125,doc/master/rf501__simultaneouspdf_8C.html,https://root.cern,https://root.cern/doc/master/rf501__simultaneouspdf_8C.html,1,['integrat'],['integrated']
Integrability,"ng char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; where target is a pointer or array to the type stored on this branch.; When count_buf points to a valid TBuffer and the branch has a branch count, count_buf will be filled (via a call to GetEntriesSerialized()) with the data from the branchCount. After deserialization those value can be used to calculate the number of elements corresponding to each entries.; For each entry the number of elements is the multiplication of; TLeaf *leaf = dynamic_cast<TLeaf*>(branch->GetListOfLeaves()->At(0));; auto len = leaf->GetLen();; and the value in the BranchCount corresponding to that entry (can be obtained from branch->GetBranchCount()).; NoteThis interface is not meant to be exposed to end users, but rather it should be wrapped by higher-level interfaces. See TBranch::GetBulkEntries() for an alternative that also performs byte swapping. ; Definition at line 1586 of file TBranch.cxx. ◆ GetEntry(). Int_t TBranch::GetEntry ; (; Long64_t ; entry = 0, . Int_t ; getall = 0 . ). virtual . Read all leaves of entry and return total number of bytes read. ; The input argument ""entry"" is the entry number in the current tree. In case of a TChain, the entry number in the current Tree must be found before calling this function. For example:; TChain* chain = ...;; Long64_t localEntry = chain->LoadTree(entry);; branch->GetEntry(localEntry);; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TChain::LoadTreeLong64_t LoadTree(Long64_t entry) overrideFind the tree which contains entry, and set it as the current tree.Definition TChain.cxx:1324; The function returns the number of bytes read from the input bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:48349,interface,interface,48349,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,3,"['interface', 'wrap']","['interface', 'interfaces', 'wrapped']"
Integrability,"ng const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly2,sinhGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:8624,integrat,integrates,8624,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,2,['integrat'],['integrates']
Integrability,"ng integral should be interpolated. The default values are 1000 samples and 2nd order; interpolation. The following named arguments are accepted. SupNormSet(const RooArgSet&) -- Observables over which should be normalized _in_addition_ to the; integration observables; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf; ScanNum() -- Apply scanning technique if cdf integral involves numeric integration; ScanAll() -- Always apply scanning technique; ScanNone() -- Never apply scanning technique. RooAbsReal* createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Utility function for createRunningIntegral that construct an object; implementing the numeric scanning technique for calculating the running integral. RooAbsReal* createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); Utility function for createRunningIntegral that construct an; object implementing the standard (analytical) integration; technique for calculating the running integral. RooFunctor* functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; Return a RooFunctor object bound to this RooAbsReal with given definition of observables; and parameters. TF1* asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables; and parameters. RooDerivative* derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooDerivative* derivative(RooRealVar& obs, const RooArgSet& normSet, Int_t order, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooAbsMoment* moment(RooRealVar& obs, Int_t order, Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:72078,integrat,integration,72078,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['integrat'],['integration']
Integrability,"ng integral should be interpolated. The default values are 1000 samples and 2nd order; interpolation. The following named arguments are accepted. SupNormSet(const RooArgSet&) -- Observables over which should be normalized _in_addition_ to the; integration observables; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf; ScanNum() -- Apply scanning technique if cdf integral involves numeric integration; ScanAll() -- Always apply scanning technique; ScanNone() -- Never apply scanning technique. RooAbsReal* createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Utility function for createRunningIntegral that construct an object; implementing the numeric scanning technique for calculating the running integral. RooAbsReal* createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); Utility function for createRunningIntegral that construct an; object implementing the standard (analytical) integration; technique for calculating the running integral. RooFunctor* functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; Return a RooFunctor object bound to this RooAbsReal with given definition of observables; and parameters. TF1* asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables; and parameters. RooDerivative* derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooDerivative* derivative(RooRealVar& obs, const RooArgSet& normSet, Int_t order, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooMoment* moment(RooRealVar& obs, Int_t order, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:68049,integrat,integration,68049,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,4,['integrat'],['integration']
Integrability,"ng of the message buffer.; This method is only called by TSocket::Send(). void SetWhat(UInt_t what); Using this method one can change the message type a-posteriory.; In case you OR ""what"" with kMESS_ACK, the message will wait for; an acknowledgement from the remote side. This makes the sending; process synchronous. void SetCompressionLevel(Int_t level = 1); Set the message compression level. Can be between 0 and 9 with 0; being no compression and 9 maximum compression. In general the default; level of 1 is the best compromise between achieved compression and; cpu time. Compression will only happen when the message is > 256 bytes. Int_t Compress(); Compress the message. The message will only be compressed if the; compression level > 0 and the if the message is > 256 bytes.; Returns -1 in case of error (when compression fails or; when the message increases in size in some pathological cases),; otherwise returns 0. Int_t Uncompress(); Uncompress the message. The message will only be uncompressed when; kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. void WriteObject(const TObject* obj); Write object to message buffer.; When support for schema evolution is enabled the list of TStreamerInfo; used to stream this object is kept in fInfos. This information is used; by TSocket::Send that sends this list through the socket. This list is in; turn used by TSocket::Recv to store the TStreamerInfo objects in the; relevant TClass in case the TClass does not know yet about a particular; class version. This feature is implemented to support clients and servers; with either different ROOT versions or different user classes versions. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pid is already in the message.; If not, then:; - mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; - mark bit uid+1 where uid id the uid of the ProcessID. TMessage(const TMessage& ); TMessage objects cannot be copied or assigned. void operator=(const TMessage& )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessage.html:23213,message,message,23213,root/html528/TMessage.html,https://root.cern,https://root.cern/root/html528/TMessage.html,1,['message'],['message']
Integrability,"ng point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooRealProxy_meas; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; RooRealProxy_true; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooPullVar.html:32912,integrat,integrator,32912,root/html532/RooPullVar.html,https://root.cern,https://root.cern/root/html532/RooPullVar.html,1,['integrat'],['integrator']
Integrability,"ng point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2Binding_double_double_int_.html:32270,integrat,integrator,32270,root/html526/RooCFunction2Binding_double_double_int_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2Binding_double_double_int_.html,2,['integrat'],['integrator']
Integrability,"ng point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2Binding_double_int_double_.html:32270,integrat,integrator,32270,root/html526/RooCFunction2Binding_double_int_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2Binding_double_int_double_.html,2,['integrat'],['integrator']
Integrability,"ng rotation names and the TGeoRotation for it; TGDMLParse::SclMapfsclmap!Map containing scale names and the TGeoScale for it; TGDMLParse::SolMapfsolmap!Map containing solid names and the TGeoShape for it; TGDMLParse::VolMapfvolmap!Map containing volume names and the TGeoVolume for it. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoVolume* GDMLReadFile(const char* filename = ""test.gdml""); creates the new instance of the XMLEngine called 'gdml', using the filename >>; then parses the file and creates the DOM tree. Then passes the DOM to the; next function to translate it. const char* ParseGDML(TXMLEngine* gdml, XMLNodePointer_t node); this function recursively moves thru the DOM tree of the GDML file. It checks for; key words along the way and if a key word is found it calls the corresponding; function to interpret the node. double Evaluate(const char* evalline). Int_t SetAxis(const char* axisString); When using the 'divide' process in the geometry this function; sets the variable 'axis' depending on what is specified. const char* NameShort(const char* name); this function looks thru a string for the chars '0x' next to; each other, when it finds this, it calls another function to strip; the hex address. It does this recursively until the end of the; string is reached, returning a string without any hex addresses. XMLNodePointer_t ConProcess(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the define section of the GDML file, constants can be declared.; when the constant keyword is found, this function is called, and the; name and value of the constant is stored in the ""fformvec"" vector as; a TFormula class, representing a constant function. TString GetScale(const char* unit); Throughout the GDML file, a unit can de specified. Whether it be; angular or linear, values can be used as well as abbreviations such as; 'mm' or 'deg'. This function is passed the specified unit and if it is; found, replaces it wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDMLParse.html:11173,depend,depending,11173,root/html602/TGDMLParse.html,https://root.cern,https://root.cern/root/html602/TGDMLParse.html,2,['depend'],['depending']
Integrability,ng schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution ; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> Template of Vector class; TVectorT<float> Template of Vector class; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Inform,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:138460,interface,interface,138460,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['interface'],['interface']
Integrability,"ng shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep);  Function that is called at the end of redirectServers(). ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:15477,integrat,integrated,15477,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,1,['integrat'],['integrated']
Integrability,"ng the class declaration ; Definition at line 53 of file RooBernstein.h. ◆ doEval(). void RooBernstein::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprivatevirtual . Compute multiple values of Bernstein distribution. ; Reimplemented from RooAbsReal.; Definition at line 92 of file RooBernstein.cxx. ◆ evaluate(). double RooBernstein::evaluate ; (; ); const. overrideprivatevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 78 of file RooBernstein.cxx. ◆ fillBuffer(). void RooBernstein::fillBuffer ; (; ); const. private . Definition at line 68 of file RooBernstein.cxx. ◆ getAnalyticalIntegral(). Int_t RooBernstein::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 98 of file RooBernstein.cxx. ◆ IsA(). TClass * RooBernstein::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooBernstein.h. ◆ selectNormalizationRange(). void RooBernstein::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overridevirtual . Force use of a given normalisation range. ; Needed for functions or PDFs (e.g. RooAddPdf) whose shape depends on the choice of normalisation. ; Reimplemented from RooAbsReal.; Definition at line 61 of file RooBernstein.cxx. ◆ Streamer(). void RooBernstein::Streamer ; (; TBuffer & ; R__b). overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:77863,depend,dependents,77863,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,2,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"ng the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorMultiDim * CreateIntegrator (IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:3641,integrat,integrator,3641,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,1,['integrat'],['integrator']
Integrability,"ng the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Refresh the list of shared libraries and return it. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:30280,message,messages,30280,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,2,['message'],['messages']
Integrability,"ng the; ""Householder betas"".; If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. Bool_t QRH(TMatrixD& q, TVectorD& diagR, TVectorD& up, TVectorD& w, Double_t tol); Decomposition function . void SetMatrix(const TMatrixD& a); Set matrix to be decomposed. Bool_t Solve(TVectorD& b); Solve Ax=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. Bool_t Solve(TMatrixDColumn& b); Solve Ax=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. Bool_t TransSolve(TVectorD& b); Solve A^T x=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. Bool_t TransSolve(TMatrixDColumn& b); Solve A^T x=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. void Det(Double_t& d1, Double_t& d2); This routine calculates the absolute (!) value of the determinant; |det| = d1*TMath::Power(2.,d2). Bool_t Invert(TMatrixD& inv); For a matrix A(m,n), its inverse A_inv is defined as A * A_inv = A_inv * A = unit; The user should always supply a matrix of size (m x m) !; If m > n , only the (n x m) part of the returned (pseudo inverse) matrix; should be used . TMatrixD Invert(Bool_t& status); For a matrix A(m,n), its inverse A_inv is defined as A * A_inv = A_inv * A = unit; (n x m) Ainv is returned . void Print(Option_t* opt = """") const; Print the class members. TDecompQRH & operator=(const TDecompQRH& source); Assignment operator. const TMatrixDBase & GetDecompMatrix() const; { return fR; }. TDecompQRH(); {}. virtual ~TDecompQRH(); {}. Int_t GetNrows() const; { return fQ.GetNrows(); }. Int_t GetNcols() const; { return fQ.GetNcols(); }. const TMatrixD & GetQ(). const TMatrixD & GetR(). const TVectorD & GetUp(). const TVectorD & GetW(). Bool_t Solve(TVectorD& b). Bool_t TransSolve(TVectorD& b). Bool_t Invert(TMatri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompQRH.html:9583,rout,routine,9583,root/html528/TDecompQRH.html,https://root.cern,https://root.cern/root/html528/TDecompQRH.html,6,['rout'],['routine']
Integrability,"ng theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)Argument iClass specifies the class to generate the ROC curve in a multiclass setting.Definition Factory.cxx:912; TMVA::Factory::EvaluateImportanceAllTH1F * EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")Definition Factory.cxx:2246; TMVA::Factory::SetVerbosevoid SetVerbose(Bool_t v=kTRUE)Definition Factory.cxx:343; TMVA::Factory::fgTargetFileTFile * fgTargetFile! ROOT output fileDefinition Factory.h:205; TMVA::Factory::GetMethodIMethod * GetMethod(const TString &datasetname, const TString &title) constReturns pointer to MVA that corresponds to given method title.Definition Factory.cxx:566; TMVA::Factory::DeleteAllMethodsvoid DeleteAllMethods(void)Delete methods.Definition Factory.cxx:324; TMVA::Factory::fTransformationsTString fTransformations! list of transformations to testDefinition Factory.h:212; TMVA::Factory::Greetingsvoid Greetings()Print welcome message.Definition Factory.cxx:295; TMVA::IMethodInterface for all concrete MVA method implementations.Definition IMethod.h:53; TMVA::IMethod::PrintHelpMessagevirtual void PrintHelpMessage() const =0; TMVA::IMethod::HasAnalysisTypevirtual Bool_t HasAnalysisType(Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0; TMVA::IMethod::MakeClassvirtual void MakeClass(const TString &classFileName=TString("""")) const =0; TMVA::MethodBaseVirtual base Class for all MVA method.Definition MethodBase.h:111; TMVA::MethodBase::GetSeparationvirtual Double_t GetSeparation(TH1 *, TH1 *) constcompute ""separation"" defined asDefinition MethodBase.cxx:2789; TMVA::MethodBase::SetSilentFilevoid SetSilentFile(Bool_t status)Definition MethodBase.h:378; TMVA::MethodBase::SetWeightFileDirvoid SetWeightFileDir(TString fileDir)set directory of weight fileDefinition MethodBase.cxx:2059; TMVA::MethodBase::TestRegressionvirtual void TestRegression(Double_t &bias, Double_t &b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:125712,message,message,125712,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['message'],['message']
Integrability,"ng to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenCategory Generic category-to-category function based on user supplied mapping function; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function ; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:35619,integrat,integration,35619,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['integrat'],['integration']
Integrability,"ng to a double. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:29433,integrat,integrator,29433,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,2,['integrat'],"['integration', 'integrator']"
Integrability,"ng to chapter 2.1 we assume a valid pct-encoded string. ; Definition at line 1012 of file TUri.cxx. ◆ PctEncode(). const TString TUri::PctEncode ; (; const TString & ; source). static . Percent-encode and return the given string according to RFC 3986 in principle, this function cannot fail or produce an error. ; Definition at line 815 of file TUri.cxx. ◆ PctNormalise(). TString const TUri::PctNormalise ; (; const TString & ; source). static . Normalise the percent-encoded parts of the string i.e. ; uppercase the hexadecimal digits %[:alpha:][:alpha:] -> %[:ALPHA:][:ALPHA:] ; Definition at line 1057 of file TUri.cxx. ◆ Print(). void TUri::Print ; (; Option_t * ; option = """"); const. overridevirtual . Display function,. . option ""d"" .. debug output; anything else .. simply print URI. . Reimplemented from TObject.; Definition at line 528 of file TUri.cxx. ◆ RemoveDotSegments(). const TString TUri::RemoveDotSegments ; (; const TString & ; inp). static . This functions implements the ""remove_dot_segments"" routine of chapter 5.2.4 ""for interpreting and removing the special '. ; ' and '..' complete path segments from a referenced path"". ; Definition at line 159 of file TUri.cxx. ◆ Reset(). void TUri::Reset ; (; ). Initialize this URI object. ; Set all TString members to empty string, set all Bool_t members to kFALSE. ; Definition at line 571 of file TUri.cxx. ◆ SetAuthority(). Bool_t TUri::SetAuthority ; (; const TString & ; authority). Set authority part of URI: ; authority = [ userinfo ""@"" ] host [ "":"" port ]; Split into components {userinfo@, host, :port}, remember that according to the RFC, it is necessary to distinguish between missing component (no delimiter) and empty component (delimiter present). ; Definition at line 338 of file TUri.cxx. ◆ SetFragment(). Bool_t TUri::SetFragment ; (; const TString & ; fragment). Set fragment component of URI: ; fragment = *( pchar / ""/"" / ""?"" ). Definition at line 498 of file TUri.cxx. ◆ SetHierPart(). Bool_t TUri::SetHierPart ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUri.html:29087,rout,routine,29087,doc/master/classTUri.html,https://root.cern,https://root.cern/doc/master/classTUri.html,1,['rout'],['routine']
Integrability,"ng to given amount. ;  . Protected Member Functions; RooArgSet const & flattenedCatList () const;  Internal utility function to get a list of all category components for this RooSimultaneous. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:64311,rout,routine,64311,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['rout'],['routine']
Integrability,"ng using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:178673,interface,interface,178673,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['interface'],['interface']
Integrability,"ng& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. void HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific grou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:28667,message,message,28667,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,1,['message'],['message']
Integrability,"ng& theOption = """", TDirectory* theTargetDir = 0); standard constructor for the H-Matrix method. MethodHMatrix(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the H-matrix signal estimator. Double_t GetChi2(TMVA::Types::ESBType ); compute chi2-estimator for event according to type (signal/background). void AddWeightsXMLTo(void* parent) const; create XML description for HMatrix classification. void ReadWeightsFromXML(void* wghtnode); read weights from XML file. void ReadWeightsFromStream(istream& istr); read variable names and min/max; NOTE: the latter values are mandatory for the normalisation; in the reader application !!!. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodHMatrix.html:18760,message,message,18760,root/html534/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodHMatrix.html,1,['message'],['message']
Integrability,"ng) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; RooStats::HypoTestCalculatorHypoTestCalculator(); RooStats::HypoTestCalculatorHypoTestCalculator(const RooStats::HypoTestCalculator&); virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& model); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~HypoTestCalculator(); {}. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetCommonModel(const RooStats::ModelConfig& model); Set a common model for both the null and alternate, add to the the workspace if not already there. SetNullModel(const RooStats::ModelConfig& model). SetAlternateModel(const RooStats::ModelConfig& model). void SetData(RooAbsData& data); Set the DataSet. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculator.html:2509,interface,interface,2509,root/html602/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculator.html,1,['interface'],['interface']
Integrability,"ng) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; RooStats::HypoTestCalculatorHypoTestCalculator(); RooStats::HypoTestCalculatorHypoTestCalculator(const RooStats::HypoTestCalculator&); virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& model); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~HypoTestCalculator(); {}. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetCommonModel(const RooStats::ModelConfig& model); Set a common model for both the null and alternate, add to the the workspace if not already there. SetNullModel(const RooStats::ModelConfig& model). SetAlternateModel(const RooStats::ModelConfig& model). void SetData(RooAbsData& data); Set the DataSet. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HypoTestCalculator.html:2509,interface,interface,2509,root/html604/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html604/RooStats__HypoTestCalculator.html,1,['interface'],['interface']
Integrability,"ng. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the result of; TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); can be set during the handling of the events. This mechanism allows; macros running in tight calculating loops to be interrupte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:18353,interface,interface,18353,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,5,['interface'],['interface']
Integrability,"ng...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNumIntConfig Class ReferenceRooFit » RooFit Core. ; Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. ; RooRealIntegral and RooAbsPdf use this class in the (normalization) integral configuration interface ; Definition at line 25 of file RooNumIntConfig.h. Public Member Functions;  RooNumIntConfig ();  Constructor. ;  ;  RooNumIntConfig (const RooNumIntConfig &other);  Copy constructor. ;  ;  ~RooNumIntConfig () override;  Destructor. ;  ; bool addConfigSection (std::string const &name, const RooArgSet &inDefaultConfig, bool canIntegrate1D, bool canIntegrate2D, bool canIntegrateND, bool canIntegrateOpenEnded);  Add a configuration section for a particular integrator. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  ; double epsAbs () const;  ; double epsRel () const;  ; RooArgSet & getConfigSection (const char *name);  Return section with configuration parameters for integrator with given (class) name. ;  ; const RooArgSet & getConfigSection (const char *name) const;  Retrieve configuration information specific to integrator with given name. ;  ; TClass * IsA () const override;  ; RooCategory & method1D ();  ; const RooCategory & method1D () const;  ; RooCategory & method1DOpen ();  ; const RooCategory & method1DOpen () const;  ; RooCategory & method2D ();  ; const RooCategory & method2D () const;  ; RooCategory & method2DOpen ();  ; const RooCategory & method2DOpen () const;  ; RooCategory & methodND ();  ; const RooCategory & methodND () const;  ; RooCategory & methodNDOpen ();  ; const RooCategory & methodNDOpen () const;  ; RooNumIntConfig & operator= (const RooNumIntConfig &other);  Assignment operator from other RooNumIntConfig. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print its",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:1198,integrat,integrator,1198,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['integrat'],['integrator']
Integrability,"ng...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TProfile2D Class ReferenceHistogram Library » Histogram classes. ; Profile2D histograms are used to display the mean value of Z and its error for each cell in X,Y. ; Profile2D histograms are in many cases an elegant replacement of three-dimensional histograms : the inter-relation of three measured quantities X, Y and Z can always be visualized by a three-dimensional histogram or scatter-plot; its representation on the line-printer is not particularly satisfactory, except for sparse data. If Z is an unknown (but single-valued) approximate function of X,Y this function is displayed by a profile2D histogram with much better precision than by a scatter-plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for cell i, j. ; \[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \]. The bin content is always the mean of the Z values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \]. In th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:1133,rout,routines,1133,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['rout'],['routines']
Integrability,"ng.cxx. ◆ RegisterLoadedSharedLibrary(). void TCling::RegisterLoadedSharedLibrary ; (; const char * ; name). private . Register a new shared library name with the interpreter; add it to fSharedLibs. ; Definition at line 3415 of file TCling.cxx. ◆ RegisterModule(). void TCling::RegisterModule ; (; const char * ; modulename, . const char ** ; headers, . const char ** ; includePaths, . const char * ; payloadCode, . const char * ; fwdDeclsCode, . void(*)() ; triggerFunc, . const FwdDeclArgsToKeepCollection_t & ; fwdDeclsArgToSkip, . const char ** ; classesHeaders, . Bool_t ; lateRegistration = false, . Bool_t ; hasCxxModule = false . ). finalvirtual . Inject the module named ""modulename"" into cling; load all headers. ; headers is a 0-terminated array of header files to #include after loading the module. The module is searched for in all $LD_LIBRARY_PATH entries (or PATH% on Windows). This function gets called by the static initialization of dictionary libraries. The payload code is injected ""as is"" in the interpreter. The value of 'triggerFunc' is used to find the shared library location. ; Implements TInterpreter.; Definition at line 2010 of file TCling.cxx. ◆ RegisterPrebuiltModulePath(). bool TCling::RegisterPrebuiltModulePath ; (; const std::string & ; FullPath, . const std::string & ; ModuleMapName = ""module.modulemap"" . ); const. finalvirtual . Returnstrue if the module map was loaded, false on error or if the map was already loaded. ; Implements TInterpreter.; Definition at line 1906 of file TCling.cxx. ◆ RegisterRdictForLoadPCM(). void TCling::RegisterRdictForLoadPCM ; (; const std::string & ; pcmFileNameFullPath, . llvm::StringRef * ; pcmContent . ). private . Register Rdict data for future loading by LoadPCM;. ; Definition at line 1678 of file TCling.cxx. ◆ RegisterTClassUpdate(). void TCling::RegisterTClassUpdate ; (; TClass * ; oldcl, . DictFuncPtr_t ; dict . ). finalvirtual . Register classes that already existed prior to their dictionary loading and that al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:125191,inject,injected,125191,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['inject'],['injected']
Integrability,"ng.cxx:931; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::PrependTString & Prepend(const char *cs)Definition TString.h:673; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystemAbstract base class defining a generic interface to the underlying Operating System.Definition TSystem.h:266; TSystem::fListPathsTString fListPathsDefinition TSystem.h:310; TSystem::NotifyApplicationCreatedvirtual void NotifyApplicationCreated()Hook to tell TSystem that the TApplication object has been created.Definition TSystem.cxx:311; TSystem::GetBuildNodevirtual const char * GetBuildNode() constReturn the build node name.Definition TSystem.cxx:3907; TSystem::Umaskvirtual int Umask(Int_t mask)Set the process file creation mode mask.Definition TSystem.cxx:1517; TSystem::SendBufvirtual int SendBuf(int sock, const void *buffer, int length)Send a buffer headed by a length indicator.Definition TSystem.cxx:2427; TSystem::GetServiceByNamevirtual int GetServiceByName(const char *service)Get port # of internet service.Definition TSystem.cxx:2318; TSystem::IsFileInIncludePathvirtual Bool_t IsFileInIncludePath(const char *name, char **fullpath=nullptr)Return true if 'name' is a file that can be found in the ROOT include path or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:167905,interface,interface,167905,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['interface'],['interface']
Integrability,"ng64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAS3File(const char* url, Option_t* opt = """"); For TAS3File to properly work you need to set up; environment variables S3_ACCESS_ID and S3_ACCESS_KEY; The format of the path is: server/bucket/file; Example: f = new TAS3File(""as3://s3-eu-west-1.amazonaws.com/roots3/hsimple.root""). Int_t GetHead(); Clone of TWebFile::GetHead except it uses THTTPMessage to generate; the HTTP request. Bool_t ReadBuffer(char* buf, Int_t len). Bool_t ReadBuffer10(char* buf, Int_t len); Read specified byte range from Amazon S3.; This routine connects to the Amazon S3 server, sends the; request created by THTTPMessage and returns the buffer.; Returns kTRUE in case of error. TAS3File(). virtual ~TAS3File(); { }. Bool_t ReadBuffer(char* buf, Int_t len). TString GetAuthPrefix() const; { return fAuthPrefix; }. TString GetAccessId() const; { return fAccessId; }. TString GetAccessKey() const; { return fAccessKey; }. TUrl GetUrl() const; { return fServer; }. TString GetBucket() const; { return fBucket; }. » Author: Marcelo Sousa 23/08/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TAS3File.h 41144 2011-10-05 13:15:20Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAS3File.html:25055,rout,routine,25055,root/html532/TAS3File.html,https://root.cern,https://root.cern/root/html532/TAS3File.html,1,['rout'],['routine']
Integrability,"ngAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNovosibirsk(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _peak, RooAbsReal& _width, RooAbsReal& _tail); The two addresses refer to our first dependent variable and; parameter, respectively, as declared in the rdl file. RooNovosibirsk(const RooNovosibirsk& other, const char* name = 0). Double_t evaluate() const; If tail=eta=0 the Belle distribution becomes gaussian. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const. RooNovosibirsk(); Your constructor needs a name and title and then a list of the; dependent variables and parameters used by this PDF. Use an; underscore in the variable names to distinguish them from your; own local versions. {}. TObject* clone(const char* newname) const; { return new RooNovosibirsk(*this,newname);	}. virtual ~RooNovosibirsk(); An empty constructor is usually ok. { }. » Last changed: Tue Mar 10 17:18:11 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNovosibirsk.html:43886,depend,dependent,43886,root/html534/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html534/RooNovosibirsk.html,1,['depend'],['dependent']
Integrability,"ngRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPEffDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPEffDecay.html:46394,integrat,integrator,46394,root/html602/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPEffDecay.html,2,['integrat'],['integrator']
Integrability,"ngRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPGenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPGenDecay.html:46253,integrat,integrator,46253,root/html602/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPGenDecay.html,2,['integrat'],['integrator']
Integrability,"ngRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalpha; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym; RooRealProxym0; RooRealProxyn; RooRealProxysigma.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCBShape.html:38832,integrat,integrator,38832,root/html528/RooCBShape.html,https://root.cern,https://root.cern/root/html528/RooCBShape.html,1,['integrat'],['integrator']
Integrability,"ngRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooCategoryProxy_rhoQ; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooNonCPEigenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_wQ; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNonCPEigenDecay.html:45542,integrat,integrator,45542,root/html534/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html534/RooNonCPEigenDecay.html,1,['integrat'],['integrator']
Integrability,"ngRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:41765,integrat,integrator,41765,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['integrat'],['integrator']
Integrability,"ngSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fData = p; }. char * GetLongPointer(); { return fRep.fLong.fData; }. const char * GetLongPointer() const; { return fRep.fLong.fData; }. char * GetShortPointer(); { return fRep.fShort.fData; }. const char * GetShortPointer() const; { return fRep.fShort.fData; }. char * GetPointer(); { return IsLong() ? GetLongPointer() : GetShortPointer(); }. const char * GetPointer() const; { return IsLong() ? GetLongPointer() : GetShortPointer(); }. Ssiz_t MaxSize(); { return kMaxInt - 1; }. void UnLink() const; { if (IsLong()) delete [] fRep.fLong.fData; }. void Zero(). TString * ReadString(TBuffer& b, const TClass* clReq). Bool_t Gets(FILE* fp, Bool_t chop = kTRUE); C I/O interface. void Puts(FILE* fp). char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. Ssiz_t Capacity() const; { return (IsLong() ? GetLongCap() : kMinCap) - 1; }. Ssiz_t Index(const char* pat, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t i = 0) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const. Bool_t IsWhitespace() const; { return (Length() == CountChar(' ')); }. std::istream & ReadFile(istream& str). std::istream & ReadLine(istream& str, Bool_t skipWhite = kTRUE). std::istream & ReadToDelim(istream& str, char delim = '\n'). std::istream & ReadToken(istream& str). TObjArray * Tokenize(const TString& delim) const. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:34; This page has been aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TString.html:27651,interface,interface,27651,root/html604/TString.html,https://root.cern,https://root.cern/root/html604/TString.html,1,['interface'],['interface']
Integrability,"ngSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fData = p; }. char * GetLongPointer(); { return fRep.fLong.fData; }. const char * GetLongPointer() const; { return fRep.fLong.fData; }. char * GetShortPointer(); { return fRep.fShort.fData; }. const char * GetShortPointer() const; { return fRep.fShort.fData; }. char * GetPointer(); { return IsLong() ? GetLongPointer() : GetShortPointer(); }. const char * GetPointer() const; { return IsLong() ? GetLongPointer() : GetShortPointer(); }. Ssiz_t MaxSize(); { return kMaxInt - 1; }. void UnLink() const; { if (IsLong()) delete [] fRep.fLong.fData; }. void Zero(). TString * ReadString(TBuffer& b, const TClass* clReq). Bool_t Gets(FILE* fp, Bool_t chop = kTRUE); C I/O interface. void Puts(FILE* fp). char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. Ssiz_t Capacity() const; { return (IsLong() ? GetLongCap() : kMinCap) - 1; }. Ssiz_t Index(const char* pat, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t i = 0) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const. Bool_t IsWhitespace() const; { return (Length() == CountChar(' ')); }. std::istream & ReadFile(istream& str). std::istream & ReadLine(istream& str, Bool_t skipWhite = kTRUE). std::istream & ReadToDelim(istream& str, char delim = '\n'). std::istream & ReadToken(istream& str). TObjArray * Tokenize(const TString& delim) const. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:31; This page has been aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TString.html:27331,interface,interface,27331,root/html602/TString.html,https://root.cern,https://root.cern/root/html602/TString.html,1,['interface'],['interface']
Integrability,"ngSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fData = p; }. char * GetLongPointer(); { return fRep.fLong.fData; }. const char * GetLongPointer() const; { return fRep.fLong.fData; }. char * GetShortPointer(); { return fRep.fShort.fData; }. const char * GetShortPointer() const; { return fRep.fShort.fData; }. char * GetPointer(); { return IsLong() ? GetLongPointer() : GetShortPointer(); }. const char * GetPointer() const; { return IsLong() ? GetLongPointer() : GetShortPointer(); }. Ssiz_t MaxSize(); { return kMaxInt - 1; }. void UnLink() const; { if (IsLong()) delete [] fRep.fLong.fData; }. void Zero(). TString * ReadString(TBuffer& b, const TClass* clReq). Bool_t Gets(FILE* fp, Bool_t chop = kTRUE); C I/O interface. void Puts(FILE* fp). operator const char*() const; Type conversion. { return GetPointer(); }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. Ssiz_t Capacity() const; { return (IsLong() ? GetLongCap() : kMinCap) - 1; }. Ssiz_t Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t i = 0) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const. Bool_t IsWhitespace() const; { return (Length() == CountChar(' ')); }. istream & ReadFile(istream& str). istream & ReadLine(istream& str, Bool_t skipWhite = kTRUE). istream & ReadToDelim(istream& str, char delim = '\n'). istream & ReadToken(istream& str). TObjArray * Tokenize(const TString& delim) const. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TString.html:26907,interface,interface,26907,root/html534/TString.html,https://root.cern,https://root.cern/root/html534/TString.html,1,['interface'],['interface']
Integrability,"ngSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fData = p; }. char * GetLongPointer(); { return fRep.fLong.fData; }. const char * GetLongPointer() const; { return fRep.fLong.fData; }. char * GetShortPointer(); { return fRep.fShort.fData; }. const char * GetShortPointer() const; { return fRep.fShort.fData; }. char * GetPointer(); { return IsLong() ? GetLongPointer() : GetShortPointer(); }. const char * GetPointer() const; { return IsLong() ? GetLongPointer() : GetShortPointer(); }. Ssiz_t MaxSize(); { return kMaxInt - 1; }. void UnLink() const; { if (IsLong()) delete [] fRep.fLong.fData; }. void Zero(). TString * ReadString(TBuffer& b, const TClass* clReq). Bool_t Gets(FILE* fp, Bool_t chop = kTRUE); C I/O interface. void Puts(FILE* fp). operator const char*() const; Type conversion. { return GetPointer(); }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. Ssiz_t Capacity() const; { return (IsLong() ? GetLongCap() : kMinCap) - 1; }. Ssiz_t Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t i = 0) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const. Bool_t IsWhitespace() const; { return (Length() == CountChar(' ')); }. istream & ReadFile(istream& str). istream & ReadLine(istream& str, Bool_t skipWhite = kTRUE). istream & ReadToDelim(istream& str, char delim = '\n'). istream & ReadToken(istream& str). TObjArray * Tokenize(const TString& delim) const. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TString",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TString.html:24051,interface,interface,24051,root/html530/TString.html,https://root.cern,https://root.cern/root/html530/TString.html,2,['interface'],['interface']
Integrability,"ngTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooEffProd(const char* name, const char* title, RooAbsPdf& pdf, RooAbsReal& efficiency); Constructor of a a production of p.d.f inPdf with efficiency; function inEff. RooEffProd(const RooEffProd& other, const char* name = 0); Copy constructor. ~RooEffProd(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Return p.d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffProd.html:40744,integrat,integration,40744,root/html526/RooEffProd.html,https://root.cern,https://root.cern/root/html526/RooEffProd.html,3,['integrat'],['integration']
Integrability,"ngTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooEllipse(); Default constructor. ~RooEllipse(); Destructor. RooEllipse(const char* name, Double_t x1, Double_t x2, Double_t s1, Double_t s2, Double_t rho = 0, Int_t points = 100); Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence; level contour for a measurement with errors (s1,s2) and correlation coefficient rho.; The resulting curve is defined as the unique ellipse that passes through these points:. (x1+rho*s1,x2+s2) , (x1-rho*s1,x2-s2) , (x1+s1,x2+rho*s2) , (x1-s1,x2-rho*s2). and is described by the implicit equation:. x*x 2*rho*x*y y*y; ----- - --------- + ----- = 1 - rho*rho; s1*s1 s1*s2 s2*s2. The input parameters s1,s2 must be > 0 and also |rho| <= 1.; The degenerate case |rho|=1 corresponds to a straight line and; is handled as a special case. void printName(ostream& os) const; Print name of ellipse on ostream. void printTitle(ostream& os) const; Print title of ellipse on ostream. void printClassName(ostream& os) const; Print class name of ellipse on ostream. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print detailed multi line information on ellipse on ostreamx. RooEllipse(). void Print(Option_t* options = 0) const; Printing interface. Double_t getFitRangeNEvt() const; These methods return zero to indicate that they do not support; this interface. See RooPlot::updateFitRangeNorm() for details. { return 0; }. Double_t getFitRangeNEvt(Double_t , Double_t ) const; { return 0; }. Double_t getFitRangeBinW() const; { return 0; }. » Last changed: Thu Sep 23 19:59:33 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEllipse.html:16252,interface,interface,16252,root/html528/RooEllipse.html,https://root.cern,https://root.cern/root/html528/RooEllipse.html,2,['interface'],['interface']
Integrability,"ngTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooEllipse(); Default constructor. ~RooEllipse(); Destructor. RooEllipse(const char* name, Double_t x1, Double_t x2, Double_t s1, Double_t s2, Double_t rho = 0, Int_t points = 100); Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence; level contour for a measurement with errors (s1,s2) and correlation coefficient rho.; The resulting curve is defined as the unique ellipse that passes through these points:. (x1+rho*s1,x2+s2) , (x1-rho*s1,x2-s2) , (x1+s1,x2+rho*s2) , (x1-s1,x2-rho*s2). and is described by the implicit equation:. x*x 2*rho*x*y y*y; ----- - --------- + ----- = 1 - rho*rho; s1*s1 s1*s2 s2*s2. The input parameters s1,s2 must be > 0 and also |rho| <= 1.; The degenerate case |rho|=1 corresponds to a straight line and; is handled as a special case. void printName(ostream& os) const; Print name of ellipse on ostream. void printTitle(ostream& os) const; Print title of ellipse on ostream. void printClassName(ostream& os) const; Print class name of ellipse on ostream. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print detailed multi line information on ellipse on ostreamx. RooEllipse(). void Print(Option_t* options = 0) const; Printing interface. Double_t getFitRangeNEvt() const; These methods return zero to indicate that they do not support; this interface. See RooPlot::updateFitRangeNorm() for details. { return 0; }. Double_t getFitRangeNEvt(Double_t , Double_t ) const; { return 0; }. Double_t getFitRangeBinW() const; { return 0; }. » Last changed: Tue Jun 30 14:32:44 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEllipse.html:17763,interface,interface,17763,root/html602/RooEllipse.html,https://root.cern,https://root.cern/root/html602/RooEllipse.html,2,['interface'],['interface']
Integrability,"ngTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooEllipse(); Default constructor. ~RooEllipse(); Destructor. RooEllipse(const char* name, Double_t x1, Double_t x2, Double_t s1, Double_t s2, Double_t rho = 0, Int_t points = 100); Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence; level contour for a measurement with errors (s1,s2) and correlation coefficient rho.; The resulting curve is defined as the unique ellipse that passes through these points:. (x1+rho*s1,x2+s2) , (x1-rho*s1,x2-s2) , (x1+s1,x2+rho*s2) , (x1-s1,x2-rho*s2). and is described by the implicit equation:. x*x 2*rho*x*y y*y; ----- - --------- + ----- = 1 - rho*rho; s1*s1 s1*s2 s2*s2. The input parameters s1,s2 must be > 0 and also |rho| <= 1.; The degenerate case |rho|=1 corresponds to a straight line and; is handled as a special case. void printName(ostream& os) const; Print name of ellipse on ostream. void printTitle(ostream& os) const; Print title of ellipse on ostream. void printClassName(ostream& os) const; Print class name of ellipse on ostream. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print detailed multi line information on ellipse on ostreamx. RooEllipse(). void Print(Option_t* options = 0) const; Printing interface. Double_t getFitRangeNEvt() const; These methods return zero to indicate that they do not support; this interface. See RooPlot::updateFitRangeNorm() for details. { return 0; }. Double_t getFitRangeNEvt(Double_t , Double_t ) const; { return 0; }. Double_t getFitRangeBinW() const; { return 0; }. » Last changed: Tue Mar 10 17:16:30 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEllipse.html:16727,interface,interface,16727,root/html534/RooEllipse.html,https://root.cern,https://root.cern/root/html534/RooEllipse.html,2,['interface'],['interface']
Integrability,"ng_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RemoveClass(TClass* ); Remove a class from the list and map of classes.; This routine is deprecated, use TClass::RemoveClass directly. void Reset(Option_t* option = """"); Delete all global interpreter objects created since the last call to Reset. If option=""a"" is set reset to startup context (i.e. unload also; all loaded files, classes, structs, typedefs, etc.). This function is typically used at the beginning (or end) of an unnamed macro; to clean the environment. IMPORTANT WARNING:; Do not use this call from within any function (neither compiled nor; interpreted. This should only be used from a unnamed macro; (which starts with a { (curly braces) ). For example, using TROOT::Reset; from within an interpreted function will lead to the unloading of the; dictionary and source file, including the one defining the function being; executed. void SaveContext(); Save the current interpreter context. void SetCutClassName(const char* name = ""TCutG""); Set the default graphical cut class name for the graphics editor; By default the graphics editor creates an instance of a class TCutG.; This functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TROOT.html:31881,rout,routine,31881,root/html534/TROOT.html,https://root.cern,https://root.cern/root/html534/TROOT.html,1,['rout'],['routine']
Integrability,"ng_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *sock) signal is emitted. ; Definition at line 423 of file TMonitor.cxx. ◆ Streamer(). void TMonitor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMonitor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TMonitor.h. Friends And Related Symbol Documentation. ◆ TSocketHandler. friend class TSocketHandler. friend . Definition at line 38 of file TMonitor.h. ◆ TTimeOutTimer. friend class TTimeOutTimer. friend . Definition at line 39 of file TMonitor.h. ◆ TXSlave. friend class TXSlave. friend . Definition at line 40 of file TMonitor.h. ◆ TXSocket. friend class TXSocket. friend . Definition at line 41 of file TMonitor.h. Member Data Documentation. ◆ fActive. TList* TMonitor::fActive. private . Definition at line 44 of file TMonitor.h. ◆ fDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:23379,rout,routine,23379,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['rout'],['routine']
Integrability,"nge the current resolution model to newModel. ;  ; virtual double coefAnalyticalIntegral (Int_t coef, Int_t code, const char *rangeName=nullptr) const;  Default implementation of function implementing advertised integrals. ;  ; virtual double coefficient (Int_t basisIndex) const =0;  ; virtual RooFit::OwningPtr< RooArgSet > coefVars (Int_t coefIdx) const;  Return set of parameters with are used exclusively by the coefficient functions. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsRealLValue * convVar ();  Retrieve the convolution variable. ;  ; const RooAbsRealLValue * convVar () const;  Retrieve the convolution variable. ;  ; Int_t declareBasis (const char *expression, const RooArgList &params);  Declare a basis function for use in this physics model. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  This function forces RooRealIntegral to offer all integration dependents to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for internal integration, if RooRealIntegral considers this to be unsafe (e.g. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Create a generator context for this p.d.f. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise capability to perform (analytical) integrals internally. ;  ; virtual Int_t getCoefAnalyticalIntegral (Int_t coef, RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Default implementation of function advertising integration capabilities. ;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet &nset, const char *rangeName) const;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet *nset=nullptr, const char *rangeName=nullptr) const;  ; TClass * IsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:4546,integrat,integration,4546,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,3,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"nge, otherwise it is performed over the domain of each; integrated observable. If cfg is specified it will be used to configure any numeric integration; aspect of the integral. It will not force the integral to be performed numerically, which is; decided automatically by RooRealIntegral. RooAbsReal* createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; Utility function for createIntegral that creates the actual integreal object. void findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; Utility function for createIntObj() that aids in the construct of recursive integrals; over functions with multiple observables with parameterized ranges. This function; finds in a given set allObs over which integration is requested the largeset subset; of observables that can be integrated simultaneously. This subset consists of; observables with fixed ranges and observables with parameterized ranges whose; parameterization does not depend on any observable that is also integrated. TString integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Construct string with unique suffix name to give to integral object that encodes; integrated observables, normalization observables and the integration range name. const RooAbsReal* createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; Utility function for plotOn() that creates a projection of a function or p.d.f; to be plotted on a RooPlot. const RooAbsReal* createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; Utility function for plotOn() that creates a projection of a function or p.d.f; to be plotted on a RooPlot. const RooAbsReal * createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:37327,depend,depend,37327,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,14,"['depend', 'integrat']","['depend', 'integrated']"
Integrability,"nge; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooListProxy_x; Double_t_z; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:41684,integrat,integrator,41684,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,1,['integrat'],['integrator']
Integrability,"nge; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TF1*func; RooListProxylist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooTFnPdfBinding.html:39742,integrat,integrator,39742,root/html532/RooTFnPdfBinding.html,https://root.cern,https://root.cern/root/html532/RooTFnPdfBinding.html,1,['integrat'],['integrator']
Integrability,"ngeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:45783,integrat,integration,45783,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,7,['integrat'],['integration']
Integrability,"ngeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,double>funcFunction pointer reference; RooRealProxyxArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:42435,integrat,integrator,42435,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,1,['integrat'],['integrator']
Integrability,"nges and observables with parameterized ranges whose; parameterization does not depend on any observable that is also integrated. TString integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Construct string with unique suffix name to give to integral object that encodes; integrated observables, normalization observables and the integration range name. const RooAbsReal* createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; Utility function for plotOn() that creates a projection of a function or p.d.f; to be plotted on a RooPlot. const RooAbsReal* createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; Utility function for plotOn() that creates a projection of a function or p.d.f; to be plotted on a RooPlot. const RooAbsReal * createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; Utility function for plotOn() that creates a projection of a function or p.d.f; to be plotted on a RooPlot. Create a new object G that represents the normalized projection:. Integral [ F[x,y,p] , { y } ]; G[x,p] = ---------------------------------; Integral [ F[x,y,p] , { x,y } ]. where F[x,y,p] is the function we represent, ""x"" are the; specified dependentVars, ""y"" are the specified projectedVars, and; ""p"" are our remaining variables (""parameters""). Return a; pointer to the newly created object, or else zero in case of an; error. The caller is responsible for deleting the contents of; cloneSet (which includes the returned projection object). TH1 * fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Fill the ROOT histogram 'hist' with values sampled from this; function at the bin ce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:38172,depend,dependentVars,38172,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['depend'],['dependentVars']
Integrability,"nges; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProduct(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgSet& _prodSet); Construct function representing the product of functions in prodSet. RooProduct(const RooProduct& other, const char* name = 0); Copy constructor. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force internal handling of integration of given observable if any; of the product terms depend on it. Int_t getPartIntList(const RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const; Forward the plot sampling hint from the p.d.f. that defines the observable o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProduct.html:34992,integrat,integrations,34992,root/html532/RooProduct.html,https://root.cern,https://root.cern/root/html532/RooProduct.html,1,['integrat'],['integrations']
Integrability,"nges; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProduct(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgSet& _prodSet); Construct function representing the product of functions in prodSet. RooProduct(const RooProduct& other, const char* name = 0); Copy constructor. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force internal handling of integration of given observable if any; of the product terms depend on it. Int_t getPartIntList(const RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProduct(*this, newname); }. ProdMap* groupProductTerms(const RooArgSet& ) const. » Last changed: Mon Dec 7 13:48:44 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProduct.html:33540,integrat,integrations,33540,root/html526/RooProduct.html,https://root.cern,https://root.cern/root/html526/RooProduct.html,1,['integrat'],['integrations']
Integrability,"nges; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProduct(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgSet& _prodSet); Construct function representing the product of functions in prodSet. RooProduct(const RooProduct& other, const char* name = 0); Copy constructor. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force internal handling of integration of given observable if any; of the product terms depend on it. Int_t getPartIntList(const RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProduct(*this, newname); }. RooArgSet components(); { RooArgSet tmp(_compRSet) ; tmp.add(_compCSet) ; return tmp ; }. ProdMap* groupProductTerms(const RooArgSet& ) const. » Last changed: Mon Jul 4 15:23:44 2011 » Last generated: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProduct.html:34321,integrat,integrations,34321,root/html530/RooProduct.html,https://root.cern,https://root.cern/root/html530/RooProduct.html,1,['integrat'],['integrations']
Integrability,"nges; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProduct(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgSet& _prodSet); Construct function representing the product of functions in prodSet. RooProduct(const RooProduct& other, const char* name = 0); Copy constructor. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force internal handling of integration of given observable if any; of the product terms depend on it. Int_t getPartIntList(const RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProduct(*this, newname); }. RooArgSet components(); { RooArgSet tmp(_compRSet) ; tmp.add(_compCSet) ; return tmp ; }. ProdMap* groupProductTerms(const RooArgSet& ) const. » Last changed: Sat Oct 9 20:48:34 2010 » Last generated: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProduct.html:33804,integrat,integrations,33804,root/html528/RooProduct.html,https://root.cern,https://root.cern/root/html528/RooProduct.html,1,['integrat'],['integrations']
Integrability,"nges; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExtendPdf(); Default constructor. RooExtendPdf(const char* name, const char* title, const RooAbsPdf& pdf, const RooAbsReal& norm, const char* rangeName = 0); Constructor. The ExtendedPdf behaves identical to the supplied input pdf,; but adds an extended likelihood term. The expected number of events return; is 'norm'. If a rangename is given, the number of events is interpreted as. RooExtendPdf(const RooExtendPdf& other, const char* name = 0); Copy constructor. ~RooExtendPdf(); Destructor. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events, which is. n / [ Int(xC,yF) pdf(x,y) / Int(xF,yF) pdf(x,y) ]. Where x is the set of dependents with cuts defined; and y are the other dependents. xC is the integration; of x over the cut range, xF is the integration of; x over the full range. TObject* clone(const char* newname) const; { return new RooExtendPdf(*this,newname) ; }. Double_t evaluate() const; { return _pdf ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Forward determination of analytical integration capabilities to input p.d.f. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward calculation of analytical integrals to input p.d.f. Bool_t selfNormalized() const; { return kTRUE ; }. ExtendMode extendMode() const; { return CanBeExtended ; }. Double_t expectedEvents(const RooArgSet* nset). » Last changed: Mon Dec 7 13:47:34 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExtendPdf.html:41158,integrat,integration,41158,root/html526/RooExtendPdf.html,https://root.cern,https://root.cern/root/html526/RooExtendPdf.html,1,['integrat'],['integration']
Integrability,"ngine; 14#define ROOT_Math_MixMaxEngine; 15 ; 16#include <cstdint>; 17#include <vector>; 18 ; 19#include ""Math/TRandomEngine.h""; 20 ; 21 ; 22// struct rng_state_st; /// forward declare generator state; 23 ; 24// typedef struct rng_state_st rng_state_t;; 25 ; 26// namespace mixmax {; 27// template<int Ndim>; 28// class mixmax_engine;; 29// }; 30 ; 31namespace ROOT {; 32 ; 33 namespace Math {; 34 ; 35 template<int N>; 36 class MixMaxEngineImpl;; 37 ; 38/**; 39MixMaxEngine is a wrapper class for the MIXMAX Random number generator.; 40MIXMAX is a matrix-recursive random number generator introduced by; 41G. Savvidy.; 42 ; 43The real implementation of the generator, written in C, is in the mixmax.h and mixmax.cxx files.; 44This generator code is available also at hepforge: http://mixmax.hepforge.org; 45The MIXMAX code has been created and developed by Konstantin Savvidy and it is; 46released under GNU Lesser General Public License v3.; 47 ; 48This wrapper class provides 3 different variants of MIXMAX according to the template para extra parameter N.; 49The extra parameter, `SkipNumber`, is used to perform additional iterations of the generator before returning the random numbers.; 50For example, when `SkipNumber = 2`, the generator will have two extra iterations that will be discarder.; 51 ; 52 - MIXMAX with N = 240. This is a new version of the generator (version 2.0beta) described in the; 53 <a href=""http://dx.doi.org/10.1016/j.chaos.2016.05.003"">2016 paper</a> (3rd reference), with; 54 special number \f$s=487013230256099140\f$, \f$m=2^{51}+1\f$ and having a period of \f$10^{4389}\f$.; 55 ; 56 - MIXMAX with N = 17, from the 2.0 beta version with \f$s=0\f$ and \f$m=2^{36}+1\f$. The period of the; 57 generator is \f$10^{294}\f$.; 58 ; 59 - MIXMAX with N = 256 from the 1.0 version. The period is (for `SkipNumber=0`) \f$10^{4682}\f$.; 60 For this generator we recommend in ROOT using a default value of `SkipNumber=2, while for the; 61 previous two generators skipping is not n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MixMaxEngine_8h_source.html:1520,wrap,wrapper,1520,doc/master/MixMaxEngine_8h_source.html,https://root.cern,https://root.cern/doc/master/MixMaxEngine_8h_source.html,1,['wrap'],['wrapper']
Integrability,"ngs; static TTreeCloner::EClonerOptionskNone. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state; static TTreeCloner::ECloneMethodkDefault; static TTreeCloner::ECloneMethodkSortBasketsByBranch; static TTreeCloner::ECloneMethodkSortBasketsByEntry; static TTreeCloner::ECloneMethodkSortBasketsByOffset. Class Charts. Inheritance Chart:. TTreeCloner. Function documentation; TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone); Constructor. This object would transfer the data from; 'from' to 'to' using the method indicated in method. The value of the parameter 'method' determines in which; order the branches' baskets are written to the output file. When a TTree is filled the data is stored in the individual; branches' basket. Each basket is written individually to; the disk as soon as it is full. In consequence the baskets; of branches that contain 'large' data chunk are written to; the disk more often. There is currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. When using SortBasketsByOffset the baskets are written in; the output file in the same order as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCloner.html:2238,message,message,2238,root/html602/TTreeCloner.html,https://root.cern,https://root.cern/root/html602/TTreeCloner.html,1,['message'],['message']
Integrability,"ngs; static TTreeCloner::EClonerOptionskNone. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state; static TTreeCloner::ECloneMethodkDefault; static TTreeCloner::ECloneMethodkSortBasketsByBranch; static TTreeCloner::ECloneMethodkSortBasketsByEntry; static TTreeCloner::ECloneMethodkSortBasketsByOffset. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone); Constructor. This object would transfer the data from; 'from' to 'to' using the method indicated in method. The value of the parameter 'method' determines in which; order the branches' baskets are written to the output file. When a TTree is filled the data is stored in the individual; branches' basket. Each basket is written individually to; the disk as soon as it is full. In consequence the baskets; of branches that contain 'large' data chunk are written to; the disk more often. There is currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. When using SortBasketsByOffset the baskets are written in; the output file i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCloner.html:2214,message,message,2214,root/html604/TTreeCloner.html,https://root.cern,https://root.cern/root/html604/TTreeCloner.html,1,['message'],['message']
Integrability,"ngularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17957,integrat,integration,17957,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Integrability,"ng fHost;  ; Int_t fPort;  ; TString fUser;  . Additional Inherited Members;  Public Types inherited from TSystem; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TSystem; static const char * StripOffProto (const char *path, const char *proto);  Strip off protocol string from specified path. ;  . #include <TNetFile.h>. Inheritance diagram for TNetSystem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TNetSystem() [1/3]. TNetSystem::TNetSystem ; (; const TNetSystem & ; ). privatedelete . ◆ TNetSystem() [2/3]. TNetSystem::TNetSystem ; (; Bool_t ; ftpowner = kTRUE). Create helper class that allows directory access via rootd. ; Use ftpowner = TRUE (default) if this instance is responsible for cleaning of the underlying TFTP connection; this allows to have control on the order of the final cleaning. ; Definition at line 798 of file TNetFile.cxx. ◆ TNetSystem() [3/3]. TNetSystem::TNetSystem ; (; const char * ; url, . Bool_t ; ftpowner = kTRUE . ). Create helper class that allows directory access via rootd. ; Use ftpowner = TRUE (default) if this instanc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetSystem.html:34093,protocol,protocol,34093,doc/master/classTNetSystem.html,https://root.cern,https://root.cern/doc/master/classTNetSystem.html,1,['protocol'],['protocol']
Integrability,"nheritance. TClass * GetBaseClass(const TClass* base); Return pointer to the base class ""cl"". Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClass.html:26422,wrap,wrapper,26422,root/html528/TClass.html,https://root.cern,https://root.cern/root/html528/TClass.html,4,['wrap'],['wrapper']
Integrability,"nheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2010-11-11 15:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofServ.html:18324,message,message,18324,root/html528/TXProofServ.html,https://root.cern,https://root.cern/root/html528/TXProofServ.html,1,['message'],['message']
Integrability,"nheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofServ.html:18511,message,message,18511,root/html530/TXProofServ.html,https://root.cern,https://root.cern/root/html530/TXProofServ.html,1,['message'],['message']
Integrability,"nheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2011-12-02 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXProofServ.html:18511,message,message,18511,root/html532/TXProofServ.html,https://root.cern,https://root.cern/root/html532/TXProofServ.html,1,['message'],['message']
Integrability,"nherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2153,interface,interface,2153,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,1,['interface'],['interface']
Integrability,"nherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooNumRunningInt; std::string _binningName;  Name of binning to be used for cache histogram. ;  ; RooRealProxy func;  Proxy to functions whose running integral is calculated. ;  ; RooRealProxy x;  Integrated observable. ;  ;  Protected Attributes inherited from RooAbsCachedReal; std::map< Int_t, std::pair< const RooArgSet *, const RooArgSet * > > _anaIntMap;  ! Map for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; Int_t _ipOrder;  Interpolation order for cache histograms. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumCdf.html:61275,integrat,integration,61275,doc/master/classRooNumCdf.html,https://root.cern,https://root.cern/doc/master/classRooNumCdf.html,1,['integrat'],['integration']
Integrability,"nherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Types; enum  IntOperMode { Hybrid; , Analytic; , PassThrough; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; RooArgSet const * actualFuncNormSet () const;  ; void autoSelectDirtyMode ();  Set appropriate cache operation mode for integral depending on cache operation mode of server objects. ;  ; double evaluate () const override;  Perform the integration and return the result. ;  ; bool initNumIntegrator () const;  (Re)Initialize numerical integration engine if necessary. ;  ; virtual double integrate () const;  Perform hybrid numerical/analytical integration over all real-valued dependents. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if current value is valid. ;  ; virtual double jacobianProduct () const;  Return product of jacobian terms originating from analytical integration. ;  ; const RooArgSet & parameters () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Intercept server redirects and reconfigure internal object accordingly. ;  ; virtual double sum () const;  Perform summation of list of category dependents to be integrated. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:49922,integrat,integration,49922,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integration']
Integrability,"nhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction4Binding_double_double_double_double_int_.html:35756,integrat,integrator,35756,root/html534/RooCFunction4Binding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html534/RooCFunction4Binding_double_double_double_double_int_.html,1,['integrat'],['integrator']
Integrability,"nim.gif++"");; }; }; }. TImage::EImageFileTypes GetFileType(const char* ext); Return file type depending on specified extension.; Protected method. void MapFileTypes(TImage::EImageFileTypes& type, UInt_t& astype, Bool_t toas = kTRUE); Map file type to/from AfterImage types.; Protected method. void MapQuality(TAttImage::EImageQuality& quality, UInt_t& asquality, Bool_t toas = kTRUE); Map quality to/from AfterImage quality.; Protected method. void SetImage(const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette = 0); Deletes the old image and creates a new image depending on the values; of imageData. The size of the image is width X height.; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TArrayD &imageData, UInt_t width, TImagePalette *palette); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TVectorD &imageData, UInt_t width, TImagePalette *palette); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void FromPad(TVirtualPad* pad, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Create an image from the given pad, afterwards this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImage.html:23457,depend,depending,23457,root/html526/TASImage.html,https://root.cern,https://root.cern/root/html526/TASImage.html,1,['depend'],['depending']
Integrability,nimal Float_t copy of TVector3 used to represent points and momenta (also used in VSD).; TEveVector4 Float four-vector.; TEveViewer Reve representation of TGLViewer.; TEveViewerList List of Viewers providing common operations on TEveViewer collections.; TEveViewerListEditor GUI editor for TEveViewerList.; TEveWindow Abstract base-class for eve-windows.; TEveWindowEditor GUI editor for TEveWindow.; TEveWindowFrame Eve-window containing any TGFrame.; TEveWindowManager Manager for EVE windows.; TEveWindowPack Eve-window containing a TGPack.; TEveWindowSlot An unoccupied eve-window slot.; TEveWindowTab Eve-window containing a TGTab.; TEventIter Event iterator used by TProofPlayer's; TEventIterObj Event iterator for objects; TEventIterTree Event iterator for Trees; TEventIterUnit Event iterator for objects; TEventList A list of selected entries in a TTree.; TExMap Map with external hash; TExMapIter TExMap iterator; TExec To execute a CINT command; TF1 The Parametric 1-D function; TF12 Projection of a TF2 along x or y; TF1Editor user interface for TF1 objects; TF2 The Parametric 2-D function; TF2GL GL renderer for TF2 and TF3.; TF3 The Parametric 3-D function; TFFTComplex ; TFFTComplexReal ; TFFTReal ; TFFTRealComplex ; TFTP File Transfer Protocol class using rootd; TFcnAdapter wrapper class implementing the Minuit2 interface for TMinuit2-like objective functions; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMerger File copying and merging services; TFileSet TDataSet class to read the native file system directory structure in; TFileStager ABC,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:65424,interface,interface,65424,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['interface'],['interface']
Integrability,"nimization); Simplex; Minimize (a combination of Simplex + Migrad); Minimize; Scan; Seek. Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); Migrad (default); Simplex; Minimize; Fumili (Fumili2); Scan. Fumili (class TFumiliMinimizer); GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with mathmore support; BFGS2 (Default); BFGS; ConjugateFR; ConjugatePR; SteepestDescent. GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built mathmore support; GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with mathmore support; Genetic (class ROOT::Math::GeneticMinimizer); RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with r support; BFGS (default); L-BFGS-S; Nelder-Mead; CG; and more methods, see the Details in the documentation of the function optimix of the optmix R package. The Minimizer class provides the interface to perform the minimization including; In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface ROOT::Math::IBaseFunctionMultiDim. If the function provides gradient calculation (e.g. implementing the ROOT::Math::IGradientFunctionMultiDim interface) the gradient will be used by the Minimizer class, when needed. There are convenient classes for the users to wrap their own functions in this required interface for minimization. These are the ROOT::Math::Functor class and the ROOT::Math::GradFunctor class for wrapping functions providing both evaluation and gradient. Some methods, like Fumili, Fumili2 and GSLMultiFit are specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition the ROOT::Math::FitMethodFunction interface.; The interface for setting the initial values for the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:1964,interface,interface,1964,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,2,['interface'],['interface']
Integrability,"nimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; already defined prior to calling this routine. If fNmin > 0 then the total number of (training) events found in; the cell during the exploration is stored in the cell. This; information is used withing PeekMax() to avoid splitting cells; which contain less than fNmin events. void DTExplore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to the decision tree logic. The separation; set by the 'fDTSeparation' option is used (see also; GetSeparation()). The optimal division point for eventual future cell division is; determined/recorded. Note that links to parents and initial; volume = 1/2 parent has to be already defined prior to calling; this routine. Note, that according to the decision tree logic, a cell is only; split, if the number of (unweighted) events in each dautghter; cell is greater than fNmin. Float_t GetSeparation(Float_t s, Float_t b); Calculate the separation depending on 'fDTSeparation' for the; given number of signal and background events 's', 'b'. Note,; that if (s+b) < 0 or s < 0 or b < 0 than the return value is 0. void Varedu(Double_t* , Int_t& , Double_t& , Double_t& ); Internal subrogram used by Create.; In determines the best edge candidate and the position of the cell division plane; in case of the variance reduction for future cell division,; using results of the MC exploration run stored in fHistEdg. void MakeAlpha(); Internal subrogram used by Create.; Provides random vector Alpha 0< Alpha(i) < 1. Long_t PeekMax(); Internal subprogram used by Create. It finds cell with maximal; driver integral for the purpose of the division. This function; is ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:14056,rout,routine,14056,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['rout'],['routine']
Integrability,"ning sample, dependent quantity. ; Definition at line 28 of file TMultiDimFit.h. ◆ fResiduals. TVectorD TMultiDimFit::fResiduals. protected . Vector of the final residuals. ; Definition at line 72 of file TMultiDimFit.h. ◆ fRMS. Double_t TMultiDimFit::fRMS. protected . Root mean square of fit. ; Definition at line 84 of file TMultiDimFit.h. ◆ fSampleSize. Int_t TMultiDimFit::fSampleSize. protected . Size of training sample. ; Definition at line 42 of file TMultiDimFit.h. ◆ fShowCorrelation. Bool_t TMultiDimFit::fShowCorrelation. protected . print correlation matrix ; Definition at line 104 of file TMultiDimFit.h. ◆ fSqError. TVectorD TMultiDimFit::fSqError. protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sampl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:68489,depend,dependent,68489,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['depend'],['dependent']
Integrability,"ning the matrix dimension, number of rows, columns and size = rows*columns) More...;  ; — Typedefs —; typedef T value_type;  contained scalar type ;  ; typedef R rep_type;  storage representation type ;  ; typedef T * iterator;  STL iterator interface. ;  ; typedef const T * const_iterator;  STL const_iterator interface. ;  . Public Member Functions; — Constructors and Assignment —;  SMatrix ();  Default constructor: ;  ;  SMatrix (SMatrixNoInit);  construct from without initialization ;  ;  SMatrix (SMatrixIdentity);  construct from an identity matrix ;  ;  SMatrix (const SMatrix< T, D1, D2, R > &rhs);  copy constructor (from a matrix of the same representation ;  ; template<class R2 > ;  SMatrix (const SMatrix< T, D1, D2, R2 > &rhs);  construct from a matrix with different representation. ;  ; template<class A , class R2 > ;  SMatrix (const Expr< A, T, D1, D2, R2 > &rhs);  Construct from an expression. ;  ; template<class InputIterator > ;  SMatrix (InputIterator begin, InputIterator end, bool triang=false, bool lower=true);  Constructor with STL iterator interface. ;  ; template<class InputIterator > ;  SMatrix (InputIterator begin, unsigned int size, bool triang=false, bool lower=true);  Constructor with STL iterator interface. ;  ;  SMatrix (const SVector< T, D1 *(D2+1)/2 > &v, bool lower=true);  constructor of a symmetrix a matrix from a SVector containing the lower (upper) triangular part. ;  ;  SMatrix (const T &rhs);  Construct from a scalar value (only for size 1 matrices) ;  ; template<class M > ; SMatrix< T, D1, D2, R > & operator= (const M &rhs);  Assign from another compatible matrix. ;  ; SMatrix< T, D1, D2, R > & operator= (const SMatrix< T, D1, D2, R > &rhs);  ; template<class A , class R2 > ; SMatrix< T, D1, D2, R > & operator= (const Expr< A, T, D1, D2, R2 > &rhs);  Assign from a matrix expression. ;  ; SMatrix< T, D1, D2, R > & operator= (SMatrixIdentity);  Assign from an identity matrix. ;  ; SMatrix< T, D1, D2, R > & operator= (const T &rhs);  A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html:2279,interface,interface,2279,doc/master/classROOT_1_1Math_1_1SMatrix.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html,1,['interface'],['interface']
Integrability,"ning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidAddLogFile(TProofQueryResult* pq). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStopwatchfComputemeasures time spend processing a query on the master; Int_tfDrawQueriesnumber of draw queries processed; Int_tfKeptQueriesnumber of queries fully in memory and in dir; TProofLockPath*fLockdir locker; FILE*fLogFilelog file; TList*fPreviousQuerieslist of TProofQueryResult objects from previous sections; TList*fQuerieslist of TProofQueryResult objects; TStringfQueryDirdirectory containing query results and status; Int_tfSeqNumsequential number of last processed query; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the session. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddLogFile(TProofQueryResult* pq). TQueryResultManager(const char* qdir, const char* stag, const char* sdir, TProofLockPath* lck, FILE* logfile = 0). const char * QueryDir() const; { return fQueryDir.Data(); }. Int_t SeqNum() const; { return fSeqNum; }. Int_t DrawQueries() const; { return fDrawQueries; }. Int_t KeptQueries() const; { return fKeptQueries; }. TList * Queries() const; { return fQueries; }. TList * PreviousQueries() const; { return fPreviousQueries; }. void IncrementSeqNum(); { fSeqNum++; }. void IncrementDrawQueries(); { fDrawQueries++; }. Int_t ApplyMaxQueries(Int_t mxq). Int_t CleanupQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQueryResultManager.html:6658,depend,dependent,6658,root/html528/TQueryResultManager.html,https://root.cern,https://root.cern/root/html528/TQueryResultManager.html,4,['depend'],['dependent']
Integrability,"ning: May set the current tree!. void InvalidateCurrentTree(); Set the TTree to be reloaded as soon as possible. In particular this; is needed when adding a Friend. Int_t LoadBaskets(Long64_t maxmemory); -- Dummy function.; It could be implemented and load all baskets of all trees in the chain.; For the time being use TChain::Merge and TTree::LoadBasket; on the resulting tree. Long64_t LoadTree(Long64_t entry); -- Find the tree which contains entry, and set it as the current tree. Returns the entry number in that tree. The input argument entry is the entry serial number in the whole chain. In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number of less than zero or too large for the chain.; or too large for the large TTree.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or; the TTree is missing from the file. Note: This is the only routine which sets the value of fTree to; a non-zero pointer. void Lookup(Bool_t force = kFALSE); Check / locate the files in the chain.; By default only the files not yet looked up are checked.; Use force = kTRUE to check / re-check every file. void Loop(Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); -- Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED). void ls(Option_t* option = """") const; -- List the chain. Long64_t Merge(const char* name, Option_t* option = """"); Merge all the entries in the chain into a new tree in a new file. See important note in the following function Merge(). If the chain is expecting the input tree inside a directory,; this directory is NOT created by this routine. So in a case where we have:. TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");. The resulting file will have not subdirectory. To recreate; the directory structure do:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChain.html:42521,rout,routine,42521,root/html534/TChain.html,https://root.cern,https://root.cern/root/html534/TChain.html,3,['rout'],['routine']
Integrability,"niqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::SysErrorvirtual void SysError(const char *method, const char *msgfmt,...) constIssue system error message.Definition TObject.cxx:1007; TObject::IsOnHeapR__ALWAYS_INLINE Bool_t IsOnHeap() constDefinition TObject.h:152; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPMERegexpWrapper for PCRE library (Perl Compatible Regular Expressions).Definition TPRegexp.h:97; TPMERegexp::MatchInt_t Match(const TString &s, UInt_t start=0)Runs a match on s against the regex 'this' was created with.Definition TPRegexp.cxx:797; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TProcessI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:238673,message,message,238673,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['message'],['message']
Integrability,"nitial arguments; RooArgSet s(a, b);; ; // At any time objects can be added with add(); s.add(e);; ; // Add up to 9 additional arguments in one call; s.add(RooArgSet(c, d));; ; // Sets can contain any type of RooAbsArg, also pdf and functions; s.add(g);; ; // Remove element d; s.remove(d);; ; // A c c e s s i n g R o o A r g S e t c o n t e n t s; // -------------------------------------------------------; ; // You can look up objects by name; RooAbsArg *aptr = s.find(""a"");; ; // Construct a subset by name; RooArgSet *subset1 = (RooArgSet *)s.selectByName(""a,b,c"");; ; // Construct asubset by attribute; RooArgSet *subset2 = (RooArgSet *)s.selectByAttrib(""Constant"", true);; ; // Construct the subset of overlapping contents with another set; RooArgSet s1(a, b, c);; RooArgSet s2(c, d, e);; RooArgSet *subset3 = (RooArgSet *)s1.selectCommon(s2);; ; // O w n i n g R o o A r g S e t s; // ---------------------------------; ; // Create a RooArgSet that owns its components; // A set either owns all of its components or none,; // so once addOwned() is used, add() can no longer be; // used and will result in an error message; ; RooRealVar *ac = (RooRealVar *)a.clone(""a"");; RooRealVar *bc = (RooRealVar *)b.clone(""b"");; RooRealVar *cc = (RooRealVar *)c.clone(""c"");; ; RooArgSet s3;; s3.addOwned(RooArgSet(*ac, *bc, *cc));; ; // Another possibility is to add an owned clone; // of an object instead of the original; s3.addClone(RooArgSet(d, e, g));; ; // A clone of a owning set is non-owning and its; // contents is owned by the originating owning set; RooArgSet *sclone = (RooArgSet *)s3.Clone(""sclone"");; ; // To make a clone of a set and its contents use; // the snapshot method; RooArgSet *sclone2 = (RooArgSet *)s3.snapshot();; ; // If a set contains function objects, only the head node; // is cloned in a snapshot. To make a snapshot of all; // servers of a function object do as follows. The result; // of a RooArgSet snapshot with deepCloning option is a set; // of cloned objects, and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf508__listsetmanip_8C.html:2469,message,message,2469,doc/master/rf508__listsetmanip_8C.html,https://root.cern,https://root.cern/doc/master/rf508__listsetmanip_8C.html,1,['message'],['message']
Integrability,"nitialized(). int PyMethodBase::PyIsInitialized ; (; ). static . Check Python interpreter initialization status. ; ReturnsBoolean whether interpreter is initialized ; Definition at line 253 of file PyMethodBase.cxx. ◆ PyRunString() [1/2]. void PyMethodBase::PyRunString ; (; TString ; code, . PyObject * ; globalNS, . PyObject * ; localNS . ). static . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]globalNSGlobal Namespace for Python Session ; [in]localNSLocal Namespace for Python Session. Overloaded static Helper function to run python code from string and throw runtime error if the Python session is unable to execute the code ; Definition at line 347 of file PyMethodBase.cxx. ◆ PyRunString() [2/2]. void PyMethodBase::PyRunString ; (; TString ; code, . TString ; errorMessage = ""Failed to run python code"", . int ; start = 256 . ). protected . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]errorMessageError message which shall be shown if the execution fails ; [in]startStart symbol. Helper function to run python code from string in local namespace with error handling start defines the start symbol defined in PyRun_String (Py_eval_input, Py_single_input, Py_file_input) ; Definition at line 325 of file PyMethodBase.cxx. ◆ PyStringAsString(). const char * PyMethodBase::PyStringAsString ; (; PyObject * ; string). static . Returns const char* from Python string in PyObject. ; Parameters. [in]stringPython String object . ReturnsString representation in const char* ; Definition at line 362 of file PyMethodBase.cxx. ◆ ReadModelFromFile(). virtual void TMVA::PyMethodBase::ReadModelFromFile ; (; ). protectedpure virtual . Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, and TMVA::MethodPyTorch. ◆ ReadWeightsFromStream() [1/2]. virtual void TMVA::PyMethodBase::ReadWeightsFromStream ; (; std::istream & ; ). protectedpure virtual . Implements TMVA::Method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:36171,message,message,36171,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['message'],['message']
Integrability,"nition Compression.h:61; ROOT::RCompressionSetting::ELevel::EValuesEValuesNote: this is only temporarily a struct and will become a enum class hence the name convention used.Definition Compression.h:63; ROOT::RCompressionSetting::ELevel::kInherit@ kInheritSome objects use this value to denote that the compression algorithm should be inherited from the par...Definition Compression.h:66; ROOT::RCompressionSetting::ELevel::kUseMin@ kUseMinCompression level reserved when we are not sure what to use (1 is for the fastest compression)Definition Compression.h:70; ROOT::RCompressionSetting::ELevel::kDefaultOld@ kDefaultOldCompression level reserved for old ROOT compression algorithm.Definition Compression.h:78; ROOT::RCompressionSetting::ELevel::kUncompressed@ kUncompressedCompression level reserved for ""uncompressed state"".Definition Compression.h:68; ROOT::RCompressionSetting::ELevel::kDefaultLZMA@ kDefaultLZMACompression level reserved for LZMA compression algorithm (slowest compression with smallest files)Definition Compression.h:80; ROOT::RCompressionSetting::ELevel::kDefaultZSTD@ kDefaultZSTDCompression level reserved for ZSTD compression algorithm (trade-off between file ratio/decompression...Definition Compression.h:76; ROOT::RCompressionSetting::ELevel::kDefaultZLIB@ kDefaultZLIBCompression level reserved for ZLIB compression algorithm (fastest compression)Definition Compression.h:72; ROOT::RCompressionSetting::ELevel::kDefaultLZ4@ kDefaultLZ4Compression level reserved for LZ4 compression algorithm (trade-off between file ratio/decompression ...Definition Compression.h:74; ROOT::RCompressionSettingThe global settings depend on a global variable named R__ZipMode which can be modified by a global fu...Definition Compression.h:45; ROOT::RCompressionSetting::AlgorithmToStringstatic std::string AlgorithmToString(EAlgorithm::EValues algorithm). corezipincCompression.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Compression_8h_source.html:11303,depend,depend,11303,doc/v632/Compression_8h_source.html,https://root.cern,https://root.cern/doc/v632/Compression_8h_source.html,1,['depend'],['depend']
Integrability,"nition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::BinsRooCmdArg Bins(Int_t nbin)Definition RooGlobalFunc.cxx:547; RooFit::ProjectionRangeRooCmdArg ProjectionRange(const char *rangeName)Definition RooGlobalFunc.cxx:268; RooFit::CutRangeRooCmdArg CutRange(const char *rangeName)Definition RooGlobalFunc.cxx:360; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf311_rangeplotDefinition rf311_rangeplot.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y,z); [#1] INFO:Eval -- RooRealVar::setRange(y) new range named 'sigRegion' created with bounds [-1,1]; [#1] INFO:Eval -- RooRealVar::setRange(z) new range named 'sigRegion' created with bounds [-1,1]; [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 1692 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y,z) in range sigRegion; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf311_rangeplot.C. tutorialsroofitrf311_rangeplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf311__rangeplot_8C.html:5345,integrat,integrates,5345,doc/master/rf311__rangeplot_8C.html,https://root.cern,https://root.cern/doc/master/rf311__rangeplot_8C.html,2,['integrat'],['integrates']
Integrability,"nition TGraph.cxx:2397; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TIterDefinition TCollection.h:235; TIter::Resetvoid Reset()Definition TCollection.h:254; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TPointDefinition TPoint.h:31; TPoint::fYSCoord_t fYDefinition TPoint.h:36; TPoint::fXSCoord_t fXDefinition TPoint.h:35; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TPolyMarker3D::SetNextPointvirtual Int_t SetNextPoint(Double_t x, Double_t y, Double_t z)Set point following LastPoint to x, y, z.Definition TPolyMarker3D.cxx:523; TPolyMarker3D::Drawvoid Draw(Option_t *option="""") overrideDraws 3-D polymarker with its current attributes.Definition TPolyMarker3D.cxx:242; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:113706,message,message,113706,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['message'],['message']
Integrability,"nition TMinuit.cxx:800; TMinuit::fFIXPyyDouble_t * fFIXPyyDefinition TMinuit.h:102; TMinuit::fStatusInt_t fStatusDefinition TMinuit.h:154; TMinuit::fGstepDouble_t * fGstepDefinition TMinuit.h:83; TMinuit::fXtDouble_t * fXtDefinition TMinuit.h:76; TMinuit::mnmigrvirtual void mnmigr()Performs a local function minimization.Definition TMinuit.cxx:5048; TMinuit::fIstratInt_t fIstratDefinition TMinuit.h:150; TMinuit::fCwordTString fCwordDefinition TMinuit.h:169; TMinuit::fPlotTObject * fPlotDefinition TMinuit.h:176; TMinuit::fPSDFsDouble_t * fPSDFsDefinition TMinuit.h:116; TMinuit::fMIGRgsDouble_t * fMIGRgsDefinition TMinuit.h:110; TMinuit::mnematvirtual void mnemat(Double_t *emat, Int_t ndim)Calculates the external error matrix from the internal matrix.Definition TMinuit.cxx:2501; TMinuit::mnrn15virtual void mnrn15(Double_t &val, Int_t &inseed)This is a super-portable random number generator.Definition TMinuit.cxx:6619; TMinuit::mnerrsvirtual void mnerrs(Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc)Utility routine to get MINOS errors.Definition TMinuit.cxx:2578; TMinuit::Classstatic TClass * Class(); TMinuit::fMIGRstepDouble_t * fMIGRstepDefinition TMinuit.h:109; TMinuit::fEpsiDouble_t fEpsiDefinition TMinuit.h:53; TMinuit::fWord7Double_t * fWord7Definition TMinuit.h:96; TMinuit::mnexinvirtual void mnexin(Double_t *pint)Transforms the external parameter values U to internal values.Definition TMinuit.cxx:3151; TMinuit::fCovmesTString fCovmes[4]Definition TMinuit.h:172; TMinuit::fIstkwrInt_t fIstkwr[10]Definition TMinuit.h:139; TMinuit::fNparInt_t fNparDefinition TMinuit.h:41; TMinuit::mnexcmvirtual void mnexcm(const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg)Interprets a command and takes appropriate action.Definition TMinuit.cxx:2664; TMinuit::fPbarDouble_t * fPbarDefinition TMinuit.h:94; TMinuit::mnhelpvirtual void mnhelp(TString comd)HELP routine for MINUIT interactive commands.Definition TMinuit.cxx:3439; TMinuit::Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:269083,rout,routine,269083,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['rout'],['routine']
Integrability,"nition TMinuit.cxx:800; TMinuit::fFIXPyyDouble_t * fFIXPyyDefinition TMinuit.h:102; TMinuit::fStatusInt_t fStatusDefinition TMinuit.h:154; TMinuit::fGstepDouble_t * fGstepDefinition TMinuit.h:83; TMinuit::fXtDouble_t * fXtDefinition TMinuit.h:76; TMinuit::mnmigrvirtual void mnmigr()Performs a local function minimization.Definition TMinuit.cxx:5048; TMinuit::fIstratInt_t fIstratDefinition TMinuit.h:150; TMinuit::fCwordTString fCwordDefinition TMinuit.h:169; TMinuit::fPlotTObject * fPlotDefinition TMinuit.h:176; TMinuit::fPSDFsDouble_t * fPSDFsDefinition TMinuit.h:116; TMinuit::fMIGRgsDouble_t * fMIGRgsDefinition TMinuit.h:110; TMinuit::mnematvirtual void mnemat(Double_t *emat, Int_t ndim)Calculates the external error matrix from the internal matrix.Definition TMinuit.cxx:2501; TMinuit::mnrn15virtual void mnrn15(Double_t &val, Int_t &inseed)This is a super-portable random number generator.Definition TMinuit.cxx:6619; TMinuit::mnerrsvirtual void mnerrs(Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc)Utility routine to get MINOS errors.Definition TMinuit.cxx:2578; TMinuit::fMIGRstepDouble_t * fMIGRstepDefinition TMinuit.h:109; TMinuit::fEpsiDouble_t fEpsiDefinition TMinuit.h:53; TMinuit::fWord7Double_t * fWord7Definition TMinuit.h:96; TMinuit::mnexinvirtual void mnexin(Double_t *pint)Transforms the external parameter values U to internal values.Definition TMinuit.cxx:3151; TMinuit::fCovmesTString fCovmes[4]Definition TMinuit.h:172; TMinuit::fIstkwrInt_t fIstkwr[10]Definition TMinuit.h:139; TMinuit::fNparInt_t fNparDefinition TMinuit.h:41; TMinuit::mnexcmvirtual void mnexcm(const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg)Interprets a command and takes appropriate action.Definition TMinuit.cxx:2664; TMinuit::fPbarDouble_t * fPbarDefinition TMinuit.h:94; TMinuit::mnhelpvirtual void mnhelp(TString comd)HELP routine for MINUIT interactive commands.Definition TMinuit.cxx:3439; TMinuit::SetPrintLevelvirtual Int_t SetPrintLevel(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8h_source.html:27231,rout,routine,27231,doc/master/TMinuit_8h_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8h_source.html,1,['rout'],['routine']
Integrability,"nition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TProfileHelper::LabelsInflatestatic void LabelsInflate(T *p, Option_t *)Definition TProfileHelper.h:626; TProfileHelper::GetBinErrorstatic Double_t GetBinError(T *p, Int_t bin)Definition TProfileHelper.h:704; TProfileHelper::ExtendAxisstatic T * ExtendAxis(T *p, Double_t x, TAxis *axis)Definition TProfileHelper.h:430; TProfileHelper::Sumw2static void Sumw2(T *p, Bool_t flag)Definition TProfileHelper.h:529; TProfileHelper::SetBinEntriesstatic void SetBinEntries(T *p, Int_t bin, Double_t w)Definition TProfileHelper.h:768; TProfileHelper::Scalestatic void Scale(T *p, Double_t c1, Option_t *option)Definition TProfileHelper.h:512; TProfileHelper::SetErrorOptionstatic void SetErrorOption(T *p, Option_t *opt)Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:77986,message,message,77986,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['message'],['message']
Integrability,"nition at line 328 of file TTreeProcessorMT.cxx. ◆ GetTasksPerWorkerHint(). unsigned int TTreeProcessorMT::GetTasksPerWorkerHint ; (; ). static . Retrieve the current value for the desired number of tasks per worker. ; ReturnsThe desired number of tasks to be created per worker. TTreeProcessorMT uses this value as an hint. ; Definition at line 528 of file TTreeProcessorMT.cxx. ◆ Process(). void TTreeProcessorMT::Process ; (; std::function< void(TTreeReader &)> ; func). Process the entries of a TTree in parallel. ; The user-provided function receives a TTreeReader which can be used to iterate on a subrange of entries TTreeProcessorMT::Process([](TTreeReader& readerSubRange) {; // Select branches to read; while (readerSubRange.Next()) {; // Use content of current entry; }; });; ROOT::TTreeProcessorMT::Processvoid Process(std::function< void(TTreeReader &)> func)Process the entries of a TTree in parallel.Definition TTreeProcessorMT.cxx:454; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; TTreeReader::Nextbool Next()Move to the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:209; The user needs to be aware that each of the subranges can potentially be processed in parallel. This means that the code of the user function should be thread safe.; Parameters. [in]funcUser-defined function that processes a subrange of entries . Definition at line 454 of file TTreeProcessorMT.cxx. ◆ SetTasksPerWorkerHint(). void TTreeProcessorMT::SetTasksPerWorkerHint ; (; unsigned int ; tasksPerWorkerHint). static . Set the hint for the desired number of tasks created per worker. ; Parameters. [in]tasksPerWorkerHintDesired number of tasks per worker. This allows to create a reasonable number of tasks even if any of the processed files features a bad clustering, for example with a lot of entries and just a few entries per cluster, or to limit the number of tasks spawned when ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:6232,interface,interface,6232,doc/v632/classROOT_1_1TTreeProcessorMT.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html,1,['interface'],['interface']
Integrability,"nition at line 330 of file TTreeProcessorMT.cxx. ◆ GetTasksPerWorkerHint(). unsigned int TTreeProcessorMT::GetTasksPerWorkerHint ; (; ). static . Retrieve the current value for the desired number of tasks per worker. ; ReturnsThe desired number of tasks to be created per worker. TTreeProcessorMT uses this value as an hint. ; Definition at line 535 of file TTreeProcessorMT.cxx. ◆ Process(). void TTreeProcessorMT::Process ; (; std::function< void(TTreeReader &)> ; func). Process the entries of a TTree in parallel. ; The user-provided function receives a TTreeReader which can be used to iterate on a subrange of entries TTreeProcessorMT::Process([](TTreeReader& readerSubRange) {; // Select branches to read; while (readerSubRange.Next()) {; // Use content of current entry; }; });; ROOT::TTreeProcessorMT::Processvoid Process(std::function< void(TTreeReader &)> func)Process the entries of a TTree in parallel.Definition TTreeProcessorMT.cxx:460; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; TTreeReader::Nextbool Next()Move to the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:216; The user needs to be aware that each of the subranges can potentially be processed in parallel. This means that the code of the user function should be thread safe.; Parameters. [in]funcUser-defined function that processes a subrange of entries . Definition at line 460 of file TTreeProcessorMT.cxx. ◆ SetTasksPerWorkerHint(). void TTreeProcessorMT::SetTasksPerWorkerHint ; (; unsigned int ; tasksPerWorkerHint). static . Set the hint for the desired number of tasks created per worker. ; Parameters. [in]tasksPerWorkerHintDesired number of tasks per worker. This allows to create a reasonable number of tasks even if any of the processed files features a bad clustering, for example with a lot of entries and just a few entries per cluster, or to limit the number of tasks spawned when ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMT.html:6599,interface,interface,6599,doc/master/classROOT_1_1TTreeProcessorMT.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMT.html,1,['interface'],['interface']
Integrability,"nition at line 3718 of file TGCocoa.mm. ◆ GetRegionBox(). void TGCocoa::GetRegionBox ; (; Region_t ; reg, . Rectangle_t * ; rect . ). overridevirtual . Returns smallest enclosing rectangle. ; Reimplemented from TVirtualX.; Definition at line 4386 of file TGCocoa.mm. ◆ GetRGB(). void TGCocoa::GetRGB ; (; Int_t ; index, . Float_t & ; r, . Float_t & ; g, . Float_t & ; b . ). overridevirtual . Returns RGB values for color ""index"". ; Reimplemented from TVirtualX.; Definition at line 2964 of file TGCocoa.mm. ◆ GetScreen(). Int_t TGCocoa::GetScreen ; (; ); const. overridevirtual . Returns screen number. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 544 of file TGCocoa.mm. ◆ GetVisual(). Visual_t TGCocoa::GetVisual ; (; ); const. overridevirtual . Returns handle to visual. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 537 of file TGCocoa.mm. ◆ GetWindowAttributes(). void TGCocoa::GetWindowAttributes ; (; Window_t ; id, . WindowAttributes_t & ; attr . ). overridevirtual . The WindowAttributes_t structure is set to default. ; Reimplemented from TVirtualX.; Definition at line 992 of file TGCocoa.mm. ◆ GetWindowID(). Window_t TGCocoa::GetWindowID ; (; Int_t ; wid). overridevirtual . Returns the X11 window identifier. ; Parameters. [in]widworkstation identifier (input) . Reimplemented from TVirtualX.; Definition at line 665 of file TGCocoa.mm. ◆ GetWindowSize(). void TGCocoa::GetWindowSize ; (; Drawable_t ; id, . Int_t & ; x, . Int_t & ; y, . UInt_t & ; w, . UInt_t & ; h . ). overridevirtual . Returns the location and the size of window ""id"". ; Parameters. [in]iddrawable identifier ; [in]x,ycoordinates of the upper-left outer corner relative to the parent window's origin ; [in]w,hthe inside size of the window, not including the border . Reimplem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:89003,interface,interface,89003,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['interface'],['interface']
Integrability,"nition at line 562 of file TNetFile.cxx. ◆ Streamer(). void TNetFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile. ◆ StreamerNVirtual(). void TNetFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TNetFile.h. ◆ SysClose(). Int_t TNetFile::SysClose ; (; Int_t ; fd). overrideprotectedvirtual . Close currently open file. ; Reimplemented from TFile.; Definition at line 144 of file TNetFile.cxx. ◆ SysOpen(). Int_t TNetFile::SysOpen ; (; const char * ; pathname, . Int_t ; flags, . UInt_t ; mode . ). overrideprotectedvirtual . Open a remote file. Requires fOption to be set correctly. ; Reimplemented from TFile.; Definition at line 109 of file TNetFile.cxx. ◆ SysStat(). Int_t TNetFile::SysStat ; (; Int_t ; fd, . Long_t * ; id, . Long64_t * ; size, . Long_t * ; flags, . Long_t * ; modtime . ). overrideprotectedvirtual . Return file stat information. ; The interface and return value is identical to TSystem::GetPathInfo(). ; Reimplemented from TFile.; Definition at line 156 of file TNetFile.cxx. ◆ WriteBuffer(). Bool_t TNetFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). overridevirtual . Write specified byte range to remote file via rootd daemon. ; Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 488 of file TNetFile.cxx. Member Data Documentation. ◆ fEndpointUrl. TUrl TNetFile::fEndpointUrl. protected . Definition at line 37 of file TNetFile.h. ◆ fErrorCode. Int_t TNetFile::fErrorCode. protected . Definition at line 41 of file TNetFile.h. ◆ fNetopt. Int_t TNetFile::fNetopt. protected . Definition at line 42 of file TNetFile.h. ◆ fProtocol. Int_t TNetFile::fProtocol. protected . Definition at line 40 of file TNetFile.h. ◆ fSocket. TSocket* TNetFile::fSocket. protected . Definition at line 39 of file TNetFile.h. ◆ fUser. TString TNetFile::fUser. protected . Definition at line 38 of file TNetFile.h. Libraries for TNetFile:. [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:52035,interface,interface,52035,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['interface'],['interface']
Integrability,nition at line 80 of file ClassInfo.h. ◆ Log(). MsgLogger & TMVA::ClassInfo::Log ; (; ); const. inlineprivate . Definition at line 77 of file ClassInfo.h. ◆ SetCorrelationMatrix(). void TMVA::ClassInfo::SetCorrelationMatrix ; (; TMatrixD * ; matrix). inline . Definition at line 60 of file ClassInfo.h. ◆ SetCut(). void TMVA::ClassInfo::SetCut ; (; const TCut & ; cut). inline . Definition at line 58 of file ClassInfo.h. ◆ SetNumber(). void TMVA::ClassInfo::SetNumber ; (; const UInt_t ; index). inline . Definition at line 59 of file ClassInfo.h. ◆ SetWeight(). void TMVA::ClassInfo::SetWeight ; (; const TString & ; weight). inline . Definition at line 57 of file ClassInfo.h. ◆ Streamer(). virtual void TMVA::ClassInfo::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::ClassInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file ClassInfo.h. Member Data Documentation. ◆ fCorrMatrix. TMatrixD* TMVA::ClassInfo::fCorrMatrix. private . Correlation matrix for this class. ; Definition at line 74 of file ClassInfo.h. ◆ fCut. TCut TMVA::ClassInfo::fCut. private . pre-training cut for the class ; Definition at line 71 of file ClassInfo.h. ◆ fLogger. MsgLogger* TMVA::ClassInfo::fLogger. mutableprivate . ! message logger ; Definition at line 76 of file ClassInfo.h. ◆ fNumber. UInt_t TMVA::ClassInfo::fNumber. private . index in of this class in vectors ; Definition at line 72 of file ClassInfo.h. ◆ fWeight. TString TMVA::ClassInfo::fWeight. private . the input formula string that is the weight for the class ; Definition at line 70 of file ClassInfo.h. Libraries for TMVA::ClassInfo:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ClassInfo.h; tmva/tmva/src/ClassInfo.cxx. TMVAClassInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html:14961,message,message,14961,doc/master/classTMVA_1_1ClassInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html,1,['message'],['message']
Integrability,"nition at line 993 of file TASImage.cxx. ◆ SetImage() [3/5]. void TASImage::SetImage ; (; const TArrayD & ; imageData, . UInt_t ; width, . TImagePalette * ; palette = nullptr . ). overridevirtual . Delete the old image and creates a new image depending on the values of imageData. ; The size of the image is width X (imageData.fN / width). The color of each pixel depends on the imageData of the corresponding pixel. The palette is used to convert an image value into its color. If palette is not defined (palette = 0) a default palette is used. Any previously defined zooming is reset. ; Reimplemented from TImage.; Definition at line 1057 of file TASImage.cxx. ◆ SetImage() [4/5]. void TASImage::SetImage ; (; const TVectorD & ; imageData, . UInt_t ; width, . TImagePalette * ; palette = nullptr . ). overridevirtual . Delete the old image and creates a new image depending on the values of imageData. ; The size of the image is width X (imageData.fN / width). The color of each pixel depends on the imageData of the corresponding pixel. The palette is used to convert an image value into its color. If palette is not defined (palette = 0) a default palette is used. Any previously defined zooming is reset. ; Reimplemented from TImage.; Definition at line 1070 of file TASImage.cxx. ◆ SetImage() [5/5]. void TASImage::SetImage ; (; Pixmap_t ; pxm, . Pixmap_t ; mask = 0 . ). overridevirtual . Create image from pixmap. ; Reimplemented from TImage.; Definition at line 2365 of file TASImage.cxx. ◆ SetImageBuffer(). Bool_t TASImage::SetImageBuffer ; (; char ** ; buffer, . EImageFileTypes ; type = TImage::kPng . ). overridevirtual . Create image from compressed buffer. ; Supported formats:. PNG - by default; XPM - two options exist:; xpm as a single string (raw buffer). Such string is returned by GetImageBuffer method. For example: char *buf;; int sz;; im1->GetImageBuffer(&buf, &int, TImage::kXpm); /*raw buffer*&zwj;/; TImage *im2 = TImage::Create();; im2->SetImageBuffer(&buf, TImage::kXpm);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:74088,depend,depends,74088,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['depend'],['depends']
Integrability,"nize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidDrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. charfHotCharhot character; Int_tfHotPosposition of hot character; GContext_tfLastGCcontext used during last drawing; Int_tfOff1variable used during drawing (cache); Int_tfOff2variable used during drawing (cache). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHotString(const char* s); Create a hot string. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw a hot string and underline the hot character. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a hot string in a column with width w. If string is longer than; w wrap it to next line. void DrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw the underline under the hot character. TGHotString(const char* s). Int_t GetHotChar() const; { return fHotChar; }. Int_t GetHotPos() const; { return fHotPos; }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGString.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGHotString.html:8690,wrap,wrap,8690,root/html530/TGHotString.html,https://root.cern,https://root.cern/root/html530/TGHotString.html,1,['wrap'],['wrap']
Integrability,"nize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidDrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. charfHotCharhot character; Int_tfHotPosposition of hot character; GContext_tfLastGCcontext used during last drawing; Int_tfOff1variable used during drawing (cache); Int_tfOff2variable used during drawing (cache). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHotString(const char* s); Create a hot string. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw a hot string and underline the hot character. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a hot string in a column with width w. If string is longer than; w wrap it to next line. void DrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw the underline under the hot character. TGHotString(const char* s). Int_t GetHotChar() const; { return fHotChar; }. Int_t GetHotPos() const; { return fHotPos; }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGString.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGHotString.html:8690,wrap,wrap,8690,root/html532/TGHotString.html,https://root.cern,https://root.cern/root/html532/TGHotString.html,1,['wrap'],['wrap']
Integrability,"nk (const char *from, const char *to);  Create a link from file1 to file2. ;  ; virtual void ListLibraries (const char *regexp="""");  List the loaded shared libraries. ;  ; virtual void ListSymbols (const char *module, const char *re="""");  List symbols in a shared library. ;  ; virtual int Load (const char *module, const char *entry="""", Bool_t system=kFALSE);  Load a shared library. ;  ; virtual UInt_t LoadAllLibraries ();  Load all libraries known to ROOT via the rootmap system. ;  ; virtual int mkdir (const char *name, Bool_t recursive=kFALSE);  Make a file system directory. ;  ; virtual Long_t NextTimeOut (Bool_t mode);  Time when next timer of mode (synchronous=kTRUE or asynchronous=kFALSE) will time-out (in ms). ;  ; virtual void NotifyApplicationCreated ();  Hook to tell TSystem that the TApplication object has been created. ;  ; virtual TTime Now ();  Get current time in milliseconds since 0:00 Jan 1 1995. ;  ; virtual int OpenConnection (const char *server, int port, int tcpwindowsize=-1, const char *protocol=""tcp"");  Open a connection to another host. ;  ; virtual void Openlog (const char *name, Int_t options, ELogFacility facility);  Open connection to system log daemon. ;  ; virtual FILE * OpenPipe (const char *command, const char *mode);  Open a pipe. ;  ; virtual const char * PrependPathName (const char *dir, TString &name);  Concatenate a directory and a file name. ;  ; virtual Bool_t ProcessEvents ();  Process pending events (GUI, timers, sockets). ;  ; const char * pwd ();  ; virtual int RecvBuf (int sock, void *buffer, int length);  Receive a buffer headed by a length indicator. ;  ; virtual int RecvRaw (int sock, void *buffer, int length, int flag);  Receive exactly length bytes into buffer. ;  ; virtual Int_t RedirectOutput (const char *name, const char *mode=""a"", RedirectHandle_t *h=nullptr);  Redirect standard output (stdout, stderr) to the specified file. ;  ; virtual TFileHandler * RemoveFileHandler (TFileHandler *fh);  Remove a file handler fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:13272,protocol,protocol,13272,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,5,['protocol'],['protocol']
Integrability,"nks:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VavilovAccurate. class ROOT::Math::VavilovAccurate: public ROOT::Math::Vavilov. Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VavilovAccurate.html:1122,rout,routines,1122,root/html528/ROOT__Math__VavilovAccurate.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VavilovAccurate.html,1,['rout'],['routines']
Integrability,"nks:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::CombinedCalculator. class RooStats::CombinedCalculator: public RooStats::IntervalCalculator, public RooStats::HypoTestCalculator. CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__CombinedCalculator.html:988,interface,interface,988,root/html528/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__CombinedCalculator.html,1,['interface'],['interface']
Integrability,"nks:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMsgService. class RooMsgService: public TObject. The RooMsgService class is a singleton class that organizes informational, debugging, ; warning and errors messages generated by the RooFit core code. ; ; Each message generated by the core; has a message level (DEBUG,INFO,PROGRESS,WARNING,ERROR or FATAL), an originating object,; and a 'topic'. Currently implemented topics are ""Generation"",""Plotting"",; ""Integration"", ""Minimization"" and ""Workspace"" and ""ChangeTracking"".; ; The RooMsgService class allows to filter and redirect messages into 'streams' ; according to message level, topic, (base) class of originating object, name of originating; object and based on attribute labels attached to individual objects. ; ; The current default configuration creates streams for all messages at WARNING level; or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting,; Integration and Minimization and redirects them to stdout. Users can create additional streams ; for logging of e.g. DEBUG messages on particular topics or objects and or redirect streams to; C++ streams or files.; ; The singleton instance is accessible through RooMsgService::instance() ;; . Function Members (Methods); public:. virtual~RooMsgService(); voidTObject::AbstractMethod(const char* method) const; Int_taddStream(RooFit::MsgLevel level, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg()); static Bool_tanyDebug(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMsgService.html:1037,message,messages,1037,root/html526/RooMsgService.html,https://root.cern,https://root.cern/root/html526/RooMsgService.html,7,['message'],['messages']
Integrability,"nks:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 29195 2009-06-24 10:39:49Z brun $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Ranking.html:1032,message,message,1032,root/html528/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html528/TMVA__Ranking.html,1,['message'],['message']
Integrability,"nline . Change category state to state specified by another category state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. NoteThe state name of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 48 of file RooAbsCategoryLValue.h. ◆ setIndex() [2/2]. virtual bool RooAbsCategoryLValue::setIndex ; (; value_type ; index, . bool ; printError = true . ). pure virtual . Change category state by specifying the index code of the desired state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. Returnsbool to signal an error. ; Implemented in RooCategory, RooSuperCategory, RooCategory, and RooSuperCategory. ◆ setLabel() [1/3]. virtual bool RooAbsCategoryLValue::setLabel ; (; const char * ; label, . bool ; printError = true . ). pure virtual . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implemented in RooCategory, RooSuperCategory, RooCategory, and RooSuperCategory. ◆ setLabel() [2/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [3/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Definition at line 60 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:53178,message,message,53178,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['message'],['message']
Integrability,"nline . Definition at line 96 of file TMessage.h. ◆ TagStreamerInfo(). void TMessage::TagStreamerInfo ; (; TVirtualStreamerInfo * ; info). overridevirtual . Remember that the StreamerInfo is being used in writing. ; When support for schema evolution is enabled the list of TStreamerInfo used to stream this object is kept in fInfos. This information is used by TSocket::Send that sends this list through the socket. This list is in turn used by TSocket::Recv to store the TStreamerInfo objects in the relevant TClass in case the TClass does not know yet about a particular class version. This feature is implemented to support clients and servers with either different ROOT versions or different user classes versions. ; Reimplemented from TBufferIO.; Definition at line 168 of file TMessage.cxx. ◆ TestBitNumber(). Bool_t TMessage::TestBitNumber ; (; UInt_t ; bitnumber); const. inlineprivate . Definition at line 59 of file TMessage.h. ◆ Uncompress(). Int_t TMessage::Uncompress ; (; ). Uncompress the message. ; The message will only be uncompressed when kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. ; Definition at line 389 of file TMessage.cxx. ◆ UsesSchemaEvolution(). Bool_t TMessage::UsesSchemaEvolution ; (; ); const. inline . Definition at line 79 of file TMessage.h. ◆ UsesSchemaEvolutionForAll(). Bool_t TMessage::UsesSchemaEvolutionForAll ; (; ). static . Static function returning status of global schema evolution. ; Definition at line 124 of file TMessage.cxx. ◆ What(). UInt_t TMessage::What ; (; ); const. inline . Definition at line 75 of file TMessage.h. ◆ WriteProcessID(). UShort_t TMessage::WriteProcessID ; (; TProcessID * ; pid). overridevirtual . Check if the ProcessID pid is already in the message. ; If not, then:; mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; mark bit uid+1 where uid id the uid of the ProcessID . Reimplemented from TBufferIO.; Definition at line 438 of file TMessage.cxx. Friends And Related Symbol Documentation.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:47234,message,message,47234,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['message'],['message']
Integrability,"nlineoverridevirtual . Reimplemented from TObject.; Definition at line 65 of file TNotifyLink.h. ◆ DeclFileName(). static const char * TNotifyLinkBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 123 of file TNotifyLink.h. ◆ GetNext(). TObject * TNotifyLinkBase::GetNext ; (; ); const. inline . Definition at line 121 of file TNotifyLink.h. ◆ IsA(). TClass * TNotifyLinkBase::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 123 of file TNotifyLink.h. ◆ IsLinked(). Bool_t TNotifyLinkBase::IsLinked ; (; ). inline . Definition at line 116 of file TNotifyLink.h. ◆ PrependLink(). template<class Chain > . void TNotifyLinkBase::PrependLink ; (; Chain & ; chain). inline . Set this link as the head of the chain's list of notify subscribers. ; Templated only to remove an include dependency from TChain: it expects a TChain as input (in practice anything that implements SetNotify and GetNotify will work, but in ROOT that is only TTree and its sub-classes). ; Definition at line 82 of file TNotifyLink.h. ◆ RemoveLink(). template<class Chain > . void TNotifyLinkBase::RemoveLink ; (; Chain & ; chain). inline . Remove this link from a chain's list of notify subscribers. ; Templated only to remove an include dependency from TChain: it expects a TChain as input (in practice anything that implements SetNotify and GetNotify will work, but in ROOT that is only TTree and its sub-classes). NoteNo error is emitted if the TNotifyLink is not part of the linked list for the chain passed as argument. The TNotifyLink will still remove itself from the doubly linked list. ; Definition at line 100 of file TNotifyLink.h. ◆ Streamer(). void TNotifyLinkBase::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TNotifyLinkBase::StreamerNVirtual ; (; TBuffer & ; Class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNotifyLinkBase.html:12126,depend,dependency,12126,doc/master/classTNotifyLinkBase.html,https://root.cern,https://root.cern/doc/master/classTNotifyLinkBase.html,1,['depend'],['dependency']
Integrability,"nlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPad::HashULong_t Hash() const overrideReturn hash value for this object.Definition TPad.h:267; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 267 of file TPad.h. ◆ HasViewer3D(). Bool_t TPad::HasViewer3D ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 401 of file TPad.h. ◆ HideToolTip(). void TPad::HideToolTip ; (; Int_t ; event). protectedvirtual . Hide tool tip depending on the event type. ; Typically tool tips are hidden when event is not a kMouseEnter and not a kMouseMotion event. ; Definition at line 2847 of file TPad.cxx. ◆ HighLight(). void TPad::HighLight ; (; Color_t ; color = kRed, . Bool_t ; set = kTRUE . ). overridevirtual . Highlight pad. ; do not highlight when printing on Postscript ; Implements TVirtualPad.; Definition at line 3055 of file TPad.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:87509,message,message,87509,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['message'],['message']
Integrability,"nlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPair::HashULong_t Hash() const overrideReturn hash value for this object.Definition TMap.h:118; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 118 of file TMap.h. ◆ IsA(). TClass * TPair::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 124 of file TMap.h. ◆ IsEqual(). Bool_t TPair::IsEqual ; (; const TObject * ; obj); const. inlineoverridevirtual . Default equal comparison (objects are equal if they have the same address in memory). ; More complicated classes might want to override this function. ; Reimplemented from TObject.; Definition at line 119 of file TMap.h. ◆ IsFolder(). Bool_t TPair::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPair.html:12995,message,message,12995,doc/master/classTPair.html,https://root.cern,https://root.cern/doc/master/classTPair.html,1,['message'],['message']
Integrability,"nlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TParameter::HashULong_t Hash() const overrideReturn hash value for this object.Definition TParameter.h:92; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 92 of file TParameter.h. ◆ IsA(). template<class AParamType > . TClass * TParameter< AParamType >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TSelectorScalar.; Definition at line 119 of file TParameter.h. ◆ IsConst(). template<class AParamType > . Bool_t TParameter< AParamType >::IsConst ; (; ); const. inline . Definition at line 68 of file TParameter.h. ◆ IsSortable(). template<class AParamType > . Bool_t TParameter< AParamType >::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 93 of file TParameter.h. ◆ ls(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParameter.html:14659,message,message,14659,doc/master/classTParameter.html,https://root.cern,https://root.cern/doc/master/classTParameter.html,1,['message'],['message']
Integrability,"nlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPave::HashULong_t Hash() const overrideReturn hash value for this object.Definition TPave.h:63; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 63 of file TPave.h. ◆ IsA(). TClass * TPave::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBox.; Reimplemented in TPaveClass, TPaveLabel, TPaveStats, TPavesText, and TPaveText.; Definition at line 91 of file TPave.h. ◆ IsSortable(). Bool_t TPave::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 64 of file TPave.h. ◆ ls(). void TPave::ls ; (; Option_t * ; option = """"); const. overridevirtual . List this pave with its attributes. ; Reimplemented from TBox.; Definition at line 279 of file TPave.cxx. ◆ operator=(). TPave & TPave::operator= ; (; const TPav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPave.html:24775,message,message,24775,doc/master/classTPave.html,https://root.cern,https://root.cern/doc/master/classTPave.html,1,['message'],['message']
Integrability,"nlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TStatistic::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatistic.h:53. Reimplemented from TObject.; Definition at line 53 of file TStatistic.h. ◆ IsA(). TClass * TStatistic::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 77 of file TStatistic.h. ◆ ls(). void TStatistic::ls ; (; Option_t * ; option = """"); const. inlineoverridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 75 of file TStatistic.h. ◆ Merge(). Int_t TStatistic::Merge ; (; TCollection * ; in). Merge implementation of TStatistic. ; Parameters. [in]inOther TStatistic objects to be added to the cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatistic.html:15983,message,message,15983,doc/master/classTStatistic.html,https://root.cern,https://root.cern/doc/master/classTStatistic.html,1,['message'],['message']
Integrability,"nlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TStatsFeedback::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatsFeedback.h:42. Reimplemented from TObject.; Definition at line 42 of file TStatsFeedback.h. ◆ IsA(). TClass * TStatsFeedback::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 44 of file TStatsFeedback.h. ◆ Streamer(). void TStatsFeedback::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStatsFeedback::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TStatsFeedback.h. Member Data Documentation. ◆ fName. TString TStatsFeedback::fName. protected . Definition at line 34 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatsFeedback.html:17177,message,message,17177,doc/master/classTStatsFeedback.html,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html,1,['message'],['message']
Integrability,"nlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. void HandleArchive(TMessage* mess, TString* slb = 0); Handle archive request. TMap * GetDataSetNodeMap(TFileCollection* fc, TString& emsg); Get a map {server-name, list-of-files} for collection 'fc' to be used in; TPacketizerFile. Returns a pointer to the map (ownership of the caller).; Or (TMap *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:26511,message,message,26511,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,2,['message'],['message']
Integrability,"nlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. void HandleArchive(TMessage* mess, TString* slb = 0); Handle archive request. TMap * GetDataSetNodeMap(TFileCollection* fc, TString& emsg); Get a map {server-name, list-of-files} for collection 'fc' to be used in; TPacketizerFile. Returns a pointer to the map (ownership of the caller).; Or (TMap *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. void HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:27257,message,message,27257,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,1,['message'],['message']
Integrability,"nly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Calculate and return current value of self. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalizatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJeffreysPrior.html:59917,rout,routine,59917,doc/master/classRooJeffreysPrior.html,https://root.cern,https://root.cern/doc/master/classRooJeffreysPrior.html,1,['rout'],['routine']
Integrability,"nly flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; value_type evaluate () const override;  Calculate and return the value of the mapping function. ;  ; void recomputeShape () override;  No shape recomputation is necessary. This category does not depend on other categories. ;  ;  Protected Member Functions inherited from RooAbsCategory; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach the category index and label as branches to the given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  Attach the category index and label to as branches to the given vector store. ;  ; void clearTypes ();  Delete all currently defined states. ;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValueDirty=true) override;  Copy the cached value from given source and raise dirty flag. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label);  Define a new state with given label. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label, value_type index);  Define new state with given name and index number. ;  ; void defineStateUnchecked (const std::string &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooThresholdCategory.html:34808,depend,depend,34808,doc/master/classRooThresholdCategory.html,https://root.cern,https://root.cern/doc/master/classRooThresholdCategory.html,1,['depend'],['depend']
Integrability,"nn,; 12419 mg_websocket_data_handler ws_data_handler,; 12420 void *callback_data); 12421{; 12422 /* Pointer to the beginning of the portion of the incoming websocket; 12423 * message queue.; 12424 * The original websocket upgrade request is never removed, so the queue; 12425 * begins after it. */; 12426 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12427 int n, error, exit_by_callback;; 12428 int ret;; 12429 ; 12430 /* body_len is the length of the entire queue in bytes; 12431 * len is the length of the current message; 12432 * data_len is the length of the current message's data payload; 12433 * header_len is the length of the current message's header */; 12434 size_t i, len, mask_len = 0, header_len, body_len;; 12435 uint64_t data_len = 0;; 12436 ; 12437 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12438 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12439 */; 12440 unsigned char mask[4];; 12441 ; 12442 /* data points to the place where the message is stored when passed to; 12443 * the websocket_data callback. This is either mem on the stack, or a; 12444 * dynamically allocated buffer if it is too large. */; 12445 unsigned char mem[4096];; 12446 unsigned char mop; /* mask flag and opcode */; 12447 ; 12448 ; 12449 /* Variables used for connection monitoring */; 12450 double timeout = -1.0;; 12451 int enable_ping_pong = 0;; 12452 int ping_count = 0;; 12453 ; 12454 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12455 enable_ping_pong =; 12456 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12457 ""yes"");; 12458 }; 12459 ; 12460 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12461 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12462 }; 12463 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12464 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12465 }; 12466 if (timeout <= 0.0) {; 12467 timeout = a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:360627,message,message,360627,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['message'],['message']
Integrability,"nn,; 12420 mg_websocket_data_handler ws_data_handler,; 12421 void *callback_data); 12422{; 12423 /* Pointer to the beginning of the portion of the incoming websocket; 12424 * message queue.; 12425 * The original websocket upgrade request is never removed, so the queue; 12426 * begins after it. */; 12427 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12428 int n, error, exit_by_callback;; 12429 int ret;; 12430 ; 12431 /* body_len is the length of the entire queue in bytes; 12432 * len is the length of the current message; 12433 * data_len is the length of the current message's data payload; 12434 * header_len is the length of the current message's header */; 12435 size_t i, len, mask_len = 0, header_len, body_len;; 12436 uint64_t data_len = 0;; 12437 ; 12438 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12439 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12440 */; 12441 unsigned char mask[4];; 12442 ; 12443 /* data points to the place where the message is stored when passed to; 12444 * the websocket_data callback. This is either mem on the stack, or a; 12445 * dynamically allocated buffer if it is too large. */; 12446 unsigned char mem[4096];; 12447 unsigned char mop; /* mask flag and opcode */; 12448 ; 12449 ; 12450 /* Variables used for connection monitoring */; 12451 double timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12458 ""yes"");; 12459 }; 12460 ; 12461 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12462 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12463 }; 12464 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12465 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12466 }; 12467 if (timeout <= 0.0) {; 12468 timeout = a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:360660,message,message,360660,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['message'],['message']
Integrability,"nnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_listActual object store; TString_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_t_ownContFlag to identify a list that owns its contents. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCollection(); Destructor. void safeDeleteList(); Examine client server dependencies in list and; delete contents in safe order: any client; is deleted before a server is deleted. RooAbsCollection* snapshot(Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t addServerClonesToList(const RooAbsArg& var); Add clones of servers of given argument to list. RooAbsCollection & operator=(const RooAbsCollection& other); The assignment operat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCollection.html:9945,depend,dependents,9945,root/html526/RooAbsCollection.html,https://root.cern,https://root.cern/root/html526/RooAbsCollection.html,6,['depend'],['dependents']
Integrability,"nning as shown; # in Y axis label (100 bins -. Events/0.4*Xaxis-dim) so that all bins; # represent a consistent density distribution; ; # Show mixstate asymmetry with custom binning; # ------------------------------------------------------------------------------------; ; # Make plot of dt distribution of data asymmetry in 'mixState' with; # variable binning; ; # Create binning object with range (-10,10); abins = ROOT.RooBinning(-10, 10); ; # Add boundaries at 0, (-1,1), (-2,2), (-3,3), (-4,4) and (-6,6); abins.addBoundary(0); abins.addBoundaryPair(1); abins.addBoundaryPair(2); abins.addBoundaryPair(3); abins.addBoundaryPair(4); abins.addBoundaryPair(6); ; # Create plot frame in dt; aframe = dt.frame(Range=(-10, 10), Title=""mixState asymmetry distribution with custom binning""); ; # Plot mixState asymmetry of data with specified customg binning; data.plotOn(aframe, Asymmetry=mixState, Binning=abins); ; # Plot corresponding property of pdf; bmix.plotOn(aframe, Asymmetry=mixState); ; # Adjust vertical range of plot to sensible values for an asymmetry; aframe.SetMinimum(-1.1); aframe.SetMaximum(1.1); ; # NB: For asymmetry distributions no density corrects are needed (and are; # thus not applied); ; # Draw plots on canvas; c = ROOT.TCanvas(""rf108_plotbinning"", ""rf108_plotbinning"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); dtframe.GetYaxis().SetTitleOffset(1.6); dtframe.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); aframe.GetYaxis().SetTitleOffset(1.6); aframe.Draw(); ; c.SaveAs(""rf108_plotbinning.png""); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav,mixState); [#1] INFO:Plotting -- RooAbsReal::plotAsymOn(bmix) plot on dt projects variables (tagFlav); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf108_plotbinning.py. tutorialsroofitrf108_plotbinning.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf108__plotbinning_8py.html:3785,integrat,integrates,3785,doc/master/rf108__plotbinning_8py.html,https://root.cern,https://root.cern/doc/master/rf108__plotbinning_8py.html,1,['integrat'],['integrates']
Integrability,"nning*_binning! Pointer to default binning definition; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooErrorVar.html:39666,integrat,integration,39666,root/html602/RooErrorVar.html,https://root.cern,https://root.cern/root/html602/RooErrorVar.html,2,['integrat'],['integration']
Integrability,"nnotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::CvSplit; Bool_t fMakeFoldDataSet;  ; UInt_t fNumFolds;  ; std::vector< std::vector< TMVA::Event * > > fTestEvents;  ; std::vector< std::vector< TMVA::Event * > > fTrainEvents;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/CvSplit.h>. Inheritance diagram for TMVA::CvSplitKFolds:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ CvSplitKFolds(). TMVA::CvSplitKFolds::CvSplitKFolds ; (; UInt_t ; numFolds, . TString ; splitExpr = """", . Bool_t ; stratified = kTRUE, . UInt_t ; seed = 100 . ). Splits a dataset into k folds, ready for use in cross validation. ; Parameters. [in]numFoldsNumber of folds to split data into ; [in]stratifiedIf true, use stratified splitting, balancing the number of events across classes and folds. If false, no such balancing is done. For ; [in]splitExprExpression used to split data into folds. If """" a random assignment will be done. Otherwise the expression is fed into ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html:15367,message,message,15367,doc/master/classTMVA_1_1CvSplitKFolds.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html,1,['message'],['message']
Integrability,"nnotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:8389,interface,interface,8389,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,1,['interface'],['interface']
Integrability,nnotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TF1::(anonymous)TF1::kNotDraw; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. vector<Double_t>TF1::fAlpha!Array alpha. for each bin in x the deconvolution r of fIntegral; vector<Double_t>TF1::fBeta!Array beta. is approximated by x = alpha +beta*r *gamma*r**2; Double_tTF1::fChisquareFunction fit chisquare; TArrayDTF2::fContourArray to display contour levels; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TFormula*TF1::fFormulaPointer to TFormula in case when user define formula; ROOT::Math::ParamFunctorTF1::fFunctor! Functor object to wrap any C++ callable object; vector<Double_t>TF1::fGamma!Array gamma.; TH1*TF1::fHistogram!Pointer to histogram used for visualisation; vector<Double_t>TF1::fIntegral!Integral of function binned on fNpx bins; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Double_tTF1::fMaximumMaximum value for plotting; TMethodCall*TF1::fMethodCall!Pointer to MethodCall in case of interpreted function; Double_tTF1::fMinimumMinimum value for plotting; Int_tTF1::fNDFNumber of degrees of freedom in the fit; TStringTNamed::fNameobject identifier; Int_tTF1::fNdimFunction dimension; Double_tTF1::fNormIntegralIntegral of the function before being normalize,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF3.html:21108,wrap,wrap,21108,root/html604/TF3.html,https://root.cern,https://root.cern/root/html604/TF3.html,1,['wrap'],['wrap']
Integrability,"nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:32983,integrat,integrator,32983,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,2,['integrat'],['integrator']
Integrability,"nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooListProxy_list; TIterator*_listIter! do not persist; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRecursiveFraction.html:31779,integrat,integrator,31779,root/html526/RooRecursiveFraction.html,https://root.cern,https://root.cern/root/html526/RooRecursiveFraction.html,2,['integrat'],['integrator']
Integrability,"nomial::FindNumRoots ; (; ). Find the polynomial roots using always an iterative numerical methods The numerical method used is from GSL (see documentation ) ; Definition at line 247 of file Polynomial.cxx. ◆ FindRealRoots(). std::vector< double > ROOT::Math::Polynomial::FindRealRoots ; (; ). Find the only the real polynomial roots. ; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used The numerical method used is from GSL (see documentation ) ; Definition at line 237 of file Polynomial.cxx. ◆ FindRoots(). const std::vector< std::complex< double > > & ROOT::Math::Polynomial::FindRoots ; (; ). Find the polynomial roots. ; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used The numerical method used is from GSL (see documentation ) For the case of n = 4 by default an analytical algorithm is used from an implementation by Andrew W. Steiner and Andy Buckley which is a translation from the original Cenrlib routine (< HREF=""https://cds.cern.ch/record/2050876/files/c208.html"">RRTEQ4 ). Note that depending on the coefficients the result could be not very accurate if the discriminant of the resolvent cubic equation is very small. In that case it might be more robust to use the numerical method, by calling directly FindNumRoots() ; Definition at line 151 of file Polynomial.cxx. ◆ Order(). unsigned int ROOT::Math::Polynomial::Order ; (; ); const. inline . Order of Polynomial. ; Definition at line 137 of file Polynomial.h. Member Data Documentation. ◆ fDerived_params. std::vector<double> ROOT::Math::Polynomial::fDerived_params. mutableprivate . Definition at line 166 of file Polynomial.h. ◆ fOrder. unsigned int ROOT::Math::Polynomial::fOrder. private . Definition at line 163 of file Polynomial.h. ◆ fRoots. std::vector< std::complex < double > > ROOT::Math::Polynomial::fRoots. private . Definition at line 170 of file Polynomial.h. Libraries for ROOT::Math::Polynomial:. [le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html:11615,rout,routine,11615,doc/master/classROOT_1_1Math_1_1Polynomial.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html,1,['rout'],['routine']
Integrability,"nonymous)TFormula::kLinear; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TFormula::(anonymous)TFormula::kNormalized; static TObject::(anonymous)TObject::kNotDeleted; static TF1::(anonymous)kNotDraw; static TFormula::(anonymous)TFormula::kNotGlobal; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha!Array alpha. for each bin in x the deconvolution r of fIntegral; TBitsTFormula::fAlreadyFound! cache for information; Double_t*fBeta!Array beta. is approximated by x = alpha +beta*r *gamma*r**2; Double_tfChisquareFunction fit chisquare; Double_t*TFormula::fConst[fNconst] Array of fNconst formula constants; TString*TFormula::fExpr[fNoper] List of expressions; TString*TFormula::fExprOptimized![fNOperOptimized] List of expressions; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TObjArrayTFormula::fFunctionsArray of function calls to make; ROOT::Math::ParamFunctorfFunctor! Functor object to wrap any C++ callable object; Double_t*fGamma!Array gamma.; TH1*fHistogram!Pointer to histogram used for visualisation; Double_t*fIntegral![fNpx] Integral of function binned on fNpx bins; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TObjArrayTFormula::fLinearPartsLinear parts if the formula is linear (contains '|' or ""++""); Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Double_tfMaximumMaximum value for plotting; TMethodCall*fMethodCall!Pointer to MethodCall in case of interpreted function; Double_tfMinimumMinimum value for plotting; Int_tfNDFNumber of degrees of freedom in the fit; Int_tTFormula::fNOperOptimized!",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:23960,wrap,wrap,23960,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,1,['wrap'],['wrap']
Integrability,"nonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const TClass*fClassclass for which message has to be handled; Int_t*fCntscount per message; Bool_tfDerivedif true handle messages also for derived classes; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. TMessageHandler(const TClass* cl, Bool_t derived = kTRUE). virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMessageHandler.html:11067,message,message,11067,root/html602/TMessageHandler.html,https://root.cern,https://root.cern/root/html602/TMessageHandler.html,4,['message'],['message']
Integrability,"normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_t_relParam; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistConstraint.html:44001,integrat,integrator,44001,root/html602/RooHistConstraint.html,https://root.cern,https://root.cern/root/html602/RooHistConstraint.html,2,['integrat'],['integrator']
Integrability,"normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; Bool_t_protectNegative; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPoisson.html:43957,integrat,integrator,43957,root/html602/RooPoisson.html,https://root.cern,https://root.cern/root/html602/RooPoisson.html,2,['integrat'],['integrator']
Integrability,"normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyxDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooResolutionModel.html:41149,integrat,integrator,41149,root/html528/RooResolutionModel.html,https://root.cern,https://root.cern/root/html528/RooResolutionModel.html,1,['integrat'],['integrator']
Integrability,"normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tagFlav; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBMixDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBMixDecay.html:44611,integrat,integrator,44611,root/html534/RooBMixDecay.html,https://root.cern,https://root.cern/root/html534/RooBMixDecay.html,1,['integrat'],['integrator']
Integrability,"normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:2654,integrat,integrated,2654,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['integrat'],['integrated']
Integrability,"normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_genPdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_genPdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DataStore pxData_bin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:12089,integrat,integrator,12089,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,2,['integrat'],['integrator']
Integrability,"not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::ConfidenceBelt*GetConfidenceBelt(); virtual RooSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:1777,interface,interface,1777,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,6,['interface'],['interface']
Integrability,"not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:1792,interface,interface,1792,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['interface'],['interface']
Integrability,"not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:30727,integrat,integration,30727,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['integrat'],['integration']
Integrability,"not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooRealProxyRooAbsMoment::_funcInput function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooRealProxy_ifInt(F(x))dx ;; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; RooRealProxy_ixfInt(X*F(X))dx ;; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsMoment::_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFirstMoment.html:35087,integrat,integration,35087,root/html602/RooFirstMoment.html,https://root.cern,https://root.cern/root/html602/RooFirstMoment.html,4,['integrat'],['integration']
Integrability,"not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTruthModel.html:44451,integrat,integration,44451,root/html602/RooTruthModel.html,https://root.cern,https://root.cern/root/html602/RooTruthModel.html,2,['integrat'],['integration']
Integrability,"not necessarily the same as our value. The caller is responsible for deleting the returned object. ; Implemented in RooAbsCategory, RooAbsReal, and RooStringVar. ◆ dataToken(). std::size_t RooAbsArg::dataToken ; (; ); const. inline . Returns the token for retrieving results in the BatchMode. For internal use only. ; Definition at line 678 of file RooAbsArg.h. ◆ defaultPrintContents(). Int_t RooAbsArg::defaultPrintContents ; (; Option_t * ; opt); const. overridevirtual . Define default contents to print. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 1579 of file RooAbsArg.cxx. ◆ dependsOn() [1/3]. bool RooAbsArg::dependsOn ; (; const RooAbsArg & ; server, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. inline . Test whether we depend on (ie, are served by) the specified object. ; Note that RooAbsArg objects are considered equivalent if they have the same name. ; Definition at line 123 of file RooAbsArg.h. ◆ dependsOn() [2/3]. bool RooAbsArg::dependsOn ; (; const RooAbsCollection & ; serverList, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. Test whether we depend on (ie, are served by) any object in the specified collection. ; Uses the dependsOn(RooAbsArg&) member function. ; Definition at line 850 of file RooAbsArg.cxx. ◆ dependsOn() [3/3]. bool RooAbsArg::dependsOn ; (; TNamed const * ; namePtr, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. Test whether we depend on (ie, are served by) an object with a specific name. ; Definition at line 866 of file RooAbsArg.cxx. ◆ dependsOnValue() [1/2]. bool RooAbsArg::dependsOnValue ; (; const RooAbsArg & ; server, . const RooAbsArg * ; ignoreArg = nullptr . ); const. inline . Check whether this object depends on values served from the object passed as server. ; Parameters. serverTest if server serves values to this. ; ignoreArgIgnore values served by this object. . ReturnsTrue if values",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:57522,depend,dependsOn,57522,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['depend'],['dependsOn']
Integrability,"not yet cast in stone, and in the namespace ROOT for those that are.; We will use standard C++ types, standard interface behavior (e.g. with respect to ownership and thread safety), good documentation and tests: we are trying to be nice!; Feedback; The main point of the meeting and this page is to solicit your feedback. Most of it has been taken care of in the code already.; Building ROOT 7; Pre-requisites; Support for the c++14 standard is required. Usage of g++ >= 5 or clang >= 3.4 is recommended.; Relevant cmake variables; The CMAKE_CXX_STANDARD cmake variables must be set to at least 14.; Building from source would look similar to this:; $ mkdir root7_build; $ cd root7_build; $ cmake -DCMAKE_CXX_STANDARD=14 path/to/root/source; $ cmake --build . -- -j4. Examples; See the relevant tutorials, for instance for drawing and styling the new histograms.; The new interfaces are not about shortening your code - but about robustness. Here are a few examples of what can go wrong with the ROOT6 interfaces:; ROOT6 interfaces, showing what can go wrong.; #include ""TFile.h""#include ""TH2.h""#include ""TTreeReader.h""#include ""TTreeReaderArray.h""#include ""TTree.h"" // Another function. Who knows what it does in a month from now.void someOtherFunction(); void fill(TTree* tree) { // Create the file before so it can own the histograms. TFile* file = TFile::Open(""jetmuontag.root"", ""RECRAETE"");  // Create the histograms (cannot mix fixed and variable size bins) const double muonPtBins[] = {0., 1., 10., 100.}; // The axis titles might have been changed. Impossible to see. TH2* hMuPtTag = new TH2F(""hMuPtTag"", ""muon pT versus tag value;tag value;muon pT [GeV]"", 4, muonPtBins, 10, 0., 1.); TH1* hJetEt = new TH1F(""hJetEt"", ""jet ET versus tag value;jet ET [GeV];tag value"", 10, 0., 1000.);  // Set up reading from the TTree TTreeReader reader(tree); TTreeReaderArray<float> jetEt(reader, ""jet.ET""); TTreeReaderArray<float> muPt(reader, ""jet.lead_mu.pT""); TTreeReaderArray<float> tag(reader, ""jet.ta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:3375,interface,interfaces,3375,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,2,['interface'],['interfaces']
Integrability,"nother window. void SetStyle(const char* style); Set the button style (modern or classic). UInt_t GetDisplayWidth() const; Get display width. UInt_t GetDisplayHeight() const; Get display height. const TGPicture * GetPicture(const char* name); Get picture from the picture pool. Picture must be freed using; TGClient::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGClient::FreePicture(). If; picture is not found 0 is returned. void FreePicture(const TGPicture* pic); Free picture resource. TGGC * GetGC(GCValues_t* values, Bool_t rw = kFALSE); Get graphics context from the gc pool. Context must be freed via; TGClient::FreeGC(). If rw is true a new read/write-able GC; is returned, otherwise a shared read-only context is returned.; For historical reasons it is also possible to create directly a; TGGC object, but it is advised to use this new interface only. void FreeGC(const TGGC* gc); Free a graphics context. void FreeGC(GContext_t gc); Free a graphics context. TGFont * GetFont(const char* font, Bool_t fixedDefault = kTRUE); Get a font from the font pool. Fonts must be freed via; TGClient::FreeFont(). Returns 0 in case of error or if font; does not exist. If fixedDefault is false the ""fixed"" font; will not be substituted as fallback when the asked for font; does not exist. TGFont * GetFont(const TGFont* font); Get again specified font. Will increase its usage count. void FreeFont(const TGFont* font); Free a font. void NeedRedraw(TGWindow* w, Bool_t force = kFALSE); Set redraw flags. Bool_t GetColorByName(const char* name, Pixel_t& pixel) const; Get a color by name. If color is found return kTRUE and pixel is; set to the color's pixel value, kFALSE otherwise. FontStruct_t GetFontByName(const char* name, Bool_t fixedDefault = kTRUE) const; Get a font by name. If font is not f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGClient.html:14303,interface,interface,14303,root/html530/TGClient.html,https://root.cern,https://root.cern/root/html530/TGClient.html,2,['interface'],['interface']
Integrability,"nother window. void SetStyle(const char* style); Set the button style (modern or classic). UInt_t GetDisplayWidth() const; Get display width. UInt_t GetDisplayHeight() const; Get display height. const TGPicture * GetPicture(const char* name); Get picture from the picture pool. Picture must be freed using; TGClient::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGClient::FreePicture(). If; picture is not found 0 is returned. void FreePicture(const TGPicture* pic); Free picture resource. TGGC * GetGC(GCValues_t* values, Bool_t rw = kFALSE); Get graphics context from the gc pool. Context must be freed via; TGClient::FreeGC(). If rw is true a new read/write-able GC; is returned, otherwise a shared read-only context is returned.; For historical reasons it is also possible to create directly a; TGGC object, but it is advised to use this new interface only. void FreeGC(const TGGC* gc); Free a graphics context. void FreeGC(GContext_t gc); Free a graphics context. TGFont * GetFont(const char* font, Bool_t fixedDefault = kTRUE); Get a font from the font pool. Fonts must be freed via; TGClient::FreeFont(). Returns 0 in case of error or if font; does not exist. If fixedDefault is false the ""fixed"" font; will not be substituted as fallback when the asked for font; does not exist. TGFont * GetFont(const TGFont* font); Get again specified font. Will increase its usage count. void FreeFont(const TGFont* font); Free a font. void NeedRedraw(TGWindow* w, Bool_t force = kFALSE); Set redraw flags. void CancelRedraw(TGWindow* w). Bool_t GetColorByName(const char* name, Pixel_t& pixel) const; Get a color by name. If color is found return kTRUE and pixel is; set to the color's pixel value, kFALSE otherwise. FontStruct_t GetFontByName(const char* name, Bool_t fixedDefault = kTRUE) const; Get ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGClient.html:14389,interface,interface,14389,root/html534/TGClient.html,https://root.cern,https://root.cern/root/html534/TGClient.html,3,['interface'],['interface']
Integrability,"now,; that names that are automatically recognized may be also:; for data fields: either fXXX or fIsXXX; and for getter function; GetXXX() or IsXXX() [where XXX is base name]. As an example of using it let's analyse a few lines which get and set; a fEditable field in TCanvas:. ; /*; TCanvas *c = new TCanvas(""c""); // create a canvas; TClass *cl = c->IsA(); // get its class description object.; TDataMember *dm = cl->GetDataMember(""fEditable""); //This is our data member; TMethodCall *getter = dm->GetterMethod(c); //find a method that gets value!; Long_t l; // declare a storage for this value;; getter->Execute(c,"""",l); // Get this Value !!!! It will appear in l !!!; TMethodCall *setter = dm->SetterMethod(c);; setter->Execute(c,""0"",); // Set Value 0 !!!; */. This trick is widely used in ROOT TContextMenu and dialogs for obtaining; current values and put them as initial values in dialog fields. If you don't want to follow the convention of naming used by ROOT; you still could benefit from Getter/Setter method support: the solution; is to instruct ROOT what the names of these routines are.; The way to do it is putting this information in a comment string to a data; field in your class declaration:. ; /*; class MyClass{; Int_t mydata; // *OPTIONS={GetMethod=""Get"";SetMethod=""Set""} ; ...; Int_t Get() const { return mydata;};; void Set(Int_t i) {mydata=i;};; }; */. However, this getting/setting functions are not the only feature of; this class. The next point is providing lists of possible settings; for the concerned data member. The idea is to have a list of possible; options for this data member, with strings identifying them. This; is used in dialogs with parameters to set - for details see; TMethodArg, TRootContextMenu, TContextMenu. This list not only specifies; the allowed value, but also provides strings naming the options.; Options are managed via TList of TOptionListItem objects. This list; is also created automatically: if a data type is an enum tynpe,; the list will",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataMember.html:2856,rout,routines,2856,root/html528/TDataMember.html,https://root.cern,https://root.cern/root/html528/TDataMember.html,8,['rout'],['routines']
Integrability,"ns -1. ; Reimplemented from TSocket.; Definition at line 258 of file TServerSocket.cxx. ◆ IsA(). TClass * TServerSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 95 of file TServerSocket.h. ◆ operator=(). void TServerSocket::operator= ; (; const TServerSocket & ; ). private . ◆ Recv() [1/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 84 of file TServerSocket.h. ◆ Recv() [2/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 86 of file TServerSocket.h. ◆ Recv() [3/4]. Int_t TServerSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 82 of file TServerSocket.h. ◆ Recv() [4/4]. Int_t TServerSocket::Recv ; (; TMessage *& ; mess). inlineoverridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:25623,message,message,25623,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['message'],['message']
Integrability,"ns are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:3126,message,message,3126,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['message'],['message']
Integrability,"ns as a function of the matrix size:. A*B The execution time is measured for the sum of A * Bsym, Bsym* A and A * B. Notice the matrix_size3 dependence of execution time. CLHEP results are hampered by a poor implementation of symmetric matrix multiplications. For instance, for general matrices of size 100x100, the time is 0.015 sec. while A * Bsym takes 0.028 sec and Bsym* A takes 0.059 sec. Both GSL and ROOT v4.0 can be setup to use the hardware-optimized multiplication routines of the BLAS libraries. It was tested on a G4 PowerPC. The improvement becomes clearly visible around sizes of (50x50) were the execution speed improvement of the Altivec processor becomes more significant than the overhead of filling its pipe. \(A^{-1}\) Here, the time is measured for an in-place matrix inversion. Except for ROOT v3.10, the algorithms are all based on an LUfactorization followed by forward/back-substitution. ROOT v3.10 is using the slower Gaussian elimination method. The numerical accuracy of the CLHEP routine is poor:. up to 6x6 the numerical imprecise Cramer multiplication is hard-coded. For instance, calculating U=H*H-1, where H is a (5x5) Hilbert matrix, results in off-diagonal elements of \(10^{-7}\) instead of the \(10^{-13}\) using an LUaccording to Crout.; scaling protection is non-existent and limits are hard-coded, as a consequence inversion of a Hilbert matrix for sizes>(12x12) fails. In order to gain speed the CLHEP algorithm stores its permutation info of the pivots points in a static array, making multi-threading not possible. GSL uses LU decomposition without the implicit scaling of Crout. Therefore, its accuracy is not as good. For instance a (10x10) Hilbert matrix has errors 10 times larger than the LU Crout result. In ROOT v4.0, the user can choose between the Invert() and IvertFast() routines, where the latter is using the Cramer algorithm for sizes<7x7. The speed graph shows the result for InvertFast(). A*x=b the execution time is measured for solving th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:802737,rout,routine,802737,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['rout'],['routine']
Integrability,"ns defined in the TControlBar and create the buttons. ; Reimplemented from TControlBarImp.; Definition at line 68 of file TRootControlBar.cxx. ◆ DeclFileName(). static const char * TRootControlBar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 50 of file TRootControlBar.h. ◆ GetWidgets(). TList * TRootControlBar::GetWidgets ; (; ); const. inline . Definition at line 39 of file TRootControlBar.h. ◆ Hide(). void TRootControlBar::Hide ; (; ). overridevirtual . Hide controlbar. ; Reimplemented from TControlBarImp.; Definition at line 132 of file TRootControlBar.cxx. ◆ IsA(). TClass * TRootControlBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGMainFrame.; Definition at line 50 of file TRootControlBar.h. ◆ ProcessMessage(). Bool_t TRootControlBar::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Handle controlbar button messages. ; Reimplemented from TGCompositeFrame.; Definition at line 140 of file TRootControlBar.cxx. ◆ ReallyDelete(). void TRootControlBar::ReallyDelete ; (; ). overridevirtual . Really delete the control bar and the this GUI. ; Reimplemented from TGFrame.; Definition at line 154 of file TRootControlBar.cxx. ◆ SetButtonState(). void TRootControlBar::SetButtonState ; (; const char * ; label, . Int_t ; state = 0 . ). overridevirtual . sets new font for control bar buttons ; Reimplemented from TControlBarImp.; Definition at line 187 of file TRootControlBar.cxx. ◆ SetButtonWidth(). void TRootControlBar::SetButtonWidth ; (; UInt_t ; width). overridevirtual . Set button width in pixels. ; Reimplemented from TControlBarImp.; Definition at line 251 of file TRootControlBar.cxx. ◆ SetFont(). void TRootControlBar::SetFont ; (; const char * ; fontName). overridevirtual . sets new font for control bar buttons ; Reimplemented from TControlBarImp.; Definition at line 170 of file TRootContro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootControlBar.html:39063,message,messages,39063,doc/master/classTRootControlBar.html,https://root.cern,https://root.cern/doc/master/classTRootControlBar.html,1,['message'],['messages']
Integrability,"ns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 68 of file RooSimultaneous.h. ◆ Streamer(). void RooSimultaneous::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooSimultaneous::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 147 of file RooSimultaneous.h. ◆ wrapPdfsInBinSamplingPdfs() [1/2]. void RooSimultaneous::wrapPdfsInBinSamplingPdfs ; (; RooAbsData const & ; data, . double ; precision . ). Wraps the components of this RooSimultaneous in RooBinSamplingPdfs. ; Parameters. [in]dataThe dataset to be used in the eventual fit, used to figure out the observables and whether the dataset is binned. ; [in]precisionPrecision argument for all created RooBinSamplingPdfs. . Definition at line 1085 of file RooSimultaneous.cxx. ◆ wrapPdfsInBinSamplingPdfs() [2/2]. void RooSimultaneous::wrapPdfsInBinSamplingPdfs ; (; RooAbsData const & ; data, . std::map< std::string, double > const & ; precisions, . bool ; useCategoryNames = false . ). Wraps the components of this RooSimultaneous in RooBinSamplingPdfs, with a different precision parameter for each component. ; Parameters. [in]dataThe dataset to be used in the eventual fit, used to figure out the observables and whether the dataset is binned. ; [in]precisionsThe map that gives the precision argument for each component in the RooSimultaneous. The keys are the pdf names. If there is no value for a given component, it will not use the bin integration. Otherwise, the value has the same meaning than in the IntegrateBins() command argument for RooAbsPdf::fitTo(). ; [in]useCategoryNamesIf this flag is set, the category names will be used to look up the precision in the precisions map instead of the pdf names. . Definition at line 1123 of file RooSimultaneous.cxx. Friends And Related Symbol Documentation. ◆ RooSimGenContext. friend class RooSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:100340,wrap,wrapPdfsInBinSamplingPdfs,100340,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['wrap'],['wrapPdfsInBinSamplingPdfs']
Integrability,"ns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TPointDefinition TPoint.h:31; TPoint::fYSCoord_t fYDefinition TPoint.h:36; TPoint::fXSCoord_t fXDefinition TPoint.h:35; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TPolyMarker3D::SetNextPointvirtual Int_t SetNextPoint(Double_t x, Double_t y, Double_t z)Set point following LastPoint to x, y, z.Definition TPolyMarker3D.cxx:523; TPolyMarker3D::Drawvoid Draw(Option_t *option="""") overrideDraws 3-D polymarker with its current attributes.Definition TPolyMarker3D.cxx:242; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:113963,message,message,113963,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['message'],['message']
Integrability,"ns pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:1393,interface,interface,1393,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,1,['interface'],['interface']
Integrability,"ns text entry; TGTextEntry*fTxtQueryNamequery name text entry; TGTextEntry*fTxtSelectorselector name text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE); Create a new Query dialog, used by the Session Viewer, to Edit a Query if; the editmode flag is set, or to create a new one if not set. ~TNewQueryDlg(); Delete query dialog. void Build(TSessionViewer* gui); Build the ""new query"" dialog. void CloseWindow(); Called when window is closed via the window manager. void OnNewQueryMore(); Show/hide options frame and update button text accordingly. void OnBrowseChain(); Call new chain dialog. void OnElementSelected(TObject* obj); Handle OnElementSelected signal coming from new chain dialog. void OnBrowseSelector(); Open file browser to choose selector macro. void OnBrowseEventList(); Browse event list. void OnBtnSaveClicked(); Save current settings in main session viewer. void OnBtnSubmitClicked(); Save and submit query description. void OnBtnCloseClicked(); Close dialog. void Popup(); Display dialog and set focus to query name text entry. void SettingsChanged(); Settings have changed, update GUI accordingly. void UpdateFields(TQueryDescription* desc); Update entry fields with query description values. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for new query dialog.; Essentially used to navigate between text entry fields. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionDialogs.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNewQueryDlg.html:24150,message,messages,24150,root/html528/TNewQueryDlg.html,https://root.cern,https://root.cern/root/html528/TNewQueryDlg.html,1,['message'],['messages']
Integrability,"ns text entry; TGTextEntry*fTxtQueryNamequery name text entry; TGTextEntry*fTxtSelectorselector name text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE); Create a new Query dialog, used by the Session Viewer, to Edit a Query if; the editmode flag is set, or to create a new one if not set. ~TNewQueryDlg(); Delete query dialog. void Build(TSessionViewer* gui); Build the ""new query"" dialog. void CloseWindow(); Called when window is closed via the window manager. void OnNewQueryMore(); Show/hide options frame and update button text accordingly. void OnBrowseChain(); Call new chain dialog. void OnElementSelected(TObject* obj); Handle OnElementSelected signal coming from new chain dialog. void OnBrowseSelector(); Open file browser to choose selector macro. void OnBrowseEventList(); Browse event list. void OnBtnSaveClicked(); Save current settings in main session viewer. void OnBtnSubmitClicked(); Save and submit query description. void OnBtnCloseClicked(); Close dialog. void Popup(); Display dialog and set focus to query name text entry. void SettingsChanged(); Settings have changed, update GUI accordingly. void UpdateFields(TQueryDescription* desc); Update entry fields with query description values. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for new query dialog.; Essentially used to navigate between text entry fields. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionDialogs.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TNewQueryDlg.html:24303,message,messages,24303,root/html530/TNewQueryDlg.html,https://root.cern,https://root.cern/root/html530/TNewQueryDlg.html,1,['message'],['messages']
Integrability,"ns text entry; TGTextEntry*fTxtQueryNamequery name text entry; TGTextEntry*fTxtSelectorselector name text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE); Create a new Query dialog, used by the Session Viewer, to Edit a Query if; the editmode flag is set, or to create a new one if not set. ~TNewQueryDlg(); Delete query dialog. void Build(TSessionViewer* gui); Build the ""new query"" dialog. void CloseWindow(); Called when window is closed via the window manager. void OnNewQueryMore(); Show/hide options frame and update button text accordingly. void OnBrowseChain(); Call new chain dialog. void OnElementSelected(TObject* obj); Handle OnElementSelected signal coming from new chain dialog. void OnBrowseSelector(); Open file browser to choose selector macro. void OnBrowseEventList(); Browse event list. void OnBtnSaveClicked(); Save current settings in main session viewer. void OnBtnSubmitClicked(); Save and submit query description. void OnBtnCloseClicked(); Close dialog. void Popup(); Display dialog and set focus to query name text entry. void SettingsChanged(); Settings have changed, update GUI accordingly. void UpdateFields(TQueryDescription* desc); Update entry fields with query description values. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for new query dialog.; Essentially used to navigate between text entry fields. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionDialogs.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNewQueryDlg.html:24303,message,messages,24303,root/html532/TNewQueryDlg.html,https://root.cern,https://root.cern/root/html532/TNewQueryDlg.html,1,['message'],['messages']
Integrability,"ns to scan, if = -1 no scan is done (default); RooArgSetfNuisanceParameters; RooAbsPdf*fNuisancePdfnuisance pdf (needed when using nuisance sampling technique); intfNumIterationsnumber of iterations (when using ToyMC); RooArgSetfPOIPOI; RooAbsPdf*fPdfmodel pdf (could contain the nuisance pdf as constraint term); ROOT::Math::IBaseFunctionOneDim*fPosteriorFunctionfunction representing the posterior; RooAbsPdf*fPosteriorPdfnormalized (on the poi) posterior pdf ; RooAbsPdf*fPriorPOIprior pdf for POI; RooAbsPdf*fProductPdfinternal pointer to model * prior; doublefSizesize used for getting the interval; Double_tfUpperupper interval bound; Bool_tfValidInterval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BayesianCalculator(); default constructor. BayesianCalculator( /* const char* name, const char* title, */ RooAbsData& data, RooAbsPdf& pdf,						 const RooArgSet& POI,						 RooAbsPdf& priorPOI,						 const RooArgSet* nuisanceParameters ); Constructor from data set, model pdf, parameter of interests and prior pdf; If nuisance parameters are given they will be integrated according either to the prior or; their constraint term included in the model. BayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); Constructor from a data set and a ModelConfig; model pdf, poi and nuisances will be taken from the ModelConfig. ~BayesianCalculator(); destructor. void ClearAll() const; clear all cached pdf objects. void SetModel(const RooStats::ModelConfig& model); set the model to use; The model pdf, prior pdf, parameter of interest and nuisances; will be taken according to the model. RooAbsReal* GetPosteriorFunction() const; Build and return the posterior function (not normalized) as a RooAbsReal; the posterior is obtained from the product of the likelihood function and the; prior pdf which is then intergated in the nuisance parameters (if existing).; A prior function for the nuisance can be specified either in the prior pdf objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:10668,integrat,integrated,10668,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,2,['integrat'],['integrated']
Integrability,"ns |; Private Attributes |; List of all members ; TMVA::LDA Class ReferenceTMVA. . Definition at line 44 of file LDA.h. Public Member Functions;  LDA (Float_t tolerence=1.0e-5, Bool_t debug=false);  constructor ;  ;  ~LDA ();  destructor ;  ; Float_t GetLogLikelihood (const std::vector< Float_t > &x, Int_t k);  Log likelihood function with Gaussian approximation. ;  ; Float_t GetProb (const std::vector< Float_t > &x, Int_t k);  Signal probability with Gaussian approximation. ;  ; void Initialize (const LDAEvents &inputSignal, const LDAEvents &inputBackground);  Create LDA matrix using local events found by knn method. ;  . Private Member Functions; Float_t FSub (const std::vector< Float_t > &x, Int_t k);  Probability value using Gaussian approximation. ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fDebug;  documentation! ;  ; std::map< Int_t, Float_t > fEventFraction;  documentation! ;  ; MsgLogger * fLogger;  ! message logging service ;  ; std::map< Int_t, std::vector< Float_t > > fMu;  documentation! ;  ; UInt_t fNumParams;  documentation! ;  ; TMatrixF * fSigma;  documentation! ;  ; TMatrixF * fSigmaInverse;  documentation! ;  ; Float_t fTolerence;  documentation! ;  . #include <TMVA/LDA.h>; Constructor & Destructor Documentation. ◆ LDA(). TMVA::LDA::LDA ; (; Float_t ; tolerence = 1.0e-5, . Bool_t ; debug = false . ). constructor ; Definition at line 45 of file LDA.cxx. ◆ ~LDA(). TMVA::LDA::~LDA ; (; ). destructor ; Definition at line 58 of file LDA.cxx. Member Function Documentation. ◆ FSub(). Float_t TMVA::LDA::FSub ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). private . Probability value using Gaussian approximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Log likelihood function with Gaussian approximation. ; Definition at line 250 of file LDA.cxx. ◆ GetProb(). Float_t TMVA::LDA::GetProb ; (; const std::vector< Float_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LDA.html:1129,message,message,1129,doc/master/classTMVA_1_1LDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html,1,['message'],['message']
Integrability,"ns |; Private Attributes |; Static Private Attributes |; List of all members ; TSSLSocket Class Reference. . Definition at line 28 of file TSSLSocket.h. Public Member Functions;  TSSLSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  ;  TSSLSocket (const char *sockpath);  ;  TSSLSocket (const char *url, Int_t port, Int_t tcpwindowsize=-1);  ;  TSSLSocket (const TSSLSocket &s);  ;  TSSLSocket (Int_t desc);  ;  TSSLSocket (Int_t desc, const char *sockpath);  ;  TSSLSocket (TInetAddress addr, const char *service, Int_t tcpwindowsize=-1);  ;  TSSLSocket (TInetAddress addr, Int_t port, Int_t tcpwindowsize=-1);  ; virtual ~TSSLSocket ();  Close gracefully the connection, and free SSL structures. ;  ; void Close (Option_t *option="""") override;  Close the SSL connection. ;  ; TClass * IsA () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Receive a raw buffer of specified length bytes. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:1284,message,message,1284,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['message'],['message']
Integrability,ns(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GaussIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:11171,integrat,integration,11171,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['integrat'],['integration']
Integrability,"ns);; 1766 CheckAndFillDSColumns(validColumnNames, TTraits::TypeList<T>());; 1767 ; 1768 using Helper_t = RDFInternal::TakeHelper<T, T, COLL>;; 1769 using Action_t = RDFInternal::RAction<Helper_t, Proxied>;; 1770 auto valuesPtr = std::make_shared<COLL>();; 1771 const auto nSlots = fLoopManager->GetNSlots();; 1772 ; 1773 auto action =; 1774 std::make_unique<Action_t>(Helper_t(valuesPtr, nSlots), validColumnNames, fProxiedPtr, fColRegister);; 1775 return MakeResultPtr(valuesPtr, *fLoopManager, std::move(action));; 1776 }; 1777 ; 1778 ////////////////////////////////////////////////////////////////////////////; 1779 /// \brief Fill and return a one-dimensional histogram with the values of a column (*lazy action*).; 1780 /// \tparam V The type of the column used to fill the histogram.; 1781 /// \param[in] model The returned histogram will be constructed using this as a model.; 1782 /// \param[in] vName The name of the column that will fill the histogram.; 1783 /// \return the monodimensional histogram wrapped in a RResultPtr.; 1784 ///; 1785 /// Columns can be of a container type (e.g. `std::vector<double>`), in which case the histogram; 1786 /// is filled with each one of the elements of the container. In case multiple columns of container type; 1787 /// are provided (e.g. values and weights) they must have the same length for each one of the events (but; 1788 /// possibly different lengths between events).; 1789 /// This action is *lazy*: upon invocation of this method the calculation is; 1790 /// booked but not executed. Also see RResultPtr.; 1791 ///; 1792 /// ### Example usage:; 1793 /// ~~~{.cpp}; 1794 /// // Deduce column type (this invocation needs jitting internally); 1795 /// auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; 1796 /// // Explicit column type; 1797 /// auto myHist2 = myDf.Histo1D<float>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; 1798 /// ~~~; 1799 ///; 1800 /// \note Differently from other ROOT inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:99760,wrap,wrapped,99760,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['wrap'],['wrapped']
Integrability,"ns. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions \( {a_i} \), it returns \( a_n * \prod_{i=0}^{n-1} (1 - a_i) \). More...;  ; class  RooRombergIntegrator;  Adaptive numerical integration algorithm. More...;  ; class  RooSecondMoment;  ; class  RooSharedProperties;  Class RooSharedProperties is the base class for shared properties that ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:17493,wrap,wraps,17493,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['wrap'],['wraps']
Integrability,"ns. Output: IORDER(*) - face order. void TestEdge(Double_t del, Double_t** xyz, Int_t i1, Int_t i2, Int_t* iface, Double_t* abcd, Int_t& irep); Test edge against face (triangle). Input: DEL - precision; XYZ(3,*) - nodes; I1 - 1-st node of edge; I2 - 2-nd node of edge; IFACE(3) - triangular face; ABCD(4) - face plane. Output: IREP:-1 - edge under face; 0 - no decision; +1 - edge before face. void IsoSurface(Int_t ns, Double_t* s, Int_t nx, Int_t ny, Int_t nz, Double_t* x, Double_t* y, Double_t* z, const char* chopt); Draw set of isosurfaces for a scalar function defined on a grid. Input: NS - number of isosurfaces; S(*) - isosurface values; NX - number of slices along X; NY - number of slices along Y; NZ - number of slices along Z; X(*) - slices along X; Y(*) - slices along Y; Z(*) - slices along Z; F(NX,NY,NZ) - function values <- Not used, current histo used instead. DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(1) - isosurface number; ICODES(2) - isosurface number; ICODES(3) - isosurface number; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional function (lightness). CHOPT - options: 'BF' - from BACK to FRONT; 'FB' - from FRONT to BACK. void DrawFaceGouraudShaded(Int_t* icodes, Double_t** xyz, Int_t np, Int_t* iface, Double_t* t); Draw the faces for the Gouraud Shaded Iso surfaces. TPainter3dAlgorithms(). void SetIsoSurfaceParameters(Double_t fmin, Double_t fmax, Int_t ncolor, Int_t ic1, Int_t ic2, Int_t ic3); {fFmin=fmin; fFmax=fmax; fNcolor=ncolor; fIc1=ic1; fIc2=ic2; fIc3=ic3;}. void SetMesh(Int_t mesh = 1); {fMesh=mesh;}. » Author: Rene Brun, Evgueni Tcherniaev, Olivier Couet 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TPainter3dAlgorithms.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-10-04 18:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPainter3dAlgorithms.html:38241,rout,routine,38241,root/html528/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html528/TPainter3dAlgorithms.html,1,['rout'],['routine']
Integrability,"ns. Output: IORDER(*) - face order. void TestEdge(Double_t del, Double_t** xyz, Int_t i1, Int_t i2, Int_t* iface, Double_t* abcd, Int_t& irep); Test edge against face (triangle). Input: DEL - precision; XYZ(3,*) - nodes; I1 - 1-st node of edge; I2 - 2-nd node of edge; IFACE(3) - triangular face; ABCD(4) - face plane. Output: IREP:-1 - edge under face; 0 - no decision; +1 - edge before face. void IsoSurface(Int_t ns, Double_t* s, Int_t nx, Int_t ny, Int_t nz, Double_t* x, Double_t* y, Double_t* z, const char* chopt); Draw set of isosurfaces for a scalar function defined on a grid. Input: NS - number of isosurfaces; S(*) - isosurface values; NX - number of slices along X; NY - number of slices along Y; NZ - number of slices along Z; X(*) - slices along X; Y(*) - slices along Y; Z(*) - slices along Z; F(NX,NY,NZ) - function values <- Not used, current histo used instead. DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(1) - isosurface number; ICODES(2) - isosurface number; ICODES(3) - isosurface number; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional function (lightness). CHOPT - options: 'BF' - from BACK to FRONT; 'FB' - from FRONT to BACK. void DrawFaceGouraudShaded(Int_t* icodes, Double_t** xyz, Int_t np, Int_t* iface, Double_t* t); Draw the faces for the Gouraud Shaded Iso surfaces. TPainter3dAlgorithms(). void SetIsoSurfaceParameters(Double_t fmin, Double_t fmax, Int_t ncolor, Int_t ic1, Int_t ic2, Int_t ic3); {fFmin=fmin; fFmax=fmax; fNcolor=ncolor; fIc1=ic1; fIc2=ic2; fIc3=ic3;}. void SetMesh(Int_t mesh = 1); {fMesh=mesh;}. » Author: Rene Brun, Evgueni Tcherniaev, Olivier Couet 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TPainter3dAlgorithms.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPainter3dAlgorithms.html:38310,rout,routine,38310,root/html530/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html530/TPainter3dAlgorithms.html,1,['rout'],['routine']
Integrability,"ns. Output: IORDER(*) - face order. void TestEdge(Double_t del, Double_t** xyz, Int_t i1, Int_t i2, Int_t* iface, Double_t* abcd, Int_t& irep); Test edge against face (triangle). Input: DEL - precision; XYZ(3,*) - nodes; I1 - 1-st node of edge; I2 - 2-nd node of edge; IFACE(3) - triangular face; ABCD(4) - face plane. Output: IREP:-1 - edge under face; 0 - no decision; +1 - edge before face. void IsoSurface(Int_t ns, Double_t* s, Int_t nx, Int_t ny, Int_t nz, Double_t* x, Double_t* y, Double_t* z, const char* chopt); Draw set of isosurfaces for a scalar function defined on a grid. Input: NS - number of isosurfaces; S(*) - isosurface values; NX - number of slices along X; NY - number of slices along Y; NZ - number of slices along Z; X(*) - slices along X; Y(*) - slices along Y; Z(*) - slices along Z; F(NX,NY,NZ) - function values <- Not used, current histo used instead. DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(1) - isosurface number; ICODES(2) - isosurface number; ICODES(3) - isosurface number; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional function (lightness). CHOPT - options: 'BF' - from BACK to FRONT; 'FB' - from FRONT to BACK. void DrawFaceGouraudShaded(Int_t* icodes, Double_t** xyz, Int_t np, Int_t* iface, Double_t* t); Draw the faces for the Gouraud Shaded Iso surfaces. TPainter3dAlgorithms(). void SetIsoSurfaceParameters(Double_t fmin, Double_t fmax, Int_t ncolor, Int_t ic1, Int_t ic2, Int_t ic3); {fFmin=fmin; fFmax=fmax; fNcolor=ncolor; fIc1=ic1; fIc2=ic2; fIc3=ic3;}. void SetMesh(Int_t mesh = 1); {fMesh=mesh;}. » Author: Rene Brun, Evgueni Tcherniaev, Olivier Couet 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TPainter3dAlgorithms.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPainter3dAlgorithms.html:38310,rout,routine,38310,root/html532/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html532/TPainter3dAlgorithms.html,1,['rout'],['routine']
Integrability,"ns::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDimOptions.html:3935,integrat,integrator,3935,root/html528/ROOT__Math__IntegratorOneDimOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDimOptions.html,6,['integrat'],['integrator']
Integrability,ns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler.; Definition at line 41 of file RWebWindowWSHandler.hxx. Member Data Documentation. ◆ fWindow. RWebWindow& ROOT::RWebWindowWSHandler::fWindow. ! window reference ; Definition at line 123 of file RWebWindowWSHandler.hxx. gui/webdisplay/src/RWebWindowWSHandler.hxx; gui/webdisplay/src/RWebWindowsManager.cxx. ROOTRWebWindowWSHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:17326,interface,interface,17326,doc/master/classROOT_1_1RWebWindowWSHandler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html,1,['interface'],['interface']
Integrability,"ns; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration ; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration ; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Q",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:37695,integrat,integration,37695,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,3,"['integrat', 'interface', 'wrap']","['integration', 'interface', 'wrapper']"
Integrability,"nse Layers); Low-level functions required for the forward propagation of activations through the network. . static void Backward (Tensor_t &activationGradientsBackward, Matrix_t &weightGradients, Matrix_t &biasGradients, const Tensor_t &df, const Tensor_t &activationGradients, const Matrix_t &weights, const Tensor_t &activationBackward);  Perform the complete backward propagation step. ;  ; static void ScaleAdd (Matrix_t &A, const Matrix_t &B, Scalar_t beta=1.0);  Adds a the elements in matrix B scaled by c to the elements in the matrix A. ;  ; static void Copy (Matrix_t &B, const Matrix_t &A);  ; template<typename AMatrix_t > ; static void CopyDiffArch (Matrix_t &B, const AMatrix_t &A);  ; static void ScaleAdd (Tensor_t &A, const Tensor_t &B, Scalar_t beta=1.0);  Above functions extended to vectors. ;  ; static void Copy (Tensor_t &A, const Tensor_t &B);  ; template<typename ATensor_t > ; static void CopyDiffArch (Tensor_t &A, const ATensor_t &B);  ; template<typename AMatrix_t > ; static void CopyDiffArch (std::vector< Matrix_t > &A, const std::vector< AMatrix_t > &B);  ; Activation Functions; For each activation function, the low-level interface contains two routines.; One that applies the activation function to a matrix and one that evaluate the derivatives of the activation function at the elements of a given matrix and writes the results into the result matrix. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const AFloat alpha=1, const AFloat beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const AFloat alpha=1, const AFloat beta=0);  Computes the gradient of the activation function. ;  ; static void IdentityDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Relu (Tensor_t &B);  ; static void Rel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html:8581,interface,interface,8581,doc/master/classTMVA_1_1DNN_1_1TCuda.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"nse Layers); Low-level functions required for the forward propagation of activations through the network. . static void Backward (Tensor_t &activationGradientsBackward, Matrix_t &weightGradients, Matrix_t &biasGradients, const Tensor_t &df, const Tensor_t &activationGradients, const Matrix_t &weights, const Tensor_t &activationBackward);  Perform the complete backward propagation step. ;  ; static void ScaleAdd (Matrix_t &A, const Matrix_t &B, Scalar_t beta=1.0);  Adds a the elements in matrix B scaled by c to the elements in the matrix A. ;  ; static void Copy (Matrix_t &B, const Matrix_t &A);  ; template<typename AMatrix_t > ; static void CopyDiffArch (Matrix_t &B, const AMatrix_t &A);  ; static void ScaleAdd (Tensor_t &A, const Tensor_t &B, Scalar_t beta=1.0);  Above functions extended to vectors. ;  ; static void Copy (Tensor_t &A, const Tensor_t &B);  ; template<typename ATensor_t > ; static void CopyDiffArch (Tensor_t &A, const ATensor_t &B);  ; template<typename AMatrix_t > ; static void CopyDiffArch (std::vector< Matrix_t > &A, const std::vector< AMatrix_t > &B);  ; Activation Functions; For each activation function, the low-level interface contains two routines.; One that applies the activation function to a matrix and one that evaluate the derivatives of the activation function at the elements of a given matrix and writes the results into the result matrix. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const Scalar_t alpha=1, const Scalar_t beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const Scalar_t alpha=1, const Scalar_t beta=0);  Computes the gradient of the activation function. ;  ; static void IdentityDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Relu (Tensor_t &B);  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html:6900,interface,interface,6900,doc/master/classTMVA_1_1DNN_1_1TCpu.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"nserted object to back to drawing stack if requested; 2846 if (pc.getInt(""moveToBack"") && frame->numItems()>1) {; 2847 frame->drawBefore(frame->getObject(0)->GetName(), frame->getCurve()->GetName());; 2848 }; 2849 ; 2850 ; 2851 return frame ;; 2852}; 2853 ; 2854 ; 2855 ; 2856 ; 2857////////////////////////////////////////////////////////////////////////////////; 2858/// Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations; 2859 ; 2860bool RooAbsReal::plotSanityChecks(RooPlot* frame) const; 2861{; 2862 // check that we are passed a valid plot frame to use; 2863 if(nullptr == frame) {; 2864 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOn: frame is null"" << std::endl;; 2865 return true;; 2866 }; 2867 ; 2868 // check that this frame knows what variable to plot; 2869 RooAbsReal* var = frame->getPlotVar() ;; 2870 if(!var) {; 2871 coutE(Plotting) << ClassName() << ""::"" << GetName(); 2872 << "":plotOn: frame does not specify a plot variable"" << std::endl;; 2873 return true;; 2874 }; 2875 ; 2876 // check that the plot variable is not derived; 2877 if(!dynamic_cast<RooAbsRealLValue*>(var)) {; 2878 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOn: cannot plot variable \""""; 2879 << var->GetName() << ""\"" of type "" << var->ClassName() << std::endl;; 2880 return true;; 2881 }; 2882 ; 2883 // check if we actually depend on the plot variable; 2884 if(!this->dependsOn(*var)) {; 2885 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOn: WARNING: variable is not an explicit dependent: ""; 2886 << var->GetName() << std::endl;; 2887 }; 2888 ; 2889 return false ;; 2890}; 2891 ; 2892 ; 2893 ; 2894 ; 2895////////////////////////////////////////////////////////////////////////////////; 2896/// Utility function for plotOn() that constructs the set of; 2897/// observables to project when plotting ourselves as function of; 2898/// 'plotVar'. 'allVars' is the list of variables that must be; 2899/// projecte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:125682,depend,depend,125682,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,3,['depend'],"['depend', 'dependent', 'dependsOn']"
Integrability,"nset, . const char * ; rangeName, . int & ; code . ); const. protected . Retrieve object representing projection integral of input p.d.f over observables iset, while normalizing over observables nset. ; The code argument returned by reference is the unique code defining this particular projection configuration ; Definition at line 109 of file RooProjectedPdf.cxx. ◆ initGenerator(). void RooProjectedPdf::initGenerator ; (; Int_t ; code). inlineoverridevirtual . Interface for one-time initialization to setup the generator for the specified code. ; Reimplemented from RooAbsPdf.; Definition at line 34 of file RooProjectedPdf.h. ◆ IsA(). TClass * RooProjectedPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 73 of file RooProjectedPdf.h. ◆ printMetaArgs(). void RooProjectedPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ; Reimplemented from RooAbsArg.; Definition at line 254 of file RooProjectedPdf.cxx. ◆ redirectServersHook(). bool RooProjectedPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overrideprotectedvirtual . Intercept a server redirection all and update list of dependents if necessary Specifically update the set proxy 'deps' which introduces the dependency on server value dirty flags of ourselves. ; Reimplemented from RooAbsPdf.; Definition at line 211 of file RooProjectedPdf.cxx. ◆ selfNormalized(). bool RooProjectedPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 36 of file RooProjectedPdf.h. ◆ Streamer(). void Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:80065,integrat,integration,80065,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['integrat'],['integration']
Integrability,"nsform;  CVariableRearrangeTransform;  CVariableTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:72342,adapter,adapter,72342,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['adapter'],['adapter']
Integrability,"nsient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:39039,integrat,integration,39039,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,2,['integrat'],"['integrated', 'integration']"
Integrability,"nsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general ple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html:6693,message,messages,6693,root/html530/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html,1,['message'],['messages']
Integrability,"nsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general ple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html:6693,message,messages,6693,root/html532/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html,1,['message'],['messages']
Integrability,"nsigned int i) const;; 251 ; 252 /// return read-only pointer to internal array; 253 const T* Array() const;; 254 /// return pointer to internal array; 255 T* Array();; 256 ; 257 /** @name --- STL-like interface ---; 258 The iterators access the matrix element in the order how they are; 259 stored in memory. The C (row-major) convention is used, and in the; 260 case of symmetric matrices the iterator spans only the lower diagonal; 261 block. For example for a symmetric 3x3 matrices the order of the 6; 262 elements \f${a_0,...a_5}\f$ is:; 263 \f[; 264 M = \left( \begin{array}{ccc}; 265 a_0 & a_1 & a_3 \\; 266 a_1 & a_2 & a_4 \\; 267 a_3 & a_4 & a_5 \end{array} \right); 268 \f]; 269 */; 270 ; 271 /** STL iterator interface. */; 272 iterator begin();; 273 ; 274 /** STL iterator interface. */; 275 iterator end();; 276 ; 277 /** STL const_iterator interface. */; 278 const_iterator begin() const;; 279 ; 280 /** STL const_iterator interface. */; 281 const_iterator end() const;; 282 ; 283 /**; 284 Set matrix elements with STL iterator interface. The data will be copied into the matrix; 285 \param begin start iterator position; 286 \param end end iterator position; 287 \param triang if true only the triangular lower/upper part of the matrix is filled from the iterators; 288 \param lower if true the lower triangular part is filled; 289 ; 290 Size of the matrix must match size of the iterators, if triang is false, otherwise the size of the; 291 triangular block. In the case of symmetric matrices triang is considered always to be true; 292 (what-ever the user specifies) and the size of the iterators must be equal to the size of the; 293 triangular block, which is the number of independent elements of a symmetric matrix: N*(N+1)/2; 294 ; 295 */; 296 template<class InputIterator>; 297 void SetElements(InputIterator begin, InputIterator end, bool triang = false, bool lower = true);; 298 ; 299 /**; 300 Constructor with STL iterator interface. The data will be copied into the matrix;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SMatrix_8h_source.html:9051,interface,interface,9051,doc/master/SMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/SMatrix_8h_source.html,1,['interface'],['interface']
Integrability,"nsional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html:3309,interface,interface,3309,doc/master/classROOT_1_1Math_1_1WrappedTF1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html,1,['interface'],['interface']
Integrability,nsional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:9230,integrat,integration,9230,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['integrat'],['integration']
Integrability,"nsityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ETargetSelection fTargetSelection;  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; Bool_t fFillFoamWithOrigWeights;  BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ;  ; EFoamType fFoamType;  BACKWARDS COMPATIBILITY: type of foam. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamMultiTarget.html:17695,integrat,integration,17695,doc/master/classTMVA_1_1PDEFoamMultiTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamMultiTarget.html,1,['integrat'],['integration']
Integrability,"nst Expr< A, T, D1, D2, R > & ; rhs). inline . Definition at line 551 of file MatrixFunctions.h. ◆ Unit(). template<class A , class T , unsigned int D> . SVector< T, D > ROOT::Math::Unit ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 390 of file Functions.h. Variable Documentation. ◆ eu. const double ROOT::Math::eu = 0.577215664901532860606. static . Definition at line 44 of file Vavilov.cxx. ◆ gDefaultAbsTolerance. double ROOT::Math::gDefaultAbsTolerance = 1.E-6. Definition at line 53 of file GSLMultiRootFinder.cxx. ◆ gDefaultMaxIter. int ROOT::Math::gDefaultMaxIter = 100. Definition at line 52 of file GSLMultiRootFinder.cxx. ◆ gDefaultNpx [1/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 29 of file BrentMinimizer1D.cxx. ◆ gDefaultNpx [2/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 25 of file BrentRootFinder.cxx. ◆ gDefaultNSearch [1/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 30 of file BrentMinimizer1D.cxx. ◆ gDefaultNSearch [2/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 26 of file BrentRootFinder.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::gDefaultRelTolerance = 1.E-10. Definition at line 54 of file GSLMultiRootFinder.cxx. ◆ gFunction. const ROOT::Math::IMultiGenFunction* ROOT::Math::gFunction. function wrapper for the function to be minimized ; Definition at line 12 of file RMinimizer.cxx. ◆ gGradFunction. const ROOT::Math::IMultiGradFunction* ROOT::Math::gGradFunction. function wrapper for the gradient of the function to be minimized ; Definition at line 14 of file RMinimizer.cxx. ◆ gNCalls. int ROOT::Math::gNCalls = 0. integer for the number of function calls ; Definition at line 16 of file RMinimizer.cxx. ◆ kSqrt2. const double ROOT::Math::kSqrt2 = 1.41421356237309515. static . Definition at line 18 of file ProbFuncMathCore.cxx. ROOTMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:199067,wrap,wrapper,199067,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['wrap'],['wrapper']
Integrability,"nst ROOT::Math::FitMethodFunction & fcn, const double *params = nullptr);; 320 ; 321 /**; 322 Fit using a FitMethodGradFunction interface. Same as method above, but now extra information; 323 can be taken from the function class; 324 */; 325 bool FitFCN(const ROOT::Math::FitMethodGradFunction & fcn, const double *params = nullptr);; 326 ; 327 /**; 328 Set the objective function (FCN) using a FitMethodGradFunction interface.; 329 Same as method above, but now extra information can be taken from the function class; 330 */; 331 bool SetFCN(const ROOT::Math::FitMethodGradFunction & fcn, const double *params = nullptr);; 332 ; 333 ; 334 /**; 335 fit using user provided FCN with Minuit-like interface; 336 If npar = 0 it is assumed that the parameters are specified in the parameter settings created before; 337 For the options same consideration as in the previous method; 338 */; 339 typedef void (* MinuitFCN_t )(int &npar, double *gin, double &f, double *u, int flag);; 340 bool FitFCN( MinuitFCN_t fcn, int npar = 0, const double *params = nullptr, unsigned int dataSize = 0, int fitType = 0);; 341 ; 342 /**; 343 set objective function using user provided FCN with Minuit-like interface; 344 If npar = 0 it is assumed that the parameters are specified in the parameter settings created before; 345 For the options same consideration as in the previous method; 346 */; 347 bool SetFCN( MinuitFCN_t fcn, int npar = 0, const double *params = nullptr, unsigned int dataSize = 0, int fitType = 0);; 348 ; 349 /**; 350 Perform a fit with the previously set FCN function. Require SetFCN before; 351 */; 352 bool FitFCN();; 353 ; 354 /**; 355 Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN; 356 */; 357 bool EvalFCN();; 358 ; 359 ; 360 ; 361 /**; 362 Set the fitted function (model function) from a parametric function interface; 363 */; 364 void SetFunction(const IModelFunction & func, bool useGradient = false);; 365 ; 366 /**; 367 Set the fitted fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:13610,interface,interface,13610,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,2,['interface'],['interface']
Integrability,"nst ROOT::Math::IMultiGenFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Fit using the given FCN function represented by a multi-dimensional function interface; (ROOT::Math::IMultiGenFunction).; Give optionally the initial arameter values, data size to have the fit Ndf correctly; set in the FitResult and flag specifying if it is a chi2 fit.; Note that if the parameters values are not given (params=0) the; current parameter settings are used. The parameter settings can be created before; by using the FitConfig::SetParamsSetting. If they have not been created they are created; automatically when the params pointer is not zero.; Note that passing a params != 0 will set the parameter settings to the new value AND also the; step sizes to some pre-defined value (stepsize = 0.3 * abs(parameter_value) ). bool SetFCN(const ROOT::Math::IMultiGenFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Fit using a FitMethodFunction interface. Same as method above, but now extra information; can be taken from the function class. Set the FCN function represented by a multi-dimensional function interface; (ROOT::Math::IMultiGenFunction) and optionally the initial parameters; See also note above for the initial parameters for FitFCN. bool SetFCN(const ROOT::Math::FitMethodFunction& fcn, const double* params = 0). Set the objective function (FCN) using a FitMethodFunction interface.; Same as method above, but now extra information can be taken from the function class. bool FitFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Fit using the given FCN function representing a multi-dimensional gradient function; interface (ROOT::Math::IMultiGradFunction). In this case the minimizer will use the; gradient information provided by the function.; For the options same consideration as in the previous method. bool FitFCN(const ROOT::Math::FitMeth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__Fitter.html:8135,interface,interface,8135,root/html530/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__Fitter.html,5,['interface'],['interface']
Integrability,"nst RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tisOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidlogEvalError(const char* message, const char* serverValueString = 0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*mean(RooRealVar& obs); RooAbsMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooAbsMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:17024,message,message,17024,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['message'],['message']
Integrability,"nst RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const RooAbsArg& var6, const RooAbsArg& var7, const char* name = """"); Constructor for set containing 7 initial objects. RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const RooAbsArg& var6, const RooAbsArg& var7, const RooAbsArg& var8, const char* name = """"); Constructor for set containing 8 initial objects. RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const RooAbsArg& var6, const RooAbsArg& var7, const RooAbsArg& var8, const RooAbsArg& var9, const char* name = """"); Constructor for set containing 9 initial objects. RooArgList(const TCollection& tcoll, const char* name = """"); Constructor from a root TCollection. Elements in the collection that; do not inherit from RooAbsArg will be skipped. A warning message; will be printed for every skipped item. RooArgList(const RooArgList& other, const char* name = """"); Copy constructor. Note that a copy of a list is always non-owning,; even the source list is owning. To create an owning copy of; a list (owning or not), use the snaphot() method. ~RooArgList(); Destructor. RooAbsArg& operator[](Int_t idx) const; Array operator. Element in slot 'idx' must already exist, otherwise; code will abort. When used as lvalue in assignment operations, the element contained in; the list will not be changed, only the value of the existing element!. void writeToStream(ostream& os, Bool_t compact); Write the contents of the argset in ASCII form to given stream. All elements will be printed on a single line separated by a single; white space. The contents of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. A single line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgList.html:14620,message,message,14620,root/html528/RooArgList.html,https://root.cern,https://root.cern/root/html528/RooArgList.html,6,['message'],['message']
Integrability,"nst RooArgProxy& c, const RooArgProxy& d) const; Utility function for use in getAnalyticalIntegral(). If the; contents of proxies a,b,c,d occur in set 'allDeps' then the arguments; held in a,b,c,d are copied from allDeps to analDeps. Bool_t matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Utility function for use in getAnalyticalIntegral(). If the; contents of 'refset' occur in set 'allDeps' then the arguments; held in 'refset' are copied from allDeps to analDeps. Bool_t matchArgsByName(const RooArgSet& allArgs, RooArgSet& matchedArgs, const TList& nameList) const; Check if allArgs contains matching elements for each name in nameList. If it does,; add the corresponding args from allArgs to matchedArgs and return kTRUE. Otherwise; return kFALSE and do not change matchedArgs. RooNumIntConfig* defaultIntegratorConfig(); Returns the default numeric integration configuration for all RooAbsReals. RooNumIntConfig* specialIntegratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumIntConfig* specialIntegratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumIntConfig* getIntegratorConfig() const; Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:59514,integrat,integrator,59514,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['integrat'],['integrator']
Integrability,"nst RooArgSet *nset) const;  ; void disableCache (bool flag);  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; virtual void fillCacheObject (PdfCacheElem &cache) const =0;  ; PdfCacheElem * getCache (const RooArgSet *nset, bool recalculate=true) const;  Retrieve cache object associated with given choice of observables. ;  ; virtual TString histNameSuffix () const;  ; virtual const char * inputBaseName () const =0;  ; virtual const char * payloadUniqueSuffix () const;  ; virtual RooAbsArg & pdfObservable (RooAbsArg &histObservable) const;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:64158,rout,routine,64158,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['rout'],['routine']
Integrability,"nst RooArgSet& iset, const RooArgSet& nset, const RooNumIntConfig& cfg, const char* rangeName = 0) const; virtual RooAbsReal*createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; RooAbsReal*createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; RooAbsReal*createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); const RooAbsReal*createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tdefaultErrorLevel() const; static RooNumIntConfig*defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:7144,depend,dependentVars,7144,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['depend'],['dependentVars']
Integrability,"nst RooArgSet& iset, const RooArgSet& nset, const char* isetRangeName) const; Make an appropriate automatic name for a RooGenProdProj object in getPartIntList(). Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all observables for internal integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooProdPdf implements two strategies in implementing analytical integrals. First, PDF components whose entire set of dependents are requested to be integrated; can be dropped from the product, as they will integrate out to 1 by construction. Second, RooProdPdf queries each remaining component PDF for its analytical integration; capability of the requested set ('allVars'). It finds the largest common set of variables; that can be integrated by all remaining components. If such a set exists, it reconfirms that; each component is capable of analytically integrating the common set, and combines the components; individual integration codes into a single integration code valid for RooProdPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Bool_t checkObservables(const RooArgSet* nset) const; Obsolete. RooAbsPdf::ExtendMode extendMode() const; If this product contains exactly one extendable p.d.f return the extension abilities of; that p.d.f, otherwise return CanNotBeExtended. Double_t expectedEvents(const RooArgSet* nset) const; Return the expected number of events associated with the extentable input p.d.f; in the product. If there is no extendable term, return zero and issue and error. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:52330,integrat,integrated,52330,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,6,['integrat'],['integrated']
Integrability,"nst RooArgSet& iset, const RooArgSet& nset, const char* isetRangeName) const; Make an appropriate automatic name for a RooGenProdProj object in getPartIntList(). Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all observables for internal integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooProdPdf implements two strategies in implementing analytical integrals. First, PDF components whose entire set of dependents are requested to be integrated; can be dropped from the product, as they will integrate out to 1 by construction. Second, RooProdPdf queries each remaining component PDF for its analytical integration; capability of the requested set ('allVars'). It finds the largest common set of variables; that can be integrated by all remaining components. If such a set exists, it reconfirms that; each component is capable of analytically integrating the common set, and combines the components; individual integration codes into a single integration code valid for RooProdPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Bool_t checkObservables(const RooArgSet* nset) const; Obsolete. RooAbsPdf::ExtendMode extendMode() const; If this product contains exactly one extendable p.d.f return the extension abilities of; that p.d.f, otherwise return CanNotBeExtended. Double_t expectedEvents(const RooArgSet* nset); Return the expected number of events associated with the extentable input p.d.f; in the product. If there is no extendable term, return zero and issue and error. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:50281,integrat,integrated,50281,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['integrat'],['integrated']
Integrability,"nst TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Default streaming in cases where either we have no way to know what to do or if Property() has not ye...Definition TClass.cxx:6873; TClass::SetUnloadedvoid SetUnloaded()Call this method to indicate that the shared library containing this class's code has been removed (u...Definition TClass.cxx:6309; TClass::GetDeleteArrayROOT::DelArrFunc_t GetDeleteArray() constReturn the wrapper around delete [] ThiObject.Definition TClass.cxx:7471; TClass::HasInterpreterInfoInMemoryBool_t HasInterpreterInfoInMemory() constDefinition TClass.h:409; TClass::fClassMenuListTList * fClassMenuListDefinition TClass.h:211; TClass::fConvStreamerFuncClassConvStreamerFunc_t fConvStreamerFuncDefinition TClass.h:242; TClass::BuildRealDatavoid BuildRealData(void *pointer=nullptr, Bool_t isTransient=kFALSE)Build a full list of persistent data members.Definition TClass.cxx:2031; TClass::SetRuntimePropertiesvoid SetRuntimeProperties()Internal routine to set calculate the class properties that can only be known at run-time,...Definition TClass.cxx:6194; TClass::BuildEmulatedRealDatavoid BuildEmulatedRealData(const char *name, Longptr_t offset, TClass *cl, Bool_t isTransient=kFALSE)Build the list of real data for an emulated class.Definition TClass.cxx:2112; TClass::LoadClassstatic TClass * LoadClass(const char *requestedname, Bool_t silent)Helper function used by TClass::GetClass().Definition TClass.cxx:5749; TClass::fSharedLibsTString fSharedLibsDefinition TClass.h:227; TClass::GetTypeInfoconst std::type_info * GetTypeInfo() constDefinition TClass.h:496; TClass::GetListOfDataMembersTList * GetListOfDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of a class.Definition TClass.cxx:3770; TClass::ENewTypeENewTypeDefinition TClass.h:107; TClass::kClassNew@ kClassNewDefinition TClass.h:107; TClass::kRealNew@ kRealNewDefinition TClass.h:107; TClass::kDummyNew@ kDummyNewDefinition TClass.h:107; TClass::Movevoid Mov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:58279,rout,routine,58279,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['rout'],['routine']
Integrability,"nst TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Default streaming in cases where either we have no way to know what to do or if Property() has not ye...Definition TClass.cxx:6873; TClass::SetUnloadedvoid SetUnloaded()Call this method to indicate that the shared library containing this class's code has been removed (u...Definition TClass.cxx:6309; TClass::GetDeleteArrayROOT::DelArrFunc_t GetDeleteArray() constReturn the wrapper around delete [] ThiObject.Definition TClass.cxx:7471; TClass::HasInterpreterInfoInMemoryBool_t HasInterpreterInfoInMemory() constDefinition TClass.h:409; TClass::fClassMenuListTList * fClassMenuListDefinition TClass.h:211; TClass::fConvStreamerFuncClassConvStreamerFunc_t fConvStreamerFuncDefinition TClass.h:242; TClass::BuildRealDatavoid BuildRealData(void *pointer=nullptr, Bool_t isTransient=kFALSE)Build a full list of persistent data members.Definition TClass.cxx:2031; TClass::SetRuntimePropertiesvoid SetRuntimeProperties()Internal routine to set calculate the class properties that can only be known at run-time,...Definition TClass.cxx:6194; TClass::BuildEmulatedRealDatavoid BuildEmulatedRealData(const char *name, Longptr_t offset, TClass *cl, Bool_t isTransient=kFALSE)Build the list of real data for an emulated class.Definition TClass.cxx:2112; TClass::LoadClassstatic TClass * LoadClass(const char *requestedname, Bool_t silent)Helper function used by TClass::GetClass().Definition TClass.cxx:5749; TClass::fSharedLibsTString fSharedLibsDefinition TClass.h:227; TClass::GetTypeInfoconst std::type_info * GetTypeInfo() constDefinition TClass.h:496; TClass::GetListOfDataMembersTList * GetListOfDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of a class.Definition TClass.cxx:3770; TClass::ENewTypeENewTypeDefinition TClass.h:107; TClass::kRealNew@ kRealNewDefinition TClass.h:107; TClass::Movevoid Move(void *arenaFrom, void *arenaTo) constRegister the fact that an object was moved from the memory location",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:323746,rout,routine,323746,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['rout'],['routine']
Integrability,"nst TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Default streaming in cases where either we have no way to know what to do or if Property() has not ye...Definition TClass.cxx:6940; TClass::SetUnloadedvoid SetUnloaded()Call this method to indicate that the shared library containing this class's code has been removed (u...Definition TClass.cxx:6376; TClass::GetDeleteArrayROOT::DelArrFunc_t GetDeleteArray() constReturn the wrapper around delete [] ThiObject.Definition TClass.cxx:7538; TClass::HasInterpreterInfoInMemoryBool_t HasInterpreterInfoInMemory() constDefinition TClass.h:409; TClass::fClassMenuListTList * fClassMenuListDefinition TClass.h:211; TClass::fConvStreamerFuncClassConvStreamerFunc_t fConvStreamerFuncDefinition TClass.h:242; TClass::BuildRealDatavoid BuildRealData(void *pointer=nullptr, Bool_t isTransient=kFALSE)Build a full list of persistent data members.Definition TClass.cxx:2098; TClass::SetRuntimePropertiesvoid SetRuntimeProperties()Internal routine to set calculate the class properties that can only be known at run-time,...Definition TClass.cxx:6261; TClass::BuildEmulatedRealDatavoid BuildEmulatedRealData(const char *name, Longptr_t offset, TClass *cl, Bool_t isTransient=kFALSE)Build the list of real data for an emulated class.Definition TClass.cxx:2179; TClass::LoadClassstatic TClass * LoadClass(const char *requestedname, Bool_t silent)Helper function used by TClass::GetClass().Definition TClass.cxx:5816; TClass::fSharedLibsTString fSharedLibsDefinition TClass.h:227; TClass::GetTypeInfoconst std::type_info * GetTypeInfo() constDefinition TClass.h:496; TClass::GetListOfDataMembersTList * GetListOfDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of a class.Definition TClass.cxx:3837; TClass::ENewTypeENewTypeDefinition TClass.h:107; TClass::kClassNew@ kClassNewDefinition TClass.h:107; TClass::kRealNew@ kRealNewDefinition TClass.h:107; TClass::kDummyNew@ kDummyNewDefinition TClass.h:107; TClass::Movevoid Mov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:58107,rout,routine,58107,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['rout'],['routine']
Integrability,"nst TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Default streaming in cases where either we have no way to know what to do or if Property() has not ye...Definition TClass.cxx:6940; TClass::SetUnloadedvoid SetUnloaded()Call this method to indicate that the shared library containing this class's code has been removed (u...Definition TClass.cxx:6376; TClass::GetDeleteArrayROOT::DelArrFunc_t GetDeleteArray() constReturn the wrapper around delete [] ThiObject.Definition TClass.cxx:7538; TClass::HasInterpreterInfoInMemoryBool_t HasInterpreterInfoInMemory() constDefinition TClass.h:409; TClass::fClassMenuListTList * fClassMenuListDefinition TClass.h:211; TClass::fConvStreamerFuncClassConvStreamerFunc_t fConvStreamerFuncDefinition TClass.h:242; TClass::BuildRealDatavoid BuildRealData(void *pointer=nullptr, Bool_t isTransient=kFALSE)Build a full list of persistent data members.Definition TClass.cxx:2098; TClass::SetRuntimePropertiesvoid SetRuntimeProperties()Internal routine to set calculate the class properties that can only be known at run-time,...Definition TClass.cxx:6261; TClass::BuildEmulatedRealDatavoid BuildEmulatedRealData(const char *name, Longptr_t offset, TClass *cl, Bool_t isTransient=kFALSE)Build the list of real data for an emulated class.Definition TClass.cxx:2179; TClass::LoadClassstatic TClass * LoadClass(const char *requestedname, Bool_t silent)Helper function used by TClass::GetClass().Definition TClass.cxx:5816; TClass::fSharedLibsTString fSharedLibsDefinition TClass.h:227; TClass::GetTypeInfoconst std::type_info * GetTypeInfo() constDefinition TClass.h:496; TClass::GetListOfDataMembersTList * GetListOfDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of a class.Definition TClass.cxx:3837; TClass::ENewTypeENewTypeDefinition TClass.h:107; TClass::kRealNew@ kRealNewDefinition TClass.h:107; TClass::Movevoid Move(void *arenaFrom, void *arenaTo) constRegister the fact that an object was moved from the memory location",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:326384,rout,routine,326384,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['rout'],['routine']
Integrability,"nst TClass * ; oldClass, . TClass * ; newClass . ). overridevirtual . Function called by the TClass constructor when replacing an emulated class by the real class. ; Reimplemented from TStreamerElement.; Definition at line 839 of file TStreamerElement.cxx. ◆ WriteBuffer(). Int_t TStreamerBase::WriteBuffer ; (; TBuffer & ; b, . char * ; pointer . ). Write the base class into the buffer. ; Definition at line 860 of file TStreamerElement.cxx. Member Data Documentation. ◆ fBaseCheckSum. UInt_t& TStreamerBase::fBaseCheckSum. protected . Definition at line 158 of file TStreamerElement.h. ◆ fBaseClass. TClass* TStreamerBase::fBaseClass. protected . checksum of the base class (used during memberwise streaming) ; Definition at line 159 of file TStreamerElement.h. ◆ fBaseVersion. Int_t TStreamerBase::fBaseVersion. protected . Definition at line 157 of file TStreamerElement.h. ◆ fConvStreamerFunc. ClassConvStreamerFunc_t TStreamerBase::fConvStreamerFunc. protected . Pointer to a wrapper around a custom streamer member function. ; Definition at line 162 of file TStreamerElement.h. ◆ fErrorMsg. TString TStreamerBase::fErrorMsg. protected . Pointer to the current StreamerInfo for the baset class. ; Definition at line 164 of file TStreamerElement.h. ◆ fNewBaseClass. TClass* TStreamerBase::fNewBaseClass. protected . pointer to base class ; Definition at line 160 of file TStreamerElement.h. ◆ fStreamerFunc. ClassStreamerFunc_t TStreamerBase::fStreamerFunc. protected . pointer to new base class if renamed ; Definition at line 161 of file TStreamerElement.h. ◆ fStreamerInfo. TVirtualStreamerInfo* TStreamerBase::fStreamerInfo. protected . Pointer to a wrapper around a custom convertion streamer member function. ; Definition at line 163 of file TStreamerElement.h. Libraries for TStreamerBase:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerBase. ROOT master - Reference Guid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBase.html:24555,wrap,wrapper,24555,doc/master/classTStreamerBase.html,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html,1,['wrap'],['wrapper']
Integrability,"nst TCpuMatrix< Scalar_t > &weights_candidate, const TCpuMatrix< Scalar_t > &weights_reset_state, const TCpuMatrix< Scalar_t > &weights_update_state, const TCpuMatrix< Scalar_t > &weights_candidate_state, const TCpuMatrix< Scalar_t > &input, TCpuMatrix< Scalar_t > &input_gradient, bool resetGateAfter);  Backward pass for GRU Network. ;  ; Forward and Backward Propagation in Reshape Layer; static void Reshape (Matrix_t &A, const Matrix_t &B);  Transform the matrix B to a matrix with different dimensions A. ;  ; static void Flatten (Tensor_t &A, const Tensor_t &B);  Flattens the tensor B, such that each matrix, is stretched in one row, resulting with a matrix A. ;  ; static void Deflatten (Tensor_t &A, const Tensor_t &B);  Transforms each row of B to a matrix and stores it in the tensor B. ;  ; static void Rearrange (Tensor_t &out, const Tensor_t &in);  Rearrage data according to time fill B x T x D out with T x B x D matrix in. ;  ; Additional Arithmetic Functions; Additional arithmetic on CUDA matrices used to implement the low-level interface. . static void Multiply (Matrix_t &C, const Matrix_t &A, const Matrix_t &B);  Standard multiplication of two matrices A and B with the result being written into C. ;  ; static void TransposeMultiply (Matrix_t &output, const Matrix_t &input, const Matrix_t &Weights, Scalar_t alpha=1.0, Scalar_t beta=0.);  Matrix multiplication of two matrices A and B^T (transposed) with the result being written into C. ;  ; static void Hadamard (Tensor_t &A, const Tensor_t &B);  In-place Hadamard (element-wise) product of matrices A and B with the result being written into A. ;  ; static void Hadamard (Matrix_t &A, const Matrix_t &B);  ; static void SumColumns (Matrix_t &B, const Matrix_t &A, Scalar_t alpha=1.0, Scalar_t beta=0.);  Sum columns of (m x n) matrix A and write the results into the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html:21629,interface,interface,21629,doc/master/classTMVA_1_1DNN_1_1TCpu.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html,1,['interface'],['interface']
Integrability,"nst TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TContextMenuImp;  TContextMenuImp (const TContextMenuImp &cmi);  ; TContextMenuImp & operator= (const TContextMenuImp &cmi);  . Private Member Functions;  TRootContextMenu (const TRootContextMenu &);  ; void CreateMenu (TObject *object);  Create the context menu depending on the selected object. ;  ; TRootContextMenu & operator= (const TRootContextMenu &);  . Private Attributes; TRootDialog * fDialog;  dialog prompting for command line arguments ;  ; TList * fTrash;  list of objects to be deleted before refilling menu ;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootContextMenu.html:29113,depend,depending,29113,doc/master/classTRootContextMenu.html,https://root.cern,https://root.cern/doc/master/classTRootContextMenu.html,1,['depend'],['depending']
Integrability,"nst TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedPopup(const TGWindow* p, const TGWindow* m, UInt_t w, UInt_t h, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); Create a popup frame. void EndPopup(); Ungrab pointer and unmap popup window. void PlacePopup(Int_t x, Int_t y, UInt_t w, UInt_t h); Place popup window at the specified place. Bool_t HandleButton(Event_t* event); Handle mouse button event in popup window. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages generated by popup window. virtual ~TGedPopup(); { }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGedPopup.html:19894,message,messages,19894,root/html534/TGedPopup.html,https://root.cern,https://root.cern/root/html534/TGedPopup.html,1,['message'],['messages']
Integrability,"nst TMVA::IMethod&); virtual voidPrintHelpMessage() const; virtual voidProcessOptions(); virtual voidReadWeightsFromStream(istream&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTrain(); virtual voidWriteMonitoringHistosToFile() const. protected:. virtual voidGetHelpMessage() const; virtual voidMakeClassSpecific(ostream&, const TString&) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IMethod(); default destructur. {}. const char * GetName() const; ------- virtual member functions to be implemented by each MVA method; the name of the method. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1). void Train( void ); training method. void ReadWeightsFromStream(istream& ); read weights from output stream. void WriteMonitoringHistosToFile( void ); write method specific monitoring histograms to target file. void MakeClass(const TString& classFileName = TString("""")) const; make ROOT-independent C++ class for classifier response. const Ranking* CreateRanking(); create ranking. void PrintHelpMessage() const; print help message. void Init(). void DeclareOptions(). void ProcessOptions(). Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets). void MakeClassSpecific(ostream& , const TString& ) const; make ROOT-independent C++ class for classifier response (classifier-specific implementation). void GetHelpMessage() const; get specific help message from classifer. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__IMethod.html:2222,message,message,2222,root/html534/TMVA__IMethod.html,https://root.cern,https://root.cern/root/html534/TMVA__IMethod.html,2,['message'],['message']
Integrability,"nst TString& theOpt, TList& loo) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfConfigDescriptiondescription of this configurable; TStringfConfigNamethe name of this configurable; TMVA::OptionBase*fLastDeclaredOption! last declared option; TListfListOfOptions! option list; TMVA::MsgLogger*fLogger! message logger; Bool_tfLooseOptionCheckingEnabled! checker for option string; TStringfOptions! options string; TStringfReferenceFilereference file for options writing. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Configurable(const TString& theOption = """"); constructor. ~Configurable(); default destructur. void SplitOptions(const TString& theOpt, TList& loo) const; splits the option string at ':' and fills the list 'loo' with the primitive strings. void ResetSetFlag(); resets the IsSet falg for all declare options; to be called before options are read from stream. void ParseOptions(); options parser. void CheckForUnusedOptions() const; checks for unused options in option string. void PrintOptions() const; prints out the options set in the options string and the defaults. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to output stream (e.g. in writing the MVA weight files. void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Configurable.html:6731,message,message,6731,root/html602/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html602/TMVA__Configurable.html,2,['message'],['message']
Integrability,"nst TUnuranEmpDist& dist); boolSetMethodAndInit(); boolSetMultiDistribution(const TUnuranMultiContDist& dist); boolSetRandomGenerator(). private:. TUnuran(const TUnuran&); TUnuran&operator=(const TUnuran& rhs). Data Members; protected:. auto_ptr<TUnuranBaseDist>fDistpointer for distribution wrapper; unur_gen*fGenpointer to the UnuRan C generator struct; stringfMethodstring representing the method; TRandom*fRngpointer to ROOT random number generator; unur_distr*fUdistrpointer to the UnuRan C distribution struct; unur_urng*fUrngpointer to Unuran C random generator struct . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuran(TRandom* r = 0, unsigned int log = 0). Constructor with a generator instance and given level of log output. ~TUnuran(). Destructor. TUnuran(const TUnuran& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. bool Init(const std::string & distr, const std::string & method). initialize with Unuran string interface. bool Init(const TUnuranContDist& distr, const string& method = ""auto""). Initialize method for continuous one-dimensional distribution.; User must provide a distribution object (which is copied inside) and a string for a method.; For the list of available method for 1D cont. distribution see the; <A href=""http://statmath.wu-wien.ac.at/unuran/doc/unuran.html#Methods_005ffor_005fCONT"">UnuRan doc</A>.; A re-initialization is needed whenever distribution parameters have been changed. bool Init(const TUnuranMultiContDist& distr, const string& method = ""hitro""). Initialize method for continuous multi-dimensional distribution.; User must provide a distribution object (which is copied inside) and a string for a method.; For the list of available method for multivariate cont. distribution see the; <A href=""http://statmath.wu-wien.ac.at/unuran/doc/unuran.html#Methods_005ffor_005fCVEC"">UnuRan doc</A>; A re-initialization is needed whenever distribution parameters have been cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnuran.html:3768,interface,interface,3768,root/html528/TUnuran.html,https://root.cern,https://root.cern/root/html528/TUnuran.html,4,['interface'],['interface']
Integrability,"nst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::Streamervoid Streamer(TBuffer &) overrideStream an object of class TObject.; TObjArray::GetObjectRefTObject ** GetObjectRef() constDefinition TObjArray.h:63; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::kIsOnHeap@ kIsOnHeapobject is on heapDefinition TObject.h:81; TObject::kNotDeleted@ kNotDeletedobject has not been deletedDefinition TObject.h:82; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::kIsReferenced@ kIsReferencedif object is referenced by a TRef or TRefArrayDefinition TObject.h:65; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TProcessID::PutObjectWithIDvoid PutObjectWithID(TObject *obj, UInt_t uid=0)stores the object at the uid th slot in the table of objects The object uniqued is set as well as its...Definition TProcessID.cxx:383; TRefPersistent Reference link to a TObject A TRef is a lightweight object pointing to any TObject.Definition TRef.h:32; TRef::Streamervoid Streamer(TBuffer &) overrideStream an object of class TRef.Definition TRef.cxx:486; TRef::Classstatic TClass * Class(); TStreamerArtificialDefinition TStre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoReadBuffer_8cxx_source.html:80747,message,message,80747,doc/master/TStreamerInfoReadBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoReadBuffer_8cxx_source.html,1,['message'],['message']
Integrability,"nst char * RooNumGenConfig::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file RooNumGenConfig.h. ◆ defaultConfig(). RooNumGenConfig & RooNumGenConfig::defaultConfig ; (; ). static . Return reference to instance of default numeric integrator configuration object. ; Definition at line 44 of file RooNumGenConfig.cxx. ◆ defaultPrintStyle(). RooPrintable::StyleOption RooNumGenConfig::defaultPrintStyle ; (; Option_t * ; opt); const. overridevirtual . Reimplemented from RooPrintable.; Definition at line 302 of file RooNumGenConfig.cxx. ◆ getConfigSection() [1/2]. RooArgSet & RooNumGenConfig::getConfigSection ; (; const char * ; name). Return section with configuration parameters for integrator with given (class) name. ; Definition at line 279 of file RooNumGenConfig.cxx. ◆ getConfigSection() [2/2]. const RooArgSet & RooNumGenConfig::getConfigSection ; (; const char * ; name); const. Retrieve configuration information specific to integrator with given name. ; Definition at line 288 of file RooNumGenConfig.cxx. ◆ IsA(). TClass * RooNumGenConfig::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file RooNumGenConfig.h. ◆ method1D() [1/2]. RooCategory & RooNumGenConfig::method1D ; (; bool ; cond, . bool ; cat . ). Definition at line 172 of file RooNumGenConfig.cxx. ◆ method1D() [2/2]. const RooCategory & RooNumGenConfig::method1D ; (; bool ; cond, . bool ; cat . ); const. Definition at line 208 of file RooNumGenConfig.cxx. ◆ method2D() [1/2]. RooCategory & RooNumGenConfig::method2D ; (; bool ; cond, . bool ; cat . ). Definition at line 184 of file RooNumGenConfig.cxx. ◆ method2D() [2/2]. const RooCategory & RooNumGenConfig::method2D ; (; bool ; cond, . bool ; cat . ); const. Definition at line 217 of file RooNumGenConfig.cxx. ◆ methodND() [1/2]. RooCategory & RooNumGenConfig::methodND ; (; bool ; cond, . bool ; cat .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:17380,integrat,integrator,17380,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integrator']
Integrability,"nst char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::kOnlyPrepStep@ kOnlyPrepStepUsed to request that the class specific implementation of TObject::Write just prepare the objects to ...Definition TObject.h:106; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPrincipalPrincipal Components Analysis (PCA)Definition TPrincipal.h:21; TRealDataThe TRealData class manages the effective list of all data members for a given class.Definition TRealData.h:30; TRealData::GetNameconst char * GetName() const overrideReturns name of object.Definition TRealData.h:52; TRealData::GetDataMemberTDataMember * GetDataMember() constDefinition TRealData.h:53; TRealDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:423159,message,message,423159,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['message'],['message']
Integrability,"nst char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:2191,integrat,integrated,2191,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['integrat'],['integrated']
Integrability,"nst char * ; str, . Int_t ; kind, . TList * ; slaves . ). private . Broadcast a character string buffer to all slaves in the specified list. ; Use kind to set the TMessage what field. Returns the number of slaves the message was sent to. Returns -1 in case of error. ; Definition at line 2518 of file TProof.cxx. ◆ Broadcast() [2/6]. Int_t TProof::Broadcast ; (; const char * ; str, . Int_t ; kind = kMESS_STRING, . ESlaves ; list = kActive . ). private . Broadcast a character string buffer to all slaves in the specified list (either all slaves or only the active slaves). ; Use kind to set the TMessage what field. Returns the number of slaves the message was sent to. Returns -1 in case of error. ; Definition at line 2531 of file TProof.cxx. ◆ Broadcast() [3/6]. Int_t TProof::Broadcast ; (; const TMessage & ; mess, . ESlaves ; list = kActive . ). private . Broadcast a message to all slaves in the specified list (either all slaves or only the active slaves). ; Returns the number of slaves the message was successfully sent to. Returns -1 in case of error. ; Definition at line 2502 of file TProof.cxx. ◆ Broadcast() [4/6]. Int_t TProof::Broadcast ; (; const TMessage & ; mess, . TList * ; slaves . ). private . Broadcast a message to all slaves in the specified list. ; Returns the number of slaves the message was successfully sent to. Returns -1 in case of error. ; Definition at line 2475 of file TProof.cxx. ◆ Broadcast() [5/6]. Int_t TProof::Broadcast ; (; Int_t ; kind, . ESlaves ; list = kActive . ). inlineprivate . Definition at line 634 of file TProof.h. ◆ Broadcast() [6/6]. Int_t TProof::Broadcast ; (; Int_t ; kind, . TList * ; slaves . ). inlineprivate . Definition at line 633 of file TProof.h. ◆ BroadcastFile() [1/2]. Int_t TProof::BroadcastFile ; (; const char * ; file, . Int_t ; opt, . const char * ; rfile, . TList * ; wrks . ). private . Broadcast file to all workers in the specified list. ; Returns the number of workers the buffer was sent to. Returns -1 in case of e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:67706,message,message,67706,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['message'],['message']
Integrability,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1AbsComposition.html:2567,message,message,2567,doc/master/classTF1AbsComposition.html,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html,4,['message'],['message']
Integrability,"nst char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; ROOT::Internal::RDF::TValueGetterHelper class which keeps track for each slot where to get the entry.Definition RArrowDS.cxx:204; ROOT::RDF::RArrowDSRDataFrame data source class to interface with Apache Arrow.Definition RArrowDS.hxx:30; ROOT::RDF::RArrowDS::GetEntryRangesstd::vector< std::pair< ULong64_t, ULong64_t > > GetEntryRanges() finalReturn ranges of entries to distribute to tasks.Definition RArrowDS.cxx:469; ROOT::RDF::RArrowDS::SetNSlotsvoid SetNSlots(unsigned int nSlots) finalInform RDataSource of the number of processing slots (i.e.Definition RArrowDS.cxx:554; ROOT::RDF::RArrowDS::~RArrowDS~RArrowDS()Destructor.Definition RArrowDS.cxx:460; ROOT::RDF::RArrowDS::fNSlotssize_t fNSlotsDefinition RArrowDS.hxx:35; ROOT::RDF::RArrowDS::HasColumnbool HasColumn(std::string_view colName) const finalChecks if the dataset has a certain column.Definition RArrowDS.cxx:493; ROOT::RDF::RArrowDS::InitSlotvoid InitSlot(unsigned int slot, ULong64_t firstEntry) finalConvenience method called at the start of the data processing associated to a slot.Definition RArrowDS.cxx:511; ROOT::RDF::RArrowDS::GetLabelstd::string GetLabel() finalReturn a string represen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RArrowDS_8hxx_source.html:3469,interface,interface,3469,doc/master/RArrowDS_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RArrowDS_8hxx_source.html,1,['interface'],['interface']
Integrability,"nst char* /* attribute */) final;; 485 ; 486 ; 487 // Function Template interface; 488 DeclId_t GetDeclId(FuncTempInfo_t *info) const final;; 489 void FuncTempInfo_Delete(FuncTempInfo_t * /* ft_info */) const final;; 490 FuncTempInfo_t *FuncTempInfo_Factory(DeclId_t declid) const final;; 491 FuncTempInfo_t *FuncTempInfo_FactoryCopy(FuncTempInfo_t * /* ft_info */) const final;; 492 Bool_t FuncTempInfo_IsValid(FuncTempInfo_t * /* ft_info */) const final;; 493 UInt_t FuncTempInfo_TemplateNargs(FuncTempInfo_t * /* ft_info */) const final;; 494 UInt_t FuncTempInfo_TemplateMinReqArgs(FuncTempInfo_t * /* ft_info */) const final;; 495 Long_t FuncTempInfo_Property(FuncTempInfo_t * /* ft_info */) const final;; 496 Long_t FuncTempInfo_ExtraProperty(FuncTempInfo_t * /* ft_info */) const final;; 497 void FuncTempInfo_Name(FuncTempInfo_t * /* ft_info */, TString& name) const final;; 498 void FuncTempInfo_Title(FuncTempInfo_t * /* ft_info */, TString& name) const final;; 499 ; 500 // MethodInfo interface; 501 DeclId_t GetDeclId(MethodInfo_t *info) const final;; 502 void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const final;; 503 void MethodInfo_Delete(MethodInfo_t* minfo) const final;; 504 MethodInfo_t* MethodInfo_Factory() const final;; 505 MethodInfo_t* MethodInfo_Factory(ClassInfo_t *clinfo) const final;; 506 MethodInfo_t *MethodInfo_Factory(DeclId_t declid) const final;; 507 MethodInfo_t* MethodInfo_FactoryCopy(MethodInfo_t* minfo) const final;; 508 void* MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const final;; 509 bool MethodInfo_IsValid(MethodInfo_t* minfo) const final;; 510 int MethodInfo_NArg(MethodInfo_t* minfo) const final;; 511 int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const final;; 512 int MethodInfo_Next(MethodInfo_t* minfo) const final;; 513 Long_t MethodInfo_Property(MethodInfo_t* minfo) const final;; 514 Long_t MethodInfo_ExtraProperty(MethodInfo_t* minfo) const final;; 515 TypeInfo_t* MethodInfo_Type(MethodInfo_t* minfo) const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:27940,interface,interface,27940,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['interface'],['interface']
Integrability,"nst char* name=nullptr);; 84 ~RooAbsReal() override;; 85 ; 86 ; 87 ; 88 ; 89 //////////////////////////////////////////////////////////////////////////////////; 90 /// Evaluate object. Returns either cached value or triggers a recalculation.; 91 /// The recalculation happens by calling getValV(), which in the end calls the; 92 /// virtual evaluate() functions of the respective PDFs.; 93 /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; 94 /// If the set is `nullptr`, an unnormalised value is returned.; 95 /// \note The normalisation is arbitrary, because it is up to the implementation; 96 /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; 97 /// of the variables is also ignored.; 98 ///; 99 /// To normalise the result properly, a RooArgSet has to be passed, which contains; 100 /// the variables to normalise over.; 101 /// These are integrated over their current ranges to compute the normalisation constant,; 102 /// and the unnormalised result is divided by this value.; 103 inline double getVal(const RooArgSet* normalisationSet = nullptr) const {; 104 // Sometimes, the calling code uses an empty RooArgSet to request evaluation; 105 // without normalization set instead of following the `nullptr` convention.; 106 // To remove this ambiguity which might not always be correctly handled in; 107 // downstream code, we set `normalisationSet` to nullptr if it is pointing; 108 // to an empty set.; 109 if(normalisationSet && normalisationSet->empty()) {; 110 normalisationSet = nullptr;; 111 }; 112#ifdef ROOFIT_CHECK_CACHED_VALUES; 113 return _DEBUG_getVal(normalisationSet);; 114#else; 115 ; 116#ifndef _WIN32; 117 return (_fast && !_inhibitDirty) ? _value : getValV(normalisationSet) ;; 118#else; 119 return (_fast && !inhibitDirty()) ? _value : getValV(normalisationSet) ;; 120#endif; 121 ; 122#endif; 123 }; 124 ; 125 /// Like getVal(const RooArgSet*), but always requires an argument ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:3810,integrat,integrated,3810,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['integrat'],['integrated']
Integrability,"nst char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Set GET command for use by ReadBuffer(s)10(), handle redirection if; needed. Give full URL so Apache's virtual hosts solution works. void CheckProxy(); Check if shell var ""http_proxy"" has been set and should be used. Bool_t IsOpen() const; A TWebFile that has been correctly constructed is always considered open. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. A TWebFile cannot be reopened in update mode. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via HTTP daemon. This; routine connects to the remote host, sends the request and returns; the buffer. Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via HTTP daemon. This; routine connects to the remote host, sends the request and returns; the buffer. Returns kTRUE in case of error. Bool_t ReadBuffer10(char* buf, Int_t len); Read specified byte range from remote file via HTTP 1.0 daemon (without; mod-root installed). This routine connects to the remote host, sends the; request and returns the buffer. Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read specified byte ranges from remote file via HTTP daemon.; Reads the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t ReadBuffers10(char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWebFile.html:25615,rout,routine,25615,root/html528/TWebFile.html,https://root.cern,https://root.cern/root/html528/TWebFile.html,6,['rout'],['routine']
Integrability,"nst char* title, RooAbsReal& _intpdf, const RooArgSet& intObs); Construct projection of input pdf '_intpdf' over observables 'intObs'. RooProjectedPdf(const RooProjectedPdf& other, const char* name = 0); Copy constructor. Double_t getValV(const RooArgSet* set = 0) const; Special version of getVal() overrides RooAbsReal::getValF() to save value of current normalization set. Double_t evaluate() const; Evaluate projected p.d.f. const RooAbsReal* getProjection(const RooArgSet* iset, const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProjectedPdf.html:43544,integrat,integrating,43544,root/html532/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html532/RooProjectedPdf.html,8,['integrat'],"['integrating', 'integration']"
Integrability,"nst char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Execute the specified drawing action on a data set which is stored on the; master with name 'dsetname'.; The syntax for dsetname is name[#[dir/]objname], e.g.; ""mydset"" analysis of the first tree in the top dir of the dataset; named ""mydset""; ""mydset#T"" analysis tree ""T"" in the top dir of the dataset; named ""mydset""; ""mydset#adir/T"" analysis tree ""T"" in the dir ""adir"" of the dataset; named ""mydset""; ""mydset#adir/"" analysis of the first tree in the dir ""adir"" of the; dataset named ""mydset""; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void StopProcess(Bool_t abort, Int_t timeout = -1); Send STOPPROCESS message to master and workers. void DisableGoAsyn(); Signal to disable related switches. void GoAsynchronous(); Send GOASYNC message to the master. void RecvLogFile(TSocket* s, Int_t size); Receive the log file of the slave with socket s. void NotifyLogMsg(const char* msg, const char* sfx = ""\n""); Notify locally 'msg' to the appropriate units (file, stdout, window); If defined, 'sfx' is added after 'msg' (typically a line-feed);. void LogMessage(const char* msg, Bool_t all); Log a message into the appropriate window by emitting a signal. Int_t SendGroupView(); Send to all active slaves servers the current slave group size; and their unique id. Returns number of active slaves.; Returns -1 in case of error. Bool_t GetFileInCmd(const char* cmd, TString& fn); Static method to extract the filename (if any) form a CINT command.; Returns kTRUE and the filename in 'fn'; returns kFALSE if not found or not; appliable. Int_t Exec(const char* cmd, Bool_t plusMaster = kFALSE); Send command to be executed on the PROOF master and/or slaves.; If plusMaster is kTRUE then exeucte on slaves and master too.; Command can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:52694,message,message,52694,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['message'],['message']
Integrability,"nst double * Parameters() and uint NPar(). Example of creating a parametric function:. #include ""Math/IFunction.h""; #include ""Math/IParamFunction.h"". class MyParametricFunction: public ROOT::Math::IParametricFunctionMultiDim; {; private:; const double* pars;. public:; double DoEvalPar(const double* x, const double* p) const; {; return p[0] * x[0] + sin(x[1]) + p[1];; }. unsigned int NDim() const; {; return 2;; }. ROOT::Math::IParametricFunctionMultiDim* Clone() const; {; return new MyParametricFunction();; }. const double* Parameters() const; {; return pars;; }. void SetParameters(const double* p); {; pars = p;; }. unsigned int NPar() const; {; return 2;; }; };. ROOT::Math::IParametricGradFunctionMultiDim: Provides an interface for parametric gradient multi-dimensional functions. In addition to function evaluation it provides the gradient with respect to the parameters, via the method ParameterGradient(). This interface is only used in case of some dedicated fitting algorithms, when is required or more efficient to provide derivatives with respect to the parameters. Here is an example:. #include ""Math/IFunction.h""; #include ""Math/IParamFunction.h"". class MyParametricGradFunction:; public ROOT::Math::IParametricGradFunctionMultiDim; {; private:; const double* pars;. public:; double DoEvalPar(const double* x, const double* p) const; {; return p[0] * x[0] + sin(x[1]) + p[1];; }. unsigned int NDim() const; {; return 2;; }. ROOT::Math::IParametricGradFunctionMultiDim* Clone() const; {; return new MyParametricGradFunction();; }. const double* Parameters() const; {; return pars;; }. void SetParameters(const double* p); {; pars = p;; }. unsigned int NPar() const; {; return 2;; }. double DoParameterDerivative(const double* x, const double* p,; unsigned int ipar) const; {; if ( ipar == 0 ); return sin(x[1]) + p[1];; else; return p[0] * x[0] + x[1] * cos(x[1]) + p[1];; }; };; 13.7.4 Wrapper Functions; To facilitate the user to insert their own type of function in the needed fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:692695,interface,interface,692695,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['interface'],['interface']
Integrability,"nst double * Parameters() const =0Access the parameter values.; ROOT::Math::IBaseParam::ParameterNamevirtual std::string ParameterName(unsigned int i) constReturn the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default nam...Definition IParamFunction.h:86; ROOT::Math::IBaseParam::NParvirtual unsigned int NPar() const =0Return the number of Parameters.; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetMinimizerTypevoid SetMinimizerType(const char *type)set minimizer typeDefinition MinimizerOptions.h:231; ROOT::Math::MinimizerOptions::MinimizerAlgorithmconst std::string & MinimizerAlgorithm() consttype of algorithmDefinition MinimizerOptions.h:201; ROOT::Math::MinimizerOptions::MinimizerTypeconst std::string & MinimizerType() consttype of minimizerDefinition MinimizerOptions.h:198; ROOT::Math::MinimizerOptions::SetMinimizerAlgorithmvoid SetMinimizerAlgorithm(const char *type)set minimizer algorithmDefinition MinimizerOptions.h:234; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; RooFit::MinimizerRooCmdArg Minimizer(const char *type, const char *alg=nullptr)Definition RooGlobalFunc.cxx:751; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincFitFitConfig.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8h_source.html:17563,interface,interface,17563,doc/master/FitConfig_8h_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html,1,['interface'],['interface']
Integrability,"nst double * dataX, const double * dataY,; 162 const double * dataZ, const DataRange & range, bool isWeighted = false) :; 163 FitData( range, maxpoints, dataX, dataY, dataZ ),; 164 fWeighted( isWeighted ); 165 {; 166 }; 167 ; 168 /**; 169 constructor for multi-dim external data and a range (data are copied inside according to the range); 170 Uses as argument an iterator of a list (or vector) containing the const double * of the data; 171 An example could be the std::vector<const double *>::begin; 172 */; 173 template<class Iterator>; 174 UnBinData( unsigned int maxpoints, unsigned int dim, Iterator dataItr, const DataRange & range, bool isWeighted = false ) :; 175 FitData( range, maxpoints, dim, dataItr ),; 176 fWeighted( isWeighted ); 177 {; 178 }; 179 ; 180 /// copy constructor; 181 UnBinData(const UnBinData &);; 182 /// assignment operator; 183 UnBinData & operator= (const UnBinData &);; 184 ; 185public:; 186 /**; 187 destructor, delete pointer to internal data or external data wrapper; 188 */; 189 ~UnBinData() override {; 190 }; 191 ; 192 /**; 193 add one dim coordinate data (unweighted); 194 */; 195 void Add(double x); 196 {; 197 assert( !fWeighted );; 198 ; 199 FitData::Add( x );; 200 }; 201 ; 202 ; 203 /**; 204 add 2-dim coordinate data; 205 can also be used to add 1-dim data with a weight; 206 */; 207 void Add(double x, double y); 208 {; 209 assert( fDim == 2 );; 210 double dataTmp[] = { x, y };; 211 ; 212 FitData::Add( dataTmp );; 213 }; 214 ; 215 /**; 216 add 3-dim coordinate data; 217 can also be used to add 2-dim data with a weight; 218 */; 219 void Add(double x, double y, double z); 220 {; 221 assert( fDim == 3 );; 222 double dataTmp[] = { x, y, z };; 223 ; 224 FitData::Add( dataTmp );; 225 }; 226 ; 227 /**; 228 add multi-dim coordinate data; 229 */; 230 void Add( const double* x ); 231 {; 232 FitData::Add( x );; 233 }; 234 ; 235 /**; 236 add multi-dim coordinate data + weight; 237 */; 238 void Add(const double *x, double w); 239 {; 240 assert( fWeighte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/UnBinData_8h_source.html:6559,wrap,wrapper,6559,doc/master/UnBinData_8h_source.html,https://root.cern,https://root.cern/doc/master/UnBinData_8h_source.html,1,['wrap'],['wrapper']
Integrability,"nst double *params=nullptr, unsigned int dataSize=0, int fitType=0);  set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  ; template<class Function > ; bool SetFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ;  ; void SetFunction (const IGradModel1DFunction &func, bool useGradient=true);  Set the fitted function from 1D gradient parametric function interface. ;  ; void SetFunction (const IGradModelFunction &func, bool useGradient=true);  Set the fitted function (model function) from a parametric gradient function interface. ;  ; void SetFunction (const IModel1DFunction &func, bool useGradient=false);  Set the fitted function (model function) from a vectorized parametric function interface. ;  ; void SetFunction (const IModelFunction &func, bool useGradient=false);  Set the fitted function (model function) from a parametric function interface. ;  ; void SetNumberOfFitPoints (unsigned int npoints);  Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ;  . Protected Member Functions; bool DoBinnedLikelihoodFit (bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  binned likelihood fit ;  ; bool DoInitMinimizer ();  ; bool D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:10337,interface,interface,10337,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['interface'],['interface']
Integrability,"nst override;  Return a user configured or systemwide directory to create temporary files in. ;  ; FILE * TempFileName (TString &base, const char *dir=nullptr, const char *suffix=nullptr) override;  Create a secure temporary file by appending a unique 6 letter string to base. ;  ; int Umask (Int_t mask) override;  Set the process file creation mode mask. ;  ; const char * UnixPathName (const char *unixpathname) override;  Convert a pathname to a unix pathname. ;  ; int Unlink (const char *name) override;  Unlink, i.e. ;  ; int Utime (const char *file, Long_t modtime, Long_t actime) override;  Set a files modification and access times. ;  ; const char * WorkingDirectory () override;  Return the working directory for the default drive. ;  ; const char * WorkingDirectory (char driveletter);  Return working directory for the selected drive driveletter == 0 means return the working durectory for the default drive. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:13995,interface,interface,13995,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['interface'],['interface']
Integrability,"nst. TMatrixTSym<Element> &TMatrixTSym<Element> Invert(Double_t* det = 0); Invert the matrix and calculate its determinant; Notice that the LU decomposition is used instead of Bunch-Kaufman; Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; The user can access Bunch-Kaufman through the TDecompBK class . TMatrixTSym<Element> &TMatrixTSym<Element> InvertFast(Double_t* det = 0); Invert the matrix and calculate its determinant. TMatrixTSym<Element> &TMatrixTSym<Element> Transpose(const TMatrixTSym<float>& source); Transpose a matrix. TMatrixTSym<Element> &TMatrixTSym<Element> Rank1Update(const TVectorT<float>& v, float alpha = 1.); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . Element TMatrixTSym<Element> Similarity(const TVectorT<float>& v) const; Calculate scalar v * (*this) * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> SimilarityT(const TMatrixT<float>& n); Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); It is more efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSym<Element> &source). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSymLazy<Element> &lazy_constructor). TMatrixTSy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSym_float_.html:18769,rout,routine,18769,root/html602/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSym_float_.html,2,['rout'],['routine']
Integrability,"nst. computes the closest distance from given point to this shape ; Definition at line 684 of file TGeoNode.cxx. ◆ SaveAttributes(). void TGeoNode::SaveAttributes ; (; std::ostream & ; out). save attributes for this node ; Definition at line 439 of file TGeoNode.cxx. ◆ SetAllInvisible(). void TGeoNode::SetAllInvisible ; (; ). inline . Definition at line 124 of file TGeoNode.h. ◆ SetCloned(). void TGeoNode::SetCloned ; (; Bool_t ; flag = kTRUE). inline . Definition at line 119 of file TGeoNode.h. ◆ SetCurrentPoint(). void TGeoNode::SetCurrentPoint ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ). inline . Definition at line 116 of file TGeoNode.h. ◆ SetFWExtension(). void TGeoNode::SetFWExtension ; (; TGeoExtension * ; ext). Connect framework defined extension to the node. ; The node ""grabs"" a copy, so the original object can be released by the producer. Release the previously connected extension if any.; NOTE: This interface is intended for the use by TGeo and the users should NOT connect extensions using this method ; Definition at line 518 of file TGeoNode.cxx. ◆ SetInvisible(). void TGeoNode::SetInvisible ; (; ). inline . Definition at line 123 of file TGeoNode.h. ◆ SetMotherVolume(). void TGeoNode::SetMotherVolume ; (; TGeoVolume * ; mother). inline . Definition at line 125 of file TGeoNode.h. ◆ SetNumber(). void TGeoNode::SetNumber ; (; Int_t ; number). inline . Definition at line 118 of file TGeoNode.h. ◆ SetOverlapping(). void TGeoNode::SetOverlapping ; (; Bool_t ; flag = kTRUE). inline . Definition at line 120 of file TGeoNode.h. ◆ SetOverlaps(). void TGeoNode::SetOverlaps ; (; Int_t * ; ovlp, . Int_t ; novlp . ). set the list of overlaps for this node (ovlp must be created with operator new) ; Definition at line 707 of file TGeoNode.cxx. ◆ SetUserExtension(). void TGeoNode::SetUserExtension ; (; TGeoExtension * ; ext). Connect user-defined extension to the node. ; The node ""grabs"" a copy, so the original object can be released by the producer. Release t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNode.html:33947,interface,interface,33947,doc/master/classTGeoNode.html,https://root.cern,https://root.cern/doc/master/classTGeoNode.html,1,['interface'],['interface']
Integrability,"nst. overridevirtual . Return set of parameters with are used exclusively by the coefficient functions. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 143 of file RooBDecay.cxx. ◆ DeclFileName(). static const char * RooBDecay::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 72 of file RooBDecay.h. ◆ generateEvent(). void RooBDecay::generateEvent ; (; Int_t ; code). overridevirtual . Interface for generation of an event using the algorithm corresponding to the specified code. ; The meaning of each code is defined by the getGenerator() implementation. The default implementation does nothing. ; Reimplemented from RooAbsPdf.; Definition at line 223 of file RooBDecay.cxx. ◆ getCoefAnalyticalIntegral(). Int_t RooBDecay::getCoefAnalyticalIntegral ; (; Int_t ; coef, . RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default implementation of function advertising integration capabilities. ; The interface is similar to that of getAnalyticalIntegral except that an integer code is added that designates the coefficient number for which the integration capabilities are requested; This default implementation advertises that no internal integrals are supported. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 167 of file RooBDecay.cxx. ◆ getGenerator(). Int_t RooBDecay::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBDecay.html:81036,integrat,integration,81036,doc/master/classRooBDecay.html,https://root.cern,https://root.cern/doc/master/classRooBDecay.html,1,['integrat'],['integration']
Integrability,"nst. overridevirtual . Return the buffer size to create new TKeys. ; If the stored fBufferSize is null, the value returned is the average buffer size of objects in the file so far. ; Reimplemented from TDirectory.; Definition at line 1124 of file TDirectoryFile.cxx. ◆ GetCreationDate(). const TDatime & TDirectoryFile::GetCreationDate ; (; ); const. inline . Definition at line 91 of file TDirectoryFile.h. ◆ GetDirectory(). TDirectory * TDirectoryFile::GetDirectory ; (; const char * ; apath, . Bool_t ; printError = false, . const char * ; funcname = ""GetDirectory"" . ). overridevirtual . Find a directory named ""apath"". ; It apath is null or empty, returns ""this"" directory. Otherwise use the name ""apath"" to find a directory. The absolute path syntax is: file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory in the file. Relative syntax is relative to ""this"" directory. E.g: ../aa. Returns 0 in case path does not exist. If printError is true, use Error with 'funcname' to issue an error message. ; Reimplemented from TDirectory.; Definition at line 471 of file TDirectoryFile.cxx. ◆ GetFile(). TFile * TDirectoryFile::GetFile ; (; ); const. inlineoverridevirtual . Reimplemented from TDirectory.; Definition at line 92 of file TDirectoryFile.h. ◆ GetKey(). TKey * TDirectoryFile::GetKey ; (; const char * ; name, . Short_t ; cycle = 9999 . ); const. overridevirtual . Return pointer to key with name,cycle. ; if cycle = 9999 returns highest cycle ; Reimplemented from TDirectory.; Definition at line 1136 of file TDirectoryFile.cxx. ◆ GetListOfKeys(). TList * TDirectoryFile::GetListOfKeys ; (; ); const. inlineoverridevirtual . Reimplemented from TDirectory.; Definition at line 94 of file TDirectoryFile.h. ◆ GetModificationDate(). const TDatime & TDirectoryFile::GetModificationDate ; (; ); const. inline . Definition at line 95 of file TDirectoryFile.h. ◆ GetNbytesKeys(). Int_t TDirectoryFile::GetNbytesKeys ; (; ); const. inlineoverridevirtual . Reimp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:36174,message,message,36174,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['message'],['message']
Integrability,"nst; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. Int_t GetNumberTotalParameters() const. Int_t GetNumberFreeParameters() const. Double_t GetParError(Int_t ipar) const. Double_t GetParameter(Int_t ipar) const. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const. const char * GetParName(Int_t ipar) const. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const. Double_t GetSumLog(Int_t i). Bool_t IsFixed(Int_t ipar) const; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. void PrintResults(Int_t level, Double_t amin) const. void ReleaseParameter(Int_t ipar). void SetFitMethod(const char* name). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh). void SetFCN(void fcn); this for CINT (interactive functions). void SetFCN(void* ). void SetMinuitFCN(ROOT::Minuit2::FCNBase* f); set FCN using Minuit interface; you pass to the class ownership of FCNBase pointer. const ROOT::Minuit2::FCNBase * GetMinuitFCN() const; { return fMinuitFCN; }. const ROOT::Minuit2::ModularFunctionMinimizer * GetMinimizer() const; { return fMinimizer; }. int Minimize(int nfcn = 0, double edmval = 0.1); additional abstract methods to be implemented by derived classes. int GetStrategy(); { return fStrategy; }. int PrintLevel(); { return fDebug; }. void SetStrategy(int stra); { fStrategy = stra; }. void SetPrintLevel(int level); { fDebug = level; }. void SetMinimumTolerance(double mintol); set minimum tolerance to avoid having clients (as TGraf::Fit) setting tolerances too small. { fMinTolerance = mintol; }. double MinimumTolerance() const; { return fMinTolerance; }. void CreateMinimizer(TFitterMinuit::EMinimizerType = kMigrad); create the minimizer type (Migard or Simplex); can be re-implemented in the derived classes. void SetMinimizer(ROOT::Minuit2::ModularFunctionMinimizer* m); { fMinimizer = m; }. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitterMinuit.html:12987,interface,interface,12987,root/html528/TFitterMinuit.html,https://root.cern,https://root.cern/root/html528/TFitterMinuit.html,4,['interface'],['interface']
Integrability,"nst; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tisValid() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealIntegral.html:16479,message,message,16479,root/html532/RooRealIntegral.html,https://root.cern,https://root.cern/root/html532/RooRealIntegral.html,1,['message'],['message']
Integrability,"nst; Helper function for plotting of composite p.d.fs. Given; a set of selected components that should be plotted,; find all nodes that (in)directly depend on these selected; nodes. Mark all directly and indirecty selected nodes; as 'selected' using the selectComp() method. RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; will show a unit normalized curve in the frame variable, taken at the present value; of other observables defined for this PDF. If a PDF is plotted in a frame in which a dataset has already been plotted, it will; show a projected curve integrated over all variables that were present in the shown; dataset except for the one on the x-axis. The normalization of the curve will also; be adjusted to the event count of the plotted dataset. An informational message; will be printed for each projection step that is performed. This function takes the following named arguments. Projection control. Slice(const RooArgSet& set) -- Override default projection behaviour by omittting observables listed; in set from the projection, resulting a 'slice' plot. Slicing is usually; only sensible in discrete observables. The slice is position at the 'current'; value of the observable objects. Slice(RooCategory& cat, -- Override default projection behaviour by omittting specified category; const char* label) observable from the projection, resulting in a 'slice' plot. The slice is positioned; at the given label value. Multiple Slice() commands can be given to specify slices; in multiple observables. Project(const RooArgSet& set) -- Overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:47514,integrat,integrated,47514,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['integrat'],['integrated']
Integrability,"nst; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tdefaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddition.html:8409,depend,dependentOverlaps,8409,root/html526/RooAddition.html,https://root.cern,https://root.cern/root/html526/RooAddition.html,18,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"nst; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:8563,depend,dependentOverlaps,8563,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,6,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"nst; virtual Bool_tRooAbsTestStatistic::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsOptTestStatistic::isSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:20015,message,message,20015,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,12,['message'],['message']
Integrability,"nst; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsString.html:3047,depend,dependsOn,3047,root/html526/RooAbsString.html,https://root.cern,https://root.cern/root/html526/RooAbsString.html,3,['depend'],['dependsOn']
Integrability,"nst; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p); ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double * x, const double * p ). Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(double x, const double* p) const. double DoEval(double x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. double operator()( double x, const double * p ). Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IParamFunction.h 27272 2009-01-28 09:03:03Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IParametricFunctionOneDim.html:2393,interface,interface,2393,root/html526/ROOT__Math__IParametricFunctionOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IParametricFunctionOneDim.html,1,['interface'],['interface']
Integrability,"nst; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:2803,interface,interface,2803,root/html534/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"nst; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 31763 2009-12-10 10:40:21Z moneta $ » Last generated: 2009-12-10 16:15; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:2801,interface,interface,2801,root/html526/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"nst; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 31763 2009-12-10 10:40:21Z moneta $ » Last generated: 2010-09-23 19:55; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:2801,interface,interface,2801,root/html528/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"nst; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 31763 2009-12-10 10:40:21Z moneta $ » Last generated: 2011-07-04 15:19; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:2803,interface,interface,2803,root/html530/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"nst; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 40577 2011-08-12 10:43:12Z moneta $ » Last generated: 2011-11-03 20:04; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:2803,interface,interface,2803,root/html532/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"nst; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStringVar.html:3289,depend,dependsOnValue,3289,root/html532/RooStringVar.html,https://root.cern,https://root.cern/root/html532/RooStringVar.html,1,['depend'],['dependsOnValue']
Integrability,"nst;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:21002,depend,dependsOn,21002,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,8,['depend'],"['depend', 'dependsOn']"
Integrability,"nst;  Get low and high bound of the variable. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if given value is valid. ;  ; virtual double jacobian () const;  ; Int_t numBins (const char *rangeName=nullptr) const override;  ; virtual Int_t numBins (const RooAbsBinning &binning) const;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void randomize (const char *rangeName=nullptr) override;  Set a new value sampled from a uniform distribution over the fit range. ;  ; virtual void randomize (const RooAbsBinning &binning);  Set a new value sampled from a uniform distribution over the fit range. ;  ; void setBin (Int_t ibin, const char *rangeName=nullptr) override;  Set value to center of bin 'ibin' of binning 'rangeName' (or of default binning if no range is specified) ;  ; virtual void setBin (Int_t ibin, const RooAbsBinning &binni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:9724,integrat,integrated,9724,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,1,['integrat'],['integrated']
Integrability,"nst;  Get low and high bound of the variable. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if given value is valid. ;  ; virtual double jacobian () const;  ; Int_t numBins (const char *rangeName=nullptr) const override;  ; virtual Int_t numBins (const RooAbsBinning &binning) const;  ; void randomize (const char *rangeName=nullptr) override;  Set a new value sampled from a uniform distribution over the fit range. ;  ; virtual void randomize (const RooAbsBinning &binning);  Set a new value sampled from a uniform distribution over the fit range. ;  ; void setBin (Int_t ibin, const char *rangeName=nullptr) override;  Set value to center of bin 'ibin' of binning 'rangeName' (or of default binning if no range is specified) ;  ; virtual void setBin (Int_t ibin, const RooAbsBinning &binning);  Set value to center of bin 'ibin' of binning 'binning'. ;  ; void setConstant (bool value=true);  ; void StreamerNVirtual (TBuffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:11735,integrat,integrated,11735,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['integrat'],['integrated']
Integrability,"nst;  returns name of top item in objects hierarchy ;  ; Bool_t Hide (const char *fullname, Bool_t hide=kTRUE);  Hides folder or element from web gui. ;  ; TClass * IsA () const override;  ; Bool_t IsAnyEngine () const;  ; Bool_t IsCors () const;  Returns kTRUE if CORS was configured. ;  ; Bool_t IsCorsCredentials () const;  Returns kTRUE if Access-Control-Allow-Credentials header should be used. ;  ; Bool_t IsFileRequested (const char *uri, TString &res) const;  Check if file is requested, thread safe. ;  ; Bool_t IsReadOnly () const;  returns read-only mode ;  ; Bool_t IsTerminated () const;  returns kTRUE, if server was terminated ;  ; Bool_t IsWSOnly () const;  returns true if only websockets are handled by the server ;  ; Int_t ProcessRequests ();  Process submitted requests, must be called from appropriate thread. ;  ; Bool_t Register (const char *subfolder, TObject *obj);  Register object in subfolder. ;  ; Bool_t RegisterCommand (const char *cmdname, const char *method, const char *icon=nullptr);  Register command which can be executed from web interface. ;  ; void RegisterWS (std::shared_ptr< THttpWSHandler > ws);  Register WS handler. ;  ; void Restrict (const char *path, const char *options);  Restrict access to specified object. ;  ; void SetCors (const std::string &domain=""*"");  Enable CORS header to ProcessRequests() responses Specified location (typically ""*"") add as ""Access-Control-Allow-Origin"" header. ;  ; void SetCorsCredentials (const std::string &value=""true"");  Enable/disable usage Access-Control-Allow-Credentials response header. ;  ; void SetDefaultPage (const std::string &filename="""");  Set default HTML page. ;  ; void SetDrawPage (const std::string &filename="""");  Set drawing HTML page. ;  ; Bool_t SetIcon (const char *fullname, const char *iconname);  Set name of icon, used in browser together with the item. ;  ; Bool_t SetItemField (const char *fullname, const char *name, const char *value);  Set item field in sniffer. ;  ; void SetJSROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpServer.html:4013,interface,interface,4013,doc/master/classTHttpServer.html,https://root.cern,https://root.cern/doc/master/classTHttpServer.html,1,['interface'],['interface']
Integrability,"nstReturn the path of the build directory.Definition TSystem.cxx:3915; TSystem::Openlogvirtual void Openlog(const char *name, Int_t options, ELogFacility facility)Open connection to system log daemon.Definition TSystem.cxx:1677; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::AddIncludePathvirtual void AddIncludePath(const char *includePath)Add a directory to the already set include path.Definition TSystem.cxx:4159; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::GetEffectiveGidvirtual Int_t GetEffectiveGid()Returns the effective group id.Definition TSystem.cxx:1591; TSystem::EAclicModeEAclicModeDefinition TSystem.h:269; TSystem::kDefault@ kDefaultDefinition TSystem.h:269; TSystem::kDebug@ kDebugDefinition TSystem.h:269; TSystem::kOpt@ kOptDefinition TSystem.h:269; TSystem::~TSystemvirtual ~TSystem()Delete the OS interface.Definition TSystem.cxx:139; TSystem::SetDisplayvirtual void SetDisplay()Set DISPLAY environment variable based on utmp entry. Only for UNIX.Definition TSystem.cxx:235; TSystem::DirNamevirtual const char * DirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1006; TSystem::FreeDirectoryvirtual void FreeDirectory(void *dirp)Free a directory.Definition TSystem.cxx:845; TSystem::SetFlagsOptvirtual void SetFlagsOpt(const char *)FlagsOpt should contain the options to pass to the C++ compiler in order to compile the library in op...Definition TSystem.cxx:4065; TSystem::RemoveOnExitvoid RemoveOnExit(TObject *obj)Objects that should be deleted on exit of the OS interface.Definition TSystem.cxx:292; TSystem::fStdExceptionHandlerTSeqCollection * fStdExceptionHandlerDefinition TSystem.h:297; TSystem::GetServiceByPortvirtual char * GetServiceByPort(int port)Get name of internet service.Definition TSystem.cxx:2327; TSystem::OpenDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:174382,interface,interface,174382,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['interface'],['interface']
Integrability,"nstReturn the path of the build directory.Definition TSystem.cxx:3915; TSystem::Openlogvirtual void Openlog(const char *name, Int_t options, ELogFacility facility)Open connection to system log daemon.Definition TSystem.cxx:1677; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::AddIncludePathvirtual void AddIncludePath(const char *includePath)Add a directory to the already set include path.Definition TSystem.cxx:4159; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::GetEffectiveGidvirtual Int_t GetEffectiveGid()Returns the effective group id.Definition TSystem.cxx:1591; TSystem::EAclicModeEAclicModeDefinition TSystem.h:269; TSystem::kDefault@ kDefaultDefinition TSystem.h:269; TSystem::kDebug@ kDebugDefinition TSystem.h:269; TSystem::kOpt@ kOptDefinition TSystem.h:269; TSystem::~TSystemvirtual ~TSystem()Delete the OS interface.Definition TSystem.cxx:139; TSystem::SetDisplayvirtual void SetDisplay()Set DISPLAY environment variable based on utmp entry. Only for UNIX.Definition TSystem.cxx:235; TSystem::fReadmaskTFdSet * fReadmaskDefinition TSystem.h:275; TSystem::fWdpathTString fWdpathDefinition TSystem.h:284; TSystem::DirNamevirtual const char * DirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1006; TSystem::FreeDirectoryvirtual void FreeDirectory(void *dirp)Free a directory.Definition TSystem.cxx:845; TSystem::SetFlagsOptvirtual void SetFlagsOpt(const char *)FlagsOpt should contain the options to pass to the C++ compiler in order to compile the library in op...Definition TSystem.cxx:4065; TSystem::operator=TSystem & operator=(const TSystem &)=delete; TSystem::RemoveOnExitvoid RemoveOnExit(TObject *obj)Objects that should be deleted on exit of the OS interface.Definition TSystem.cxx:292; TSystem::fStdExceptionHandlerTSeqCollection * fSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:41837,interface,interface,41837,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['interface'],['interface']
Integrability,"nstance owned by the player and referenced by 'ref'. ;  ; TList * GetQueryResults ();  Return pointer to the list of query results in the player. ;  ; Int_t GetRC (const char *RCenv, Double_t &env, const char *ord=""0"");  Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. ;  ; Int_t GetRC (const char *RCenv, Int_t &env, const char *ord=""0"");  Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. ;  ; Int_t GetRC (const char *RCenv, TString &env, const char *ord=""0"");  Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. ;  ; Float_t GetRealTime () const;  ; Int_t GetRemoteProtocol () const;  ; ERunStatus GetRunStatus () const;  ; Int_t GetSeqNum () const;  ; Int_t GetSessionID () const;  ; const char * GetSessionTag () const;  ; void GetStatistics (Bool_t verbose=kFALSE);  Get statistics about CPU time, real time and bytes read. ;  ; Int_t GetStatus () const;  ; const char * GetUrl ();  ; const char * GetUser () const;  ; const char * GetWorkDir () const;  ; void GoAsynchronous ();  Send GOASYNC message to the master. ;  ; Bool_t IsDataReady (Long64_t &totalbytes, Long64_t &bytesready);  See if the data is ready to be analyzed. ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsIdle () const;  ; Bool_t IsLite () const;  ; Bool_t IsMaster () const;  ; Bool_t IsParallel () const;  ; Bool_t IsProofd () const;  ; Bool_t IsTty () const;  ; Bool_t IsValid () const;  ; Bool_t IsWaiting () const;  ; void LogMessage (const char *msg, Bool_t all);  Log a message into the appropriate window by emitting a signal. ;  ; Int_t Ping ();  Ping PROOF. Returns 1 if master server responded. ;  ; void Progress (Long64_t total, Long64_t processed);  Get query progress information. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:13901,message,message,13901,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['message'],['message']
Integrability,"nstance; map<string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Jun 2 15:32:43 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumGenFactory.html:7704,integrat,integrator,7704,root/html604/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html604/RooNumGenFactory.html,4,['integrat'],"['integration', 'integrator', 'integrators']"
Integrability,"nstant(const T &rhs)Definition Expression.h:403; ROOT::Math::ExprDefinition Expression.h:138; ROOT::Math::Expr::applyT apply(unsigned int i) constDefinition Expression.h:150; ROOT::Math::Expr::printstd::ostream & print(std::ostream &os) constused by operator<<() simplify to use apply(i,j)Definition Expression.h:184; ROOT::Math::Expr::ExprExpr(const ExprType &rhs)Definition Expression.h:143; ROOT::Math::Expr::value_typeT value_typeDefinition Expression.h:140; ROOT::Math::Expr::rhs_ExprType rhs_Definition Expression.h:203; ROOT::Math::Expr::operator()T operator()(unsigned int i, unsigned j) constDefinition Expression.h:153; ROOT::Math::Expr::kCols@ kColsDefinition Expression.h:178; ROOT::Math::Expr::kRows@ kRowsDefinition Expression.h:176; ROOT::Math::Expr::~Expr~Expr()Definition Expression.h:147; ROOT::Math::Expr::IsInUsebool IsInUse(const T *p) constfunction to determine if any use operand is being used (has same memory address)Definition Expression.h:161; ROOT::Math::MatRepStdExpression wrapper class for Matrix objects.Definition MatrixRepresentationsStatic.h:54; ROOT::Math::UnaryOpUnaryOperation class A class representing unary operators in the parse tree.Definition Expression.h:361; ROOT::Math::UnaryOp::rhs_const RHS & rhs_Definition Expression.h:384; ROOT::Math::UnaryOp::applyT apply(unsigned int i) constDefinition Expression.h:371; ROOT::Math::UnaryOp::UnaryOpUnaryOp(Operator, const RHS &rhs)Definition Expression.h:364; ROOT::Math::UnaryOp::~UnaryOp~UnaryOp()Definition Expression.h:368; ROOT::Math::UnaryOp::IsInUsebool IsInUse(const T *p) constDefinition Expression.h:378; ROOT::Math::UnaryOp::operator()T operator()(unsigned int i, unsigned int j) constDefinition Expression.h:374; ROOT::Math::VecExprExpression wrapper class for Vector objects.Definition Expression.h:64; ROOT::Math::VecExpr::applyT apply(unsigned int i) constDefinition Expression.h:77; ROOT::Math::VecExpr::rhs_ExprType rhs_Definition Expression.h:124; ROOT::Math::VecExpr::value_typeT value_typeDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Expression_8h_source.html:15392,wrap,wrapper,15392,doc/master/Expression_8h_source.html,https://root.cern,https://root.cern/doc/master/Expression_8h_source.html,1,['wrap'],['wrapper']
Integrability,"nstead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:57483,message,message,57483,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['message'],['message']
Integrability,"nstexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  declare SA options. ;  . Private Attributes; Double_t fAdaptiveSpeed;  how fast temperature change in adaptive (in adaptive two variables describe the change of temperature, but fAdaptiveSpeed should be 1.0 and its not recommended to change it) ;  ; Double_t fEps;  relative required FCN accuracy at minimum ;  ; Double_t fInitialTemperature;  initial temperature (depends on FCN) ;  ; TString fKernelTemperatureS;  string just to set fKernelTemperature ;  ; Int_t fMaxCalls;  max number of FCN calls ;  ; Double_t fMinTemperature;  minimum temperature before SA quit ;  ; Double_t fTemperatureAdaptiveStep;  used to calculate InitialTemperature if fUseDefaultTemperature ;  ; Double_t fTemperatureScale;  how fast temperature change ;  ; Bool_t fUseDefaultScale;  if TRUE, SA calculates its own TemperatureScale ;  ; Bool_t fUseDefaultTemperature;  if TRUE, SA calculates its own InitialTemperature (MinTemperautre) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html:13964,depend,depends,13964,doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,1,['depend'],['depends']
Integrability,"nstructed; from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations. Bool_t plotSanityChecks(RooPlot* frame) const; Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. void makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; Utility function for plotOn() that constructs the set of; observables to project when plotting ourselves as function of; 'plotVar'. 'allVars' is the list of variables that must be; projected, but may contain variables that we do not depend on. If; 'silent' is cleared, warnings about inconsistent input parameters; will be printed. Bool_t isSelectedComp() const; If true, the current pdf is a selected component (for use in plotting). void globalSelectComp(Bool_t flag); Global switch controlling the activation of the selectComp() functionality. RooAbsFunc * bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; Create an interface adaptor f(vars) that binds us to the specified variables; (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; current values of x2 and x4. The caller takes ownership of the returned adaptor. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE); Copy the cached value of another RooAbsArg to our cache.; Warning: This function copies the cached values of source,; it is the callers responsibility to make ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:54797,depend,depend,54797,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,3,['depend'],['depend']
Integrability,"nstructed; from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations. Bool_t plotSanityChecks(RooPlot* frame) const; Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. void makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; Utility function for plotOn() that constructs the set of; observables to project when plotting ourselves as function of; 'plotVar'. 'allVars' is the list of variables that must be; projected, but may contain variables that we do not depend on. If; 'silent' is cleared, warnings about inconsistent input parameters; will be printed. Bool_t isSelectedComp() const; If true, the current pdf is a selected component (for use in plotting). void globalSelectComp(Bool_t flag); Global switch controlling the activation of the selectComp() functionality. RooAbsFunc * bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; Create an interface adaptor f(vars) that binds us to the specified variables; (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; current values of x2 and x4. The caller takes ownership of the returned adaptor. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE); Copy the cached value of another RooAbsArg to our cache.; Warning: This function copies the cached values of source,; it is the cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:56312,depend,depend,56312,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,4,['depend'],['depend']
Integrability,"nstruction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA wrapper around a concrete RCustomColumn, which forwards all calls to it RJittedCustomColumn is a placeholder that is put in the collection of custom columns in place of a RCustomColumn that will be just-in-time compiled ;  CRJittedFilterA wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code ;  ►CRLoopManagerThe head node of a RDF computation graph ;  CTCallback;  CTOneTimeCallback;  CRNodeBaseBase class for non-leaf nodes of the computational graph ;  CRRange;  CRRangeBase;  ►NVecOps;  ►CRAdoptAllocatorRAdoptAllocator can provide a view on already allocated memory ;  Crebind;  ►CRAdoptAllocator< bool >;  Crebind;  C__integer_sequence;  C__make;  C__make< 0 >;  C__make< 1 >;  C__make< 2 >;  C__make< 3 >;  C__make< 4 >;  C__make< 5 >;  C__make< 6 >;  C__make< 7 >;  C__parity;  ►C__parity< 0 >;  C__pmake;  ►C__parity< 1 >;  C__pmake; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:13931,wrap,wrapper,13931,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['wrap'],['wrapper']
Integrability,"nt * ; piIndex . ). protected . Convert an Element-based index into a Block-based index. ; In other words, given a pointer to an element and an index of a particular character within that element, compute a pointer to the TGHtmlBlock used to display that character and the index in the TGHtmlBlock of the character. ; Definition at line 209 of file TGHtmlIndex.cxx. ◆ InputSelected(). void TGHtml::InputSelected ; (; const char * ; name, . const char * ; val . ). virtual . Emit Selected() signal. ; Definition at line 1326 of file TGHtml.cxx. ◆ InsertToken(). TGHtmlElement * TGHtml::InsertToken ; (; TGHtmlElement * ; pToken, . char * ; zType, . char * ; zArgs, . int ; offs . ). protected . This routine takes a text representation of a token, converts it into an TGHtmlElement object and inserts it immediately prior to pToken. ; If pToken is 0, then the newly created TGHtmlElement is appended.; This routine does nothing to resize, restyle, relayout or redisplay the HTML. That is the calling routines responsibility.; Return the new TGHtmlElement object if successful. Return zero if zType is not a known markup name.; pToken - Insert before this. Append if pToken == 0 zType - Type of markup. Ex: ""/a"" or ""table"" zArgs - List of arguments offs - Calculate offset, and insert changed text into fZText! ; Definition at line 1113 of file TGHtmlParse.cxx. ◆ IsDarkColor(). int TGHtml::IsDarkColor ; (; ColorStruct_t * ; p). protected . Check to see if the given color is too dark to be easily distinguished from black. ; Definition at line 1678 of file TGHtml.cxx. ◆ IsLightColor(). int TGHtml::IsLightColor ; (; ColorStruct_t * ; p). protected . Check to see if the given color is too light to be easily distinguished from white. ; Definition at line 1725 of file TGHtml.cxx. ◆ IsVisited(). virtual int TGHtml::IsVisited ; (; const char * ; ). inlinevirtual . Definition at line 924 of file TGHtml.h. ◆ ItemLayout(). Bool_t TGHtml::ItemLayout ; (; ). overridevirtual . Layout html widget. ; Reimp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:74826,rout,routines,74826,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routines']
Integrability,"nt ; (; Int_t ; code). overridevirtual . algorithm adapted from code example in: Marsaglia, G. ; and Tsang, W. W. A Simple Method for Generating Gamma Variables ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000; The speed of this algorithm depends on the speed of generating normal variates. The algorithm is limited to \( \gamma \geq 0 \) ! ; Reimplemented from RooAbsPdf.; Definition at line 182 of file RooGamma.cxx. ◆ getAnalyticalIntegral(). Int_t RooGamma::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 105 of file RooGamma.cxx. ◆ getGenerator(). Int_t RooGamma::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 166 of file RooGamma.cxx. ◆ IsA(). TClass * RooGamma::IsA ; (; ); const. inlineoverridevirtual . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:78079,integrat,integration,78079,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['integrat'],['integration']
Integrability,"nt > = 0> ; RInterface< Proxied, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< Proxied, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; template<typename... ColumnTypes> ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::string_view columnNameRegexp="""", size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T > ; RResu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:5050,depend,dependent,5050,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['depend'],['dependent']
Integrability,"nt NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__Minuit2Minimizer.html:9168,interface,interface,9168,root/html530/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__Minuit2Minimizer.html,2,['interface'],['interface']
Integrability,"nt NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html:10605,interface,interface,10605,root/html534/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html,3,['interface'],['interface']
Integrability,"nt a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::_fastbool _fastDefinition RooAbsArg.h:689; RooAbsArg::_valueDirtybool _valueDirtyDefinition RooAbsArg.h:685; RooAbsArg::setValueDirtyvoid setValueDirty()Mark the element dirty. This forces a re-evaluation when a value is requested.Definition RooAbsArg.h:462; RooAbsArg::inhibitDirtybool inhibitDirty() constDelete watch flag.Definition RooAbsArg.cxx:105; RooAbsArg::_inhibitDirtystatic bool _inhibitDirtyDefinition RooAbsArg.h:668; RooAbsCategoryLValueAbstract base class for objects that represent a discrete value that can be set from the outside,...Definition RooAbsCategoryLValue.h:26; RooAbsCollectionAbstract container object that can hold multiple RooAbsArg objects.Definition RooAbsCollection.h:65; RooAbsCollection::emptybool empty() constDefinition RooAbsCollection.h:273; RooAbsDataAbstract base class for binned and unbinned datasets.Definition RooAbsData.h:57; RooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerica...Definition RooAbsFunc.h:27; RooAbsMomentDefinition RooAbsMoment.h:27; RooAbsRealLValueAbstract base class for objects that represent a real value that may appear on the left hand side of ...Definition RooAbsRealLValue.h:31; RooAbsReal::EvalErrorContextContext to temporarily change the error logging mode as long as the context is alive.Definition RooAbsReal.h:320; RooAbsReal::EvalErrorContext::~EvalErrorContext~EvalErrorContext()Definition RooAbsReal.h:329; RooAbsReal::EvalErrorContext::EvalErrorContextEvalErrorContext(ErrorLoggingMode m)Definition RooAbsReal.h:322; RooAbsReal::EvalErrorContext::operator=EvalErrorContext & operator=(EvalErrorContext const &)=delete; RooAbsReal::EvalErrorContext::_oldErrorLoggingMode _oldDefinition RooAbsReal.h:331; RooAbsReal::EvalErrorContext::operator=EvalErrorContext & operator=(EvalErrorContext &&)=delete; RooAbsReal::EvalErrorContext::EvalErrorContextEvalErrorContext(EvalErrorContext cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:29669,interface,interface,29669,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['interface'],['interface']
Integrability,"nt accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161eb090f0 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x_mean for nset (x,mean) with code 1 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_Int[mean]_Norm[mean,x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_Int[mean]_Norm[mean,x]_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 0.5; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for mean: using 0.6; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for sigma: using 0.2; sigma=0.5, [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.015625 , s = 4.5; [5] h = 0.00390625 , s = 3.75; [6] h = 0.000976562 , s = 4.125; [7] h = 0.000244141 , s = 3.9375; [8] h = 6.10352e-05 , s = 4.03125; [9] h = 1.52588e-05 , s = 3.98438; [10] h = 3.8147e-06 , s = 4.0078",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8C.html:10052,synchroniz,synchronize,10052,doc/master/rf211__paramconv_8C.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8C.html,1,['synchroniz'],['synchronize']
Integrability,"nt calls); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options ; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance ; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorMultiDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDimOptions.html:3223,integrat,integrator,3223,root/html528/ROOT__Math__IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDimOptions.html,4,['integrat'],['integrator']
Integrability,"nt frame that on closure will put the frame back in the dock. ; Definition at line 82 of file TGDockableFrame.h. Public Member Functions;  TGDockableFrame (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame);  Create a dockable frame widget. ;  ;  ~TGDockableFrame () override;  Cleanup dockable frame. ;  ; void AddFrame (TGFrame *f, TGLayoutHints *hints) override;  Add frame to dockable frame container. Frame and hints are NOT adopted. ;  ; void DockContainer (Int_t del=kTRUE);  Dock container back to TGDockableFrame. ;  ; virtual void Docked ();  ; Bool_t EnableHide () const;  ; void EnableHide (Bool_t onoff);  Enable hiding. ;  ; Bool_t EnableUndock () const;  ; void EnableUndock (Bool_t onoff);  Enable undocking. ;  ; TGCompositeFrame * GetContainer () const;  ; TGUndockedFrame * GetUndocked () const;  ; void HideContainer ();  Hide dock container. ;  ; TClass * IsA () const override;  ; Bool_t IsFixedSize () const;  ; Bool_t IsHidden () const;  ; Bool_t IsUndocked () const;  ; Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t) override;  Process dockable frame messages. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a dockable frame widget as a C++ statement(s) on output stream out. ;  ; void SetFixedSize (Bool_t fixed);  ; void SetWindowName (const char *name) override;  Set window name so it appear as title of the undock window. ;  ; void ShowContainer ();  Show dock container. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UndockContainer ();  Undock container. ;  ; virtual void Undocked ();  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:1772,message,messages,1772,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['message'],['messages']
Integrability,"nt lineWidth, int hasbg);  Given a list of elements, compute the minimum and maximum width needed to render the list. ;  ; SHtmlTokenMap_t * NameToPmap (char *zType);  Returns token map matching zType name. ;  ; int NameToType (char *zType);  Convert a markup name into a type integer. ;  ; int NextMarkupType (TGHtmlElement *p);  Return the next markup type [TGHtmlElement::NextMarkupType]. ;  ; SHtmlStyle_t PopStyleStack (int tag);  Pop a rendering style off of the stack. ;  ; void PushStyleStack (int tag, SHtmlStyle_t style);  Push a new rendering style onto the stack. ;  ; void Redraw ();  This routine is invoked in order to redraw all or part of the HTML widget. ;  ; void RedrawArea (int left, int top, int right, int bottom);  If any part of the screen needs to be redrawn, then call this routine with the values of a box (in window coordinates) that needs to be redrawn. ;  ; void RedrawBlock (TGHtmlBlock *p);  Redraw the TGHtmlBlock given. ;  ; void RedrawEverything ();  Call this routine to force the entire widget to be redrawn. ;  ; void RedrawText (int y);  Call this routine to cause all of the rendered HTML at the virtual canvas coordinate of Y and beyond to be redrawn. ;  ; void ResetLayoutContext ();  Reset the main layout context in the main widget. ;  ; void ScheduleRedraw ();  Make sure that a call to the Redraw() routine has been queued. ;  ; int SelectionSet (const char *startIx, const char *endIx);  Set selection. ;  ; int SetInsert (const char *insIx);  Set the position of the insertion cursor. ;  ; void SizeAndLink (TGFrame *frame, TGHtmlInput *pElem);  'frame' is the child widget that is used to implement an input element. ;  ; void Sizer ();  Compute the size of all elements in the widget. ;  ; void StringHW (const char *str, int *h, int *w);  Return the height and width of string. ;  ; void TableBgndImage (TGHtmlElement *p);  Set background picture of a html table. ;  ; int TextInsertCmd (int argc, char **argv);  Insert text into text token, or bre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:35681,rout,routine,35681,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,"nt log of pdf; vector<double>fModevector representing the x coordinates of the maximum of the pdf ; boolfOwnFuncflag to indicate if class manages the function pointers; const ROOT::Math::IBaseFunctionMultiDim*fPdfpointer to the pdf; vector<double>fXmaxvector with upper x values of the domain ; vector<double>fXminvector with lower x values of the domain. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuranMultiContDist(TF1* func = 0, unsigned int dim = 0, bool isLogPdf = false). Constructor from a TF1 object representing the Probability density function.; The derivatives of the Pdf are estimated, when required by the UNURAN algorithm,; using numerical derivation.; If a value of dim 0 is passed , the dimension of the function is taken from TF1::GetNdim().; This works only for 2D and 3D (for TF2 and TF3 objects). TUnuranMultiContDist(const ROOT::Math::IMultiGenFunction& pdf, bool isLogPdf = false). Constructor as before but from a generic function object interface for multi-dim functions. virtual ~TUnuranMultiContDist(). Destructor. TUnuranMultiContDist(const TUnuranMultiContDist& ). Copy constructor. TUnuranMultiContDist * Clone() const. Clone (required by base class). { return new TUnuranMultiContDist(*this); }. unsigned int NDim() const. get number of dimension of the distribution. void SetDomain(const double* xmin, const double* xmax). set the domain of the distribution giving an array of minimum and maximum values; By default otherwise the domain is undefined, i.e. is [-inf,+inf]; To remove the domain do a SetDomain(0,0).; There is no possibility to have a domain defined in only one coordinate. Use instead inf or DOUBLE_MAX to; specify un infinite domain in that coordinate. void SetMode(const double* x). set the mode of the distribution (coordinates of the distribution maximum values). const double * GetLowerDomain() const. get the distribution lower domain values. Return a null pointer if domain is not defined. const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnuranMultiContDist.html:3284,interface,interface,3284,root/html528/TUnuranMultiContDist.html,https://root.cern,https://root.cern/root/html528/TUnuranMultiContDist.html,4,['interface'],['interface']
Integrability,"nt newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/UnBinData.h>. Inheritance diagram for ROOT::Fit::UnBinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UnBinData() [1/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:8970,rout,routines,8970,doc/master/classROOT_1_1Fit_1_1UnBinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html,1,['rout'],['routines']
Integrability,"nt of screen space needed to display a multi-line, justified string of text. ; Records all the measurements that were done to determine to size and positioning of the individual lines of text; this information can be used by the TGTextLayout::DrawText() procedure to display the text quickly (without remeasuring it).; This procedure is useful for simple widgets that want to display single-font, multi-line text and want TGFont to handle the details.; The return value is a TGTextLayout token that holds the measurement information for the given string. The token is only valid for the given string. If the string is freed, the token is no longer valid and must also be deleted.; The dimensions of the screen area needed to display the text are stored in *width and *height.; string – String whose dimensions are to be computed. numChars – Number of characters to consider from string, or < 0 for strlen(). wrapLength – Longest permissible line length, in pixels. <= 0 means no automatic wrapping: just let lines get as long as needed. justify – How to justify lines. flags – Flag bits OR-ed together. kTextIgnoreTabs means that tab characters should not be expanded. kTextIgnoreNewlines means that newline characters should not cause a line break. width – Filled with width of string. height – Filled with height of string. ; Definition at line 661 of file TGFont.cxx. ◆ DeclFileName(). static const char * TGFont::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 209 of file TGFont.h. ◆ DrawChars(). void TGFont::DrawChars ; (; Drawable_t ; dst, . GContext_t ; gc, . const char * ; source, . Int_t ; numChars, . Int_t ; x, . Int_t ; y . ); const. Perform a quick sanity check to ensure we won't overflow the X coordinate space. ; Definition at line 1493 of file TGFont.cxx. ◆ DrawCharsExp(). void TGFont::DrawCharsExp ; (; Drawable_t ; dst, . GContext_t ; gc, . const char * ; source, . Int_t ; numChars, . Int_t ; x, . Int_t ; y . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFont.html:16815,wrap,wrapping,16815,doc/master/classTGFont.html,https://root.cern,https://root.cern/doc/master/classTGFont.html,1,['wrap'],['wrapping']
Integrability,"nt pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:119983,rout,routed,119983,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,3,"['message', 'protocol', 'rout']","['message', 'protocol', 'routed']"
Integrability,"nt pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:121313,rout,routed,121313,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,3,"['message', 'protocol', 'rout']","['message', 'protocol', 'routed']"
Integrability,nt per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2S2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3C3-D histogram with a bype per channel (see TH1 documentation) ;  CTH3D3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3F3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3I3-D histogram with a int per channel (see TH1 documentation)} ;  CTH3S3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CTFileSysDir;  CTFileSysEn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:135771,interface,interface,135771,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['interface'],['interface']
Integrability,"nt precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimization is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMinimum can be printed on the output simply via std::cout. It will print both the internal and external state, that is parameters, errors and the covariance matrix (if available). It also tells the user if M did converge or not by issuing an appropriate message. If a covariance matrix is available, the global correlation coefficients are printed as well.; 4.5.5 Global correlation coefficients; The global correlation coefficient for parameter \(n\) is a number between zero and one which gives the correlation between parameter \(n\) and that linear combination of all other parameters which is most strongly correlated with \(n\).; 5 M application programming interface (API); [api:api]; 5.1 FunctionMinimum; [api:fm] The FunctionMinimum is the output of the minimizers and contains the minimization result. The state at the minimum is available both in internal and external representations. For the external representations the return methods. FunctionMinimum::userState(),; FunctionMinimum::userParameters() and; FunctionMinimum::userCovariance(). are provided. These can be used as new input to a new minimization after some manipulation. The parameters and/or the FunctionMinimum can be printed using std::cout.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:37819,message,message,37819,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['message'],['message']
Integrability,"nt precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimzation is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMinimum can be printed on the output simply via std::cout. It will print both the internal and external state, that is parameters, errors and the covariance matrix (if available). It also tells the user if M did converge or not by issueing an appropriate message. If a covariance matrix is available, the global correlation coefficients are printed as well.; 4.5.5 Global correlation coefficients; The global correlation coefficient for parameter \(n\) is a number between zero and one which gives the correlation between parameter \(n\) and that linear combination of all other parameters which is most strongly correlated with \(n\).; 5 M application programming interface (API); [api:api]; 5.1 FunctionMinimum; [api:fm] The FunctionMinimum is the output of the minimizers and contains the minimzation result. The state at the minimum is available both in internal and external representations. For the external representations the return methods. FunctionMinimum::userState(),; FunctionMinimum::userParameters() and; FunctionMinimum::userCovariance(). are provided. These can be used as new input to a new minimization after some manipulation. The parameters and/or the FunctionMinimum can be printed using std::cout.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:41825,message,message,41825,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['message'],['message']
Integrability,"nt to be ready for execution of next command. ; Definition at line 2548 of file TProofServ.cxx. ◆ ResolveKeywords(). void TProofServ::ResolveKeywords ; (; TString & ; fname, . const char * ; path = 0 . ). static . Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and <build> placeholders in fname. ; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a string includign version, architecture and compiler version, e.g. '53403_linuxx8664gcc_gcc46' . ; Definition at line 6702 of file TProofServ.cxx. ◆ RestartComputeTime(). void TProofServ::RestartComputeTime ; (; ). Reset the compute time. ; Definition at line 1126 of file TProofServ.cxx. ◆ Run(). void TProofServ::Run ; (; Bool_t ; retrn = kFALSE). overridevirtual . Main server eventloop. ; Reimplemented from TApplication.; Definition at line 2650 of file TProofServ.cxx. ◆ SendAsynMessage(). void TProofServ::SendAsynMessage ; (; const char * ; msg, . Bool_t ; lf = kTRUE . ). Send an asychronous message to the master / client . ; Masters will forward up the message to the client. The client prints 'msg' of stderr and adds a '\n'/'\r' depending on 'lf' being kTRUE (default) or kFALSE. Returns the return value from TSocket::Send(TMessage &) . ; Definition at line 5989 of file TProofServ.cxx. ◆ SendLogFile(). void TProofServ::SendLogFile ; (; Int_t ; status = 0, . Int_t ; start = -1, . Int_t ; end = -1 . ). virtual . Send log file to master. ; If start > -1 send only bytes in the range from start to end, if end <= start send everything from start. ; Definition at line 2665 of file TProofServ.cxx. ◆ SendParallel(). void TProofServ::SendParallel ; (; Bool_t ; async = kFALSE). Send number of parallel nodes to master or client. ; Definition at line 2780 of file TProofServ.cxx. ◆ SendResults(). Int_t TProofServ::SendResults ; (; TSocket * ; sock, . TList * ; outlist = 0, . TQueryResult * ; pq = 0 . ). private . Sends all objects from the given list to the specified socket. ; Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:52840,message,message,52840,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['message'],['message']
Integrability,"nt values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TF1*func; RooListProxyolist; RooListProxyplist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooTFnBinding.html:32295,integrat,integrator,32295,root/html530/RooTFnBinding.html,https://root.cern,https://root.cern/root/html530/RooTFnBinding.html,1,['integrat'],['integrator']
Integrability,"nt! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedReal::_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsSelfCachedReal.html:34973,integrat,integration,34973,root/html534/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsSelfCachedReal.html,3,['integrat'],['integration']
Integrability,"nt() const; virtual Bool_tRooAbsOptTestStatistic::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsOptTestStatistic::isSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNLLVar.html:18308,message,message,18308,root/html532/RooNLLVar.html,https://root.cern,https://root.cern/root/html532/RooNLLVar.html,1,['message'],['message']
Integrability,"nt() const; virtual Bool_tRooAbsOptTestStatistic::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsOptTestStatistic::isSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChi2Var.html:18679,message,message,18679,root/html532/RooChi2Var.html,https://root.cern,https://root.cern/root/html532/RooChi2Var.html,3,['message'],['message']
Integrability,"nt(QDropEvent* Event); Start a drop, for now only histogram objects can be drwon by droping. void cd(Int_t subpadnumber = 0); Just a wrapper. void Browse(TBrowser* b); Just a wrapper. void Clear(Option_t* option = """"); Just a wrapper. void Close(Option_t* option = """"); Just a wrapper. void Draw(Option_t* option = """"); Just a wrapper. TObject * DrawClone(Option_t* option = """"); Just a wrapper. TObject * DrawClonePad(); Just a wrapper. void EditorBar(); Just a wrapper. void EnterLeave(TPad* prevSelPad, TObject* prevSelObj); just a wrapper. void FeedbackMode(Bool_t set); just a wrapper. void Flush(); just a wrapper. void UseCurrentStyle(); just a wrapper. void ForceUpdate(); just a wrapper. const char * GetDISPLAY(); just a wrapper. TContextMenu * GetContextMenu(); just a wrapper. Int_t GetDoubleBuffer(); just a wrapper. Int_t GetEvent(); just a wrapper. Int_t GetEventX(); just a wrapper. Int_t GetEventY(); just a wrapper. Color_t GetHighLightColor(); just a wrapper. TVirtualPad * GetPadSave(); just a wrapper. TObject * GetSelected(); just a wrapper. Option_t * GetSelectedOpt(); just a wrapper. TVirtualPad * GetSelectedPad(); just a wrapper. Bool_t GetShowEventStatus(); just a wrapper. Bool_t GetAutoExec(); just a wrapper. Size_t GetXsizeUser(); just a wrapper. Size_t GetYsizeUser(); just a wrapper. Size_t GetXsizeReal(); just a wrapper. Size_t GetYsizeReal(); just a wrapper. Int_t GetCanvasID(); just a wrapper. Int_t GetWindowTopX(); just a wrapper. Int_t GetWindowTopY(); just a wrapper. UInt_t GetWindowWidth(); just a wrapper. UInt_t GetWindowHeight(); just a wrapper. UInt_t GetWw(); just a wrapper. UInt_t GetWh(); just a wrapper. void GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UInt_t& wh); just a wrapper. void HandleInput(EEventType button, Int_t x, Int_t y); just a wrapper. Bool_t HasMenuBar(); just a wrapper. void Iconify(); just a wrapper. Bool_t IsBatch(); just a wrapper. Bool_t IsRetained(); just a wrapper. void ls(Option_t* option = """"); just a wrapp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootCanvas.html:5709,wrap,wrapper,5709,root/html528/TQRootCanvas.html,https://root.cern,https://root.cern/root/html528/TQRootCanvas.html,3,['wrap'],['wrapper']
Integrability,"nt(shortFormat=True); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; RangeTa Range(0, 0, 1, 1); Dataframe from TChain Events in file root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root; ; Property Value; -------- -----; Columns in total 6; Columns from defines 0; Event loops run 0; ; Column Type Origin; ------ ---- ------; Muon_charge ROOT::VecOps::RVec<Int_t> Dataset; Muon_eta ROOT::VecOps::RVec<Float_t> Dataset; Muon_mass ROOT::VecOps::RVec<Float_t> Dataset; Muon_phi ROOT::VecOps::RVec<Float_t> Dataset; Muon_pt ROOT::VecOps::RVec<Float_t> Dataset; nMuon UInt_t Dataset; ; Approximate mass of the Z boson: 91.44 GeV; ; Dataframe from TChain Events in file root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root; ; Property Value; -------- -----; Columns in total 7; Columns from defines 1; Event loops run 1; ; Column Type Origin; ------ ---- ----",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df033__Describe_8py.html:2399,interface,interface,2399,doc/master/df033__Describe_8py.html,https://root.cern,https://root.cern/doc/master/df033__Describe_8py.html,1,['interface'],['interface']
Integrability,"nt. void mousePressEvent(QMouseEvent* e); Handle mouse button press event. void mouseReleaseEvent(QMouseEvent* e); Handle mouse button release event. void mouseDoubleClickEvent(QMouseEvent* e); Handle mouse double click event. void resizeEvent(QResizeEvent* e); Call QWidget resize and inform the ROOT Canvas. void paintEvent(QPaintEvent* e); Handle paint event of Qt. void leaveEvent(QEvent* e); Handle leave event. void dragEnterEvent(QDragEnterEvent* e); Entering a drag event. void dropEvent(QDropEvent* Event); Start a drop, for now only histogram objects can be drwon by droping. void cd(Int_t subpadnumber = 0); Just a wrapper. void Browse(TBrowser* b); Just a wrapper. void Clear(Option_t* option = """"); Just a wrapper. void Close(Option_t* option = """"); Just a wrapper. void Draw(Option_t* option = """"); Just a wrapper. TObject * DrawClone(Option_t* option = """"); Just a wrapper. TObject * DrawClonePad(); Just a wrapper. void EditorBar(); Just a wrapper. void EnterLeave(TPad* prevSelPad, TObject* prevSelObj); just a wrapper. void FeedbackMode(Bool_t set); just a wrapper. void Flush(); just a wrapper. void UseCurrentStyle(); just a wrapper. void ForceUpdate(); just a wrapper. const char * GetDISPLAY(); just a wrapper. TContextMenu * GetContextMenu(); just a wrapper. Int_t GetDoubleBuffer(); just a wrapper. Int_t GetEvent(); just a wrapper. Int_t GetEventX(); just a wrapper. Int_t GetEventY(); just a wrapper. Color_t GetHighLightColor(); just a wrapper. TVirtualPad * GetPadSave(); just a wrapper. TObject * GetSelected(); just a wrapper. Option_t * GetSelectedOpt(); just a wrapper. TVirtualPad * GetSelectedPad(); just a wrapper. Bool_t GetShowEventStatus(); just a wrapper. Bool_t GetAutoExec(); just a wrapper. Size_t GetXsizeUser(); just a wrapper. Size_t GetYsizeUser(); just a wrapper. Size_t GetXsizeReal(); just a wrapper. Size_t GetYsizeReal(); just a wrapper. Int_t GetCanvasID(); just a wrapper. Int_t GetWindowTopX(); just a wrapper. Int_t GetWindowTopY(); just a wrapp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootCanvas.html:5230,wrap,wrapper,5230,root/html528/TQRootCanvas.html,https://root.cern,https://root.cern/root/html528/TQRootCanvas.html,3,['wrap'],['wrapper']
Integrability,"nt.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 2069 of file TVirtualX.cxx. ◆ FillRectangle(). void TVirtualX::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1897 of file TVirtualX.cxx. ◆ FindRWindow(). Window_t TVirtualX::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). virtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2471 of file TVirtualX.cxx. ◆ FlushOpenGLBuffer(). void TVirtualX::FlushOpenGLBuffer ; (; Handle_t ; ctx). virtual . Flushes OpenGL buffer. ; Reimplemented in TGCocoa.; Definition at line 260 of file TVirtualX.cxx. ◆ FreeColor(). void TVirtualX::FreeColor ; (; Colormap_t ; cmap, . ULong_t ; pixel . ). virtual . Frees color cell with specified pixel value. ; Reimplemented in TGCocoa, TGWin32, TGWin32",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:79478,depend,dependent,79478,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['depend'],['dependent']
Integrability,"nt.cxx:2209; TBranchElement::InitializeOffsetsvirtual void InitializeOffsets()Initialize the base class subobjects offsets of our sub-branches and set fOffset if we are a containe...Definition TBranchElement.cxx:3137; TBranchElement::GetIconNameconst char * GetIconName() const overrideReturn icon name depending on type of branch element.Definition TBranchElement.cxx:2853; TBranchElement::GetParentClassTClass * GetParentClass()Return a pointer to the parent class of the branch element.Definition TBranchElement.cxx:2894; TBranchElement::GetNdataInt_t GetNdata() constDefinition TBranchElement.h:202; TBranchElement::GetExpectedTypeInt_t GetExpectedType(TClass *&clptr, EDataType &type) overrideFill expectedClass and expectedType with information on the data type of the object/values contained ...Definition TBranchElement.cxx:2804; TBranchElement::fInitbool fInit! Initialization flag for branch assignmentDefinition TBranchElement.h:88; TBranchElement::fCollProxyTVirtualCollectionProxy * fCollProxy! collection interface (if any)Definition TBranchElement.h:63; TBranchElement::SetFillActionSequencevoid SetFillActionSequence()Set the sequence of actions needed to write the data out from the buffer.Definition TBranchElement.cxx:5763; TBranchElement::SetObjectvoid SetObject(void *objadd) overrideSet object this branch is pointing to.Definition TBranchElement.cxx:5575; TBranchElement::fStreamerTypeInt_t fStreamerTypebranch streamer typeDefinition TBranchElement.h:79; TBranchElement::ReadLeavesCollectionSplitVectorPtrMembervoid ReadLeavesCollectionSplitVectorPtrMember(TBuffer &b)Read leaves into i/o buffers for this branch.Definition TBranchElement.cxx:4398; TBranchElement::GetMakeClassbool GetMakeClass() const overrideReturn whether this branch is in a mode where the object are decomposed or not (Also known as MakeCla...Definition TBranchElement.cxx:2866; TBranchElement::SetAddressImplvoid SetAddressImpl(void *addr, bool implied) overrideSee TBranchElement::SetAddress.Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:271205,interface,interface,271205,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['interface'],['interface']
Integrability,"nt.h>. Inheritance diagram for TGFont:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGFont() [1/2]. TGFont::TGFont ; (; const char * ; name). inlineprotected . Definition at line 163 of file TGFont.h. ◆ TGFont() [2/2]. TGFont::TGFont ; (; const TGFont & ; ). protecteddelete . ◆ ~TGFont(). TGFont::~TGFont ; (; ). override . Delete font. ; Definition at line 276 of file TGFont.cxx. Member Function Documentation. ◆ Class(). static TClass * TGFont::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGFont::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGFont::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 209 of file TGFont.h. ◆ ComputeTextLayout(). TGTextLayout * TGFont::ComputeTextLayout ; (; const char * ; string, . Int_t ; numChars, . Int_t ; wrapLength, . Int_t ; justify, . Int_t ; flags, . UInt_t * ; width, . UInt_t * ; height . ); const. Computes the amount of screen space needed to display a multi-line, justified string of text. ; Records all the measurements that were done to determine to size and positioning of the individual lines of text; this information can be used by the TGTextLayout::DrawText() procedure to display the text quickly (without remeasuring it).; This procedure is useful for simple widgets that want to display single-font, multi-line text and want TGFont to handle the details.; The return value is a TGTextLayout token that holds the measurement information for the given string. The token is only valid for the given string. If the string is freed, the token is no longer valid and must also be deleted.; The dimensions of the screen area needed to display the text are stored in *width and *height.; string – String whose dimensions are to be computed. numChars – Number of characters to consider from string",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFont.html:15709,wrap,wrapLength,15709,doc/master/classTGFont.html,https://root.cern,https://root.cern/doc/master/classTGFont.html,1,['wrap'],['wrapLength']
Integrability,"nt::kSTLunorderedmultiset; static TStreamerElement::ESTLtypeTStreamerElement::kSTLunorderedset; static TStreamerElement::ESTLtypeTStreamerElement::kSTLvector; static TObject::(anonymous)TObject::kSingleKey; static TStreamerElement::(anonymous)TStreamerElement::kWholeObject; static TStreamerElement::(anonymous)TStreamerElement::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; UInt_t&fBaseCheckSum!checksum of the base class (used during memberwise streaming); TClass*fBaseClass!pointer to base class; Int_tfBaseVersionversion number of the base class (used during memberwise streaming); TClass*TStreamerElement::fClassObject!pointer to class of object; ClassConvStreamerFunc_tfConvStreamerFunc!Pointer to a wrapper around a custom convertion streamer member function.; TStringfErrorMsg!Error message in case of checksum/version mismatch.; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom streamer member function.; TVirtualStreamerInfo*fStreamerInfo!Pointer to the current StreamerInfo for the baset class.; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStreamerBase.html:10361,message,message,10361,root/html604/TStreamerBase.html,https://root.cern,https://root.cern/root/html604/TStreamerBase.html,1,['message'],['message']
Integrability,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:13454,integrat,integrator,13454,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['integrat'],['integrator']
Integrability,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:12523,integrat,integrator,12523,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,3,['integrat'],['integrator']
Integrability,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:15513,integrat,integrator,15513,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,3,['integrat'],['integrator']
Integrability,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:14596,integrat,integrator,14596,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,12,['integrat'],['integrator']
Integrability,"nt> ; RooCFunction3PdfBinding<double,unsigned int,unsigned int,double> ; RooCFunction3Ref<double,double,double,bool> ; RooCFunction3Ref<double,double,double,double> ; RooCFunction3Ref<double,double,int,int> ; RooCFunction3Ref<double,unsigned int,double,double> ; RooCFunction3Ref<double,unsigned int,double,unsigned int> ; RooCFunction3Ref<double,unsigned int,unsigned int,double> ; RooCFunction4Binding<double,double,double,double,bool> ; RooCFunction4Binding<double,double,double,double,double> ; RooCFunction4Binding<double,double,double,double,int> ; RooCFunction4PdfBinding<double,double,double,double,bool> ; RooCFunction4PdfBinding<double,double,double,double,double> ; RooCFunction4PdfBinding<double,double,double,double,int> ; RooCFunction4Ref<double,double,double,double,bool> ; RooCFunction4Ref<double,double,double,double,double> ; RooCFunction4Ref<double,double,double,double,int> ; RooCacheManager<RooAbsCacheElement> ; RooCacheManager<vector<double> > ; RooCachedPdf P.d.f class that wraps another p.d.f and caches its output; RooCachedReal P.d.f class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:29949,wrap,wraps,29949,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['wrap'],['wraps']
Integrability,"ntCompactTreeHook(ostream& os, const char* indent = """"); Catch print hook function and forward to function clone. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Driver function to propagate constant term optimizations in test statistic.; If code Activate is sent, constant term optimization will be executed.; If code Deacivate is sent, any existing constant term optimizations will; be abanoned. If codes ConfigChange or ValueChange are sent, any existing; constant term optimizations will be redone. void optimizeCaching(); This method changes the value caching logic for all nodes that depends on any of the observables; as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; with a dataset the observables are guaranteed to change with every call, thus there is no point; in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t , Bool_t = kTRUE); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setDataSlave(RooAbsData& data, Bool_t cloneData = kTRUE, Bool_t ownNewDataAnyway = kFALSE); cout << ""RAOTS::setDataSlave("" << this << "") START"" << endl ;; Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:39035,depend,dependent,39035,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,8,['depend'],['dependent']
Integrability,"ntEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, SummationRule rule,				 Int_t maxSteps, Double_t eps); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax,				const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Need",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:8247,integrat,integration,8247,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,1,['integrat'],['integration']
Integrability,"ntHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 59 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = typedef void *(void*). Definition at line 140 of file TStorage.h. ◆ GetRO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:16821,message,message,16821,doc/v632/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html,1,['message'],['message']
Integrability,"ntHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  ; template<class T > ; void SwapWithObjAtAddr (T &a, std::intptr_t b);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 60 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:17084,message,message,17084,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,1,['message'],['message']
Integrability,ntListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsR,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPolynomial.html:36928,integrat,integration,36928,root/html526/RooPolynomial.html,https://root.cern,https://root.cern/root/html526/RooPolynomial.html,1,['integrat'],['integration']
Integrability,ntListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooPolynomial.html:37310,integrat,integration,37310,root/html528/RooPolynomial.html,https://root.cern,https://root.cern/root/html528/RooPolynomial.html,3,['integrat'],['integration']
Integrability,ntListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; Int_t_nBins; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; In,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooParametricStepFunction.html:37800,integrat,integration,37800,root/html526/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html526/RooParametricStepFunction.html,1,['integrat'],['integration']
Integrability,ntListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; Int_t_nBins; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeD,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooParametricStepFunction.html:38182,integrat,integration,38182,root/html528/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html528/RooParametricStepFunction.html,3,['integrat'],['integration']
Integrability,ntListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*RooAbsOptTestStatistic::_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_tRooAbsTestStatistic::_doOffsetApply interval value offset to control numeric precision?; static RooArgSet_emptySetSupports named argument constructor; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_tRooAbsTestStatistic::_evalCarry! carry of Kahan sum in evaluatePartition; Int_tRooAbsTestStatistic::_extSet! Number of designated set to calculated extended term; Bool_t_extended; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Bool_t_first!; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**RooAbsTestStatistic::_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>RooAbsTestStatistic::_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsTes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:37842,integrat,integration,37842,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,1,['integrat'],['integration']
Integrability,"ntListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; RooSetProxy_facListSet of observables on which function does not depends, which are integrated nevertheless; TIterator*_facListIter! Iterator over factorizing observables; RooArgSet_facListOwnedOwned components in _facList; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooArgSet*_funcNormSetOptional normalization set passed to function; RooRealProxy_functionFunction being integration; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooNumIntConfig*_iconfig; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooSetProxy_intListSet of continuous observables over which is integrated numerically; RooRealIntegral::IntOperMode_intOperModeintegration operation mode; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; RooSetProxy_jacListSet of lvalue observables over which is analytically integration that have a non-unit Jacobian; TIterator*_jacListIter! Iterator over lvalue observables with Jacobian; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealIntegral.html:35706,integrat,integration,35706,root/html602/RooRealIntegral.html,https://root.cern,https://root.cern/root/html602/RooRealIntegral.html,2,['integrat'],['integration']
Integrability,"ntParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TG16ColorSelector(const TGWindow* p = 0); TG16ColorSelector constructor.; The TG16ColorSelector is a composite frame with 16 TGColorFrames. ~TG16ColorSelector(); TG16ColorSelector destructor. void SetActive(Int_t newat); Set active color frame. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for TG16ColorSelector. TGColorFrame& operator=(const TG16ColorSelector& ). TG16ColorSelector(const TG16ColorSelector& ). Int_t GetActive(); { return fActive; }. » Author: Bertrand Bellenot + Fons Rademakers 22/08/02 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TG16ColorSelector.html:20639,message,messages,20639,root/html604/TG16ColorSelector.html,https://root.cern,https://root.cern/root/html604/TG16ColorSelector.html,1,['message'],['messages']
Integrability,"ntParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TG16ColorSelector(const TGWindow* p = 0); TG16ColorSelector constructor.; The TG16ColorSelector is a composite frame with 16 TGColorFrames. ~TG16ColorSelector(); TG16ColorSelector destructor. void SetActive(Int_t newat); Set active color frame. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for TG16ColorSelector. TGColorFrame& operator=(const TG16ColorSelector& ). TG16ColorSelector(const TG16ColorSelector& ). Int_t GetActive(); { return fActive; }. » Author: Bertrand Bellenot + Fons Rademakers 22/08/02 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TG16ColorSelector.html:20639,message,messages,20639,root/html602/TG16ColorSelector.html,https://root.cern,https://root.cern/root/html602/TG16ColorSelector.html,1,['message'],['messages']
Integrability,"ntRecord which StreamerInfo we already sent.; TMessagefMessage; Int_tfServerIdxIndex of this socket/file on the server.; TUrlfServerLocationUrl of the server.; Int_tfServerVersionProtocol version used by the server.; TSocket*fSocketSocket to the parallel file merger server. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TParallelMergingFile(const char* filename, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); Constructor.; We do no yet open any connection to the server. This will be done at the; time the first upload will be requested. ~TParallelMergingFile(); Destructor. void Close(Option_t* option = """"). Bool_t UploadAndReset(); Upload the current file data to the merging server.; Reset the file and return true in case of success. Int_t Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); Write memory objects to this file and upload them to the parallel merge server.; Then reset all the resetable object (those with a ResetAfterMerge routine,; like TTree). Loop on all objects in memory (including subdirectories).; A new key is created in the KEYS linked list for each object.; The list of keys is then saved on the file (via WriteKeys); as a single data record.; For values of opt see TObject::Write().; The directory header info is rewritten on the directory header record.; The linked list of FREE segments is written.; The file header is written (bytes 1->fBEGIN). Int_t Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; One can not save a const TDirectory object. void WriteStreamerInfo(); Write the list of TStreamerInfo as a single object in this file; The class Streamer description for all classes written to this file; is saved. See class TStreamerInfo. TParallelMergingFile(const char* filename, Option_t* option = """", const char* ftitle = """", Int_t compress = 1). » Author: Philippe Canal October 2011. » Copyright (C) 1995-2011, Rene Brun, Fons Rademakers and al. *; » Last chang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelMergingFile.html:25040,rout,routine,25040,root/html602/TParallelMergingFile.html,https://root.cern,https://root.cern/root/html602/TParallelMergingFile.html,2,['rout'],['routine']
Integrability,"nt_t *flag, Int_t &iwfr, Int_t *icntl, Int_t *info);  Help routine for pivoting setup. ;  ; static void InitPivot_sub2 (const Int_t n, Int_t *ipe, Int_t *iw, const Int_t lw, Int_t &iwfr, Int_t *nv, Int_t *nxt, Int_t *lst, Int_t *ipd, Int_t *flag, const Int_t iovflo, Int_t &ncmpa, const Double_t fratio);  Help routine for pivoting setup. ;  ; static void InitPivot_sub2a (const Int_t n, Int_t *ipe, Int_t *iw, const Int_t lw, Int_t &iwfr, Int_t &ncmpa);  Help routine for pivoting setup. ;  ; static void InitPivot_sub3 (const Int_t n, const Int_t nz, Int_t *irn, Int_t *icn, Int_t *perm, Int_t *iw, Int_t *ipe, Int_t *iq, Int_t *flag, Int_t &iwfr, Int_t *icntl, Int_t *info);  Help routine for pivoting setup. ;  ; static void InitPivot_sub4 (const Int_t n, Int_t *ipe, Int_t *iw, const Int_t lw, Int_t &iwfr, Int_t *ips, Int_t *ipv, Int_t *nv, Int_t *flag, Int_t &ncmpa);  Help routine for pivoting setup. ;  ; static void InitPivot_sub5 (const Int_t n, Int_t *ipe, Int_t *nv, Int_t *ips, Int_t *ne, Int_t *na, Int_t *nd, Int_t &nsteps, const Int_t nemin);  Help routine for pivoting setup. ;  ; static void InitPivot_sub6 (const Int_t n, const Int_t nz, Int_t *irn, Int_t *icn, Int_t *perm, Int_t *na, Int_t *ne, Int_t *nd, const Int_t nsteps, Int_t *lstki, Int_t *lstkr, Int_t *iw, Int_t *info, Double_t &ops);  Help routine for pivoting setup. ;  ; static Int_t NonZerosUpperTriang (const TMatrixDSparse &a);  Static function, returning the number of non-zero entries in the upper triangular matrix . ;  ; static void Solve (const Int_t n, TArrayD &Aa, TArrayI &Aiw, TArrayD &Aw, const Int_t maxfrt, TVectorD &b, TArrayI &Aiw1, const Int_t nsteps, Int_t *icntl, Int_t *info);  Main routine for solving Ax=b. ;  ; static void Solve_sub1 (const Int_t n, Double_t *a, Int_t *iw, Double_t *w, Double_t *rhs, Int_t *iw2, const Int_t nblk, Int_t &latop, Int_t *icntl);  Help routine for solving. ;  ; static void Solve_sub2 (const Int_t n, Double_t *a, Int_t *iw, Double_t *w, Double_t *rhs, Int_t *iw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:14712,rout,routine,14712,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['rout'],['routine']
Integrability,"nt_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:25968,protocol,protocol,25968,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['protocol'],['protocol']
Integrability,"nt_t * ; width, . UInt_t * ; height . ); const. Computes the amount of screen space needed to display a multi-line, justified string of text. ; Records all the measurements that were done to determine to size and positioning of the individual lines of text; this information can be used by the TGTextLayout::DrawText() procedure to display the text quickly (without remeasuring it).; This procedure is useful for simple widgets that want to display single-font, multi-line text and want TGFont to handle the details.; The return value is a TGTextLayout token that holds the measurement information for the given string. The token is only valid for the given string. If the string is freed, the token is no longer valid and must also be deleted.; The dimensions of the screen area needed to display the text are stored in *width and *height.; string – String whose dimensions are to be computed. numChars – Number of characters to consider from string, or < 0 for strlen(). wrapLength – Longest permissible line length, in pixels. <= 0 means no automatic wrapping: just let lines get as long as needed. justify – How to justify lines. flags – Flag bits OR-ed together. kTextIgnoreTabs means that tab characters should not be expanded. kTextIgnoreNewlines means that newline characters should not cause a line break. width – Filled with width of string. height – Filled with height of string. ; Definition at line 661 of file TGFont.cxx. ◆ DeclFileName(). static const char * TGFont::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 209 of file TGFont.h. ◆ DrawChars(). void TGFont::DrawChars ; (; Drawable_t ; dst, . GContext_t ; gc, . const char * ; source, . Int_t ; numChars, . Int_t ; x, . Int_t ; y . ); const. Perform a quick sanity check to ensure we won't overflow the X coordinate space. ; Definition at line 1493 of file TGFont.cxx. ◆ DrawCharsExp(). void TGFont::DrawCharsExp ; (; Drawable_t ; dst, . GContext_t ; gc, . const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFont.html:16734,wrap,wrapLength,16734,doc/master/classTGFont.html,https://root.cern,https://root.cern/doc/master/classTGFont.html,1,['wrap'],['wrapLength']
Integrability,"nt_t > *layout, std::vector< Double_t > *weights=nullptr, Bool_t fromFile=kFALSE);  build network given a layout (number of neurons in each layer) and optional weights array ;  ; void CreateWeightMonitoringHists (const TString &bulkname, std::vector< TH1 * > *hv=nullptr) const;  ; void ForceNetworkCalculations ();  calculate input values to each neuron ;  ; void ForceNetworkInputs (const Event *ev, Int_t ignoreIndex=-1);  force the input values of the input neurons force the value for each input neuron ;  ; TNeuron * GetInputNeuron (Int_t index);  ; Double_t GetNetworkOutput ();  ; TNeuron * GetOutputNeuron (Int_t index=0);  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ; Int_t NumCycles ();  ; std::vector< Int_t > * ParseLayoutString (TString layerSpec);  parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ;  ; void PrintMessage (TString message, Bool_t force=kFALSE) const;  print messages, turn off printing by setting verbose and debug flag appropriately ;  ; void WaitForKeyboard ();  wait for keyboard input, for debugging ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:26367,message,message,26367,doc/master/classTMVA_1_1MethodANNBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html,1,['message'],['message']
Integrability,"nt_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersion() const; { return fXrdProofdVersion; }. Bool_t IsValid() const; { return (fConn ? (fConn->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(); Interrupt the low level socket. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocket.html:14022,interface,interfaces,14022,root/html528/TXSocket.html,https://root.cern,https://root.cern/root/html528/TXSocket.html,1,['interface'],['interfaces']
Integrability,"nt_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersion() const; { return fXrdProofdVersion; }. Bool_t IsValid() const; { return (fConn ? (fConn->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:14476,interface,interfaces,14476,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,3,['interface'],['interfaces']
Integrability,"nt_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; namechar name[80]Definition TGX11.cxx:110; H1LeastSquareSeqndvoid H1LeastSquareSeqnd(Int_t n, Double_t *a, Int_t idim, Int_t &ifail, Int_t k, Double_t *b)Extracted from CERN Program library routine DSEQN.Definition TH1.cxx:4872; TGraph.h; TH1.h; TH2.h; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TMath.h; H1LeastSquareSeqndvoid H1LeastSquareSeqnd(Int_t n, Double_t *a, Int_t idim, Int_t &ifail, Int_t k, Double_t *b)Extracted from CERN Program library routine DSEQN.Definition TH1.cxx:4872; TMultiGraph.h; TPluginManager.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; Printfvoid Printf(const char *fmt,...)Formats a string in a circular formatting buffer and prints the string.Definition TString.cxx:2503; TVirtualFitter.h; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TAttAxis::SetNdivisionsvirtual void SetNdivisions(Int_t n=510, Bool_t optim=kTRUE)Set the number of divisions for this axis.Definition TAttAxis.cxx:233; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::SetBinLabelvirtual void SetBinLabel(Int_t bin, const char *label)Set label for bin.Definition TAxis.cxx:886; TAxis::GetTimeDisplayvirtual Bool_t GetTimeDispl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:54764,rout,routine,54764,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['rout'],['routine']
Integrability,"nt_t RooMsgService::activeStream ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inlineprotected . Find appropriate logging stream for message from given object with given topic and message level. ; Definition at line 213 of file RooMsgService.h. ◆ addStream(). RooMsgService::addStream ; (; RooFit::MsgLevel ; level, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Add a message logging stream for message with given RooFit::MsgLevel or higher. ; Higher means that messages with higher priority/severity are issued.; This method accepts the following arguments to configure the stream: . Output Style options . Prefix(bool flag=true) Prefix all messages in this stream with Topic/Originator information . Filtering options . Topic() Restrict stream to messages on given topic . ObjectName(const char*) Restrict stream to messages from object with given name . ClassName(const char*) Restrict stream to messages from objects with given class name . BaseClassName(const char*)Restrict stream to messages from objects with given base class name . LabelName(const chat*) Restrict stream to messages from objects setAttribute(const char*) tag with given name . Output redirection options . OutputFile(const char*) Send output to file with given name. Multiple streams can write to same file. . OutputStream(ostream&) Send output to given C++ stream. Multiple message streams can write to same c++ stream . The return value is the unique ID of the defined stream. PyROOT; The RooMsgService::addStream() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArg of the function. . Definition at line 177 of file RooMsgService.cxx. ◆ anyDebug(). bool RooMsgService::anyDebug ; (; ). static . Returns true if any debug level stream is active. ; Definition at line 138 of file Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:16555,message,messages,16555,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['message'],['messages']
Integrability,"nt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; modeOption_t Option_t TPoint TPoint const char modeDefinition TGWin32VirtualXProxy.cxx:68; namechar name[80]Definition TGX11.cxx:110; THttpCallArg.h; TList.h; TNamed.h; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; THttpCallArgContains arguments for single HTTP call.Definition THttpCallArg.h:27; THttpEngineAbstract class for implementing http protocol for THttpServer.Definition THttpEngine.h:19; THttpServerOnline http server for arbitrary ROOT application.Definition THttpServer.h:31; THttpServer::IsReadOnlyBool_t IsReadOnly() constreturns read-only modeDefinition THttpServer.cxx:285; THttpServer::RegisterCommandBool_t RegisterCommand(const char *cmdname, const char *method, const char *icon=nullptr)Register command which can be executed from web interface.Definition THttpServer.cxx:1428; THttpServer::fJSROOTTString fJSROOT! location of external JSROOT filesDefinition THttpServer.h:46; THttpServer::ProcessRequestvirtual void ProcessRequest(std::shared_ptr< THttpCallArg > arg)Process single http request.Definition THttpServer.cxx:978; THttpServer::GetTopNameconst char * GetTopName() constreturns name of top item in objects hierarchyDefinition THttpServer.h:130; THttpServer::FindWSstd::shared_ptr< THttpWSHandler > FindWS(const char *name)Find web-socket handler with given name.Definition THttpServer.cxx:1285; THt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8h_source.html:10581,protocol,protocol,10581,doc/master/THttpServer_8h_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8h_source.html,1,['protocol'],['protocol']
Integrability,"nt_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); Write this object to the current directory. For more see the; const version of this method. void Streamer(TBuffer& ); Stream an object of class TObject. void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). void Info(const char *location, const char *va_(fmt), ...); Issue info message. Use ""location"" to specify the method where the; warning occured. Accepts standard printf formatting arguments. void Warning(const char *location, const char *va_(fmt), ...); Issue warning message. Use ""location"" to specify the method where the; warning occured. Accepts standard printf formatting arguments. void Error(const char *location, const char *va_(fmt), ...); Issue error message. Use ""location"" to specify the method where the; error occured. Accepts standard printf formatting arguments. void SysError(const char *location, const char *va_(fmt), ...); Issue system error message. Use ""location"" to specify the method where; the system error occured. Accepts standard printf formatting arguments. void Fatal(const char *location, const char *va_(fmt), ...); Issue fatal error message. Use ""location"" to specify the method where the; fatal error occured. Accepts standard printf formatting arguments. void AbstractMethod(const char* method) const; Use this method to implement an ""abstract"" method that you don't; want to leave purely abstract. void MayNotUse(const char* method) const; Use this method to signal that a method (defined in a base class); may not be called in a derived class (in principle against good; design since a child class should not provide less functionality; than its parent, however, sometimes it is necessary). void Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; Use this method to declare a method obsolete. Specify as of which version; the method is obsolete and as from which version it will be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TObject.html:17230,message,message,17230,root/html534/TObject.html,https://root.cern,https://root.cern/root/html534/TObject.html,3,['message'],['message']
Integrability,"nt_t base); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidDrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. static TString::EStripTypeTString::kBoth; static TString::ECaseCompareTString::kExact; static TString::ECaseCompareTString::kIgnoreCase; static TString::EStripTypeTString::kLeading; static const Ssiz_tTString::kNPOS; static TString::EStripTypeTString::kTrailing. protected:. charfHotCharhot character; Int_tfHotPosposition of hot character; GContext_tfLastGCcontext used during last drawing; Int_tfOff1variable used during drawing (cache); Int_tfOff2variable used during drawing (cache); TString::Rep_tTString::fRep! String data; static TString::(anonymous)TString::kAlignment. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHotString(const char* s); Create a hot string. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw a hot string and underline the hot character. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a hot string in a column with width w. If string is longer than; w wrap it to next line. void DrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw the underline under the hot character. TGHotString(const char* s). Int_t GetHotChar() const; { return fHotChar; }. Int_t GetHotPos() const; { return fHotPos; }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGHotString.html:9579,wrap,wrap,9579,root/html604/TGHotString.html,https://root.cern,https://root.cern/root/html604/TGHotString.html,1,['wrap'],['wrap']
Integrability,"nt_t base); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidDrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. static TString::EStripTypeTString::kBoth; static TString::ECaseCompareTString::kExact; static TString::ECaseCompareTString::kIgnoreCase; static TString::EStripTypeTString::kLeading; static const Ssiz_tTString::kNPOS; static TString::EStripTypeTString::kTrailing. protected:. charfHotCharhot character; Int_tfHotPosposition of hot character; GContext_tfLastGCcontext used during last drawing; Int_tfOff1variable used during drawing (cache); Int_tfOff2variable used during drawing (cache); TString::Rep_tTString::fRep! String data; static TString::(anonymous)TString::kAlignment. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHotString(const char* s); Create a hot string. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw a hot string and underline the hot character. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a hot string in a column with width w. If string is longer than; w wrap it to next line. void DrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw the underline under the hot character. TGHotString(const char* s). Int_t GetHotChar() const; { return fHotChar; }. Int_t GetHotPos() const; { return fHotPos; }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHotString.html:9523,wrap,wrap,9523,root/html602/TGHotString.html,https://root.cern,https://root.cern/root/html602/TGHotString.html,1,['wrap'],['wrap']
Integrability,"nt_t f); virtual TClass*IsA() const; Bool_tRooAbsArg::isCloneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; Bool_tRooAbsHiddenReal::isHidden() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooUnblindCPAsymVar.html:16505,message,message,16505,root/html526/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html526/RooUnblindCPAsymVar.html,12,['message'],['message']
Integrability,"nt_t lns = str1.Length();; 6729 ; 6730 if (isc >=0 ) {; 6731 fTitle = str1(0,isc);; 6732 str1 = str1(isc+1, lns);; 6733 isc = str1.Index("";"");; 6734 if (isc >=0 ) {; 6735 str2 = str1(0,isc);; 6736 str2.ReplaceAll(""#semicolon"",10,"";"",1);; 6737 fXaxis.SetTitle(str2.Data());; 6738 lns = str1.Length();; 6739 str1 = str1(isc+1, lns);; 6740 isc = str1.Index("";"");; 6741 if (isc >=0 ) {; 6742 str2 = str1(0,isc);; 6743 str2.ReplaceAll(""#semicolon"",10,"";"",1);; 6744 fYaxis.SetTitle(str2.Data());; 6745 lns = str1.Length();; 6746 str1 = str1(isc+1, lns);; 6747 str1.ReplaceAll(""#semicolon"",10,"";"",1);; 6748 fZaxis.SetTitle(str1.Data());; 6749 } else {; 6750 str1.ReplaceAll(""#semicolon"",10,"";"",1);; 6751 fYaxis.SetTitle(str1.Data());; 6752 }; 6753 } else {; 6754 str1.ReplaceAll(""#semicolon"",10,"";"",1);; 6755 fXaxis.SetTitle(str1.Data());; 6756 }; 6757 }; 6758 ; 6759 fTitle.ReplaceAll(""#semicolon"",10,"";"",1);; 6760 ; 6761 if (gPad && TestBit(kMustCleanup)) gPad->Modified();; 6762}; 6763 ; 6764////////////////////////////////////////////////////////////////////////////////; 6765/// Smooth array xx, translation of Hbook routine `hsmoof.F`.; 6766/// Based on algorithm 353QH twice presented by J. Friedman; 6767/// in [Proc. of the 1974 CERN School of Computing, Norway, 11-24 August, 1974](https://cds.cern.ch/record/186223).; 6768/// See also Section 4.2 in [J. Friedman, Data Analysis Techniques for High Energy Physics](https://www.slac.stanford.edu/pubs/slacreports/reports16/slac-r-176.pdf).; 6769 ; 6770void TH1::SmoothArray(Int_t nn, Double_t *xx, Int_t ntimes); 6771{; 6772 if (nn < 3 ) {; 6773 ::Error(""SmoothArray"",""Need at least 3 points for smoothing: n = %d"",nn);; 6774 return;; 6775 }; 6776 ; 6777 Int_t ii;; 6778 std::array<double, 3> hh{};; 6779 ; 6780 std::vector<double> yy(nn);; 6781 std::vector<double> zz(nn);; 6782 std::vector<double> rr(nn);; 6783 ; 6784 for (Int_t pass=0;pass<ntimes;pass++) {; 6785 // first copy original data into temp array; 6786 std::copy(xx, xx+nn, zz.begin(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:266141,rout,routine,266141,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['rout'],['routine']
Integrability,"nt_t nEvtPerSample, Bool_t keepGenData, const char* asciiFilePat). private:. RooMCStudy(const RooMCStudy&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooArgSet_allDependentsList of generate + prototype dependents; Bool_t_binGenDataBin data between generating and fitting; Bool_t_canAddFitResultsAllow adding of external fit results?; RooAbsGenContext*_constrGenContextGenerator context for constraints p.d.f; RooAbsPdf*_constrPdfConstraints p.d.f; RooArgSet_dependentsList of dependents; Bool_t_extendedGenAdd poisson term to number of events to generate?; RooArgSet*_fitInitParamsList of initial values of fit parameters; RooAbsPdf*_fitModelFit model; RooLinkedList_fitOptListFit option command list; TString_fitOptionsFit options string; RooDataSet*_fitParDataData set of fit parameters of each sample; RooArgSet*_fitParamsList of actual fit parameters; TList_fitResListList of RooFitResult fit output objects; RooAbsGenContext*_genContextGenerator context; TList_genDataListList of generated data sample; RooArgSet*_genInitParamsList of originalgenerator parameters; RooAbsPdf*_genModelGenerator model; RooDataSet*_genParDataList of of generated parameters of each sample; RooArgSet*_genParamsList of actual generator parameters; const RooDataSet*_genProtoDataGenerator prot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMCStudy.html:10988,depend,dependents,10988,root/html602/RooMCStudy.html,https://root.cern,https://root.cern/root/html602/RooMCStudy.html,2,['depend'],['dependents']
Integrability,"nt_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t getCacheAllNumeric ();  Return minimum dimensions of numeric integration for which values are cached. ;  ; static void setCacheAllNumeric (Int_t ndim);  Global switch to cache all integral values that integrate at least ndim dimensions numerically. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:46311,integrat,integration,46311,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integration']
Integrability,"nt_t passed, Double_t level, Double_t& lower, Double_t& upper); calculates the interval boundaries using the frequentist methods of Feldman-Cousins. Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; Output:; - lower : lower boundary returned on exit; - upper : lower boundary returned on exit. Return a flag with the status of the calculation. Calculation:; The Feldman-Cousins is a frequentist method where the interval is estimated using a Neyman construction where the ordering; is based on the likelihood ratio:. See G. J. Feldman and R. D. Cousins, Phys. Rev. D57 (1998) 3873; and R. D. Cousins, K. E. Hymes, J. Tucker, Nuclear Instruments and Methods in Physics Research A 612 (2010) 388. Implemented using classes developed by Jordan Tucker and Luca Lista; See File hist/hist/src/TEfficiencyHelper.h. Double_t Bayesian(Int_t total, Int_t passed, Double_t level, Double_t alpha, Double_t beta, Bool_t bUpper, Bool_t bShortest = false); calculates the boundaries for a Bayesian confidence interval (shortest or central interval depending on the option). Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; - alpha : shape parameter > 0 for the prior distribution (fBeta_alpha); - beta : shape parameter > 0 for the prior distribution (fBeta_beta); - bUpper: true - upper boundary is returned; false - lower boundary is returned. Note: In the case central confidence interval is calculated.; when passed = 0 (or passed = total) the lower (or upper); interval values will be larger than 0 (or smaller than 1). Calculation:. The posterior probability in bayesian statistics is given by:. As an efficiency can be interpreted as probability of a positive outcome of; a Bernoullli trial the likelihood function is given by the binomial; distribution:. At the moment only beta distributions are supported as prior probabilities; of the efficiency ( is the beta function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:41398,depend,depending,41398,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,6,['depend'],['depending']
Integrability,"nt_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResult.html:5598,message,message,5598,doc/master/classTFitResult.html,https://root.cern,https://root.cern/doc/master/classTFitResult.html,1,['message'],['message']
Integrability,"nt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TObjArray * GetSpecialProtocols ();  Read the list of special protocols from the rootrc files. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EStatusBits { kUrlWithDefaultPort = (1ULL << ( 14 )); , kUrlHasDefaultPort = (1ULL << ( 15 )); };  . Private Member Functions; void FindFile (char *u, Bool_t stripDoubleSlash=kTRUE);  Find file and optionally anchor and options. ;  . Private Attributes; TString fAnchor;  ; TString fFile;  ; TString fFileOA;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUrl.html:10595,protocol,protocols,10595,doc/master/classTUrl.html,https://root.cern,https://root.cern/doc/master/classTUrl.html,1,['protocol'],['protocols']
Integrability,"nt_t width, UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth); virtual Pixmap_tTGX11::CreatePixmapFromData(unsigned char* bits, UInt_t width, UInt_t height); virtual Region_tTGX11::CreateRegion(); virtual Window_tTGX11::CreateWindow(Window_t parent, Int_t x, Int_t y, UInt_t w, UInt_t h, UInt_t border, Int_t depth, UInt_t clss, void* visual, SetWindowAttributes_t* attr, UInt_t wtype); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFont(FontStruct_t fs); virtual voidDeleteGC(GContext_t gc); virtual voidTGX11::DeleteImage(Drawable_t img); virtual voidTVirtualX::DeleteOpenGLContext(Int_t wid = 0); virtual voidTGX11::DeletePictureData(void* data); virtual voidTGX11::DeletePixmap(Pixmap_t pmap); virtual voidTGX11::DeleteProperty(Window_t, Atom_t&); virtual voidTGX11::DestroyRegion(Region_t reg); virtual voidTGX11::DestroySubwindows(Window_t id); virtual voidTGX11::DestroyWindow(Window_t id); virtual voidTVirtualX::DispatchClientMessage(UInt_t messageID); virtual const char*TGX11::DisplayName(const char* dpyName = 0); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTGX11::DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); virtual voidTGX11::DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGX11::DrawFillArea(Int_t n, TPoint* xy); virtual voidTGX11::DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidTGX11::DrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidTGX11::DrawPolyLine(Int_t n, TPoint* xy); virtual voidTGX11::DrawPolyMarker(Int_t n, TPoint* xy); virtual voidTGX11::DrawRectangle(Drawable_t id, GContext_t gc, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11TTF.html:4739,message,messageID,4739,root/html534/TGX11TTF.html,https://root.cern,https://root.cern/root/html534/TGX11TTF.html,2,['message'],['messageID']
Integrability,"nt_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function ; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:36583,integrat,integration,36583,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,3,"['integrat', 'interface', 'rout']","['integration', 'interface', 'routines']"
Integrability,"nt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategoryLValue.html:3892,depend,dependsOnValue,3892,root/html534/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsCategoryLValue.html,19,['depend'],['dependsOnValue']
Integrability,"nt_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap; static TBranchObject::(anonymous)kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchObject(); Default constructor for BranchObject. TBranchObject(TTree* tree, const char* name, const char* classname, void* addobj, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t compress = -1, Bool_t isptrptr = kTRUE); Create a BranchObject. TBranchObject(TBranch* parent, const char* name, const char* classname, void* addobj, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t compress = -1, Bool_t isptrptr = kTRUE); Create a BranchObject. void Init(TTree* tree, TBranch* parent, const char* name, const char* classname, void* addobj, Int_t basketsize, Int_t splitlevel, Int_t compress, Bool_t isptrptr); Initialization routine (run from the constructor so do not make this function virtual). ~TBranchObject(); Destructor for a BranchObject. void Browse(TBrowser* b); Browse the branch content. Int_t Fill(); Loop on all leaves of this branch to fill Basket buffer. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all branches of a BranchObject and return total number of bytes. If entry = 0 take current entry number + 1; If entry < 0 reset entry number to 0. The function returns the number of bytes read from the input buffer.; If entry does not exist the function returns 0.; If an I/O error occurs, the function returns -1. Int_t GetExpectedType(TClass*& clptr, EDataType& type); Fill expectedClass and expectedType with information on the data type of the; object/values contained in this branch (and thus the type of pointers; expected to be passed to Set[Branch]Address; return 0 in case of success and > 0 in case of failure. Bool_t IsFolder() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBranchObject.html:14798,rout,routine,14798,root/html602/TBranchObject.html,https://root.cern,https://root.cern/root/html602/TBranchObject.html,2,['rout'],['routine']
Integrability,"nt_t_debugCode; RooWorkspace*_debugWorkspace; ostream*_devnull; Int_t_errorCount; map<std::string,std::ostream*>_files; RooFit::MsgLevel_globMinLevel; static RooMsgService*_instance; RooFit::MsgLevel_lastMsgLevel; Bool_t_showPid; Bool_t_silentMode; vector<StreamConfig>_streams; stack<std::vector<StreamConfig> >_streamsSaved. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function called by atexit() handler installed by RooSentinel; to delete all global object upon program termination. RooMsgService(); Constructor. Defines names of message levels; and mapping of topic codes to topic names; Install default message streams. ~RooMsgService(); Destructor. Bool_t anyDebug(); Returns true if any debug level stream is active. RooWorkspace* debugWorkspace(). Int_t addStream(RooFit::MsgLevel level, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg()); Add a message logging stream for message with given RooFit::MsgLevel or higher (i.e. more severe); This method accepts the following arguments to configure the stream. Output Style options. Prefix(Bool_t flag=kTRUE) -- Prefix all messages in this stream with Topic/Originator information. Filtering options. Topic(const char*) -- Restrict stream to messages on given topic; ObjectName(const char*) -- Restrict stream to messages from object with given name; ClassName(const char*) -- Restrict stream to messages from objects with given class name; BaseClassName(const char*)-- Restrict stream to messages from objects with given base class name; LabelName(const chat*) -- Restrict stream to messages from objects setAtrribute(const char*) tag with given name. Output redirection options. OutputFile(const char*) -- Send output to file with given name. Multiple streams can write to same file.; OutputStream(os",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:8809,message,message,8809,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,8,['message'],['message']
Integrability,"nt_tfNyrast; Double_tfP8[8][3]; Double_tfPlines[1200]; Double_tfQA; Double_tfQD; Double_tfQS; Int_t*fRasterpointer to raster buffer; Double_tfRmax[3]Upper limits of lego; Double_tfRmin[3]Lower limits of lego; TPainter3dAlgorithms::SurfaceFunc_tfSurfaceFunctionpointer to surface function; Int_tfSystemCoordinate system; Double_tfT[200]; Double_tfU[2000]; Double_tfVls[12]; Double_tfX0; Double_tfXrast; Double_tfYdl; Double_tfYls[4]; Double_tfYrast; static TF3*fgCurrentF3Pointer to the 3D function to be paint.; static Int_tfgF3ClippingClipping box is off (0) or on (1); static Double_tfgF3XClipClipping plne along X; static Double_tfgF3YClipClipping plne along Y; static Double_tfgF3ZClipClipping plne along Y. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPainter3dAlgorithms(); Lego default constructor. TPainter3dAlgorithms(Double_t* rmin, Double_t* rmax, Int_t system = 1); Normal default constructor. rmin[3], rmax[3] are the limits of the lego object depending on; the selected coordinate system. ~TPainter3dAlgorithms(); Lego default destructor. void BackBox(Double_t ang); Draw back surfaces of surrounding box. Input ANG - angle between X and Y axis. DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(*) - set of codes for this face; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional function. void ClearRaster(); Clear screen. void ColorFunction(Int_t nl, Double_t* fl, Int_t* icl, Int_t& irep); Set correspondance between function and color levels. Input: NL - number of levels; FL(NL) - function levels; ICL(NL+1) - colors for levels. Output: IREP - reply: 0 O.K.; -1 error in parameters:; illegal number of levels; function levels must be in increasing order; negative color index. void DefineGridLevels(Int_t ndivz); Define the grid levels drawn in the background of surface and lego plots.; The grid levels are aligned on the Z axis' main tick marks. void DrawFaceMode1(Int_t* icodes, Double_t* xyz, Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPainter3dAlgorithms.html:15313,depend,depending,15313,root/html602/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html602/TPainter3dAlgorithms.html,2,['depend'],['depending']
Integrability,"nt_tfStackLevelcurrent level in the stack; TGeoNode*fToptop node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeCache(); Dummy constructor. TGeoNodeCache(TGeoNode* top, Bool_t nodeid = kFALSE, Int_t capacity = 30); Default constructor. TGeoNodeCache(const TGeoNodeCache& ); Copy constructor. TGeoNodeCache& operator=(const TGeoNodeCache& ); Assignment operator. ~TGeoNodeCache(); Destructor. void BuildIdArray(); Builds node id array. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Bool_t CdDown(Int_t index); Make daughter INDEX of current node the active state. Compute global matrix. void CdUp(); Make mother of current node the active state. Int_t GetCurrentNodeId() const; Returns a fixed ID for current physical node. Int_t GetNodeId() const; Get unique node id. void GetBranchNames(Int_t* names) const; Fill names with current branch volume names (4 char - used by GEANT3 interface). void GetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; Fill copy numbers of current branch nodes. void GetBranchOnlys(Int_t* isonly) const; Fill copy numbers of current branch nodes. const char * GetPath(); Returns the current geometry path. Int_t PushState(Bool_t ovlp, Int_t ntmany = 0, Int_t startlevel = 0, Double_t* point = 0); Push current state into heap. Bool_t PopState(Int_t& nmany, Double_t* point = 0); Pop next state/point from heap. Bool_t PopState(Int_t& nmany, Int_t level, Double_t* point = 0); Pop next state/point from heap and restore matrices starting from LEVEL. Bool_t RestoreState(Int_t& nmany, TGeoCacheState* state, Double_t* point = 0); Pop next state/point from a backed-up state. void LocalToMaster(const Double_t* local, Double_t* master) const; Local point converted to master frame defined by current matrix. void MasterToLocal(const Double_t* master, Double_t* local) const; Point in maste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeCache.html:8272,interface,interface,8272,root/html528/TGeoNodeCache.html,https://root.cern,https://root.cern/root/html528/TGeoNodeCache.html,3,['interface'],['interface']
Integrability,"nt_t ; idx). inlinestatic . Definition at line 109 of file RooFactoryWSTool.h. ◆ as_VAR(). static RooRealVar & RooFactoryWSTool::as_VAR ; (; UInt_t ; idx). inlinestatic . Definition at line 92 of file RooFactoryWSTool.h. ◆ as_VARLV(). static RooAbsRealLValue & RooFactoryWSTool::as_VARLV ; (; UInt_t ; idx). inlinestatic . Definition at line 93 of file RooFactoryWSTool.h. ◆ asARG(). RooAbsArg & RooFactoryWSTool::asARG ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. ; Definition at line 1528 of file RooFactoryWSTool.cxx. ◆ asCAT(). RooCategory & RooFactoryWSTool::asCAT ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. ; Definition at line 1680 of file RooFactoryWSTool.cxx. ◆ asCATFUNC(). RooAbsCategory & RooFactoryWSTool::asCATFUNC ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. ; Definition at line 1643 of file RooFactoryWSTool.cxx. ◆ asCATLV(). RooAbsCategoryLValue & RooFactoryWSTool::asCATLV ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. ; Definition at line 1661 of file RooFactoryWSTool.cxx. ◆ asDATA(). RooAbsData & RooFactoryWSTool::asDATA ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. ; Definition at line 1781 of file RooFactoryWSTool.cxx. ◆ asDHIST(). RooDataHist & RooFactoryWSTool::asDHIST ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. ; Definition at line 1795 of file RooFactoryWSTool.cxx. ◆ asDOUBLE(). double RooFactoryWSTool::asDOUBLE ; (; const char * ; arg). CINT constructor interface, return constructor string argum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:25555,interface,interface,25555,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['interface'],['interface']
Integrability,"nt_t ; itgt); const. inline . Definition at line 102 of file Event.h. ◆ GetTargets() [1/2]. std::vector< Float_t > & TMVA::Event::GetTargets ; (; ). inline . Definition at line 103 of file Event.h. ◆ GetTargets() [2/2]. const std::vector< Float_t > & TMVA::Event::GetTargets ; (; ); const. inline . Definition at line 104 of file Event.h. ◆ GetValue(). Float_t TMVA::Event::GetValue ; (; UInt_t ; ivar); const. return value of i'th variable ; Definition at line 236 of file Event.cxx. ◆ GetValueFast(). Float_t TMVA::Event::GetValueFast ; (; UInt_t ; ivar); const. inline . Definition at line 93 of file Event.h. ◆ GetValues() [1/2]. std::vector< Float_t > & TMVA::Event::GetValues ; (; ). inline . Definition at line 94 of file Event.h. ◆ GetValues() [2/2]. const std::vector< Float_t > & TMVA::Event::GetValues ; (; ); const. return value vector ; Definition at line 278 of file Event.cxx. ◆ GetWeight(). Double_t TMVA::Event::GetWeight ; (; ); const. return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ; If it is set AND it is used for training, then negative event weights are set to zero ! NOTE! For events used in Testing, the ORIGINAL possibly negative event weight is used no matter what ; Definition at line 389 of file Event.cxx. ◆ IsA(). virtual TClass * TMVA::Event::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 153 of file Event.h. ◆ IsDynamic(). Bool_t TMVA::Event::IsDynamic ; (; ); const. inline . Definition at line 80 of file Event.h. ◆ operator=(). Event & TMVA::Event::operator= ; (; const Event & ; ). default . ◆ Print() [1/2]. void TObject::Print ; (; Option_t * ; option = """"); const. virtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 159 of file TObject.cxx. ◆ Print() [2/2]. void TMVA::Event::Print ; (; std::ostream & ; o); const. print method ; Definition at line 359 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Event.html:18841,depend,depending,18841,doc/master/classTMVA_1_1Event.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html,1,['depend'],['depending']
Integrability,"nt_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual Int_t Send (Int_t status, Int_t kind);  Send a status and a single message opcode. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; virtual Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:3200,message,message,3200,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['message'],['message']
Integrability,ntable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumGenConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumGenConfig(); Constructor. ~RooNumGenConfig(); Destructor. RooNumGenConfig(const RooNumGenConfig& other); Copy constructor. RooNumGenConfig& operator=(const RooNumGenConfig& other); Assignment operator from other RooNumGenConfig. RooCategory& meth,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:8847,integrat,integration,8847,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,2,['integrat'],['integration']
Integrability,"ntainer->RemoveNonStatic();; 1896 MapBranch(branch);; 1897 fStopMapping = false;; 1898 fListView->Layout();; 1899 }; 1900 }; 1901 // select corresponding leaf on the right panel; 1902 fLVContainer->SelectItem(ltItem->GetText());; 1903 if (parm1 == kButton3) {; 1904 // activate context menu for this leaf; 1905 ProcessMessage(MK_MSG(kC_CONTAINER, kCT_ITEMCLICK), kButton3, parm2);; 1906 }; 1907 }; 1908 }; 1909 }; 1910 break;; 1911 case kCT_ITEMDBLCLICK :; 1912 fClient->NeedRedraw(fLt);; 1913 if (parm1 == kButton1) {; 1914 // execute double-click action for corresponding item in the right panel; 1915 ProcessMessage(MK_MSG(kC_CONTAINER, kCT_ITEMDBLCLICK), kButton1, parm2);; 1916 }; 1917 break;; 1918 default:; 1919 break;; 1920 }; 1921 break;; 1922 case kC_COMMAND:; 1923 switch (GET_SUBMSG(msg)) {; 1924 case kCM_COMBOBOX:; 1925 if ((record = fSession->GetRecord((Int_t)parm2))); 1926 fSession->Show(record);; 1927 break;; 1928 case kCM_BUTTON:; 1929 switch (parm1) {; 1930 // handle button messages; 1931 case kRESET:; 1932 EmptyAll();; 1933 break;; 1934 case kDRAW:; 1935 fVarDraw = false;; 1936 ExecuteDraw();; 1937 break;; 1938 case kSTOP:; 1939 if (fCounting); 1940 gROOT->SetInterrupt(true);; 1941 break;; 1942 case kCLOSE:; 1943 SendCloseMessage();; 1944 break;; 1945 case kBGFirst:; 1946 if ((record = fSession->First())); 1947 fSession->Show(record);; 1948 break;; 1949 case kBGPrevious:; 1950 if ((record = fSession->Previous())); 1951 fSession->Show(record);; 1952 break;; 1953 case kBGRecord:; 1954 fSession->AddRecord();; 1955 break;; 1956 case kBGNext:; 1957 if ((record = fSession->Next())); 1958 fSession->Show(record);; 1959 break;; 1960 case kBGLast:; 1961 if ((record = fSession->Last())); 1962 fSession->Show(record);; 1963 break;; 1964 default:; 1965 break;; 1966 }; 1967 break;; 1968 case kCM_MENU:; 1969 // handle menu messages; 1970 // check if sent by Options menu; 1971 if ((parm1>=kOptionsReset) && (parm1<kHelpAbout)) {; 1972 Dimension();; 1973 if ((fDimension==0) && ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:70303,message,messages,70303,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['message'],['messages']
Integrability,"ntal::REveCaloDataSliceSelector::ProcessSelectionvirtual void ProcessSelection(REveCaloData::vCellId_t &sel_cells, UInt_t selectionId, bool multi)=0; ROOT::Experimental::REveCaloDataSliceSelector::GetSliceIndexint GetSliceIndex()Definition REveCaloData.hxx:336; ROOT::Experimental::REveCaloDataSliceSelector::GetCellsFromSecondaryIndicesvirtual void GetCellsFromSecondaryIndices(const std::set< int > &idcs, REveCaloData::vCellId_t &out)=0; ROOT::Experimental::REveCaloData::SetSelectorvoid SetSelector(REveCaloDataSelector *iSelector)Definition REveCaloData.hxx:223; ROOT::Experimental::REveCaloData::GetSelectorREveCaloDataSelector * GetSelector()Definition REveCaloData.hxx:224; ROOT::Experimental::REveCaloData::RefSliceInfoSliceInfo_t & RefSliceInfo(Int_t s)Definition REveCaloData.hxx:196; ROOT::Experimental::REveCaloData::vCellId_tstd::vector< CellId_t > vCellId_tDefinition REveCaloData.hxx:150; ROOT::Experimental::REveCaloData::FillImpliedSelectedSetvoid FillImpliedSelectedSet(Set_t &impSelSet, const std::set< int > &sec_idcs) overridePopulate set impSelSet with derived / dependant elements.Definition REveCaloData.cxx:159; ROOT::Experimental::REveDataCollectionDefinition REveDataCollection.hxx:116; ROOT::Experimental::REveDataCollection::ApplyFiltervoid ApplyFilter()Definition REveDataCollection.cxx:333; ROOT::Experimental::REveDataCollection::Ids_tstd::vector< int > Ids_tDefinition REveDataCollection.hxx:122; ROOT::Experimental::REveDataCollection::GetItemListREveDataItemList * GetItemList()Definition REveDataCollection.hxx:147; ROOT::Experimental::REveDataCollection::SetFilterExprvoid SetFilterExpr(const char *filter)Definition REveDataCollection.cxx:277; ROOT::Experimental::REveDataCollection::GetItemClassTClass * GetItemClass() constDefinition REveDataCollection.hxx:141; ROOT::Experimental::REveDataCollection::GetDataPtrvoid * GetDataPtr(Int_t i) constDefinition REveDataCollection.hxx:155; ROOT::Experimental::REveDataCollection::GetNItemsInt_t GetNItems() constDefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/collection__proxies_8C_source.html:44498,depend,dependant,44498,doc/master/collection__proxies_8C_source.html,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html,1,['depend'],['dependant']
Integrability,"ntation. Several thousands users read the list and forum and my provide you with solutions to your problem.; Only if you are convinced that your problem is a real bug of the ROOT software then follow the instructions on how to report a bug with JIRA.; When you submit a bug, please follow these guidelines:. If you submit a problem, always indicate your ROOT version number (e.g. 6.02.00, 5.34.22) and the platform you are running on (e.g. Ubuntu 14 gcc49, SLC6 clang35).; The bug title subject line should clearly identify the problem.; If you use a non recent version of ROOT, try to test your problem with newer version. If this is too difficult, consult the release and development notes to check if your problem has not already been solved.; Try to quickly search the internet and look in the forum if your problem has been already solved.; Try to share the maximum amount of information. A bug report which only says ""My macro crashes when running on kubuntu but on windows works"" is much less likely to be solved quickly than a complete message with a gdb stacktrace and a reproducer (see next item).; Send a minimal program or macro reproducing the problem. Make sure that your script can be executed directly. If it uses a data file, send the smallest possible data file as a mail attachment, or indicate how to get this file.; If for some reason it is not possible to share a minimal reproducer, try to make sure that your explanations are sufficient to speed up the whole fixing procedure. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Brow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guidelines-submitting-bug.html:3169,message,message,3169,d/guidelines-submitting-bug.html,https://root.cern,https://root.cern/d/guidelines-submitting-bug.html,1,['message'],['message']
Integrability,"ntation; TGeoNodeCache(); Dummy constructor. TGeoNodeCache(TGeoNode* top, Bool_t nodeid = kFALSE, Int_t capacity = 30); Default constructor. ~TGeoNodeCache(); Destructor. void BuildIdArray(); Builds node id array. void BuildInfoBranch(); Bulds info branch. Navigation is possible only after this step. TGeoStateInfo * GetMakePWInfo(Int_t nd); Get the PW info, if none create one. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Bool_t CdDown(Int_t index); Make daughter INDEX of current node the active state. Compute global matrix. Bool_t CdDown(TGeoNode* node); Make daughter INDEX of current node the active state. Compute global matrix. void CdUp(); Make mother of current node the active state. Int_t GetCurrentNodeId() const; Returns a fixed ID for current physical node. Int_t GetNodeId() const; Get unique node id. void GetBranchNames(Int_t* names) const; Fill names with current branch volume names (4 char - used by GEANT3 interface). void GetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; Fill copy numbers of current branch nodes. void GetBranchOnlys(Int_t* isonly) const; Fill copy numbers of current branch nodes. TGeoStateInfo * GetInfo(); Get next state info pointer. void ReleaseInfo(); Release last used state info pointer. const char * GetPath(); Returns the current geometry path. Int_t PushState(Bool_t ovlp, Int_t ntmany = 0, Int_t startlevel = 0, Double_t* point = 0); Push current state into heap. Bool_t PopState(Int_t& nmany, Double_t* point = 0); Pop next state/point from heap. Bool_t PopState(Int_t& nmany, Int_t level, Double_t* point = 0); Pop next state/point from heap and restore matrices starting from LEVEL. Bool_t RestoreState(Int_t& nmany, TGeoCacheState* state, Double_t* point = 0); Pop next state/point from a backed-up state. void LocalToMaster(const Double_t* local, Double_t* master) const; Local point converted to master ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNodeCache.html:8870,interface,interface,8870,root/html534/TGeoNodeCache.html,https://root.cern,https://root.cern/root/html534/TGeoNodeCache.html,2,['interface'],['interface']
Integrability,"nted by Miroslav Helbich <helbich@mail.desy.de>. void BayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); This function is only kept for backward compatibility.; You should rather use the Divide method.; It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the; former BayesDivide method. void Divide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. This method serves two purposes:. 1) calculating efficiencies:. The assumption is that the entries in ""pass"" are a subset of those in; ""total"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin contents which might lead to wrong results.; . The points are assigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian methods where the result depends on the chosen option. If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. 2) calculating ratios of two Poisson means (option 'pois'):. The two histograms are interpreted as independent Poisson processes and the ratio; ; The histogram 'pass' is interpreted as n_{1} and the total histogram; is used for n_{2}. The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; of efficiency by a parameter transformation:; . The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphAsymmErrors.html:19020,depend,depends,19020,root/html532/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html532/TGraphAsymmErrors.html,4,['depend'],['depends']
Integrability,"nted from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCach",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:86311,rout,routine,86311,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['rout'],['routine']
Integrability,"nted in TWinNTSystem, and TUnixSystem.; Definition at line 887 of file TSystem.cxx. ◆ HostName(). const char * TSystem::HostName ; (; ). virtual . Return the system's host name. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 303 of file TSystem.cxx. ◆ IgnoreInterrupt(). void TSystem::IgnoreInterrupt ; (; Bool_t ; ignore = kTRUE). virtual . If ignore is true ignore the interrupt signal, else restore previous behaviour. ; Typically call ignore interrupt before writing to disk. ; Definition at line 602 of file TSystem.cxx. ◆ IgnoreSignal(). void TSystem::IgnoreSignal ; (; ESignals ; sig, . Bool_t ; ignore = kTRUE . ). virtual . If ignore is true ignore the specified signal, else restore previous behaviour. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 593 of file TSystem.cxx. ◆ InControl(). Bool_t TSystem::InControl ; (; ); const. inline . Definition at line 367 of file TSystem.h. ◆ Init(). Bool_t TSystem::Init ; (; ). virtual . Initialize the OS interface. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 183 of file TSystem.cxx. ◆ InnerLoop(). void TSystem::InnerLoop ; (; ). virtual . Inner event loop. ; Definition at line 400 of file TSystem.cxx. ◆ IsA(). TClass * TSystem::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TUnixSystem, TWinNTSystem, and TWebSystem.; Definition at line 558 of file TSystem.h. ◆ IsAbsoluteFileName(). Bool_t TSystem::IsAbsoluteFileName ; (; const char * ; dir). virtual . Return true if dir is an absolute pathname. ; Reimplemented in TWinNTSystem.; Definition at line 951 of file TSystem.cxx. ◆ IsFileInIncludePath(). Bool_t TSystem::IsFileInIncludePath ; (; const char * ; name, . char ** ; fullpath = nullptr . ). virtual . Return true if 'name' is a file that can be found in the ROOT include path or the current directory. ; If 'name' contains any ACLiC style information (e.g. trailing +[+][g|O]),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:70359,interface,interface,70359,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['interface'],['interface']
Integrability,"nted technology M should profit from an increased flexibility and functionality and make it also extendable (recursiveness, new algorithms, new functionality).; What M does not:. histogramming; data handling; graphics. M is kept as a low-level package with optimal performance.; The main usages of M are. from a user’s program (such as int main()…); from a graphical data analysis tool such as HippoDraw@bib-HippoDraw. The most important goals of M in are. its numerical accuracy (equivalent to its Fortran version); its computational performance (equivalent to its Fortran version). For the design of the application programming interface (API) of M a two-way strategy was imposed:. a minimal required interface with minimum interaction with M objects and with appropriate usage of the standard library (STL): the user’s implementation of the FCNBase class, initial parameter values and uncertainties are provided by the to M user via std::vectors.; a rich interface which provides the user with more functionality such as interaction with parameters. The core of the minimization functionality and related tools (the kernel of M ) should be clearly separated from the user, who is interfacing via defined user interfaces (the API).; 2.3 Internal and external parameters; Each of the parameters to the \(\mbox{FCN}\) is defined by the user as belonging to one of the following types:. Freely variable: allowed to take on any value.; Variable with double sided limits: allowed to vary only between two limits specified by the user.; Variable with single sided limits: allowed to vary only between one upper or one lower limit specified by the user and unlimited to the other side.; Fixed: originally defined as variable, but now taking on only the value the parameter had at the moment it was fixed, or a value later assigned by the user.; Constant: taking on only one value as specified by the user. When using the minimal required interface, all variable parameters are free and unbound.; The user, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:6180,interface,interface,6180,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['interface'],['interface']
Integrability,"nted; by w^2 in the bin corresponding to x.; if w is NULL each entry is assumed a weight=1. void DoFillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); internal method to fill histogram content from a vector; called directly by TH1::BufferEmpty. void FillRandom(const char* fname, Int_t ntimes = 5000); Fill histogram following distribution in function fname. The distribution contained in the function fname (TF1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. void FillRandom(TH1* h, Int_t ntimes = 5000); Fill histogram following distribution in histogram h. The distribution contained in the histogram h (TH1) is integrated; over the channel contents for the bin range of this histogram.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source.; in this case we simply use a poisson distribution where; the mean value per bin = bincontent/integral. Int_t FindBin(Double_t x, Double_t y = 0, Double_t z = 0); Return Global bin number corresponding to x,y,z. 2-D and 3-D histograms are represented with a one dimensional; structure. This has the advantage that all existing functions, such as; GetBinContent, GetBinError, GetBinFunction work for all dimensions.; This function tries to extend the axis if the given point belongs to an; under-/overflow bin AND if CanExtendAllAxes() is true.; See also TH1::GetBin, TAxis::FindBin and TAxis::FindFixBin. Int_t Fin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:74395,integrat,integrated,74395,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['integrat'],['integrated']
Integrability,"ntegral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPEffDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPEffDecay.html:40674,integrat,integrator,40674,root/html526/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPEffDecay.html,1,['integrat'],['integrator']
Integrability,"ntegral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPGenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPGenDecay.html:40533,integrat,integrator,40533,root/html526/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPGenDecay.html,1,['integrat'],['integrator']
Integrability,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:8600,integrat,integration,8600,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['integrat'],['integration']
Integrability,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:24125,integrat,integration,24125,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,137,['integrat'],['integration']
Integrability,"ntegral(Option_t *option="""") const overrideReturn integral of bin contents.Definition TH2.cxx:1317; TH2::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TH2.cxx:2485; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TMVA::EventDefinition Event.h:51; TMVA::Event::GetValueFloat_t GetValue(UInt_t ivar) constreturn value of i'th variableDefinition Event.cxx:236; TMVA::Event::GetWeightDouble_t GetWeight() constreturn the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not.Definition Event.cxx:389; TMVA::Event::GetClassUInt_t GetClass() constDefinition Event.h:86; TMVA::MsgLoggerostringstream derivative to redirect and format outputDefinition MsgLogger.h:57; TMVA::PDFPDF wrapper for histograms; uses user-defined spline interpolation.Definition PDF.h:63; TMVA::PDF::GetXminDouble_t GetXmin() constDefinition PDF.h:104; TMVA::PDF::GetXmaxDouble_t GetXmax() constDefinition PDF.h:105; TMVA::PDF::GetValDouble_t GetVal(Double_t x) constreturns value PDF(x)Definition PDF.cxx:701; TMVA::ToolsGlobal auxiliary applications and data treatment routines.Definition Tools.h:76; TMVA::Tools::ComputeStatvoid ComputeStat(const std::vector< TMVA::Event * > &, std::vector< Float_t > *, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Int_t signalClass, Bool_t norm=kFALSE)sanity checkDefinition Tools.cxx:202; TMVA::Tools::GetParentvoid * GetParent(void *child)get parent nodeDefinition Tools.cxx:1140; TMVA::Tools::FormattedOutputvoid FormattedOutput(const std::vector< Double_t > &, const std::vector< TString > &, const TString titleVars, const TString titleValues, MsgLogger &logger, TString format=""%+1.3f"")formatted output of simple tableDefinition Tools.cxx:887; TMVA::Tools",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:71833,wrap,wrapper,71833,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,"ntegral; Int_t_numPdfNumber of registered PDFs; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooObjCacheManager_partIntMgrComponent normalization manager; TList_pdfProxyListList of PDF proxies (named after applicable category state); Int_tRooAbsReal::_plotBinsNumber of plot bins; const TNamed*_plotCoefNormRange; RooSetProxy_plotCoefNormSet; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimultaneous.html:45262,integrat,integrator,45262,root/html602/RooSimultaneous.html,https://root.cern,https://root.cern/root/html602/RooSimultaneous.html,2,['integrat'],['integrator']
Integrability,"ntegral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfInput p.d.f; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; const TNamed*_rangeNameName of subset range; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExtendPdf(); Default constructor. RooExtendPdf(const char* name, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExtendPdf.html:44584,integrat,integrator,44584,root/html602/RooExtendPdf.html,https://root.cern,https://root.cern/root/html602/RooExtendPdf.html,2,['integrat'],['integrator']
Integrability,"ntegralMultiple(Int_t n, const Double_t* a, const Double_t* b, Double_t epsrel, Double_t& relerr); See more general prototype below.; This interface kept for back compatibility; It is reccomended to use the other interface where one can specify also epsabs and the maximum number of; points. Double_t IntegralMultiple(Int_t n, const Double_t* a, const Double_t* b, Int_t maxpts, Double_t epsrel, Double_t epsabs, Double_t& relerr, Int_t& nfnevl, Int_t& ifail). This function computes, to an attempted specified accuracy, the value of; the integral. Input parameters:. n : Number of dimensions [2,15]; a,b : One-dimensional arrays of length >= N . On entry A[i], and B[i],; contain the lower and upper limits of integration, respectively.; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epsrel : Specified relative accuracy.; epsabs : Specified absolute accuracy.; The integration algorithm will attempt to reach either the relative or the absolute accuracy.; In case the maximum funcion called is reached the algorithm will stop earlier without having reached; the desired accuracy. Output parameters:. relerr : Contains, on exit, an estimation of the relative accuracy of the result.; nfnevl : number of function evaluations performed.; ifail :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. The default method used is the Genz-Mallik adaptive multidimensional algorithm; using the class ROOT::Math::AdaptiveIntegratorMultiDim; (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); to different integrators.; Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:60036,integrat,integration,60036,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,1,['integrat'],['integration']
Integrability,"ntegralMultiple(Int_t n, const Double_t* a, const Double_t* b, Double_t epsrel, Double_t& relerr); See more general prototype below.; This interface kept for back compatibility; It is reccomended to use the other interface where one can specify also epsabs and the maximum number of; points. Double_t IntegralMultiple(Int_t n, const Double_t* a, const Double_t* b, Int_t maxpts, Double_t epsrel, Double_t epsabs, Double_t& relerr, Int_t& nfnevl, Int_t& ifail). This function computes, to an attempted specified accuracy, the value of; the integral. Input parameters:. n : Number of dimensions [2,15]; a,b : One-dimensional arrays of length >= N . On entry A[i], and B[i],; contain the lower and upper limits of integration, respectively.; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epsrel : Specified relative accuracy.; epsabs : Specified absolute accuracy.; The integration algorithm will attempt to reach either the relative or the absolute accuracy.; In case the maximum funcion called is reached the algorithm will stop earlier without having reached; the desired accuracy. Output parameters:. relerr : Contains, on exit, an estimation of the relative accuracy of the result.; nfnevl : number of function evaluations performed.; ifail :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. The defult method used is the Genz-Mallik adaptive multidimensional algorithm; using the class ROOT::Math::AdaptiveIntegratorMultiDim; (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); to different integrators.; Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:52819,integrat,integration,52819,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,1,['integrat'],['integration']
Integrability,"ntegrals, two functions must be implemented. First,; 71 ; 72```; 73Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); 74```; 75should return the analytical integrals that are supported. `integSet`; 76is the set of dependents for which integration is requested. The; 77function should copy the subset of dependents it can analytically; 78integrate to `anaIntSet`, and return a unique identification code for; 79this integration configuration. If no integration can be; 80performed, zero should be returned. Second,; 81 ; 82```; 83double analyticalIntegral(Int_t code); 84```; 85 ; 86implements the actual analytical integral(s) advertised by; 87`getAnalyticalIntegral()`. This function will only be called with; 88codes returned by `getAnalyticalIntegral()`, except code zero.; 89 ; 90The integration range for each dependent to be integrated can; 91be obtained from the dependent's proxy functions `min()` and; 92`max()`. Never call these proxy functions for any proxy not known to; 93be a dependent via the integration code. Doing so may be; 94ill-defined, e.g., in case the proxy holds a function, and will; 95trigger an assert. Integrated category dependents should always be; 96summed over all of their states.; 97 ; 98 ; 99 ; 100### Direct generation of observables; 101 ; 102Distributions for any PDF can be generated with the accept/reject method,; 103but for certain PDFs, more efficient methods may be implemented. To; 104implement direct generation of one or more observables, two; 105functions need to be implemented, similar to those for analytical; 106integrals:; 107 ; 108```; 109Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); 110```; 111and; 112```; 113void generateEvent(Int_t code); 114```; 115 ; 116The first function advertises observables, for which distributions can be generated,; 117similar to the way analytical integrals are advertised. The second; 118function implements the actual generator for the advertised observabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:4604,depend,dependent,4604,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,"ntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly2,sinhGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:10355,integrat,integrates,10355,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,2,['integrat'],['integrates']
Integrability,"ntegration algorithm just do :; ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; Valid integrator names are:; - Gauss : for ROOT::Math::GaussIntegrator; - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. Note 2:; Instead of TF1::Integral, you may want to use the combination of; TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; See an example with the following script:. void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);. //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %g\n"",r2);; printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; delete [] x;; delete [] w;; }. This example produces the following results:. g->Integral(0,5) = 1.25331; g->Integral(0,1000) = 1.25319; g->IntegralFast(n,x,w,0,5) = 1.25331; g->IntegralFast(n,x,w,0,1000) = 1.25331; g->IntegralFast(n,x,w,0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:54465,integrat,integration,54465,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,4,['integrat'],"['integrate', 'integration']"
Integrability,"ntegration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooRealProxy_offsetOffset of transformation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooRealProxy_slopeSlope of transformation; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooRealProxy_varInput observable; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooLinearVar.html:37809,integrat,integrator,37809,root/html532/RooLinearVar.html,https://root.cern,https://root.cern/root/html532/RooLinearVar.html,1,['integrat'],['integrator']
Integrability,"ntegration of smooth functions. * ROOT::Math::Integration::kADAPTIVE: based on gsl_integration_qag. It is an adaptiva Gauss-Kronrod integration algorithm, the integration region is divided into subintervals, and on each iteration the subinterval with the largest estimated error is bisected. It is possible to specify the integration rule as an extra enumeration parameter. The possible rules are * Integration::kGAUSS15 : 15 points Gauss-Konrod rule (value = 1) * Integration::kGAUSS21 : 21 points Gauss-Konrod rule (value = 2) * Integration::kGAUSS31 : 31 points Gauss-Konrod rule (value = 3) * Integration::kGAUSS41 : 41 points Gauss-Konrod rule (value = 4) * Integration::kGAUSS51 : 51 points Gauss-Konrod rule (value = 5) * Integration::kGAUSS61 : 61 points Gauss-Konrod rule (value = 6) The higher-order rules give better accuracy for smooth functions, while lower-order rules save time when the function contains local difficulties, such as discontinuities. If no integration rule is passed, the 31 points rule is used as default. ROOT::Math::Integration::kADAPTIVESINGULAR: based on gsl_integration_qags. It is an integration type which can be used in the case of the presence of singularities.It uses the Gauss-Kronrod 21-point integration rule. This is the default algorithm. Note that when using the common ROOT::Math::IntegratorOneDIm class the enumeration type defining the algorithm must be defined in the namespace ROOT::Math::IntegrationOneDim (to distinguish from the multi-dimensional case) and the rule enumeration (or its corresponding integer) can be passed in the constructor of the ROOT::Math::IntegratorOneDIm.; 13.8.3 Multi-dimensional Integration; The multi-dimensional integration algorithm should be applied to functions with dimension larger than one. Adaptive multi-dimensional integration works for low function dimension, while MC integration can be applied to higher dimensions.; 13.8.3.1 Using ROOT::Math::IntegratorMultiDim; Here is a code example on how to use the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:708550,integrat,integration,708550,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integration']
Integrability,"ntegration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&, bool copy = false); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& , bool copy = false); set integration function (flag control if function must be copied inside). double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorOneDim.html:2269,integrat,integration,2269,root/html526/ROOT__Math__VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorOneDim.html,1,['integrat'],['integration']
Integrability,"ntegration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char * type, int rule, double absTol, double relTol, size_t size ); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const IGenFunction &f, bool copyFunc = false); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction( GSLFuncPointer f, void * p = 0). Set function from a GSL pointer function type. double Integral(const IGenFunction & f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). 	evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:6483,integrat,integration,6483,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,1,['integrat'],['integration']
Integrability,"ntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4996,integrat,integration,4996,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"ntegrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pdf_over_pdf_Int[cosa,t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pdf_over_pdf_Int[cosa,t]_pdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:7874,integrat,integrator,7874,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,2,['integrat'],['integrator']
Integrability,"ntegrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pdf_over_pdf_Int[cosa,t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pdf_over_pdf_Int[cosa,t]_pdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:7739,integrat,integrator,7739,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,2,['integrat'],['integrator']
Integrability,"ntegrator in first dimension; RooAbsFunc*_xintFunction binding representing integral over first dimension; Double_tRooIntegrator1D::_xmax! Upper integration bound; Double_tRooIntegrator1D::_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Construc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator2D.html:9419,integrat,integration,9419,root/html526/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator2D.html,7,['integrat'],['integration']
Integrability,"ntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const IGenFunction &f, bool copyFunc = false); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction( GSLFuncPointer f, void * p = 0). Set function from a GSL pointer function type. double Integral(const IGenFunction & f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). 	evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). 	evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:7223,integrat,integration,7223,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,1,['integrat'],['integration']
Integrability,"ntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:34218,wrap,wrap,34218,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,4,"['interface', 'wrap']","['interface-like', 'wrap']"
Integrability,"ntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Definition at line 416 of file GSLIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 403 of file GSLIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 392 of file GSLIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:20086,integrat,integration,20086,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integration']
Integrability,"ntegrator1D, its parameters and capabilities with RooNumIntConfig. RooGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object. The integration; range is taken from the definition in the function binding. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object in the given range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with given function and configuration. Needed for RooNumIntFactory. Bool_t initialize(); Perform one-time initialization of integrator. ~RooGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral. RooGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Mon Jul 4 15:22:57 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGaussKronrodIntegrator1D.html:8983,integrat,integration,8983,root/html530/RooGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Integrability,"ntegrator1D, its parameters and capabilities with RooNumIntConfig. RooGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object. The integration; range is taken from the definition in the function binding. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object in the given range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with given function and configuration. Needed for RooNumIntFactory. Bool_t initialize(); Perform one-time initialization of integrator. ~RooGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral. RooGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Thu Nov 3 20:08:15 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGaussKronrodIntegrator1D.html:8983,integrat,integration,8983,root/html532/RooGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html532/RooGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Integrability,"ntegrator1D, its parameters and capabilities with RooNumIntConfig. RooGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object. The integration; range is taken from the definition in the function binding. RooGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integral on 'function' using given configuration object in the given range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with given function and configuration. Needed for RooNumIntFactory. Bool_t initialize(); Perform one-time initialization of integrator. ~RooGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral. RooGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Tue Jun 2 15:31:12 2015 » Last generated: 2015-06-02 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooGaussKronrodIntegrator1D.html:9491,integrat,integration,9491,root/html604/RooGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html604/RooGaussKronrodIntegrator1D.html,1,['integrat'],['integration']
Integrability,"ntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18873,integrat,integrator,18873,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integrator']
Integrability,"ntents and errors are divided; by the bin width. void SetDefaultBufferSize(Int_t buffersize = 1000); static function to set the default buffer size for automatic histograms.; When an histogram is created with one of its axis lower limit greater; or equal to its upper limit, the function SetBuffer is automatically; called with the default buffer size. void SetDefaultSumw2(Bool_t sumw2 = kTRUE); static function.; When this static function is called with sumw2=kTRUE, all new; histograms will automatically activate the storage; of the sum of squares of errors, ie TH1::Sumw2 is automatically called. void SetTitle(const char* title); Change (i.e. set) the title. if title is in the form ""stringt;stringx;stringy;stringz""; the histogram title is set to stringt, the x axis title to stringx,; the y axis title to stringy, and the z axis title to stringz.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". void SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); smooth array xx, translation of Hbook routine hsmoof.F; based on algorithm 353QH twice presented by J. Friedman; in Proc.of the 1974 CERN School of Computing, Norway, 11-24 August, 1974. void Smooth(Int_t ntimes = 1, Option_t* option = """"); Smooth bin contents of this histogram.; if option contains ""R"" smoothing is applied only to the bins; defined in the X axis range (default is to smooth all bins); Bin contents are replaced by their smooth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& ); -*-*-*-*-*-*-*Stream a class object*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Print(Option_t* option = """") const; -*-*-*-*-*Print some global quantities for this histogram*-*-*-*-*-*-*-*. If option ""base"" is given",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:105207,rout,routine,105207,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['rout'],['routine']
Integrability,"ntents and errors are divided; by the bin width. void SetDefaultBufferSize(Int_t buffersize = 1000); static function to set the default buffer size for automatic histograms.; When an histogram is created with one of its axis lower limit greater; or equal to its upper limit, the function SetBuffer is automatically; called with the default buffer size. void SetDefaultSumw2(Bool_t sumw2 = kTRUE); static function.; When this static function is called with sumw2=kTRUE, all new; histograms will automatically activate the storage; of the sum of squares of errors, ie TH1::Sumw2 is automatically called. void SetTitle(const char* title); Change (i.e. set) the title. if title is in the form ""stringt;stringx;stringy;stringz""; the histogram title is set to stringt, the x axis title to stringx,; the y axis title to stringy, and the z axis title to stringz.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". void SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); smooth array xx, translation of Hbook routine hsmoof.F; based on algorithm 353QH twice presented by J. Friedman; in Proc.of the 1974 CERN School of Computing, Norway, 11-24 August, 1974. void Smooth(Int_t ntimes = 1, Option_t* option = """"); Smooth bin contents of this histogram.; if option contains ""R"" smoothing is applied only to the bins; defined in the X axis range (default is to smooth all bins); Bin contents are replaced by their smooth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& b); -*-*-*-*-*-*-*Stream a class object*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Print(Option_t* option = """") const; -*-*-*-*-*Print some global quantities for this histogram*-*-*-*-*-*-*-*. If option ""base"" is give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:98815,rout,routine,98815,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['rout'],['routine']
Integrability,"ntents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const char *name); Empty set constructor. RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char *name); Construct a set from two existing sets. RooArgSet(const RooAbsArg& var1,		 const char *name); Constructor for set containing 1 initial object. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2,		 const char *name); Constructor for set containing 2 initial objects. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const char* name = """"); Constructor for set containing 3 initial objects. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const char* name = """"); Constructor for set containing 4 initial objects. RooArgSet(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:14444,message,messages,14444,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,1,['message'],['messages']
Integrability,"ntents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const char* name); Empty set constructor. RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char* name = """"); Construct a set from two existing sets. RooArgSet(const RooAbsArg& var1, const char* name = """"); Constructor for set containing 1 initial object. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const char* name = """"); Constructor for set containing 2 initial objects. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const char* name = """"); Constructor for set containing 3 initial objects. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const char* name = """"); Constructor for set containing 4 initial objects.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgSet.html:14470,message,messages,14470,root/html528/RooArgSet.html,https://root.cern,https://root.cern/root/html528/RooArgSet.html,2,['message'],['messages']
Integrability,"nter to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check if function is valid (has been set); 91 bool IsValid() {; 92 return (fFunc.function != nullptr) ? true : false;; 93 }; 94 ; 95private:; 96 gsl_function fFunc;; 97 ; 98 ; 99};; 100 ; 101 ; 102 /**; 103 class to wrap a gsl_function_fdf (with derivatives); 104 */; 105 class GSLFunctionDerivWrapper {; 106 ; 107 public:; 108 ; 109 GSLFunctionDerivWrapper(); 110 {; 111 fFunc.f = nullptr;; 112 fFunc.df = nullptr;; 113 fFunc.fdf = nullptr;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLFuncPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( GSLFdfPointer f) { fFunc.fdf = f; }; 121 void SetParams ( void * p) { fFunc.params = p; }; 122 ; 123 ; 124 gsl_function_fdf * GetFunc() { return &fFunc; }; 125 ; 126 // evaluate the function and derivatives; 127 double operator() (double x) { return GSL_FN_FDF_EVAL_F(&fFunc, x); }; 128 ; 129 double Derivative (double x) { return GSL_FN_FDF_EVAL_DF(&fFunc, x); }; 130 ; 131 void Fdf(double x, double & f, double & df) {; 132 return GSL_FN_FDF_EVAL_F_DF(&fFunc, x, &f, &df);; 133 }; 134 ; 135 /// check if function is valid (has been set); 136 bool IsValid() {; 137 return (fFunc.f != nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:3368,wrap,wrap,3368,doc/master/GSLFunctionWrapper_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html,1,['wrap'],['wrap']
Integrability,"nter(Long64_t entry, TTree *tree=nullptr)Add entry #entry to the list.Definition TEntryList.cxx:631; TEntryList::SetTreevirtual void SetTree(const TTree *tree)If a list for a tree with such name and filename exists, sets it as the current sublist If not,...Definition TEntryList.cxx:1296; TEntryList::GetDirectoryvirtual TDirectory * GetDirectory() constDefinition TEntryList.h:77; TEntryList::SetReapplyCutvirtual void SetReapplyCut(bool apply=false)Definition TEntryList.h:108; TEntryList::SetDirectoryvirtual void SetDirectory(TDirectory *dir)Add reference to directory dir. dir can be 0.Definition TEntryList.cxx:1170; TEntryList::GetEntryvirtual Long64_t GetEntry(Long64_t index)Return the number of the entry #index of this TEntryList in the TTree or TChain See also Next().Definition TEntryList.cxx:759; TEnv::GetValuevirtual Int_t GetValue(const char *name, Int_t dflt) constReturns the integer value for a resource.Definition TEnv.cxx:491; TEventList<div class=""legacybox""><h2>Legacy Code</h2> TEventList is a legacy interface: there will be no bug fi...Definition TEventList.h:31; TEventList::GetEntryvirtual Long64_t GetEntry(Int_t index) constReturn value of entry at index in the list.Definition TEventList.cxx:227; TEventList::GetReapplyCutvirtual bool GetReapplyCut() constDefinition TEventList.h:57; TEventList::GetNvirtual Int_t GetN() constDefinition TEventList.h:56; TFileCacheReadA cache when reading files over the network.Definition TFileCacheRead.h:22; TFileCacheRead::WaitFinishPrefetchvirtual void WaitFinishPrefetch()Definition TFileCacheRead.cxx:691; TFileCacheRead::GetBufferSizevirtual Int_t GetBufferSize() constDefinition TFileCacheRead.h:88; TFileMergeInfoDefinition TFileMergeInfo.h:42; TFileMergeInfo::fIOFeaturesTIOFeatures * fIOFeaturesDefinition TFileMergeInfo.h:55; TFileMergeInfo::fIsFirstBool_t fIsFirstDefinition TFileMergeInfo.h:52; TFileMergeInfo::fOptionsTString fOptionsDefinition TFileMergeInfo.h:53; TFileMergeInfo::fOutputDirectoryTDirectory * fOutputDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:410561,interface,interface,410561,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['interface'],['interface']
Integrability,"nter. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:4894,wrap,wrapper,4894,root/html602/ROOT__Math__WrappedTF1.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html,1,['wrap'],['wrapper']
Integrability,"nterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:44816,integrat,integration,44816,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,4,['integrat'],['integration']
Integrability,"nterface (static method); 3776/// The number of sampling points are taken from the TGraph; 3777 ; 3778#ifdef INTHEFUTURE; 3779void TF1::CalcGaussLegendreSamplingPoints(TGraph *g, Double_t eps); 3780{; 3781 if (!g) return;; 3782 CalcGaussLegendreSamplingPoints(g->GetN(), g->GetX(), g->GetY(), eps);; 3783}; 3784 ; 3785 ; 3786////////////////////////////////////////////////////////////////////////////////; 3787/// Type safe interface (static method); 3788/// A TGraph is created with new with num points and the pointer to the; 3789/// graph is returned by the function. It is the responsibility of the; 3790/// user to delete the object.; 3791/// if num is invalid (<=0) NULL is returned; 3792 ; 3793TGraph *TF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t eps); 3794{; 3795 if (num <= 0); 3796 return 0;; 3797 ; 3798 TGraph *g = new TGraph(num);; 3799 CalcGaussLegendreSamplingPoints(g->GetN(), g->GetX(), g->GetY(), eps);; 3800 return g;; 3801}; 3802#endif; 3803 ; 3804 ; 3805////////////////////////////////////////////////////////////////////////////////; 3806/// Type: unsafe but fast interface filling the arrays x and w (static method); 3807///; 3808/// Given the number of sampling points this routine fills the arrays x and w; 3809/// of length num, containing the abscissa and weight of the Gauss-Legendre; 3810/// n-point quadrature formula.; 3811///; 3812/// Gauss-Legendre:; 3813/** \f[; 3814 W(x)=1 -1<x<1 \\; 3815 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; 3816 \f]; 3817**/; 3818/// num is the number of sampling points (>0); 3819/// x and w are arrays of size num; 3820/// eps is the relative precision; 3821///; 3822/// If num<=0 or eps<=0 no action is done.; 3823///; 3824/// Reference: Numerical Recipes in C, Second Edition; 3825 ; 3826void TF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t *x, Double_t *w, Double_t eps); 3827{; 3828 // This function is just kept like this for backward compatibility!; 3829 ; 3830 ROOT::Math::GaussLegendreIntegrator gli(num, eps);; 38",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:144677,interface,interface,144677,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,2,"['interface', 'rout']","['interface', 'routine']"
Integrability,"nterface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitResult Class holding the result of the fit ; TFitResultPtr indirection to TFitResult; TFitter The ROOT standard fitter based on TMinuit; TFitterFumili Fitter based on new Fumili method (Fumili2); TFitterMinuit The ROOT fitter based on new Minuit (Minuit2); TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamSampler ; TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula ; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili ; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TG16ColorSelector 16 color cells; TGApplication GUI application singleton; TGButton Button widget abstract base class; TGButtonGroup Organizes TGButtons in a group; TGCanvas A canvas with two scrollbars and a viewport; TGCheckButton A check button widget; TGClient Class making connection to display server; TGColorDialog Color selection dialog; TGColorFrame Frame for color cell; TGColorPalette Color palette widget; TGColorPick Color picker widget; TGColorPopup Color selector popup; TGColorSelect Color selection checkbutton; TGColumnLayout Column layout manager; TGComboBox Combo box widget; TGComboBoxPopup Combobox popup window; TGCommandPlugin Command (I/O redirection) plugin for the new ROOT Browser; TGCompositeFrame Base class for composite widgets (menubars, etc.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:72226,interface,interface,72226,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,4,['interface'],['interface']
Integrability,"ntergated in the nuisance parameters (if existing).; A prior function for the nuisance can be specified either in the prior pdf object; or in the model itself. If no prior nuisance is specified, but prior parameters are then; the integration is performed assuming a flat prior for the nuisance parameters.; NOTE: the return object is managed by the class, users do not need to delete it. RooAbsPdf* GetPosteriorPdf() const; Build and return the posterior pdf (i.e posterior function normalized to all range of poi); Note that an extra integration in the POI is required for the normalization; NOTE: user must delete the returned object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region; NOTE: User takes ownership of the returned object. void SetIntegrationType(const char* type); set the integration type (possible type are) :; 1D integration ( used when only one nuisance and when the posterior is scanned):; adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls; Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling; See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC:; evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:12300,integrat,integration,12300,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,15,['integrat'],['integration']
Integrability,"nternal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFrameThis is a class to create DataFrames from ROOT to R ;  CBinding;  CTRFunctionExportThis is a class to pass functions from ROOT to R ;  CTRFunctionImportThis is a class to pass functions from ROOT to R ;  ►CTRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInside ;  CBinding;  CTRObjectThis is a class to get ROOT's objects from R's objects ;  ►NRDF;  CRArrowDSRDataFrame data source class to interface with Apache Arrow ;  CRCsvDSRDataFrame data source class for reading CSV files ;  CRCutFlowReport;  CRDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats ;  CRDisplayThis class is the textual representation of the content of a columnar dataset ;  CRInterfaceThe public interface to the RDataFrame federation of classes ;  CRLazyDSA RDataSource implementation which is built on top of result proxies ;  CRResultPtrSmart pointer for the return type of actions ;  CRRootDS;  CRSnapshotOptionsA collection of options to steer the creation of the dataset on file ;  ►CRSqliteDSRSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files ;  CValue_tUsed to hold a single ""cell"" of the SELECT query's result table.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:76085,interface,interface,76085,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,2,['interface'],['interface']
Integrability,"nterpreterMutexvoid ApplyToInterpreterMutex(void *delta)Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused.Definition TCling.cxx:9634; TCling::LazyFunctionCreatorAutoloadvoid * LazyFunctionCreatorAutoload(const std::string &mangled_name)Autoload a library based on a missing symbol.Definition TCling.cxx:6591; TCling::GenerateDictionaryInt_t GenerateDictionary(const char *classes, const char *includes="""", const char *options=nullptr) finalGenerate the dictionary for the C++ classes listed in the first argument (in a semi-colon separated l...Definition TCling.cxx:4723; TCling::ClassInfo_ContainsBool_t ClassInfo_Contains(ClassInfo_t *info, DeclId_t declid) const finalReturn true if the entity pointed to by 'declid' is declared in the context described by 'info'.Definition TCling.cxx:8131; TCling::IsLibraryLoadedBool_t IsLibraryLoaded(const char *libname) const finalDefinition TCling.cxx:3138; TCling::GetExecByteCodeLong_t GetExecByteCode() const finalThis routines used to return the address of the internal wrapper function (of the interpreter) that w...Definition TCling.cxx:7479; TCling::DataMemberInfo_ArrayDimint DataMemberInfo_ArrayDim(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8584; TCling::MethodArgInfo_TypeInfoTypeInfo_t * MethodArgInfo_TypeInfo(MethodArgInfo_t *marginfo) constDefinition TCling.cxx:9328; TCling::DataMemberInfo_FactoryCopyDataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8618; TCling::HandleNewTransactionBool_t HandleNewTransaction(const cling::Transaction &T)Helper function to increase the internal Cling count of transactions that change the AST.Definition TCling.cxx:3665; TCling::ReadRootmapFileint ReadRootmapFile(const char *rootmapfile, TUniqueString *uniqueString=nullptr)Read and parse a rootmapfile in its new format, and return 0 in case of success, -1 if the file has a...Definition TCling.cxx:5528; TCling::fSpecialObjectMapsstd::map< SpecialObjectLook",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:427653,rout,routines,427653,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,4,"['rout', 'wrap']","['routines', 'wrapper']"
Integrability,"ntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:7912,interface,interface,7912,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['interface'],['interface']
Integrability,"ntext menu on the fly when the object is clicking on. If you click on an axis, ROOT will ask the interpreter what are the methods of the TAxis and which ones are set for being displayed in a context menu.; Now, how does the interpreter know this? Remember, when you build a class that you want to use in the ROOT environment, you use rootcling that builds the so-called stub functions and the dictionary. These functions and the dictionary contain the knowledge of the used classes. To do this, rootcling parses all the header files. ROOT has defined some special syntax to inform Cling of certain things, this is done in the comments so that the code still compiles with a C++ compiler.; For example, you have a class with a Draw() method, which will display itself. You would like a context menu to appear when on clicks on the image of an object of this class. The recipe is the following:. The class has to contain the ClassDef/ClassImp macros; For each method you want to appear in the context menu, put a comment after the declaration containing *MENU* or *TOGGLE* depending on the behavior you expect. One usually uses Set methods (setters). The *TOGGLE* comment is used to toggle a boolean data field. In that case, it is safe to call the data field fMyBool where MyBool is the name of the setter SetMyBool. Replace MyBool with your own boolean variable.; You can specify arguments and the data members in which to store the arguments. For example:; class MyClass : public TObject {; private:; int fV1; // first variable; double fV2; // second variable; public:; int GetV1() {return fV1;}; double GetV2() {return fV2;}; void SetV1(int x1) { fV1 = x1;} // *MENU*; void SetV2(double d2) { fV2 = d2;} // *MENU*; void SetBoth(int x1, double d2) {fV1 = x1; fV2 = d2;}. ClassDef (MyClass,1); }; To specify arguments:; void SetXXX(Int_t x1, Float_t y2); //*MENU* *ARGS={x1=>fV1}; This statement is in the comment field, after the *MENU*. If there is more than one argument, these arguments are separa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:296943,depend,depending,296943,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['depend'],['depending']
Integrability,"ntext. ; Reimplemented from TVirtualX.; Definition at line 3387 of file TGCocoa.mm. ◆ GetCurrentWindow(). Window_t TGCocoa::GetCurrentWindow ; (; ); const. overridevirtual . pointer to the current internal window used in canvas graphics ; Reimplemented from TVirtualX.; Definition at line 833 of file TGCocoa.mm. ◆ GetDefaultRootWindow(). Window_t TGCocoa::GetDefaultRootWindow ; (; ); const. overridevirtual . Returns handle to the default root window created when calling XOpenDisplay(). ; Reimplemented from TVirtualX.; Definition at line 633 of file TGCocoa.mm. ◆ GetDepth(). Int_t TGCocoa::GetDepth ; (; ); const. overridevirtual . Returns depth of screen (number of bit planes). ; Equivalent to GetPlanes(). ; Reimplemented from TVirtualX.; Definition at line 561 of file TGCocoa.mm. ◆ GetDisplay(). Display_t TGCocoa::GetDisplay ; (; ); const. overridevirtual . Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 530 of file TGCocoa.mm. ◆ GetDisplayGeometry(). X11::Rectangle TGCocoa::GetDisplayGeometry ; (; ); const. Definition at line 601 of file TGCocoa.mm. ◆ GetDoubleBuffer(). Int_t TGCocoa::GetDoubleBuffer ; (; Int_t ; wid). overridevirtual . Queries the double buffer value for the window ""wid"". ; Reimplemented from TVirtualX.; Definition at line 4030 of file TGCocoa.mm. ◆ GetEventTranslator(). ROOT::MacOSX::X11::EventTranslator * TGCocoa::GetEventTranslator ; (; ); const. Definition at line 4394 of file TGCocoa.mm. ◆ GetFontHandle(). FontH_t TGCocoa::GetFontHandle ; (; FontStruct_t ; fs). overridevirtual . Returns the font handle of the specified font structure ""fs"". ; Reimplemented from TVirtualX.; Definition at line 2829 of file TGCocoa.mm. ◆ GetFontProperties(). void TGCocoa::GetFontProperties ; (; FontStruct_t ; font, . Int_t & ; max_ascent, . Int_t & ; max_descent . ). overridevirtual . Returns the font properties. ; Reimple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:83132,interface,interface,83132,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['interface'],['interface']
Integrability,"ntext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimSplitGenContext(const RooSimultaneous& model, const RooArgSet& vars, Bool_t _verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """"); Constructor of specialized generator context for RooSimultaneous p.d.f.s. This; context creates a dedicated context for each component p.d.f.s and delegates; generation of events to the appropriate component generator context. ~RooSimSplitGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach the index category clone to the given event buffer. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of generator context. RooDataSet* generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE). void setExpectedData(Bool_t ); Forward to components. RooDataSet* createDataSet(const char* name, const char* title, const RooArgSet& obs); this method is empty because it is not used by this context. void generateEvent(RooArgSet& theEvent, Int_t remaining); this method is empty because it is not used in this type of context. void setProtoDataOrder(Int_t* lut); this method is empty because proto datasets are not supported by this context. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooSimSplitGenContext(const RooSimultaneous& model, const RooArgSet& vars, Bool_t _verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """"). » Last changed: Tue Jun 30 14:35:45 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimSplitGenContext.html:11463,interface,interface,11463,root/html602/RooSimSplitGenContext.html,https://root.cern,https://root.cern/root/html602/RooSimSplitGenContext.html,1,['interface'],['interface']
Integrability,"ntext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimSplitGenContext(const RooSimultaneous& model, const RooArgSet& vars, Bool_t _verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """"); Constructor of specialized generator context for RooSimultaneous p.d.f.s. This; context creates a dedicated context for each component p.d.f.s and delegates; generation of events to the appropriate component generator context. ~RooSimSplitGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach the index category clone to the given event buffer. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of generator context. RooDataSet* generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE). void setExpectedData(Bool_t ); Forward to components. RooDataSet* createDataSet(const char* name, const char* title, const RooArgSet& obs); this method is empty because it is not used by this context. void generateEvent(RooArgSet& theEvent, Int_t remaining); this method is empty because it is not used in this type of context. void setProtoDataOrder(Int_t* lut); this method is empty because proto datasets are not supported by this context. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooSimSplitGenContext(const RooSimultaneous& model, const RooArgSet& vars, Bool_t _verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """"). » Last changed: Tue Mar 10 17:19:08 2015 » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimSplitGenContext.html:10439,interface,interface,10439,root/html534/RooSimSplitGenContext.html,https://root.cern,https://root.cern/root/html534/RooSimSplitGenContext.html,1,['interface'],['interface']
Integrability,"ntextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output. Class Charts. Inheritance Chart:. TObject. ←; TSQLStatement. ←. TMySQLStatement. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for parameter (if applicable). Int_t GetMinute(Int_t ); return minutes value for parameter (if appl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLStatement.html:19681,message,message,19681,root/html602/TSQLStatement.html,https://root.cern,https://root.cern/root/html602/TSQLStatement.html,2,['message'],['message']
Integrability,"ntexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). More...;  ; class  RooAbsSelfCached< Base_t >;  Abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate(). More...;  ; class  RooAbsStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooAbsTestStatistic;  Abstract base class for all test statistics. More...;  ; class  RooAcceptReject;  Generic Monte Carlo toy generator implement the accept/reject sampling technique on any positively valued function. More...;  ; class  Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:3078,interface,interface,3078,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['interface'],['interface']
Integrability,"ntfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; boolfOwnFuncflag to indicate we own the TF1 function pointer; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values from TF1). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the internal function pointer. { return fFunc; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__WrappedMultiTF1.html:3828,wrap,wrapper,3828,root/html604/ROOT__Math__WrappedMultiTF1.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__WrappedMultiTF1.html,1,['wrap'],['wrapper']
Integrability,"ntial expo{""expo"", ""expo"", x, c};; ; // Generate an Asimov dataset such that the only difference between the fit; // result and the true parameters comes from binning effects.; std::unique_ptr<RooAbsData> expoData{generateBinnedAsimov(expo, x, 10000)};; ; // If you do the fit the usual was in RooFit, you will get a bias in the; // result. This is because the continuous, normalized pdf is evaluated only; // at the bin centers.; std::unique_ptr<RooFitResult> fit1{expo.fitTo(*expoData, Save(), PrintLevel(-1), SumW2Error(false))};; fit1->Print();; ; // In the case of an exponential function, the bias that you get by; // evaluating the pdf only at the bin centers is a constant scale factor in; // each bin. Here, we can do a trick to get rid of the bias: we also; // evaluate the normalization integral for the pdf the same way, i.e.,; // summing the values of the unnormalized pdf at the bin centers. Like this; // the bias cancels out. You can achieve this by customizing the way how the; // pdf is integrated (see also the rf901_numintconfig tutorial).; enableBinIntegrator(expo, x.numBins());; std::unique_ptr<RooFitResult> fit2{expo.fitTo(*expoData, Save(), PrintLevel(-1), SumW2Error(false))};; fit2->Print();; disableBinIntegrator(expo);; ; // Power law example; // -----------------; ; // Let's not look at another example: a power law \f[x^a\f].; RooRealVar a{""a"", ""a"", -0.3, -5.0, 5.0};; RooPowerSum powerlaw{""powerlaw"", ""powerlaw"", x, RooConst(1.0), a};; std::unique_ptr<RooAbsData> powerlawData{generateBinnedAsimov(powerlaw, x, 10000)};; ; // Again, if you do a vanilla fit, you'll get a bias; std::unique_ptr<RooFitResult> fit3{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit3->Print();; ; // This time, the bias is not the same factor in each bin! This means our; // trick by sampling the integral in the same way doesn't cancel out the; // bias completely. The average bias is canceled, but there are per-bin; // biases that remain. Still, this met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:3838,integrat,integrated,3838,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['integrat'],['integrated']
Integrability,"nties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,; unsigned int); Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,; const MnStrategy&); Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum. Minimization terminates either when the function has been called (approximately) \(\mbox{maxfcn}\) times, or when the estimated vertical distance to minimum (\(\mbox{EDM}\)) is less than \(\mbox{tolerance*up}\). The default value of \(\mbox{tolerance}\) is \(\mbox{0.1}\). (see [howto:errordef]).; 5.11.5 Parameter interaction; MnSimplex retains the result after each minimization (MnUserParameterStae, see [api:state]) and forwards the interface for parameter interaction.; 5.11.6 SimplexMinimizer(); The SimplexMinimizer() is instantiated using default constructor.; 5.11.7 minimize(const FCNBase&, …); The SimplexMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.12 MnStrategy; [api:strategy] Sets the strategy to be used in calculating first and second derivatives and in certain minimization methods. In general, low values of \(\mbox{level}\) mean fewer function calls and high values mean more reliable minimization. Currently allowed values are 0 (low), 1 (default), and 2 (high).; 5.12.1 MnStrategy(); Default constructor, sets all settings according to \(\mbox{level}\)$ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:55523,interface,interface,55523,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['interface'],['interface']
Integrability,nting numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration ; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration ; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooProofDriverSelector ; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Quasi-random number generator; RooRandom Random number generator interface; RooRandomizeParamMCSModule MCStudy module to vary one or more input parameters during fit/generation cycle; RooRangeBinning Binning that only defines the total range; RooRangeBoolean Polynomial function; RooRealAnalytic Function binding to an analytical integral of a RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:41531,interface,interface,41531,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['interface'],['interface']
Integrability,"ntion.; 129 // To remove this ambiguity which might not always be correctly handled in; 130 // downstream code, we set `normalisationSet` to nullptr if it is an empty set.; 131 return _fast ? _value : getValV(normalisationSet.empty() ? nullptr : &normalisationSet) ;; 132 }; 133 ; 134 virtual double getValV(const RooArgSet* normalisationSet = nullptr) const ;; 135 ; 136 double getPropagatedError(const RooFitResult &fr, const RooArgSet &nset = {}) const;; 137 ; 138 bool operator==(double value) const ;; 139 bool operator==(const RooAbsArg& other) const override;; 140 bool isIdentical(const RooAbsArg& other, bool assumeSameType=false) const override;; 141 ; 142 ; 143 inline const Text_t *getUnit() const {; 144 // Return string with unit description; 145 return _unit.Data();; 146 }; 147 inline void setUnit(const char *unit) {; 148 // Set unit description to given string; 149 _unit= unit;; 150 }; 151 TString getTitle(bool appendUnit= false) const;; 152 ; 153 // Lightweight interface adaptors (caller takes ownership); 154 RooFit::OwningPtr<RooAbsFunc> bindVars(const RooArgSet &vars, const RooArgSet* nset=nullptr, bool clipInvalid=false) const;; 155 ; 156 // Create a fundamental-type object that can hold our value.; 157 RooFit::OwningPtr<RooAbsArg> createFundamental(const char* newname=nullptr) const override;; 158 ; 159 // Analytical integration support; 160 virtual Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName=nullptr) const ;; 161 virtual double analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=nullptr) const ;; 162 virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=nullptr) const ;; 163 virtual double analyticalIntegral(Int_t code, const char* rangeName=nullptr) const ;; 164 virtual bool forceAnalyticalInt(const RooAbsArg& /*dep*/) const {; 165 // Interface to force RooRealIntegral to offer given observable for internal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:6096,interface,interface,6096,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['interface'],['interface']
Integrability,"ntless. */; 15360 if ((fi.access.fp == NULL); 15361 && (conn->phys_ctx->callbacks.log_access == NULL)) {; 15362 return;; 15363 }; 15364 ; 15365 /* If we did not get a log message from Lua, create it here. */; 15366 if (!log_buf[0]) {; 15367 tm = localtime(&conn->conn_birth_time);; 15368 if (tm != NULL) {; 15369 strftime(date, sizeof(date), ""%d/%b/%Y:%H:%M:%S %z"", tm);; 15370 } else {; 15371 mg_strlcpy(date, ""01/Jan/1970:00:00:00 +0000"", sizeof(date));; 15372 date[sizeof(date) - 1] = '\0';; 15373 }; 15374 ; 15375 ri = &conn->request_info;; 15376 ; 15377 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 15378 referer = header_val(conn, ""Referer"");; 15379 user_agent = header_val(conn, ""User-Agent"");; 15380 ; 15381 mg_snprintf(conn,; 15382 NULL, /* Ignore truncation in access log */; 15383 log_buf,; 15384 sizeof(log_buf),; 15385 ""%s - %s [%s] \""%s %s%s%s HTTP/%s\"" %d %"" INT64_FMT; 15386 "" %s %s"",; 15387 src_addr,; 15388 (ri->remote_user == NULL) ? ""-"" : ri->remote_user,; 15389 date,; 15390 ri->request_method ? ri->request_method : ""-"",; 15391 ri->request_uri ? ri->request_uri : ""-"",; 15392 ri->query_string ? ""?"" : """",; 15393 ri->query_string ? ri->query_string : """",; 15394 ri->http_version,; 15395 conn->status_code,; 15396 conn->num_bytes_sent,; 15397 referer,; 15398 user_agent);; 15399 }; 15400 ; 15401 /* Here we have a log message in log_buf. Call the callback */; 15402 if (conn->phys_ctx->callbacks.log_access) {; 15403 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15404 /* do not log if callack returns non-zero */; 15405 if (fi.access.fp) {; 15406 mg_fclose(&fi.access);; 15407 }; 15408 return;; 15409 }; 15410 }; 15411 ; 15412 /* Store in file */; 15413 if (fi.access.fp) {; 15414 int ok = 1;; 15415 flockfile(fi.access.fp);; 15416 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15417 ok = 0;; 15418 }; 15419 if (fflush(fi.access.fp) != 0) {; 15420 ok = 0;; 15421 }; 15422 funlockfile(fi.access.fp);; 15423 if (mg_fclose(&fi.access) != 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:455384,message,message,455384,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['message'],['message']
Integrability,"ntless. */; 15361 if ((fi.access.fp == NULL); 15362 && (conn->phys_ctx->callbacks.log_access == NULL)) {; 15363 return;; 15364 }; 15365 ; 15366 /* If we did not get a log message from Lua, create it here. */; 15367 if (!log_buf[0]) {; 15368 tm = localtime(&conn->conn_birth_time);; 15369 if (tm != NULL) {; 15370 strftime(date, sizeof(date), ""%d/%b/%Y:%H:%M:%S %z"", tm);; 15371 } else {; 15372 mg_strlcpy(date, ""01/Jan/1970:00:00:00 +0000"", sizeof(date));; 15373 date[sizeof(date) - 1] = '\0';; 15374 }; 15375 ; 15376 ri = &conn->request_info;; 15377 ; 15378 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 15379 referer = header_val(conn, ""Referer"");; 15380 user_agent = header_val(conn, ""User-Agent"");; 15381 ; 15382 mg_snprintf(conn,; 15383 NULL, /* Ignore truncation in access log */; 15384 log_buf,; 15385 sizeof(log_buf),; 15386 ""%s - %s [%s] \""%s %s%s%s HTTP/%s\"" %d %"" INT64_FMT; 15387 "" %s %s"",; 15388 src_addr,; 15389 (ri->remote_user == NULL) ? ""-"" : ri->remote_user,; 15390 date,; 15391 ri->request_method ? ri->request_method : ""-"",; 15392 ri->request_uri ? ri->request_uri : ""-"",; 15393 ri->query_string ? ""?"" : """",; 15394 ri->query_string ? ri->query_string : """",; 15395 ri->http_version,; 15396 conn->status_code,; 15397 conn->num_bytes_sent,; 15398 referer,; 15399 user_agent);; 15400 }; 15401 ; 15402 /* Here we have a log message in log_buf. Call the callback */; 15403 if (conn->phys_ctx->callbacks.log_access) {; 15404 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15405 /* do not log if callack returns non-zero */; 15406 if (fi.access.fp) {; 15407 mg_fclose(&fi.access);; 15408 }; 15409 return;; 15410 }; 15411 }; 15412 ; 15413 /* Store in file */; 15414 if (fi.access.fp) {; 15415 int ok = 1;; 15416 flockfile(fi.access.fp);; 15417 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15418 ok = 0;; 15419 }; 15420 if (fflush(fi.access.fp) != 0) {; 15421 ok = 0;; 15422 }; 15423 funlockfile(fi.access.fp);; 15424 if (mg_fclose(&fi.access) != 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:455417,message,message,455417,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['message'],['message']
Integrability,"ntly active pad. ; Therefore it requires that a TCanvas has been created first.; It takes the following options. Option Description . grid / nogrid enable (default) or disable drawing of dashed lines on lower plot . hideup hides the first label of the upper axis if there is not enough space . fhideup always hides the first label of the upper axis . hidelow (default) hides the last label of the lower axis if there is not enough space . fhidelow always hides the last label of the lower axis . nohide does not hide a label if there is not enough space . noconfint does not draw the confidence interval bands in the fit residual case . confint draws the confidence interval bands in the fit residual case (default) . Reimplemented from TObject.; Definition at line 563 of file TRatioPlot.cxx. ◆ GetCalculationOutputGraph(). TGraph * TRatioPlot::GetCalculationOutputGraph ; (; ); const. inline . Get the output of the calculation in the form of a graph. ; The type of the return value depends on the input option that was given in the constructor. ; Definition at line 202 of file TRatioPlot.h. ◆ GetConfidenceInterval1(). TGraphErrors * TRatioPlot::GetConfidenceInterval1 ; (; ); const. inline . Returns the graph for the 1 sigma confidence interval in the fit residual case. ; Definition at line 207 of file TRatioPlot.h. ◆ GetConfidenceInterval2(). TGraphErrors * TRatioPlot::GetConfidenceInterval2 ; (; ); const. inline . Returns the graph for the 2 sigma confidence interval in the fit residual case. ; Definition at line 212 of file TRatioPlot.h. ◆ GetLowerPad(). TPad * TRatioPlot::GetLowerPad ; (; ); const. inline . Definition at line 215 of file TRatioPlot.h. ◆ GetLowerRefGraph(). TGraph * TRatioPlot::GetLowerRefGraph ; (; ); const. virtual . Returns the reference graph for the lower pad, which means the graph that is responsible for setting the coordinate system. ; It is the first graph added to the primitive list of the lower pad. This reference can be used to set the minimum and m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:31816,depend,depends,31816,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['depend'],['depends']
Integrability,"nto that range. RooErrorVar* errorVar() const; Return a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameterized range named 'name' that has external functions; min and max parameterizing its boundaries. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object cont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:40543,message,message,40543,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,1,['message'],['message']
Integrability,"ntry; 664/// // all the baskets for a cluster are consecutive in the file.; 665/// ~~~; 666/// rather than doing all the entries of one branch at a time.; 667/// ~~~ {.cpp}; 668/// // Do NOT do things in the following order, it will lead to; 669/// // poorly clustered files.; 670/// for(auto branch : branchCollection) {; 671/// for( auto e = 0; e < tree->GetEntries(); ++e ) { // loop over entries.; 672/// ... Make change to the data associated with the branch ...; 673/// branch->BackFill();; 674/// }; 675/// }; 676/// // Since we loop over all the entries for one branch; 677/// // all the baskets for that branch are consecutive.; 678/// ~~~; 679 ; 680Int_t TBranch::BackFill() {; 681 ; 682 // Get the end of the next cluster.; 683 auto cluster = GetTree()->GetClusterIterator( GetEntries() );; 684 cluster.Next();; 685 auto endCluster = cluster.GetNextEntry();; 686 ; 687 auto result = FillImpl(nullptr);; 688 ; 689 if ( result && GetEntries() >= endCluster ) {; 690 FlushBaskets();; 691 }; 692 ; 693 return result;; 694}; 695 ; 696////////////////////////////////////////////////////////////////////////////////; 697/// Browser interface.; 698 ; 699void TBranch::Browse(TBrowser* b); 700{; 701 if (fNleaves > 1) {; 702 fLeaves.Browse(b);; 703 } else {; 704 // Get the name and strip any extra brackets; 705 // in order to get the full arrays.; 706 TString name = GetName();; 707 Int_t pos = name.First('[');; 708 if (pos!=kNPOS) name.Remove(pos);; 709 ; 710 GetTree()->Draw(name, """", b ? b->GetDrawOption() : """");; 711 if (gPad) gPad->Update();; 712 }; 713}; 714 ; 715 ///////////////////////////////////////////////////////////////////////////////; 716 /// Loop on all branch baskets. If the file where branch buffers reside is; 717 /// writable, free the disk space associated to the baskets of the branch,; 718 /// then call Reset(). If the option contains ""all"", delete also the baskets; 719 /// for the subbranches.; 720 /// The branch is reset.; 721 ///; 722 /// NOTE that this functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:24662,interface,interface,24662,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['interface'],['interface']
Integrability,"ntryLast dir entry; VecStringVP_tfDirListBuffer for directory content; void*fDirpDirectory pointer; Bool_tfIsRootdNature of remote file server; Bool_tfIsXRootdNature of remote file server; TStringfUrlInitial url; static THashListfgAddrFQDNCross-table address<->FQDN; static THashListfgAdminHashList of existing XrdClientAdmin; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSystem. ←; TNetSystem. ←; TXNetSystem. Function documentation; TXNetSystem(Bool_t owner = kTRUE); Create system management class without connecting to server. TXNetSystem(const char* url, Bool_t owner = kTRUE); Create system management class and connect to server specified by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetSystem.html:21580,protocol,protocol,21580,root/html602/TXNetSystem.html,https://root.cern,https://root.cern/root/html602/TXNetSystem.html,2,['protocol'],['protocol']
Integrability,"nts a universal generator context for all RooAbsPdf classes that do not have or need a special...Definition RooGenContext.h:29; RooHelpers::LocalChangeMsgLevelSwitches the message service to a different level while the instance is alive.Definition RooHelpers.h:37; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:165818,integrat,integrator,165818,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integrator']
Integrability,"nts every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTPoolManagerA manager for the scheduler behind ROOT multithreading operations ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  CTypeTraits;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) ;  CTInterpreterLookupHelper;  CTSplitType;  ►Ntest;  Ctest;  ►NTMathTMath ;  CLimits;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  ►NCNN;  CTCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:76411,interface,interface,76411,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['interface'],['interface']
Integrability,"nts using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:5701,interface,interface,5701,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['interface'],['interface']
Integrability,"nts with large likelihood values. . bin Offset likelihood bin-by-bin with a template histogram model based on the obersved data. This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum, which can drastically improve numeric stability. Furthermore, \(2\cdot \text{NLL}\) defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests. . IntegrateBins(double precision) In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre. This can reduce the bias observed when fitting functions with high curvature to binned data.; precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning. Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator has to be manipulated directly.; precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; precision < 0: Deactivate. See alsoRooBinSamplingPdf . ModularL(bool flag) Enable or disable modular likelihoods, which will become the default in a future release. This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this should be set to true for parallel minimization of likelihoods! Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since some features such as offsetting might not yet work in this case. . PyROOT; The RooAbsPdf::createNLL() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 163 of file RooAbsPdf.h. ◆ createNLLImpl(). std::unique_ptr< RooAbsReal > RooAbsPdf::createNLLImpl ; (; RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:95515,integrat,integrator,95515,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['integrat'],['integrator']
Integrability,"nts(unsigned int n) const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. private:. const ROOT::Fit::BinData&fData; const ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; unsigned intfNEffPointsnumber of effective points used in the fit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function. unsigned int NFitPoints() const; effective points used in the fit (exclude the rejected one). { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th chi-square residual. void Gradient(const double* x, double* g) const; need to be virtual to be instantiated. void SetNFitPoints(unsigned int n) const; set number of fit points (need to be called in const methods, make it const). { fNEffPoints = n; }. double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Tue Sep 5 09:13:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__Chi2FCN_-p0Math__IBaseFunctionMultiDim_.html:4599,interface,interface,4599,root/html602/ROOT__Fit__Chi2FCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__Chi2FCN_-p0Math__IBaseFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"nts) . Definition at line 127 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 89 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 184 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 442 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 447 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 559 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumPdf.html:80376,integrat,integrations,80376,doc/master/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/master/classRooRealSumPdf.html,3,['integrat'],"['integration', 'integrations', 'integrators']"
Integrability,"nts) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 444 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 449 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 561 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:81497,integrat,integrations,81497,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,3,['integrat'],"['integration', 'integrations', 'integrators']"
Integrability,"nts, Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; Generate a new dataset containing the specified variables with; events sampled from our distribution. Generate the specified; number of events or else try to use expectedEvents() if nEvents <= 0. If expectedData is kTRUE (it is kFALSE by default), the returned histogram returns the 'expected'; data sample, i.e. no statistical fluctuations are present. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList); Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; will show a unit normalized curve in the frame variable, taken at the present value; of other observables defined for this PDF. If a PDF is plotted in a frame in which a dataset has already been plotted, it will; show a projected curve integrated over all variables that were present in the shown; dataset except for the one on the x-axis. The normalization of the curve will also; be adjusted to the event count of the plotted dataset. An informational message; will be printed for each projection step that is performed. This function takes the following named arguments. Projection control. Slice(const RooArgSet& set) -- Override default projection behaviour by omittting observables listed; in set from the projection, resulting a 'slice' plot. Slicing is usually; only sensible in discrete observables; Project(const RooArgSet& set) -- Override default projection behaviour by projecting over observables; given in set and complete ignoring the default projection behavior. Advanced use only.; ProjWData(const RooAbsData& d) -- Override default projection _technique_ (integration). For observables present in given dataset; projection of PDF is achieved by constructing an average over all observable values in given set.; Con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:66205,integrat,integrated,66205,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['integrat'],['integrated']
Integrability,"nt . ). overridevirtual . Add details on cache contents when printing in tree mode. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 194 of file RooObjCacheManager.cxx. ◆ redirectServersHook(). bool RooObjCacheManager::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overridevirtual . Intercept server redirect calls. ; If clearOnRedirect was set, sterilize the cache (i.e. keep the structure but delete all contents). If not forward serverRedirect to cache elements ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 84 of file RooObjCacheManager.cxx. ◆ setClearOnRedirect(). void RooObjCacheManager::setClearOnRedirect ; (; bool ; flag). inline . Definition at line 50 of file RooObjCacheManager.h. ◆ sterilize(). void RooObjCacheManager::sterilize ; (; ). overridevirtual . Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 152 of file RooObjCacheManager.cxx. ◆ Streamer(). void RooObjCacheManager::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from RooCacheManager< RooAbsCacheElement >. ◆ StreamerNVirtual(). void RooObjCacheManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooObjCacheManager.h. Member Data Documentation. ◆ _allowOptimize. bool RooObjCacheManager::_allowOptimize. protected . Definition at line 55 of file RooObjCacheManager.h. ◆ _clearObsList. bool RooObjCacheManager::_clearObsList. staticprotected . Clear obslist on sterilize? ; Definition at line 60 of file RooObjCacheManager.h. ◆ _clearOnRedirect. bool RooObjCacheManager::_clearOnRedirect. protected . Definition at line 54 of file RooObjCacheManager.h. ◆ _optCacheModeSeen. bool RooObjCacheManager::_optCacheModeSeen. protected . ! ; Definition at line 56 of file Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:11755,integrat,integration,11755,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['integrat'],['integration']
Integrability,"nt ; maxiter). static . Set the maximum number of iterations. ; Used by the GSL minimizers and Genetic. Not used by Minuit,Minuit2. ; Definition at line 67 of file MinimizerOptions.cxx. ◆ SetDefaultMinimizer(). void ROOT::Math::MinimizerOptions::SetDefaultMinimizer ; (; const char * ; type, . const char * ; algo = nullptr . ). static . Set the default Minimizer type and corresponding algorithms. ; Here is the list of the available minimizers and their corresponding algorithms. For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it. ROOT Minimizers. Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; Migrad default algorithm based on the variable metric minimizer; Minimize combination of Simplex and Migrad; Simplex minimization algorithm not using the gradient information; Scan brute function scan. Minuit2 New C++ implementation of Minuit (the recommended one); Migrad (default); Minimize; Simplex; Fumili2 new implementation of Fumili integrated in Minuit2. Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; BFGS2 (default); BFGS; ConjugateFR; ConjugatePR; SteepestDescent. GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorithm using only function values and not the gradient.; Genetic Genetic minimization algorithms (see TMVA::Genetic) . Definition at line 43 of file MinimizerOptions.cxx. ◆ SetDefaultPrecis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:12792,integrat,integrated,12792,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['integrat'],['integrated']
Integrability,"nt fPageWidth;  ; TGHtmlElement * fPEnd;  ; TGHtmlElement * fPStart;  ; int fRight;  ; SHtmlMargin_t * fRightMargin;  ; int fTop;  . Protected Member Functions; void ClearMarginStack (SHtmlMargin_t **ppMargin);  Clear a margin stack to reclaim memory. ;  ; void ClearObstacle (int mode);  Clear a wrap-around obstacle. ;  ; void ComputeMargins (int *pX, int *pY, int *pW);  Compute the current margins for layout. ;  ; TGHtmlElement * DoBreakMarkup (TGHtmlElement *p);  Break markup is any kind of markup that might force a line-break. ;  ; void FixAnchors (TGHtmlElement *p, TGHtmlElement *pEnd, int y);  Set the y coordinate for every anchor in the given list. ;  ; int FixLine (TGHtmlElement *pStart, TGHtmlElement *pEnd, int bottom, int width, int actualWidth, int leftMargin, int *maxX);  This routine computes the X and Y coordinates for all elements of a line that has been gathered using GetLine() above. ;  ; TGHtmlElement * GetLine (TGHtmlElement *pStart, TGHtmlElement *pEnd, int width, int minX, int *actualWidth);  This routine gathers as many tokens as will fit on one line. ;  ; int InWrapAround ();  Return TRUE (non-zero) if we are currently wrapping text around one or more images. ;  ; void Paragraph (TGHtmlElement *p);  Increase the headroom to create a paragraph break at the current token. ;  ; void PopExpiredMargins (SHtmlMargin_t **ppMarginStack, int y);  Pop all expired margins from the stack. ;  ; void PopMargin (SHtmlMargin_t **ppMargin, int tag);  Pop as many margins as necessary until the margin that was created with ""tag"" is popped off. ;  ; void PopOneMargin (SHtmlMargin_t **ppMargin);  Pop one margin off of the given margin stack. ;  ; void PushMargin (SHtmlMargin_t **ppMargin, int indent, int bottom, int tag);  Push a new margin onto the given margin stack. ;  ; TGHtmlElement * TableLayout (TGHtmlTable *p);  Do all layout for a single table. ;  ; void WidenLine (int reqWidth, int *pX, int *pY, int *pW);  Move past obstacles until a linewidth of reqWidth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:9511,rout,routine,9511,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['rout'],['routine']
Integrability,"nu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""method"". void Dialog(TObject* object, TFunction* function); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""function"".; function may be a global function or a method. void DrawEntry(TGMenuEntry* entry); Draw context menu entry. Bool_t HandleButton(Event_t* event); Handle button event in the context menu. Bool_t HandleCrossing(Event_t* event); Handle pointer crossing event in context menu. Bool_t HandleMotion(Event_t* event); Handle pointer motion event in context menu. void OnlineHelp(); Open the online help matching the actual class/method. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle context menu messages. void RecursiveRemove(TObject* obj); Close the context menu if the object is deleted in the; RecursiveRemove() operation. TRootContextMenu(const TRootContextMenu& ). TRootContextMenu& operator=(const TRootContextMenu& ). TRootDialog * GetDialog() const; { return fDialog; }. » Author: Fons Rademakers 12/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRootContextMenu.html:24038,message,messages,24038,root/html534/TRootContextMenu.html,https://root.cern,https://root.cern/root/html534/TRootContextMenu.html,1,['message'],['messages']
Integrability,"nu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""method"". void Dialog(TObject* object, TFunction* function); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""function"".; function may be a global function or a method. void DrawEntry(TGMenuEntry* entry); Draw context menu entry. Bool_t HandleButton(Event_t* event); Handle button event in the context menu. Bool_t HandleCrossing(Event_t* event); Handle pointer crossing event in context menu. Bool_t HandleMotion(Event_t* event); Handle pointer motion event in context menu. void OnlineHelp(); Open the online help matching the actual class/method. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle context menu messages. void RecursiveRemove(TObject* obj); Close the context menu if the object is deleted in the; RecursiveRemove() operation. TRootContextMenu(const TRootContextMenu& ). TRootContextMenu& operator=(const TRootContextMenu& ). TRootDialog * GetDialog() const; { return fDialog; }. » Author: Fons Rademakers 12/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootContextMenu.html:24962,message,messages,24962,root/html602/TRootContextMenu.html,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html,1,['message'],['messages']
Integrability,"nu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""method"". void Dialog(TObject* object, TFunction* function); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""function"".; function may be a global function or a method. void DrawEntry(TGMenuEntry* entry); Draw context menu entry. Bool_t HandleButton(Event_t* event); Handle button event in the context menu. Bool_t HandleCrossing(Event_t* event); Handle pointer crossing event in context menu. Bool_t HandleMotion(Event_t* event); Handle pointer motion event in context menu. void OnlineHelp(); Open the online help matching the actual class/method. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle context menu messages. void RecursiveRemove(TObject* obj); Close the context menu if the object is deleted in the; RecursiveRemove() operation. TRootContextMenu(const TRootContextMenu& ). TRootContextMenu& operator=(const TRootContextMenu& ). TRootDialog * GetDialog() const; { return fDialog; }. » Author: Fons Rademakers 12/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-08-14 20:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRootContextMenu.html:24860,message,messages,24860,root/html604/TRootContextMenu.html,https://root.cern,https://root.cern/root/html604/TRootContextMenu.html,1,['message'],['messages']
Integrability,"nu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamEvent.html:10413,message,message,10413,root/html530/TMVA__PDEFoamEvent.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamEvent.html,9,['message'],['message']
Integrability,"nu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static RooExpensiveObjectCache*_instance!; map<TString,ExpensiveObject*>_map; Int_t_nextUID. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExpensiveObjectCache(); Constructor. RooExpensiveObjectCache(const RooExpensiveObjectCache& ); Copy constructor. ~RooExpensiveObjectCache(); Destructor. RooExpensiveObjectCache& instance(); Return reference to singleton instance. void cleanup(); Static function called by RooSentinel atexit() handler to cleanup at end of program. Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, const RooArgSet& params); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* parIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExpensiveObjectCache.html:7000,depend,dependent,7000,root/html526/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html526/RooExpensiveObjectCache.html,1,['depend'],['dependent']
Integrability,"nu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static RooExpensiveObjectCache*_instance!; map<TString,ExpensiveObject*>_map; Int_t_nextUID. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExpensiveObjectCache(); Constructor. RooExpensiveObjectCache(const RooExpensiveObjectCache& ); Copy constructor. ~RooExpensiveObjectCache(); Destructor. RooExpensiveObjectCache& instance(); Return reference to singleton instance. void cleanup(); Static function called by RooSentinel atexit() handler to cleanup at end of program. Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, const RooArgSet& params); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExpensiveObjectCache.html:6986,depend,dependent,6986,root/html528/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html528/RooExpensiveObjectCache.html,4,['depend'],['dependent']
Integrability,"nue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. Bool_t MatchLegacyCheckSum(UInt_t checksum) const; Return true if the checksum passed as argument is one of the checksum; value produced by the older checksum calulcation algorithm. UInt_t GetCheckSum(TClass::ECheckSum code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Original algorithm from Victor Perevovchikov (perev@bnl.gov). The valid range of code is determined by ECheckSum. kNoEnum: data members of type enum are not counted in the checksum; kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; kWithTypeDef: use the sugared type name in the calculation. This is needed for backward compatibility. WARNING: this function must be kept in sync with TClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStreamerInfo.html:18245,rout,routine,18245,root/html534/TStreamerInfo.html,https://root.cern,https://root.cern/root/html534/TStreamerInfo.html,3,['rout'],['routine']
Integrability,"nue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Algorithm from Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void GenerateDeclaration(FILE* fp, FILE* sfp, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerInfo.html:16514,rout,routine,16514,root/html528/TStreamerInfo.html,https://root.cern,https://root.cern/root/html528/TStreamerInfo.html,3,['rout'],['routine']
Integrability,"nuisance parameters for interval; RooArgSet*fObservablesRooArgSet specifying the observables in the dataset (needed to evaluate the test statistic); Bool_tfOwnsWorkspaceflag if this object owns its workspace; RooArgSet*fPOIRooArgSet specifying parameters of interest for interval; const char*fPdfNamename of common PDF in workspace; TRandom*fRandrandom generator; Double_tfSize; RooStats::TestStatistic*fTestStatpointer to the test statistic that is being sampled; TStringfVarNamename of test statistic; RooWorkspace*fWSa workspace that owns all the components to be used by the calculator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ToyMCSampler(TestStatistic &ts). virtual ~ToyMCSampler(). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. SamplingDistribution* GetSamplingDistribution(RooArgSet& allParameters); Main interface to get a SamplingDistribution. RooAbsData* GenerateToyData(RooArgSet& allParameters) const; This method generates a toy dataset for the given parameter point. SetParameters(&allParameters, parameters). string MakeName(RooArgSet& ); helper method to create meaningful names for sampling dist. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetNEventsPerToy(const Int_t nevents). void SetExtended(const Bool_t isExtended). void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. void SetData(const char* name); s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ToyMCSampler.html:4144,interface,interface,4144,root/html526/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__ToyMCSampler.html,1,['interface'],['interface']
Integrability,"nuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigParameters;  ; class  Option;  ; class  Option< T * >;  ; class  OptionBase;  Class for TMVA-option handling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamDensityBase;  This is an abstract class, which provides an interface for a PDEFoam density estimator. More...;  ; class  PDEFoamDiscriminant;  This PDEFoam variant stores in every cell the discriminant. More...;  ; class  PDEFoamDiscriminantDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA.html:8482,interface,interface,8482,doc/master/namespaceTMVA.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html,2,['interface'],['interface']
Integrability,"nullptr) :; 53 fFunc(func),; 54 fDim(dim),; 55 fParams(std::vector<double>(npar) ); 56 {; 57 if (par) std::copy(par, par+npar, fParams.begin());; 58 }; 59 ; 60// /**; 61// Constructor a wrapped function from a non-const pointer to a callable object, the function dimension and number of parameters; 62// which are set to zero by default; 63// This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; 64// */; 65// WrappedParamFunction (FuncPtr & func, unsigned int dim = 1, unsigned int npar = 0, double * par = 0) :; 66// fFunc(func),; 67// fDim(dim),; 68// fParams(std::vector<double>(npar) ); 69// {; 70// if (par != 0) std::copy(par,par+npar,fParams.begin() );; 71// }; 72 ; 73 /**; 74 Constructor a wrapped function from a pointer to a callable object, the function dimension and an iterator specifying begin and end; 75 of parameters; 76 */; 77 template<class Iterator>; 78 WrappedParamFunction (FuncPtr func, unsigned int dim, Iterator begin, Iterator end) :; 79 fFunc(func),; 80 fDim(dim),; 81 fParams(std::vector<double>(begin,end) ); 82 {}; 83 ; 84// /**; 85// Constructor a wrapped function from a non - const pointer to a callable object, the function dimension and an iterator specifying begin and end of parameters.; 86// This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; 87// */; 88// template<class Iterator>; 89// WrappedParamFunction (FuncPtr func, unsigned int dim, Iterator begin, Iterator end) :; 90// fFunc(func),; 91// fDim(dim),; 92// fParams(std::vector<double>(begin,end) ); 93// {}; 94 ; 95 /// clone the function; 96 IMultiGenFunction * Clone() const override {; 97 return new WrappedParamFunction(fFunc, fDim, fParams.begin(), fParams.end());; 98 }; 99 ; 100 const double * Parameters() const override {; 101 return fParams.empty() ? nullptr : &fParams.front();; 102 }; 103 ; 104 void SetParameters(const double * p) override {; 105 std::copy(p, p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedParamFunction_8h_source.html:2538,wrap,wrapped,2538,doc/master/WrappedParamFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedParamFunction_8h_source.html,2,['wrap'],['wrapped']
Integrability,"num  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSystem; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local storage for the custom last error message. ;  ; virtual const char * GetLinkedLibraries ();  Get list of shared libraries loaded at the start of the executable. ;  ; virtual void SigAlarmInterruptsSyscalls (Bool_t);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TSystem; static const char * StripOffProto (const char *path, const char *proto);  Strip off protocol string from specified path. ;  ;  Protected Attributes inherited from TSystem; EAclicMode fAclicMode {kDefault};  ; Int_t fAclicProperties {0};  ; Int_t fBeepDuration {0};  ; Int_t fBeepFreq {0};  ; TString fBuildArch;  ; TString fBuildCompiler;  ; TString fBuildCompilerVersion;  ; TStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:31091,message,message,31091,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,2,['message'],['message']
Integrability,"numBoundaries () const override;  Return the number boundaries. ;  ; bool removeBoundary (double boundary);  Remove boundary at given value. ;  ; void setRange (double xlo, double xhi) override;  Change the defined range associated with this binning. ;  ; void Streamer (TBuffer &) override;  Custom streamer that provides backward compatibility to read v1 data. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsBinning;  RooAbsBinning (const char *name=nullptr);  ;  RooAbsBinning (const RooAbsBinning &other, const char *name=nullptr);  ; int binNumber (double x) const;  Returns the bin number corresponding to the value x. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsReal * highBoundFunc () const;  Return pointer to RooAbsReal parameterized upper bound, if any. ;  ; virtual void insertHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon insertion into a RooAbsRealLValue. ;  ; virtual bool isParameterized () const;  Interface function. ;  ; virtual bool isShareable () const;  If true (default), the range definition can be shared across clones of a RooRealVar. ;  ; virtual bool isUniform () const;  ; virtual RooAbsReal * lowBoundFunc () const;  Return pointer to RooAbsReal parameterized lower bound, if any. ;  ; Int_t numBins () const;  Return number of bins. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print binning arguments (the RooAbsReal objects represening the variable bin boundaries for parameterized binning implementations. ;  ; void printClassName (std::ostream &os) const override;  Print binning class name. ;  ; void printName (std::ostream &os) const override;  Print binning name. ;  ; void printTitle (std::ostream &os) const override;  P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinning.html:3783,interface,interface,3783,doc/master/classRooBinning.html,https://root.cern,https://root.cern/doc/master/classRooBinning.html,1,['interface'],['interface']
Integrability,number entry; TGNumberEntry*fZNdivSubZ axis secondary division number entry; TGNumberEntry*fZNdivSubSubZ axis tertiary division number entry; TGCheckButton*fZNdivisionsOptimizeZ axis division optimization check box; TGNumberEntry*fZTickLengthZ axis tick length number entry; TGColorSelect*fZTitleColorZ axis title color selection widget; TGFontTypeComboBox*fZTitleFontZ axis title font combo box; TGNumberEntry*fZTitleOffsetZ axis title offset number entry; TGNumberEntry*fZTitleSizeZ axis title size number entry; TGCheckButton*fZTitleSizeInPixelsZ axis title size check box; static TStyleManager*fgStyleManagersingleton style manager. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TStyleManager. Function documentation; TStyleManager(const TGWindow* ); Constructor. Create the main window of the style manager. ~TStyleManager(); Destructor. TStyleManager *& GetSM(); static: return style manager. void Init(); Set up the interface. Called by the ctor or by the 'Show' method. void Hide(); Called to hide the style manager. void Show(); Called to show the style manager. Static method. void Terminate(); Called to delete the style manager. Called when the ROOT session is; closed via a canvas' menu. void AddMenus(TGCompositeFrame* p); Add the menu bar to the frame 'p'. void DoNew(); Create a new style. Called via the menu bar or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStyleManager.html:49784,interface,interface,49784,root/html602/TStyleManager.html,https://root.cern,https://root.cern/root/html602/TStyleManager.html,2,['interface'],['interface']
Integrability,"number for training and testing; columns = ROOT.std.vector[""string""](variables); df.Filter(""event % 2 == 0"", ""Select events with even event number for training"")\; .Snapshot(""Events"", ""train_"" + label + "".root"", columns); df.Filter(""event % 2 == 1"", ""Select events with odd event number for training"")\; .Snapshot(""Events"", ""test_"" + label + "".root"", columns); ; # Print cutflow report; report.Print(); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; At least two electrons and two muons: pass=45352 all=299973 -- eff=15.12 % cumulative eff=15.12 %; At least two electrons and two muons: pass=262776 all=1497445 -- eff=17.55 % cumulative eff=17.55 %; >>> Extract the training and testing events for signal from the SMHiggsToZZTo4L.root dataset.; >>> Extract the training and testing events for background from the ZZTo2e2mu.root dataset.; DateAugust 2019 ; AuthorStefan Wunsch ; Definition in file tmva100_DataPreparation.py. tutorialstmvatmva100_DataPreparation.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva100__DataPreparation_8py.html:2887,interface,interface,2887,doc/master/tmva100__DataPreparation_8py.html,https://root.cern,https://root.cern/doc/master/tmva100__DataPreparation_8py.html,1,['interface'],['interface']
Integrability,"number of elements in collection. private:. THashTable*fTableHash table used to store TPair's. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMap(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); TMap ctor. See THashTable for a description of the arguments. ~TMap(); TMap dtor. Objects are not deleted unless the TMap is the; owner (set via SetOwner()). void Add(TObject* obj); This function may not be used (but we need to provide it since it is; a pure virtual in TCollection). Use Add(key,value) instead. void Add(TObject* key, TObject* value); Add a (key,value) pair to the map. Float_t AverageCollisions() const; Return the ratio of entries vs occupied slots. Int_t Capacity() const; Return number of slots in the hashtable. Use GetSize() to get the; number of objects stored in the TMap. void Clear(Option_t* option = """"); Remove all (key,value) pairs from the map. The keys/values are; deleted depending on the state of key-ownership (SetOwner()) and; value-ownership (SetOwnerValue()). To delete these objects regardless of the ownership state use:; - Delete() to delete only keys;; - DeleteValues() to delete only values;; - DeleteAll() to delete both keys and values. Int_t Collisions(const char* keyname) const; Returns the number of collisions for a key with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* key) const; Returns the number of collisions for a key (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all (key,value) pairs from the map AND delete the keys; when they are allocated on the heap. void DeleteValues(); Remove all (key,value) pairs from the map AND delete the values; when they are allocated on the heap. void DeleteAll(); Remove all (key,value) pairs from the map AND delete the keys AND; values when they are allocated on the heap. Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMap.html:9050,depend,depending,9050,root/html528/TMap.html,https://root.cern,https://root.cern/root/html528/TMap.html,4,['depend'],['depending']
Integrability,"number of function evaluation required for integration; Bool_t_useIntegrandLimitsUse limits in function binding?; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t_xmaxValue of limits; Double_t_xminValue of limits. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooImproperIntegrator1D, its parameters and capabilities with RooNumIntFactory. RooImproperIntegrator1D(); Default constructor. RooImproperIntegrator1D(const RooAbsFunc& function); Constructor with function binding. The integration range is taken from the; definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooImproperIntegrator1D.html:9051,integrat,integration,9051,root/html602/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooImproperIntegrator1D.html,2,['integrat'],['integration']
Integrability,number of iterations when running a MC integration algorithm If not set use default algorithmic values In case of ToyMC sampling of the nuisance the value is 100 In case of using the GSL MCintegrations types the default value is defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls() ; Definition at line 133 of file BayesianCalculator.h. ◆ SetParameters(). virtual void RooStats::BayesianCalculator::SetParameters ; (; const RooArgSet & ; set). inlinevirtual . specify the parameters of interest in the interval ; Definition at line 82 of file BayesianCalculator.h. ◆ SetPriorPdf(). virtual void RooStats::BayesianCalculator::SetPriorPdf ; (; RooAbsPdf & ; pdf). inlinevirtual . Set only the Prior Pdf. ; Definition at line 88 of file BayesianCalculator.h. ◆ SetScanOfPosterior(). void RooStats::BayesianCalculator::SetScanOfPosterior ; (; int ; nbin = 100). inline . use directly the approximate posterior function obtained by binning it in nbins by default the cdf is used by integrating the posterior if a value of nbin <= 0 the cdf function will be used ; Definition at line 126 of file BayesianCalculator.h. ◆ SetShortestInterval(). void RooStats::BayesianCalculator::SetShortestInterval ; (; ). inline . set the Bayesian calculator to compute the shortest interval (default is central interval) to switch off SetLeftSideTailFraction to the right value ; Definition at line 118 of file BayesianCalculator.h. ◆ SetTestSize(). void RooStats::BayesianCalculator::SetTestSize ; (; double ; size). inlineoverridevirtual . set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval) ; Implements RooStats::IntervalCalculator.; Definition at line 99 of file BayesianCalculator.h. ◆ Size(). double RooStats::BayesianCalculator::Size ; (; ); const. inlineoverridevirtual . Get the size of the test (eg. rate of Type I error) ; Implements RooStats::IntervalCalculator.; Definition at line 106 of file BayesianCalculator.h. ◆ Streamer(). void RooStats::BayesianCalc,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:34229,integrat,integrating,34229,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integrating']
Integrability,"number of specified fit bins 'get/setBins()'.; # Category dimensions of binned datasets get one bin per defined category; # state; x.setBins(10); y.setBins(10); dh = ROOT.RooDataHist(""dh"", ""binned version of d"", {x, y}, d); dh.Print(""v""); ; yframe = y.frame(Bins=10, Title=""Operations on binned datasets""); dh.plotOn(yframe) # plot projection of 2D binned data on y; ; # Examine the statistics of a binned dataset; print("">> number of bins in dh : "", dh.numEntries()); print("">> sum of weights in dh : "", dh.sum(False)); # accounts for bin volume; print("">> integral over histogram: "", dh.sum(True)); ; # Locate a bin from a set of coordinates and retrieve its properties; x.setVal(0.3); y.setVal(20.5); print("">> retrieving the properties of the bin enclosing coordinate (x,y) = (0.3,20.5) bin center:""); # load bin center coordinates in internal buffer; dh.get({x, y}).Print(""v""); print("" weight = "", dh.weight()) # return weight of last loaded coordinates; ; # Reduce the 2-dimensional binned dataset to a 1-dimensional binned dataset; #; # All reduce() methods are interfaced in RooAbsData. All reduction techniques; # demonstrated on unbinned datasets can be applied to binned datasets as; # well.; print("">> Creating 1-dimensional projection on y of dh for bins with x>0""); dh2 = dh.reduce({y}, ""x>0""); dh2.Print(""v""); ; # Add dh2 to yframe and redraw; dh2.plotOn(yframe, LineColor=""r"", MarkerColor=""r""); ; # Saving and loading from file; # -------------------------------------------------------; ; # Datasets can be persisted with ROOT I/O; print(""\n >> Persisting d via ROOT I/O""); f = ROOT.TFile(""rf402_datahandling.root"", ""RECREATE""); d.Write(); f.ls(); ; # To read back in future session:; # > ROOT.TFile f(""rf402_datahandling.root""); # > d = (ROOT.RooDataSet*) f.FindObject(""d""); ; c = ROOT.TCanvas(""rf402_datahandling"", ""rf402_datahandling"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); yframe.GetYaxis().SetTitleOffset(1.4); yframe.Draw(); ; c.SaveAs(""rf402_datahandling.png""); typeOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8py.html:4446,interface,interfaced,4446,doc/master/rf402__datahandling_8py.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8py.html,1,['interface'],['interfaced']
Integrability,"number; TStringfOrdinalslave ordinal number; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster ; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:19387,depend,dependent,19387,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,3,['depend'],['dependent']
Integrability,"numerical derivative of a function. More...;  ; class  Determinant;  Detrminant for a general squared matrix Function to compute the determinant from a square matrix ( \( \det(A)\)) of dimension idim and order n. More...;  ; class  DisplacementVector2D;  Class describing a generic displacement vector in 2 dimensions. More...;  ; class  DisplacementVector3D;  Class describing a generic displacement vector in 3 dimensions. More...;  ; class  DistSampler;  Interface class for generic sampling of a distribution, i.e. More...;  ; class  DistSamplerOptions;  DistSampler options class. More...;  ; class  DivOp;  Division (element-wise) Operation Class. More...;  ; class  EulerAngles;  EulerAngles class describing rotation as three angles (Euler Angles). More...;  ; struct  EvaluatorOneDim;  ; struct  EvaluatorOneDim< const ROOT::Math::IParamMultiFunction & >;  ; class  Expr;  ; class  Fabs;  Unary abs Operation Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:6730,interface,interfaces,6730,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['interface'],['interfaces']
Integrability,"nums(nsTClassEntry);; 1747 } else {; 1748 // namespaces can have enums added to them; 1749 listOfEnums = nsTClassEntry->fEnums = new TListOfEnumsWithLock(nsTClassEntry);; 1750 }; 1751 }; 1752 if (listOfEnums && !listOfEnums->THashList::FindObject(enumName)) {; 1753 ((TEnum *)selEnum)->SetClass(nsTClassEntry);; 1754 listOfEnums->Add(selEnum);; 1755 }; 1756 }; 1757 }; 1758 enums->Clear();; 1759 delete enums;; 1760 }; 1761 ; 1762 pcmFile.GetObject(""__ProtoClasses"", protoClasses);; 1763 ; 1764 if (protoClasses) {; 1765 for (auto obj : *protoClasses) {; 1766 TProtoClass *proto = (TProtoClass *)obj;; 1767 TClassTable::Add(proto);; 1768 }; 1769 // Now that all TClass-es know how to set them up we can update; 1770 // existing TClasses, which might cause the creation of e.g. TBaseClass; 1771 // objects which in turn requires the creation of TClasses, that could; 1772 // come from the PCH, but maybe later in the loop. Instead of resolving; 1773 // a dependency graph the addition to the TClassTable above allows us; 1774 // to create these dependent TClasses as needed below.; 1775 for (auto proto : *protoClasses) {; 1776 if (TClass *existingCl = (TClass *)gROOT->GetListOfClasses()->FindObject(proto->GetName())) {; 1777 // We have an existing TClass object. It might be emulated; 1778 // or interpreted; we now have more information available.; 1779 // Make that available.; 1780 if (existingCl->GetState() != TClass::kHasTClassInit) {; 1781 DictFuncPtr_t dict = gClassTable->GetDict(proto->GetName());; 1782 if (!dict) {; 1783 ::Error(""TCling::LoadPCM"", ""Inconsistent TClassTable for %s"", proto->GetName());; 1784 } else {; 1785 // This will replace the existing TClass.; 1786 TClass *ncl = (*dict)();; 1787 if (ncl); 1788 ncl->PostLoadCheck();; 1789 }; 1790 }; 1791 }; 1792 }; 1793 ; 1794 protoClasses->Clear(); // Ownership was transfered to TClassTable.; 1795 delete protoClasses;; 1796 }; 1797 ; 1798 TObjArray *dataTypes;; 1799 pcmFile.GetObject(""__Typedefs"", dataTypes);; 1800 if (dataT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:66642,depend,dependency,66642,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['depend'],"['dependency', 'dependent']"
Integrability,"nused). ;  ; bool isFirst () const;  Returns true iff this is the first element of the linked list. ;  ; bool isLast () const;  Returns true iff this is the last element of the linked list. ;  ; Option * last ();  Returns a pointer to the last element of the linked list. ;  ; Option * next ();  Returns a pointer to the next element of the linked list or NULL if called on last(). ;  ; Option * nextwrap ();  Returns a pointer to the next element of the linked list with wrap-around from last() to first(). ;  ;  operator const Option * () const;  Casts from Option to const Option* but only if this Option is valid. ;  ;  operator Option * ();  Casts from Option to Option* but only if this Option is valid. ;  ; Option & operator= (const Option &orig);  Makes *this a copy of orig except for the linked list pointers. ;  ; Option * prev ();  Returns a pointer to the previous element of the linked list or NULL if called on first(). ;  ; Option * prevwrap ();  Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ;  ; int type () const;  Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ;  . Public Attributes; const char * arg;  Pointer to this Option's argument (if any). ;  ; const Descriptor * desc;  Pointer to this Option's Descriptor. ;  ; const char * name;  The name of the option as used on the command line. ;  ; int namelen;  The length of the option name. ;  . Private Member Functions; void init (const Descriptor *desc_, const char *name_, const char *arg_);  . Static Private Member Functions; static bool isTagged (Option *ptr);  ; static Option * tag (Option *ptr);  ; static Option * untag (Option *ptr);  . Private Attributes; Option * next_;  ; Option * prev_;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/dictgen/res/OptionParser.h>; Constructor & Destructor Documentation. ◆ Option() [1/3]. ROOT::option::Option::Option ; (; ). in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html:3618,wrap,wrap-around,3618,doc/master/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html,1,['wrap'],['wrap-around']
Integrability,"nused). ;  ; bool isFirst () const;  Returns true iff this is the first element of the linked list. ;  ; bool isLast () const;  Returns true iff this is the last element of the linked list. ;  ; Option * last ();  Returns a pointer to the last element of the linked list. ;  ; Option * next ();  Returns a pointer to the next element of the linked list or NULL if called on last(). ;  ; Option * nextwrap ();  Returns a pointer to the next element of the linked list with wrap-around from last() to first(). ;  ;  operator const Option * () const;  Casts from Option to const Option* but only if this Option is valid. ;  ;  operator Option * ();  Casts from Option to Option* but only if this Option is valid. ;  ; Option & operator= (const Option &orig);  Makes *this a copy of orig except for the linked list pointers. ;  ; Option * prev ();  Returns a pointer to the previous element of the linked list or NULL if called on first(). ;  ; Option * prevwrap ();  Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ;  ; int type () const;  Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ;  . Public Attributes; const char * arg;  Pointer to this Option's argument (if any). ;  ; const Descriptor * desc;  Pointer to this Option's Descriptor. ;  ; const char * name;  The name of the option as used on the command line. ;  ; int namelen;  The length of the option name. ;  . Private Member Functions; void init (const Descriptor *desc_, const char *name_, const char *arg_);  . Static Private Member Functions; static bool isTagged (Option *ptr);  ; static Option * tag (Option *ptr);  ; static Option * untag (Option *ptr);  . Private Attributes; Option * next_;  ; Option * prev_;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/dictgen/res/OptionParser.h>; Constructor & Destructor Documentation. ◆ Option() [1/3]. ROOT::option::Option::Option ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:3617,wrap,wrap-around,3617,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,1,['wrap'],['wrap-around']
Integrability,"nux):; ./configure linuxdeb2 --with-thread=/usr/lib/libpthread.so; gmake depend; gmake; This configures and builds ROOT using /usr/lib/libpthread.so as the Pthread library, and defines R__THREAD.; This enables the thread specific treatment of gPad, and creates $ROOTSYS/lib/libThread.so.; Note: The parameter linuxdeb2 has to be replaced with the appropriate ROOT keyword for your platform.; 23.2.2 Classes; TThread class implements threads . The platform dependent implementation is in the TThreadImp class and its descendant classes (e.g. TPosixThread ).; TMutex class implements mutex locks. A mutex is a mutually exclusive lock. The platform dependent implementation is in the TMutexImp class and its descendant classes (e.g. TPosixMutex); TCondition class implements a condition variable. Use a condition variable to signal threads. The platform dependent implementation is in the TConditionImp and TPosixCondition classes .; TSemaphore class implements a counting semaphore. Use a semaphore to synchronize threads. The platform dependent implementation is in the TMutexImp and TConditionImp classes.; 23.2.3 TThread for Pedestrians; To run a thread in ROOT, follow these steps:. Initialization. Add these lines to your rootlogon.C:; {; ...; // The next line may be unnecessary on some platforms; gSystem->Load(""/usr/lib/libpthread.so"");; gSystem->Load(""$ROOTSYS/lib/libThread.so"");; ...; }; This loads the library with the TThread class and the pthread specific implementation file for Posix threads. Coding. Define a function (e.g. void* UserFun(void* UserArgs)) that should run as a thread. The code for the examples is at the web site of the authors (Jörn Adamczewski, Marc Hemberger). After downloading the code from this site, you can follow the example below:; http://www-linux.gsi.de/~go4/HOWTOthreads/howtothreadsbody.html. Loading. Start an interactive ROOT session. Load the shared library:; root[] gSystem->Load(""mhs3.so""); // or; root[] gSystem->Load(""CalcPiThread.so"");. Creating. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1105019,synchroniz,synchronize,1105019,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['synchroniz'],['synchronize']
Integrability,"nversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const char* classname, UInt_t checksum ); Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const TClass* cl, UInt_t checksum ); Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFileName; }. Short_t GetImplFileLine() const; { return fImplFileLine; }. UInt_t GetInstan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:41785,wrap,wrapper,41785,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,1,['wrap'],['wrapper']
Integrability,"nversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:46976,wrap,wrapper,46976,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,1,['wrap'],['wrapper']
Integrability,"nvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tRooAbsArg::isCloneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tisValid() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); const RooArgSet&numIntCatVars()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:15702,message,message,15702,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,3,['message'],['message']
Integrability,"nverterResult ; (; ). override . destructor ; Definition at line 178 of file HypoTestInverterResult.cxx. Member Function Documentation. ◆ Add() [1/2]. bool HypoTestInverterResult::Add ; (; const HypoTestInverterResult & ; otherResult). merge with the content of another HypoTestInverterResult object ; Merge this HypoTestInverterResult with another HypoTestInverterResult passed as argument The merge is done by combining the HypoTestResult when the same point value exist in both results.; If results exist at different points these are added in the new result NOTE: Merging of the expected p-values obtained with pseudo-data. When expected p-values exist in the result (i.e. when rebuild option is used when getting the expected limit distribution in the HYpoTestInverter) then the expected p-values are also merged. This is equivalent at merging the pseudo-data. However there can be an inconsistency if the expected p-values have been obtained with different toys. In this case the merge is done but a warning message is printed. ; Definition at line 318 of file HypoTestInverterResult.cxx. ◆ Add() [2/2]. bool HypoTestInverterResult::Add ; (; double ; x, . const HypoTestResult & ; result . ). add the result of a single point (an HypoTestRsult) ; Add a single point result (an HypoTestResult) ; Definition at line 407 of file HypoTestInverterResult.cxx. ◆ ArraySize(). int RooStats::HypoTestInverterResult::ArraySize ; (; ); const. inline . number of entries in the results array ; Definition at line 94 of file HypoTestInverterResult.h. ◆ CalculateEstimatedError(). double HypoTestInverterResult::CalculateEstimatedError ; (; double ; target, . bool ; lower = true, . double ; xmin = 1, . double ; xmax = 0.0 . ). private . Return an error estimate on the upper(lower) limit. ; This is the error on either CLs or CLsplusb divided by an estimate of the slope at this point. ; Definition at line 972 of file HypoTestInverterResult.cxx. ◆ Class(). static TClass * RooStats::HypoTestInverterResult:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:23082,message,message,23082,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['message'],['message']
Integrability,"nvolved with this resolution model; Int_tRooResolutionModel::_basisCodeIdentifier code for selected basis function; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static RooFormulaVar*RooResolutionMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:38252,integrat,integration,38252,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,4,['integrat'],['integration']
Integrability,"ny client; is deleted before a server is deleted. RooAbsCollection* snapshot(Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t addServerClonesToList(const RooAbsArg& var); Add clones of servers of given argument to list. RooAbsCollection & operator=(const RooAbsCollection& other); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignValueOnly(const RooAbsCollection& other); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignFast(const RooAbsCollection& other); Functional equivalent of operator=() but assumes this and other collection; have same layout. Also no attributes are copied. Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE); Add the specified argument to list. Returns kTRUE if successful, or; else kFALSE if a variable of the same name is already in the list.; This method can only be called on a list that is flagged as owning; all of its c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCollection.html:10681,depend,dependents,10681,root/html528/RooAbsCollection.html,https://root.cern,https://root.cern/root/html528/RooAbsCollection.html,1,['depend'],['dependents']
Integrability,"ny client; is deleted before a server is deleted. RooAbsCollection* snapshot(Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t addServerClonesToList(const RooAbsArg& var); Add clones of servers of given argument to list. RooAbsCollection & operator=(const RooAbsCollection& other); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignValueOnly(const RooAbsCollection& other); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignFast(const RooAbsCollection& other); Functional equivalent of operator=() but assumes this and other collection; have same layout. Also no attributes are copied. Bool_t addOwned(RooAbsArg& var, Bool_t silent); Add the specified argument to list. Returns kTRUE if successful, or; else kFALSE if a variable of the same name is already in the list.; This method can only be called on a list that is flagged as owning; all of its contents, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCollection.html:10695,depend,dependents,10695,root/html526/RooAbsCollection.html,https://root.cern,https://root.cern/root/html526/RooAbsCollection.html,1,['depend'],['dependents']
Integrability,"ny client; is deleted before a server is deleted. RooAbsCollection* snapshot(Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t addServerClonesToList(const RooAbsArg& var); Add clones of servers of given argument to list. RooAbsCollection & operator=(const RooAbsCollection& other); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignFast(const RooAbsCollection& other); Functional equivalent of operator=() but assumes this and other collection; have same layout. Also no attributes are copied. Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE); Add the specified argument to list. Returns kTRUE if successful, or; else kFALSE if a variable of the same name is already in the list.; This method can only be called on a list that is flagge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCollection.html:10917,depend,dependents,10917,root/html530/RooAbsCollection.html,https://root.cern,https://root.cern/root/html530/RooAbsCollection.html,1,['depend'],['dependents']
Integrability,"ny client; is deleted before a server is deleted. RooAbsCollection* snapshot(Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t addServerClonesToList(const RooAbsArg& var); Add clones of servers of given argument to list. RooAbsCollection & operator=(const RooAbsCollection& other); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); The assignment operator sets the value of any argument in our set; that also appears in the other set. void assignFast(const RooAbsCollection& other, Bool_t setValDirty = kTRUE); Functional equivalent of operator=() but assumes this and other collection; have same layout. Also no attributes are copied. Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE); Add the specified argument to list. Returns kTRUE if successful, or; else kFALSE if a variable of the same name is already in the list.; This method can only be called on a list ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCollection.html:11282,depend,dependents,11282,root/html532/RooAbsCollection.html,https://root.cern,https://root.cern/root/html532/RooAbsCollection.html,4,['depend'],['dependents']
Integrability,"ny object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DoRedraw () override;  Redraw vertical slider widget. ;  ;  Protected Member Functions inherited from TGDoubleSlider; void ChangeCursor (Event_t *event);  Change the cursor shape depending on the slider area. ;  ; TString GetSString () const;  returns scaling type as string ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleVSlider.html:24880,depend,depending,24880,doc/master/classTGDoubleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html,1,['depend'],['depending']
Integrability,"ny such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); RooStats::CombinedCalculatorCombinedCalculator(); RooStats::CombinedCalculatorCombinedCalculator(const RooStats::CombinedCalculator&); RooStats::CombinedCalculatorCombinedCalculator(RooAbsData& data, const RooStats::ModelConfig& model, Double_t size = 0.050000000000000003); RooStats::CombinedCalculatorCombinedCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.050000000000000003, const RooArgSet* nullParams = 0, const RooArgSet* altParams = 0, const RooArgSet* nuisParams = 0); virtual Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__CombinedCalculator.html:1538,integrat,integration,1538,root/html602/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__CombinedCalculator.html,2,['integrat'],['integration']
Integrability,"ny such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::HypoTestResult*GetHypoTest() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::CombinedCalculator&operator=(const RooStats::CombinedCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig&); virtual voidSetAlternateParameters(const RooArgSet& set); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetConditionalObservables(const RooArgSet& set); virtual voidSetCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__CombinedCalculator.html:1538,integrat,integration,1538,root/html534/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__CombinedCalculator.html,1,['integrat'],['integration']
Integrability,"ny such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::HypoTestResult*GetHypoTest() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::CombinedCalculator&operator=(const RooStats::CombinedCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig&); virtual voidSetAlternateParameters(const RooArgSet& set); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__CombinedCalculator.html:1536,integrat,integration,1536,root/html526/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__CombinedCalculator.html,4,['integrat'],['integration']
Integrability,"ny user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:38913,interface,interfaces,38913,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['interface'],['interfaces']
Integrability,"nymous)TObject::kZombie. protected:. RooIntegrator1D**_arrayArray of segment integrators; RooNumIntConfig_config; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_nsegNumber of segments; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range; Bool_t_useIntegrandLimits; Bool_t_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t_xmax; Double_t_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Constructor. coverity[UNINIT_CTOR]. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. Bool_t initialize(); One-time integrator initialization. ~RooSegmentedIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSegmentedIntegrator1D.html:7773,integrat,integration,7773,root/html602/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooSegmentedIntegrator1D.html,2,['integrat'],['integration']
Integrability,"n|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClass.html:44424,wrap,wrapper,44424,root/html528/TClass.html,https://root.cern,https://root.cern/root/html528/TClass.html,1,['wrap'],['wrapper']
Integrability,"o 'env' the value of string RC env variable 'rcenv' on node 'ord'. ;  ; Float_t GetRealTime () const;  ; Int_t GetRemoteProtocol () const;  ; ERunStatus GetRunStatus () const;  ; Int_t GetSeqNum () const;  ; Int_t GetSessionID () const;  ; const char * GetSessionTag () const;  ; void GetStatistics (Bool_t verbose=kFALSE);  Get statistics about CPU time, real time and bytes read. ;  ; Int_t GetStatus () const;  ; const char * GetUrl ();  ; const char * GetUser () const;  ; const char * GetWorkDir () const;  ; void GoAsynchronous ();  Send GOASYNC message to the master. ;  ; Bool_t IsDataReady (Long64_t &totalbytes, Long64_t &bytesready);  See if the data is ready to be analyzed. ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsIdle () const;  ; Bool_t IsLite () const;  ; Bool_t IsMaster () const;  ; Bool_t IsParallel () const;  ; Bool_t IsProofd () const;  ; Bool_t IsTty () const;  ; Bool_t IsValid () const;  ; Bool_t IsWaiting () const;  ; void LogMessage (const char *msg, Bool_t all);  Log a message into the appropriate window by emitting a signal. ;  ; Int_t Ping ();  Ping PROOF. Returns 1 if master server responded. ;  ; void Progress (Long64_t total, Long64_t processed);  Get query progress information. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  Get query progress information. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  Get query progress information. ;  ; void PutLog (TQueryResult *qr);  Display log of query pq into the log window frame. ;  ; void QueryResultReady (const char *ref);  Notify availability of a query result. ;  ; Int_t Remove (const char *queryref, Bool_t all=kFALSE);  Send remove request for the query spe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:14464,message,message,14464,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['message'],['message']
Integrability,"o (no integration) is implemented. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 152 of file RooBCPGenDecay.cxx. ◆ coefficient(). double RooBCPGenDecay::coefficient ; (; Int_t ; basisIndex); const. overridevirtual . B0 : _tag = +1 B0bar : _tag = -1. ; Implements RooAbsAnaConvPdf.; Definition at line 118 of file RooBCPGenDecay.cxx. ◆ DeclFileName(). static const char * RooBCPGenDecay::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file RooBCPGenDecay.h. ◆ generateEvent(). void RooBCPGenDecay::generateEvent ; (; Int_t ; code). overridevirtual . Generate mix-state dependent. ; Reimplemented from RooAbsPdf.; Definition at line 206 of file RooBCPGenDecay.cxx. ◆ getCoefAnalyticalIntegral(). Int_t RooBCPGenDecay::getCoefAnalyticalIntegral ; (; Int_t ; coef, . RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default implementation of function advertising integration capabilities. ; The interface is similar to that of getAnalyticalIntegral except that an integer code is added that designates the coefficient number for which the integration capabilities are requested; This default implementation advertises that no internal integrals are supported. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 143 of file RooBCPGenDecay.cxx. ◆ getGenerator(). Int_t RooBCPGenDecay::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPGenDecay.html:80907,integrat,integration,80907,doc/master/classRooBCPGenDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPGenDecay.html,1,['integrat'],['integration']
Integrability,"o */, const char * /* method */, const char * /* proto */, Longptr_t * /* Offset */, ROOT::EFunctionMatchMode /* mode */ = ROOT::kConversionMatch) const {}; 392 virtual void CallFunc_SetFuncProto(CallFunc_t * /* func */, ClassInfo_t * /* info */, const char * /* method */, const char * /* proto */, bool /* objectIsConst */, Longptr_t * /* Offset */, ROOT::EFunctionMatchMode /* mode */ = ROOT::kConversionMatch) const {}; 393 virtual void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const std::vector<TypeInfo_t*> &proto, Longptr_t* Offset, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch) const = 0;; 394 virtual void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const std::vector<TypeInfo_t*> &proto, bool objectIsConst, Longptr_t* Offset, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch) const = 0;; 395 ; 396 virtual std::string CallFunc_GetWrapperCode(CallFunc_t *func) const = 0;; 397 ; 398 // ClassInfo interface; 399 virtual Bool_t ClassInfo_Contains(ClassInfo_t *info, DeclId_t decl) const = 0;; 400 virtual Long_t ClassInfo_ClassProperty(ClassInfo_t * /* info */) const {return 0;}; 401 virtual void ClassInfo_Delete(ClassInfo_t * /* info */) const {}; 402 virtual void ClassInfo_Delete(ClassInfo_t * /* info */, void * /* arena */) const {}; 403 virtual void ClassInfo_DeleteArray(ClassInfo_t * /* info */, void * /* arena */, bool /* dtorOnly */) const {}; 404 virtual void ClassInfo_Destruct(ClassInfo_t * /* info */, void * /* arena */) const {}; 405 virtual ClassInfo_t *ClassInfo_Factory(Bool_t /*all*/ = kTRUE) const = 0;; 406 virtual ClassInfo_t *ClassInfo_Factory(ClassInfo_t * /* cl */) const = 0;; 407 virtual ClassInfo_t *ClassInfo_Factory(const char * /* name */) const = 0;; 408 virtual ClassInfo_t *ClassInfo_Factory(DeclId_t declid) const = 0;; 409 virtual Longptr_t ClassInfo_GetBaseOffset(ClassInfo_t* /* fromDerived */,; 410 ClassInfo_t* /* toBase */, void* /* address */ = nullptr, boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:20895,interface,interface,20895,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,1,['interface'],['interface']
Integrability,"o Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1105,integrat,integration,1105,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integration']
Integrability,"o TPad::ExecuteEvent. ; Reimplemented from TObject.; Reimplemented in TSliderBox, TDiamond, TFrame, TPave, TWbox, and TPaletteAxis.; Definition at line 232 of file TBox.cxx. ◆ GetBBox(). Rectangle_t TBox::GetBBox ; (; ). overridevirtual . Return the ""bounding Box"" of the Box. ; Implements TAttBBox2D.; Definition at line 780 of file TBox.cxx. ◆ GetBBoxCenter(). TPoint TBox::GetBBoxCenter ; (; ). overridevirtual . Return the center of the Box as TPoint in pixels. ; Implements TAttBBox2D.; Definition at line 805 of file TBox.cxx. ◆ GetX1(). Double_t TBox::GetX1 ; (; ); const. inline . Definition at line 51 of file TBox.h. ◆ GetX2(). Double_t TBox::GetX2 ; (; ); const. inline . Definition at line 52 of file TBox.h. ◆ GetY1(). Double_t TBox::GetY1 ; (; ); const. inline . Definition at line 53 of file TBox.h. ◆ GetY2(). Double_t TBox::GetY2 ; (; ); const. inline . Definition at line 54 of file TBox.h. ◆ HideToolTip(). void TBox::HideToolTip ; (; Int_t ; event). virtual . Hide tool tip depending on the event type. ; Typically tool tips are hidden when event is not a kMouseEnter and not a kMouseMotion event. ; Definition at line 642 of file TBox.cxx. ◆ IsA(). TClass * TBox::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TPaveClass, TSliderBox, TDiamond, TFrame, TLegend, TPave, TPaveLabel, TPaveStats, TPavesText, TPaveText, TWbox, and TPaletteAxis.; Definition at line 77 of file TBox.h. ◆ IsBeingResized(). Bool_t TBox::IsBeingResized ; (; ); const. inline . Definition at line 50 of file TBox.h. ◆ IsInside(). Int_t TBox::IsInside ; (; Double_t ; x, . Double_t ; y . ); const. virtual . Function which returns 1 if point x,y lies inside the box, 0 otherwise. ; Reimplemented in TDiamond.; Definition at line 651 of file TBox.cxx. ◆ ls(). void TBox::ls ; (; Option_t * ; option = """"); const. overridevirtual . List this box with its attributes. ; Reimplemented from TObject.; Reimplemented in TPave.; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBox.html:20728,depend,depending,20728,doc/master/classTBox.html,https://root.cern,https://root.cern/doc/master/classTBox.html,1,['depend'],['depending']
Integrability,"o Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:53345,wrap,wrapper,53345,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['wrap'],['wrapper']
Integrability,"o \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1919,integrat,integration,1919,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"o analDeps. Bool_t matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Utility function for use in getAnalyticalIntegral(). If the; contents of proxies a,b,c,d occur in set 'allDeps' then the arguments; held in a,b,c,d are copied from allDeps to analDeps. Bool_t matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Utility function for use in getAnalyticalIntegral(). If the; contents of 'refset' occur in set 'allDeps' then the arguments; held in 'refset' are copied from allDeps to analDeps. Bool_t matchArgsByName(const RooArgSet& allArgs, RooArgSet& matchedArgs, const TList& nameList) const; Check if allArgs contains matching elements for each name in nameList. If it does,; add the corresponding args from allArgs to matchedArgs and return kTRUE. Otherwise; return kFALSE and do not change matchedArgs. RooNumIntConfig* defaultIntegratorConfig(); Returns the default numeric integration configuration for all RooAbsReals. RooNumIntConfig* specialIntegratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumIntConfig* specialIntegratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumIntConfig* getIntegratorConfig() const; Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:59393,integrat,integration,59393,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['integrat'],['integration']
Integrability,"o and; 246 following the C convention for the order in accessing; 247 the matrix elements.; 248 Same convention for general and symmetric matrices.; 249 */; 250 T apply(unsigned int i) const;; 251 ; 252 /// return read-only pointer to internal array; 253 const T* Array() const;; 254 /// return pointer to internal array; 255 T* Array();; 256 ; 257 /** @name --- STL-like interface ---; 258 The iterators access the matrix element in the order how they are; 259 stored in memory. The C (row-major) convention is used, and in the; 260 case of symmetric matrices the iterator spans only the lower diagonal; 261 block. For example for a symmetric 3x3 matrices the order of the 6; 262 elements \f${a_0,...a_5}\f$ is:; 263 \f[; 264 M = \left( \begin{array}{ccc}; 265 a_0 & a_1 & a_3 \\; 266 a_1 & a_2 & a_4 \\; 267 a_3 & a_4 & a_5 \end{array} \right); 268 \f]; 269 */; 270 ; 271 /** STL iterator interface. */; 272 iterator begin();; 273 ; 274 /** STL iterator interface. */; 275 iterator end();; 276 ; 277 /** STL const_iterator interface. */; 278 const_iterator begin() const;; 279 ; 280 /** STL const_iterator interface. */; 281 const_iterator end() const;; 282 ; 283 /**; 284 Set matrix elements with STL iterator interface. The data will be copied into the matrix; 285 \param begin start iterator position; 286 \param end end iterator position; 287 \param triang if true only the triangular lower/upper part of the matrix is filled from the iterators; 288 \param lower if true the lower triangular part is filled; 289 ; 290 Size of the matrix must match size of the iterators, if triang is false, otherwise the size of the; 291 triangular block. In the case of symmetric matrices triang is considered always to be true; 292 (what-ever the user specifies) and the size of the iterators must be equal to the size of the; 293 triangular block, which is the number of independent elements of a symmetric matrix: N*(N+1)/2; 294 ; 295 */; 296 template<class InputIterator>; 297 void SetElements(InputIterato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SMatrix_8h_source.html:8863,interface,interface,8863,doc/master/SMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/SMatrix_8h_source.html,1,['interface'],['interface']
Integrability,"o any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1030 ; 1031There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1032not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variationTags=[""down"", ""up""],; 1045 variationName=""ptAndEta""); 1046~~~; 1047 ; 1048The expression returns an RVec of two RVecs: each inner vector contains the varied values for one col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:60745,depend,depend,60745,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['depend'],['depend']
Integrability,"o any of the results or varied results:; 1056hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1057hx[""pt:down""].Draw(""SAME"");; 1058hx[""pt:up""].Draw(""SAME"");; 1059~~~; 1060 ; 1061A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1062as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1063this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1064to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1065""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1066 ; 1067Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1068the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1069calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1070 ; 1071There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1072not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1073complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1074_nominal_ value in input.; 1075 ; 1076#### Varying multiple columns in lockstep; 1077 ; 1078In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1079""in lockstep"":; 1080 ; 1081~~~{.python}; 1082df.Vary([""pt"", ""eta""],; 1083 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1084 variationTags=[""down"", ""up""],; 1085 variationName=""ptAndEta""); 1086~~~; 1087 ; 1088The expression returns an RVec of two RVecs: each inner vector contains the varied values for one col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:62425,depend,depend,62425,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['depend'],['depend']
Integrability,"o available!"", GetName(), fClassVersion, arena);; 5370 return nullptr;; 5371 }; 5372 ; 5373 {; 5374 TClass__GetCallingNewRAII callingNew(defConstructor);; 5375 p = { sinfo->NewArray(nElements, arena), sinfo };; 5376 }; 5377 ; 5378 // ???BUG???; 5379 // Allow TObject's to be registered again.; 5380 if(statsave) {; 5381 SetObjectStat(statsave);; 5382 }; 5383 ; 5384 if (fStreamerType & kEmulatedStreamer) {; 5385 // We always register emulated objects, we need to always; 5386 // use the streamer info to destroy them.; 5387 }; 5388 ; 5389 return p;; 5390 } else {; 5391 Error(""NewArray with placement"", ""This cannot happen!"");; 5392 }; 5393 ; 5394 return p;; 5395}; 5396 ; 5397////////////////////////////////////////////////////////////////////////////////; 5398/// Explicitly call destructor for object.; 5399 ; 5400void TClass::Destructor(void *obj, Bool_t dtorOnly); 5401{; 5402 // Do nothing if passed a null pointer.; 5403 if (obj == nullptr) return;; 5404 ; 5405 void* p = obj;; 5406 ; 5407 if (dtorOnly && fDestructor) {; 5408 // We have the destructor wrapper, use it.; 5409 fDestructor(p);; 5410 } else if ((!dtorOnly) && fDelete) {; 5411 // We have the delete wrapper, use it.; 5412 fDelete(p);; 5413 } else if (HasInterpreterInfo()) {; 5414 // We have the dictionary but do not have the; 5415 // destruct/delete wrapper, so the dictionary was; 5416 // not generated by rootcint (it could have been; 5417 // created by cint or by some external mechanism).; 5418 // Let's have the interpreter call the destructor,; 5419 // either the code will be in a loaded library,; 5420 // or it will be interpreted, otherwise we fail; 5421 // because there is no destructor code at all.; 5422 if (dtorOnly) {; 5423 gCling->ClassInfo_Destruct(fClassInfo,p);; 5424 } else {; 5425 gCling->ClassInfo_Delete(fClassInfo,p);; 5426 }; 5427 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5428 // There is no dictionary at all, so this is an emulated; 5429 // class; however we do have the services of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:206592,wrap,wrapper,206592,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,"o available!"", GetName(), fClassVersion, arena);; 5437 return nullptr;; 5438 }; 5439 ; 5440 {; 5441 TClass__GetCallingNewRAII callingNew(defConstructor);; 5442 p = { sinfo->NewArray(nElements, arena), sinfo };; 5443 }; 5444 ; 5445 // ???BUG???; 5446 // Allow TObject's to be registered again.; 5447 if(statsave) {; 5448 SetObjectStat(statsave);; 5449 }; 5450 ; 5451 if (fStreamerType & kEmulatedStreamer) {; 5452 // We always register emulated objects, we need to always; 5453 // use the streamer info to destroy them.; 5454 }; 5455 ; 5456 return p;; 5457 } else {; 5458 Error(""NewArray with placement"", ""This cannot happen!"");; 5459 }; 5460 ; 5461 return p;; 5462}; 5463 ; 5464////////////////////////////////////////////////////////////////////////////////; 5465/// Explicitly call destructor for object.; 5466 ; 5467void TClass::Destructor(void *obj, Bool_t dtorOnly); 5468{; 5469 // Do nothing if passed a null pointer.; 5470 if (obj == nullptr) return;; 5471 ; 5472 void* p = obj;; 5473 ; 5474 if (dtorOnly && fDestructor) {; 5475 // We have the destructor wrapper, use it.; 5476 fDestructor(p);; 5477 } else if ((!dtorOnly) && fDelete) {; 5478 // We have the delete wrapper, use it.; 5479 fDelete(p);; 5480 } else if (HasInterpreterInfo()) {; 5481 // We have the dictionary but do not have the; 5482 // destruct/delete wrapper, so the dictionary was; 5483 // not generated by rootcint (it could have been; 5484 // created by cint or by some external mechanism).; 5485 // Let's have the interpreter call the destructor,; 5486 // either the code will be in a loaded library,; 5487 // or it will be interpreted, otherwise we fail; 5488 // because there is no destructor code at all.; 5489 if (dtorOnly) {; 5490 gCling->ClassInfo_Destruct(fClassInfo,p);; 5491 } else {; 5492 gCling->ClassInfo_Delete(fClassInfo,p);; 5493 }; 5494 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5495 // There is no dictionary at all, so this is an emulated; 5496 // class; however we do have the services of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:209343,wrap,wrapper,209343,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,"o avoid copying) you need to use; 136 Func& or const Func & as template parameter. The former should be used when the; 137 operator() is not a const method of Func; 138 ; 139 @ingroup GenFunc; 140 ; 141 */; 142template< typename Func = FreeMultiFunctionPtr >; 143class WrappedMultiFunction : public IMultiGenFunction {; 144 ; 145 ; 146 public:; 147 ; 148 /**; 149 construct from the pointer to the object and the member function; 150 */; 151 WrappedMultiFunction( Func f , unsigned int dim = 1) :; 152 fFunc( f ),; 153 fDim( dim); 154 { /* no op */ }; 155 ; 156 // use default copy constructor and assignment operator; 157 ; 158 /// clone (required by the interface); 159 WrappedMultiFunction * Clone() const override {; 160 return new WrappedMultiFunction(fFunc,fDim);; 161 }; 162 ; 163 unsigned int NDim() const override { return fDim; }; 164 ; 165 // virtual ~WrappedFunction() { /**/ }; 166 ; 167private:; 168 ; 169 double DoEval (const double * x) const override {; 170 return fFunc( x );; 171 }; 172 ; 173 ; 174 Func fFunc;; 175 unsigned int fDim;; 176 ; 177 ; 178}; // WrappedMultiFunction; 179 ; 180 ; 181template<typename FuncObj, typename MemFuncPtr >; 182class WrappedMemMultiFunction : public IMultiGenFunction {; 183 ; 184 ; 185 public:; 186 ; 187 /**; 188 construct from the pointer to the object and the member function; 189 */; 190 WrappedMemMultiFunction( FuncObj & obj, MemFuncPtr memFn, unsigned int dim = 1 ) :; 191 fObj(&obj),; 192 fMemFunc( memFn ),; 193 fDim(dim); 194 { /* no op */ }; 195 ; 196 // use default copy constructor and assignment operator; 197 ; 198 /// clone (required by the interface); 199 WrappedMemMultiFunction * Clone() const override {; 200 return new WrappedMemMultiFunction(*fObj,fMemFunc,fDim);; 201 }; 202 ; 203 ; 204 unsigned int NDim() const override { return fDim; }; 205 ; 206private:; 207 ; 208 double DoEval (const double * x) const override {; 209 return ((*fObj).*fMemFunc)( x );; 210 }; 211 ; 212 ; 213 FuncObj * fObj;; 214 MemFuncPtr fMemFunc;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedFunction_8h_source.html:4230,interface,interface,4230,doc/master/WrappedFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedFunction_8h_source.html,2,['interface'],['interface']
Integrability,"o be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.00000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html:2032,rout,routine,2032,root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,2,['rout'],['routine']
Integrability,"o be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html:2032,rout,routine,2032,root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['rout'],['routine']
Integrability,"o c_0_30 = d_0_30.Count();; ; // This is how you pick all entries from 15 onwards; auto d_15_end = d.Range(15, 0);; auto c_15_end = d_15_end.Count();; ; // We can use a stride too, in this case we pick an event every 3 entries; auto d_15_end_3 = d.Range(15, 0, 3);; auto c_15_end_3 = d_15_end_3.Count();; ; // The Range here acts first on the (whole) RDataFrame graph:; // Not only actions (like Count) but also filters and new columns can be added to it.; auto d_0_50 = d.Range(50);; auto c_0_50_odd_b1 = d_0_50.Filter(""1 == b1 % 2"").Count();; ; // An important thing to notice is that the counts of a filter are relative to the; // number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; // the Range will act on the entries passing the filter only.; auto c_0_3_after_even_b1 = d.Filter(""0 == b1 % 2"").Range(0, 3).Count();; ; // Ok, time to wrap up: let's print all counts!; cout << ""Usage of ranges:\n""; << "" - All entries: "" << *c_all << endl; << "" - Entries from 0 to 30: "" << *c_0_30 << endl; << "" - Entries from 15 onwards: "" << *c_15_end << endl; << "" - Entries from 15 onwards in steps of 3: "" << *c_15_end_3 << endl; << "" - Entries from 0 to 50, odd only: "" << *c_0_50_odd_b1 << endl; << "" - First three entries of all even entries: "" << *c_0_3_after_even_b1 << endl;; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df006_rangesDefinition df006_ranges.py:1; ; Usage of ranges:; - All entries: 100; - Entries from 0 to 30: 30; - Entries from 15 onwards: 85; - Entries from 15 onwards in steps of 3: 29; - Entries from 0 to 50, odd only: 25; - First three entries of all even entries: 3; (int) 0; DateMarch 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df006_ranges.C. tutorialsdataframedf006_ranges.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df006__ranges_8C.html:2021,wrap,wrap,2021,doc/master/df006__ranges_8C.html,https://root.cern,https://root.cern/doc/master/df006__ranges_8C.html,2,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"o change the likelihood fitting logic for custom PDFs.; 1068 *; 1069 * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; 1070 */; 1071 ; 1072std::unique_ptr<RooFitResult> RooAbsPdf::fitToImpl(RooAbsData& data, const RooLinkedList& cmdList); 1073{; 1074 return RooFit::FitHelpers::fitTo(*this, data, cmdList, false);; 1075}; 1076 ; 1077 ; 1078////////////////////////////////////////////////////////////////////////////////; 1079/// Print value of p.d.f, also print normalization integral that was last used, if any; 1080 ; 1081void RooAbsPdf::printValue(ostream& os) const; 1082{; 1083 // silent warning messages coming when evaluating a RooAddPdf without a normalization set; 1084 RooHelpers::LocalChangeMsgLevel locmsg(RooFit::WARNING, 0u, RooFit::Eval, false);; 1085 ; 1086 getVal() ;; 1087 ; 1088 if (_norm) {; 1089 os << getVal() << ""/"" << _norm->getVal() ;; 1090 } else {; 1091 os << getVal();; 1092 }; 1093}; 1094 ; 1095 ; 1096 ; 1097////////////////////////////////////////////////////////////////////////////////; 1098/// Print multi line detailed information of this RooAbsPdf; 1099 ; 1100void RooAbsPdf::printMultiline(ostream& os, Int_t contents, bool verbose, TString indent) const; 1101{; 1102 RooAbsReal::printMultiline(os,contents,verbose,indent);; 1103 os << indent << ""--- RooAbsPdf ---"" << endl;; 1104 os << indent << ""Cached value = "" << _value << endl ;; 1105 if (_norm) {; 1106 os << indent << "" Normalization integral: "" << endl ;; 1107 auto moreIndent = std::string(indent.Data()) + "" "" ;; 1108 _norm->printStream(os,kName|kAddress|kTitle|kValue|kArgs,kSingleLine,moreIndent.c_str()) ;; 1109 }; 1110}; 1111 ; 1112 ; 1113 ; 1114////////////////////////////////////////////////////////////////////////////////; 1115/// Return a binned generator context; 1116 ; 1117RooAbsGenContext* RooAbsPdf::binnedGenContext(const RooArgSet &vars, bool verbose) const; 1118{; 1119 return new RooBinnedGenContext(*this,vars,nullptr,nullptr,verbose) ;; 1120}; 1121 ; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:53539,message,messages,53539,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['message'],['messages']
Integrability,"o compute Y alignment; static FT_BBoxfgCBoxstring control box; static void*fgCharMap[32]font character map; static Int_tfgCurFontIdxcurrent font index; static void*fgFace[32]font face; static Int_tfgFontCountnumber of fonts loaded; static char*fgFontName[32]font name; static TTGlyphfgGlyphs[1024]glyphs; static Bool_tfgHintinguse hinting (true by default); static Bool_tfgInittrue if the Init has been called; static Bool_tfgKerninguse kerning (true by default); static void*fgLibraryFreeType font library; static Int_tfgNumGlyphsnumber of glyphs in the string; static FT_Matrix*fgRotMatrixrotation matrix; static Bool_tfgSmoothinguse anti-aliasing (true when >8 planes, false otherwise); static Int_tfgSymbItaFontIdxSymbol italic font index; static Int_tfgTBlankWtrailing blanks width; static Int_tfgWidthstring width, used to compute X alignment. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TTF(); Cleanup TTF environment. void Init(); Initialise the TrueType fonts interface. void Cleanup(); Cleanup. Is called by the gCleanupTTF destructor. Short_t CharToUnicode(UInt_t code); Map char to unicode. Returns 0 in case no mapping exists. void GetTextExtent(UInt_t& w, UInt_t& h, char* text); Get width (w) and height (h) when text is horizontal. void GetTextAdvance(UInt_t& a, char* text); Get advance (a) when text is horizontal. void GetTextExtent(UInt_t& w, UInt_t& h, wchar_t* text); Get width (w) and height (h) when text is horizontal. void LayoutGlyphs(); Compute the glyps positions, fgAscent and fgWidth (needed for alignment).; Perform the Glyphs transformation.; Compute the string control box.; If required take the ""kerning"" into account.; SetRotation and PrepareString should have been called before. void PrepareString(const char* string); Put the characters in ""string"" in the ""glyphs"" array. void PrepareString(const wchar_t* string); Put the characters in ""string"" in the ""glyphs"" array. void SetHinting(Bool_t state); Set hinting f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTF.html:2747,interface,interface,2747,root/html534/TTF.html,https://root.cern,https://root.cern/root/html534/TTF.html,1,['interface'],['interface']
Integrability,"o compute Y alignment; static FT_BBoxfgCBoxstring control box; static void*fgCharMap[32]font character map; static Int_tfgCurFontIdxcurrent font index; static void*fgFace[32]font face; static Int_tfgFontCountnumber of fonts loaded; static char*fgFontName[32]font name; static TTGlyphfgGlyphs[1024]glyphs; static Bool_tfgHintinguse hinting (true by default); static Bool_tfgInittrue if the Init has been called; static Bool_tfgKerninguse kerning (true by default); static void*fgLibraryFreeType font library; static Int_tfgNumGlyphsnumber of glyphs in the string; static FT_Matrix*fgRotMatrixrotation matrix; static Bool_tfgSmoothinguse anti-aliasing (true when >8 planes, false otherwise); static Int_tfgSymbItaFontIdxSymbol italic font index; static Int_tfgTBlankWtrailing blanks width; static Int_tfgWidthstring width, used to compute X alignment. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TTF(); Cleanup TTF environment. void Init(); Initialise the TrueType fonts interface. void Cleanup(); Cleanup. Is called by the gCleanupTTF destructor. Short_t CharToUnicode(UInt_t code); Map char to unicode. Returns 0 in case no mapping exists. void GetTextExtent(UInt_t& w, UInt_t& h, char* text); Get width (w) and height (h) when text is horizontal. void GetTextAdvance(UInt_t& a, char* text); Get advance (a) when text is horizontal. void LayoutGlyphs(); Compute the glyps positions, fgAscent and fgWidth (needed for alignment).; Perform the Glyphs transformation.; Compute the string control box.; If required take the ""kerning"" into account.; SetRotation and PrepareString should have been called before. void PrepareString(const char* string); Put the characters in ""string"" in the ""glyphs"" array. void SetHinting(Bool_t state); Set hinting flag. void SetKerning(Bool_t state); Set kerning flag. void SetRotationMatrix(Float_t angle); Set the rotation matrix used to rotate the font outlines. void SetSmoothing(Bool_t state); Set smoothing (anti-alia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTF.html:2614,interface,interface,2614,root/html528/TTF.html,https://root.cern,https://root.cern/root/html528/TTF.html,3,['interface'],['interface']
Integrability,"o control granularity of the; binning of the cache histogram set the desired properties in the; binning named ""cache"" in the observables of the function.; If the fixed set of cache observables does not match the observables; defined in the use context of the p.d.f the cache is still filled; completely. Ee.g. when it is specified to cache x and p and only x; is a observable in the given use context the cache histogram will; store sampled values for all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedReal(const RooCachedReal& other, const char* name = 0); Copy constructor. ~RooCachedReal(); Destructor. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Interface function to create an internal cache object that represent; each cached function configuration. This interface allows to create and; return a class derived from RooAbsCachedReal::FuncCacheElem so that; a derived class fillCacheObject implementation can utilize extra functionality; defined in such a derived cache class. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const. RooArgSet* actualObservables(const RooArgSet& nset) const; If this pdf is operated with a fixed set of observables, return; the subset of the fixed observables that are actual dependents; of the external input p.d.f. If this p.d.f is operated without; a fixed set of cache observables, return the actual observables; of the external input p.d.f given the choice of observables defined; in nset. RooArgSet* actualParameters(const RooArgSet& nset) const; If this p.d.f is operated with a fixed set of observables, return; all variables of the external input p.d.f that are not one of; the cache observables. If this p.d.f is operated in automatic mode,; return the parameters of the external input p.d.f. void operModeHook(). RooCachedReal(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCachedReal.html:40097,interface,interface,40097,root/html604/RooCachedReal.html,https://root.cern,https://root.cern/root/html604/RooCachedReal.html,1,['interface'],['interface']
Integrability,"o control granularity of the; binning of the cache histogram set the desired properties in the; binning named ""cache"" in the observables of the function.; If the fixed set of cache observables does not match the observables; defined in the use context of the p.d.f the cache is still filled; completely. Ee.g. when it is specified to cache x and p and only x; is a observable in the given use context the cache histogram will; store sampled values for all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedReal(const RooCachedReal& other, const char* name = 0); Copy constructor. ~RooCachedReal(); Destructor. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Interface function to create an internal cache object that represent; each cached function configuration. This interface allows to create and; return a class derived from RooAbsCachedReal::FuncCacheElem so that; a derived class fillCacheObject implementation can utilize extra functionality; defined in such a derived cache class. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Update contents of cache histogram by resampling the input function. RooArgSet* actualObservables(const RooArgSet& nset) const; If this pdf is operated with a fixed set of observables, return; the subset of the fixed observables that are actual dependents; of the external input p.d.f. If this p.d.f is operated without; a fixed set of cache observables, return the actual observables; of the external input p.d.f given the choice of observables defined; in nset. RooArgSet* actualParameters(const RooArgSet& nset) const; If this p.d.f is operated with a fixed set of observables, return; all variables of the external input p.d.f that are not one of; the cache observables. If this p.d.f is operated in automatic mode,; return the parameters of the external input p.d.f. void operModeHook(). RooCachedReal(); cover",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedReal.html:38599,interface,interface,38599,root/html534/RooCachedReal.html,https://root.cern,https://root.cern/root/html534/RooCachedReal.html,2,['interface'],['interface']
Integrability,"o delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:10712,interface,interfaces,10712,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['interface'],['interfaces']
Integrability,"o demonstrate message stream; igauss = gauss.createIntegral({x}); igauss.Print(); ; # Print streams configuration in verbose, also shows inactive streams; ROOT.RooMsgService.instance().Print(); ; # Remove stream; ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Integration); ; # Examples of pdf value tracing; # -----------------------------------------------------------------------; ; # Show DEBUG level message on function tracing, ROOT.RooGaussian only; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, ClassName=""RooGaussian""); ; # Perform a fit to generate some tracing messages; model.fitTo(data, Verbose=True); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); ; # Show DEBUG level message on function tracing on all objects, output to; # file; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, OutputFile=""rf506_debug.log""); ; # Perform a fit to generate some tracing messages; model.fitTo(data, Verbose=True); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); ; # Example of another debugging stream; # ---------------------------------------------------------------------; ; # Show DEBUG level messages on client/server link state management; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.LinkStateMgmt); ROOT.RooMsgService.instance().Print(""v""); ; # Clone composite pdf g to trigger some link state management activity; gprime = gauss.cloneTree(); gprime.Print(); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; [#0] WARNING:InputArguments -- The parameter 's' with range [-10, 10] of the RooGaussian 'g' exceeds the safe range of (0, inf). Advise to limit its range.; Active Message streams; [0] MinLevel = PROGRESS Topic = Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:2425,message,messages,2425,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,1,['message'],['messages']
Integrability,"o execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  Nroot-argparse;  Nrootmarks;  ►NROOTwriter;  CROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  Nsurfaces;  Ntbb;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) ;  CTInterpreterLookupHelper;  CTSplitType;  ►Ntest;  Ctest; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:83385,interface,interface,83385,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['interface'],['interface']
Integrability,"o execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) ;  CTInterpreterLookupHelper;  CTSplitType;  ►Ntest;  Ctest;  ►NTMathTMath ;  CLimits;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  ►NCNN;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:79705,interface,interface,79705,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['interface'],['interface']
Integrability,"o for derived classes; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. TMessageHandler(const TClass* cl, Bool_t derived = kTRUE). virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMessageHandler.html:11312,message,message,11312,root/html602/TMessageHandler.html,https://root.cern,https://root.cern/root/html602/TMessageHandler.html,4,['message'],"['message', 'messages']"
Integrability,"o for derived classes; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:45; This page has been automat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMessageHandler.html:10778,message,message,10778,root/html534/TMessageHandler.html,https://root.cern,https://root.cern/root/html534/TMessageHandler.html,2,['message'],"['message', 'messages']"
Integrability,"o for derived classes; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMessageHandler.h 22415 2008-03-01 11:00:27Z rdm $ » Last gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessageHandler.html:10690,message,message,10690,root/html528/TMessageHandler.html,https://root.cern,https://root.cern/root/html528/TMessageHandler.html,6,['message'],"['message', 'messages']"
Integrability,"o given amount. ;  . Protected Member Functions; std::complex< double > evalCerfInt (double sign, double wt, double tau, double umin, double umax, double c) const;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:62089,rout,routine,62089,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,1,['rout'],['routine']
Integrability,"o h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile here; auto h2 = df2.Histo1D(""y"");; h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new. More features; Here is a list of the most important features that have been omitted in the ""Crash course"" for brevity. You don't need to read all these to start using RDataFrame, but they are useful to save typing time and runtime. Systematic variations; Starting from ROOT v6.26, RDataFrame provides a flexible syntax to define systematic variations. This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations of normal RDataFrame results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsFor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:53180,depend,dependencies,53180,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['depend'],['dependencies']
Integrability,"o myHist2 = myDf.Histo1D<float>(""myColumn"");; 1838 /// ~~~; 1839 template <typename V = RDFDetail::RInferredType>; 1840 RResultPtr<::TH1D> Histo1D(std::string_view vName); 1841 {; 1842 const auto h_name = std::string(vName);; 1843 const auto h_title = h_name + "";"" + h_name + "";count"";; 1844 return Histo1D<V>({h_name.c_str(), h_title.c_str(), 128u, 0., 0.}, vName);; 1845 }; 1846 ; 1847 ////////////////////////////////////////////////////////////////////////////; 1848 /// \brief Fill and return a one-dimensional histogram with the weighted values of a column (*lazy action*).; 1849 /// \tparam V The type of the column used to fill the histogram.; 1850 /// \tparam W The type of the column used as weights.; 1851 /// \param[in] model The returned histogram will be constructed using this as a model.; 1852 /// \param[in] vName The name of the column that will fill the histogram.; 1853 /// \param[in] wName The name of the column that will provide the weights.; 1854 /// \return the monodimensional histogram wrapped in a RResultPtr.; 1855 ///; 1856 /// See the description of the first Histo1D() overload for more details.; 1857 ///; 1858 /// ### Example usage:; 1859 /// ~~~{.cpp}; 1860 /// // Deduce column type (this invocation needs jitting internally); 1861 /// auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");; 1862 /// // Explicit column type; 1863 /// auto myHist2 = myDf.Histo1D<float, int>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");; 1864 /// ~~~; 1865 template <typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType>; 1866 RResultPtr<::TH1D> Histo1D(const TH1DModel &model, std::string_view vName, std::string_view wName); 1867 {; 1868 const std::vector<std::string_view> columnViews = {vName, wName};; 1869 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 1870 ? ColumnNames_t(); 1871 : ColumnNames_t(columnViews.begin(), columnViews.end());; 1872 std::shared_ptr<::TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:103761,wrap,wrapped,103761,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['wrap'],['wrapped']
Integrability,"o new directory dir. dir can be 0 in which case the; 1542/// 2D graph does not belong to any directory.; 1543 ; 1544void TGraph2D::SetDirectory(TDirectory *dir); 1545{; 1546 if (fDirectory == dir) return;; 1547 if (fDirectory) fDirectory->Remove(this);; 1548 fDirectory = dir;; 1549 if (fDirectory) fDirectory->Append(this);; 1550}; 1551 ; 1552 ; 1553////////////////////////////////////////////////////////////////////////////////; 1554/// Sets the histogram to be filled.; 1555/// If the 2D graph needs to be save in a TFile the following set should be; 1556/// followed to read it back:; 1557/// 1. Create TGraph2D; 1558/// 2. Call g->SetHistogram(h), and do whatever you need to do; 1559/// 3. Save g and h to the TFile, exit; 1560/// 4. Open the TFile, retrieve g and h; 1561/// 5. Call h->SetDirectory(0); 1562/// 6. Call g->SetHistogram(h) again; 1563/// 7. Carry on as normal; 1564///; 1565/// By default use the new interpolation routine based on Triangles; 1566/// If the option ""old"" the old interpolation is used; 1567 ; 1568void TGraph2D::SetHistogram(TH2 *h, Option_t *option); 1569{; 1570 TString opt = option;; 1571 opt.ToLower();; 1572 Bool_t oldInterp = opt.Contains(""old"");; 1573 ; 1574 fUserHisto = kTRUE;; 1575 fHistogram = (TH2D*)h;; 1576 fNpx = h->GetNbinsX();; 1577 fNpy = h->GetNbinsY();; 1578 CreateInterpolator(oldInterp);; 1579}; 1580 ; 1581 ; 1582////////////////////////////////////////////////////////////////////////////////; 1583/// Sets the extra space (in %) around interpolated area for the 2D histogram; 1584 ; 1585void TGraph2D::SetMargin(Double_t m); 1586{; 1587 if (m < 0 || m > 1) {; 1588 Warning(""SetMargin"", ""The margin must be >= 0 && <= 1, fMargin set to 0.1"");; 1589 fMargin = 0.1;; 1590 } else {; 1591 fMargin = m;; 1592 }; 1593 if (fHistogram) {; 1594 delete fHistogram;; 1595 fHistogram = nullptr;; 1596 fDelaunay = nullptr;; 1597 }; 1598}; 1599 ; 1600 ; 1601////////////////////////////////////////////////////////////////////////////////; 1602/// Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:50336,rout,routine,50336,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['rout'],['routine']
Integrability,"o not have the library defining the class. void StreamerInstrumented(const TClass* pThis, void* object, TBuffer& b, const TClass* onfile_class); Case of instrumented class with a library. void ConvStreamerInstrumented(const TClass* pThis, void* object, TBuffer& b, const TClass* onfile_class); Case of instrumented class with a library. void StreamerStreamerInfo(const TClass* pThis, void* object, TBuffer& b, const TClass* onfile_class); Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulatedStreamer:; case kInstrumented|kEmulatedStreamer:; case kEmulatedStreamer:. void StreamerDefault(const TClass* pThis, void* object, TBuffer& b, const TClass* onfile_class); Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetConvStreamerFunc(ClassConvStreamerFunc_t strm); Set a wrapper/accessor function around this class custom conversion streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:61050,wrap,wrapper,61050,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['wrap'],['wrapper']
Integrability,"o not send anything back to client, until we buffer in all; 11446 * HTTP headers. */; 11447 data_len = 0;; 11448 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11449 if (buf == NULL) {; 11450 mg_send_http_error(conn,; 11451 500,; 11452 ""Error: Not enough memory for CGI buffer (%u bytes)"",; 11453 (unsigned int)buflen);; 11454 mg_cry_internal(; 11455 conn,; 11456 ""Error: CGI program \""%s\"": Not enough memory for buffer (%u ""; 11457 ""bytes)"",; 11458 prog,; 11459 (unsigned int)buflen);; 11460 goto done;; 11461 }; 11462 ; 11463 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11464 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11465 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11466 ; 11467 if (headers_len <= 0) {; 11468 ; 11469 /* Could not parse the CGI response. Check if some error message on; 11470 * stderr. */; 11471 i = pull_all(err, conn, buf, (int)buflen);; 11472 if (i > 0) {; 11473 /* CGI program explicitly sent an error */; 11474 /* Write the error message to the internal log */; 11475 mg_cry_internal(conn,; 11476 ""Error: CGI program \""%s\"" sent error ""; 11477 ""message: [%.*s]"",; 11478 prog,; 11479 i,; 11480 buf);; 11481 /* Don't send the error message back to the client */; 11482 mg_send_http_error(conn,; 11483 500,; 11484 ""Error: CGI program \""%s\"" failed."",; 11485 prog);; 11486 } else {; 11487 /* CGI program did not explicitly send an error, but a broken; 11488 * respon header */; 11489 mg_cry_internal(conn,; 11490 ""Error: CGI program sent malformed or too big ""; 11491 ""(>%u bytes) HTTP headers: [%.*s]"",; 11492 (unsigned)buflen,; 11493 data_len,; 11494 buf);; 11495 ; 11496 mg_send_http_error(conn,; 11497 500,; 11498 ""Error: CGI program sent malformed or too big ""; 11499 ""(>%u bytes) HTTP headers: [%.*s]"",; 11500 (unsigned)buflen,; 11501 data_len,; 11502 buf);; 11503 }; 11504 ; 11505 /* in both cases, abort processing CGI */; 11506 goto done;; 11507 }; 11508 ; 11509 pbuf = buf;; 11510 buf[headers_len - 1] = '\0';; 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:332139,message,message,332139,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['message'],['message']
Integrability,"o not send anything back to client, until we buffer in all; 11447 * HTTP headers. */; 11448 data_len = 0;; 11449 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11450 if (buf == NULL) {; 11451 mg_send_http_error(conn,; 11452 500,; 11453 ""Error: Not enough memory for CGI buffer (%u bytes)"",; 11454 (unsigned int)buflen);; 11455 mg_cry_internal(; 11456 conn,; 11457 ""Error: CGI program \""%s\"": Not enough memory for buffer (%u ""; 11458 ""bytes)"",; 11459 prog,; 11460 (unsigned int)buflen);; 11461 goto done;; 11462 }; 11463 ; 11464 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11465 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11466 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11467 ; 11468 if (headers_len <= 0) {; 11469 ; 11470 /* Could not parse the CGI response. Check if some error message on; 11471 * stderr. */; 11472 i = pull_all(err, conn, buf, (int)buflen);; 11473 if (i > 0) {; 11474 /* CGI program explicitly sent an error */; 11475 /* Write the error message to the internal log */; 11476 mg_cry_internal(conn,; 11477 ""Error: CGI program \""%s\"" sent error ""; 11478 ""message: [%.*s]"",; 11479 prog,; 11480 i,; 11481 buf);; 11482 /* Don't send the error message back to the client */; 11483 mg_send_http_error(conn,; 11484 500,; 11485 ""Error: CGI program \""%s\"" failed."",; 11486 prog);; 11487 } else {; 11488 /* CGI program did not explicitly send an error, but a broken; 11489 * respon header */; 11490 mg_cry_internal(conn,; 11491 ""Error: CGI program sent malformed or too big ""; 11492 ""(>%u bytes) HTTP headers: [%.*s]"",; 11493 (unsigned)buflen,; 11494 data_len,; 11495 buf);; 11496 ; 11497 mg_send_http_error(conn,; 11498 500,; 11499 ""Error: CGI program sent malformed or too big ""; 11500 ""(>%u bytes) HTTP headers: [%.*s]"",; 11501 (unsigned)buflen,; 11502 data_len,; 11503 buf);; 11504 }; 11505 ; 11506 /* in both cases, abort processing CGI */; 11507 goto done;; 11508 }; 11509 ; 11510 pbuf = buf;; 11511 buf[headers_len - 1] = '\0';; 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:332172,message,message,332172,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['message'],['message']
Integrability,"o the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ; epsilon = 1e-12 . ). virtual . Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Double_t ; epsrel, . Double_t & ; relerr . ). virtual . See more general prototype below. ; This interface kept for back compatibility It is recommended to use the other interface where one can specify also epsabs and the maximum number of points ; Definition at line 2798 of file TF1.cxx. ◆ IntegralMultiple() [2/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:98761,interface,interface,98761,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,2,['interface'],['interface']
Integrability,"o the inside of the parent window's borders; w, h - width and height of the created window; do not include the; created window's borders; border - the border pixel value of the window; depth - the window's depth; clss - the created window's class; can be InputOutput, InputOnly, or; CopyFromParent; visual - the visual type; attr - the structure from which the values are to be taken.; wtype - the window type. Int_t OpenDisplay(const char* dpyName); Opens connection to display server (if such a thing exist on the; current platform). The encoding and interpretation of the display; name; On X11 this method returns on success the X display socket descriptor; >0, 0 in case of batch mode, and <0 in case of failure (cannot connect; to display dpyName). void CloseDisplay(); Closes connection to display server and destroys all windows. Display_t GetDisplay() const; Returns handle to display (might be usefull in some cases where; direct X11 manipulation outside of TVirtualX is needed, e.g. GL; interface). Visual_t GetVisual() const; Returns handle to visual. Might be usefull in some cases where direct X11 manipulation outside; of TVirtualX is needed, e.g. GL interface. Int_t GetScreen() const; Returns screen number. Might be usefull in some cases where direct X11 manipulation outside; of TVirtualX is needed, e.g. GL interface. Int_t GetDepth() const; Returns depth of screen (number of bit planes).; Equivalent to GetPlanes(). Colormap_t GetColormap() const; Returns handle to colormap. Might be usefull in some cases where direct X11 manipulation outside; of TVirtualX is needed, e.g. GL interface. Window_t GetDefaultRootWindow() const; Returns handle to the default root window created when calling; XOpenDisplay(). Atom_t InternAtom(const char* atom_name, Bool_t only_if_exist); Returns the atom identifier associated with the specified ""atom_name""; string. If ""only_if_exists"" is False, the atom is created if it does; not exist. If the atom name is not in the Host Portable Character;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:38811,interface,interface,38811,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['interface'],['interface']
Integrability,"o unpredictable results during tracking.; A) If a positioned volume contains points that are not also contained by its mother, we will call the corresponding region as an ""extrusion"". When navigating from outside to inside (trying to enter such a node) these regions are invisible since the current track has not yet reached its mother. This is not the case when going the other way since the track has first to exit the extruding node before checking the mother. In other words, an extrusion behavior is dependent on the track parameters, which is a highly undesirable effect.; B) We will call ""overlaps"" only the regions in space contained by more than one node inside the same container. The owner of such regions cannot be determined based on hierarchical considerations; therefore they will be considered as belonging to the node from which the current track is coming from.; When coming from their container, the ownership is totally unpredictable. Again, the ownership of overlapping regions highly depends on the current track parameters.; We must say that even the overlaps of type A) and B) are allowed in case the corresponding nodes are created using TGeoVolume::AddNodeOverlap() method. Navigation is performed in such cases by giving priority to the non-overlapping nodes. The modeller has to perform an additional search through the overlapping candidates. These are detected automatically during the geometry closing procedure in order to optimize the algorithm, but we will stress that extensive usage of this feature leads to a drastic deterioration of performance. In the following we will focus on the non-declared overlaps of type A) and B) since this is the main source of errors during tracking. These are generally non-intended overlaps due to coding mistakes or bad geometry design. The checking package is loaded together with the painter classes and contains an automated overlap checker. Overlap checking; This can be activated both at volume level (checking for illegal o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:100637,depend,depends,100637,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['depend'],['depends']
Integrability,"o which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPalette.html:4059,message,message,4059,doc/master/classTGColorPalette.html,https://root.cern,https://root.cern/doc/master/classTGColorPalette.html,5,['message'],['message']
Integrability,"o which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiTitleIcon.html:4655,message,message,4655,doc/master/classTGMdiTitleIcon.html,https://root.cern,https://root.cern/doc/master/classTGMdiTitleIcon.html,1,['message'],['message']
Integrability,"o which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCheckButton.html:9382,message,message,9382,doc/master/classTGCheckButton.html,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html,9,['message'],['message']
Integrability,"o which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleFocusChange (Event_t *);  ; virtual Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHSlider.html:5371,message,message,5371,doc/master/classTGHSlider.html,https://root.cern,https://root.cern/doc/master/classTGHSlider.html,4,['message'],['message']
Integrability,"o( const char* classname, Int_t version ); Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo( const TClass* cl, Int_t version ); Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const char* classname, UInt_t checksum ); Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const TClass* cl, UInt_t checksum ); Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:41534,wrap,wrapper,41534,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,1,['wrap'],['wrapper']
Integrability,"o);  Return the number of elments of type p in a form. ;  ; void FreeColor (ColorStruct_t *color);  Free system color. ;  ; GContext_t GetAnyGC ();  Retrieve any valid GC. ;  ; int GetColorByName (const char *zColor);  This routine returns an index between 0 and N_COLOR-1 which indicates which ColorStruct_t structure in the fApColor[] array should be used to describe the color specified by the given name. ;  ; int GetColorByValue (ColorStruct_t *pRef);  Find a color integer for the color whose color components are given by pRef. ;  ; SHtmlStyle_t GetCurrentStyle ();  Get the current rendering style. ;  ; int GetDarkShadowColor (int iBgColor);  Given that the background color is iBgColor, figure out an appropriate color for the dark part of a 3D shadow. ;  ; GContext_t GetGC (int color, int font);  Return a GC from the cache. ;  ; int GetImageAlignment (TGHtmlElement *p);  Find the alignment for an image. ;  ; int GetImageAt (int x, int y);  This routine searchs for an image beneath the coordinates x,y and returns the token number of the image, or -1 if no image found. ;  ; int GetIndex (const char *zIndex, TGHtmlElement **ppToken, int *pIndex);  This routine decodes a complete index specification. ;  ; int GetLightShadowColor (int iBgColor);  Given that the background color is iBgColor, figure out an appropriate color for the bright part of the 3D shadow. ;  ; int GetLinkColor (const char *zURL);  For the markup <a href=XXX>, find out if the URL has been visited before or not. ;  ; SHtmlTokenMap_t * GetMarkupMap (int n);  Returns token map at location n. ;  ; const char * GetPctWidth (TGHtmlElement *p, char *opt, char *ret);  Return the height and width, converting to percent if required ret must be at least 16 characters long. ;  ; const char * GetUid (const char *string);  Given a string, this procedure returns a unique identifier for the string. ;  ; void HClear ();  Erase all data from the HTML widget. Bring it back to an empty screen. ;  ; void ImageChanged (TGH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:32137,rout,routine,32137,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,"o);; 6168 // Must set this last since other threads may read fProperty; 6169 // and think all test bits have been properly set.; 6170 kl->fProperty = gCling->ClassInfo_Property(fClassInfo);; 6171 }; 6172 } else {; 6173 ; 6174 if (fStreamer) {; 6175 kl->fStreamerType = kExternal;; 6176 kl->fStreamerImpl = &TClass::StreamerExternal;; 6177 }; 6178 ; 6179 kl->fStreamerType |= kEmulatedStreamer;; 6180 kl->SetStreamerImpl();; 6181 // fProperty was *not* set so that it can be forced to be recalculated; 6182 // next time.; 6183 return 0;; 6184 }; 6185 ; 6186 return fProperty;; 6187}; 6188 ; 6189////////////////////////////////////////////////////////////////////////////////; 6190/// Internal routine to set calculate the class properties that can only be; 6191/// known at run-time, for example whether the Hash member function and the; 6192/// destructor are consistent.; 6193 ; 6194void TClass::SetRuntimeProperties(); 6195{; 6196 // For now, no need to lock this routines as fRuntimeProperties is; 6197 // the only atomic set here and this is done at the end; 6198 // and there is no downside if the execution is done twice.; 6199 ; 6200 // Note SetRuntimeProperties is set to const as it is technically; 6201 // thread-safe.; 6202 ; 6203 UChar_t properties = static_cast<UChar_t>(ERuntimeProperties::kSet);; 6204 ; 6205 if (ROOT::Internal::TCheckHashRecursiveRemoveConsistency::Check(*this)); 6206 properties |= static_cast<UChar_t>(ERuntimeProperties::kConsistentHash);; 6207 ; 6208 const_cast<TClass *>(this)->fRuntimeProperties = properties;; 6209}; 6210 ; 6211////////////////////////////////////////////////////////////////////////////////; 6212/// Internal routine to set fStreamerImpl based on the value of; 6213/// fStreamerType.; 6214 ; 6215void TClass::SetStreamerImpl(); 6216{; 6217 switch (fStreamerType) {; 6218 case kTObject: fStreamerImpl = &TClass::StreamerTObject; break;; 6219 case kForeign: fStreamerImpl = &TClass::StreamerStreamerInfo; break;; 6220 case kExternal: fStreamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:238333,rout,routines,238333,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['rout'],['routines']
Integrability,"o);; 6235 // Must set this last since other threads may read fProperty; 6236 // and think all test bits have been properly set.; 6237 kl->fProperty = gCling->ClassInfo_Property(fClassInfo);; 6238 }; 6239 } else {; 6240 ; 6241 if (fStreamer) {; 6242 kl->fStreamerType = kExternal;; 6243 kl->fStreamerImpl = &TClass::StreamerExternal;; 6244 }; 6245 ; 6246 kl->fStreamerType |= kEmulatedStreamer;; 6247 kl->SetStreamerImpl();; 6248 // fProperty was *not* set so that it can be forced to be recalculated; 6249 // next time.; 6250 return 0;; 6251 }; 6252 ; 6253 return fProperty;; 6254}; 6255 ; 6256////////////////////////////////////////////////////////////////////////////////; 6257/// Internal routine to set calculate the class properties that can only be; 6258/// known at run-time, for example whether the Hash member function and the; 6259/// destructor are consistent.; 6260 ; 6261void TClass::SetRuntimeProperties(); 6262{; 6263 // For now, no need to lock this routines as fRuntimeProperties is; 6264 // the only atomic set here and this is done at the end; 6265 // and there is no downside if the execution is done twice.; 6266 ; 6267 // Note SetRuntimeProperties is set to const as it is technically; 6268 // thread-safe.; 6269 ; 6270 UChar_t properties = static_cast<UChar_t>(ERuntimeProperties::kSet);; 6271 ; 6272 if (ROOT::Internal::TCheckHashRecursiveRemoveConsistency::Check(*this)); 6273 properties |= static_cast<UChar_t>(ERuntimeProperties::kConsistentHash);; 6274 ; 6275 const_cast<TClass *>(this)->fRuntimeProperties = properties;; 6276}; 6277 ; 6278////////////////////////////////////////////////////////////////////////////////; 6279/// Internal routine to set fStreamerImpl based on the value of; 6280/// fStreamerType.; 6281 ; 6282void TClass::SetStreamerImpl(); 6283{; 6284 switch (fStreamerType) {; 6285 case kTObject: fStreamerImpl = &TClass::StreamerTObject; break;; 6286 case kForeign: fStreamerImpl = &TClass::StreamerStreamerInfo; break;; 6287 case kExternal: fStreamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:241084,rout,routines,241084,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['rout'],['routines']
Integrability,"o://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]. Known protocols: http, root, proof, ftp, news and any special protocols; defined in the rootrc Url.Special key.; The default protocol is ""http"", unless defaultIsFile is true in which; case the url is assumed to be of type ""file"".; If a passwd contains a @ it must be escaped by a \\, e.g.; ""pip@"" becomes ""pip\\@"". Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; Port #1093 has been assigned by IANA (www.iana.org) to proofd.; Port #1094 has been assigned by IANA (www.iana.org) to rootd. ~TUrl(); Cleanup. void SetUrl(const char* url, Bool_t defaultIsFile = kFALSE); Parse url character string and split in its different subcomponents.; Use IsValid() to check if URL is legal. url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]. Known protocols: http, root, proof, ftp, news and any special protocols; defined in the rootrc Url.Special key.; The default protocol is ""http"", unless defaultIsFile is true in which; case the url is assumed to be of type ""file"".; If a passwd contains a @ it must be escaped by a \\, e.g.; ""pip@"" becomes ""pip\\@"". Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; Port #1093 has been assigned by IANA (www.iana.org) to proofd.; Port #1094 has been assigned by IANA (www.iana.org) to rootd. void FindFile(char* u, Bool_t stripDoubleSlash = kTRUE); Find file and optionally anchor and options. TUrl(const TUrl& url); TUrl copt ctor. TUrl & operator=(const TUrl& rhs); TUrl assignment operator. const char * GetUrl(Bool_t withDeflt = kFALSE) const; Return full URL. If withDflt is kTRUE, explicitly add the port even; if it matches the default value for the URL protocol. const char * GetHostFQDN() const; Return fully qualified domain name of url host. If host cannot be; resolved or not valid return the host name as originally specified. const char * GetFileAndOptions() const; Return the file and its options (the string specified behind the ?).; Conve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUrl.html:8042,protocol,protocol,8042,root/html528/TUrl.html,https://root.cern,https://root.cern/root/html528/TUrl.html,3,['protocol'],['protocol']
Integrability,"o://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]. Known protocols: http, root, proof, ftp, news and any special protocols; defined in the rootrc Url.Special key.; The default protocol is ""http"", unless defaultIsFile is true in which; case the url is assumed to be of type ""file"".; If a passwd contains a @ it must be escaped by a \\, e.g.; ""pip@"" becomes ""pip\\@"". Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; Port #1093 has been assigned by IANA (www.iana.org) to proofd.; Port #1094 has been assigned by IANA (www.iana.org) to rootd. ~TUrl(); Cleanup. void SetUrl(const char* url, Bool_t defaultIsFile = kFALSE); Parse url character string and split in its different subcomponents.; Use IsValid() to check if URL is legal. url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]. Known protocols: http, root, proof, ftp, news and any special protocols; defined in the rootrc Url.Special key.; The default protocol is ""http"", unless defaultIsFile is true in which; case the url is assumed to be of type ""file"".; If a passwd contains a @ it must be escaped by a \\, e.g.; ""pip@"" becomes ""pip\\@"". Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; Port #1093 has been assigned by IANA (www.iana.org) to proofd.; Port #1094 has been assigned by IANA (www.iana.org) to rootd. void FindFile(char* u, Bool_t stripDoubleSlash = kTRUE); Find file and optionally anchor and options. TUrl(const TUrl& url); TUrl copy ctor. TUrl & operator=(const TUrl& rhs); TUrl assignment operator. const char * GetUrl(Bool_t withDeflt = kFALSE) const; Return full URL. If withDflt is kTRUE, explicitly add the port even; if it matches the default value for the URL protocol. const char * GetHostFQDN() const; Return fully qualified domain name of url host. If host cannot be; resolved or not valid return the host name as originally specified. const char * GetFileAndOptions() const; Return the file and its options (the string specified behind the ?).; Conve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUrl.html:8170,protocol,protocol,8170,root/html534/TUrl.html,https://root.cern,https://root.cern/root/html534/TUrl.html,3,['protocol'],['protocol']
Integrability,"o::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::DataSetInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 244 of file DataSetInfo.h. Friends And Related Symbol Documentation. ◆ DataSetManager. friend class DataSetManager. friend . Definition at line 199 of file DataSetInfo.h. Member Data Documentation. ◆ fClasses. std::vector<ClassInfo*> TMVA::DataSetInfo::fClasses. mutableprivate . name and other infos of the classes ; Definition at line 220 of file DataSetInfo.h. ◆ fDataSet. DataSet* TMVA::DataSetInfo::fDataSet. mutableprivate . dataset, owned by this datasetinfo object ; Definition at line 208 of file DataSetInfo.h. ◆ fDataSetManager. TMVA::DataSetManager* TMVA::DataSetInfo::fDataSetManager. private . Definition at line 197 of file DataSetInfo.h. ◆ fLogger. MsgLogger* TMVA::DataSetInfo::fLogger. mutableprivate . ! message logger ; Definition at line 239 of file DataSetInfo.h. ◆ fName. TString TMVA::DataSetInfo::fName. private . name of the dataset info object ; Definition at line 206 of file DataSetInfo.h. ◆ fNeedsRebuilding. Bool_t TMVA::DataSetInfo::fNeedsRebuilding. mutableprivate . flag if rebuilding of dataset is needed (after change of cuts, vars, etc.) ; Definition at line 209 of file DataSetInfo.h. ◆ fNormalization. TString TMVA::DataSetInfo::fNormalization. private . Definition at line 222 of file DataSetInfo.h. ◆ fOwnRootDir. TDirectory* TMVA::DataSetInfo::fOwnRootDir. private . ROOT output dir. ; Definition at line 232 of file DataSetInfo.h. ◆ fSignalClass. UInt_t TMVA::DataSetInfo::fSignalClass. private . index of the class with the name signal ; Definition at line 235 of file DataSetInfo.h. ◆ fSpectators. std::vector<VariableInfo> TMVA::DataSetInfo::fSpectators. private . list of spectators expressions/internal names ; Definition at line 214 of file DataSetInfo.h. ◆ fSplitOptions. TString TMVA::DataSetInfo::fSp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html:31486,message,message,31486,doc/master/classTMVA_1_1DataSetInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html,1,['message'],['message']
Integrability,"o; perform a full (numeric) integration for each evaluation of the running integral object, but; only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; granularity for the scanning technique can be controlled with the ScanParameters technique; which allows to specify the number of samples to be taken, and to which order the resulting; running integral should be interpolated. The default values are 1000 samples and 2nd order; interpolation. The following named arguments are accepted. SupNormSet(const RooArgSet&) -- Observables over which should be normalized _in_addition_ to the; integration observables; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf; ScanNum() -- Apply scanning technique if cdf integral involves numeric integration; ScanAll() -- Always apply scanning technique; ScanNone() -- Never apply scanning technique. RooAbsReal* createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Utility function for createRunningIntegral that construct an object; implementing the numeric scanning technique for calculating the running integral. RooAbsReal* createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); Utility function for createRunningIntegral that construct an; object implementing the standard (analytical) integration; technique for calculating the running integral. RooFunctor* functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; Return a RooFunctor object bound to this RooAbsReal with given definition of observables; and parameters. TF1* asTF(const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:67226,integrat,integration,67226,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,14,['integrat'],['integration']
Integrability,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:45329,depend,dependents,45329,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,42,"['depend', 'integrat']","['dependents', 'integrated']"
Integrability,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:98044,integrat,integrators,98044,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['integrat'],['integrators']
Integrability,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunctionThe Parametric Step Fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:107082,integrat,integrators,107082,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,12,['integrat'],['integrators']
Integrability,"oAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tisDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tisSealed() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:17691,message,message,17691,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,1,['message'],['message']
Integrability,"oAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition RooAbsArg.cxx:698; RooAbsArg::addOwnedComponentsbool addOwnedComponents(const RooAbsCollection &comps)Take ownership of the contents of 'comps'.Definition RooAbsArg.cxx:2258; RooAbsArg::ADirty@ ADirtyDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped under key 'key'.Definition RooAbsArg.cxx:275; RooAbsArg::compileForNormSetvirtual std::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) constDefinition RooAbsArg.cxx:2528; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::getAttributebool getAttribute(const Text_t *name) constCheck if a named attribute is set. By def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:136656,depend,depends,136656,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['depend'],['depends']
Integrability,"oAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfObsIter!; RooSetProxy_pdfObsListList of observables mapped onto histogram observables; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Double_t_totVolume! Total volume of space (product of ranges of observables); Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Bool_t_unitNormAssume contents is unit normalized (for use as pdf cache); Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistPdf.html:44966,integrat,integrator,44966,root/html602/RooHistPdf.html,https://root.cern,https://root.cern/root/html602/RooHistPdf.html,2,['integrat'],['integrator']
Integrability,"oAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; static RooCategory*RooAbsHiddenReal::_dummyBlindState; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnblindCPAsymVar.html:34240,integrat,integration,34240,root/html534/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html534/RooUnblindCPAsymVar.html,4,['integrat'],['integration']
Integrability,oAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ow,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:39684,integrat,integration,39684,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['integrat'],['integration']
Integrability,oAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooSetProxy_compSetDSet proxy for denominator components ; RooSetProxy_compSetNSet proxy for numerator components ; RooArgSet*_compSetOwnedDOwner of denominator components; RooArgSet*_compSetOwnedNOwner of numerator components ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveDDo we have a denominator term?; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooListProxy_intListMaster integrals representing numerator and denominator; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenProdProj.html:31128,integrat,integration,31128,root/html526/RooGenProdProj.html,https://root.cern,https://root.cern/root/html526/RooGenProdProj.html,2,['integrat'],['integration']
Integrability,oAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooSetProxy_compSetDSet proxy for denominator components ; RooSetProxy_compSetNSet proxy for numerator components ; RooArgSet*_compSetOwnedDOwner of denominator components; RooArgSet*_compSetOwnedNOwner of numerator components ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveDDo we have a denominator term?; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooListProxy_intListMaster integrals representing numerator and denominator; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGenProdProj.html:31874,integrat,integration,31874,root/html530/RooGenProdProj.html,https://root.cern,https://root.cern/root/html530/RooGenProdProj.html,1,['integrat'],['integration']
Integrability,oAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooSetProxy_compSetDSet proxy for denominator components ; RooSetProxy_compSetNSet proxy for numerator components ; RooArgSet*_compSetOwnedDOwner of denominator components; RooArgSet*_compSetOwnedNOwner of numerator components ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveDDo we have a denominator term?; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooListProxy_intListMaster integrals representing numerator and denominator; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGenProdProj.html:32249,integrat,integration,32249,root/html532/RooGenProdProj.html,https://root.cern,https://root.cern/root/html532/RooGenProdProj.html,1,['integrat'],['integration']
Integrability,"oAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Cust",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction3Binding_double_double_double_double_.html:35698,integrat,integrator,35698,root/html534/RooCFunction3Binding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction3Binding_double_double_double_double_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,unsigned int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Cust",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html:37305,integrat,integrator,37305,root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,2,['integrat'],['integrator']
Integrability,"oAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,unsigned int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Cust",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html:37305,integrat,integrator,37305,root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,2,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,bool>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_double_bool_.html:40151,integrat,integrator,40151,root/html532/RooCFunction3PdfBinding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_double_bool_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument referen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_double_double_.html:40171,integrat,integrator,40171,root/html532/RooCFunction3PdfBinding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_double_double_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html:40223,integrat,integrator,40223,root/html532/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,unsigned int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html:40275,integrat,integrator,40275,root/html532/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,unsigned int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html:40275,integrat,integrator,40275,root/html532/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_bool_.html:40239,integrat,integrator,40239,root/html532/RooCFunction4PdfBinding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_bool_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_double_.html:40259,integrat,integrator,40259,root/html532/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_double_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_int_.html:40229,integrat,integrator,40229,root/html532/RooCFunction4PdfBinding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html532/RooCFunction4PdfBinding_double_double_double_double_int_.html,1,['integrat'],['integrator']
Integrability,"oAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidLoadDataSet(RooDataSet& data); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooKeysPdf.html:22041,message,message,22041,root/html534/RooKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooKeysPdf.html,3,['message'],['message']
Integrability,"oAbsBinning (const RooAbsBinning &other, const char *name=nullptr);  ; virtual double * array () const =0;  ; virtual double averageBinWidth () const =0;  ; virtual double binCenter (Int_t bin) const =0;  ; virtual double binHigh (Int_t bin) const =0;  ; virtual double binLow (Int_t bin) const =0;  ; int binNumber (double x) const;  Returns the bin number corresponding to the value x. ;  ; virtual void binNumbers (double const *x, int *bins, std::size_t n, int coef=1) const =0;  Compute the bin indices for multiple values of x. ;  ; virtual double binWidth (Int_t bin) const =0;  ; virtual RooAbsBinning * clone (const char *name=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual double highBound () const =0;  ; virtual RooAbsReal * highBoundFunc () const;  Return pointer to RooAbsReal parameterized upper bound, if any. ;  ; virtual void insertHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon insertion into a RooAbsRealLValue. ;  ; TClass * IsA () const override;  ; virtual bool isParameterized () const;  Interface function. ;  ; virtual bool isShareable () const;  If true (default), the range definition can be shared across clones of a RooRealVar. ;  ; virtual bool isUniform () const;  ; virtual double lowBound () const =0;  ; virtual RooAbsReal * lowBoundFunc () const;  Return pointer to RooAbsReal parameterized lower bound, if any. ;  ; Int_t numBins () const;  Return number of bins. ;  ; virtual Int_t numBoundaries () const =0;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print binning arguments (the RooAbsReal objects represening the variable bin boundaries for parameterized binning implementations. ;  ; void printClassName (std::ostream &os) const override;  Print binning class name. ;  ; void print",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsBinning.html:1536,interface,interface,1536,doc/master/classRooAbsBinning.html,https://root.cern,https://root.cern/doc/master/classRooAbsBinning.html,1,['interface'],['interface']
Integrability,"oAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. void wireCache(). » Last changed: Sat Jun 20 16:42:22 2015 » Last generated: 2015-06-20 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html:4886,integrat,integration,4886,root/html534/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Integrability,"oAbsCachedPdf::getCache(Mf) creating new cache 0x5569d7a23790 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[psi]_NORM_psi for nset (psi) with code 0; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x5569d7a23790 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x5569d79e4210 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x5569d79e4210 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(Mf_over_Mf_Int[cpsi]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_Mf_over_Mf_Int[cpsi]_MfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x5569d7a58030 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi] for nset () with code 1 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Mf_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf210__angularconv_8C.html:9060,integrat,integrator,9060,doc/master/rf210__angularconv_8C.html,https://root.cern,https://root.cern/doc/master/rf210__angularconv_8C.html,1,['integrat'],['integrator']
Integrability,"oAbsCategory reference found in workspace. ;  ; RooAbsCategoryLValue & asCATLV (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. ;  ; RooAbsData & asDATA (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. ;  ; RooDataHist & asDHIST (const char *);  CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. ;  ; double asDOUBLE (const char *);  CINT constructor interface, return constructor string argument #idx as double. ;  ; RooDataSet & asDSET (const char *);  CINT constructor interface, return constructor string argument #idx as RooDataSet object found in workspace. ;  ; RooAbsReal & asFUNC (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. ;  ; Int_t asINT (const char *);  CINT constructor interface, return constructor string argument #idx as Int_t. ;  ; RooArgList asLIST (const char *);  CINT constructor interface, return constructor string argument #idx as RooArgList of objects found in workspace. ;  ; TObject & asOBJ (const char *);  ; RooAbsPdf & asPDF (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. ;  ; RooResolutionModel & asRMODEL (const char *);  CINT constructor interface, return constructor string argument #idx as RooResolutionModel reference found in workspace. ;  ; RooArgSet asSET (const char *);  CINT constructor interface, return constructor string argument #idx as RooArgSet of objects found in workspace. ;  ; const char * asSTRING (const char *);  CINT constructor interface, return constructor string argument #idx as const char*. ;  ; RooRealVar & asVAR (const char *);  CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:2410,interface,interface,2410,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['interface'],['interface']
Integrability,"oAbsCollection & ; refColl, . RooAbsCollection & ; outColl . ); const. Create a subset of the current collection, consisting only of those elements that are contained as well in the given reference collection. ; Returns true only if something went wrong. The complement of this function is getParameters(). Parameters. [in]refCollThe collection to check for common elements. ; [out]outCollOutput collection. . Definition at line 807 of file RooAbsCollection.cxx. ◆ setAttribAll(). void RooAbsCollection::setAttribAll ; (; const Text_t * ; name, . bool ; value = true . ). Set given attribute in each element of the collection by calling each elements setAttribute() function. ; Definition at line 768 of file RooAbsCollection.cxx. ◆ setCatIndex(). bool RooAbsCollection::setCatIndex ; (; const char * ; name, . Int_t ; newVal = 0, . bool ; verbose = false . ). Set index value of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1075 of file RooAbsCollection.cxx. ◆ setCatLabel(). bool RooAbsCollection::setCatLabel ; (; const char * ; name, . const char * ; newVal = """", . bool ; verbose = false . ). Set state name of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1032 of file RooAbsCollection.cxx. ◆ setHashTableSize(). void RooAbsCollection::setHashTableSize ; (; Int_t ; number). inline . Set the size at which the collection will automatically start using an extra lookup table instead of performing a linear search. ; Definition at line 106 of file RooAbsCollection.h. ◆ setName(). void RooAbsCollection::setName ; (; const char * ; name). inline . Definition at line 361 of file RooAbsCollection.h. ◆ setRealValue(). bool RooAbsCollection::setRealValue ; (; const char * ; name, . double ; newVal = 0.0, . bool ; verbose = false . ). Set value of a RooAbsRealLValue stored in set with given n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:58018,message,messages,58018,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['message'],['messages']
Integrability,"oAbsCollection & ; refColl, . RooAbsCollection & ; outColl . ); const. Create a subset of the current collection, consisting only of those elements that are contained as well in the given reference collection. ; Returns true only if something went wrong. The complement of this function is getParameters(). Parameters. [in]refCollThe collection to check for common elements. ; [out]outCollOutput collection. . Definition at line 817 of file RooAbsCollection.cxx. ◆ setAttribAll(). void RooAbsCollection::setAttribAll ; (; const Text_t * ; name, . bool ; value = true . ). Set given attribute in each element of the collection by calling each elements setAttribute() function. ; Definition at line 778 of file RooAbsCollection.cxx. ◆ setCatIndex(). bool RooAbsCollection::setCatIndex ; (; const char * ; name, . Int_t ; newVal = 0, . bool ; verbose = false . ). Set index value of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1085 of file RooAbsCollection.cxx. ◆ setCatLabel(). bool RooAbsCollection::setCatLabel ; (; const char * ; name, . const char * ; newVal = """", . bool ; verbose = false . ). Set state name of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1042 of file RooAbsCollection.cxx. ◆ setHashTableSize(). void RooAbsCollection::setHashTableSize ; (; Int_t ; number). inline . Set the size at which the collection will automatically start using an extra lookup table instead of performing a linear search. ; Definition at line 106 of file RooAbsCollection.h. ◆ setName(). void RooAbsCollection::setName ; (; const char * ; name). inline . Definition at line 338 of file RooAbsCollection.h. ◆ setRealValue(). bool RooAbsCollection::setRealValue ; (; const char * ; name, . double ; newVal = 0.0, . bool ; verbose = false . ). Set value of a RooAbsRealLValue stored in set with given n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:56235,message,messages,56235,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['message'],['messages']
Integrability,"oAbsData::reduce() wrapper function, which uses this constructor, is the most convenient way to create a subset of an existing data ; Definition at line 539 of file RooDataSet.cxx. ◆ RooDataSet() [4/5]. RooDataSet::RooDataSet ; (; RooStringView ; name, . RooStringView ; title, . RooDataSet * ; dset, . const RooArgSet & ; vars, . const RooFormulaVar & ; cutVar, . const char * ; wgtVarName = nullptr . ). Constructor of a data set from (part of) an existing data set. ; The dimensions of the data set are defined by the 'vars' RooArgSet, which can be identical to 'dset' dimensions, or a subset thereof. The 'cutVar' formula variable is used to select the subset of data points to be copied. For subsets without selection on the data points, or involving cuts operating exclusively and directly on the data set dimensions, the equivalent constructor with a string based cut expression is recommended.; For most uses the RooAbsData::reduce() wrapper function, which uses this constructor, is the most convenient way to create a subset of an existing data ; Definition at line 594 of file RooDataSet.cxx. ◆ RooDataSet() [5/5]. RooDataSet::RooDataSet ; (; RooDataSet const & ; other, . const char * ; newname = nullptr . ). Copy constructor. ; Definition at line 601 of file RooDataSet.cxx. ◆ ~RooDataSet(). RooDataSet::~RooDataSet ; (; ). override . Destructor. ; Definition at line 725 of file RooDataSet.cxx. Member Function Documentation. ◆ add() [1/3]. void RooDataSet::add ; (; const RooArgSet & ; data, . double ; wgt, . double ; wgtError . ). Add one ore more rows of data. ; Add a data point, with its coordinates specified in the 'data' argset, to the data set.; Any variables present in 'data' but not in the dataset will be silently ignored. Parameters. [in]dataData point. ; [in]wgtEvent weight. Defaults to 1. The current value of the weight variable is ignored. . NoteTo obtain weighted events, a variable must be designated WeightVar in the constructor. ; Parameters. [in]wgtErrorOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:41769,wrap,wrapper,41769,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['wrap'],['wrapper']
Integrability,"oAbsDataStore &other, const char *newname=nullptr);  ;  RooAbsDataStore (const RooAbsDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooAbsDataStore (RooStringView name, RooStringView title, const RooArgSet &vars);  ; RooArgSet * addColumns (const RooArgList &varList);  ; const RooArgSet & cachedVars () const;  ; virtual void checkInit () const;  ; int defaultPrintContents (Option_t *) const override;  Define default print options, for a given print style. ;  ; bool dirtyProp () const;  ; virtual RooAbsData::CategorySpans getCategoryBatches (std::size_t, std::size_t) const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print argument of dataset, i.e. the observable names. ;  ; void printClassName (std::ostream &os) const override;  Print class name of dataset. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose, TString indent) const override;  Detailed printing interface. ;  ; void printName (std::ostream &os) const override;  Print name of dataset. ;  ; void printTitle (std::ostream &os) const override;  Print title of dataset. ;  ; void printValue (std::ostream &os) const override;  Print value of the dataset, i.e. the sum of weights contained in the dataset. ;  ; virtual void setDirtyProp (bool flag);  ; virtual void setExternalWeightArray (const double *, const double *, const double *, const double *);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const TTree * tree () const;  ; double weight (Int_t index) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:5854,interface,interface,5854,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['interface'],['interface']
Integrability,"oAbsMoment::_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooSetProxyRooAbsMoment::_nsetNormalization set (optional); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Int_tRooAbsMoment::_orderMoment order; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsMoment::_takeRootReturn n-order root of moment; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxyRooAbsMoment::_xObservable; RooRealProxy_xfX*F; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFirstMoment(); Default constructor. RooFirstM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFirstMoment.html:36906,integrat,integrator,36906,root/html602/RooFirstMoment.html,https://root.cern,https://root.cern/root/html602/RooFirstMoment.html,2,['integrat'],['integrator']
Integrability,"oAbsMoment::_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooSetProxyRooAbsMoment::_nsetNormalization set (optional); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Int_tRooAbsMoment::_orderMoment order; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsMoment::_takeRootReturn n-order root of moment; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxyRooAbsMoment::_xObservable; RooRealProxy_xfX*F; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMoment(); Default constructor. RooMoment(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMoment.html:36982,integrat,integrator,36982,root/html602/RooMoment.html,https://root.cern,https://root.cern/root/html602/RooMoment.html,2,['integrat'],['integrator']
Integrability,"oAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooSetProxydepsdependents of this p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProjectedPdf.html:39638,integrat,integrator,39638,root/html528/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html528/RooProjectedPdf.html,1,['integrat'],['integrator']
Integrability,"oAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPEffDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:41342,integrat,integrator,41342,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,1,['integrat'],['integrator']
Integrability,"oAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPGenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPGenDecay.html:41201,integrat,integrator,41201,root/html528/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPGenDecay.html,1,['integrat'],['integrator']
Integrability,"oAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_double_.html:42523,integrat,integrator,42523,root/html534/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction2PdfBinding_double_double_double_.html,1,['integrat'],['integrator']
Integrability,"oAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tagFlav; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBMixDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBMixDecay.html:42084,integrat,integrator,42084,root/html532/RooBMixDecay.html,https://root.cern,https://root.cern/root/html532/RooBMixDecay.html,1,['integrat'],['integrator']
Integrability,"oAbsReal** gofArray, Int_t nVal) const; Method to combined test statistic results calculated into partitions into; the global result. This default implementation adds the partition return; values. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Catch server redirect calls and forward to internal clone of function. void printCompactTreeHook(ostream& os, const char* indent = """"); Catch print hook function and forward to function clone. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Driver function to propagate constant term optimizations in test statistic.; If code Activate is sent, constant term optimization will be executed.; If code Deacivate is sent, any existing constant term optimizations will; be abanoned. If codes ConfigChange or ValueChange are sent, any existing; constant term optimizations will be redone. void optimizeCaching(); This method changes the value caching logic for all nodes that depends on any of the observables; as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; with a dataset the observables are guaranteed to change with every call, thus there is no point; in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t ); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:36428,depend,depends,36428,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,3,['depend'],['depends']
Integrability,"oAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedPdf.html:41969,integrat,integration,41969,root/html534/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedPdf.html,1,['integrat'],['integration']
Integrability,"oAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenProdProj(); Default constructor. RooGenProdProj(const char* name, const char* title, const RooArgSet& _prodSet, const RooArgSet& _intSet, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenProdProj.html:35780,integrat,integrator,35780,root/html534/RooGenProdProj.html,https://root.cern,https://root.cern/root/html534/RooGenProdProj.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProduct(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgList& _prodSet); Construct fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProduct.html:35191,integrat,integrator,35191,root/html534/RooProduct.html,https://root.cern,https://root.cern/root/html534/RooProduct.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsRealLValue(); Destructor. Bool_t inRange(Double_t value, const char* rangeName, Double_t* clippedValue = 0) const; Return kTRUE if the input val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsRealLValue.html:38810,integrat,integrator,38810,root/html534/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsRealLValue.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsSelfCachedReal(); Destructor. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Fill cache with sampling of function as define",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsSelfCachedReal.html:36588,integrat,integrator,36588,root/html534/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsSelfCachedReal.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedReal.html:36403,integrat,integrator,36403,root/html534/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedReal.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooListProxy_catListAccept/reject categories; RooListProxy_effFuncListEfficiency functions per category; Bool_t_ignoreNonVisibleIgnore combination of only rejects (since invisible). Class Charts. Inheritance; Inherited Members; Incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiBinomial.html:35422,integrat,integrator,35422,root/html534/RooMultiBinomial.html,https://root.cern,https://root.cern/root/html534/RooMultiBinomial.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TIterator*_boundIter! do not persist; RooListProxy_boundaryList; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_t_interpolate; RooRealProxy_x. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStepFunction.html:35325,integrat,integrator,35325,root/html534/RooStepFunction.html,https://root.cern,https://root.cern/root/html534/RooStepFunction.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; RooRealProxy_valueHolder of the blind value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooUnblindPrecision(); Default constructor. RooUnblindPrecision(const char* name, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnblindPrecision.html:35920,integrat,integrator,35920,root/html534/RooUnblindPrecision.html,https://root.cern,https://root.cern/root/html534/RooUnblindPrecision.html,1,['integrat'],['integrator']
Integrability,"oAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooListProxy_setset of terms to be summed; TIterator*_setIter! Iterator over set; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAddition(). RooAddition(const char* name, const char* title, const RooArgList& sumSet, Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddition.html:36809,integrat,integrator,36809,root/html602/RooAddition.html,https://root.cern,https://root.cern/root/html602/RooAddition.html,2,['integrat'],['integrator']
Integrability,"oAbsReal::_treeVar!do not persist; RooBCPEffDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBCPEffDecay(const char* name, const char* title, RooRealVar& t, RooAbsCategory& tag, RooAbsReal& tau, RooAbsReal& dm, RooAbsReal& avgMistag, RooAbsReal& CPeigenval, RooAbsReal& a, RooAbsReal& b, RooAbsReal& effRatio, RooAbsReal& delMistag, const RooResolutionModel& model, RooBCPEffDecay::DecayType type = DoubleSided); Constructor. RooBCPEffDecay(const RooBCPEffDecay& other, const char* name = 0); Copy constructor. ~RooBCPEffDecay(); Destructor. Double_t coefficient(Int_t basisIndex) const; B0 : _tag = +1; B0bar : _tag = -1. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const. void initGenerator(Int_t code). void generateEvent(Int_t code); Generate mix-state dependent. inline RooBCPEffDecay(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooBCPEffDecay(*this,newname) ; }. » Last changed: Tue Jun 2 15:27:53 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooBCPEffDecay.html:48241,depend,dependent,48241,root/html604/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html604/RooBCPEffDecay.html,1,['depend'],['dependent']
Integrability,"oAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealIntegral(). RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); Construct integral of 'function' over observables in 'depList'; in range 'rangeName' with normalization observables 'funcNormSet'; (for p.d.f.s). In the integral is performed to the maximum extent; possible the internal (analytical) integrals advertised by function.; The other integrations are performed numerically. The optional; config object prescribes how these numeric integrations are configured. void autoSelectDirtyMode(); Set appropriate cache operation mode for integral depending on cache operation; mode of server objects. Bool_t servesExclusively(const RooAbsArg* server, const RooArgSet& exclLVBranches, const RooArgSet& allBranches) const; Utility function that returns true if 'object server' is a server; to exactly one of the RooAbsArgs in 'exclLVBranches'. Bool_t initNumIntegrator() const; (Re)Initialize numerical integration engine if necessary. Return kTRUE if; successful, or otherwise kFALSE. RooRealIntegral(const RooRealIntegral& other, const char* name = 0); Copy constructor. ~RooRealIntegral(); Destructor. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const. Double_t getValV(const RooArgSet* set = 0) const; Return value of object. If the cache is clean, return the; cached value, otherwise recalculate on the fly and refill; the cache. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealIntegral.html:37902,integrat,integrations,37902,root/html534/RooRealIntegral.html,https://root.cern,https://root.cern/root/html534/RooRealIntegral.html,3,['integrat'],['integrations']
Integrability,"oAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealIntegral(). RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); Construct integral of 'function' over observables in 'depList'; in range 'rangeName' with normalization observables 'funcNormSet'; (for p.d.f.s). In the integral is performed to the maximum extent; possible the internal (analytical) integrals advertised by function.; The other integrations are performed numerically. The optional; config object prescribes how these numeric integrations are configured. void autoSelectDirtyMode(); Set appropriate cache operation mode for integral depending on cache operation; mode of server objects. Bool_t servesExclusively(const RooAbsArg* server, const RooArgSet& exclLVBranches, const RooArgSet& allBranches) const; Utility function that returns true if 'object server' is a server; to exactly one of the RooAbsArgs in 'exclLVBranches'. Bool_t initNumIntegrator() const; (Re)Initialize numerical integration engine if necessary. Return kTRUE if; successful, or otherwise kFALSE. RooRealIntegral(const RooRealIntegral& other, const char* name = 0); Copy constructor. ~RooRealIntegral(); Destructor. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; Special handling of integral of integral, return RooRealIntegral that represents integral over all dimensions in one pass. Double_t evaluate() const; Perform the integration and r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:34527,integrat,integrations,34527,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,3,['integrat'],['integrations']
Integrability,"oAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealIntegral(). RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); Construct integral of 'function' over observables in 'depList'; in range 'rangeName' with normalization observables 'funcNormSet'; (for p.d.f.s). In the integral is performed to the maximum extent; possible the internal (analytical) integrals advertised by function.; The other integrations are performed numerically. The optional; config object prescribes how these numeric integrations are configured. void autoSelectDirtyMode(); Set appropriate cache operation mode for integral depending on cache operation; mode of server objects. Bool_t servesExclusively(const RooAbsArg* server, const RooArgSet& exclLVBranches, const RooArgSet& allBranches) const; Utility function that returns true if 'object server' is a server; to exactly one of the RooAbsArgs in 'exclLVBranches'. Bool_t initNumIntegrator() const; (Re)Initialize numerical integration engine if necessary. Return kTRUE if; successful, or otherwise kFALSE. RooRealIntegral(const RooRealIntegral& other, const char* name = 0); Copy constructor. ~RooRealIntegral(); Destructor. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; Special handling of integral of integral, return RooRealIntegral that represents integral over all dimensions in one pass. Double_t getValV(const RooArgSet* set = 0) const; Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealIntegral.html:36053,integrat,integrations,36053,root/html532/RooRealIntegral.html,https://root.cern,https://root.cern/root/html532/RooRealIntegral.html,1,['integrat'],['integrations']
Integrability,"oAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:158645,integrat,integration,158645,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integration']
Integrability,"oAddPdf components; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooArgSetRooAbsOptTestStatistic::_cachedNodes! List of nodes that are cached as constant expressions; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*RooAbsOptTestStatistic::_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; static RooArgSet_emptySetSupports named argument constructor; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; RooAbsData::ErrorType_etypeError type store in associated RooDataHist; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooChi2Var::FuncMode_funcModeFunction, P.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChi2Var.html:35593,integrat,integration,35593,root/html532/RooChi2Var.html,https://root.cern,https://root.cern/root/html532/RooChi2Var.html,1,['integrat'],['integration']
Integrability,"oArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to another RooAbsArg. ;  ; bool operator== (double value) const;  Equality operator comparing to a double. ;  ; virtual RooPlot * plotOn (Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:14117,message,message,14117,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,4,['message'],['message']
Integrability,"oArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:14335,message,message,14335,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,64,['message'],['message']
Integrability,"oArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprivatevirtual . Return generator context optimized for generating events from product p.d.f.s. ; Reimplemented from RooAbsPdf.; Definition at line 1695 of file RooProdPdf.cxx. ◆ generateEvent(). void RooProdPdf::generateEvent ; (; Int_t ; code). overridevirtual . Generate a single event with configuration specified by 'code' Defer internal generation to components as encoded in the _genCode registry for given generator code. ; Reimplemented from RooAbsPdf.; Definition at line 1767 of file RooProdPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooProdPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code.; RooProdPdf implements two strategies in implementing analytical integrals; First, PDF components whose entire set of dependents are requested to be integrated can be dropped from the product, as they will integrate out to 1 by construction; Second, RooProdPdf queries each remaining component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all remaining components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooProdPdf. ; Reimplemented from RooAbsReal.; Definition at line 1602 of file RooProdPdf.cxx. ◆ getCacheElem(). RooProdPdf::CacheElem * RooProdPdf::getCacheElem ; (; RooArgSet const * ; nset); const. private . The cache manager. ; Definition at line 355 of file RooProdPdf.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:91760,integrat,integration,91760,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,2,['integrat'],['integration']
Integrability,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:23460,depend,dependents,23460,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,1,['depend'],['dependents']
Integrability,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:37888,depend,dependents,37888,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,153,['depend'],['dependents']
Integrability,"oArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:12918,depend,depend,12918,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,6,['depend'],['depend']
Integrability,"oArgSet& set); virtual voidSetParameters(RooArgSet& set); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidSetPdf(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooAbsArg&) const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); RooStats::ToyMCSamplerToyMCSampler(RooStats::TestStatistic& ts); RooStats::ToyMCSamplerToyMCSampler(const RooStats::ToyMCSampler&). Data Members; private:. Int_tfCountercounter for naming sampling dist objects; const char*fDataNamename of data set in workspace; Bool_tfExtendedif nEvents should fluctuate; RooDataSet*fLastDataSetwork around for memory issues in nllvar->setData(data, noclone); Int_tfNeventsnumber of events per toy (may be ignored depending on settings); Int_tfNtoysnumber of toys to generate; RooArgSet*fNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSet*fObservablesRooArgSet specifying the observables in the dataset (needed to evaluate the test statistic); Bool_tfOwnsWorkspaceflag if this object owns its workspace; RooArgSet*fPOIRooArgSet specifying parameters of interest for interval; const char*fPdfNamename of common PDF in workspace; TRandom*fRandrandom generator; Double_tfSize; RooStats::TestStatistic*fTestStatpointer to the test statistic that is being sampled; TStringfVarNamename of test statistic; RooWorkspace*fWSa workspace that owns all the components to be used by the calculator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ToyMCSampler(TestStatistic &ts). virtual ~ToyMCSampler(). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. SamplingDistribution* GetSamplingDistribution(RooArgSet& allParameters); Main interface to get a SamplingDistribution. RooAbsData* GenerateToyData(RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ToyMCSampler.html:3019,depend,depending,3019,root/html526/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__ToyMCSampler.html,1,['depend'],['depending']
Integrability,"oArgSet* condObs=nullptr) const;; 385 virtual void doEval(RooFit::EvalContext &) const;; 386 ; 387 virtual bool hasGradient() const { return false; }; 388 virtual void gradient(double *) const {; 389 if(!hasGradient()) throw std::runtime_error(""RooAbsReal::gradient(double *) not implemented by this class!"");; 390 }; 391 ; 392 virtual std::string; 393 buildCallToAnalyticIntegral(Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;; 394 ; 395 // PlotOn with command list; 396 virtual RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const ;; 397 ; 398protected:; 399 friend class BatchInterfaceAccessor;; 400 friend class RooVectorDataStore;; 401 friend class RooRealBinding;; 402 friend class RooRealSumPdf;; 403 friend class RooRealSumFunc;; 404 friend class RooAddHelpers;; 405 friend class RooAddPdf;; 406 friend class RooAddModel;; 407 friend class AddCacheElem;; 408 friend class RooFit::EvalContext;; 409 ; 410 // Hook for objects with normalization-dependent parameters interpretation; 411 virtual void selectNormalization(const RooArgSet* depSet=nullptr, bool force=false) ;; 412 virtual void selectNormalizationRange(const char* rangeName=nullptr, bool force=false) ;; 413 ; 414 // Helper functions for plotting; 415 bool plotSanityChecks(RooPlot* frame) const ;; 416 void makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars,; 417 RooArgSet& projectedVars, bool silent) const ;; 418 ; 419 TString integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset=nullptr, const char* rangeName=nullptr, bool omitEmpty=false) const ;; 420 ; 421 void plotOnCompSelect(RooArgSet* selNodes) const ;; 422 RooPlot* plotOnWithErrorBand(RooPlot* frame,const RooFitResult& fr, double Z, const RooArgSet* params, const RooLinkedList& argList, bool method1) const ;; 423 ; 424 // Support interface for subclasses to advertise their analytic integration; 425 // and generator capabilities in their analyticalIntegral() and generateEvent(); 426 // im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:20324,depend,dependent,20324,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['depend'],['dependent']
Integrability,"oArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalpha; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym; RooRealProxym0; RooRealProxyn; RooRealProxysigma.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCBShape.html:39392,integrat,integrator,39392,root/html530/RooCBShape.html,https://root.cern,https://root.cern/root/html530/RooCBShape.html,1,['integrat'],['integrator']
Integrability,"oArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,double>funcFunction pointer reference; RooRealProxyxArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction1Ref<VO,VI> Streamer(TBuffer& ); Custom streamer for function pointer reference object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1Binding_double_double_.html:35522,integrat,integrator,35522,root/html534/RooCFunction1Binding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1Binding_double_double_.html,1,['integrat'],['integrator']
Integrability,"oBase); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. ROOT::ESTLType GetCollectionType() const; Return the 'type' of the STL the TClass is representing.; and return ROOT::kNotSTL if it is not representing an STL collection. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describing the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). ClassConvStreamerFunc_t GetConvStreamerFunc() const; Get a wrapper/accessor function around this class custom conversion streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. TClass * GetClass(ClassInfo_t* info, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClass.html:35820,wrap,wrapper,35820,root/html604/TClass.html,https://root.cern,https://root.cern/root/html604/TClass.html,1,['wrap'],['wrapper']
Integrability,"oBinSamplingPdf.h:110; This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped, depending on the value of precision:; precision < 0.: None of the PDFs are touched, bin sampling is off.; precision = 0.: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision forwarded to the integrator is 1.E-4 (the default argument of the constructor).; precision > 0.: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are fit to (see next paragraph). The same ‘'precision’` is used for all integrators. Simulating a binned fit using RooDataSet; Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to integrate over in this kind of dataset).; In this case, IntegrateBins(>0.) needs to be used, and the desired binning needs to be assigned to the observable of the dataset: RooRealVar x(""x"", ""x"", 0., 5.);; x.setBins(10);; ; // <create dataset and model>; ; model.fitTo(data, IntegrateBins(>0.));; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; xDouble_t x[n]Definition legend1.C:17; See alsoRooAbsPdf::fitTo() . IntegrateBins(); NoteThis feature is currently limited to one-dimensional PDFs.; . Binned fit without RooBinSamplingPdf Binned fit with RooBinSamplingPdf . Definition at line 28 of file RooBinSamplingPdf.h. Public Member Functions;  RooBinSamplingPdf ();  ;  RooBinSamplingPdf (const char *name, const char *title, RooAbsRealLValue &observable, RooAbsPdf &inputPdf, double epsilon=1.E-4);  Construct a new RooBinSamplingPdf. ;  ;  RooBinSamplingPdf (const RooBinSamplingPdf &other, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:3824,integrat,integration,3824,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,2,['integrat'],"['integrate', 'integration']"
Integrability,"oBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:16188,message,message,16188,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,20,['message'],['message']
Integrability,"oClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Bool_t fBdown;  ; TGCanvas * fCanvas;  pointer to canvas ;  ; Bool_t fDragging;  true if in dragging mode ;  ; TGRectangle fExposedRegion;  exposed area ;  ; TString fKeyInput;  keyboard input (buffer) ;  ; TTimer * fKeyTimer;  keyboard timer ;  ; Bool_t fKeyTimerActive;  kTRUE - keyboard timer is active ;  ; TGFrameElement * fLastActiveEl;  last active item ;  ; Bool_t fLastCase;  case sensitivity of last search ;  ; Bool_t fLastDir;  direction of last search ;  ; TString fLastName;  the name of object of last search ;  ; Bool_t fLastSubstring;  substring search option of last search ;  ; const TGWindow * fMsgWindow;  window handling container messages ;  ; Bool_t fOnMouseOver;  kTRUE when mouse pointer is over entry ;  ; Bool_t fScrolling;  kTRUE - when scrolling is ON ;  ; TTimer * fScrollTimer;  autoscroll timer ;  ; Int_t fSelected;  number of selected items ;  ; Int_t fTotal;  total items ;  ; TGViewPort * fViewPort;  container viewport ;  ; Int_t fX0;  ; Int_t fXDND;  ; Int_t fXf;  ; Int_t fXp;  ; Int_t fY0;  corner of rubber band box ;  ; Int_t fYDND;  ; Int_t fYf;  other corner of rubber band box ;  ; Int_t fYp;  previous pointer position ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:33289,message,messages,33289,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['message'],['messages']
Integrability,"oCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:16509,message,messages,16509,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['message'],['messages']
Integrability,"oCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; virtual bool selfNormalized () const;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:14052,message,messages,14052,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['message'],['messages']
Integrability,"oCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:14320,message,messages,14320,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,4,['message'],['messages']
Integrability,"oError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void CopyUpperTriang (const TMatrixDSparse &a, Double_t *b);  Static function, copying the non-zero entries in the upper triangle to array b . ;  ; static void Factor (const Int_t n, const Int_t nz, TArrayI &Airn, TArrayI &Aicn, TArrayD &Aa, TArrayI &Aiw, TArrayI &Aikeep, const Int_t nsteps, Int_t &maxfrt, TArrayI &Aiw1, Int_t *icntl, Double_t *cntl, Int_t *info);  Factorization routine, the workhorse for the decomposition step. ;  ; static void Factor_sub1 (const Int_t n, const Int_t nz, Int_t &nz1, Double_t *a, const Int_t la, Int_t *irn, Int_t *icn, Int_t *iw, const Int_t liw, Int_t *perm, Int_t *iw2, Int_t *icntl, Int_t *info);  Help routine for factorization. ;  ; static void Factor_sub2 (const Int_t n, const Int_t nz, Double_t *a, const Int_t la, Int_t *iw, const Int_t liw, Int_t *perm, Int_t *nstk, const Int_t nsteps, Int_t &maxfrt, Int_t *nelim, Int_t *iw2, Int_t *icntl, Double_t *cntl, Int_t *info);  Help routine for factorization. ;  ; static void Factor_sub3 (Double_t *a, Int_t *iw, Int_t &j1, Int_t &j2, const Int_t itop, const Int_t ireal, Int_t &ncmpbr, Int_t &ncmpbi);  Help routine for factorization. ;  ; static Int_t IDiag (Int_t ix, Int_t iy);  ; static void InitPivot (const Int_t n, const Int_t nz, TArrayI &Airn, TArrayI &Aicn, TArrayI &Aiw, TArrayI &Aikeep, TArrayI &Aiw1, Int_t &nsteps, const Int_t iflag, Int_t *icntl, Double_t *cntl, Int_t *info, Double_t &ops);  Setup Pivoting variables. ;  ; static void InitPivot_sub1 (const Int_t n, const Int_t nz, Int_t *irn, Int_t *icn, Int_t *iw, Int_t *ipe, Int_t *iq, Int_t *flag, Int_t &iwfr, Int_t *icntl, Int_t *info);  Help routine for pivoting setup. ;  ; static void InitPivot_sub2 (const Int_t n, Int_t *ipe, Int_t *iw, const Int_t lw, Int_t &iwfr, Int_t *nv, Int_t *nxt, Int_t *lst, Int_t *ipd, Int_t *flag, const Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:13020,rout,routine,13020,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['rout'],['routine']
Integrability,"oError(int level, const char* location, const char* fmt, va_list va) const; voidInitStreaming(); voidTObject::MakeZombie(). private:. TStreamerBase(const TStreamerBase&); TStreamerBase&operator=(const TStreamerBase&). Data Members; public:. enum TStreamerElement::ESTLtype { kSTL; kSTLstring; kSTLvector; kSTLlist; kSTLdeque; kSTLmap; kSTLmultimap; kSTLset; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; kWholeObject; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; UInt_t&fBaseCheckSum!checksum of the base class (used during memberwise streaming); TClass*fBaseClass!pointer to base class; Int_tfBaseVersionversion number of the base class (used during memberwise streaming); TClass*TStreamerElement::fClassObject!pointer to class of object; TStringfErrorMsg!Error message in case of checksum/version mismatch.; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom streamer member function.; TVirtualStreamerInfo*fStreamerInfo!Pointer to the current StreamerInfo ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStreamerBase.html:8542,message,message,8542,root/html534/TStreamerBase.html,https://root.cern,https://root.cern/root/html534/TStreamerBase.html,1,['message'],['message']
Integrability,"oExpand"",""Request to expand to a negative size, likely due to an integer overflow: 0x%x for a max of 0x%x."", size_needed, kMaxBufferSize);; 162 }; 163 if (size_needed > fBufSize) {; 164 Long64_t doubling = 2LLU * fBufSize;; 165 if (doubling > kMaxBufferSize); 166 doubling = kMaxBufferSize;; 167 if (size_needed > doubling) {; 168 Expand(size_needed);; 169 } else {; 170 Expand(doubling);; 171 }; 172 }; 173}; 174 ; 175////////////////////////////////////////////////////////////////////////////////; 176/// Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; 177/// new buffer is expected to have the same size as the previous buffer.; 178/// The current buffer position is reset to the start of the buffer.; 179/// If the TBuffer owned the previous buffer, it will be deleted prior; 180/// to accepting the new buffer. By default the new buffer will be; 181/// adopted unless adopt is false.; 182///; 183/// If the new buffer is _not_ adopted and no memory allocation routine; 184/// is provided, a Fatal error will be issued if the Buffer attempts to; 185/// expand.; 186 ; 187void TBuffer::SetBuffer(void *buf, UInt_t newsiz, Bool_t adopt, ReAllocCharFun_t reallocfunc); 188{; 189 if (fBuffer && TestBit(kIsOwner)); 190 delete [] fBuffer;; 191 ; 192 if (adopt); 193 SetBit(kIsOwner);; 194 else; 195 ResetBit(kIsOwner);; 196 ; 197 fBuffer = (char *)buf;; 198 fBufCur = fBuffer;; 199 if (newsiz > 0) {; 200 if ( (fMode&kWrite)!=0 ) {; 201 fBufSize = newsiz - kExtraSpace;; 202 } else {; 203 fBufSize = newsiz;; 204 }; 205 }; 206 fBufMax = fBuffer + fBufSize;; 207 ; 208 SetReAllocFunc( reallocfunc );; 209 ; 210 if (buf && ( (fMode&kWrite)!=0 ) && fBufSize < 0) {; 211 Expand( kMinimalSize );; 212 }; 213}; 214 ; 215////////////////////////////////////////////////////////////////////////////////; 216/// Expand (or shrink) the I/O buffer to newsize bytes.; 217/// If copy is true (the default), the existing content of the; 218/// buffer is preserved, otherwise the buffer is re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:6409,rout,routine,6409,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['rout'],['routine']
Integrability,"oFactoryWSTool::as_VARLV ; (; UInt_t ; idx). inlinestatic . Definition at line 93 of file RooFactoryWSTool.h. ◆ asARG(). RooAbsArg & RooFactoryWSTool::asARG ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. ; Definition at line 1528 of file RooFactoryWSTool.cxx. ◆ asCAT(). RooCategory & RooFactoryWSTool::asCAT ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. ; Definition at line 1680 of file RooFactoryWSTool.cxx. ◆ asCATFUNC(). RooAbsCategory & RooFactoryWSTool::asCATFUNC ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. ; Definition at line 1643 of file RooFactoryWSTool.cxx. ◆ asCATLV(). RooAbsCategoryLValue & RooFactoryWSTool::asCATLV ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. ; Definition at line 1661 of file RooFactoryWSTool.cxx. ◆ asDATA(). RooAbsData & RooFactoryWSTool::asDATA ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. ; Definition at line 1781 of file RooFactoryWSTool.cxx. ◆ asDHIST(). RooDataHist & RooFactoryWSTool::asDHIST ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. ; Definition at line 1795 of file RooFactoryWSTool.cxx. ◆ asDOUBLE(). double RooFactoryWSTool::asDOUBLE ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as double. ; Definition at line 1882 of file RooFactoryWSTool.cxx. ◆ asDSET(). RooDataSet & RooFactoryWSTool::asDSET ; (; const char * ; arg). CINT constructor interface, return constructor string argument #idx as RooDataSet object found in workspace. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:25815,interface,interface,25815,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['interface'],['interface']
Integrability,"oFit passes an error to the minimiser, which might try to recover.; ; import ROOT; ; ; # Create a fit model:; # The polynomial is notoriously unstable, because it can quickly go negative.; # Since PDFs need to be positive, one often ends up with an unstable fit model.; x = ROOT.RooRealVar(""x"", ""x"", -15, 15); a1 = ROOT.RooRealVar(""a1"", ""a1"", -0.5, -10.0, 20.0); a2 = ROOT.RooRealVar(""a2"", ""a2"", 0.2, -10.0, 20.0); a3 = ROOT.RooRealVar(""a3"", ""a3"", 0.01); pdf = ROOT.RooPolynomial(""pol3"", ""c + a1 * x + a2 * x*x + 0.01 * x*x*x"", x, [a1, a2, a3]); ; # Create toy data with all-positive coefficients:; data = pdf.generate(x, 10000); ; # For plotting.; # We create pointers to the plotted objects. We want these objects to leak out of the function,; # so we can still see them after it returns.; c = ROOT.TCanvas(); frame = x.frame(); data.plotOn(frame, Name=""data""); ; # Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:; ROOT.RooMsgService.instance().getStream(0).removeTopic(ROOT.RooFit.Plotting); ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Plotting); ; ; # RooFit before ROOT 6.24; # --------------------------------; # Before 6.24, RooFit wasn't able to recover from invalid parameters. The minimiser just errs around; # the starting values of the parameters without finding any improvement.; ; # Set up the parameters such that the PDF would come out negative. The PDF is now undefined.; a1.setVal(10.0); a2.setVal(-1.0); ; # Perform a fit:; fitWithoutRecovery = pdf.fitTo(; data,; Save=True,; RecoverFromUndefinedRegions=0.0, # This is how RooFit behaved prior to ROOT 6.24; PrintEvalErrors=-1, # We are expecting a lot of evaluation errors. -1 switches off printing.; PrintLevel=-1,; ); ; pdf.plotOn(frame, LineColor=""r"", Name=""noRecovery""); ; ; # RooFit since ROOT 6.24; # --------------------------------; # The minimiser gets information about the ""badne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:1752,message,messages,1752,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,2,['message'],"['message', 'messages']"
Integrability,"oFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:26436,depend,depend,26436,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,2,['depend'],['depend']
Integrability,"oImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent);  Initialize a TClass object. ;  ; bool IsClassStructOrUnion () const;  ; void LoadClassInfo () const;  Try to load the ClassInfo if available. ;  ; void MoveAddressInRepository (const char *where, void *oldadd, void *newadd, const TClass *what) const;  ; TClass & operator= (const TClass &)=delete;  ; void RegisterAddressInRepository (const char *where, void *location, const TClass *what) const;  ; void SetClassSize (Int_t sizof);  ; void SetClassVersion (Version_t version);  Private function. ;  ; void SetRuntimeProperties ();  Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ;  ; void SetStreamerImpl ();  Internal routine to set fStreamerImpl based on the value of fStreamerType. ;  ; void UnregisterAddressInRepository (const char *where, void *location, const TClass *what) const;  . Static Private Member Functions; static void ConvStreamerInstrumented (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of instrumented class with a library. ;  ; static DeclIdMap_t * GetDeclIdMap ();  ; static IdMap_t * GetIdMap ();  ; static Bool_t HasNoInfoOrEmuOrFwdDeclaredDecl (const char *);  ; static TClass * LoadClassCustom (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static TClass * LoadClassDefault (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static void StreamerDefault (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Default streaming in cases where either we have no way to know what to do or if Property() has not yet been called. ;  ; static void StreamerExter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:41245,rout,routine,41245,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,2,['rout'],['routine']
Integrability,"oIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax,				const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:9671,integrat,integration,9671,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,1,['integrat'],['integration']
Integrability,"oLinkedList_listActual object store; TString_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_t_ownContFlag to identify a list that owns its contents.; TNamed*_structureTag! Structure tag; TNamed*_typedStructureTag! Typed structure tag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCollection(); Destructor. RooLinkedListIter iterator(Bool_t dir = kIterForward) const. void safeDeleteList(); Examine client server dependencies in list and; delete contents in safe order: any client; is deleted before a server is deleted. RooAbsCollection* snapshot(Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; Take a snap shot of current collection contents:; An owning collection is returned containing clones of. - Elements in this collection; - External dependents of all elements; and recursively any dependents of those dependents; (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned; list elements and the cloned external dependents are reconnected to; each other, making the snapshot a completely self-contained entity. Bool_t addServerClonesToList(const RooAbsArg& var); Add clones of servers of given argument to list. RooAbsCollection & operator=(const RooAbsCollection& other); The assignment operator sets the value of any argument in our set; that also appears in the other set. RooAbsCollection & assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCollection.html:10736,depend,dependents,10736,root/html534/RooAbsCollection.html,https://root.cern,https://root.cern/root/html534/RooAbsCollection.html,1,['depend'],['dependents']
Integrability,"oMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumFunc;  CCacheElem;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:118569,integrat,integrations,118569,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['integrat'],['integrations']
Integrability,"oMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:102412,integrat,integrations,102412,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['integrat'],['integrations']
Integrability,"oName () const final;  Return the file name of the current un-included interpreted file. ;  ; std::vector< std::string > GetUsingNamespaces (ClassInfo_t *cl) const final;  Get the scopes representing using declarations of namespace. ;  ; void HandleNewDecl (const void *DV, bool isDeserialized, std::set< TClass * > &modifiedClasses);  ; Bool_t HasPCMForLibrary (const char *libname) const final;  Return true if ROOT has cxxmodules pcm for a given library name. ;  ; virtual void Initialize () final;  Initialize the interpreter, once TROOT::fInterpreter is set. ;  ; void InspectMembers (TMemberInspector &, const void *obj, const TClass *cl, Bool_t isTransient) final;  Visit all members over members, recursing over base classes. ;  ; void InvalidateGlobal (const clang::Decl *D);  Invalidate cached TCling information for the given global declaration. ;  ; Bool_t IsAutoLoadNamespaceCandidate (const clang::NamespaceDecl *nsDecl);  ; Bool_t IsAutoParsingSuspended () const final;  ; Bool_t IsErrorMessagesEnabled () const final;  If error messages are disabled, the interpreter should suppress its failures and warning messages from stdout. ;  ; bool IsFloatingType (const void *QualTypePtr) const;  ; bool IsIntegerType (const void *QualTypePtr) const;  ; Bool_t IsLibraryLoaded (const char *libname) const final;  ; Bool_t IsLoaded (const char *filename) const final;  Return true if the file has already been loaded by cint. ;  ; bool IsPointerType (const void *QualTypePtr) const;  ; Bool_t IsProcessLineLocked () const final;  ; bool IsSameType (const void *QualTypePtr1, const void *QualTypePtr2) const;  ; bool IsSignedIntegerType (const void *QualTypePtr) const;  ; bool IsUnsignedIntegerType (const void *QualTypePtr) const;  ; bool IsVoidPointerType (const void *QualTypePtr) const;  ; void * LazyFunctionCreatorAutoload (const std::string &mangled_name);  Autoload a library based on a missing symbol. ;  ; void LibraryLoaded (const void *dyLibHandle, const char *canonicalName);  ; bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:22507,message,messages,22507,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,2,['message'],['messages']
Integrability,"oNode::SetInvisible ; (; ). inline . Definition at line 123 of file TGeoNode.h. ◆ SetMotherVolume(). void TGeoNode::SetMotherVolume ; (; TGeoVolume * ; mother). inline . Definition at line 125 of file TGeoNode.h. ◆ SetNumber(). void TGeoNode::SetNumber ; (; Int_t ; number). inline . Definition at line 118 of file TGeoNode.h. ◆ SetOverlapping(). void TGeoNode::SetOverlapping ; (; Bool_t ; flag = kTRUE). inline . Definition at line 120 of file TGeoNode.h. ◆ SetOverlaps(). void TGeoNode::SetOverlaps ; (; Int_t * ; ovlp, . Int_t ; novlp . ). set the list of overlaps for this node (ovlp must be created with operator new) ; Definition at line 707 of file TGeoNode.cxx. ◆ SetUserExtension(). void TGeoNode::SetUserExtension ; (; TGeoExtension * ; ext). Connect user-defined extension to the node. ; The node ""grabs"" a copy, so the original object can be released by the producer. Release the previously connected extension if any.; NOTE: This interface is intended for user extensions and is guaranteed not to be used by TGeo ; Definition at line 500 of file TGeoNode.cxx. ◆ SetVirtual(). void TGeoNode::SetVirtual ; (; ). inline . Definition at line 121 of file TGeoNode.h. ◆ SetVisibility(). void TGeoNode::SetVisibility ; (; Bool_t ; vis = kTRUE). overridevirtual . Set visibility of the node (obsolete). ; Reimplemented from TGeoAtt.; Definition at line 718 of file TGeoNode.cxx. ◆ SetVolume(). void TGeoNode::SetVolume ; (; TGeoVolume * ; volume). inline . Definition at line 117 of file TGeoNode.h. ◆ Streamer(). void TGeoNode::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoNodeMatrix, and TGeoNodeOffset. ◆ StreamerNVirtual(). void TGeoNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 145 of file TGeoNode.h. ◆ VisibleDaughters(). void TGeoNode::VisibleDaughters ; (; Bool_t ; vis = kTRUE). Set visibility of the daughters (obsolete). ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNode.html:35068,interface,interface,35068,doc/master/classTGeoNode.html,https://root.cern,https://root.cern/doc/master/classTGeoNode.html,1,['interface'],['interface']
Integrability,"oNumGenFactory(); RooNumGenFactory(const RooNumGenFactory& other); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static RooNumGenFactory*_instance; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototyp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:6435,rout,routine,6435,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,5,['rout'],['routine']
Integrability,"oNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooSetProxy_varSetNot used anymore?; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooConvCoefVar(const char* name, const char* title, const RooAbsAnaConvPdf& input, Int_t coefIdx, const RooArgSet* varList = 0); Constuctor given a RooAbsAnaConvPdf a coefficient index and a set with the; convoluted observable(s). RooConvCoefVar(const RooConvCoefVar& other, const char* name = 0); Copy constructor. Double_t getVal(const RooArgSet* nset = 0) const; Return value of chosen coefficient. Double_t evaluate() const; Return value of chosen coefficient. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Return analytical integration capabilities of chosen coefficient. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return analytical integral of chosen coefficient. inline RooConvCoefVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooConvCoefVar(*this,newname); }. virtual ~RooConvCoefVar(); Destructor. » Last changed: Mon Dec 7 13:47:15 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConvCoefVar.html:33112,integrat,integration,33112,root/html526/RooConvCoefVar.html,https://root.cern,https://root.cern/root/html526/RooConvCoefVar.html,1,['integrat'],['integration']
Integrability,"oNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooSetProxy_varSetNot used anymore?; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooConvCoefVar(const char* name, const char* title, const RooAbsAnaConvPdf& input, Int_t coefIdx, const RooArgSet* varList = 0); Constuctor given a RooAbsAnaConvPdf a coefficient index and a set with the; convoluted observable(s). RooConvCoefVar(const RooConvCoefVar& other, const char* name = 0); Copy constructor. Double_t getVal(const RooArgSet* nset = 0) const; Return value of chosen coefficient. Double_t evaluate() const; Return value of chosen coefficient. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Return analytical integration capabilities of chosen coefficient. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return analytical integral of chosen coefficient. inline RooConvCoefVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooConvCoefVar(*this,newname); }. virtual ~RooConvCoefVar(); Destructor. » Last changed: Mon Jul 4 15:22:33 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooConvCoefVar.html:33870,integrat,integration,33870,root/html530/RooConvCoefVar.html,https://root.cern,https://root.cern/root/html530/RooConvCoefVar.html,1,['integrat'],['integration']
Integrability,"oNumIntFactory.h. Classes; struct  PluginInfo;  . Public Types; using Creator = std::function< std::unique_ptr< RooAbsIntegrator >(RooAbsFunc const &function, const RooNumIntConfig &config)>;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooNumIntFactory (const RooNumIntFactory &other)=delete;  ; std::unique_ptr< RooAbsIntegrator > createIntegrator (RooAbsFunc &func, const RooNumIntConfig &config, int ndim=0, bool isBinned=false) const;  Construct a numeric integrator instance that operates on function 'func' and is configured with 'config'. ;  ; std::string getIntegratorName (RooAbsFunc &func, const RooNumIntConfig &config, int ndim=0, bool isBinned=false) const;  ; TClass * IsA () const override;  ; bool registerPlugin (std::string const &name, Creator const &creator, const RooArgSet &defConfig, bool canIntegrate1D, bool canIntegrate2D, bool canIntegrateND, bool canIntegrateOpenEnded, const char *depName="""");  Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depends. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntFactory.html:1928,integrat,integrator,1928,doc/master/classRooNumIntFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumIntFactory.html,1,['integrat'],['integrator']
Integrability,"oObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_t_relParam; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistConstraint.html:42320,integrat,integrator,42320,root/html534/RooHistConstraint.html,https://root.cern,https://root.cern/root/html534/RooHistConstraint.html,1,['integrat'],['integrator']
Integrability,"oParamHistFunc(const char* name, const char* title, RooDataHist& dh, const RooParamHistFunc& paramSource, Bool_t paramRelative = kTRUE). RooParamHistFunc(const RooParamHistFunc& other, const char* name = 0). Double_t evaluate() const. Double_t getActual(Int_t ibin). void setActual(Int_t ibin, Double_t newVal). Double_t getNominal(Int_t ibin) const. Double_t getNominalError(Int_t ibin) const. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. RooParamHistFunc(); {}. TObject* clone(const char* newname) const; { return new RooParamHistFunc(*this,newname); }. virtual ~RooParamHistFunc(); { }. Bool_t isBinnedDistribution(const RooArgSet& ) const; { return kTRUE ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. const RooArgList& paramList() const; { return _p ; }. » Last changed: Tue Jun 30 14:34:46 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooParamHistFunc.html:39072,integrat,integrations,39072,root/html602/RooParamHistFunc.html,https://root.cern,https://root.cern/root/html602/RooParamHistFunc.html,2,['integrat'],"['integrations', 'integrators']"
Integrability,"oParamHistFunc(const char* name, const char* title, RooDataHist& dh, const RooParamHistFunc& paramSource, Bool_t paramRelative = kTRUE). RooParamHistFunc(const RooParamHistFunc& other, const char* name = 0). Double_t evaluate() const. Double_t getActual(Int_t ibin). void setActual(Int_t ibin, Double_t newVal). Double_t getNominal(Int_t ibin) const. Double_t getNominalError(Int_t ibin) const. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. RooParamHistFunc(); {}. TObject* clone(const char* newname) const; { return new RooParamHistFunc(*this,newname); }. virtual ~RooParamHistFunc(); { }. Bool_t isBinnedDistribution(const RooArgSet& ) const; { return kTRUE ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. const RooArgList& paramList() const; { return _p ; }. » Last changed: Tue Mar 10 17:18:21 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooParamHistFunc.html:37562,integrat,integrations,37562,root/html534/RooParamHistFunc.html,https://root.cern,https://root.cern/root/html534/RooParamHistFunc.html,2,['integrat'],"['integrations', 'integrators']"
Integrability,oPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumGenConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumGenConfig(); Constructor. ~RooNumGenConfig(); Destructor. RooNumGenConfig(const RooNumGenConfig& other); Copy constructor. RooNumGenConfig& operator=(const Ro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:8765,integrat,integration,8765,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,2,['integrat'],['integration']
Integrability,"oPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooArgSet_actual! Set of actual dependents; Bool_t_compiledFlag set if formula is compiled; Bool_t_isOKIs internal state OK?; RooLinkedList_labelListList of label names for category objects; static Int_tRooPrintable::_nameLength; RooArgSet*_nset; RooLinkedList_origList! Original list of dependents; vector<Bool_t>_useIsCat! Is given slot in _useList a category?; RooLinkedList_useList! List of actual dependents; TBitsTFormula::fAlreadyFound! cache for information; Double_t*TFormula::fConst[fNconst] Array of fNconst formula constants; TString*TFormula::fExpr[fNoper] List of expressions; TString*TFormula::fExprOptimized![fNOperOptimized] List of expressions; TObjArrayTFormula::fFunctionsArray of function calls to make; TObjArrayTFormula::fLinearPartsLinear parts if the formula is linear (contains '|' or ""++""); Int_tTFormula::fNOperOptimized!Number of operators after optimization; TStringTNamed::fNameobject identifier; TString*TFormula::fNames[fNpar] Array of parameter names; Int_tTFormula::fNconstNumber of constants; Int_tTFormula::fNdimDimension of function (1=1-Dim, 2=2-Dim,etc); Int_tTFormula::fNoperNumber of operators; Int_tTFormula::fNparNumber of parameters; Int_tTFormula::fNstringNumber of different constants character strings; Int_tTFormula::fNumberformula number identifier; Int_tTFormula::fNvalNumber of different variables in expression; TOperOffset*TFormula::fOperOffset![fNOperOptimized] Offsets of operrands; Int_t*TFormula::fOperOptimized![fNOperOptimized] List of operators. (See documentation for changes made at version 7); TFormula::TFuncGTFormula::fOptimal!pointer to optimal function; Double_t*TFormula::fParams[fNpar] Array of fNpar parameters; TFormulaPrimitive**TFormula::fPredefined![fNPar] predefined function; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFormula.html:12568,depend,dependents,12568,root/html602/RooFormula.html,https://root.cern,https://root.cern/root/html602/RooFormula.html,3,['depend'],['dependents']
Integrability,"oRealAnalytic(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Bool_tRooRealBinding::_clipInvalid; Int_t_code; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*RooRealBinding::_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*RooRealBinding::_nset; const TNamed*RooRealBinding::_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**RooRealBinding::_vars; Double_t*RooRealBinding::_xsave; Bool_tRooRealBinding::_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t operator()(const Double_t* xvector) const; Evaluate our analytic integral at the specified values of the dependents. inline RooRealAnalytic(const RooAbsReal& func, const RooArgSet& vars, Int_t code, const RooArgSet* normSet = 0, const TNamed* rangeName = 0); { }. virtual ~RooRealAnalytic(); { }. » Last changed: Mon Dec 7 13:48:49 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealAnalytic.html:2276,depend,dependents,2276,root/html526/RooRealAnalytic.html,https://root.cern,https://root.cern/root/html526/RooRealAnalytic.html,1,['depend'],['dependents']
Integrability,"oRealProxy_nllInput -log(L) function; RooSetProxy_obsParameters of profile likelihood; RooArgSet_obsAbsMinObservable values at absolute minimum; TIterator*_oiter! Iterator of profile likelihood output parameter(s); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_parMarginialized parameters of likelihood; RooArgSet_paramAbsMinParameter values at absolute minimum; map<std::string,bool>_paramFixedParameter constant status at last time of use; TIterator*_piter! Iterator over profile likelihood parameters to be minimized ; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_t_startFromMinAlways start minimization for global minimum?; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProfileLL.html:33944,integrat,integrator,33944,root/html532/RooProfileLL.html,https://root.cern,https://root.cern/root/html532/RooProfileLL.html,1,['integrat'],['integrator']
Integrability,"oRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; RooSetProxy_facListSet of observables on which function does not depends, which are integrated nevertheless; TIterator*_facListIter! Iterator over factorizing observables; RooArgSet_facListOwnedOwned components in _facList; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooArgSet*_funcNormSetOptional normalization set passed to function; RooRealProxy_functionFunction being integration; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooNumIntConfig*_iconfig; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooSetProxy_intListSet of continuous observables over which is integrated numerically; RooRealIntegral::IntOperMode_intOperModeintegration operation mode; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; RooSetProxy_jacListSet of lvalue observables over which is analytically integration that have a non-unit Jacobian; TIterator*_jacListIter! Iterator over lvalue observables with Jacobian; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_mode; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealIntegral.html:32449,integrat,integration,32449,root/html532/RooRealIntegral.html,https://root.cern,https://root.cern/root/html532/RooRealIntegral.html,4,['integrat'],"['integrated', 'integration']"
Integrability,"oSegmentedIntegrator1D::_range; Bool_tRooSegmentedIntegrator1D::_useIntegrandLimits; Bool_tRooSegmentedIntegrator1D::_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; RooSegmentedIntegrator1D*_xIntegrator; RooAbsFunc*_xint; Double_tRooSegmentedIntegrator1D::_xmax; Double_tRooSegmentedIntegrator1D::_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator2D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator2D(); Default constructor. RooSegmentedIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooSegmentedIntegrator2D(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. RooSegmentedIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 2 15:33:42 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooSegmentedIntegrator2D.html:8765,integrat,integration,8765,root/html604/RooSegmentedIntegrator2D.html,https://root.cern,https://root.cern/root/html604/RooSegmentedIntegrator2D.html,1,['integrat'],['integration']
Integrability,"oStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the resu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:1249,interface,interface,1249,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['interface'],['interface']
Integrability,"oStats::UpperLimitMCSModule& other); RooStats::UpperLimitMCSModuleUpperLimitMCSModule(const RooArgSet* poi, Double_t CL = 0.94999999999999996); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. RooArgSet*RooAbsMCStudyModule::allDependents(); Bool_tRooAbsMCStudyModule::binGenData(); RooArgSet*RooAbsMCStudyModule::dependents(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tRooAbsMCStudyModule::extendedGen(); RooArgSet*RooAbsMCStudyModule::fitInitParams(); RooAbsPdf*RooAbsMCStudyModule::fitModel(); const char*RooAbsMCStudyModule::fitOptions(); RooLinkedList*RooAbsMCStudyModule::fitOptList(); RooArgSet*RooAbsMCStudyModule::fitParams(); RooAbsGenContext*RooAbsMCStudyModule::genContext(); RooArgSet*RooAbsMCStudyModule::genInitParams(); RooAbsPdf*RooAbsMCStudyModule::genModel(); RooArgSet*RooAbsMCStudyModule::genParams(); const RooDataSet*RooAbsMCStudyModule::genProtoData(); RooAbsData*RooAbsMCStudyModule::genSample(); voidTObject::MakeZombie(); RooRealVar*RooAbsMCStudyModule::nllVar(); Double_tRooAbsMCStudyModule::numExpGen(); RooArgSet*RooAbsMCStudyModule::projDeps(); Bool_tRooAbsMCStudyModule::randProto(); RooFitResult*RooAbsMCStudyModule::refit(RooAbsData* inGenSample = 0); Bool_tRooAbsMCStudyModule::verboseGen(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__UpperLimitMCSModule.html:5775,depend,dependents,5775,root/html602/RooStats__UpperLimitMCSModule.html,https://root.cern,https://root.cern/root/html602/RooStats__UpperLimitMCSModule.html,2,['depend'],['dependents']
Integrability,"oTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); RooStats::CombinedCalculatorCombinedCalculator(); RooStats::CombinedCalculatorCombinedCalculator(const RooStats::CombinedCalculator&); RooStats::CombinedCalculatorCombinedCalculator(RooAbsData& data, const RooStats::ModelConfig& model, Double_t size = 0.050000000000000003); RooStats::CombinedCalculatorCombinedCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.050000000000000003, const RooArgSet* nullParams = 0, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__CombinedCalculator.html:1447,interface,interface,1447,root/html602/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__CombinedCalculator.html,2,['interface'],['interface']
Integrability,"oTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::HypoTestResult*GetHypoTest() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::CombinedCalculator&operator=(const RooStats::CombinedCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig&); virtual voidSetAlternateParameters(const RooArgSet& set); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__CombinedCalculator.html:1445,interface,interface,1445,root/html526/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__CombinedCalculator.html,5,['interface'],['interface']
Integrability,"oUpper()Change string to upper case.Definition TString.cxx:1195; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TVectorTTVectorT.Definition TVectorT.h:27; TVectorT::ResizeToTVectorT< Element > & ResizeTo(Int_t lwb, Int_t upb)Resize the vector to [lwb:upb] .Definition TVectorT.cxx:294; bool; double; int; unsigned int; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMatrixTAutoloadOps::operator!=TMatrixT< Element > operator!=(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 != source2Definition TMatrixT.cxx:2842; TMatrixTAutoloadOps::AMultBtvoid AMultBt(const Element *const ap, Int_t na, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp)Elementary routine to calculate matrix multiplication A*B^T.Definition TMatrixT.cxx:3128; TMatrixTAutoloadOps::AMultBvoid AMultB(const Element *const ap, Int_t na, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp)Elementary routine to calculate matrix multiplication A*B.Definition TMatrixT.cxx:3081; TMatrixTAutoloadOps::operator+TMatrixT< Element > operator+(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)operation this = source1+source2Definition TMatrixT.cxx:2303; TMatrixTAutoloadOps::AtMultBvoid AtMultB(const Element *const ap, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp)Elementary routine to calculate matrix multiplication A^T*B.Definition TMatrixT.cxx:3104; TMatrixTAutoloadOps::operator>=TMatrixT< Element > operator>=(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 >= source2Definition TMatrixT.cxx:2649; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:138829,rout,routine,138829,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['rout'],['routine']
Integrability,"o_t *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch) final;  Return pointer to cling interface function for a method of a class with a certain prototype, i.e. ;  ; DeclId_t GetFunctionWithValues (ClassInfo_t *cl, const char *method, const char *params, Bool_t objectIsConst=kFALSE) final;  Return pointer to cling DeclId for a method of a class with a certain prototype, i.e. ;  ; const char * GetIncludePath () final;  Refresh the list of include paths known to the interpreter and return it with -I prepended. ;  ; void * GetInterfaceMethod (TClass *cl, const char *method, const char *params, Bool_t objectIsConst=kFALSE) final;  Return pointer to cling interface function for a method of a class with parameters params (params is a string of actual arguments, not formal ones). ;  ; void * GetInterfaceMethodWithPrototype (TClass *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch) final;  Return pointer to cling interface function for a method of a class with a certain prototype, i.e. ;  ; unsigned long long GetInterpreterStateMarker () const final;  ; void GetInterpreterTypeName (const char *name, std::string &output, Bool_t full=kFALSE) final;  The 'name' is known to the interpreter, this function returns the internal version of this name (usually just resolving typedefs) This is used in particular to synchronize between the name used by rootcling and by the run-time environment (TClass) Return 0 if the name is not known. ;  ; TString GetMangledName (TClass *cl, const char *method, const char *params, Bool_t objectIsConst=kFALSE) final;  Return the cling mangled name for a method of a class with parameters params (params is a string of actual arguments, not formal ones). ;  ; TString GetMangledNameWithPrototype (TClass *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:19368,interface,interface,19368,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['interface'],['interface']
Integrability,"o_t* ) const; {return 0;}. std::string MethodInfo_TypeNormalizedName(MethodInfo_t* ) const; {return """";}. const char * MethodInfo_Title(MethodInfo_t* ) const; {return 0;}. void MethodArgInfo_Delete(MethodArgInfo_t* ) const; MethodArgInfo interface. {;}. MethodArgInfo_t * MethodArgInfo_Factory() const; {return 0;}. MethodArgInfo_t * MethodArgInfo_Factory(MethodInfo_t* ) const; {return 0;}. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* ) const; {return 0;}. Bool_t MethodArgInfo_IsValid(MethodArgInfo_t* ) const; {return 0;}. int MethodArgInfo_Next(MethodArgInfo_t* ) const; {return 0;}. Long_t MethodArgInfo_Property(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. std::string MethodArgInfo_TypeNormalizedName(MethodArgInfo_t* ) const. void TypeInfo_Delete(TypeInfo_t* ) const; TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(const char* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; {return 0;}. void TypeInfo_Init(TypeInfo_t* , const char* ) const; {;}. Bool_t TypeInfo_IsValid(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_Name(TypeInfo_t* ) const; {return 0;}. Long_t TypeInfo_Property(TypeInfo_t* ) const; {return 0;}. int TypeInfo_RefType(TypeInfo_t* ) const; {return 0;}. int TypeInfo_Size(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_TrueName(TypeInfo_t* ) const; {return 0;}. void TypedefInfo_Delete(TypedefInfo_t* ) const; TypedefInfo interface. {;}. TypedefInfo_t * TypedefInfo_Factory() const; {return 0;}. TypedefInfo_t * TypedefInfo_Factory(const char* ) const; {return 0;}. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* ) const; {return 0;}. void TypedefInfo_Init(TypedefInfo_t* , const char* ) const; {;}. Bool_t TypedefInfo_IsVal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:43308,interface,interface,43308,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['interface'],['interface']
Integrability,"oadcastGroupPriority(const char* grp, Int_t priority, TProof::ESlaves list = kAllUnique); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. void ResetMergePrg(); Reset the merge progress notificator. Int_t Broadcast(const TMessage& mess, TList* slaves); Broadcast a message to all slaves in the specified list. Returns; the number of slaves the message was successfully sent to.; Returns -1 in case of error. Int_t Broadcast(const TMessage& mess, TProof::ESlaves list = kActive); Broadcast a message to all slaves in the specified list (either; all slaves or only the active slaves). Returns the number of slaves; the message was successfully sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind, TList* slaves); Broadcast a character string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slave",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:39588,message,message,39588,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['message'],['message']
Integrability,"oam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0); init PDEFoam objects. MethodPDEFoam(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDEFoam can handle classification with multiple classes and regression; with one or more regression-targets. void Init( void ); default initialization called by all constructors. void DeclareOptions(). Declare MethodPDEFoam options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process user options. ~MethodPDEFoam( void ); destructor. void CalcXminXmax(); Determine foam range [fXmin, fXmax] for all dimensions, such; that a fraction of 'fFrac' events lie outside the foam. void Train( void ); Train PDE-Foam depending on the set options. void TrainSeparatedClassification(); Creation of 2 separated foams: one for signal events, one for; backgound events. At the end the foam cells of fFoam[0] will; contain the average number of signal events and fFoam[1] will; contain the average number of background events. void TrainUnifiedClassification(); Create only one unified foam (fFoam[0]) whose cells contain the; average discriminator (N_sig)/(N_sig + N_bg). void TrainMultiClassification(); Create one unified foam (see TrainUnifiedClassification()) for; each class, where the cells of foam i (fFoam[i]) contain the; average fraction of events of class i, i.e. D = number events of class i / total number of events. void TrainMonoTargetRegression(); Training one (mono target regression) foam, whose cells contain; the average 0th target. The dimension of the foam = number of; non-targets (= number of variables). void TrainMultiTargetRegression(); Training one (multi target regression) foam, whose cell",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodPDEFoam.html:20312,depend,depending,20312,root/html534/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodPDEFoam.html,1,['depend'],['depending']
Integrability,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4686,interface,interface,4686,root/html602/ROOT__Math__SVector_float_2_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html,4,['interface'],['interface']
Integrability,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4686,interface,interface,4686,root/html602/ROOT__Math__SVector_float_3_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html,4,['interface'],['interface']
Integrability,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4686,interface,interface,4686,root/html602/ROOT__Math__SVector_float_4_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html,4,['interface'],['interface']
Integrability,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4686,interface,interface,4686,root/html602/ROOT__Math__SVector_float_5_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html,4,['interface'],['interface']
Integrability,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4686,interface,interface,4686,root/html602/ROOT__Math__SVector_float_6_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html,4,['interface'],['interface']
Integrability,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4686,interface,interface,4686,root/html602/ROOT__Math__SVector_float_7_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html,4,['interface'],['interface']
Integrability,"oat& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2>&Unit(). Data Members; public:. enum { kSize; };. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array(); return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i); read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i); read-only access of vector elements. Index starts from 0. const T& At(unsigned int i); read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SVector_float_2_.html:4662,interface,interface,4662,root/html526/ROOT__Math__SVector_float_2_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SVector_float_2_.html,1,['interface'],['interface']
Integrability,"oat& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3>&Unit(). Data Members; public:. enum { kSize; };. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array(); return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i); read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i); read-only access of vector elements. Index starts from 0. const T& At(unsigned int i); read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SVector_float_3_.html:4752,interface,interface,4752,root/html526/ROOT__Math__SVector_float_3_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SVector_float_3_.html,1,['interface'],['interface']
Integrability,"oat& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4>&Unit(). Data Members; public:. enum { kSize; };. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array(); return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i); read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i); read-only access of vector elements. Index starts from 0. const T& At(unsigned int i); read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SVector_float_4_.html:4662,interface,interface,4662,root/html526/ROOT__Math__SVector_float_4_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SVector_float_4_.html,1,['interface'],['interface']
Integrability,"oat& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5>&Unit(). Data Members; public:. enum { kSize; };. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array(); return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i); read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i); read-only access of vector elements. Index starts from 0. const T& At(unsigned int i); read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SVector_float_5_.html:4662,interface,interface,4662,root/html526/ROOT__Math__SVector_float_5_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SVector_float_5_.html,1,['interface'],['interface']
Integrability,"oat& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6>&Unit(). Data Members; public:. enum { kSize; };. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array(); return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i); read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i); read-only access of vector elements. Index starts from 0. const T& At(unsigned int i); read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SVector_float_6_.html:4752,interface,interface,4752,root/html526/ROOT__Math__SVector_float_6_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SVector_float_6_.html,1,['interface'],['interface']
Integrability,"oat& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7>&Unit(). Data Members; public:. enum { kSize; };. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array(); return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i); read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i); read-only access of vector elements. Index starts from 0. const T& At(unsigned int i); read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SVector_float_7_.html:4752,interface,interface,4752,root/html526/ROOT__Math__SVector_float_7_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SVector_float_7_.html,1,['interface'],['interface']
Integrability,"oating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooRealProxy_meas; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; RooRealProxy_true; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooPullVar.html:32533,integrat,integrator,32533,root/html530/RooPullVar.html,https://root.cern,https://root.cern/root/html530/RooPullVar.html,1,['integrat'],['integrator']
Integrability,"oating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_t_valueConstant value of self; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooConstVar.html:32133,integrat,integrator,32133,root/html530/RooConstVar.html,https://root.cern,https://root.cern/root/html530/RooConstVar.html,1,['integrat'],['integrator']
Integrability,oats; TArrayI Array of ints; TArrayL Array of longs; TArrayL64 Array of long64s; TArrayS Array of shorts; TArrow An arrow (line with a arrowhead); TArrowEditor GUI for editing arrow attributes; TAtomicCount ; TAtt3D 3D attributes; TAttAxis Axis attributes; TAttBBox Helper for management of bounding-box information; TAttCanvas Canvas attributes; TAttFill Fill area attributes; TAttFillEditor GUI for editing fill attributes; TAttImage Image attributes; TAttLine Line attributes; TAttLineEditor GUI for editing line attributes; TAttMarker Marker attributes; TAttMarkerEditor GUI for editing marker attributes; TAttPad Pad attributes; TAttParticle Particle definition; TAttText Text attributes; TAttTextEditor GUI for editing text attributes; TAuthenticate Class providing remote authentication service; TAxis Axis class; TAxis3D 3-D ruler painting class; TAxisEditor axis editor; TBRIK TBRIK shape; TBackCompFitter Class providing backward compatibility for fitting by implementing the TVirtualFitter interface; TBase64 Base64 encoding/decoding; TBaseClass Description of a base class; TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:48037,interface,interface,48037,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,6,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,"obal bin. Note: - The estimated efficiency depends on the chosen statistic option:; for frequentist ones:; ; for bayesian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - GetPassedEvents(bin), SetPassedEvents(bin), GetTotalEvents(bin),; SetTotalEvents(bin). see TH1::GetBin() for conventions on numbering bins. Long64_t Merge(TCollection* list); merges the TEfficiency objects in the given list to the given; TEfficiency object using the operator+=(TEfficiency&). The merged result is stored in the current object. The statistic options and; the confidence level are taken from the current object. This function should be used when all TEfficiency objects correspond to; the same process. The new weight is set according to:. Double_t Normal(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); returns the confidence l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEfficiency.html:57066,depend,depends,57066,root/html530/TEfficiency.html,https://root.cern,https://root.cern/root/html530/TEfficiency.html,1,['depend'],['depends']
Integrability,"obal bin. Note: - The estimated efficiency depends on the chosen statistic option:; for frequentist ones:; ; for bayesian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - GetPassedEvents(bin), SetPassedEvents(bin), GetTotalEvents(bin),; SetTotalEvents(bin). see TH1::GetBin() for conventions on numbering bins. void Merge(TCollection* list); merges the TEfficiency objects in the given list to the given; TEfficiency object using the operator+=(TEfficiency&). The merged result is stored in the current object. The statistic options and; the confidence level are taken from the current object. This function should be used when all TEfficiency objects correspond to; the same process. The new weight is set according to:. Double_t Normal(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); returns the confidence limit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:56223,depend,depends,56223,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,1,['depend'],['depends']
Integrability,obal cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_flatSFInt; Bool_t_flip; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; Bool_t_nlo; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGExpModel.html:40345,integrat,integrated,40345,root/html526/RooGExpModel.html,https://root.cern,https://root.cern/root/html526/RooGExpModel.html,1,['integrat'],['integrated']
Integrability,obal cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_flatSFInt; Bool_t_flip; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; Bool_t_nlo; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGExpModel.html:40727,integrat,integrated,40727,root/html528/RooGExpModel.html,https://root.cern,https://root.cern/root/html528/RooGExpModel.html,1,['integrat'],['integrated']
Integrability,obal cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_flatSFInt; Bool_t_flip; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; Bool_t_nlo; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGExpModel.html:41196,integrat,integrated,41196,root/html530/RooGExpModel.html,https://root.cern,https://root.cern/root/html530/RooGExpModel.html,1,['integrat'],['integrated']
Integrability,obal cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_flatSFInt; Bool_t_flip; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; Bool_t_nlo; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGExpModel.html:41599,integrat,integrated,41599,root/html532/RooGExpModel.html,https://root.cern,https://root.cern/root/html532/RooGExpModel.html,1,['integrat'],['integrated']
Integrability,"obal ones ; Reimplemented in TProofLite.; Definition at line 10846 of file TProof.cxx. ◆ ShowEnabledPackages(). void TProof::ShowEnabledPackages ; (; Bool_t ; all = kFALSE). List which packages are enabled. ; If all is true show enabled packages for all active slaves. If everything is ok all active slaves should have the same packages enabled. ; Definition at line 7818 of file TProof.cxx. ◆ ShowFeedback(). void TProof::ShowFeedback ; (; ); const. Show items in feedback list. ; Definition at line 10020 of file TProof.cxx. ◆ ShowLog() [1/2]. void TProof::ShowLog ; (; const char * ; queryref). Display on screen the content of the temporary log file for query in reference. ; Definition at line 10338 of file TProof.cxx. ◆ ShowLog() [2/2]. void TProof::ShowLog ; (; Int_t ; qry = -1). Display on screen the content of the temporary log file. ; If qry == -2 show messages from the last (current) query. If qry == -1 all the messages not yet displayed are shown (default). If qry == 0, all the messages in the file are shown. If qry > 0, only the messages related to query 'qry' are shown. For qry != -1 the original file offset is restored at the end ; Definition at line 10371 of file TProof.cxx. ◆ ShowMissingFiles(). void TProof::ShowMissingFiles ; (; TQueryResult * ; qr = 0). Show information about missing files during query described by 'qr' or the last query if qr is null (default). ; A short summary is printed in the end. ; Definition at line 12522 of file TProof.cxx. ◆ ShowPackages(). void TProof::ShowPackages ; (; Bool_t ; all = kFALSE, . Bool_t ; redirlog = kFALSE . ). List contents of package directory. ; If all is true show all package directories also on slaves. If everything is ok all package directories should be the same. If redir is kTRUE the result is redirected to the log file (option available for internal actions). ; Definition at line 7770 of file TProof.cxx. ◆ ShowParameters(). void TProof::ShowParameters ; (; const char * ; wildcard = ""PROOF_*""); const. Show t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:150264,message,messages,150264,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['message'],['messages']
Integrability,"obalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,bool>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3Binding_double_double_double_bool_.html:33505,integrat,integrator,33505,root/html532/RooCFunction3Binding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3Binding_double_double_double_bool_.html,1,['integrat'],['integrator']
Integrability,"obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerInfo.html:15904,depend,dependencies,15904,root/html528/TStreamerInfo.html,https://root.cern,https://root.cern/root/html528/TStreamerInfo.html,3,['depend'],['dependencies']
Integrability,"obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TDataMember object files. TEnum * Find(TListOfEnums::DeclId_t id) const; Return the TEnum corresponding to the Decl 'id' or NULL if it does not; exist. TEnum * Get(TListOfEnums::DeclId_t id, const char* name); Return (after creating it if necessary) the TEnum; describing the enum corresponding to the Decl 'id'. TEnum * GetObject(const char* ) const; Return an object from the list of enums *if and only if* is has already; been loaded in the list. This is an internal routine. void UnmapObject(TObject* obj); Remove a pair<id, object> from the map of functions and their ids. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections).; This function overrides TCollection::RecursiveRemove that calls; the Remove function. THashList::Remove cannot be called because; it uses the hash value of the hash table. This hash value; is not available anymore when RecursiveRemove is called from; the TObject destructor. TObject * Remove(TObject* obj); Remove object from the list. TObject * Remove(TObjLink* lnk); Remove object via its objlink from the list. void Load(); Load all the DataMembers known to the intepreter for the scope 'fClass'; into this collection. void Unload(); Mark 'all func' as being unloaded.; After the unload, the data member can no longer be found directly,; until the decl can be found again in the interpreter (in which; the func object will be reused. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TListOfEnums.html:13797,rout,routine,13797,root/html604/TListOfEnums.html,https://root.cern,https://root.cern/root/html604/TListOfEnums.html,1,['rout'],['routine']
Integrability,"obj, const char* name); voidInspectMember(const char* topclassname, void* pobj, const char* name, Bool_t transient); virtual TClass*IsA() const; TMemberInspector&operator=(const TMemberInspector&); voidRemoveFromParent(Ssiz_t startingAt); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TMemberInspector::TParentBuf*fParentcurrent inspection ""path"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TMemberInspector(); Destruct a member inspector. const char* GetParent() const; Get the parent string. Ssiz_t GetParentLen() const; Get the length of the parent string. void AddToParent(const char* name); Append ""name"" to the parent string. void RemoveFromParent(Ssiz_t startingAt); Remove trailing characters starting at ""startingAt"". void GenericShowMembers(const char* topClassName, void* obj, Bool_t transientMember); Call ShowMember() on obj.; This could be faster if we implemented this either as a templated; function or by rootcint-generated code using the typeid (i.e. the; difference is a lookup in a TList instead of in a map).; To avoid a spurrious error message in case the data member is; transient and does not have a dictionary we check first. void InspectMember(TObject& obj, const char* name). void InspectMember(const char* topclassname, void* pobj, const char* name, Bool_t transient). void InspectMember(TClass* cl, void* pobj, const char* name). void Inspect(TClass* cl, const char* parent, const char* name, const void* addr). obj. ShowMembers(TMemberInspector& insp). » Author: Fons Rademakers 15/07/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMemberInspector.h 35394 2010-09-17 19:40:12Z pcanal $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMemberInspector.html:2326,message,message,2326,root/html528/TMemberInspector.html,https://root.cern,https://root.cern/root/html528/TMemberInspector.html,1,['message'],['message']
Integrability,"obj, const char* name); voidInspectMember(const char* topclassname, void* pobj, const char* name, Bool_t transient); virtual TClass*IsA() const; TMemberInspector&operator=(const TMemberInspector&); voidRemoveFromParent(Ssiz_t startingAt); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TMemberInspector::TParentBuf*fParentcurrent inspection ""path"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TMemberInspector(); Destruct a member inspector. const char* GetParent() const; Get the parent string. Ssiz_t GetParentLen() const; Get the length of the parent string. void AddToParent(const char* name); Append ""name"" to the parent string. void RemoveFromParent(Ssiz_t startingAt); Remove trailing characters starting at ""startingAt"". void GenericShowMembers(const char* topClassName, void* obj, Bool_t transientMember); Call ShowMember() on obj.; This could be faster if we implemented this either as a templated; function or by rootcint-generated code using the typeid (i.e. the; difference is a lookup in a TList instead of in a map).; To avoid a spurrious error message in case the data member is; transient and does not have a dictionary we check first. void InspectMember(TObject& obj, const char* name). void InspectMember(const char* topclassname, void* pobj, const char* name, Bool_t transient). void InspectMember(TClass* cl, void* pobj, const char* name). void Inspect(TClass* cl, const char* parent, const char* name, const void* addr). obj. ShowMembers(TMemberInspector& insp). » Author: Fons Rademakers 15/07/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMemberInspector.h 35394 2010-09-17 19:40:12Z pcanal $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMemberInspector.html:2326,message,message,2326,root/html530/TMemberInspector.html,https://root.cern,https://root.cern/root/html530/TMemberInspector.html,1,['message'],['message']
Integrability,"obj, const char* name); voidInspectMember(const char* topclassname, void* pobj, const char* name, Bool_t transient); virtual TClass*IsA() const; TMemberInspector&operator=(const TMemberInspector&); voidRemoveFromParent(Ssiz_t startingAt); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TMemberInspector::TParentBuf*fParentcurrent inspection ""path"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TMemberInspector(); Destruct a member inspector. const char* GetParent() const; Get the parent string. Ssiz_t GetParentLen() const; Get the length of the parent string. void AddToParent(const char* name); Append ""name"" to the parent string. void RemoveFromParent(Ssiz_t startingAt); Remove trailing characters starting at ""startingAt"". void GenericShowMembers(const char* topClassName, void* obj, Bool_t transientMember); Call ShowMember() on obj.; This could be faster if we implemented this either as a templated; function or by rootcint-generated code using the typeid (i.e. the; difference is a lookup in a TList instead of in a map).; To avoid a spurrious error message in case the data member is; transient and does not have a dictionary we check first. void InspectMember(TObject& obj, const char* name). void InspectMember(const char* topclassname, void* pobj, const char* name, Bool_t transient). void InspectMember(TClass* cl, void* pobj, const char* name). void Inspect(TClass* cl, const char* parent, const char* name, const void* addr). obj. ShowMembers(TMemberInspector& insp). » Author: Fons Rademakers 15/07/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMemberInspector.h 35394 2010-09-17 19:40:12Z pcanal $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMemberInspector.html:2326,message,message,2326,root/html532/TMemberInspector.html,https://root.cern,https://root.cern/root/html532/TMemberInspector.html,1,['message'],['message']
Integrability,"object ; Reimplemented in Jet, TGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly, TGeoOverlap, TEveArrow, TEveBox, TEveBoxProjected, TEveBoxSet, TEveCaloViz, TEveCalo3D, TEveCalo2D, TEveCaloLego, TEveDigitSet, TEveGeoShape, TEveGeoShapeProjected, TEveJetCone, TEveJetConeProjected, TEveLine, TEveLineProjected, TEvePointSet, TEvePointSetProjected, TEvePolygonSetProjected, TEveProjectionAxes, TEveQuadSet, TEveScalableStraightLineSet, TEveShape, TEveStraightLineSet, TEveStraightLineSetProjected, TEveText, TEveTrack, TEveTrackProjected, TEveTriangleSet, TEveMCTrack, TBRIK, TCONE, TCONS, TCTUB, TELTU, TGTRA, THelix, THYPE, TMarker3DBox, TNode, TNodeDiv, TPARA, TPCON, TPGON, TPointSet3D, TPolyLine3D, TPolyMarker3D, TShape, TSPHE, TTRAP, TTRD1, TTRD2, TTUBE, TTUBS, TXTRU, TGLTH3Composition, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile3D, TParticle, and TPrimary.; Definition at line 27 of file TAtt3D.h. ◆ Sizeof3D(). void TAtt3D::Sizeof3D ; (; ); const. virtual . Set total size of this 3D object (used by X3D interface). ; Reimplemented in TGeoOverlap, TBRIK, TNode, TPCON, TSPHE, TTUBE, TTUBS, TXTRU, TParticle, and TPrimary.; Definition at line 27 of file TAtt3D.cxx. ◆ Streamer(). virtual void TAtt3D::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in Jet, TGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly, TGeoOverlap, TEveArrow, TEveBox, TEveBoxProjected, TEveBoxSet, TEveCaloViz, TEveCalo3D, TEveCalo2D, TEveCaloLego, TEveDigitSet, TEveGeoShape, TEveGeoShapeProjected, TEveJetCone, TEveJetConeProjected, TEveLine, TEveLineProjected, TEvePointSet, TEvePointSetProjected, TEvePolygonSetProjected, TEveProjectionAxes, TEveQuadSet, TEveScalableStraightLineSet, TEveShape, TEveStraightLineSet, TEveStraightLineSetProjected, TEveText, TEveTrack, TEveTrackProjected, TEveTriangleSet, TEveMCTrack, TBRIK, TCONE, TCONS, TCTUB, TELTU, TGTRA, THelix, THYPE, TMarker3DBox, TNode, TNodeDiv, TPARA, TPCON, TPGON, TPointSet3D, TPolyLine3D, TPolyMarker3D, TShape, TSPHE, TTRAP, TTRD1, TTRD2, TTUB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAtt3D.html:2983,interface,interface,2983,doc/master/classTAtt3D.html,https://root.cern,https://root.cern/doc/master/classTAtt3D.html,1,['interface'],['interface']
Integrability,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLAttr.html:2671,message,message,2671,doc/master/classTXMLAttr.html,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html,49,['message'],['message']
Integrability,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLDocument.html:3015,message,message,3015,doc/master/classTXMLDocument.html,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html,501,['message'],['message']
Integrability,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTView.html:7222,message,message,7222,doc/master/classTView.html,https://root.cern,https://root.cern/doc/master/classTView.html,2,['message'],['message']
Integrability,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:10366,message,message,10366,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['message'],['message']
Integrability,"object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileDrawMap.html:7160,message,message,7160,doc/master/classTFileDrawMap.html,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html,3,['message'],['message']
Integrability,"object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis3D.html:10329,message,message,10329,doc/master/classTAxis3D.html,https://root.cern,https://root.cern/doc/master/classTAxis3D.html,1,['message'],['message']
Integrability,"object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAnnotation.html:15735,message,message,15735,doc/master/classTAnnotation.html,https://root.cern,https://root.cern/doc/master/classTAnnotation.html,8,['message'],['message']
Integrability,"object is of CPPInstance derived type.; 169 if (!Initialize()); 170 return false;; 171 ; 172// detailed walk through inheritance hierarchy; 173 return CPPInstance_Check(pyobject);; 174}; 175 ; 176//-----------------------------------------------------------------------------; 177bool CPyCppyy::Instance_CheckExact(PyObject* pyobject); 178{; 179// Test if the given pyobject is of CPPInstance type.; 180 if (!Initialize()); 181 return false;; 182 ; 183// direct pointer comparison of type member; 184 return CPPInstance_CheckExact(pyobject);; 185}; 186 ; 187//-----------------------------------------------------------------------------; 188bool CPyCppyy::Sequence_Check(PyObject* pyobject); 189{; 190// Extends on PySequence_Check() to determine whether an object can be iterated; 191// over (technically, all objects can b/c of C++ pointer arithmetic, hence this; 192// check isn't 100% accurate, but neither is PySequence_Check()).; 193 ; 194// Note: simply having the iterator protocol does not constitute a sequence, bc; 195// PySequence_GetItem() would fail.; 196 ; 197// default to PySequence_Check() if called with a non-C++ object; 198 if (!CPPInstance_Check(pyobject)); 199 return (bool)PySequence_Check(pyobject);; 200 ; 201// all C++ objects should have sq_item defined, but a user-derived class may; 202// have deleted it, in which case this is not a sequence; 203 PyTypeObject* t = Py_TYPE(pyobject);; 204 if (!t->tp_as_sequence || !t->tp_as_sequence->sq_item); 205 return false;; 206 ; 207// if this is the default getitem, it is only a sequence if it's an array type; 208 if (t->tp_as_sequence->sq_item == CPPInstance_Type.tp_as_sequence->sq_item) {; 209 if (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsArray); 210 return true;; 211 return false;; 212 }; 213 ; 214// TODO: could additionally verify whether __len__ is supported and/or whether; 215// operator()[] takes an int argument type; 216 ; 217 return true;; 218}; 219 ; 220//--------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:6550,protocol,protocol,6550,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['protocol'],['protocol']
Integrability,"object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet_ownedClonedModelSetOwning set of cloned model components; RooArgSet_ownedClonedPdfSetOwning set of cloned PDF components; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useWindowSwitch to activate window convolution; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Int_t_verboseThreshCall count threshold for verbose printing; RooListProxy_windowParamHolder for optional convolution integration window scaling parameter; Double_t_windowScaleScale factor for window parameter; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:38384,integrat,integrator,38384,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,2,['integrat'],"['integration', 'integrator']"
Integrability,"object, which takes a RooArgList of serv...Definition RooFormulaVar.h:30; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooRealVar::setValvoid setVal(double value) overrideSet value of variable to 'value'.Definition RooRealVar.cxx:242; rf514_RooCustomizerDefinition rf514_RooCustomizer.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigmaG' with range [-inf, inf] of the RooGaussian 'gauss' exceeds the safe range of (0, inf). Advise to limit its range.; The proto model before customisation:; 0x7ffc956b53c8 RooAddPdf::model = 750.5/1 [Auto,Clean] ; 0x7ffc956b3d70/V- RooGaussian::gauss = 0 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x7ffc956b5ed0/V- RooRealVar::meanG = 100; 0x7ffc956b4810/V- RooRealVar::sigmaG = 3; 0x7ffc956b62b8/V- RooRealVar::yieldSig = 1; 0x7ffc956b42c8/V- RooPolynomial::linear = 1501 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x7ffc956b4bf8/V- RooRealVar::pol1 = 1; 0x7ffc956b4fe0/V- RooRealVar::yieldBkg = 1; ; PDF 1 with a yield depending on M:; 0x55734032a0f0 RooAddPdf::model_Sample1 = 1156.8/1 [Auto,Clean] ; 0x5573405e0390/V- RooGaussian::gauss_Sample1 = 0 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x557340631bf0/V- RooRealVar::meanG_Sample1 = 100; 0x7ffc956b4810/V- RooRealVar::sigmaG = 3; 0x7ffc956b71f0/V- RooFormulaVar::yieldSig_Sample1 = 0.29755 [Auto,Clean] ; 0x7ffc956b66a0/V- RooRealVar::M = 1; 0x7ffc956b42c8/V- RooPolynomial::linear = 1501 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; 0x7ffc956b4bf8/V- RooRealVar::pol1 = 1; 0x7ffc956b4fe0/V- RooRealVar::yieldBkg = 1; ; PDF 2 with a yield depending on M:; 0x55734057d9d0 RooAddPdf::model_Sample2 = 1000.67/1 [Auto,Clean] ; 0x55734180e980/V- RooGaussian::gauss_Sample2 = 0 [Auto,Dirty] ; 0x7ffc956b5ae8/V- RooRealVar::Energy = 1500; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf514__RooCustomizer_8C.html:6735,depend,depending,6735,doc/master/rf514__RooCustomizer_8C.html,https://root.cern,https://root.cern/doc/master/rf514__RooCustomizer_8C.html,1,['depend'],['depending']
Integrability,"object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. ; Reimplemented from TSocket.; Definition at line 483 of file TPSocket.cxx. ◆ Send() [3/4]. Int_t TPSocket::Send ; (; Int_t ; kind). inlineoverridevirtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 69 of file TPSocket.h. ◆ Send() [4/4]. Int_t TPSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). inlineoverridevirtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 70 of file TPSocket.h. ◆ SendRaw(). Int_t TPSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). overridevirtual . Send a raw buffer of specified length. ; Returns the number of bytes send and -1 in case of error. ; Reimplemented from TSocket.; Definition at line 545 of file TPSocket.cxx. ◆ SetOption(). Int_t TPSocket::SetOption ; (; ESockOptions ; opt, . Int_t ; val . ). overridevirtual . Set socket options. ; Reimplemented from TSocket.; Definition at line 754 of file TPSocket.cxx. ◆ Streamer(). void TPSocket::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:29712,message,message,29712,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['message'],['message']
Integrability,"object. ;  ; T * operator-> ();  Get a pointer to the encapsulated object. ;  ; RResultPtr & operator= (const RResultPtr &)=default;  ; RResultPtr & operator= (RResultPtr &&)=default;  . Static Public Attributes; static constexpr ULong64_t kOnce = 0ull;  Convenience definition to express a callback must be executed once. ;  . Private Types; using SPT_t = std::shared_ptr< T >;  . Private Member Functions;  RResultPtr (std::shared_ptr< T > objPtr, RDFDetail::RLoopManager *lm, std::shared_ptr< RDFInternal::RActionBase > actionPtr);  ; T * Get ();  Get the pointer to the encapsulated result. ;  ; void ThrowIfNull ();  ; void TriggerRun ();  Triggers the event loop in the RLoopManager. ;  . Private Attributes; std::shared_ptr< RDFInternal::RActionBase > fActionPtr;  Owning pointer to the action that will produce this result. ;  ; RDFDetail::RLoopManager * fLoopManager = nullptr;  Non-owning pointer to the RLoopManager at the root of this computation graph. ;  ; SPT_t fObjPtr;  Shared pointer encapsulating the wrapped result. ;  . Friends; template<typename T1 > ; class RResultPtr;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::unique_ptr< RDFDetail::RMergeableValue< T > > RDFDetail::GetMergeableValue (RResultPtr< T > &rptr);  ; template<typename T1 > ; RResultPtr< T1 > RDFDetail::MakeResultPtr (const std::shared_ptr< T1 > &, ::ROOT::Detail::RDF::RLoopManager &, std::shared_ptr< RDFInternal::RActionBase >);  ; ROOT::Internal::RDF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:3754,wrap,wrapped,3754,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['wrap'],['wrapped']
Integrability,"object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBranch;  TBranch ();  Default constructor. Used for I/O by default. ;  ;  TBranch (TBranch *parent, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of another Branch. ;  ;  TBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of a Tree. ;  ;  ~TBranch () override;  Destructor. ;  ; virtual void AddBasket (TBasket &b, bool ondisk, Long64_t startEntry);  Add the basket to this branch. ;  ; virtual void AddLastBasket (Long64_t startEntry);  Add the start entry of the write basket (not yet created) ;  ; Int_t BackFill ();  Loop on all leaves of this branch to back fill Basket buffer. ;  ; void Browse (TBrowser *b) override;  Browser interface. ;  ; virtual void DeleteBaskets (Option_t *option="""");  Loop on all branch baskets. ;  ; virtual void DropBaskets (Option_t *option="""");  Loop on all branch baskets. ;  ; void ExpandBasketArrays ();  Increase BasketEntry buffer of a minimum of 10 locations and a maximum of 50 per cent of current size. ;  ; Int_t Fill ();  ; virtual TBranch * FindBranch (const char *name);  Find the immediate sub-branch with passed name. ;  ; virtual TLeaf * FindLeaf (const char *name);  Find the leaf corresponding to the name 'searchname'. ;  ; Int_t FlushBaskets ();  Flush to disk all the baskets of this branch and any of subbranches. ;  ; Int_t FlushOneBasket (UInt_t which);  If we have a write basket in memory and it contains some entries and has not yet been written to disk, we write it and delete it from memory. ;  ; virtual char * GetAddress () const;  ; TBasket * GetBasket (Int_t basket);  ; Int_t * GetBasketBytes () const;  ; Long64_t * GetBasketEntry () const;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchRef.html:3198,interface,interface,3198,doc/master/classTBranchRef.html,https://root.cern,https://root.cern/doc/master/classTBranchRef.html,1,['interface'],['interface']
Integrability,"object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:19909,rout,routine,19909,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['rout'],['routine']
Integrability,"objects to ...Definition TObject.h:106; TObject::SaveAsvirtual void SaveAs(const char *filename="""", Option_t *option="""") constSave this object in the file specified by filename.Definition TObject.cxx:692; TObject::Deletevirtual void Delete(Option_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::GetDtorOnlystatic Longptr_t GetDtorOnly()Return destructor only flag.Definition TObject.cxx:1082; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::GetObjectStatstatic Bool_t GetObjectStat()Get status of object stat flag.Definition TObject.cxx:1067; TObject::Copyvirtual void Copy(TObject &object) constCopy this to obj.Definition TObject.cxx:146; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::SetDrawOptionvirtual void SetDrawOption(Option_t *option="""")Set drawing option for object.Definition TObject.cxx:770; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetDtorOnlystatic void SetDtorOnly(void *obj)Set destructor only flag.Definition TObject.cxx:1090; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::DrawClassvirtual void DrawClass() constDraw class inheritance tree of the class to which this object belongs.Definition TObject.cxx:295; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::Comparevirtual Int_t Compare(const TObject *obj) constCompare abstract method.Definition TObject.cxx:244; TObject::~TObjectvirtual ~TObject()TObject de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:55438,message,message,55438,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['message'],['message']
Integrability,"objects to ...Definition TObject.h:106; TObject::SaveAsvirtual void SaveAs(const char *filename="""", Option_t *option="""") constSave this object in the file specified by filename.Definition TObject.cxx:692; TObject::Deletevirtual void Delete(Option_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::GetDtorOnlystatic Longptr_t GetDtorOnly()Return destructor only flag.Definition TObject.cxx:1082; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::GetObjectStatstatic Bool_t GetObjectStat()Get status of object stat flag.Definition TObject.cxx:1067; TObject::Copyvirtual void Copy(TObject &object) constCopy this to obj.Definition TObject.cxx:146; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::SetDrawOptionvirtual void SetDrawOption(Option_t *option="""")Set drawing option for object.Definition TObject.cxx:770; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetDtorOnlystatic void SetDtorOnly(void *obj)Set destructor only flag.Definition TObject.cxx:1090; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::EDeprecatedStatusBitsEDeprecatedStatusBitsDefinition TObject.h:75; TObject::kObjInCanvas@ kObjInCanvasfor backward compatibility only, use kMustCleanupDefinition TObject.h:76; TObject::DrawClassvirtual void DrawClass() constDraw class inheritance tree of the class to which this object belongs.Definition TObject.cxx:295; TObject::TestBitsInt_t TestBits(UInt_t f)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:28695,message,message,28695,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['message'],['message']
Integrability,"observables, int order=1, std::vector< double > const &observableValues={}, double eps1=1e-6, double eps2=1e-3);  Taylor expanding given function in terms of observables around observableValues. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyFunc.html:46827,message,message,46827,doc/master/classRooPolyFunc.html,https://root.cern,https://root.cern/doc/master/classRooPolyFunc.html,2,['message'],"['message', 'messages']"
Integrability,"observables; RooRefArrayRooAbsArg::_proxyListlist of proxies; string_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_t_setNumPartition number of this instance in parallel calculation mode; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_t_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_t_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsTestStatistic(); Default constructor. RooAbsTestStatistic(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); Constructor taking function (real), a dataset (data), a set of projected observables (projSet). If; rangeName is not null, only events in the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsTestStatistic.html:40283,integrat,integrator,40283,root/html602/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsTestStatistic.html,2,['integrat'],['integrator']
Integrability,"oc(size);; 6836 if (!*buf) {; 6837 break;; 6838 }; 6839 ; 6840 va_copy(ap_copy, ap);; 6841 len = vsnprintf_impl(*buf, size - 1, fmt, ap_copy);; 6842 va_end(ap_copy);; 6843 (*buf)[size - 1] = 0;; 6844 }; 6845 ; 6846 return len;; 6847}; 6848 ; 6849 ; 6850/* Print message to buffer. If buffer is large enough to hold the message,; 6851 * return buffer. If buffer is to small, allocate large enough buffer on; 6852 * heap,; 6853 * and return allocated buffer. */; 6854static int; 6855alloc_vprintf(char **out_buf,; 6856 char *prealloc_buf,; 6857 size_t prealloc_size,; 6858 const char *fmt,; 6859 va_list ap); 6860{; 6861 va_list ap_copy;; 6862 int len;; 6863 ; 6864 /* Windows is not standard-compliant, and vsnprintf() returns -1 if; 6865 * buffer is too small. Also, older versions of msvcrt.dll do not have; 6866 * _vscprintf(). However, if size is 0, vsnprintf() behaves correctly.; 6867 * Therefore, we make two passes: on first pass, get required message; 6868 * length.; 6869 * On second pass, actually print the message. */; 6870 va_copy(ap_copy, ap);; 6871 len = vsnprintf_impl(NULL, 0, fmt, ap_copy);; 6872 va_end(ap_copy);; 6873 ; 6874 if (len < 0) {; 6875 /* C runtime is not standard compliant, vsnprintf() returned -1.; 6876 * Switch to alternative code path that uses incremental; 6877 * allocations.; 6878 */; 6879 va_copy(ap_copy, ap);; 6880 len = alloc_vprintf2(out_buf, fmt, ap_copy);; 6881 va_end(ap_copy);; 6882 ; 6883 } else if ((size_t)(len) >= prealloc_size) {; 6884 /* The pre-allocated buffer not large enough. */; 6885 /* Allocate a new buffer. */; 6886 *out_buf = (char *)mg_malloc((size_t)(len) + 1);; 6887 if (!*out_buf) {; 6888 /* Allocation failed. Return -1 as ""out of memory"" error. */; 6889 return -1;; 6890 }; 6891 /* Buffer allocation successful. Store the string there. */; 6892 va_copy(ap_copy, ap);; 6893 IGNORE_UNUSED_RESULT(; 6894 vsnprintf_impl(*out_buf, (size_t)(len) + 1, fmt, ap_copy));; 6895 va_end(ap_copy);; 6896 ; 6897 } else {; 6898 /* The pre-allocat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:198789,message,message,198789,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['message'],['message']
Integrability,"oc(size);; 6837 if (!*buf) {; 6838 break;; 6839 }; 6840 ; 6841 va_copy(ap_copy, ap);; 6842 len = vsnprintf_impl(*buf, size - 1, fmt, ap_copy);; 6843 va_end(ap_copy);; 6844 (*buf)[size - 1] = 0;; 6845 }; 6846 ; 6847 return len;; 6848}; 6849 ; 6850 ; 6851/* Print message to buffer. If buffer is large enough to hold the message,; 6852 * return buffer. If buffer is to small, allocate large enough buffer on; 6853 * heap,; 6854 * and return allocated buffer. */; 6855static int; 6856alloc_vprintf(char **out_buf,; 6857 char *prealloc_buf,; 6858 size_t prealloc_size,; 6859 const char *fmt,; 6860 va_list ap); 6861{; 6862 va_list ap_copy;; 6863 int len;; 6864 ; 6865 /* Windows is not standard-compliant, and vsnprintf() returns -1 if; 6866 * buffer is too small. Also, older versions of msvcrt.dll do not have; 6867 * _vscprintf(). However, if size is 0, vsnprintf() behaves correctly.; 6868 * Therefore, we make two passes: on first pass, get required message; 6869 * length.; 6870 * On second pass, actually print the message. */; 6871 va_copy(ap_copy, ap);; 6872 len = vsnprintf_impl(NULL, 0, fmt, ap_copy);; 6873 va_end(ap_copy);; 6874 ; 6875 if (len < 0) {; 6876 /* C runtime is not standard compliant, vsnprintf() returned -1.; 6877 * Switch to alternative code path that uses incremental; 6878 * allocations.; 6879 */; 6880 va_copy(ap_copy, ap);; 6881 len = alloc_vprintf2(out_buf, fmt, ap_copy);; 6882 va_end(ap_copy);; 6883 ; 6884 } else if ((size_t)(len) >= prealloc_size) {; 6885 /* The pre-allocated buffer not large enough. */; 6886 /* Allocate a new buffer. */; 6887 *out_buf = (char *)mg_malloc((size_t)(len) + 1);; 6888 if (!*out_buf) {; 6889 /* Allocation failed. Return -1 as ""out of memory"" error. */; 6890 return -1;; 6891 }; 6892 /* Buffer allocation successful. Store the string there. */; 6893 va_copy(ap_copy, ap);; 6894 IGNORE_UNUSED_RESULT(; 6895 vsnprintf_impl(*out_buf, (size_t)(len) + 1, fmt, ap_copy));; 6896 va_end(ap_copy);; 6897 ; 6898 } else {; 6899 /* The pre-allocat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:198821,message,message,198821,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['message'],['message']
Integrability,"ocal;; 305 }; 306 } else {; 307 // We can not use 'cd' as this would access the current thread; 308 // rather than the thread corresponding to that gDirectory.; 309 next->RegisterGDirectory(ptr);; 310 }; 311 // Actually do the update of the thread local gDirectory; 312 // using its object specific lock.; 313 auto This = this;; 314 ptr->compare_exchange_strong(This, next);; 315 }; 316 }; 317 }; 318 for(auto &&context : extraWait) {; 319 // Wait until the TContext is done spinning; 320 // over the lock.; 321 while(context->fActiveDestructor);; 322 // And now let the TContext destructor finish.; 323 context->fDirectoryWait = false;; 324 }; 325 ; 326 // Wait until all register attempts are done.; 327 while(fContextPeg) {}; 328 ; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; 333/// a compile time circular dependency ... alternatively we could (should?); 334/// introduce yet another abstract interface.; 335 ; 336static TBuffer* R__CreateBuffer(); 337{; 338 typedef void (*tcling_callfunc_Wrapper_t)(void*, int, void**, void*);; 339 static tcling_callfunc_Wrapper_t creator = nullptr;; 340 if (!creator) {; 341 R__LOCKGUARD(gROOTMutex);; 342 TClass *c = TClass::GetClass(""TBufferFile"");; 343 TMethod *m = c->GetMethodWithPrototype(""TBufferFile"",""TBuffer::EMode,Int_t"",kFALSE,ROOT::kExactMatch);; 344 creator = (tcling_callfunc_Wrapper_t)( m->InterfaceMethod() );; 345 }; 346 TBuffer::EMode mode = TBuffer::kWrite;; 347 Int_t size = 10000;; 348 void *args[] = { &mode, &size };; 349 TBuffer *result;; 350 creator(nullptr,2,args,&result);; 351 return result;; 352}; 353 ; 354////////////////////////////////////////////////////////////////////////////////; 355/// Clone an object.; 356/// This function is called when the directory is not a TDirectoryFile.; 357/// This version has to load the I/O package, hence via Cling.; 358///; 359/// If autoadd is true and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:11306,interface,interface,11306,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['interface'],['interface']
Integrability,"ocation, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy rho1;  ; RooRealProxy rho2;  ; RooRealProxy sigp;  ; RooRealProxy x;  ; RooRealProxy xi;  ; RooRealProxy Xp;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBukinPdf.html:68245,integrat,integration,68245,doc/master/classRooBukinPdf.html,https://root.cern,https://root.cern/doc/master/classRooBukinPdf.html,1,['integrat'],['integration']
Integrability,"ocessAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Thu Sep 23 19:58:12 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsMCStudyModule.html:10102,message,message,10102,root/html528/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html528/RooAbsMCStudyModule.html,1,['message'],['message']
Integrability,"ocessAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Tue Jun 30 14:30:12 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsMCStudyModule.html:10651,message,message,10651,root/html602/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html602/RooAbsMCStudyModule.html,1,['message'],['message']
Integrability,"ocessAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Tue Mar 10 17:14:01 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsMCStudyModule.html:10190,message,message,10190,root/html534/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html534/RooAbsMCStudyModule.html,1,['message'],['message']
Integrability,"ocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:7061,interface,interface,7061,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['interface'],['interface']
Integrability,"ock used to protect critical section of its code (non-thread safe parts). ;  ; void SetAllocunlockfunc (void(*)()) const final;  [Place holder for Mutex Unlock] Provide the interpreter with a way to release a lock used to protect critical section of its code (non-thread safe parts). ;  ; void * SetAutoLoadCallBack (void *cb) final;  ; int SetClassAutoLoading (int) const final;  Enable/Disable the AutoLoading of libraries. ;  ; int SetClassAutoparsing (int) final;  Enable/Disable the Autoparsing of headers. ;  ; void SetClassInfo (TClass *cl, Bool_t reload=kFALSE, Bool_t silent=kFALSE) final;  Set pointer to the TClingClassInfo in TClass. ;  ; Int_t SetClassSharedLibs (const char *cls, const char *libs) final;  Register the AutoLoading information for a class. ;  ; void SetDeclAttr (DeclId_t, const char *) final;  ; void SetErrmsgcallback (void *p) const final;  Set a callback to receive error messages. ;  ; Bool_t SetErrorMessages (Bool_t enable=kTRUE) final;  If error messages are disabled, the interpreter should suppress its failures and warning messages from stdout. ;  ; void SetGetline (const char *(*getlineFunc)(const char *prompt), void(*histaddFunc)(const char *line)) final;  Set a getline function to call when input is needed. ;  ; void SetProcessLineLock (Bool_t lock=kTRUE) final;  ; void SetTempLevel (int val) const final;  Create / close a scope for temporaries. ;  ; virtual void ShutDown () final;  ; void SnapshotMutexState (ROOT::TVirtualRWMutex *mtx) final;  ; std::string ToString (const char *type, void *obj) final;  ; void TransactionRollback (const cling::Transaction &T);  ; void TypedefInfo_Delete (TypedefInfo_t *tinfo) const final;  ; TypedefInfo_t * TypedefInfo_Factory () const final;  ; TypedefInfo_t * TypedefInfo_Factory (const char *name) const final;  ; TypedefInfo_t * TypedefInfo_FactoryCopy (TypedefInfo_t *tinfo) const final;  ; void TypedefInfo_Init (TypedefInfo_t *tinfo, const char *name) const final;  ; bool TypedefInfo_IsValid (TypedefI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:31046,message,messages,31046,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,2,['message'],['messages']
Integrability,"ock() ? mutex : nullptr;  ; #define R__COLLECTION_ITER_GUARD(collection);  ; #define R__COLLECTION_READ_GUARD();  ; #define R__COLLECTION_READ_LOCKGUARD(mutex)   ::ROOT::TReadLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_READ_LOCKGUARD_NAMED(name, mutex)   ::ROOT::TReadLockGuard _NAME2_(R__readguard,name)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_WRITE_GUARD();  ; #define R__COLLECTION_WRITE_LOCKGUARD(mutex)   ::ROOT::TWriteLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_WRITE_LOCKGUARD_NAMED(name, mutex)   ::ROOT::TWriteLockGuard _NAME2_(R__readguard,name)(R__COLL_COND_MUTEX(mutex));  ; #define R__FOR_EACH(type, proc);  . Typedefs; template<typename T > ; using TRangeDynCast = ROOT::Detail::TRangeCast< T, true >;  TRangeDynCast is an adapter class that allows the typed iteration through a TCollection. ;  ; template<typename T > ; using ROOT::Detail::TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; bool ROOT::Internal::ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; const TCollection & ROOT::Internal::EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  . Variables; R__EXTERN TVirtualMutex * gCollectionMutex;  ; const Bool_t kIterBackward = !kIterForward;  ; const Bool_t kIterForward = kTRUE;  . Macro Definition Documentation. ◆ R__COLL_COND_MUTEX. #define R__COLL_COND_MUTEX; (;  ; mutex);    this->IsUsingRWLock() ? mutex : nullptr. Definition at line 360 of file TCollection.h. ◆ R__COLLECTION_ITER_GUARD. #define R__COLLECTION_ITER_GUARD; (;  ; collection). Definition at line 129 of file TCollection.h. ◆ R__COLLECTION_READ_GUARD. #define R__COLLECTION_READ_GUARD; (; ). Definition at line 128 of file TCollection.h. ◆ R__COLLECTION_READ_LOCKGUARD. #define R__COLLECTION_READ_LOCKGUARD; (;  ; mute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h.html:2370,adapter,adapter,2370,doc/master/TCollection_8h.html,https://root.cern,https://root.cern/doc/master/TCollection_8h.html,1,['adapter'],['adapter']
Integrability,"ockableFrame.h. ◆ HideContainer(). void TGDockableFrame::HideContainer ; (; ). Hide dock container. ; Definition at line 374 of file TGDockableFrame.cxx. ◆ IsA(). TClass * TGDockableFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 139 of file TGDockableFrame.h. ◆ IsFixedSize(). Bool_t TGDockableFrame::IsFixedSize ; (; ); const. inline . Definition at line 131 of file TGDockableFrame.h. ◆ IsHidden(). Bool_t TGDockableFrame::IsHidden ; (; ); const. inline . Definition at line 129 of file TGDockableFrame.h. ◆ IsUndocked(). Bool_t TGDockableFrame::IsUndocked ; (; ); const. inline . Definition at line 128 of file TGDockableFrame.h. ◆ operator=(). TGDockableFrame & TGDockableFrame::operator= ; (; const TGDockableFrame & ; ). privatedelete . ◆ ProcessMessage(). Bool_t TGDockableFrame::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ;  . ). overridevirtual . Process dockable frame messages. ; Reimplemented from TGCompositeFrame.; Definition at line 391 of file TGDockableFrame.cxx. ◆ SavePrimitive(). void TGDockableFrame::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a dockable frame widget as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 457 of file TGDockableFrame.cxx. ◆ SetFixedSize(). void TGDockableFrame::SetFixedSize ; (; Bool_t ; fixed). inline . Definition at line 132 of file TGDockableFrame.h. ◆ SetWindowName(). void TGDockableFrame::SetWindowName ; (; const char * ; name). overridevirtual . Set window name so it appear as title of the undock window. ; Reimplemented from TGWindow.; Definition at line 445 of file TGDockableFrame.cxx. ◆ ShowContainer(). void TGDockableFrame::ShowContainer ; (; ). Show dock container. ; Definition at line 357 of file TGDockableFrame.cxx. ◆ Streamer(). void TGDockableFrame::Streamer ; (; TBuffer & ; R__b). overridev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:37496,message,messages,37496,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['message'],['messages']
Integrability,"ockets. */; 3596 /* There seems to be no official standard for this.; 3597 * Common uses seem to be ""httpunix://"", ""http.unix://"" or; 3598 * ""http+unix://"" as a protocol definition string, followed by; 3599 * ""localhost"" or ""127.0.0.1"" or ""/tmp/unix/path"" or; 3600 * ""%2Ftmp%2Funix%2Fpath"" (url % encoded) or; 3601 * ""localhost:%2Ftmp%2Funix%2Fpath"" (domain socket path as port) or; 3602 * """" (completely skipping the server name part). In any case, the; 3603 * last part is the server local path. */; 3604 const char *server_name = UNIX_DOMAIN_SOCKET_SERVER_NAME;; 3605 mg_snprintf(conn,; 3606 &truncated,; 3607 buf,; 3608 buflen,; 3609 ""%s.unix://%s%s"",; 3610 proto,; 3611 server_name,; 3612 ri->local_uri);; 3613 default_port = 0;; 3614 return 0;; 3615 }; 3616#endif; 3617 ; 3618 if (define_proto) {; 3619 /* If we got a protocol name, use the default port accordingly. */; 3620 if ((0 == strcmp(define_proto, ""https"")); 3621 || (0 == strcmp(define_proto, ""wss""))) {; 3622 default_port = 443;; 3623 }; 3624 } else if (ri->is_ssl) {; 3625 /* If we did not get a protocol name, use TLS as default if it is; 3626 * already used. */; 3627 default_port = 443;; 3628 }; 3629 ; 3630 {; 3631#if defined(USE_IPV6); 3632 int is_ipv6 = (conn->client.lsa.sa.sa_family == AF_INET6);; 3633#endif; 3634 int auth_domain_check_enabled =; 3635 conn->dom_ctx->config[ENABLE_AUTH_DOMAIN_CHECK]; 3636 && (!mg_strcasecmp(; 3637 conn->dom_ctx->config[ENABLE_AUTH_DOMAIN_CHECK], ""yes""));; 3638 ; 3639 const char *server_domain =; 3640 conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 3641 ; 3642 char portstr[16];; 3643 char server_ip[48];; 3644 ; 3645 if (port != default_port) {; 3646 sprintf(portstr, "":%u"", (unsigned)port);; 3647 } else {; 3648 portstr[0] = 0;; 3649 }; 3650 ; 3651 if (!auth_domain_check_enabled || !server_domain) {; 3652 ; 3653 sockaddr_to_string(server_ip,; 3654 sizeof(server_ip),; 3655 &conn->client.lsa);; 3656 ; 3657 server_domain = server_ip;; 3658 }; 3659 ; 3660 mg_snprintf(conn,; 3661 &trunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:107950,protocol,protocol,107950,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['protocol'],['protocol']
Integrability,"ockets. */; 3597 /* There seems to be no official standard for this.; 3598 * Common uses seem to be ""httpunix://"", ""http.unix://"" or; 3599 * ""http+unix://"" as a protocol definition string, followed by; 3600 * ""localhost"" or ""127.0.0.1"" or ""/tmp/unix/path"" or; 3601 * ""%2Ftmp%2Funix%2Fpath"" (url % encoded) or; 3602 * ""localhost:%2Ftmp%2Funix%2Fpath"" (domain socket path as port) or; 3603 * """" (completely skipping the server name part). In any case, the; 3604 * last part is the server local path. */; 3605 const char *server_name = UNIX_DOMAIN_SOCKET_SERVER_NAME;; 3606 mg_snprintf(conn,; 3607 &truncated,; 3608 buf,; 3609 buflen,; 3610 ""%s.unix://%s%s"",; 3611 proto,; 3612 server_name,; 3613 ri->local_uri);; 3614 default_port = 0;; 3615 return 0;; 3616 }; 3617#endif; 3618 ; 3619 if (define_proto) {; 3620 /* If we got a protocol name, use the default port accordingly. */; 3621 if ((0 == strcmp(define_proto, ""https"")); 3622 || (0 == strcmp(define_proto, ""wss""))) {; 3623 default_port = 443;; 3624 }; 3625 } else if (ri->is_ssl) {; 3626 /* If we did not get a protocol name, use TLS as default if it is; 3627 * already used. */; 3628 default_port = 443;; 3629 }; 3630 ; 3631 {; 3632#if defined(USE_IPV6); 3633 int is_ipv6 = (conn->client.lsa.sa.sa_family == AF_INET6);; 3634#endif; 3635 int auth_domain_check_enabled =; 3636 conn->dom_ctx->config[ENABLE_AUTH_DOMAIN_CHECK]; 3637 && (!mg_strcasecmp(; 3638 conn->dom_ctx->config[ENABLE_AUTH_DOMAIN_CHECK], ""yes""));; 3639 ; 3640 const char *server_domain =; 3641 conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 3642 ; 3643 char portstr[16];; 3644 char server_ip[48];; 3645 ; 3646 if (port != default_port) {; 3647 sprintf(portstr, "":%u"", (unsigned)port);; 3648 } else {; 3649 portstr[0] = 0;; 3650 }; 3651 ; 3652 if (!auth_domain_check_enabled || !server_domain) {; 3653 ; 3654 sockaddr_to_string(server_ip,; 3655 sizeof(server_ip),; 3656 &conn->client.lsa);; 3657 ; 3658 server_domain = server_ip;; 3659 }; 3660 ; 3661 mg_snprintf(conn,; 3662 &trunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:107982,protocol,protocol,107982,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['protocol'],['protocol']
Integrability,ocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCint Interface to CINT C/C++ interpreter; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionPropertyBrowsable Helper object to add browsable collection properties; TCollectionProxyFactory ; TCollectionStreamer ; TColor Color defined by RGB or HLS; TColorWheel The ROOT Color Wheel; TColumnView Helper to represent one TTable column; TComplex Complex Class; TCondition Condition variable class; TConditionImp Condition variable implementation ABC; TCondor Interface to the Condor System; TCondorSlave Describes a claimed slave; TConfidenceLevel output for TLimit functions; TContextMenu Context sensitive popup menu; TContextMenuImp Context sensitive popup menu implementation; TControlBar Control bar; TControlBarButton The Control bar button; TControlBarImp GUI independent controlbar abc; TCrown A crown or segment of crown; TCurlyArc A curly arc; TCurlyArcEditor GUI for editing arrow attributes; TCurlyLine A curly polyline; TCurlyLineEditor GUI for editing arrow attributes; TCut A specialized string object used for TTree selections; TCutG A Graphical cut.; TDCacheFile A ROOT file that reads/writes via a dCache server; TDCacheSystem Directory handler for DCache; TDNDData,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:49713,interface,interface,49713,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,6,['interface'],['interface']
Integrability,"ocol; string_masterCatName; map<std::string,SplitRule>_pdfmap; map<std::string,std::string>_restr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr); Add prototype p.d.f pdfName to build configuration with associated split rules 'sr'. BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Construct build configuration from single prototype 'pdfName' and list of arguments; that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); SplitParamConstrained() and Restrict() arguments. BuildConfig(const RooArgSet& legacyBuildConfig); Constructor to make BuildConfig from legacy RooSimPdfBuilder configuration; Empty for now. void internalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr); Internal routine to add prototype pdf 'pdfName' with list of associated master states 'miStateNameList; and split rules 'sr' to configuration. void restrictBuild(const char* catName, const char* stateList); Restrict build by only considering state names in stateList for split in category catName. BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr). BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). virtual ~BuildConfig(); {}. » Last changed: Tue Mar 10 17:19:10 2015 » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__BuildConfig.html:5823,rout,routine,5823,root/html534/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__BuildConfig.html,1,['rout'],['routine']
Integrability,"ocumentation; WrappedTF1(TF1& f). constructor from a TF1 function pointer. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. WrappedTF1(TF1& f). Copy constructor. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__WrappedTF1.html:3648,interface,interface,3648,root/html534/ROOT__Math__WrappedTF1.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__WrappedTF1.html,1,['interface'],['interface']
Integrability,"ocumentation; WrappedTF1(TF1& f). constructor from a TF1 function pointer. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. WrappedTF1(TF1& f). Copy constructor. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: WrappedTF1.h 34993 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__WrappedTF1.html:3646,interface,interface,3646,root/html528/ROOT__Math__WrappedTF1.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__WrappedTF1.html,3,['interface'],['interface']
Integrability,"ocumentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Destructor. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. Bool_t initialize(); One-time integrator initialization. ~RooSegmentedIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. Bool_t setUseIntegrandLimits(Bool_t flag); { _useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Dec 7 13:48:59 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSegmentedIntegrator1D.html:7779,integrat,integration,7779,root/html526/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooSegmentedIntegrator1D.html,1,['integrat'],['integration']
Integrability,"od minimizations. They require then that the given function implements in addition the ROOT::Math::FitMethodFunction interface.; The interface for setting the initial values for the function variables (which are the parameters in of the model function in case of solving for fitting) and specifying their limits.; The interface to set and retrieve basic minimization parameters. These parameter are controlled by the class ROOT::Math::MinimizerOptions. When no parameters are specified the default ones are used. Specific Minimizer options can also be passed via the MinimizerOptions class. For the list of the available option parameter one must look at the documentation of the corresponding derived class.; The interface to retrieve the result of minimization ( minimum X values, function value, gradient, error on the minimum, etc...); The interface to perform a Scan, Hesse or a Contour plot (for the minimizers that support this, i.e. Minuit and Minuit2). An example on how to use this interface is the tutorial NumericalMinimization.C in the tutorials/fit directory. ; Definition at line 119 of file Minimizer.h. Public Member Functions;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:3870,interface,interface,3870,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['interface'],['interface']
Integrability,"od.; For instance, one could hide complete folder from ‘guest’ account:; root [6] serv->Restrict(""/Folder"", ""hidden=guest"");; Or one could hide from all but ‘admin’ account:; root [7] serv->Restrict(""/Folder"", ""visible=admin"");; Hidden folders or objects can not be accessed via http protocol.; By default server runs in readonly mode and do not allow methods execution via ‘exe.json’ or ‘exe.bin’ requests. To allow such action, one could either grant generic access for all or one could allow to execute only special method:; root [8] serv->Restrict(""/Folder/histo1"", ""allow=all"");; root [9] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle"");; One could provide several options for the same item, separating them with ‘&’ sign:; root [10] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle&hide=guest"");; Complete list of supported options could be found in TRootSniffer:Restrict() method documentation.; 1.5 Using FastCGI interface; FastCGI is a protocol for interfacing interactive programs with a web server like Apache, lighttpd, Microsoft ISS and many others.; When starting THttpServer, one could specify:; serv = new THttpServer(""fastcgi:9000"");; In fact, the FastCGI interface can run in parallel to http server. One can just call:; serv = new THttpServer(""http:8080"");; serv->CreateEngine(""fastcgi:9000"");; One could specify a debug parameter to be able to adjust the FastCGI configuration on the web server:; serv->CreateEngine(""fastcgi:9000?debug=1"");; All user access will be ruled by the main web server - for the moment one cannot restrict access with fastcgi engine.; 1.5.1 Configure fastcgi with Apcahe2; First of all, one should compile and install mod_fastcgi module. Then mod_fastcgi should be specified in httpd.conf to load it when Apache server is started. Finally in host configuration file one should have following lines:; <IfModule mod_fastcgi.c>; FastCgiExternalServer ""/srv/www/htdocs/root.app"" -host rootapp_host_name:9000; </IfModule>; Here is supposed tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:5839,interface,interface,5839,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,2,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,"od:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetMaximumX and TF1::GetX. Double_t GetMinMaxNDim(Double_t* x, Bool_t findmax, Double_t epsilon = 0, Int_t maxiter = 0) const; find the minimum of a function of whatever dimension.; While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions; since it uses the minimizer interface; vector x at beginning will contained the initial point, on exit will contain the result. Double_t GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the X value corresponding to the minimum value of the function; on the (xmin, xmax) interval; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:45213,interface,interface,45213,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,2,['interface'],['interface']
Integrability,"od; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodSeedDistance Function Discriminant Analysis; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MetricEuler calculates the ""distance"" between two points; TMVA::MetricManhattan calculates the ""distance"" between two points; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output ; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::PDEFoam General purpose self-adapting binning; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamIntegrand n-dimensional real positive integrand of FOAM; TMVA::PDEFoamMaxwt Controlling of the MC weight (maximum weight); TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::Ranking Method-specific ranking for input variables ; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculations for Friedman's RuleFit method; TMVA::RuleFitAPI Friedman's RuleFit method; TMVA::SVEvent Event for SVM; TMVA::SdivSqrtSplusB Implementation of the SdivSqrtSplusB as separation criterion; TMVA::SeedDistance ; TMVA::SeparationBase Interface to different separation critiera used in training algorithms; TMVA::SimulatedAnnealing Base class for Simulated Annealing fitting; TMVA::SimulatedAnnealingFitter Fitter using a Simulated Annealing Algorithm; TMVA::TActivation Interface for TNeuron activation function classes; TMVA::TActivationChooser Class for choosing activation functions; TMVA::TActivationIdentity Identity activation function for TNeuron; TMVA::TActivationRadial Radi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:96899,wrap,wrapper,96899,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['wrap'],['wrapper']
Integrability,"odGenContext(const RooProdGenContext& other); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidgenerateEvent(RooArgSet& theEvent, Int_t remaining); virtual voidinitGenerator(const RooArgSet& theEvent); voidTObject::MakeZombie(); voidRooAbsGenContext::resampleData(Double_t& ratio); voidupdateCCDTable(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooArgSet*_ccdCloneSet; Bool_t_ccdRefresh; RooSuperCategory*_ccdSuperSuperCategory of Common category dependents; Double_t*_ccdTable; RooArgSet_commonCatsCommon category dependents; UInt_tRooAbsGenContext::_expectedEventsNumber of expected events from extended p.d.f; RooAbsPdf::ExtendModeRooAbsGenContext::_extendModeExtended mode capabilities of p.d.f.; TIterator*_gcIter! Iterator over gcList; TList_gcListList of component generator contexts; RooDataSet*RooAbsGenContext::_genData! Data being generated; Bool_tRooAbsGenContext::_isValidIs context in valid state?; static Int_tRooPrintable::_nameLength; Int_tRooAbsGenContext::_nextProtoIndexNext prototype event to load according to LUT; RooArgSet_ownedMultiProdsOwned auxilary multi-term product PDFs; const RooProdPdf*_pdfOriginal PDF; RooRealIntegral*_pdfCcdInt; RooAbsPdf*_pdfClone; RooArgSet*_pdfCloneSet; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototype dataset; RooArgSet*RooAbsGenContext::_theEventPointer to obse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdGenContext.html:7563,depend,dependents,7563,root/html526/RooProdGenContext.html,https://root.cern,https://root.cern/root/html526/RooProdGenContext.html,2,['depend'],['dependents']
Integrability,"odGenContext(const RooProdGenContext& other); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidgenerateEvent(RooArgSet& theEvent, Int_t remaining); virtual voidinitGenerator(const RooArgSet& theEvent); voidTObject::MakeZombie(); voidRooAbsGenContext::resampleData(Double_t& ratio); voidupdateCCDTable(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooArgSet*_ccdCloneSet; Bool_t_ccdRefresh; RooSuperCategory*_ccdSuperSuperCategory of Common category dependents; Double_t*_ccdTable; RooArgSet_commonCatsCommon category dependents; UInt_tRooAbsGenContext::_expectedEventsNumber of expected events from extended p.d.f; RooAbsPdf::ExtendModeRooAbsGenContext::_extendModeExtended mode capabilities of p.d.f.; TIterator*_gcIter! Iterator over gcList; TList_gcListList of component generator contexts; RooDataSet*RooAbsGenContext::_genData! Data being generated; Bool_tRooAbsGenContext::_isValidIs context in valid state?; static Int_tRooPrintable::_nameLength; Int_tRooAbsGenContext::_nextProtoIndexNext prototype event to load according to LUT; TStringRooAbsGenContext::_normRangeNormalization range of pdf; RooArgSet_ownedMultiProdsOwned auxilary multi-term product PDFs; const RooProdPdf*_pdfOriginal PDF; RooRealIntegral*_pdfCcdInt; RooAbsPdf*_pdfClone; RooArgSet*_pdfCloneSet; Int_t*RooAbsGenContext::_protoOrderLUT with traversal order of prototype data; RooArgSetRooAbsGenContext::_protoVarsPrototype observables; const RooDataSet*RooAbsGenContext::_prototypePointer to prototyp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdGenContext.html:7549,depend,dependents,7549,root/html528/RooProdGenContext.html,https://root.cern,https://root.cern/root/html528/RooProdGenContext.html,2,['depend'],['dependents']
Integrability,"odInfo_Delete(MethodInfo_t* ) const; {;}. MethodInfo_t * MethodInfo_Factory() const; {return 0;}. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* ) const; {return 0;}. MethodInfo_t * MethodInfo_InterfaceMethod(MethodInfo_t* ) const; {return 0;}. bool MethodInfo_IsValid(MethodInfo_t* ) const; {return 0;}. int MethodInfo_NArg(MethodInfo_t* ) const; {return 0;}. int MethodInfo_NDefaultArg(MethodInfo_t* ) const; {return 0;}. int MethodInfo_Next(MethodInfo_t* ) const; {return 0;}. Long_t MethodInfo_Property(MethodInfo_t* ) const; {return 0;}. TypeInfo_t * MethodInfo_Type(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_GetMangledName(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_GetPrototype(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_Name(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_TypeName(MethodInfo_t* ) const; {return 0;}. const char * MethodInfo_Title(MethodInfo_t* ) const; {return 0;}. void MethodArgInfo_Delete(MethodArgInfo_t* ) const; G__MethodArgInfo interface. {;}. MethodArgInfo_t * MethodArgInfo_Factory() const; {return 0;}. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* ) const; {return 0;}. bool MethodArgInfo_IsValid(MethodArgInfo_t* ) const; {return 0;}. int MethodArgInfo_Next(MethodArgInfo_t* ) const; {return 0;}. Long_t MethodArgInfo_Property(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. void TypeInfo_Delete(TypeInfo_t* ) const; G__TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(G__value* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; {return 0;}. void TypeInfo_Init(TypeInfo_t* , const char* ) const; {;}. bool TypeInfo_IsValid(TypeInfo_t* ) const; {return 0;}. const char * TypeInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:28042,interface,interface,28042,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,3,['interface'],['interface']
Integrability,"odInfo_t* info) const final;; 403 void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Longptr_t* Offset, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch) const final;; 404 void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, bool objectIsConst, Longptr_t* Offset, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch) const final;; 405 void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const std::vector<TypeInfo_t*> &proto, Longptr_t* Offset, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch) const final;; 406 void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const std::vector<TypeInfo_t*> &proto, bool objectIsConst, Longptr_t* Offset, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch) const final;; 407 ; 408 std::string CallFunc_GetWrapperCode(CallFunc_t *func) const final;; 409 ; 410 // ClassInfo interface; 411 DeclId_t GetDeclId(ClassInfo_t *info) const final;; 412 Bool_t ClassInfo_Contains(ClassInfo_t *info, DeclId_t declid) const final;; 413 Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const final;; 414 void ClassInfo_Delete(ClassInfo_t* info) const final;; 415 void ClassInfo_Delete(ClassInfo_t* info, void* arena) const final;; 416 void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const final;; 417 void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const final;; 418 ClassInfo_t* ClassInfo_Factory(Bool_t all = kTRUE) const final;; 419 ClassInfo_t* ClassInfo_Factory(ClassInfo_t* cl) const final;; 420 ClassInfo_t* ClassInfo_Factory(const char* name) const final;; 421 ClassInfo_t* ClassInfo_Factory(DeclId_t declid) const final;; 422 Longptr_t ClassInfo_GetBaseOffset(ClassInfo_t* fromDerived, ClassInfo_t* toBase, void * address, bool isDerivedObject) const final;; 423 int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:21350,interface,interface,21350,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['interface'],['interface']
Integrability,"odTag, const TString &weightfile)read method name from weight fileDefinition Reader.cxx:368; TMVA::Reader::EvaluateMulticlassconst std::vector< Float_t > & EvaluateMulticlass(const TString &methodTag, Double_t aux=0)evaluates MVA for given set of input variablesDefinition Reader.cxx:630; TMVA::Reader::GetMVAErrorUpperDouble_t GetMVAErrorUpper() constDefinition Reader.h:96; TMVA::Reader::LogMsgLogger & Log() constDefinition Reader.h:162; TMVA::Reader::GetMVAErrorLowerDouble_t GetMVAErrorLower() constDefinition Reader.h:95; TMVA::Reader::DataInfoDataSetInfo & DataInfo()Definition Reader.h:118; TMVA::Reader::fDataInputHandlerDataInputHandler fDataInputHandlerDefinition Reader.h:138; TMVA::Reader::DecodeVarNamesvoid DecodeVarNames(const std::string &varNames)decodes ""name1:name2:..."" formDefinition Reader.cxx:772; TMVA::Reader::fSilentBool_t fSilentsilent modeDefinition Reader.h:150; TMVA::Reader::DeclareOptionsvoid DeclareOptions()declaration of configuration optionsDefinition Reader.cxx:264; TMVA::Reader::AddSpectatorvoid AddSpectator(const TString &expression, Float_t *)Add a float spectator or expression to the reader.Definition Reader.cxx:321; TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Reader::~Readervirtual ~Reader(void)destructorDefinition Reader.cxx:277; TMVA::Reader::fLoggerMsgLogger * fLogger! message loggerDefinition Reader.h:161; TMVA::Reader::DataInfoconst DataSetInfo & DataInfo() constDefinition Reader.h:117; TMVA::Reader::GetMVAErrorDouble_t GetMVAError() constDefinition Reader.h:94; TMVA::Types::EMVAEMVADefinition Types.h:76; TStringBasic string class.Definition TString.h:139; bool; double; int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; v@ vDefinition rootcling_impl.cxx:3699; Types.h. tmvatmvaincTMVAReader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8h_source.html:12369,message,message,12369,doc/master/Reader_8h_source.html,https://root.cern,https://root.cern/doc/master/Reader_8h_source.html,1,['message'],['message']
Integrability,"ode for selected basis function; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:41966,integrat,integration,41966,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,1,['integrat'],['integration']
Integrability,"ode to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the deserialization and serialization.; The (de-)serialization is a mapping from the C++ type to the more simple column type system. A column contains an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of different bit sizes. A C++ type may be mapped to multiple columns. For instance, an std::vector<float> maps to two columns, an offset column indicating the size of the vector per entry, and a payload column with the float data.; Columns are partitioned into pages (roughly: TTree baskets) of a few kB – a few tens of kB each. The physical layer (only) needs to provide the means to store and retrieve pages. The physical layer is decoupled from the high-level C++ logic. The physical layer implements an abstract page storage interface, so that dedicated implementations for key-value stores and other storage systems are conceivable. At this point, the only provided backend stores the pages in ROOT files.; RNTuples are further grouped into clusters, which are, like TTree clusters, self-contained blocks of consecutive entries. Clusters provide a unit of writing and will provide the means for parallel writing of data in a future version of RNTuple. Related classes. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html:2941,interface,interface,2941,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html,1,['interface'],['interface']
Integrability,"ode(). double RooStats::BayesianCalculator::GetMode ; (; ); const. return the mode (most probable value of the posterior function) ; Returns the value of the parameter for the point in parameter-space that is the most likely.; How do we do if there are points that are equi-probable? use approximate posterior t.b.d use real function to find the mode ; Definition at line 1183 of file BayesianCalculator.cxx. ◆ GetPosteriorFunction(). RooAbsReal * RooStats::BayesianCalculator::GetPosteriorFunction ; (; ); const. return posterior function (object is managed by the BayesianCalculator class) ; Build and return the posterior function (not normalized) as a RooAbsReal the posterior is obtained from the product of the likelihood function and the prior pdf which is then integrated in the nuisance parameters (if existing).; A prior function for the nuisance can be specified either in the prior pdf object or in the model itself. If no prior nuisance is specified, but prior parameters are then the integration is performed assuming a flat prior for the nuisance parameters.; NOTE: the return object is managed by the BayesianCalculator class, users do not need to delete it, but the object will be deleted when the BayesiabCalculator object is deleted ; Definition at line 769 of file BayesianCalculator.cxx. ◆ GetPosteriorHistogram(). TH1 * RooStats::BayesianCalculator::GetPosteriorHistogram ; (; ); const. return the approximate posterior as histogram (TH1 object). Note the object is managed by the BayesianCalculator class ; When am approximate posterior is computed binninig the parameter of interest (poi) range (see SetScanOfPosteriors) an histogram is created and can be returned to the user A nullptr is instead returned when the posterior is computed without binning the poi.; NOTE: the returned object is managed by the BayesianCalculator class, if the user wants to take ownership of the returned histogram, he needs to clone or copy the return object. ; Definition at line 991 of file Ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:26722,integrat,integration,26722,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integration']
Integrability,"ode(Bool_t mode) override;; 57 void HandleException(Int_t sig) override;; 58 Bool_t HandleTermInput() override;; 59 virtual void PrintLogo(Bool_t lite = kFALSE);; 60 void Run(Bool_t retrn = kFALSE) override;; 61 virtual void Terminate(int status) override;; 62 void Interrupt() { fInterrupt = kTRUE; }; 63 Int_t TabCompletionHook(char *buf, int *pLoc, std::ostream& out) override;; 64 ; 65 TFileHandler *GetInputHandler() { return fInputHandler; }; 66 ; 67 ClassDefOverride(TRint,0); //ROOT Interactive Application Interface; 68};; 69 ; 70#endif; Int_tint Int_tDefinition RtypesCore.h:45; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TApplication.h; modeOption_t Option_t TPoint TPoint const char modeDefinition TGWin32VirtualXProxy.cxx:68; TString.h; TApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop...Definition TApplication.h:39; TFileHandlerDefinition TSysEvtHandler.h:65; TRintDefinition TRint.h:31; TRint::Interruptvoid Interrupt()Definition TRint.h:62; TRint::SetEchoModevoid SetEchoMode(Bool_t mode) overrideSet console mode:Definition TRint.cxx:752; TRint::HandleTermInputBool_t HandleTermInput() overrideHandle input coming from terminal.Definition TRint.cxx:611; TRint::fInterruptBool_t fInterruptDefinition TRint.h:38; TRint::Runvoid Run(Bool_t retrn=kFALSE) overrideMain application eventloop.Definition TRint.cxx:384; TRint::ProcessLineNrLongptr_t ProcessLineNr(const char *filestem, const char *line, Int_t *error=nullptr)Calls TRint::ProcessLine() possibly prepending a #line directive for better diagnostics.Definition TRint.cxx:791; TRint::SetPromptvirtual const char * SetPrompt(const char *newPrompt)Set a new default prompt.Definition TRint.cxx:595; TRint::Terminatevirtual void Terminate(int status) overrideTerminate the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8h_source.html:3234,interface,interfaces,3234,doc/master/TRint_8h_source.html,https://root.cern,https://root.cern/doc/master/TRint_8h_source.html,1,['interface'],['interfaces']
Integrability,"ode). Create an I/O buffer object. ; Mode should be either TBuffer::kRead or TBuffer::kWrite. By default the I/O buffer has a size of TBuffer::kInitialSize (1024) bytes. ; Definition at line 78 of file TBufferFile.cxx. ◆ TBufferFile() [4/5]. TBufferFile::TBufferFile ; (; TBuffer::EMode ; mode, . Int_t ; bufsiz . ). Create an I/O buffer object. ; Mode should be either TBuffer::kRead or TBuffer::kWrite. ; Definition at line 88 of file TBufferFile.cxx. ◆ TBufferFile() [5/5]. TBufferFile::TBufferFile ; (; TBuffer::EMode ; mode, . Int_t ; bufsiz, . void * ; buf, . Bool_t ; adopt = kTRUE, . ReAllocCharFun_t ; reallocfunc = nullptr . ). Create an I/O buffer object. ; Mode should be either TBuffer::kRead or TBuffer::kWrite. By default the I/O buffer has a size of TBuffer::kInitialSize (1024) bytes. An external buffer can be passed to TBuffer via the buf argument. By default this buffer will be adopted unless adopt is false. If the new buffer is not adopted and no memory allocation routine is provided, a Fatal error will be issued if the Buffer attempts to expand. ; Definition at line 105 of file TBufferFile.cxx. ◆ ~TBufferFile(). TBufferFile::~TBufferFile ; (; ). override . Delete an I/O buffer object. ; Definition at line 114 of file TBufferFile.cxx. Member Function Documentation. ◆ ApplySequence() [1/2]. Int_t TBufferFile::ApplySequence ; (; const TStreamerInfoActions::TActionSequence & ; sequence, . void * ; obj . ). overridevirtual . Read one collection of objects from the buffer using the StreamerInfoLoopAction. ; The collection needs to be a split TClonesArray or a split vector of pointers. ; Implements TBuffer.; Definition at line 3729 of file TBufferFile.cxx. ◆ ApplySequence() [2/2]. Int_t TBufferFile::ApplySequence ; (; const TStreamerInfoActions::TActionSequence & ; sequence, . void * ; start_collection, . void * ; end_collection . ). overridevirtual . Read one collection of objects from the buffer using the StreamerInfoLoopAction. ; Implements TBuffer.; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:39331,rout,routine,39331,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['rout'],['routine']
Integrability,"ode: %u"",; 4318 response_code);; 4319 }; 4320 ; 4321 /* Return at least a category according to RFC 2616 Section 10. */; 4322 if (response_code >= 100 && response_code < 200) {; 4323 /* Unknown informational status code */; 4324 return ""Information"";; 4325 }; 4326 if (response_code >= 200 && response_code < 300) {; 4327 /* Unknown success code */; 4328 return ""Success"";; 4329 }; 4330 if (response_code >= 300 && response_code < 400) {; 4331 /* Unknown redirection code */; 4332 return ""Redirection"";; 4333 }; 4334 if (response_code >= 400 && response_code < 500) {; 4335 /* Unknown request error code */; 4336 return ""Client Error"";; 4337 }; 4338 if (response_code >= 500 && response_code < 600) {; 4339 /* Unknown server error code */; 4340 return ""Server Error"";; 4341 }; 4342 ; 4343 /* Response code not even within reasonable range */; 4344 return """";; 4345 }; 4346}; 4347 ; 4348 ; 4349static int; 4350mg_send_http_error_impl(struct mg_connection *conn,; 4351 int status,; 4352 const char *fmt,; 4353 va_list args); 4354{; 4355 char errmsg_buf[MG_BUF_LEN];; 4356 va_list ap;; 4357 int has_body;; 4358 ; 4359#if !defined(NO_FILESYSTEMS); 4360 char path_buf[UTF8_PATH_MAX];; 4361 int len, i, page_handler_found, scope, truncated;; 4362 const char *error_handler = NULL;; 4363 struct mg_file error_page_file = STRUCT_FILE_INITIALIZER;; 4364 const char *error_page_file_ext, *tstr;; 4365#endif /* NO_FILESYSTEMS */; 4366 int handled_by_callback = 0;; 4367 ; 4368 if ((conn == NULL) || (fmt == NULL)) {; 4369 return -2;; 4370 }; 4371 ; 4372 /* Set status (for log) */; 4373 conn->status_code = status;; 4374 ; 4375 /* Errors 1xx, 204 and 304 MUST NOT send a body */; 4376 has_body = ((status > 199) && (status != 204) && (status != 304));; 4377 ; 4378 /* Prepare message in buf, if required */; 4379 if (has_body; 4380 || (!conn->in_error_handler; 4381 && (conn->phys_ctx->callbacks.http_error != NULL))) {; 4382 /* Store error message in errmsg_buf */; 4383 va_copy(ap, args);; 4384 mg_vsnprintf(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:130708,message,message,130708,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['message'],['message']
Integrability,"ode: %u"",; 4319 response_code);; 4320 }; 4321 ; 4322 /* Return at least a category according to RFC 2616 Section 10. */; 4323 if (response_code >= 100 && response_code < 200) {; 4324 /* Unknown informational status code */; 4325 return ""Information"";; 4326 }; 4327 if (response_code >= 200 && response_code < 300) {; 4328 /* Unknown success code */; 4329 return ""Success"";; 4330 }; 4331 if (response_code >= 300 && response_code < 400) {; 4332 /* Unknown redirection code */; 4333 return ""Redirection"";; 4334 }; 4335 if (response_code >= 400 && response_code < 500) {; 4336 /* Unknown request error code */; 4337 return ""Client Error"";; 4338 }; 4339 if (response_code >= 500 && response_code < 600) {; 4340 /* Unknown server error code */; 4341 return ""Server Error"";; 4342 }; 4343 ; 4344 /* Response code not even within reasonable range */; 4345 return """";; 4346 }; 4347}; 4348 ; 4349 ; 4350static int; 4351mg_send_http_error_impl(struct mg_connection *conn,; 4352 int status,; 4353 const char *fmt,; 4354 va_list args); 4355{; 4356 char errmsg_buf[MG_BUF_LEN];; 4357 va_list ap;; 4358 int has_body;; 4359 ; 4360#if !defined(NO_FILESYSTEMS); 4361 char path_buf[UTF8_PATH_MAX];; 4362 int len, i, page_handler_found, scope, truncated;; 4363 const char *error_handler = NULL;; 4364 struct mg_file error_page_file = STRUCT_FILE_INITIALIZER;; 4365 const char *error_page_file_ext, *tstr;; 4366#endif /* NO_FILESYSTEMS */; 4367 int handled_by_callback = 0;; 4368 ; 4369 if ((conn == NULL) || (fmt == NULL)) {; 4370 return -2;; 4371 }; 4372 ; 4373 /* Set status (for log) */; 4374 conn->status_code = status;; 4375 ; 4376 /* Errors 1xx, 204 and 304 MUST NOT send a body */; 4377 has_body = ((status > 199) && (status != 204) && (status != 304));; 4378 ; 4379 /* Prepare message in buf, if required */; 4380 if (has_body; 4381 || (!conn->in_error_handler; 4382 && (conn->phys_ctx->callbacks.http_error != NULL))) {; 4383 /* Store error message in errmsg_buf */; 4384 va_copy(ap, args);; 4385 mg_vsnprintf(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:130740,message,message,130740,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['message'],['message']
Integrability,"odel from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTrackPropagator(const char* n = ""TEveTrackPropagator"", const char* t = """", TEveMagField* field = 0, Bool_t own_field = kTRUE); Default constructor. ~TEveTrackPropagator(); Destructor. void OnZeroRefCount(); Virtual from TEveRefBackPtr - track reference count has reached zero. void CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); Check reference count - virtual from TEveElement.; Must also take into account references from TEveRefBackPtr. void ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); Element-change notification.; Stamp all tracks as requiring display-list regeneration.; Virtual from TEveElement. void InitTrack(const TEveVectorD& v, Int_t charge); Initialize internal data-members for given particle parameters. void InitTrack(const TEveVectorF& v, Int_t charge); TEveVectorF wrapper. void ResetTrack(); Reset cache holding particle trajectory. Bool_t GoToVertex(TEveVectorD& v, TEveVectorD& p); Propagate particle with momentum p to vertex v. Bool_t GoToVertex(TEveVectorF& v, TEveVectorF& p); TEveVectorF wrapper. void GoToBounds(TEveVectorD& p); Propagate particle to bounds.; Return TRUE if hit bounds. void GoToBounds(TEveVectorF& p); TEveVectorF wrapper. void Update(const TEveVector4D& v, const TEveVectorD& p, Bool_t full_update = kFALSE, Bool_t enforce_max_step = kFALSE); Update helix / B-field projection state. void Step(const TEveVector4D& v, const TEveVectorD& p, TEveVector4D& vOut, TEveVectorD& pOut); Wrapper to step helix. void LoopToBounds(TEveVectorD& p); Propagate charged particle with momentum p to bounds.; It is expected that Update() with full-update was called before. Bool_t LoopToVertex(TEveVectorD& v, TEveVectorD& p); Propagate charged particle with momentum p to vertex v.; It is expected that Update() with full-upd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackPropagator.html:25993,wrap,wrapper,25993,root/html530/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html530/TEveTrackPropagator.html,2,['wrap'],['wrapper']
Integrability,"odel from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTrackPropagator(const char* n = ""TEveTrackPropagator"", const char* t = """", TEveMagField* field = 0, Bool_t own_field = kTRUE); Default constructor. ~TEveTrackPropagator(); Destructor. void OnZeroRefCount(); Virtual from TEveRefBackPtr - track reference count has reached zero. void CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); Check reference count - virtual from TEveElement.; Must also take into account references from TEveRefBackPtr. void ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); Element-change notification.; Stamp all tracks as requiring display-list regeneration.; Virtual from TEveElement. void InitTrack(const TEveVectorD& v, Int_t charge); Initialize internal data-members for given particle parameters. void InitTrack(const TEveVectorF& v, Int_t charge); TEveVectorF wrapper. void ResetTrack(); Reset cache holding particle trajectory. Int_t GetCurrentPoint() const; Get index of current point on track. Double_t GetTrackLength(Int_t start_point = 0, Int_t end_point = -1) const; Calculate track length from start_point to end_point.; If end_point is less than 0, distance to the end is returned. Bool_t GoToVertex(TEveVectorD& v, TEveVectorD& p); Propagate particle with momentum p to vertex v. Bool_t GoToLineSegment(const TEveVectorD& s, const TEveVectorD& r, TEveVectorD& p); Propagate particle with momentum p to line with start point s and vector r to the second point. Bool_t GoToVertex(TEveVectorF& v, TEveVectorF& p); TEveVectorF wrapper. Bool_t GoToLineSegment(const TEveVectorF& s, const TEveVectorF& r, TEveVectorF& p); TEveVectorF wrapper. void GoToBounds(TEveVectorD& p); Propagate particle to bounds.; Return TRUE if hit bounds. void GoToBounds(TEveVectorF& p); TEveVectorF wrapper. void Update(const TEveVector4D& v, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrackPropagator.html:27071,wrap,wrapper,27071,root/html534/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html534/TEveTrackPropagator.html,1,['wrap'],['wrapper']
Integrability,"odels; ; Book the different types of recurrent models in Keras (SimpleRNN, LSTM or GRU); ; **/; ; if (useKeras) {; ; for (int i = 0; i < 3; i++) {; ; if (use_rnn_type[i]) {; ; TString modelName = TString::Format(""model_%s.h5"", rnn_types[i].c_str());; TString trainedModelName = TString::Format(""trained_model_%s.h5"", rnn_types[i].c_str());; ; Info(""TMVA_RNN_Classification"", ""Building recurrent keras model using a %s layer"", rnn_types[i].c_str());; // create python script which can be executed; // create 2 conv2d layer + maxpool + dense; TMacro m;; m.AddLine(""import tensorflow"");; m.AddLine(""from tensorflow.keras.models import Sequential"");; m.AddLine(""from tensorflow.keras.optimizers import Adam"");; m.AddLine(""from tensorflow.keras.layers import Input, Dense, Dropout, Flatten, SimpleRNN, GRU, LSTM, Reshape, ""; ""BatchNormalization"");; m.AddLine("""");; m.AddLine(""model = Sequential() "");; m.AddLine(""model.add(Reshape((10, 30), input_shape = (10*30, )))"");; // add recurrent neural network depending on type / Use option to return the full output; if (rnn_types[i] == ""LSTM""); m.AddLine(""model.add(LSTM(units=10, return_sequences=True) )"");; else if (rnn_types[i] == ""GRU""); m.AddLine(""model.add(GRU(units=10, return_sequences=True) )"");; else; m.AddLine(""model.add(SimpleRNN(units=10, return_sequences=True) )"");; ; // m.AddLine(""model.add(BatchNormalization())"");; m.AddLine(""model.add(Flatten())""); // needed if returning the full time output sequence; m.AddLine(""model.add(Dense(64, activation = 'tanh')) "");; m.AddLine(""model.add(Dense(2, activation = 'sigmoid')) "");; m.AddLine(; ""model.compile(loss = 'binary_crossentropy', optimizer = Adam(learning_rate = 0.001), weighted_metrics = ['accuracy'])"");; m.AddLine(TString::Format(""modelName = '%s'"", modelName.Data()));; m.AddLine(""model.save(modelName)"");; m.AddLine(""model.summary()"");; ; m.SaveSource(""make_rnn_model.py"");; // execute python script to make the model; auto ret = (TString *)gROOT->ProcessLine(""TMVA::Python_Executable()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:69010,depend,depending,69010,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['depend'],['depending']
Integrability,"odern or classic); TList*fUWHandlerslist of event handlers for unknown windows; EGEventTypefWaitForEventevent to wait for; Window_tfWaitForWindowwindow in which to wait for event; Pixel_tfWhitewhite color index; THashList*fWlistlist of frames; Int_tfXfdfile descriptor of connection to server; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGClient(const char* dpyName = 0); Create a connection with the display sever on host dpyName and setup; the complete GUI system, i.e., graphics contexts, fonts, etc. for all; widgets. const TGWindow * GetRoot() const; Returns current root (i.e. base) window. By changing the root; window one can change the window hierarchy, e.g. a top level; frame (TGMainFrame) can be embedded in another window. const TGWindow * GetDefaultRoot() const; Returns the root (i.e. desktop) window. Should only be used as parent; for frames that will never be embedded, like popups, message boxes,; etc. (like TGToolTips, TGMessageBox, etc.). void SetRoot(TGWindow* root = 0); Sets the current root (i.e. base) window. By changing the root; window one can change the window hierarchy, e.g. a top level; frame (TGMainFrame) can be embedded in another window. void SetStyle(const char* style); Set the button style (modern or classic). UInt_t GetDisplayWidth() const; Get display width. UInt_t GetDisplayHeight() const; Get display height. const TGPicture * GetPicture(const char* name); Get picture from the picture pool. Picture must be freed using; TGClient::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGClient::FreePicture(). If; picture is not found 0 is returned. void FreePicture(const TGPicture* pic); Free picture resource. TGGC * GetGC(G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGClient.html:12993,message,message,12993,root/html530/TGClient.html,https://root.cern,https://root.cern/root/html530/TGClient.html,3,['message'],['message']
Integrability,"odification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. void HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; prioroty is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:27090,depend,depends,27090,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,1,['depend'],['depends']
Integrability,"odified() call ; Definition at line 91 of file TWebCanvas.h. ◆ fClientBits. UInt_t TWebCanvas::fClientBits {0}. protected . ! latest status bits from client like editor visible or not ; Definition at line 92 of file TWebCanvas.h. ◆ fColorsHash. UInt_t TWebCanvas::fColorsHash {0}. protected . ! last hash of colors/palette ; Definition at line 106 of file TWebCanvas.h. ◆ fColorsVersion. Long64_t TWebCanvas::fColorsVersion {0}. protected . ! current colors/palette version, checked every time when new snapshot created ; Definition at line 105 of file TWebCanvas.h. ◆ fFixedSize. Bool_t TWebCanvas::fFixedSize {kFALSE}. protected . ! is canvas size fixed ; Definition at line 109 of file TWebCanvas.h. ◆ fHelpHandles. std::vector<std::unique_ptr<ROOT::RWebDisplayHandle> > TWebCanvas::fHelpHandles. protected . ! array of handles for help widgets ; Definition at line 117 of file TWebCanvas.h. ◆ fJsonComp. Int_t TWebCanvas::fJsonComp {0}. protected . ! compression factor for messages send to the client ; Definition at line 98 of file TWebCanvas.h. ◆ fLongerPolling. Bool_t TWebCanvas::fLongerPolling {kFALSE}. protected . ! when true, make longer polling in blocking operations ; Definition at line 100 of file TWebCanvas.h. ◆ fObjSelectSignal. ObjectSelectSignal_t TWebCanvas::fObjSelectSignal. protected . ! signal emitted when new object selected in the pad ; Definition at line 115 of file TWebCanvas.h. ◆ fPadClickedSignal. PadClickedSignal_t TWebCanvas::fPadClickedSignal. protected . ! signal emitted when simple mouse click performed on the pad ; Definition at line 113 of file TWebCanvas.h. ◆ fPadDblClickedSignal. PadClickedSignal_t TWebCanvas::fPadDblClickedSignal. protected . ! signal emitted when simple mouse click performed on the pad ; Definition at line 114 of file TWebCanvas.h. ◆ fPadsStatus. std::map<TPad*, PadStatus> TWebCanvas::fPadsStatus. protected . ! map of pads in canvas and their status flags ; Definition at line 86 of file TWebCanvas.h. ◆ fPaletteDelivery. Int_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:41848,message,messages,41848,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['message'],['messages']
Integrability,"ods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  ROOT::Math::VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  ROOT::Math::VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  . Enumerations; enum  ROOT::Math::Integration::GKRule { ;   ROOT::Math::Integration::kGAUSS15 = 1; , ROOT::Math::Integration::kGAUSS21 = 2; , ROOT::Math::Integration::kGAUSS31 = 3; , ROOT::Math::Integration::kGAUSS41 = 4; , ;   ROOT::Math::Integration::kGAUSS51 = 5; , ROOT::Math::Integration::kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  ; enum  ROOT::Math::IntegrationOneDim::Type { ;   ROOT::Math::IntegrationOneDim::kDEFAULT = -1; , ROOT::Math::IntegrationOneDim::kGAUSS; , ROOT::Math::IntegrationOneDim::kLEGENDRE; , ROOT::Math::IntegrationOneDim::kADAPTIVE; , ;   ROOT::Math::IntegrationOneDim::kADAPTIVESINGULAR; , ROOT::Math::IntegrationOneDim::kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . Enumeration Type Documentation. ◆ GKRule. enum ROOT::Math::Integration::GKRule. enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type . EnumeratorkGAUSS15 ; kGAUSS21 ; kGAUSS31 ; kGAUSS41 ; kGAUSS51 ; kGAUSS61 . Definition at line 58 of file IntegrationTypes.h. ◆ Type. enum ROOT::Math::IntegrationOneDim::Type. enumeration specifying the integration types. . EnumeratorkDEFAULT default type specified in the static options . kGAUSS simple Gauss integration method with fixed rule . kLEGENDRE Gauss-Legendre integration. .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Integration.html:3269,integrat,integration,3269,doc/master/group__Integration.html,https://root.cern,https://root.cern/doc/master/group__Integration.html,2,['integrat'],['integration']
Integrability,"odule::allDependents ; (; ). inlineprotected . Return all observables. ; Definition at line 124 of file RooAbsMCStudyModule.h. ◆ binGenData(). bool RooAbsMCStudyModule::binGenData ; (; ). inlineprotected . If true binning of data between generating and fitting is requested. ; Definition at line 161 of file RooAbsMCStudyModule.h. ◆ Class(). static TClass * RooAbsMCStudyModule::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsMCStudyModule::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsMCStudyModule::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file RooAbsMCStudyModule.h. ◆ DeclFileName(). static const char * RooAbsMCStudyModule::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 184 of file RooAbsMCStudyModule.h. ◆ dependents(). RooArgSet * RooAbsMCStudyModule::dependents ; (; ). inlineprotected . Return fit model observables. ; Definition at line 119 of file RooAbsMCStudyModule.h. ◆ doInitializeInstance(). bool RooAbsMCStudyModule::doInitializeInstance ; (; RooMCStudy & ; study). Initializer method called upon attachment to given RooMCStudy object. ; Store reference to RooMCStudy object that this module relates to and call internal module initialization function. ; Definition at line 61 of file RooAbsMCStudyModule.cxx. ◆ extendedGen(). bool RooAbsMCStudyModule::extendedGen ; (; ). inlineprotected . If true extended mode generation is requested. ; Definition at line 156 of file RooAbsMCStudyModule.h. ◆ finalizeRun(). virtual RooDataSet * RooAbsMCStudyModule::finalizeRun ; (; ). inlinevirtual . Method called at the end of each RooMCStudy run. ; If a RooDataSet is returned, it must have a length equal to the number of toy experiments performed and will merged with the fitpar dataset of RooMCStudy. ; Reimplemented in RooChi2MCSModule, Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:16056,depend,dependents,16056,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,1,['depend'],['dependents']
Integrability,"oduleMapFullPath + ""\"" "");; 3576 }; 3577 ; 3578 rcling.Append("" \"""").Append(filename_fullpath).Append(""\"" "");; 3579 rcling.Append(""\"""").Append(linkdef).Append(""\"""");; 3580 ; 3581 // ======= Run rootcling; 3582 if (withInfo) {; 3583 if (verboseLevel>3) {; 3584 ::Info(""ACLiC"",""creating the dictionary files"");; 3585 if (verboseLevel>4) ::Info(""ACLiC"", ""%s"", rcling.Data());; 3586 }; 3587 }; 3588 ; 3589 ///\returns true on success.; 3590 auto ExecAndReport = [](TString cmd) -> bool {; 3591 Int_t result = gSystem->Exec(cmd);; 3592 if (result) {; 3593 if (result == 139); 3594 ::Error(""ACLiC"", ""Executing '%s' failed with a core dump!"", cmd.Data());; 3595 else; 3596 ::Error(""ACLiC"", ""Executing '%s' failed!"", cmd.Data());; 3597 }; 3598 return !result;; 3599 };; 3600 ; 3601 Bool_t result = ExecAndReport(rcling);; 3602 TString depLibraries;; 3603 ; 3604 // ======= Load the library the script might depend on; 3605 if (result) {; 3606 TString linkedlibs = GetLibraries("""", ""S"");; 3607 TString libtoload;; 3608 TString all_libtoload;; 3609 std::ifstream liblist(mapfileout);; 3610 ; 3611 while ( liblist >> libtoload ) {; 3612 // Load the needed library except for the library we are currently building!; 3613 if (libtoload == ""#"") {; 3614 // The comment terminates the list of libraries.; 3615 std::string toskipcomment;; 3616 std::getline(liblist,toskipcomment);; 3617 break;; 3618 }; 3619 if (libtoload != library && libtoload != libname && libtoload != libname_ext) {; 3620 if (produceRootmap) {; 3621 if (loadLib || linkDepLibraries /* For GetLibraries to Work */) {; 3622 result = gROOT->LoadClass("""", libtoload) >= 0;; 3623 if (!result) {; 3624 // We failed to load one of the dependency.; 3625 break;; 3626 }; 3627 }; 3628 if (!linkedlibs.Contains(libtoload)) {; 3629 all_libtoload.Append("" "").Append(libtoload);; 3630 depLibraries.Append("" "");; 3631 depLibraries.Append(GetLibraries(libtoload,""DSL"",kFALSE));; 3632 depLibraries = depLibraries.Strip(); // Remove any trailing spaces.; 3633 }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:121834,depend,depend,121834,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['depend'],['depend']
Integrability,"odules |; Classes |; Enumerations ; Numerical IntegrationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for numerical integration of functions. ; These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator). The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones. The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and ROOT::Math::IntegratorMultiDimOptions classes. . Modules;  Numerical Monte Carlo Integration Classes;  Classes implementing method for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorOneD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Integration.html:1128,integrat,integration,1128,doc/master/group__Integration.html,https://root.cern,https://root.cern/doc/master/group__Integration.html,1,['integrat'],['integration']
Integrability,"oefficient list element (i).; The number of coefficients must be either equal to the number of PDFs,; in which case extended MLL fitting is enabled, or be one less. All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal. If the recursiveFraction flag is true, the coefficients are interpreted as recursive; coefficients as explained in the class description. RooAddPdf(const char* name, const char* title, const RooArgList& pdfList); Generic constructor from list of extended PDFs. There are no coefficients as the expected; number of events from each components determine the relative weight of the PDFs. All PDFs must inherit from RooAbsPdf. RooAddPdf(const RooAddPdf& other, const char* name); Copy constructor. ~RooAddPdf(); Destructor. void fixCoefNormalization(const RooArgSet& refCoefNorm); By default the interpretation of the fraction coefficients is; performed in the contextual choice of observables. This makes the; shape of the p.d.f explicitly dependent on the choice of; observables. This method instructs RooAddPdf to freeze the; interpretation of the coefficients to be done in the given set of; observables. If frozen, fractions are automatically transformed; from the reference normalization set to the contextual normalization; set by ratios of integrals. void fixCoefRange(const char* rangeName); By default the interpretation of the fraction coefficients is; performed in the default range. This make the shape of a RooAddPdf; explicitly dependent on the range of the observables. To allow; a range independent definition of the fraction this function; instructs RooAddPdf to freeze its interpretation in the given; named range. If the current normalization range is different; from the reference range, the appropriate fraction coefficients; are automically calculation from the reference fractions using; ratios if integrals. void updateCoefficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:43277,depend,dependent,43277,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,1,['depend'],['dependent']
Integrability,oefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; Bool_t_doFloorIntroduce floor at zero in pdf; static Bool_t_doFloorGlobalGlobal flag for introducing floor at zero in pdf; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_extendedAllow use as extended p.d.f.; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TIterator*_funcIter! Iterator over FUNC list; RooListProxy_funcListList of component FUNCs; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoef; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManager_normIntMgrThe integration cache manager; RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAb,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealSumPdf.html:42749,integrat,integration,42749,root/html602/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html602/RooRealSumPdf.html,2,['integrat'],['integration']
Integrability,"oes not have to exist yet, the information will be used when the model is actually created.; Also checks if the parameter is already set constant. We don't need to set it constant twice, and we issue a warning in case this is a hint of a possible bug ; Definition at line 69 of file Measurement.cxx. ◆ AddFunctionObject(). void RooStats::HistFactory::Measurement::AddFunctionObject ; (; const RooStats::HistFactory::PreprocessFunction ; function). inline . add a preprocess function object ; Definition at line 74 of file Measurement.h. ◆ AddPOI(). void RooStats::HistFactory::Measurement::AddPOI ; (; const std::string & ; POI). inline . append parameter to vector of PoIs ; Definition at line 49 of file Measurement.h. ◆ AddPreprocessFunction(). void RooStats::HistFactory::Measurement::AddPreprocessFunction ; (; std::string ; name, . std::string ; expression, . std::string ; dependencies . ). Add a preprocessed function by giving the function a name, a functional expression, and a string with a bracketed list of dependencies (eg ""SigXsecOverSM[0,3]"") ; Definition at line 112 of file Measurement.cxx. ◆ ClearConstantParams(). void RooStats::HistFactory::Measurement::ClearConstantParams ; (; ). inline . empty vector of constant parameters ; Definition at line 60 of file Measurement.h. ◆ ClearParamValues(). void RooStats::HistFactory::Measurement::ClearParamValues ; (; ). inline . clear map of parameter values ; Definition at line 70 of file Measurement.h. ◆ GetAsimovDatasets(). std::vector< RooStats::HistFactory::Asimov > & RooStats::HistFactory::Measurement::GetAsimovDatasets ; (; ). inline . get vector of defined Asimov Datasets ; Definition at line 82 of file Measurement.h. ◆ GetBinHigh(). int RooStats::HistFactory::Measurement::GetBinHigh ; (; ). inline . Definition at line 98 of file Measurement.h. ◆ GetBinLow(). int RooStats::HistFactory::Measurement::GetBinLow ; (; ). inline . Definition at line 97 of file Measurement.h. ◆ GetConstantParams(). std::vector< std::string > ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:15985,depend,dependencies,15985,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['depend'],['dependencies']
Integrability,"oes not have to look for it somewhere else. Add more complex inlines (longer than one line) at the bottom of the .h file. Creating separate .icc files increases the build time, the complexity of the build system and, more importantly, increases the number of files one possibly has to scan to find a piece of code.; Declaration Order; In the class definition we first declare all private data members, followed by the private static members, the private methods and the private static methods. Then the protected members and methods and finally the public methods (no public data members). We put private members first since that is the language default and it gives the developer a quick view on what data members are used in a class.; Avoid raw C types; Avoid the use of raw C types like int, long, float, double when using data that might be written to disk. For example, the sizes of int and long are machine dependent. On 32 bit machines ints and longs are 32 bits, but on 64 bit processors an int can be either 32 or 64 bits and a long 64 bits, depending on the processor. For portability reasons and consistent numerical results use the typedefs provided by ROOT's Rtypes.h for the basic raw C types. E.g.: Double_t, Float_t, Int_t etc.; Exception handling; Don't let every method throw an exception when a simple error return code is often enough.; Namespaces; In ROOT 5 all classes are in the ROOT namespace. Some packages will be in a sub-namespace, e.g. ROOT::Reflex. For backward compatibility with the previous versions of ROOT, where all classes were in the global namespace, we have by default using namespace ROOT; in all headers. However, this can be turned off by defining the USE_ROOT_NAMESPACE macro.; Using comments to document the code; ROOT chose Doxygen for its code documentation: please refer to this how-to for all the details.; Source file layout; Each source file, header or implementation file starts with a module identification line and an author line, e.g.:; / @(#)roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:4368,depend,depending,4368,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['depend'],['depending']
Integrability,"of 8-bit, 16-bit, or 32-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2413 of file TVirtualX.cxx. ◆ GetRegionBox(). void TVirtualX::GetRegionBox ; (; Region_t ; reg, . Rectangle_t * ; rect . ). virtual . Returns smallest enclosing rectangle. ; Reimplemented in TGWin32, TGX11, TGCocoa, and TGWin32VirtualXProxy.; Definition at line 2242 of file TVirtualX.cxx. ◆ GetRGB(). void TVirtualX::GetRGB ; (; Int_t ; index, . Float_t & ; r, . Float_t & ; g, . Float_t & ; b . ). virtual . Returns RGB values for color ""index"". ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 442 of file TVirtualX.cxx. ◆ GetScreen(). Int_t TVirtualX::GetScreen ; (; ); const. virtual . Returns screen number. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1238 of file TVirtualX.cxx. ◆ GetTextExtent() [1/2]. void TVirtualX::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). virtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGQuartz.; Definition at line 454 of file TVirtualX.cxx. ◆ GetTextExtent() [2/2]. void TVirtualX::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . wchar_t * ; mess . ). virtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented in TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 466 of file TVirtualX.cxx. ◆ GetTextMagnitude(). Float_t TVirtualX::GetTextMagnitude ; (; ). virtual . Returns the current font magnification factor. ; Reim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:90959,interface,interface,90959,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['interface'],['interface']
Integrability,"of RVec (see 6.24 release notes); 299 if (strncmp(GetName(), ""ROOT::VecOps::RVec<"", 19) == 0) {; 300 Warning(""Build"", ""Due to some major, backward-incompatible improvements planned for ROOT::RVec, direct I/O of ""; 301 ""ROOT::RVec objects will break between v6.24 and v6.26. Please use std::vectors instead. See ""; 302 ""the release notes of v6.24 for more information."");; 303 }; 304 ; 305 TStreamerElement::Class()->IgnoreTObjectStreamer();; 306 ; 307 fClass->BuildRealData(nullptr, isTransient);; 308 ; 309 fCheckSum = fClass->GetCheckSum();; 310 ; 311 Bool_t needAllocClass = kFALSE;; 312 Bool_t wasCompiled = fComp != 0;; 313 ROOT::TSchemaRuleSet::TMatches rules;; 314 if (fClass->GetSchemaRules()) {; 315 rules = fClass->GetSchemaRules()->FindRules(fClass->GetName(), fClassVersion);; 316 }; 317 ; 318 //; 319 // Iterate over base classes.; 320 //; 321 ; 322 // ROOT-9808: Here we skip the investigations of the base classes in case; 323 // this is a pair, otherwise, on some STL implementations, it can happen that; 324 // pair has mother classes which are an internal implementation detail and; 325 // would result in bogus messages printed on screen.; 326 if (!TClassEdit::IsStdPair(fClass->GetName())) {; 327 const bool isCollection = fClass->GetCollectionProxy();; 328 const bool isString = !strcmp(fClass->GetName(), ""string"");; 329 TBaseClass* base = 0;; 330 TIter nextb(fClass->GetListOfBases());; 331 while ((base = (TBaseClass*)nextb())) {; 332 TStreamerElement* element = 0;; 333 Int_t offset = base->GetDelta();; 334 if (offset == kMissing) {; 335 continue;; 336 }; 337 if (offset == kNeedObjectForVirtualBaseClass) {; 338 if (!isTransient); 339 Error(""Build()"", ""Cannot stream virtual base %s of class %s"",; 340 base->GetName(), fClass->GetName());; 341 continue;; 342 }; 343 const char* bname = base->GetName();; 344 const char* btitle = base->GetTitle();; 345 // this case appears with STL collections as base class.; 346 if (!strcmp(bname, ""string"")) {; 347 element = new TStreame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:10243,message,messages,10243,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['message'],['messages']
Integrability,"of TF1) re-implement for better efficiency ; Reimplemented from ROOT::Math::IParametricFunctionOneDim.; Definition at line 142 of file WrappedTF1.h. ◆ DoEvalPar(). double ROOT::Math::WrappedTF1::DoEvalPar ; (; double ; x, . const double * ; p . ); const. inlineoverrideprivatevirtual . evaluate function passing coordinates x and vector of parameters ; Implements ROOT::Math::IParametricFunctionOneDim.; Definition at line 133 of file WrappedTF1.h. ◆ DoParameterDerivative(). double ROOT::Math::WrappedTF1::DoParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar . ); const. overrideprivatevirtual . evaluate the derivative of the function with respect to the parameters ; Implements ROOT::Math::IParametricGradFunctionOneDim.; Definition at line 119 of file WrappedTF1.cxx. ◆ FdF(). void ROOT::Math::WrappedTF1::FdF ; (; double ; x, . double & ; f, . double & ; deriv . ); const. inlineoverridevirtual . calculate function and derivative at same time (required by IGradient interface) ; Reimplemented from ROOT::Math::IGradientFunctionOneDim.; Definition at line 116 of file WrappedTF1.h. ◆ GetDerivPrecision(). double ROOT::Math::WrappedTF1::GetDerivPrecision ; (; ). static . get precision value used for calculating the derivative step-size ; Definition at line 147 of file WrappedTF1.cxx. ◆ NPar(). unsigned int ROOT::Math::WrappedTF1::NPar ; (; ); const. inlineoverridevirtual . return number of parameters ; Implements ROOT::Math::IBaseParam.; Definition at line 97 of file WrappedTF1.h. ◆ operator=(). WrappedTF1 & ROOT::Math::WrappedTF1::operator= ; (; const WrappedTF1 & ; rhs). Assignment operator. ; Definition at line 83 of file WrappedTF1.cxx. ◆ ParameterGradient(). void ROOT::Math::WrappedTF1::ParameterGradient ; (; double ; x, . const double * ; par, . double * ; grad . ); const. overridevirtual . evaluate the derivative of the function with respect to the parameters ; Reimplemented from ROOT::Math::IParametricGradFunctionOneDim.; Definition at line 95",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html:9043,interface,interface,9043,doc/master/classROOT_1_1Math_1_1WrappedTF1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html,1,['interface'],['interface']
Integrability,"of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tfQuerisCounter! how many query was applied; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TSQLServer*fSQL! interface to SQL database ; TList*fSQLClassInfos! list of SQL class infos; Int_tfSQLIOversion! version of SQL I/O which is stored in configurations; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfStmtCounter! count numbers of active statements; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:30633,interface,interface,30633,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,3,['interface'],['interface']
Integrability,"of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tfQuerisCounter! how many query was applied; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TSQLServer*fSQL! interface to SQL database; TList*fSQLClassInfos! list of SQL class infos; Int_tfSQLIOversion! version of SQL I/O which is stored in configurations; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfStmtCounter! count numbers of active statements; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLFile.html:32476,interface,interface,32476,root/html602/TSQLFile.html,https://root.cern,https://root.cern/root/html602/TSQLFile.html,2,['interface'],['interface']
Integrability,"of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:9451,integrat,integration,9451,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,6,['integrat'],['integration']
Integrability,"of a one dimensional data set. The data can come from an array of Double_t (or Float_t ) or from a 1D-histogram. The possible options to draw a TPie are:. “R” Paint the labels along the central “R”adius of slices.; “T” Paint the labels in a direction “T”angent to circle that describes the TPie.; “3D” Draw the pie-chart with a pseudo 3D effect.; “NOL” No OutLine: do not draw the slices’ outlines; any property over the slices’ line is ignored. The method SetLabelFormat() is used to customize the label format. The format string must contain one of these modifiers:. %txt : to print the text label associated with the slice. %val : to print the numeric value of the slice. %frac : to print the relative fraction of this slice. %perc : to print the % of this slice. mypie->SetLabelFormat(""%txt (%frac)"");; See the macro $ROOTSYS/tutorials/graphics/piechart.C . The picture generated by tutorial macro piechart.C. 3.21 The User Interface for Histograms; The classes T H1 Editor and T H2 Editor provides the user interface for setting histogram’s attributes and rebinning interactively.; 3.21.1 TH1Editor. 3.21.1.1 The Style Tab; 3.21.1.1.1 Title; sets the title of the histogram.; 3.21.1.1.2 Plot; draw a 2D or 3D plot; according to the dimension, different drawing possibilities can be set.; 3.21.1.1.3 Error; add different error bars to the histogram (no errors, simple, etc.).; 3.21.1.1.4 Add; further things which can be added to the histogram (None, simple/smooth line, fill area, etc.); 3.21.1.2 2-D Plot; 3.21.1.2.1 Simple Drawing; draw a simple histogram without errors (= “HIST” draw option). In combination with some other draw options an outer line is drawn on top of the histogram; 3.21.1.2.2 Show markers; draw a marker on to of each bin (=“P” draw option).; 3.21.1.2.3 Draw bar chart; draw a bar chart (=“B” draw option).; 3.21.1.2.4 Bar option; draw a bar chart (=“BAR” draw option); if selected, it will show an additional interface elements for bars: width, offset, percentage and the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:135178,interface,interface,135178,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['interface'],['interface']
Integrability,"of all members ; TDOMParser Class Reference. . Definition at line 20 of file TDOMParser.h. Public Member Functions;  TDOMParser ();  TDOMParser constructor. ;  ;  ~TDOMParser () override;  TDOMParser destructor, it calls ReleaseUnderlying(). ;  ; virtual TXMLDocument * GetXMLDocument () const;  Returns the TXMLDocument. ;  ; TClass * IsA () const override;  ; Int_t ParseBuffer (const char *buffer, Int_t len) override;  It parses a buffer, much like ParseFile(). ;  ; Int_t ParseFile (const char *filename) override;  Parse the XML file where filename is the XML file name. ;  ; void ReleaseUnderlying () override;  Release any existing document. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TXMLParser;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDOMParser.html:1312,message,message,1312,doc/master/classTDOMParser.html,https://root.cern,https://root.cern/doc/master/classTDOMParser.html,1,['message'],['message']
Integrability,"of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TMessage Class Reference. . Definition at line 33 of file TMessage.h. Public Member Functions;  TMessage (UInt_t what=kMESS_ANY, Int_t bufsiz=TBuffer::kInitialSize);  Create a TMessage object for storing objects. ;  ; virtual ~TMessage ();  Destructor. ;  ; char * CompBuffer () const;  ; Int_t CompLength () const;  ; Int_t Compress ();  Compress the message. ;  ; void EnableSchemaEvolution (Bool_t enable=kTRUE);  ; void ForceWriteInfo (TVirtualStreamerInfo *info, Bool_t force) override;  Force writing the TStreamerInfo to the message. ;  ; void Forward ();  Change a buffer that was received into one that can be send, i.e. ;  ; TClass * GetClass () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; TList * GetStreamerInfos () const;  ; TClass * IsA () const override;  ; void Reset () override;  Reset the message buffer so we can use (i.e. fill) it again. ;  ; void Reset (UInt_t what);  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; void SetWhat (UInt_t what);  Using this method one can change the message type a-posteriori In case you OR ""what"" with kMESS_ACK, the message will wait for an acknowledgment from the remote side. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TagStreamerInfo (TVirtualStreamerInfo *info) override;  Remember that ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:1239,message,message,1239,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['message'],['message']
Integrability,of and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:15791,interface,interface,15791,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['interface'],['interface']
Integrability,of and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  ►NDetail;  ►NRDF;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedFilterA wrapper around a concrete ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:11425,interface,interface,11425,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['interface'],['interface']
Integrability,of and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CR,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:12891,interface,interface,12891,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['interface'],['interface']
Integrability,of and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  ►NDetail;  ►NTDF;  CTCustomColumn;  CTCustomColumnBase;  CTFilter;  CTFilterBase;  CTLoopManager;  CTRange;  CTRangeBase;  CT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:9679,interface,interface,9679,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['interface'],['interface']
Integrability,of and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  ►NDetail;  ►NTDF;  ►NTCCHelperTypes;  CTNothing;  CTSlot;  CTSlotAndEntry;  CTCustomColumn;  CTCustomColumnBase;  CTFilter;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:9679,interface,interface,9679,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['interface'],['interface']
Integrability,"of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSocket.html:18879,message,message,18879,root/html530/TSocket.html,https://root.cern,https://root.cern/root/html530/TSocket.html,18,['message'],['message']
Integrability,"of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionLevel(Int_t level = 1); Set the message compression level. Can be between 0 and 9 with 0; being no compression and 9 maximum compression. In general the default; level of 1 is the best compromise between achieved compression and; cpu time. Compression will only happen when the message is > 256 bytes. Bool_t Authenticate(const char* user); Authenticated the socket with specified user. TSocket * CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:18602,message,message,18602,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,2,['message'],['message']
Integrability,"of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMultiDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 162 of file IntegratorMultiDim.h. Member Data Documentation. ◆ fFunc. std::unique_ptr<IMultiGenFunction> ROOT::Math::IntegratorMultiDim::fFunc. private . pointer to owned function ; Definition at line 198 of file IntegratorMultiDim.h. ◆ fIntegrator. VirtualIntegratorMultiDim* ROOT::Math::IntegratorMultiDim::fIntegrator. private . pointer to multi-di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:9270,integrat,integration,9270,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"of file RooAbsArg.h. ◆ addParameters(). void RooAbsArg::addParameters ; (; RooAbsCollection & ; params, . const RooArgSet * ; nset = nullptr, . bool ; stripDisconnected = true . ); const. private . Add all parameters of the function and its daughters to params. ; Parameters. [in]paramsCollection that stores all parameters. Add all new parameters to this. ; [in]nsetNormalisation set (optional). If a value depends on this set, it's not a parameter. ; [in]stripDisconnectedPassed on to getParametersHook(). . Definition at line 582 of file RooAbsArg.cxx. ◆ addServer(). void RooAbsArg::addServer ; (; RooAbsArg & ; server, . bool ; valueProp = true, . bool ; shapeProp = false, . std::size_t ; refCount = 1 . ). Register another RooAbsArg as a server to us, ie, declare that we depend on it. ; Parameters. serverThe server to be registered. ; valuePropIn addition to the basic client-server relationship, declare dependence on the server's value. ; shapePropIn addition to the basic client-server relationship, declare dependence on the server's shape. ; refCountOptionally add with higher reference count (if multiple components depend on it) . Definition at line 327 of file RooAbsArg.cxx. ◆ addServerList(). void RooAbsArg::addServerList ; (; RooAbsCollection & ; serverList, . bool ; valueProp = true, . bool ; shapeProp = false . ). Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ; Definition at line 363 of file RooAbsArg.cxx. ◆ aggregateCacheUniqueSuffix(). const char * RooAbsArg::aggregateCacheUniqueSuffix ; (; ); const. Definition at line 2336 of file RooAbsArg.cxx. ◆ applyWeightSquared(). void RooAbsArg::applyWeightSquared ; (; bool ; flag). virtual . Disables or enables the usage of squared weights. ; Needs to be overloaded in the likelihood classes for which this is relevant. ; Reimplemented in RooNLLVar, and ProgressMonitor.; Definition at line 2521 of file RooAbsArg.cxx. ◆ attachArgs(). void RooAbsArg::attachArgs ; (; const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:45136,depend,dependence,45136,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['depend'],['dependence']
Integrability,"of file RooSuperCategory.cxx. ◆ setIndex() [3/3]. virtual bool RooAbsCategoryLValue::setIndex ; (; value_type ; index, . bool ; printError = true . ). virtual . Change category state by specifying the index code of the desired state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. Returnsbool to signal an error. ; Implements RooAbsCategoryLValue. ◆ setLabel() [1/4]. bool RooSuperCategory::setLabel ; (; const char * ; label, . bool ; printError = true . ). overridevirtual . Set the value of the super category by specifying the state name. ; This looks up the corresponding index number, and calls setIndex(). ; Implements RooAbsCategoryLValue.; Definition at line 119 of file RooSuperCategory.cxx. ◆ setLabel() [2/4]. virtual bool RooAbsCategoryLValue::setLabel ; (; const char * ; label, . bool ; printError = true . ). virtual . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implements RooAbsCategoryLValue. ◆ setLabel() [3/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [4/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Set the value of the super category by specifying the state name. ; This looks up the corresponding index number, and calls setIndex(). ; Definition at line 60 of file RooAbsCategoryLValue.h. ◆ Streamer(). void RooSuperCategory::Streamer ; (; TBuffer & ; R__b). over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:53656,message,message,53656,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,1,['message'],['message']
Integrability,"of file TGHtmlTable.cxx. ◆ TextInsertCmd(). int TGHtml::TextInsertCmd ; (; int ; argc, . char ** ; argv . ). protected . Insert text into text token, or break token into two text tokens. ; Also, handle backspace char by deleting text. Should also handle newline char by splitting text. ; Definition at line 1184 of file TGHtmlParse.cxx. ◆ TokenByIndex(). TGHtmlElement * TGHtml::TokenByIndex ; (; int ; N, . int ; flag . ). protected . Return a pointer to the Nth TGHtmlElement in the list. ; If there is no Nth element, return 0 if flag==0 and return either the first or last element (whichever is closest) if flag!=0 ; Definition at line 48 of file TGHtmlIndex.cxx. ◆ Tokenize(). int TGHtml::Tokenize ; (; ). protected . Process as much of the input HTML as possible. ; Construct new TGHtmlElement objects and appended them to the list. Return the number of characters actually processed.; This routine may invoke a callback procedure which could delete the HTML widget.; This routine is not reentrant for the same HTML widget. To prevent reentrancy (during a callback), the p->fICol field is set to a negative number. This is a flag to future invocations not to reentry this routine. The p->fICol field is restored before exiting, of course. ; Definition at line 563 of file TGHtmlParse.cxx. ◆ TokenizerAppend(). void TGHtml::TokenizerAppend ; (; const char * ; text). protected . Append text to the tokenizer engine. ; Definition at line 1071 of file TGHtmlParse.cxx. ◆ TokenNumber(). int TGHtml::TokenNumber ; (; TGHtmlElement * ; p). protected . Return the token number for the given TGHtmlElement. ; Definition at line 79 of file TGHtmlIndex.cxx. ◆ TypeToName(). const char * TGHtml::TypeToName ; (; int ; type). protected . Convert a type into a symbolic name. ; Definition at line 1311 of file TGHtmlParse.cxx. ◆ UnderlineLinks(). void TGHtml::UnderlineLinks ; (; int ; onoff). Set/reset html links underline. ; Definition at line 408 of file TGHtml.cxx. ◆ UnlinkAndFreeBlock(). void TGHtml::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:89716,rout,routine,89716,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,"of file TGraph2D.h. ◆ GetEZhigh(). virtual Double_t * TGraph2D::GetEZhigh ; (; ); const. inlinevirtual . Reimplemented in TGraph2DAsymmErrors.; Definition at line 134 of file TGraph2D.h. ◆ GetEZlow(). virtual Double_t * TGraph2D::GetEZlow ; (; ); const. inlinevirtual . Reimplemented in TGraph2DAsymmErrors.; Definition at line 133 of file TGraph2D.h. ◆ GetHistogram(). TH2D * TGraph2D::GetHistogram ; (; Option_t * ; option = """"). By default returns a pointer to the Delaunay histogram. ; If fHistogram doesn't exist, books the 2D histogram fHistogram with a margin around the hull. Calls TGraphDelaunay::Interpolate at each bin centre to build up an interpolated 2D histogram.; If the ""empty"" option is selected, returns an empty histogram booked with the limits of fX, fY and fZ. This option is used when the data set is drawn with markers only. In that particular case there is no need to find the Delaunay triangles.; By default use the new interpolation routine based on Triangles If the option ""old"" the old interpolation is used ; Definition at line 1003 of file TGraph2D.cxx. ◆ GetListOfFunctions(). TList * TGraph2D::GetListOfFunctions ; (; ); const. inline . Definition at line 112 of file TGraph2D.h. ◆ GetMargin(). Double_t TGraph2D::GetMargin ; (; ); const. inline . Definition at line 116 of file TGraph2D.h. ◆ GetMaximum(). Double_t TGraph2D::GetMaximum ; (; ); const. inline . Definition at line 117 of file TGraph2D.h. ◆ GetMinimum(). Double_t TGraph2D::GetMinimum ; (; ); const. inline . Definition at line 118 of file TGraph2D.h. ◆ GetN(). Int_t TGraph2D::GetN ; (; ); const. inline . Definition at line 122 of file TGraph2D.h. ◆ GetNpx(). Int_t TGraph2D::GetNpx ; (; ); const. inline . Definition at line 109 of file TGraph2D.h. ◆ GetNpy(). Int_t TGraph2D::GetNpy ; (; ); const. inline . Definition at line 110 of file TGraph2D.h. ◆ GetPoint(). Int_t TGraph2D::GetPoint ; (; Int_t ; i, . Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ); const. virtual . Get x, y and z valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D.html:46777,rout,routine,46777,doc/master/classTGraph2D.html,https://root.cern,https://root.cern/doc/master/classTGraph2D.html,1,['rout'],['routine']
Integrability,of file TMessage.cxx. ◆ GetClass(). TClass * TMessage::GetClass ; (; ); const. inline . Definition at line 71 of file TMessage.h. ◆ GetCompressionAlgorithm(). Int_t TMessage::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 100 of file TMessage.h. ◆ GetCompressionLevel(). Int_t TMessage::GetCompressionLevel ; (; ); const. inline . Definition at line 106 of file TMessage.h. ◆ GetCompressionSettings(). Int_t TMessage::GetCompressionSettings ; (; ); const. inline . Definition at line 112 of file TMessage.h. ◆ GetStreamerInfos(). TList * TMessage::GetStreamerInfos ; (; ); const. inline . Definition at line 80 of file TMessage.h. ◆ IsA(). TClass * TMessage::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBufferFile.; Definition at line 96 of file TMessage.h. ◆ operator=(). void TMessage::operator= ; (; const TMessage & ; ). private . ◆ Reset() [1/2]. void TMessage::Reset ; (; ). overridevirtual . Reset the message buffer so we can use (i.e. fill) it again. ; Reimplemented from TBufferIO.; Definition at line 179 of file TMessage.cxx. ◆ Reset() [2/2]. void TMessage::Reset ; (; UInt_t ; what). inline . Definition at line 74 of file TMessage.h. ◆ SetCompressionAlgorithm(). void TMessage::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). Set compression algorithm. ; Definition at line 242 of file TMessage.cxx. ◆ SetCompressionLevel(). void TMessage::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). Set compression level. ; Definition at line 264 of file TMessage.cxx. ◆ SetCompressionSettings(). void TMessage::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). Set compression settings. ; Definition at line 288 of file TMessage.cxx. ◆ SetLength(). void TMessage::SetLength ; (; ); const. protected . Set the message length at the beginning of the message buffer. ; Th,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:44559,message,message,44559,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['message'],['message']
Integrability,"of file TServerSocket.cxx. ◆ GetLocalInetAddress(). TInetAddress TServerSocket::GetLocalInetAddress ; (; ). overridevirtual . Return internet address of host to which the server socket is bound, i.e. ; the local host. In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented from TSocket.; Definition at line 245 of file TServerSocket.cxx. ◆ GetLocalPort(). Int_t TServerSocket::GetLocalPort ; (; ). overridevirtual . Get port # to which server socket is bound. In case of error returns -1. ; Reimplemented from TSocket.; Definition at line 258 of file TServerSocket.cxx. ◆ IsA(). TClass * TServerSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 95 of file TServerSocket.h. ◆ operator=(). void TServerSocket::operator= ; (; const TServerSocket & ; ). private . ◆ Recv() [1/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 84 of file TServerSocket.h. ◆ Recv() [2/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 86 of file TServerSocket.h. ◆ Recv() [3/4]. Int_t TServerSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns lengt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:25123,message,message,25123,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['message'],['message']
Integrability,"of file TXMLFile.cxx. ◆ ReadKeysList(). Int_t TXMLFile::ReadKeysList ; (; TDirectory * ; dir, . XMLNodePointer_t ; topnode . ). protected . Read list of keys for directory. ; Definition at line 630 of file TXMLFile.cxx. ◆ ReadStreamerElement(). void TXMLFile::ReadStreamerElement ; (; XMLNodePointer_t ; node, . TStreamerInfo * ; info . ). protected . read and reconstruct single TStreamerElement from xml node ; Definition at line 825 of file TXMLFile.cxx. ◆ Recover(). Int_t TXMLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:66971,message,message,66971,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['message'],['message']
Integrability,"of file TXMLFile.h. ◆ WriteBuffer(). Bool_t TXMLFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). inlinefinalvirtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 93 of file TXMLFile.h. ◆ WriteFree(). void TXMLFile::WriteFree ; (; ). inlinefinalvirtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented from TFile.; Definition at line 96 of file TXMLFile.h. ◆ WriteHeader(). void TXMLFile::WriteHeader ; (; ). inlinefinalvirtual . Write File Header. ; Reimplemented from TFile.; Definition at line 97 of file TXMLFile.h. ◆ WriteStreamerInfo(). void TXMLFile::WriteStreamerInfo ; (; ). finalvirtual . convert all TStreamerInfo, used in file, to xml format ; Reimplemented from TFile.; Definition at line 664 of file TXMLFile.cxx. ◆ XML(). TXMLEngine * TXMLFile::XML ; (; ). inline . Definition at line 112 of file TXMLFile.h. Member Data Documentation. ◆ fDoc. XMLDocPointer_t TXMLFile::fDoc {nullptr}. protected . Definition at line 130 of file TXMLFile.h. ◆ fIOVersion. Int_t TXMLFile::fIOVersion {0}. protected . object for interface with xml library ; Definition at line 136 of file TXMLFile.h. ◆ fKeyCounter. Long64_t TXMLFile::fKeyCounter {0}. protected . indicates format of ROOT xml file ; Definition at line 138 of file TXMLFile.h. ◆ fStreamerInfoNode. XMLNodePointer_t TXMLFile::fStreamerInfoNode {nullptr}. protected . Definition at line 132 of file TXMLFile.h. ◆ fXML. std::unique_ptr<TXMLEngine> TXMLFile::fXML. protected . pointer of node with streamer info data ; Definition at line 134 of file TXMLFile.h. Libraries for TXMLFile:. [legend]; The documentation for this class was generated from the following files:; io/xml/inc/TXMLFile.h; io/xml/src/TXMLFile.cxx. TXMLFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:76588,interface,interface,76588,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['interface'],['interface']
Integrability,"of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:15573,message,message,15573,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,4,['message'],['message']
Integrability,"of its arguments ;  CTMethodBrowsableThis helper object allows the browsing of methods of objects stored in branches ;  CTMethodCallMethod or function calling interface ;  CTMinuitImplementation in C++ of the Minuit package written by Fred James ;  CTMinuit2TraceObject;  CTMinuitMinimizerTMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit ;  CTMixtureManages a detector mixture ;  CTMLPAnalyzer;  CTModuleDocInfo;  CTMonaLisaText;  CTMonaLisaValue;  CTMonaLisaWriter;  CTMonitor;  CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMPWorkerExecutorThis class works together with TProcessExecutor to allow the execution of functions in server processes ;  CTMPWorkerExecutor< F, T, void >;  CTMPWorkerExecutor< F, void, R >;  CTMPWorkerTreeThis class works in conjuction with TTreeProcessorMP, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMPWorkerTreeFuncTemplated derivation of TMPWorkerTree handlign generic function tree processing ;  CTMPWorkerTreeSelTemplated derivation of TMPWorkerTree handlign selector tree processing ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNotifyLinkLinks multiple lis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:195923,message,messages,195923,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['message'],['messages']
Integrability,"of its arguments ;  CTMethodBrowsableThis helper object allows the browsing of methods of objects stored in branches ;  CTMethodCallMethod or function calling interface ;  CTMinuitImplementation in C++ of the Minuit package written by Fred James ;  CTMinuit2TraceObject;  CTMinuitMinimizerTMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit ;  CTMixtureManages a detector mixture ;  CTMLPAnalyzer;  CTModuleDocInfo;  CTMonaLisaText;  CTMonaLisaValue;  CTMonaLisaWriter;  CTMonitor;  CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMPWorkerExecutorThis class works together with TProcessExecutor to allow the execution of functions in server processes ;  CTMPWorkerExecutor< F, T, void >;  CTMPWorkerExecutor< F, void, R >;  CTMPWorkerTreeThis class works in conjuction with TTreeProcessorMP, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMPWorkerTreeFuncTemplated derivation of TMPWorkerTree handlign generic function tree processing ;  CTMPWorkerTreeSelTemplated derivation of TMPWorkerTree handlign selector tree processing ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:188692,message,messages,188692,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['message'],['messages']
Integrability,"of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). virtual ~IntegratorMultiDim(); destructor. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html:4462,integrat,integration,4462,root/html526/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FiniteInt_t Finite(Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8cxx_source.html:54876,message,message,54876,doc/master/TF2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF2_8cxx_source.html,1,['message'],['message']
Integrability,"of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 1000, int rule = 3). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 1000, int rule = 3). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html:5494,integrat,integration,5494,root/html526/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html,2,"['integrat', 'interface']","['integration', 'interface']"
Integrability,"of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TROOT. Function documentation; TROOT(); Default ctor. TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:20987,synchroniz,synchronize,20987,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['synchroniz'],['synchronize']
Integrability,of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CData;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  Cpasswd;  C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:81361,interface,interface,81361,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['interface'],['interface']
Integrability,"of the TROOT object initializes; 623/// the ROOT system. It must be the first ROOT related action that is; 624/// performed by a program. The TROOT object must be created on the stack; 625/// (can not be called via new since ""operator new"" is protected). The; 626/// TROOT object is either created as a global object (outside the main(); 627/// program), or it is one of the first objects created in main().; 628/// Make sure that the TROOT object stays in scope for as long as ROOT; 629/// related actions are performed. TROOT is a so called singleton so; 630/// only one instance of it can be created. The single TROOT object can; 631/// always be accessed via the global pointer gROOT.; 632/// The name and title arguments can be used to identify the running; 633/// application. The initfunc argument can contain an array of; 634/// function pointers (last element must be 0). These functions are; 635/// executed at the end of the constructor. This way one can easily; 636/// extend the ROOT system without adding permanent dependencies; 637/// (e.g. the graphics system is initialized via such a function).; 638 ; 639TROOT::TROOT(const char *name, const char *title, VoidFuncPtr_t *initfunc); 640 : TDirectory(), fLineIsProcessing(0), fVersion(0), fVersionInt(0), fVersionCode(0),; 641 fVersionDate(0), fVersionTime(0), fBuiltDate(0), fBuiltTime(0),; 642 fTimer(0), fApplication(nullptr), fInterpreter(nullptr), fBatch(kTRUE),; 643 fIsWebDisplay(kFALSE), fIsWebDisplayBatch(kFALSE), fEditHistograms(kTRUE),; 644 fFromPopUp(kTRUE),fMustClean(kTRUE),fForceStyle(kFALSE),; 645 fInterrupt(kFALSE),fEscape(kFALSE),fExecutingMacro(kFALSE),fEditorMode(0),; 646 fPrimitive(nullptr),fSelectPad(nullptr),fClasses(nullptr),fTypes(nullptr),fGlobals(nullptr),fGlobalFunctions(nullptr),; 647 fClosedObjects(nullptr),fFiles(nullptr),fMappedFiles(nullptr),fSockets(nullptr),fCanvases(nullptr),fStyles(nullptr),fFunctions(nullptr),; 648 fTasks(nullptr),fColors(nullptr),fGeometries(nullptr),fBrowsers(nullptr),fS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:25064,depend,dependencies,25064,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['depend'],['dependencies']
Integrability,"of the file containing the class declaration ; Definition at line 185 of file TGColorDialog.h. ◆ DoPreview(). void TGColorDialog::DoPreview ; (; ). Slot method called when Preview button is clicked. ; Definition at line 1630 of file TGColorDialog.cxx. ◆ GetCustomPalette(). TGColorPalette * TGColorDialog::GetCustomPalette ; (; ); const. inline . Definition at line 177 of file TGColorDialog.h. ◆ GetPalette(). TGColorPalette * TGColorDialog::GetPalette ; (; ); const. inline . Definition at line 176 of file TGColorDialog.h. ◆ IsA(). TClass * TGColorDialog::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 185 of file TGColorDialog.h. ◆ operator=(). TGColorDialog & TGColorDialog::operator= ; (; const TGColorDialog & ; ). privatedelete . ◆ ProcessMessage(). Bool_t TGColorDialog::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overrideprotectedvirtual . Process messages for the color selection dialog. ; Reimplemented from TGFrame.; Definition at line 1474 of file TGColorDialog.cxx. ◆ SetColorInfo(). void TGColorDialog::SetColorInfo ; (; Int_t ; event, . Int_t ; px, . Int_t ; py, . TObject * ; selected . ). Set the color info in RGB and HLS parts. ; Definition at line 1604 of file TGColorDialog.cxx. ◆ SetCurrentColor(). void TGColorDialog::SetCurrentColor ; (; Pixel_t ; col). virtual . Change current color. ; Definition at line 1341 of file TGColorDialog.cxx. ◆ Streamer(). void TGColorDialog::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGColorDialog::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 185 of file TGColorDialog.h. ◆ UpdateAlpha(). void TGColorDialog::UpdateAlpha ; (; Pixel_t * ; c). protected . Update Opacity text entry with alpha value of color c. ; Definition at line 1401 of file TGColorDialog.cxx. ◆ Upda",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorDialog.html:41477,message,messages,41477,doc/master/classTGColorDialog.html,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html,1,['message'],['messages']
Integrability,"of the matrices (including the diagonal) as a vector of sizes N = D1 * (D1 + 1)/2. ;  ; — Other Functions —; bool IsInUse (const T *p) const;  Function to check if a matrix is sharing same memory location of the passed pointer This function is used by the expression templates to avoid the alias problem during expression evaluation. ;  ; std::ostream & Print (std::ostream &os) const;  Print: used by operator<<() ;  . Public Attributes; — Data Member —; R fRep;  Matrix Storage Object containing matrix data. ;  . #include <Math/SMatrix.h>; Member Typedef Documentation. ◆ const_iterator. template<class T , unsigned int D1, unsigned int D2 = D1, class R = MatRepStd<T, D1, D2>> . typedef const T* ROOT::Math::SMatrix< T, D1, D2, R >::const_iterator. STL const_iterator interface. ; Definition at line 115 of file SMatrix.h. ◆ iterator. template<class T , unsigned int D1, unsigned int D2 = D1, class R = MatRepStd<T, D1, D2>> . typedef T* ROOT::Math::SMatrix< T, D1, D2, R >::iterator. STL iterator interface. ; Definition at line 112 of file SMatrix.h. ◆ rep_type. template<class T , unsigned int D1, unsigned int D2 = D1, class R = MatRepStd<T, D1, D2>> . typedef R ROOT::Math::SMatrix< T, D1, D2, R >::rep_type. storage representation type ; Definition at line 109 of file SMatrix.h. ◆ value_type. template<class T , unsigned int D1, unsigned int D2 = D1, class R = MatRepStd<T, D1, D2>> . typedef T ROOT::Math::SMatrix< T, D1, D2, R >::value_type. contained scalar type ; Definition at line 106 of file SMatrix.h. Member Enumeration Documentation. ◆ anonymous enum. template<class T , unsigned int D1, unsigned int D2 = D1, class R = MatRepStd<T, D1, D2>> . anonymous enum. Enumeration defining the matrix dimension, number of rows, columns and size = rows*columns) . EnumeratorkRows return no. of matrix rows . kCols return no. of matrix columns . kSize return no of elements: rows*columns . Definition at line 234 of file SMatrix.h. Constructor & Destructor Documentation. ◆ SMatrix() [1/10]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html:12723,interface,interface,12723,doc/master/classROOT_1_1Math_1_1SMatrix.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html,1,['interface'],['interface']
Integrability,"of the start point of the current segment; Double_t *end - coordinate of the end point of the current segment. void Paint(Option_t* opt); to be documented. void PaintPoints(Int_t n, Float_t* p = 0, Option_t* opt = """"); Draw this 3-D polyline with new coordinates*-; *-* ===========================================. void PaintPolyMarker(Int_t n, Float_t* p = 0, Marker_t m = 0, Option_t* opt = """"); -*Paint polymarker in CurrentPad World coordinates; *-* ================================================. void Paint3d(Option_t* opt); to be documented. void PaintX3DLine(Option_t* opt = """"); to be documented. void PaintX3DMarker(Option_t* opt = """"); to be documented. Float_t Product(Float_t* v1, Float_t* v2, Int_t ndim = 3); to be documented. Double_t Product(Double_t* v1, Double_t* v2, Int_t ndim = 3); to be documented. Double_t * Gyrot(Double_t* dirc, Double_t cosang, Double_t sinang, Double_t** trans). call gyrot(dirc,angp,trans,ntrans) vp 880722; revised vp 921009; revised (f->c++) vf 981006; routine for filling rotation transformation matrix; from axis and rotation angle around. arguments:; dirc direct cosinuses (may be not normalised); cosang, sinang - cos and sin of the rotation angle; tranz rotation & shift matrix 3*3 (input/output). This code is provided by Victor Perevoztchikov. Color_t SetColorAttribute(Color_t color); to be documented. Size_t SetSizeAttribute(Size_t size); to be documented. Style_t SetStyleAttribute(Style_t style); SetStyleAttribute(Style_t style) - set new style for this line; Returns:; previous value of the line style. void SetShape(TShape* shape); to be documented. Int_t Size() const; to be documented. void Sizeof3D() const; -*Return total X3D size of this shape with its attributes; *-* =======================================================. void SetConnection(TShape* connection); { fConnection = connection;}. TPolyLineShape(). TShape * GetConnection() const; { return fConnection;}. TPoints3DABC * GetMarker() const; { return fPoints;}. TPoint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyLineShape.html:13643,rout,routine,13643,root/html528/TPolyLineShape.html,https://root.cern,https://root.cern/root/html528/TPolyLineShape.html,4,['rout'],['routine']
Integrability,"of writing: next.Next()which is legal, but looks rather odd, iteration is written as next(). This works because the function operator() is defined for the TIter class to be equivalent to the Next() method.; 16.6 The TList Collection; A TList is a doubly linked list. Before being inserted into the list the object pointer is wrapped in a TObjLink object that contains, besides the object pointer also a previous and next pointer.; Objects are typically added using:. Add(); AddFirst(), AddLast(); AddBefore(), AddAfter(). Main features ofTList: very low cost of adding/removing elements anywhere in the list.; Overhead per element: 1 TObjLink, i.e. two 4 (or 8) byte pointers + pointer to vtable = 12 (or 24) bytes.; Next figure shows the internal data structure of a TList. The internal data structure of a TList. 16.6.1 Iterating Over a TList; There are four ways to iterate over a TList:. Using the ForEach script:. GetListOfPrimitives()->ForEach(TObject,Draw)();. Using the TList iterator TListIter (via the wrapper class TIter):. TIter next(GetListOfTracks());; while ((TTrack *obj = (TTrack *)next())); obj->Draw();. Using the TObjLink list entries (that wrap the TObject*):. TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw();; lnk = lnk->Next();; }. Using the TList’s After() and Before() member functions:. TFree *idcur = this;; while (idcur) {; ...; idcur = (TFree*)GetListOfFree()->After(idcur);; }; Method 1 uses internally method 2.; Method 2 works for all collection classes. TIter overloads operator().; Methods 3 and 4 are specific for TList.; Methods 2, 3 and 4 can also easily iterate backwards using either a backward TIter (using argument kIterBackward) or by using LastLink() and lnk>Prev() or by using the Before() method.; 16.7 The TObjArray Collection; A TObjArray is a collection which supports traditional array semantics via the overloading of operator[]. Objects can be directly accessed via an index. The array expands automatical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:851769,wrap,wrapper,851769,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['wrap'],['wrapper']
Integrability,"of::Collect ; (; TMonitor * ; mon, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from the slave servers. ; Returns the number of messages received. Can be 0 if there are no active slaves. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. Collect also stops its execution from time to time to check for new workers in Dynamic Startup mode. ; Definition at line 2756 of file TProof.cxx. ◆ CollectInputFrom(). Int_t TProof::CollectInputFrom ; (; TSocket * ; s, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect and analyze available input from socket s. ; Returns 0 on success, -1 if any failure occurs. ; Definition at line 3060 of file TProof.cxx. ◆ CreateDrawFeedback(). TDrawFeedback * TProof::CreateDrawFeedback ; (; ). Draw feedback creation proxy. ; When accessed via TProof avoids link dependency on libProofPlayer. ; Definition at line 10094 of file TProof.cxx. ◆ CreateMerger(). Bool_t TProof::CreateMerger ; (; TSlave * ; sl, . Int_t ; port . ). private . Create a new merger. ; Definition at line 4454 of file TProof.cxx. ◆ CreateSlave(). TSlave * TProof::CreateSlave ; (; const char * ; url, . const char * ; ord, . Int_t ; perf, . const char * ; image, . const char * ; workdir . ). protected . Create a new TSlave of type TSlave::kSlave. ; Note: creation of TSlave is private with TProof as a friend. Derived classes must use this function to create slaves. ; Definition at line 1853 of file TProof.cxx. ◆ CreateSubmaster(). TSlave * TProof::CreateSubmaster ; (; const char * ; url, . const char * ; ord, . const char * ; image, . const char * ; msd, . Int_t ; nwk = 1 . ). protected . Create a new TSlave of type TSlave::kMaster. ; Note: creation of TSlave is private with TProof as a friend. Derived classes must use this function to create slaves. ; Definition at line 18",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:79346,depend,dependency,79346,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['depend'],['dependency']
Integrability,"ofServ) returns default user. char * PromptPasswd(const char* prompt = ""Password: ""); Static method to prompt for the user's passwd to be used for; authentication to rootd or proofd. Uses non-echoing command line; to get passwd. Returns passwd (which must de deleted by caller) or 0.; If non-interactive run (eg ProofServ) returns -1. GlobusAuth_t GetGlobusAuthHook(); Static method returning the globus authorization hook. const char * GetRSAPubExport(Int_t key = 0); Static method returning the RSA public keys. Int_t GetRSAInit(); Static method returning the RSA initialization flag. void SetDefaultRSAKeyType(Int_t key); Static method setting the default type of RSA key. void SetRSAInit(Int_t init = 1); Static method setting RSA initialization flag. TList * GetAuthInfo(); Static method returning the list with authentication details. TList * GetProofAuthInfo(); Static method returning the list with authentication directives; to be sent to proof. void AuthError(const char* where, Int_t error); Print error string depending on error code. void SetGlobalUser(const char* user); Set global user name to be used for authentication to rootd or proofd. void SetGlobalPasswd(const char* passwd); Set global passwd to be used for authentication to rootd or proofd. void SetGlobalPwHash(Bool_t pwhash); Set global passwd hash flag to be used for authentication to rootd or proofd. void SetGlobalSRPPwd(Bool_t srppwd); Set global SRP passwd flag to be used for authentication to rootd or proofd. void SetReadHomeAuthrc(Bool_t readhomeauthrc); Set flag controlling the reading of $HOME/.rootauthrc.; In PROOF the administrator may want to switch off private settings.; Always true, may only be set false via option to proofd. void SetGlobalExpDate(TDatime expdate); Set default expiring date for new validity contexts. void SetDefaultUser(const char* defaultuser); Set default user name. void SetTimeOut(Int_t to); Set timeout (active if > 0). void SetAuthReUse(Bool_t authreuse); Set global AuthReUse ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:15213,depend,depending,15213,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['depend'],['depending']
Integrability,"og file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* , TList* , const char* = 0, Int_t = 0, TList* = 0); *** This function is deprecated and will disappear in future versions ***; *** It is just a wrapper around TFile::Cp.; *** Please use TProofMgr::UploadFiles. Upload a set of files and save the list of files by name dataSetName.; The 'files' argument is a list of TFileInfo objects describing the files; as first url.; The mask 'opt' is a combination of EUploadOpt:; kAppend (0x1) if set true files will be appended to; the dataset existing by given name; kOverwriteDataSet (0x2) if dataset with given name exited it; would be overwritten; kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; kOverwriteAllFiles (0x8) overwrite all files that may exist; kOverwriteNoFiles (0x10) overwrite none; kAskUser (0x0) ask user before overwriteng dataset/files; The default value is kAskUser.; The user will be asked to confirm overwriting dataset or files unless; specified opt provides the answer!; If kOverwriteNoFiles is set, then a pointer to TList must be passed as; skippedFiles argument. The function will",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:88178,wrap,wrapper,88178,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['wrap'],['wrapper']
Integrability,"og; TGeoTranslation translation class; TGeoTranslationEditor TGeoTranslation editor; TGeoTrap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class ; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field ; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class ; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[i],y[i],z[i] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:88938,interface,interface,88938,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,6,['interface'],['interface']
Integrability,"ogram ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used to sample. The distribution contained in the function fname (TF2) is integrated over the channel contents. It is normalized to 1. Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. One can also call TF2::GetRandom2 to get a random variate from a function. ; Reimplemented from TH1.; Definition at line 714 of file TH2.cxx. ◆ FillRandom() [2/2]. void TH2::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). overridevirtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH2) is integrated over the channel contents. It is normalized to 1. Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated . Reimplemented from TH1.; Definition at line 793 of file TH2.cxx. ◆ FitSlicesX(). void TH2::FitSlicesX ; (; TF1 * ; f1 = nullptr, . Int_t ; firstybin = 0, . Int_t ; lastybin = -1, . Int_t ; cut = 0, . Option_t * ; option = ""QNR"", . TObjArray * ; arr = nullptr . ). virtual . Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a histogram for each fit parameter Only bins along Y between firstybin and lastybin are considered. ; By default (firstybin == 0, lastybin == -1), all bins in y including over- and underflows are taken into account. If f1=0, a gaussian is assumed Before invoking this function, one can set a subrange to be fitted along X via f1->SetRange(xmin,x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:73828,integrat,integrated,73828,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['integrat'],['integrated']
Integrability,"ogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf315_projectpdfDefinition rf315_projectpdf.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigmax' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_Int[y]_Norm[x,y]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_Int[y]_Norm[x,y]_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a1: using 0.4; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for y: using 0.4; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); ; prevFCN = 12037.78496 a1=-1.469, ; prevFCN = 1900.132597 a1=-1.531, ; prevFCN = 1901.591671 a1=-1.497, ; prevFCN = 1900.088181 a1=-1.503, ; prevFCN = 1900.238998 a1=-1.5, y=0.03051, ; prevFCN = 1900.156536 y=-0.03051, ; prevFCN = 1900.156536 y=0.003051, ; prevFCN = 1900.156536 y=-0.003051, ; prevFCN = 1900.156536 a1=-1.497, y=0, ; prevFCN = 19",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf315__projectpdf_8C.html:7000,integrat,integrator,7000,doc/master/rf315__projectpdf_8C.html,https://root.cern,https://root.cern/doc/master/rf315__projectpdf_8C.html,2,"['integrat', 'synchroniz']","['integrator', 'synchronize']"
Integrability,ograms (one char per channel); TH2D 2-Dim histograms (one double per channel); TH2Editor TH2 editor; TH2F 2-Dim histograms (one float per channel); TH2GL GL renderer for TH2.; TH2I 2-Dim histograms (one 32 bits integer per channel); TH2Poly 2-Dim histogram with polygon bins; TH2PolyBin 2-Dim polygon bins; TH2S 2-Dim histograms (one short per channel); TH3 3-Dim histogram base class; TH3C 3-Dim histograms (one char per channel); TH3D 3-Dim histograms (one double per channel); TH3F 3-Dim histograms (one float per channel); TH3GL GL renderer class for TH3.; TH3I 3-Dim histograms (one 32 bits integer per channel); TH3S 3-Dim histograms (one short per channel); THLimitsFinder Class to find best axis limits; THStack A collection of histograms; THYPE HYPE shape; THaarMatrixT<double> ; THaarMatrixT<float> ; THashList Doubly linked list with hashtable for lookup; THashTable A hash table; THashTableIter Hash table iterator; THbookBranch A branch for a THbookTree; THbookFile ROOT interface to Hbook/PAW files; THbookKey Hbook id descriptor; THbookTree A wrapper class supporting Hbook ntuples (CWN and RWN); THelix A Helix drawn as a PolyLine3D; THilbertMatrixT<double> ; THilbertMatrixT<float> ; THilbertMatrixTSym<double> ; THilbertMatrixTSym<float> ; THistPainter Helper class to draw histograms; THn Base class for multi-dimensional histogram; THnBase Common base for n-dimensional histogram; THnIter Iterator over bins of a THnBase.; THnSparse Interfaces of sparse n-dimensional histogram; THnSparseArrayChunk chunks of linearized bins; THnSparseT<TArrayC> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayD> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayF> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayS> Sparse n-dimensional histogram with templated content; THnT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:94610,interface,interface,94610,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"oid AddDynamicPath(const char *lib) override;; 183 const char *GetDynamicPath() override;; 184 void SetDynamicPath(const char *lib) override;; 185 const char *FindDynamicLibrary(TString &lib, Bool_t quiet = kFALSE) override;; 186 Func_t DynFindSymbol(const char *module, const char *entry) override;; 187 int Load(const char *module, const char *entry = """", Bool_t system = kFALSE) override;; 188 void Unload(const char *module) override;; 189 void ListSymbols(const char *module, const char *re = """") override;; 190 void ListLibraries(const char *regexp = """") override;; 191 ; 192 //---- RPC --------------------------------------------------; 193 TInetAddress GetHostByName(const char *server) override;; 194 TInetAddress GetPeerName(int sock) override;; 195 TInetAddress GetSockName(int sock) override;; 196 int GetServiceByName(const char *service) override;; 197 char *GetServiceByPort(int port) override;; 198 int ConnectService(const char *server, int port, int tcpwindowsize, const char *protocol = ""tcp"");; 199 int OpenConnection(const char *server, int port, int tcpwindowsize = -1, const char *protocol = ""tcp"") override;; 200 int AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1) override;; 201 int AnnounceUdpService(int port, int backlog) override;; 202 int AnnounceUnixService(int port, int backlog) override;; 203 int AnnounceUnixService(const char *sockpath, int backlog) override;; 204 int AcceptConnection(int sock) override;; 205 void CloseConnection(int sock, Bool_t force = kFALSE) override;; 206 int RecvRaw(int sock, void *buffer, int length, int flag) override;; 207 int SendRaw(int sock, const void *buffer, int length, int flag) override;; 208 int RecvBuf(int sock, void *buffer, int length) override;; 209 int SendBuf(int sock, const void *buffer, int length) override;; 210 int SetSockOpt(int sock, int option, int val) override;; 211 int GetSockOpt(int sock, int option, int *val) override;; 212 ; 213 //---- System, CPU and Memory info; 214",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8h_source.html:9351,protocol,protocol,9351,doc/master/TUnixSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8h_source.html,1,['protocol'],['protocol']
Integrability,"oid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TList::AddFirstvoid AddFirst(TObject *obj) overrideAdd object at the beginning of the list.Definition TList.cxx:98; TMarkerManages Markers.Definition TMarker.h:22; TMarker::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TMarker.cxx:368; TMarker::Paintvoid Paint(Option_t *option="""") overridePaint this marker with its current attributes.Definition TMarker.cxx:308; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Classstatic TClass * Class(); TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TPaveA TBox with a bordersize and a shadow option.Definition TPave.h:19; TPave::Printvoid Print(Option_t *option="""") const overrideDump this pave with its attributes.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8cxx_source.html:53413,message,message,53413,doc/master/TLegend_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8cxx_source.html,1,['message'],['message']
Integrability,"oid SplitOptions(const TString& theOpt, TList& loo) const; splits the option string at ':' and fills the list 'loo' with the primitive strings. void ResetSetFlag(); resets the IsSet falg for all declare options; to be called before options are read from stream. void ParseOptions(); options parser. void CheckForUnusedOptions() const; checks for unused options in option string. void PrintOptions() const; prints out the options set in the options string and the defaults. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to output stream (e.g. in writing the MVA weight files. void AddOptionsXMLTo(void* parent) const; write options to XML file. void ReadOptionsFromXML(void* node). void WriteOptionsReferenceToFile(); write complete options to output stream. void ReadOptionsFromStream(istream& istr); read option back from the weight file. const char* GetName() const; { return GetConfigName(); }. const char* GetConfigName() const; { return fConfigName; }. const char* GetConfigDescription() const; { return fConfigDescription; }. void SetConfigName(const char* n); { fConfigName = TString(n); }. void SetConfigDescription(const char* d); { fConfigDescription = TString(d); }. const TString& GetOptions() const; { return fOptions; }. void SetOptions(const TString& s); { fOptions = s; }. Bool_t LooseOptionCheckingEnabled() const; { return fLooseOptionCheckingEnabled; }. void EnableLooseOptions(Bool_t b = kTRUE); { fLooseOptionCheckingEnabled = b; }. const TString& GetReferenceFile() const; { return fReferenceFile; }. void SetMsgType(TMVA::EMsgType t); set message type. { fLogger->SetMinType(t); }. Log(). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Configurable.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Configurable.html:8136,message,message,8136,root/html532/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html532/TMVA__Configurable.html,1,['message'],['message']
Integrability,"oid TDirectory::rmdir ; (; const char * ; name). virtual . Removes subdirectory from the directory When directory is deleted, all keys in all subdirectories will be read first and deleted from file (if exists) Equivalent call is Delete(""name;*"");. ; Reimplemented in TDirectoryFile.; Definition at line 1227 of file TDirectory.cxx. ◆ Save(). virtual void TDirectory::Save ; (; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 253 of file TDirectory.h. ◆ SaveObjectAs(). Int_t TDirectory::SaveObjectAs ; (; const TObject * ; obj, . const char * ; filename = """", . Option_t * ; option = """" . ); const. virtual . Save object in filename, if filename is nullptr or """", a file with ""<objectname>.root"" is created. ; The name of the key is the object name. By default new file will be created. Using option ""a"", one can append object to the existing ROOT file. If the operation is successful, it returns the number of bytes written to the file otherwise it returns 0. By default a message is printed. Use option ""q"" to not print the message. If filename contains "".json"" extension, JSON representation of the object will be created and saved in the text file. Such file can be used in JavaScript ROOT (https://root.cern/js/) to display object in web browser When creating JSON file, option string may contain compression level from 0 to 3 (default 0) ; Reimplemented in TDirectoryFile.; Definition at line 1250 of file TDirectory.cxx. ◆ SaveSelf(). virtual void TDirectory::SaveSelf ; (; Bool_t ; = kFALSE). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 255 of file TDirectory.h. ◆ SetBufferSize(). virtual void TDirectory::SetBufferSize ; (; Int_t ; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 256 of file TDirectory.h. ◆ SetModified(). virtual void TDirectory::SetModified ; (; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 257 of file TDirectory.h. ◆ SetMother(). virtual void TDirectory::SetMother ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:47684,message,message,47684,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,['message'],['message']
Integrability,"oid TGWin32VirtualXProxy::DrawPolyLine ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws a line through all points in the list. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX. ◆ DrawPolyMarker(). void TGWin32VirtualXProxy::DrawPolyMarker ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws ""n"" markers with the current attributes at position [x,y]. ; Parameters. [in]nnumber of markers to draw ; [in]xyan array of x,y marker coordinates . Reimplemented from TVirtualX. ◆ DrawRectangle(). void TGWin32VirtualXProxy::DrawRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawSegments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:71434,depend,dependent,71434,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['depend'],['dependent']
Integrability,"oid TGeoMixture::DefineElement(Int_t iel, TGeoElement *elem,; Double_t weight);; void TGeoMixture::DefineElement(Int_t iel, Int_t z, Int_t natoms);; or:; void AddElement(TGeoMaterial* mat, Double_t weight);; void AddElement(TGeoElement* elem, Double_t weight);; void AddElement(TGeoElement* elem, Int_t natoms);; void AddElement(Double_t a, Double_t z, Double_t weight). iel: index of the element[0,nel-1]; a and z: the atomic mass and charge; weight: proportion by mass of the elements; natoms: number of atoms of the element in the molecule making the mixture. The radiation length is automatically computed when all elements are defined. Since tracking MC provide several other ways to create materials/mixtures, the materials classes are likely to evolve as the interfaces to these engines are being developed. Generally in the process of tracking material properties are not enough and more specific media properties have to be defined. These highly depend on the MC performing tracking and sometimes allow the definition of different media properties (e.g. energy or range cuts) for the same material.; 18.2.2 Radionuclides; A new class TGeoElementRN was introduced in this version to provide support for radioactive nuclides and their decays. A database of 3162 radionuclides can be loaded on demand via the table of elements (TGeoElementTable class). One can make then materials/mixtures based on these radionuclides and use them in a geometry; root[] TGeoManager *geom = new TGeoManager(""geom"",""radionuclides"");; root[] TGeoElementTable *table = geom->GetElementTable();; root[] TGeoElementRN *c14 = table->GetElementRN(14,6); // A,Z; root[] c14->Print();; 6-C-014 ENDF=60140; A=14; Z=6; Iso=0; Level=0[MeV]; Dmass=3.0199[MeV];; Hlife=1.81e+11[s] J/P=0+; Abund=0; Htox=5.8e-10; Itox=5.8e-10; Stat=0; Decay modes:; BetaMinus Diso: 0 BR: 100.000% Qval: 0.1565; One can make materials or mixtures from radionuclides:; root[] TGeoMaterial *mat = new TGeoMaterial(""C14"", c14, 2.0);; The following ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:891099,depend,depend,891099,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['depend'],['depend']
Integrability,"oid TProof::SetPlayer ; (; TVirtualProofPlayer * ; player). protected . Set a new PROOF player. ; Definition at line 10199 of file TProof.cxx. ◆ SetPrintProgress(). void TProof::SetPrintProgress ; (; PrintProgress_t ; pp). inline . Definition at line 1046 of file TProof.h. ◆ SetProgressDialog(). void TProof::SetProgressDialog ; (; Bool_t ; on = kTRUE). Enable/Disable the graphic progress dialog. ; By default the dialog is enabled ; Definition at line 12509 of file TProof.cxx. ◆ SetQueryMode(). void TProof::SetQueryMode ; (; EQueryMode ; mode). Change query running mode to the one specified by 'mode'. ; Definition at line 6107 of file TProof.cxx. ◆ SetRealTimeLog(). void TProof::SetRealTimeLog ; (; Bool_t ; on = kTRUE). Switch ON/OFF the real-time logging facility. ; When this option is ON, log messages from processing are sent back as they come, instead of being sent back at the end in one go. This may help debugging or monitoring in some cases, but, depending on the amount of log, it may have significant consequencies on the load over the network, so it must be used with care. ; Definition at line 7096 of file TProof.cxx. ◆ SetRunStatus(). void TProof::SetRunStatus ; (; ERunStatus ; rst). inlineprivate . Definition at line 672 of file TProof.h. ◆ SetupWorkersEnv(). void TProof::SetupWorkersEnv ; (; TList * ; wrks, . Bool_t ; increasingpool = kFALSE . ). protected . Set up packages, loaded macros, include and lib paths ... ; Definition at line 1528 of file TProof.cxx. ◆ ShowCache(). void TProof::ShowCache ; (; Bool_t ; all = kFALSE). virtual . List contents of file cache. ; If all is true show all caches also on slaves. If everything is ok all caches are to be the same. ; Reimplemented in TProofLite.; Definition at line 7691 of file TProof.cxx. ◆ ShowData(). void TProof::ShowData ; (; ). virtual . List contents of the data directory in the sandbox. ; This is the place where files produced by the client queries are kept ; Reimplemented in TProofLite.; Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:147298,depend,depending,147298,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['depend'],['depending']
Integrability,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8h_source.html:33780,message,message,33780,doc/master/RooAbsPdf_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html,1,['message'],['message']
Integrability,"oid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAbsPdf::getLogValvirtual double getLogVal(const RooArgSet *set=nullptr) constReturn the log of the current value with given normalization An error message is printed if the argum...Definition RooAbsPdf.cxx:620; RooAbsRealLValue::hasRangebool hasRange(const char *name) const overrideCheck if variable has a binning with given name.Definition RooAbsRealLValue.h:97; RooAbsRealLValue::getRangestd::pair< double, double > getRange(const char *name=nullptr) constGet low and high bound of the variable.Definition RooAbsRealLValue.h:88; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::fillDataHistRooDataHist * fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constFill a RooDataHist with values sampled from this function at the bin centers.Definition RooAbsReal.cxx:1124; RooAbsReal::plotOnCompSelectvoid plotOnCompSelect(RooArgSet *selNodes) constHelper function for plotting of composite p.d.fs.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:155135,message,message,155135,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['message'],['message']
Integrability,"oid weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Double_t weight(Int_t index) const. Bool_t isWeighted() const. Bool_t changeObservableName(const char* from, const char* to); Change observable name. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add one or more columns. RooArgSet* addColumns(const RooArgList& varList). RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge column-wise. void append(RooAbsDataStore& other); Add rows. Int_t numEntries() const. Double_t sumEntries() const; { return 0 ; }. void reset(). void attachBuffers(const RooArgSet& extObs); Buffer redirection routines used in inside RooAbsOptTestStatistics. void resetBuffers(). void setExternalWeightArray(Double_t* , Double_t* , Double_t* , Double_t* ); {}. void Print(Option_t* options = 0) const; Printing interface (human readable). void cacheArgs(const RooAbsArg* cacheOwner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Constant term optimizer interface. const RooAbsArg* cacheOwner(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars). void setArgStatus(const RooArgSet& set, Bool_t active). const RooArgSet& cachedVars() const; { return _cachedVars ; }. void resetCache(). void recalculateCache(const RooArgSet* , Int_t , Int_t , Int_t , Bool_t ); {}. void setDirtyProp(Bool_t flag); { _doDirtyProp = flag ; }. Bool_t dirtyProp() const; { return _doDirtyProp ; }. void checkInit() const; {}. Bool_t hasFilledCache() const; { return kFALSE ; }. const TTree* tree() const; { return 0 ; }. void dump(); {}. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). void forceCacheUpdate(); {}. » Last changed: Tue Jun 2 15:27:04 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the docume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsDataStore.html:12962,interface,interface,12962,root/html604/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html604/RooAbsDataStore.html,1,['interface'],['interface']
Integrability,"oid weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Double_t weight(Int_t index) const. Bool_t isWeighted() const. Bool_t changeObservableName(const char* from, const char* to); Change observable name. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add one or more columns. RooArgSet* addColumns(const RooArgList& varList). RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge column-wise. void append(RooAbsDataStore& other); Add rows. Int_t numEntries() const. Double_t sumEntries() const; { return 0 ; }. void reset(). void attachBuffers(const RooArgSet& extObs); Buffer redirection routines used in inside RooAbsOptTestStatistics. void resetBuffers(). void setExternalWeightArray(Double_t* , Double_t* , Double_t* , Double_t* ); {}. void Print(Option_t* options = 0) const; Printing interface (human readable). void cacheArgs(const RooAbsArg* cacheOwner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Constant term optimizer interface. const RooAbsArg* cacheOwner(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars). void setArgStatus(const RooArgSet& set, Bool_t active). const RooArgSet& cachedVars() const; { return _cachedVars ; }. void resetCache(). void recalculateCache(const RooArgSet* , Int_t , Int_t , Int_t , Bool_t ); {}. void setDirtyProp(Bool_t flag); { _doDirtyProp = flag ; }. Bool_t dirtyProp() const; { return _doDirtyProp ; }. void checkInit() const; {}. Bool_t hasFilledCache() const; { return kFALSE ; }. const TTree* tree() const; { return 0 ; }. void dump(); {}. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). void forceCacheUpdate(); {}. » Last changed: Tue Jun 30 14:30:06 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the docum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsDataStore.html:12962,interface,interface,12962,root/html602/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html602/RooAbsDataStore.html,1,['interface'],['interface']
Integrability,"oid weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Double_t weight(Int_t index) const. Bool_t isWeighted() const. Bool_t changeObservableName(const char* from, const char* to); Change observable name. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add one or more columns. RooArgSet* addColumns(const RooArgList& varList). RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge column-wise. void append(RooAbsDataStore& other); Add rows. Int_t numEntries() const. Double_t sumEntries() const; { return 0 ; }. void reset(). void attachBuffers(const RooArgSet& extObs); Buffer redirection routines used in inside RooAbsOptTestStatistics. void resetBuffers(). void setExternalWeightArray(Double_t* , Double_t* , Double_t* , Double_t* ); {}. void Print(Option_t* options = 0) const; Printing interface (human readable). void cacheArgs(const RooAbsArg* cacheOwner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Constant term optimizer interface. const RooAbsArg* cacheOwner(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars). void setArgStatus(const RooArgSet& set, Bool_t active). const RooArgSet& cachedVars() const; { return _cachedVars ; }. void resetCache(). void recalculateCache(const RooArgSet* , Int_t , Int_t , Int_t , Bool_t ); {}. void setDirtyProp(Bool_t flag); { _doDirtyProp = flag ; }. Bool_t dirtyProp() const; { return _doDirtyProp ; }. void checkInit() const; {}. Bool_t hasFilledCache() const; { return kFALSE ; }. const TTree* tree() const; { return 0 ; }. void dump(); {}. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). void forceCacheUpdate(); {}. » Last changed: Tue Mar 10 17:13:58 2015 » Last generated: 2015-03-10 17:13; This page has been automatically generated. For comments or suggestions regarding the docum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsDataStore.html:11388,interface,interface,11388,root/html534/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html534/RooAbsDataStore.html,1,['interface'],['interface']
Integrability,"oid* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClass.html:45521,wrap,wrapper,45521,root/html532/TClass.html,https://root.cern,https://root.cern/root/html532/TClass.html,2,['wrap'],['wrapper']
Integrability,"oidSetHypeDimensions(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); voidTGeoTube::SetTubeDimensions(Double_t rmin, Double_t rmax, Double_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoHype(); TGeoHype(Double_t* params); TGeoHype(const TGeoHype&); TGeoHype(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); TGeoHype(const char* name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tZHypeSq(Double_t r, Bool_t inner) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHype.html:12374,rout,rout,12374,root/html602/TGeoHype.html,https://root.cern,https://root.cern/root/html602/TGeoHype.html,4,['rout'],['rout']
Integrability,"oidStopParser(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInitializeContext(); voidTObject::MakeZombie(); virtual voidOnValidateError(const TString& message); virtual voidOnValidateWarning(const TString& message); virtual voidReleaseUnderlying(); virtual voidSetParseCode(Int_t code). private:. TXMLParser&operator=(const TXMLParser&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:9062,message,message,9062,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,2,['message'],['message']
Integrability,"oidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumGenConfig& defaultConfig(); Return refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenConfig.html:7445,integrat,integration,7445,root/html526/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html526/RooNumGenConfig.html,5,['integrat'],['integration']
Integrability,"oid Close ();  Close the viewer - destructed. ;  ; void CreateGLWidget () override;  Create a GLwidget, it is an error if it is already created. ;  ; void DeleteMenuBar ();  Delete the menu bar. ;  ; void DestroyGLWidget () override;  Destroy the GLwidget, it is an error if it does not exist. ;  ; void DisableCloseMenuEntries ();  Deactivate menu entries for closing the GL window and exiting ROOT. ;  ; void DisableMenuBarHiding ();  Disable hiding of menu bar. ;  ; void EnableMenuBarHiding ();  Enable hiding of menu bar. ;  ; TGLFormat * GetFormat () const;  ; TGCompositeFrame * GetFrame () const;  Return the main-frame. ;  ; TGCompositeFrame * GetLeftVerticalFrame () const;  ; const char * GetName () const override;  Returns name of object. ;  ; void HandleMenuBarHiding (Event_t *ev);  Maybe switch menu-bar / menu-button. ;  ; TClass * IsA () const override;  ; void MenuHidingTimeout ();  Action for menu-hiding timeout. ;  ; Bool_t ProcessFrameMessage (Long_t msg, Long_t parm1, Long_t);  Process GUI message capture by the main GUI frame (TGLSAFrame). ;  ; void SelectionChanged () override;  Update GUI components for embedded viewer selection change. ;  ; void Show ();  Show the viewer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleEditObject ();  Toggle state of the 'Edit Object' menu entry. ;  ; void ToggleOrthoDolly ();  Toggle state of the 'Ortho allow dolly' menu entry. ;  ; void ToggleOrthoRotate ();  Toggle state of the 'Ortho allow rotate' menu entry. ;  ;  Public Member Functions inherited from TGLViewer;  TGLViewer (TVirtualPad *pad);  ;  TGLViewer (TVirtualPad *pad, Int_t x, Int_t y, Int_t width, Int_t height);  ;  ~TGLViewer () override;  Destroy viewer object. ;  ; virtual void Activated ();  ; void AddCompositeOp (UInt_t) override;  ; Int_t AddObject (const TBuffer3D &, Bool_t *=nullptr) override;  ; Int_t AddObject (UInt_t, const TBuffer3D &,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:3635,message,message,3635,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['message'],['message']
Integrability,"oid DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButtonGroup.html:13886,message,message,13886,doc/master/classTGButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html,11,['message'],['message']
Integrability,"oid DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;  ; Bool_t IsEditab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBox.html:10800,message,message,10800,doc/master/classTGComboBox.html,https://root.cern,https://root.cern/doc/master/classTGComboBox.html,2,['message'],['message']
Integrability,"oid DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;  ; Bool_t IsEditable () const override;  ; void MapRa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFSComboBox.html:10591,message,message,10591,doc/master/classTGFSComboBox.html,https://root.cern,https://root.cern/doc/master/classTGFSComboBox.html,3,['message'],['message']
Integrability,"oid DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDFinished ();  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;  ; Bool_t IsEditable () const override;  ; void MapRaised () override;  map raised ;  ; void MapSubwindows () override;  map sub windows ;  ; void MapWindow () override;  map window ;  ; void Move (Int_t x, Int_t y) override;  Move frame. ;  ; void MoveResize (Int_t x, Int_t y, UInt_t w=0, UInt_t h=0) over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:18789,message,message,18789,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,3,['message'],['message']
Integrability,"oid DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;  ; Bool_t IsEditable () const override;  ; void MapRaised () override;  map raised ;  ; void MapSubwindows () o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGViewPort.html:7486,message,message,7486,doc/master/classTGViewPort.html,https://root.cern,https://root.cern/doc/master/classTGViewPort.html,1,['message'],['message']
Integrability,"oid DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _coefList;  ; TArrayD _limits;  ; Int_t _nBins = 0;  ; RooRealProxy _x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:72168,integrat,integration,72168,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['integrat'],['integration']
Integrability,"oid HandleArchive (TMessage *mess, TString *slb=0);  Handle archive request. ;  ; virtual Int_t HandleCache (TMessage *mess, TString *slb=0);  Handle here all cache and package requests. ;  ; virtual void HandleCheckFile (TMessage *mess, TString *slb=0);  Handle file checking request. ;  ; virtual Int_t HandleDataSets (TMessage *mess, TString *slb=0);  Handle here requests about datasets. ;  ; virtual void HandleFork (TMessage *mess);  Cloning itself via fork. Not implemented. ;  ; virtual Int_t HandleLibIncPath (TMessage *mess);  Handle lib, inc search paths modification request. ;  ; virtual void HandleProcess (TMessage *mess, TString *slb=0);  Handle processing request. ;  ; virtual void HandleQueryList (TMessage *mess);  Handle request for list of queries. ;  ; virtual void HandleRemove (TMessage *mess, TString *slb=0);  Handle remove request. ;  ; virtual void HandleRetrieve (TMessage *mess, TString *slb=0);  Handle retrieve request. ;  ; virtual void HandleSubmerger (TMessage *mess);  Handle a message of type kPROOF_SUBMERGER. ;  ; virtual Int_t HandleWorkerLists (TMessage *mess);  Handle here all requests to modify worker lists. ;  ; Bool_t IsIdle ();  Return the idle status. ;  ; virtual void MakePlayer ();  Make player instance. ;  ; virtual void ProcessNext (TString *slb=0);  process the next query from the queue of submitted jobs. ;  ; virtual Int_t Setup ();  Print the ProofServ logo on standard output. ;  ; Int_t SetupCommon ();  Common part (between TProofServ and TXProofServ) of the setup phase. ;  ; Bool_t UnlinkDataDir (const char *path);  Scan recursively the datadir and unlink it if empty Return kTRUE if it can be unlinked, kFALSE otherwise. ;  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:24151,message,message,24151,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['message'],['message']
Integrability,"oid SetWMTransientHint (Window_t winID, Window_t mainWinID) override;  Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ;  ; void ShapeCombineMask (Window_t wid, Int_t x, Int_t y, Pixmap_t mask) override;  The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtracts regb from rega and stores the results in result. ;  ; Int_t SupportsExtension (const char *extensionName) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of the string ""s"" in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  Translates coordinates in one window to the coordinate space of another window. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Updates the destination region from a union of the specified rectangle and the specified source region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t wid) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t wid) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t wid) override;  Tells WM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGQuartz.html:30131,depend,depends,30131,doc/master/classTGQuartz.html,https://root.cern,https://root.cern/doc/master/classTGQuartz.html,1,['depend'],['depends']
Integrability,"oid SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArchiveFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArchiveFile * Open (const char *url, TFile *file);  Return proper archive file handler depending on passed url. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  EZIPConstants { ;   kARCHIVE_VERSION = 45; , kDIR_HEADER_MAGIC = 0x02014b50; , kENTRY_HEADER_MAGIC = 0x04034b50; , kEND_HEADER_MAGIC = 0x06054b50; , ;   kZIP64_EDR_HEADER_MAGIC = 0x06064b50; ,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:11993,depend,depending,11993,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['depend'],['depending']
Integrability,"oid registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy _denominator;  ; RooRealProxy _numerator;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; Ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRatio.html:54998,integrat,integration,54998,doc/master/classRooRatio.html,https://root.cern,https://root.cern/doc/master/classRooRatio.html,1,['integrat'],['integration']
Integrability,"oid setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::map< Int_t, std::pair< const RooArgSet *, const RooArgSet * > > _anaIntMap;  ! Map for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; Int_t _ipOrder;  Interpolation order for cache histograms. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedReal.html:56989,integrat,integration,56989,doc/master/classRooAbsCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedReal.html,1,['integrat'],['integration']
Integrability,"oigtianRooVoigtian is an efficient implementation of the convolution of a Breit-Wigner with a Gaussian, making use of the complex error function ;  ►CRooWorkspaceThe RooWorkspace is a persistable container for RooFit projects ;  ►CCodeRepo;  CClassFiles;  CClassRelInfo;  CExtraHeader;  CWSDir;  CRooXYChi2Var;  Crsa_KEY;  Crsa_KEY_export;  Crsa_NUMBER;  CSegment_t;  CSetWindowAttributes_t;  CSHtmlExtensions_t;  CSHtmlIndex_t;  CSHtmlMargin_t;  CSHtmlStyle_t;  CSHtmlStyleStack_t;  CSHtmlTokenMap_t;  CshutterData_t;  CSQLite3_Stmt_t;  CSysInfo_t;  CtableDescriptor_st;  CTAdvancedGraphicsDialog;  CTAFS;  CTAlien;  CTAlienCollection;  CTAlienDirectory;  CTAlienDirectoryEntry;  CTAlienFile;  CTAliEnFind;  CTAlienJDL;  CTAlienJob;  CTAlienJobStatus;  CTAlienJobStatusList;  CTAlienMasterJob;  CTAlienMasterJobStatus;  CTAlienPackage;  CTAlienResult;  CTAlienSystem;  CTAnyPtrModels a shared pointer or a unique pointer ;  CTApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers ;  CTApplicationImpABC describing GUI independent application implementation protocol ;  ►CTApplicationRemote;  CTARFileStat;  CTApplicationServer;  CTArcCreate an Arc ;  CTArcBallImplements the arc-ball rotation manipulator ;  CTArchiveFileClass describing an archive file containing multiple sub-files, like a ZIP or TAR archive ;  CTArchiveMember;  CTARInterruptHandler;  CTArrayAbstract array base class ;  CTArrayCArray of chars or bytes (8 bits per element) ;  CTArrayDArray of doubles (64 bits per element) ;  CTArrayFArray of floats (32 bits per element) ;  CTArrayIArray of integers (32 bits per element) ;  CTArrayLArray of longs (32 or 64 bits per element) ;  CTArrayL64Array of long64s (64 bits per element) ;  CTArraySArray of shorts (16 bits per element) ;  CTArrowDraw all kinds of Arrows ;  CTArrowEditor;  CTASImageImage class ;  CTASImagePlugin;  CTASLogHandler;  CTASLogHandlerGuard;  ►CTASPaletteEditorThis is a GUI window ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:118942,interface,interfaces,118942,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['interface'],['interfaces']
Integrability,"oint and finding the state in one step:; gGeoManager->FindNode(Double_t x,Double_t y,Double_t z);; gGeoManager->FindNode(Double_t *point[3]);; // Setting both initial point and direction and finding the state:; gGeoManager->InitTrack(Double_t x,Double_t y,Double_t z,; Double_t nx, Double_t ny, Double_t nz);; gGeoManager->InitTrack(Double_t *point[3],Double_t *dir[3]);; TGeoManager::InitTrackTGeoNode * InitTrack(const Double_t *point, const Double_t *dir)Initialize current point and current direction vector (normalized) in MARS.Definition TGeoManager.cxx:2856; Note that the current point coordinates can be changed and the state re-initialized at any time. This represents the ‘‘Where am I?’` geometrical query representing the basic navigation functionality provided by the modeller. Checking the Current State; The current state and all variables related to this are essential during tracking and have to be checked several times. Besides the current point and direction, the following additional information can be retrieved from TGeoManager interface:. The current path. This represents a string containing the names and copy numbers of all positioned objects in the current branch written in the /folder/folder/.../folder/file fashion. The final node pointed by the path is the deepest object containing the current point and is representative for the current state. All intermediate folders in the path are in fact also nodes ""touched"" by the current point, but having some ""touched"" containment. The current path can be retrieved only after the state was initialized and is useful for getting an idea of the current point location. const char *path = gGeoManager->GetPath();; cout << ""Current path is: "" << path << endl;; /A_1/B_34/C_3/D_1; TGeoManager::GetPathconst char * GetPath() constGet path to the current node in the form /node0/node1/...Definition TGeoManager.cxx:2881. The current node, volume and material. In order to take decisions on post-step or further stepping actions, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:73048,interface,interface,73048,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['interface'],['interface']
Integrability,"oint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooBinSamplingPdfThe RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned dist...Definition RooBinSamplingPdf.h:28; RooBinSamplingPdf::integratorstd::unique_ptr< ROOT::Math::IntegratorOneDim > & integrator() constDirect access to the unique_ptr holding the integrator that's used to sample the bins.Definition RooBinSamplingPdf.cxx:278; RooBinSamplingPdf::observableconst RooAbsReal & observable() constDefinition RooBinSamplingPdf.h:111; When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits or plotting etc. NoteThe binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit. Use RooRealVar::setBinning() to adapt it. Instruct test statistics to carry out this wrapping automatically: pdf.fitTo(data, IntegrateBins(<precision>));; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooBinSamplingPdf::pdfconst RooAbsPdf & pdf() constDefinition RooBinSamplingPdf.h:110; This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped, depending on the value of precision:; precision < 0.: None of the PDFs are touched, bin sampling is off.; precision = 0.: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision forwarded to the integrator is 1.E-4 (the default argument of the constructor).; precision > 0.: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are fit to (see next paragraph). The same ‘'precision’` is used for all integrators. Simulating a binned fit using RooDataSet; Some fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:2542,wrap,wrapping,2542,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['wrap'],['wrapping']
Integrability,"oint values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; vector<Double_t>_realRefReference values for reals; RooListProxy_realSetList of reals to track ; TIterator*_realSetIter! do not persist; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChangeTracker.html:32436,integrat,integrator,32436,root/html526/RooChangeTracker.html,https://root.cern,https://root.cern/root/html526/RooChangeTracker.html,2,['integrat'],['integrator']
Integrability,"ointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:23068,message,messages,23068,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,3,['message'],['messages']
Integrability,"ointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during qurey processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:22111,message,messages,22111,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,3,['message'],['messages']
Integrability,"ointer is returned if not found. RooArgSet allVars() const; Return set with all variable objects. RooArgSet allCats() const; Return set with all category objects. RooArgSet allFunctions() const; Return set with all function objects. RooArgSet allCatFunctions() const; Return set with all category function objects. RooArgSet allResolutionModels() const; Return set with all resolution model objects. RooArgSet allPdfs() const; Return set with all probability density function objects. list<RooAbsData*> allData() const; Return list of all dataset in the workspace. list<RooAbsData*> allEmbeddedData() const; Return list of all dataset in the workspace. list<TObject*> allGenericObjects() const; Return list of all generic objects in the workspace. Bool_t makeDir(); Create transient TDirectory representation of this workspace. This directory; will appear as a subdirectory of the directory that contains the workspace; and will have the name of the workspace suffixed with ""Dir"". The TDirectory; interface is read-only. Any attempt to insert objects into the workspace; directory representation will result in an error message. Note that some; ROOT object like TH1 automatically insert themselves into the current directory; when constructed. This will give error messages when done in a workspace; directory. Bool_t import(TObject& object, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container. Imported; object can be retrieved by name through the obj() method. The object is cloned upon; importation and the input argument does not need to live beyond the import call. Returns kTRUE if an error has occurred. Bool_t import(TObject& object, const char* aliasName, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container.; The imported object will be stored under the given alias name rather than its; own name. Imported object can be retrieved its alias name through the obj() method.; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:22713,interface,interface,22713,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,3,['interface'],['interface']
Integrability,ointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooRealProxy_f0; RooRealProxy_f1; RooRealProxy_f2; RooRealProxy_f3; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBDecay.html:39147,integrat,integrated,39147,root/html526/RooBDecay.html,https://root.cern,https://root.cern/root/html526/RooBDecay.html,1,['integrat'],['integrated']
Integrability,ointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooRealProxy_f0; RooRealProxy_f1; RooRealProxy_f2; RooRealProxy_f3; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:39529,integrat,integrated,39529,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,1,['integrat'],['integrated']
Integrability,ointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooRealProxy_f0; RooRealProxy_f1; RooRealProxy_f2; RooRealProxy_f3; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBDecay.html:39998,integrat,integrated,39998,root/html530/RooBDecay.html,https://root.cern,https://root.cern/root/html530/RooBDecay.html,1,['integrat'],['integrated']
Integrability,ointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooRealProxy_f0; RooRealProxy_f1; RooRealProxy_f2; RooRealProxy_f3; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsR,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:40401,integrat,integrated,40401,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['integrat'],['integrated']
Integrability,"ointer to the elements of the full covariance matrix; dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; including also the fixed parameters. When there are fixed parameters, the pointer returned from; TVirtualFitter::GetCovarianceMatrix() cannot be used.; One should use the TFitResult class, as shown in the example below. To get the matrix and values from an old fit do for example:; TFitResultPtr r = histo->Fit(func, ""S"");; ..... after performing other fits on the same function do; func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );. Double_t IntegralFast(const TGraph *g, Double_t a, Double_t b, Double_t *params); Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. Double_t IntegralMultiple(Int_t n, const Double_t* a, const Double_t* b, Double_t epsrel, Double_t& relerr); See more general prototype below.; This interface kept for back compatibility; It is reccomended to use the other interface where one can specify also epsabs and the maximum number of; points. Double_t IntegralMultiple(Int_t n, const Double_t* a, const Double_t* b, Int_t maxpts, Double_t epsrel, Double_t epsabs, Double_t& relerr, Int_t& nfnevl, Int_t& ifail). This function computes, to an attempted specified accuracy, the value of; the integral. Input parameters:. n : Number of dimensions [2,15]; a,b : One-dimensional arrays of length >= N . On entry A[i], and B[i],; contain the lower and upper limits of integration, respectively.; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epsrel : Specified relative accuracy.; epsabs : Specified absolute accuracy.; The integration algorithm will attempt to reach either the relative or the absolute accuracy.; In case the maximum funcion called is reached the algorithm will stop earlier without having reached; the desired accuracy. Output parameters:. relerr : Contains,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:59216,interface,interface,59216,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,4,['interface'],['interface']
Integrability,"ointer_t node, XMLAttrPointer_t attr);  In the define section of the GDML file, quantities can be declared. ;  ; XMLNodePointer_t Reflection (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the solids section of the GDML file, a Reflected Solid may be declared when the ReflectedSolid keyword is found, this function is called. ;  ; XMLNodePointer_t RotProcess (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the define section of the GDML file, rotations can be declared. ;  ; XMLNodePointer_t ScaledSolid (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the solids section of the GDML file, a Scaled Solid may be declared when the scaledSolid keyword is found, this function is called. ;  ; XMLNodePointer_t SclProcess (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the define section of the GDML file, rotations can be declared. ;  ; Int_t SetAxis (const char *axisString);  When using the 'divide' process in the geometry this function sets the variable 'axis' depending on what is specified. ;  ; XMLNodePointer_t SkinSurfaceProcess (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the structure section of the GDML file, skin surfaces can be declared. ;  ; XMLNodePointer_t Sphere (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the solids section of the GDML file, a Sphere may be declared. ;  ; XMLNodePointer_t Tessellated (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the solids section of the GDML file, a tessellated shape may be declared. ;  ; XMLNodePointer_t TopProcess (TXMLEngine *gdml, XMLNodePointer_t node);  In the setup section of the GDML file, the top volume need to be declared. ;  ; XMLNodePointer_t Torus (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer_t attr);  In the solids section of the GDML file, a Torus may be declared. ;  ; XMLNodePointer_t Trap (TXMLEngine *gdml, XMLNodePointer_t node, XMLAttrPointer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLParse.html:18324,depend,depending,18324,doc/master/classTGDMLParse.html,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html,1,['depend'],['depending']
Integrability,"ojectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsData&RooAbsOptTestStatistic::data(); const RooAbsData&RooAbsOptTestStatistic::data() const; virtual Double_tdefaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNLLVar.html:9979,depend,dependentOverlaps,9979,root/html528/RooNLLVar.html,https://root.cern,https://root.cern/root/html528/RooNLLVar.html,96,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"ok(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); virtual voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html:3377,integrat,integration,3377,root/html530/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html,2,['integrat'],['integration']
Integrability,"oks; static Int_tRooPrintable::_nameLength; static RooFactoryWSTool*_of; map<string,string>_typeAliases; RooWorkspace*_ws! Associated workspace; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFactoryWSTool(RooWorkspace& ws); Default constructor. ~RooFactoryWSTool(); Destructor. RooRealVar* createVariable(const char* name, Double_t xmin, Double_t xmax); Low-level factory interface for creating a RooRealVar with a given range and initial value. RooCategory* createCategory(const char* name, const char* stateNameList = 0); Low-level factory interface for creating a RooCategory with a given list of state names. The State name list; can be of the form 'name1,name2,name3' or of the form 'name1=id1,name2=id2,name3=id3'. RooAbsArg* createArg(const char* className, const char* objName, const char* varList); Low-level factory interface for creating a RooAbsPdf of a given class with a given list of input variables; The variable list varList should be of the form ""a,b,c"" where the interpretation of the argument is; dependent on the p.d.f. Set and List arguments can be passed by substituting a single argument with; the form (a,b,c), i.e. one can set varList to ""x,(a0,a1,a2)"" to pass a RooAbsReal and a RooArgSet as arguments. vector<string> ctorArgs(const char* className). RooAddPdf* add(const char* objName, const char* specList, Bool_t recursiveCoefs = kFALSE). RooRealSumPdf* amplAdd(const char* objName, const char* specList). RooProdPdf* prod(const char* objName, const char* pdfList). RooSimultaneous* simul(const char* objName, const char* indexCat, const char* pdfMap). RooAddition* addfunc(const char* objName, const char* specList). RooProduct* prodfunc(const char* objName, const char* pdfList). RooAbsArg* process(const char* expr); Process high-level object creation syntax; Accepted forms of syntax are. Creating variables. x[-10,10] - Create variable x with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:12219,interface,interface,12219,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,4,"['depend', 'interface']","['dependent', 'interface']"
Integrability,"ol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:6535,integrat,integration,6535,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,10,['integrat'],['integration']
Integrability,"ol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:6507,integrat,integration,6507,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integration']
Integrability,"ol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html:7159,integrat,integration,7159,root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"ol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7159,integrat,integration,7159,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"ol ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ FitFCN() [4/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ; Give optionally the initial parameter values, data size to have the fit Ndf correctly set in the FitResult and flag specifying the type of fit. The fitType can be: 0 undefined, 1 least square fit, 2 unbinned likelihood fit, 3 binned likelihood fit Note that if the parameters values are not given (params=0) the current parameter settings are used. The parameter settings can be created before by using the FitConfig::SetParamsSetting. If they have not been created they are created automatically when the params pointer is not zero. Note that passing a params != 0 will set the parameter settings to the new value AND also the step sizes to some pre-defined value (stepsize = 0.3 * abs(parameter_value) ) ; Definition at line 217 of file Fitter.cxx. ◆ FitFCN() [5/6]. bool ROOT::Fit::Fitter::FitFCN ; (; MinuitFCN_t ; fcn, . int ; npar = 0, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:24797,interface,interface,24797,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['interface'],['interface']
Integrability,"ol box; static FT_CharMapfgCharMap[32]font character map; static Int_tfgCurFontIdxcurrent font index; static FT_FacefgFace[32]font face; static Int_tfgFontCountnumber of fonts loaded; static char*fgFontName[32]font name; static TTGlyphfgGlyphs[1024]glyphs; static Bool_tfgHintinguse hinting (true by default); static Bool_tfgInittrue if the Init has been called; static Bool_tfgKerninguse kerning (true by default); static FT_LibraryfgLibraryFreeType font library; static Int_tfgNumGlyphsnumber of glyphs in the string; static FT_Matrix*fgRotMatrixrotation matrix; static Bool_tfgSmoothinguse anti-aliasing (true when >8 planes, false otherwise); static Int_tfgSymbItaFontIdxSymbol italic font index; static Int_tfgTBlankWtrailing blanks width; static Int_tfgWidthstring width, used to compute X alignment; static TTF::(anonymous)kMaxGlyphs; static TTF::(anonymous)kTTMaxFonts. Class Charts. Inheritance Chart:. TTF. Function documentation; ~TTF(); Cleanup TTF environment. void Init(); Initialise the TrueType fonts interface. void Cleanup(); Cleanup. Is called by the gCleanupTTF destructor. Short_t CharToUnicode(UInt_t code); Map char to unicode. Returns 0 in case no mapping exists. void GetTextExtent(UInt_t& w, UInt_t& h, char* text); Get width (w) and height (h) when text is horizontal. void GetTextAdvance(UInt_t& a, char* text); Get advance (a) when text is horizontal. void GetTextExtent(UInt_t& w, UInt_t& h, wchar_t* text); Get width (w) and height (h) when text is horizontal. void LayoutGlyphs(); Compute the glyps positions, fgAscent and fgWidth (needed for alignment).; Perform the Glyphs transformation.; Compute the string control box.; If required take the ""kerning"" into account.; SetRotation and PrepareString should have been called before. void PrepareString(const char* string); Put the characters in ""string"" in the ""glyphs"" array. void PrepareString(const wchar_t* string); Put the characters in ""string"" in the ""glyphs"" array. void SetHinting(Bool_t state); Set hinting f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTF.html:2792,interface,interface,2792,root/html602/TTF.html,https://root.cern,https://root.cern/root/html602/TTF.html,2,['interface'],['interface']
Integrability,"ol delaySort = false) = 0;; 39 virtual Long64_t GetEntryNumberFriend(const TTree * /*parent*/) = 0;; 40 virtual Long64_t GetEntryNumberWithIndex(Long64_t major, Long64_t minor) const = 0;; 41 virtual Long64_t GetEntryNumberWithBestIndex(Long64_t major, Long64_t minor) const = 0;; 42 virtual const char *GetMajorName() const = 0;; 43 virtual const char *GetMinorName() const = 0;; 44 virtual bool IsValidFor(const TTree *parent) = 0;; 45 virtual Long64_t GetN() const = 0;; 46 virtual TTree *GetTree() const {return fTree;}; 47 virtual void UpdateFormulaLeaves(const TTree *parent) = 0;; 48 virtual void SetTree(TTree *T) = 0;; 49 ; 50 ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index; 51};; 52 ; 53#endif; 54 ; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TNamed.h; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TTreeFormulaUsed to pass a selection expression to the Tree drawing routine.Definition TTreeFormula.h:58; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TVirtualIndexAbstract interface for Tree Index.Definition TVirtualIndex.h:30; TVirtualIndex::UpdateFormulaLeavesvirtual void UpdateFormulaLeaves(const TTree *parent)=0; TVirtualIndex::GetMajorNamevirtual const char * GetMajorName() const =0; TVirtualIndex::GetEntryNumberWithIndexvirtual Long64_t GetEntryNumberWithIndex(Long64_t major, Long64_t minor) const =0; TVirtualIndex::TVirtualIndexTVirtualIndex()pointer to TreeDefinition TVirtualIndex.cxx:25; TVirtualIndex::~TVirtualIndex~TVirtualIndex() overrideDefinition TVirtualIndex.cxx:32; TVirtualIndex::GetEntryNumberFriendvirtual Long64_t GetEntryNumberFriend(const TTree *)=0; TVirtualIndex::GetTreevirtual TTree * GetTree() constDefinition TVirtualIndex.h:46; TVirtualIndex::Appendvirtual void Append(const TVirtualIndex *, bool delaySort=false)=0; TVirtualIndex::GetMinorNamevirtual const char * GetMinorNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualIndex_8h_source.html:2273,rout,routine,2273,doc/master/TVirtualIndex_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualIndex_8h_source.html,1,['rout'],['routine']
Integrability,"ol useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:16609,depend,dependents,16609,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,1,['depend'],['dependents']
Integrability,"olAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TString_formExprFormula expression string; RooFormula*_formula! Formula engine; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFormulaVar.html:35855,integrat,integration,35855,root/html602/RooFormulaVar.html,https://root.cern,https://root.cern/root/html602/RooFormulaVar.html,2,['integrat'],['integration']
Integrability,"olTiptooltip for object info; TGPopupMenu*fToolsMenutools menu; TGVertical3DLine*fVertical1toolbar vertical separator; TGLayoutHints*fVertical1Layoutlayout hints for separator; TGVertical3DLine*fVertical2toolbar vertical separator; TGLayoutHints*fVertical2Layoutlayout hints for separator; TGPopupMenu*fViewMenuview menu; TGPopupMenu*fViewWithMenuview with... cascade submenu. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. TCanvasImp. ←; TRootCanvas. Function documentation; TRootCanvas(TCanvas* c = 0, const char* name = ""ROOT Canvas"", UInt_t width = 500, UInt_t height = 300); Create a basic ROOT canvas. TRootCanvas(TCanvas* c, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height); Create a basic ROOT canvas. void CreateCanvas(const char* name); Create the actual canvas. ~TRootCanvas(); Delete ROOT basic canvas. Order is significant. Delete in reverse; order of creation. void Close(); Called via TCanvasImp interface by TCanvas. void ReallyDelete(); Really delete the canvas and this GUI. void CloseWindow(); In case window is closed via WM we get here. UInt_t GetCwidth() const; Return width of canvas container. UInt_t GetCheight() const; Return height of canvas container. UInt_t GetWindowGeometry(Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Gets the size and position of the window containing the canvas. This; size includes the menubar and borders. void SetStatusText(const char* txt = 0, Int_t partidx = 0); Set text in status bar. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. Int_t InitWindow(); Called by TCanvas ctor to get window indetifier. void SetCanvasSize(UInt_t w, UInt_t h); Set size of canvas container. Units in pixels. void SetWindowPosition(Int_t x, Int_t y); Set canvas position (units in pixels). void SetWindowSize(UInt_t w, UInt_t h); Set size of canvas (units in pixels). void RaiseWindow(); Put canvas ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootCanvas.html:26852,interface,interface,26852,root/html602/TRootCanvas.html,https://root.cern,https://root.cern/root/html602/TRootCanvas.html,2,['interface'],['interface']
Integrability,"ol_t MatchLegacyCheckSum(UInt_t checksum) const;; 198 TVirtualStreamerInfo *NewInfo(TClass *cl) override { return new TStreamerInfo(cl); }; 199 void *New(void *obj = nullptr) override;; 200 void *NewArray(Long_t nElements, void* ary = nullptr) override;; 201 void Destructor(void* p, Bool_t dtorOnly = kFALSE) override;; 202 void DeleteArray(void* p, Bool_t dtorOnly = kFALSE) override;; 203 void PrintValue(const char *name, char *pointer, Int_t i, Int_t len, Int_t lenmax=1000) const;; 204 void PrintValueClones(const char *name, TClonesArray *clones, Int_t i, Int_t eoffset, Int_t lenmax=1000) const;; 205 void PrintValueSTL(const char *name, TVirtualCollectionProxy *cont, Int_t i, Int_t eoffset, Int_t lenmax=1000) const;; 206 ; 207 template <class T>; 208 Int_t ReadBuffer(TBuffer &b, const T &arrptr, TCompInfo *const*const compinfo, Int_t first, Int_t last, Int_t narr=1,Int_t eoffset=0,Int_t mode=0);; 209 template <class T>; 210 Int_t ReadBufferSkip(TBuffer &b, const T &arrptr, const TCompInfo *compinfo,Int_t kase, TStreamerElement *aElement, Int_t narr, Int_t eoffset);; 211 template <class T>; 212 Int_t ReadBufferConv(TBuffer &b, const T &arrptr, const TCompInfo *compinfo,Int_t kase, TStreamerElement *aElement, Int_t narr, Int_t eoffset);; 213 template <class T>; 214 Int_t ReadBufferArtificial(TBuffer &b, const T &arrptr, TStreamerElement *aElement, Int_t narr, Int_t eoffset);; 215 ; 216 Int_t ReadBufferClones(TBuffer &b, TClonesArray *clones, Int_t nc, Int_t first, Int_t eoffset);; 217 Int_t ReadBufferSTL(TBuffer &b, TVirtualCollectionProxy *cont, Int_t nc, Int_t eoffset, Bool_t v7 = kTRUE );; 218 void SetCheckSum(UInt_t checksum) override { fCheckSum = checksum; }; 219 void SetClass(TClass *cl) override;; 220 void SetClassVersion(Int_t vers) override { fClassVersion = vers; }; 221 void SetOnFileClassVersion(Int_t vers) { fOnFileClassVersion = vers; }; 222 void TagFile(TFile *fFile) override;; 223private:; 224 // Try to remove those functions from the public interface.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8h_source.html:13353,interface,interface,13353,doc/master/TStreamerInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8h_source.html,1,['interface'],['interface']
Integrability,"ol_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:82503,depend,depends,82503,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['depend'],['depends']
Integrability,"ol_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tisOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:18618,message,message,18618,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,3,['message'],['message']
Integrability,"ol_tRooAbsAnaConvPdf::isDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:20657,message,message,20657,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,12,['message'],['message']
Integrability,"ol_tRooAbsAnaConvPdf::isDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPEffDecay.html:20403,message,message,20403,root/html526/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPEffDecay.html,6,['message'],['message']
Integrability,"ol_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Custom str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_double_.html:37173,integrat,integrator,37173,root/html602/RooCFunction3Binding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_double_.html,2,['integrat'],['integrator']
Integrability,"ol_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidlogEvalError(const char* message, const char* serverValueString = 0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*mean(RooRealVar& obs); RooMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:16235,message,message,16235,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['message'],['message']
Integrability,"ol_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTreeDensity(); {}. PDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is not used in the decision tree like PDEFoam,; instead FillHist() is used. void FillHistograms(TMVA::Volume& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& ); Fill the given histograms with signal and background events,; which are found in the volume. Parameters:. - volume - volume box to search in. - hsig, hbkg, hsig_unw, hbkg_unw - histograms with weighted and; unweighte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDecisionTreeDensity.html:6283,message,message,6283,root/html530/TMVA__PDEFoamDecisionTreeDensity.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDecisionTreeDensity.html,3,['message'],['message']
Integrability,"ol_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminantDensity(); {}. PDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average number density of events of type fClass within the; range-searching volume (specified by fBox). Parameters:. - Xarg - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights) of type fClass, which were; found in the range-searching volume at point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDiscriminantDensity.html:6230,message,message,6230,root/html530/TMVA__PDEFoamDiscriminantDensity.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDiscriminantDensity.html,2,['message'],['message']
Integrability,"ol_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminantDensity(); {}. PDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average number density of events of type fClass within the; range-searching volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights) of type fClass, which were; found in the range-searching volume at point ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamDiscriminantDensity.html:6249,message,message,6249,root/html534/TMVA__PDEFoamDiscriminantDensity.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamDiscriminantDensity.html,1,['message'],['message']
Integrability,"ol_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←. TDOMParser. TSAXParser. Function documentation; TXMLParser(); Initializes parser variables. ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser(const TXMLParser& ). TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLParser.html:11472,message,message,11472,root/html602/TXMLParser.html,https://root.cern,https://root.cern/root/html602/TXMLParser.html,2,['message'],['message']
Integrability,"olds. ◆ StreamerNVirtual(). void TMVA::Configurable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 138 of file Configurable.h. ◆ WriteOptionsReferenceToFile(). void TMVA::Configurable::WriteOptionsReferenceToFile ; (; ). protected . write complete options to output stream ; Definition at line 409 of file Configurable.cxx. ◆ WriteOptionsToStream(). void TMVA::Configurable::WriteOptionsToStream ; (; std::ostream & ; o, . const TString & ; prefix . ); const. write options to output stream (e.g. in writing the MVA weight files ; Definition at line 333 of file Configurable.cxx. Member Data Documentation. ◆ fConfigDescription. TString TMVA::Configurable::fConfigDescription. private . description of this configurable ; Definition at line 116 of file Configurable.h. ◆ fLastDeclaredOption. OptionBase* TMVA::Configurable::fLastDeclaredOption. private . ! last declared option ; Definition at line 113 of file Configurable.h. ◆ fListOfOptions. TList TMVA::Configurable::fListOfOptions. private . option list ; Definition at line 114 of file Configurable.h. ◆ fLogger. MsgLogger* TMVA::Configurable::fLogger. mutableprotected . ! message logger ; Definition at line 128 of file Configurable.h. ◆ fLooseOptionCheckingEnabled. Bool_t TMVA::Configurable::fLooseOptionCheckingEnabled. private . checker for option string ; Definition at line 110 of file Configurable.h. ◆ fOptions. TString TMVA::Configurable::fOptions. private . options string ; Definition at line 109 of file Configurable.h. ◆ fReferenceFile. TString TMVA::Configurable::fReferenceFile. private . reference file for options writing ; Definition at line 117 of file Configurable.h. Libraries for TMVA::Configurable:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Configurable.h; tmva/tmva/src/Configurable.cxx. TMVAConfigurable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Configurable.html:22765,message,message,22765,doc/master/classTMVA_1_1Configurable.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html,1,['message'],['message']
Integrability,"olfHasSumflag to control if distribution has a pre-computed sum of the probabilities; intfModemode of the distribution; boolfOwnFuncflag to control if distribution owns the funcitno pointers; vector<double>fPVecVector of the probabilities; vector<double>fPVecSumVector of the sum of the probabilities; const ROOT::Math::IGenFunction*fPmfpointer to a function calculating the probability; doublefSumtotal sum of the probabilities in the given domain; intfXmaxupper value of the domain; intfXminlower value of the domain. Class Charts. Inheritance Chart:. TUnuranBaseDist. ←; TUnuranDiscrDist. Function documentation; TUnuranDiscrDist(const ROOT::Math::IGenFunction& func, bool copyFunc = false); Constructor from a generic function object. TUnuranDiscrDist(TF1* func); Constructor from a TF1 objects. TUnuranDiscrDist(const TUnuranDiscrDist& ); Implementation of copy ctor using aassignment operator. ~TUnuranDiscrDist(); destructor implementation. void SetCdf(const ROOT::Math::IGenFunction& cdf); set cdf distribution using a generic function interface. void SetCdf(TF1* cdf); set cumulative distribution function from a TF1. double Pmf(int x) const; evaluate the distribution. double Cdf(int x) const; evaluate the cumulative distribution; otherwise evaluate from the sum of the probabilities. TUnuranDiscrDist * Clone() const. Clone (required by base class). { return new TUnuranDiscrDist(*this); }. void SetDomain(int xmin, int xmax). Set the distribution domain, by default the domain is [0,INT_MAX]; If xmin >= xmax a domain is removed. void SetMode(int mode). set the mode of the distribution (location of maximum probability). { fMode = mode; fHasMode=true;}. void SetProbSum(double sum). set the value of the sum of the probabilities in the given domain. { fSum = sum; fHasSum=true; }. bool GetDomain(int& xmin, int& xmax) const. check if distribution has domain and return in case its domain. int Mode() const. get the mode (x location of function maximum). { return fMode; }. double ProbSum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnuranDiscrDist.html:2563,interface,interface,2563,root/html602/TUnuranDiscrDist.html,https://root.cern,https://root.cern/root/html602/TUnuranDiscrDist.html,1,['interface'],['interface']
Integrability,"olikelihood ratio function used to make contours (managed internally); map<std::string,double>fLowerLimitsmap with cached lower bound values; auto_ptr<ROOT::Math::IMultiGenFunction>fMinFunc! transient pointer to the minimization function ; auto_ptr<ROOT::Math::Minimizer>fMinimizer! transient pointer to minimizer class used to find limits and contour; RooArgSetfParametersparameters of interest for this interval; map<std::string,double>fUpperLimitsmap with cached upper bound values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LikelihoodInterval(const char* name); Default constructor with name and title. LikelihoodInterval(const char* name, RooAbsReal* , const RooArgSet* , RooArgSet* = 0); Alternate constructor taking a pointer to the profile likelihood ratio, parameter of interest and; optionally a snaphot of best parameter of interest for interval. ~LikelihoodInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const; This is the main method to satisfy the RooStats::ConfInterval interface.; It returns true if the parameter point is in the interval. RooArgSet* GetParameters() const; returns list of parameters. Bool_t CheckParameters(const RooArgSet& ) const; check that the parameters are correct. Double_t LowerLimit(const RooRealVar& param); compute the interval lower limit for the specified confidence level; or size using MINOS; Note that both lower and upper limit are computed and cached internally so; any subsequent calls (for the same CL will be fast to execute). Double_t UpperLimit(const RooRealVar& param); compute the interval upper limit for the specified confidence level; or size using MINOS.; Note that both lower and upper limit are computed and cached internally so; any subsequent calls (for the same CL will be fast to execute). void ResetLimits(); reset map with cached limits - called every time the test size or CL has been changed. bool CreateMinimizer(); internal function to create minimizer object n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodInterval.html:8781,interface,interface,8781,root/html526/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodInterval.html,1,['interface'],['interface']
Integrability,"olling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; static RooRealVarSharedProperties_nullPropNull property; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; static Bool_t_printScientific; static Int_t_printSigDigits; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooRealVarSharedProperties*_sharedProp! Shared properties associated with this instance; static RooSharedPropertiesList_sharedPropListList of properties shared among clone sets ; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRealVar.html:38621,integrat,integrator,38621,root/html530/RooRealVar.html,https://root.cern,https://root.cern/root/html530/RooRealVar.html,1,['integrat'],['integrator']
Integrability,"olor *color = gROOT->GetColor(ci);; 2442 if (color); 2443 return color->GetPixel();; 2444 else; 2445 ::Warning(""TColor::Number2Pixel"", ""color with index %d not defined"", ci);; 2446 ; 2447 return 0;; 2448}; 2449 ; 2450////////////////////////////////////////////////////////////////////////////////; 2451/// Convert r,g,b to graphics system dependent pixel value.; 2452/// The r,g,b triplet must be [0,1].; 2453 ; 2454ULong_t TColor::RGB2Pixel(Float_t r, Float_t g, Float_t b); 2455{; 2456 if (r < 0) r = 0;; 2457 if (g < 0) g = 0;; 2458 if (b < 0) b = 0;; 2459 if (r > 1) r = 1;; 2460 if (g > 1) g = 1;; 2461 if (b > 1) b = 1;; 2462 ; 2463 ColorStruct_t color;; 2464 color.fRed = UShort_t(r * 65535);; 2465 color.fGreen = UShort_t(g * 65535);; 2466 color.fBlue = UShort_t(b * 65535);; 2467 color.fMask = kDoRed | kDoGreen | kDoBlue;; 2468 gVirtualX->AllocColor(gVirtualX->GetColormap(), color);; 2469 return color.fPixel;; 2470}; 2471 ; 2472////////////////////////////////////////////////////////////////////////////////; 2473/// Convert r,g,b to graphics system dependent pixel value.; 2474/// The r,g,b triplet must be [0,255].; 2475 ; 2476ULong_t TColor::RGB2Pixel(Int_t r, Int_t g, Int_t b); 2477{; 2478 if (r < 0) r = 0;; 2479 if (g < 0) g = 0;; 2480 if (b < 0) b = 0;; 2481 if (r > 255) r = 255;; 2482 if (g > 255) g = 255;; 2483 if (b > 255) b = 255;; 2484 ; 2485 ColorStruct_t color;; 2486 color.fRed = UShort_t(r * 257); // 65535/255; 2487 color.fGreen = UShort_t(g * 257);; 2488 color.fBlue = UShort_t(b * 257);; 2489 color.fMask = kDoRed | kDoGreen | kDoBlue;; 2490 gVirtualX->AllocColor(gVirtualX->GetColormap(), color);; 2491 return color.fPixel;; 2492}; 2493 ; 2494////////////////////////////////////////////////////////////////////////////////; 2495/// Convert machine dependent pixel value (obtained via RGB2Pixel or; 2496/// via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; 2497/// The r,g,b triplet will be [0,1].; 2498 ; 2499void TColor::Pixel2RGB(ULong_t pixel, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:89773,depend,dependent,89773,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['depend'],['dependent']
Integrability,"olorBitsTEveElement::kCSCBApplyMainColorToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveProjectionManager(TEveProjection::EPType_e type = TEveProjection::kPT_Unknown); Constructor. ~TEveProjectionManager(); Destructor.; Destroys also dependent elements. void AddDependent(TEveElement* el); Add el as dependent element. void RemoveDependent(TEveElement* el); Remove el as dependent element. void UpdateName(); Updates name to have consitent information with prjection. void SetProjection(TEveProjection::EPType_e type); Set projection type and distortion. void SetCenter(Float_t x, Float_t y, Float_t z); Set projection center and rebuild projected scene. Bool_t HandleElementPaste(TEveElement* el); React to element being pasted or dnd-ed.; Return true if redraw is needed (virtual method). Bool_t ShouldImport(TEveElement* el); Returns true if element el should be imported. Behaviour depends on the value of the fImportEmpty member:; false - el or any of its children must be projectable (default);; true - always import. void UpdateDependentElsAndScenes(TEveElement* root); Update dependent elements' bounding box and mark scenes; containing element root or its children as requiring a repaint. TEveElement* ImportElementsRecurse(TEveElement* el, TEveElement* parent); If el is TEveProjectable add projected instance else add plain; TEveElementList to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveProjectionManager.html:22930,depend,dependent,22930,root/html602/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html602/TEveProjectionManager.html,2,['depend'],['dependent']
Integrability,olorFrame::GetColor ; (; ); const. inline . Definition at line 43 of file TGColorSelect.h. ◆ HandleButton(). Bool_t TGColorFrame::HandleButton ; (; Event_t * ; event). overridevirtual . Handle button events in TGColorFrame. ; Reimplemented from TGFrame.; Definition at line 106 of file TGColorSelect.cxx. ◆ IsA(). TClass * TGColorFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 45 of file TGColorSelect.h. ◆ operator=(). TGColorFrame & TGColorFrame::operator= ; (; const TGColorFrame & ; ). privatedelete . ◆ SetActive(). void TGColorFrame::SetActive ; (; Bool_t ; in). inline . Definition at line 42 of file TGColorSelect.h. ◆ Streamer(). void TGColorFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGColorFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TGColorSelect.h. Member Data Documentation. ◆ fActive. Bool_t TGColorFrame::fActive. protected . kTRUE if this color cell is active ; Definition at line 27 of file TGColorSelect.h. ◆ fColor. Pixel_t TGColorFrame::fColor. protected . returned color value ; Definition at line 29 of file TGColorSelect.h. ◆ fGrayGC. GContext_t TGColorFrame::fGrayGC. protected . Shadow GC. ; Definition at line 28 of file TGColorSelect.h. ◆ fMsgWindow. const TGWindow* TGColorFrame::fMsgWindow. protected . window handling container messages ; Definition at line 25 of file TGColorSelect.h. ◆ fPixel. Pixel_t TGColorFrame::fPixel. protected . color value of this cell ; Definition at line 26 of file TGColorSelect.h. Libraries for TGColorFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGColorSelect.h; gui/gui/src/TGColorSelect.cxx. TGColorFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorFrame.html:30566,message,messages,30566,doc/master/classTGColorFrame.html,https://root.cern,https://root.cern/doc/master/classTGColorFrame.html,1,['message'],['messages']
Integrability,"ols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(); default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. void SetModel(const RooStats::ModelConfig& ); set the model. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. ConfInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. TList* GenSamplingDistribution(const char* asciiFilePat = 0) const; This method generates the sampling distribution for each point of the study. If a file path; is provided, the distribution is saved in a root file. Returns the list of the distributions; for each point. ConfInterval* GetIntervalUsingList() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. ConfInterval* GetInterval(const char* asciiFilePat) const; This method returns a confidence interval exactly like GetInterval(), but; instead of generating the sampling disribution (long computation) it takes; the distribution from the file provided. ConfInterval* Run(TList* SamplingList) const; Main method to perform the interval calculation. NeymanConstruction(). void SetTestStatSampler(RooStats::TestStatSampler& distCreator); in addition to interface we also need:; Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic). {fTestStatSampler = &distCreator;}. void SetLeftSideTailFraction(Double_t leftSideFraction = 0.); fLeftSideTailFraction*fSize defines lower edge of acceptance region.; Unified limits use 0, central limits use 0.5,; for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter. {fLeftSideFraction = leftSideFraction;}. void SetParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:10119,interface,interface,10119,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['interface'],['interface']
Integrability,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:4936,interface,interface,4936,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['interface'],['interface']
Integrability,"olume *top=gGeoManager->MakeBox(""Top"",med,10.,10.,10.);; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; The default units are in centimeters. Now we want to make this volume our world. We have to do this operation before closing the geometry.; root[] gGeoManager->SetTopVolume(top);; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; This should be enough, but it is not since always after defining some geometry hierarchy, TGeo needs to build some optimization structures and perform some checks. Note the messages posted after the statement is executed. We will describe the corresponding operations later.; root[] gGeoManager->CloseGeometry();; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; Now we are really done with geometry building stage, but we would like to see our simple world:; root[] top->SetLineColor(kMagenta);; root[] gGeoManager->SetTopVisible(); // the TOP is invisible; root[] top->Draw();; kMagenta@ kMagentaDefinition Rtypes.h:66; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396. Example 2: A Geometrical Hierarchy Look and Feel; Before going further, let us get a look and feel of interacting with the modeller. For this, we will use one of the examples illustrating the geometry package. To get an idea on the geometry structure created in this example, just look at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:6630,message,messages,6630,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['message'],['messages']
Integrability,"olume)Definition TGeoNode.h:117; TGeoNode::CheckShapesvoid CheckShapes()check for wrong parameters in shapesDefinition TGeoNode.cxx:329; TGeoNode::SetOverlappingvoid SetOverlapping(Bool_t flag=kTRUE)Definition TGeoNode.h:120; TGeoNode::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoNode.h:91; TGeoNode::GetMatrixvirtual TGeoMatrix * GetMatrix() const =0; TGeoNode::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideSet visibility of the node (obsolete).Definition TGeoNode.cxx:718; TGeoNode::SetMotherVolumevoid SetMotherVolume(TGeoVolume *mother)Definition TGeoNode.h:125; TGeoNode::Classstatic TClass * Class(); TGeoNode::GetMotherVolumeTGeoVolume * GetMotherVolume() constDefinition TGeoNode.h:90; TGeoNode::SetNumbervoid SetNumber(Int_t number)Definition TGeoNode.h:118; TGeoNode::CheckOverlapsvoid CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")Check overlaps bigger than OVLP hierarchically, starting with this node.Definition TGeoNode.cxx:192; TGeoOpticalSurfaceThis is a wrapper class to G4OpticalSurface.Definition TGeoOpticalSurface.h:27; TGeoPNEntryThe knowledge of the path to the objects that need to be misaligned is essential since there is no ot...Definition TGeoPhysicalNode.h:100; TGeoPNEntry::SetPhysicalNodevoid SetPhysicalNode(TGeoPhysicalNode *node)Setter for the corresponding physical node.Definition TGeoPhysicalNode.cxx:618; TGeoParallelWorldBase class for a flat parallel geometry.Definition TGeoParallelWorld.h:23; TGeoParallelWorld::CloseGeometryBool_t CloseGeometry()The main geometry must be closed.Definition TGeoParallelWorld.cxx:165; TGeoParallelWorld::RefreshPhysicalNodesvoid RefreshPhysicalNodes()Refresh the node pointers and re-voxelize.Definition TGeoParallelWorld.cxx:198; TGeoParallelWorld::IsClosedBool_t IsClosed() constDefinition TGeoParallelWorld.h:143; TGeoPhysicalNodePhysical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned ...Definition TGeoPhysicalNode.h:35; TGeoPhysicalNode::Refres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:231375,wrap,wrapper,231375,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,"olume/state. The returned node is the next crossed one, but the physical path (state) AFTER crossing the boundary is not determined. In order to find out this new state, one has to propagate the point with a distance slightly bigger that the computed step value (which is accurate within numerical precision). A method that performs this task finding the next location is TGeoManager::Step(), described in ""Making a Step"", but users may implement more precise methods to insure post-step boundary crossing. Geometry Graphical User Interface; The geombuilder package allows you to create and edit geometries. The package provides a library of all GUI classes related to geometry. Each editable geometry class TGeoXXX have a correspondent editor TGeoXXXEditor that provides a graphics user interface allowing to edit some (or all) parameters of a geometry object. The editable objects are geometry manager, volumes, nodes, shapes, media, materials and matrices. The interfaces provide also access to specific functionality of geometry objects. The editing mechanism is based on ROOT GED (Graphics Editors) functionality and the library is loaded using the plug-in mechanism. Editing a Geometry; There are two different use cases having different ways of invoking the geometry editors. The first one applies when starting with geometry from scratch and using the builder functionality to create new geometry objects. In this case, one should use the sequence:; root[] TGeoManager *geom = new TGeoManager(""MyGeom"",; ""Test builder"");; root[] geom->Edit(Option_t *option="""");; The lines above will create a new TGeoManager class, create an empty canvas and start the editor in the left-sided editor frame attached to the canvas. To open the editor in a separate frame one should provide a non-empty string as option to the Edit() method. The geometry manager editor. The Geometry Manager Editor. Accessing/creating different categories of editable objects; The second use case applies when starting to edit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:136700,interface,interfaces,136700,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['interface'],['interfaces']
Integrability,"olumn.; 708 /// \param[in] expression A C++ callable that computes the new value of the defined column.; 709 /// \return the first node of the computation graph for which the new quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// where:; 713 /// - `T` is the type of the defined column; 714 /// - `slot` is a number in the range [0, nThreads) that is different for each processing thread. This can simplify; 715 /// the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; 716 /// - `id` is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is; 717 /// being processed (see the class docs for more information).; 718 ///; 719 /// DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format on; 733 // TODO we could SFINAE on F's signature to provide friendlier compilation errors in case of signature mismatch; 734 template <typename F, typename RetType_t = typename TTraits::CallableTraits<F>::ret_type>; 735 RInterface<Proxied, DS_t> DefinePerSample(std::string_view name, F expression); 736 {; 737 RDFInternal::CheckValidCppVarName(name, ""DefinePerSample"");; 738 RDFInternal::CheckForRedefinition(""DefinePerSampl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:38020,depend,depends,38020,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,2,"['depend', 'inject']","['depends', 'inject']"
Integrability,"olumnNames_t & ; columns = {}, . std::string_view ; name = """" . ). inline . Append a filter to the call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). ; [in]columnsNames of the columns/branches in input to the filter function. ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Append a filter node at the point of the call graph corresponding to the object this method is called on. The callable f should not have side-effects (e.g. modification of an external or static variable) to ensure correct results when implicit multi-threading is active.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded. Even if multiple actions or transformations depend on the same filter, it is executed once per entry. If its result is requested more than once, the cached result is served. Example usage:; // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; auto filtered = df.Filter(myCut, {""x"", ""y""});; ; // String: it must contain valid C++ except that column names can be used instead of variable names; auto filtered = df.Filter(""x*y > 0"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); but instead this will: df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); ; Definition at line 219 of file RInterface.hxx. ◆ Filter() [2/4]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< RDFDetail::RFilter< F, Proxied >, DS_t > ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:68942,depend,depend,68942,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['depend'],['depend']
Integrability,"ol _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Attributes; TreeReadBuffer * _treeReadBuffer = nullptr;  . Friends; class RooVectorDataStore;  . Legacy interface; Previous versions of RooAbsCategory were based on RooCatType, a class containing a state and a label.; It has been replaced by integers, which use less space and allow for faster access. The following part of the interface should not be used if possible. Since RooCatType in essence is only an index and a state name, equivalent functionality can be achieved using begin() and end() to iterate through pairs of <index, stateName> and by using using lookupName() and lookupIndex(). . const RooCatType * lookupType (value_type index, bool printError=false) const;  Find our type corresponding to the specified index, or return nullptr for no match. ;  ; const RooCatType * lookupType (const char *label, bool printError=false) const;  Find our type corresponding to the specified label, or return 0 for no match. ;  ; const RooCatType * lookupType (const RooCatType &type, bool printError=false) const;  Find our type that matches the specified type, or return 0 for no match. ;  ; TIterator * typeIterator () const;  ; Int_t numTypes (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:43104,interface,interface,43104,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['interface'],['interface']
Integrability,"om Kendall-Stuart, Vol 1 pag 243, second edition; 7797 Double_t neff = GetEffectiveEntries();; 7798 return ( neff > 0 ? TMath::Sqrt(24./neff ) : 0. );; 7799 }; 7800 else {; 7801 Error(""GetKurtosis"", ""illegal value of parameter"");; 7802 return 0;; 7803 }; 7804}; 7805 ; 7806////////////////////////////////////////////////////////////////////////////////; 7807/// fill the array stats from the contents of this histogram; 7808/// The array stats must be correctly dimensioned in the calling program.; 7809///; 7810/// ~~~ {.cpp}; 7811/// stats[0] = sumw; 7812/// stats[1] = sumw2; 7813/// stats[2] = sumwx; 7814/// stats[3] = sumwx2; 7815/// ~~~; 7816///; 7817/// If no axis-subrange is specified (via TAxis::SetRange), the array stats; 7818/// is simply a copy of the statistics quantities computed at filling time.; 7819/// If a sub-range is specified, the function recomputes these quantities; 7820/// from the bin contents in the current axis range.; 7821///; 7822/// IMPORTANT NOTE: This means that the returned statistics are context-dependent.; 7823/// If TAxis::kAxisRange, the returned statistics are dependent on the binning;; 7824/// otherwise, they are a copy of the histogram statistics computed at fill time,; 7825/// which are unbinned by default (calling TH1::ResetStats forces them to use; 7826/// binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; 7827///; 7828/// Note that the mean value/StdDev is computed using the bins in the currently; 7829/// defined range (see TAxis::SetRange). By default the range includes; 7830/// all bins from 1 to nbins included, excluding underflows and overflows.; 7831/// To force the underflows and overflows in the computation, one must; 7832/// call the static function TH1::StatOverflows(kTRUE) before filling; 7833/// the histogram.; 7834 ; 7835void TH1::GetStats(Double_t *stats) const; 7836{; 7837 if (fBuffer) ((TH1*)this)->BufferEmpty();; 7838 ; 7839 // Loop on bins (possibly including underflows/overflows); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:306484,depend,dependent,306484,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['depend'],['dependent']
Integrability,"om a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NTF1Helper;  CTGradientParFunctionFunction class representing the derivative with respect a parameter of a given TF1 ;  ►NTMetaUtils;  ►CAnnotatedRecordDecl;  CCompareByName;  CRConstructorType;  CTClingLookupHelper;  CTNormalizedCtxt;  ►Nv5;  CTF1Data;  CTFormulaThe FORMULA class (ROOT version 5) ;  CTFormulaPrimitiveThe Formula Primitive class ;  CTOperOffset;  CTGenericClassInfo;  CTProcessExecutor;  CTRWSpinLock;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTTreeProcessor;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  ►Ndetail;  Cindices;  Cis_array_class;  Cis_array_class< std::array< T, N > >;  Cis_array_class< std::initializer_list< T > >;  Cis_array_class< std::vector< T > >;  Cmake_indices_;  ►Cmake_indices_impl;  Ctype >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  Cmake_indices_next;  Cmake_indices_next2;  Cmake_indices_next2< indices< Indices.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:65671,interface,interface,65671,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"om the event queue. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1509 of file TVirtualX.cxx. ◆ ExecCommand(). UInt_t TVirtualX::ExecCommand ; (; TGWin32Command * ; code). virtual . Executes the command ""code"" coming from the other threads (Win32) ; Reimplemented in TGCocoa.; Definition at line 371 of file TVirtualX.cxx. ◆ FillPolygon(). void TVirtualX::FillPolygon ; (; Window_t ; id, . GContext_t ; gc, . Point_t * ; points, . Int_t ; npnt . ). virtual . Fills the region closed by the specified path. ; The path is closed automatically if the last point in the list does not coincide with the first point.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 2069 of file TVirtualX.cxx. ◆ FillRectangle(). void TVirtualX::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1897 of file TVirtualX.cxx. ◆ FindRWindow(). Window_t TVirtualX::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:78827,depend,dependent,78827,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['depend'],['dependent']
Integrability,"om tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooListProxy_list; TIterator*_listIter! do not persist; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRecursiveFraction.html:32916,integrat,integrator,32916,root/html532/RooRecursiveFraction.html,https://root.cern,https://root.cern/root/html532/RooRecursiveFraction.html,1,['integrat'],['integrator']
Integrability,"om; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulatedStreamer: the class is missing its shared library. void SetStreamerImpl(); Internal routine to set fStreamerImpl based on the value of; fStreamerType. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:54797,rout,routine,54797,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['rout'],['routine']
Integrability,"omates generating data from a given PDF,; fitting the PDF to that data and accumulating the fit statistics. The constructor accepts the following arguments. model -- The PDF to be studied; observables -- The variables of the PDF to be considered the observables. Silence() -- Suppress all RooFit messages during running below PROGRESS level; FitModel(const RooAbsPdf&) -- The PDF for fitting, if it is different from the PDF for generating; ConditionalObservables; (const RooArgSet& set) -- The set of observables that the PDF should _not_ be normalized over; Binned(Bool_t flag) -- Bin the dataset before fitting it. Speeds up fitting of large data samples; FitOptions(const char*) -- Classic fit options, provided for backward compatibility; FitOptions(....) -- Options to be used for fitting. All named arguments inside FitOptions(); are passed to RooAbsPdf::fitTo();; Verbose(Bool_t flag) -- Activate informational messages in event generation phase; Extended(Bool_t flag) -- Determine number of events for each sample anew from a Poisson distribution; Constrain(const RooArgSet& pars) -- Apply internal constraints on given parameters in fit and sample constrained parameter; values from constraint p.d.f for each toy.; ExternalConstraints(const RooArgSet& ) -- Apply internal constraints on given parameters in fit and sample constrained parameter; values from constraint p.d.f for each toy.; ProtoData(const RooDataSet&,; Bool_t randOrder) -- Prototype data for the event generation. If the randOrder flag is; set, the order of the dataset will be re-randomized for each generation; cycle to protect against systematic biases if the number of generated; events does not exactly match the number of events in the prototype dataset; at the cost of reduced precision; with mu equal to the specified number of events. RooMCStudy(const RooAbsPdf& genModel, const RooAbsPdf& fitModel, const RooArgSet& dependents, const char* genOptions = """", const char* fitOptions = """", const RooDataSet* genProtoDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:13474,message,messages,13474,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,7,['message'],['messages']
Integrability,"omatically converted to the TFormula-native format. If a variable with the name x is given, the RooFormula interprets x[i] as a list position, but x without brackets as the name of a RooFit object.; The last two versions, while slightly less readable, are more versatile because the names of the arguments are not hard coded. ; Definition at line 25 of file RooGenericPdf.h. Public Member Functions;  RooGenericPdf ();  ;  RooGenericPdf (const char *name, const char *title, const char *formula, const RooArgList &dependents);  Constructor with a name, title, formula expression and a list of variables. ;  ;  RooGenericPdf (const char *name, const char *title, const RooArgList &dependents);  Constructor with formula expression and list of input variables. ;  ;  RooGenericPdf (const RooGenericPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooGenericPdf () override;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & dependents () const;  ; void dumpFormula ();  ; const char * expression () const;  ; RooAbsArg * getParameter (const char *name) const;  Return pointer to parameter with given name. ;  ; RooAbsArg * getParameter (Int_t index) const;  Return pointer to parameter at given index. ;  ; TClass * IsA () const override;  ; size_t nParameters () const;  Return the number of parameters. ;  ; void printMetaArgs (std::ostream &os) const override;  Add formula expression as meta argument in printing interface. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from given stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:2492,depend,dependents,2492,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['depend'],['dependents']
Integrability,ombie ();  . Protected Attributes; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; RooSetProxy deps;  dependents of this p.d.f ;  ; RooSetProxy intobs;  observables that p.d.f is integrated over ;  ; RooRealProxy intpdf;  p.d.f that is integrated ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:69218,integrat,integration,69218,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['integrat'],['integration']
Integrability,"ombie. protected:. Double_tTSpline::fDeltaDistance between equidistant knots; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TGraph*TSpline::fGraphGraph for drawing the knots; TH1F*TSpline::fHistogramTemporary histogram; Bool_tTSpline::fKstepTrue of equidistant knots; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Int_tTSpline::fNpNumber of knots; Int_tTSpline::fNpxNumber of points used for graphical representation; TStringTNamed::fTitleobject title; Double_tTSpline::fXmaxMaximum value of abscissa; Double_tTSpline::fXminMinimum value of abscissa. private:. TGraph*fGraphgraph that is splined. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSpline2(const TString& title, TGraph* theGraph); constructor from TGraph; TSpline is a TNamed object. ~TSpline2( void ); destructor. Double_t Eval(Double_t x) const; returns quadratically interpolated TGraph entry around x. void BuildCoeff( void ); no coefficients to precompute. void GetKnot(Int_t i, Double_t& x, Double_t& y) const; no knots. Double_t Quadrax(Float_t dm, Float_t dm1, Float_t dm2, Float_t dm3, Float_t cos1, Float_t cos2, Float_t cos3) const; quadratic interpolation; Revised and checked by Francois Nov, 16th, 2000; Note the beautiful non-spontaneous symmetry breaking ...; It was checked that the old routine gave exactly the same answers. TSpline2(const TString& title, TGraph* theGraph). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TSpline2.html:9934,rout,routine,9934,root/html604/TMVA__TSpline2.html,https://root.cern,https://root.cern/root/html604/TMVA__TSpline2.html,1,['rout'],['routine']
Integrability,"ombie. protected:. Double_tTSpline::fDeltaDistance between equidistant knots; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TGraph*TSpline::fGraphGraph for drawing the knots; TH1F*TSpline::fHistogramTemporary histogram; Bool_tTSpline::fKstepTrue of equidistant knots; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Int_tTSpline::fNpNumber of knots; Int_tTSpline::fNpxNumber of points used for graphical representation; TStringTNamed::fTitleobject title; Double_tTSpline::fXmaxMaximum value of abscissa; Double_tTSpline::fXminMinimum value of abscissa. private:. TGraph*fGraphgraph that is splined. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSpline2(const TString& title, TGraph* theGraph); constructor from TGraph; TSpline is a TNamed object. ~TSpline2( void ); destructor. Double_t Eval(Double_t x) const; returns quadratically interpolated TGraph entry around x. void BuildCoeff( void ); no coefficients to precompute. void GetKnot(Int_t i, Double_t& x, Double_t& y) const; no knots. Double_t Quadrax(Float_t dm, Float_t dm1, Float_t dm2, Float_t dm3, Float_t cos1, Float_t cos2, Float_t cos3) const; quadratic interpolation; Revised and checked by Francois Nov, 16th, 2000; Note the beautiful non-spontaneous symmetry breaking ...; It was checked that the old routine gave exactly the same answers. TSpline2(const TString& title, TGraph* theGraph). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TSpline2.html:9926,rout,routine,9926,root/html602/TMVA__TSpline2.html,https://root.cern,https://root.cern/root/html602/TMVA__TSpline2.html,1,['rout'],['routine']
Integrability,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__math.html:3692,integrat,integration,3692,doc/master/group__tutorial__math.html,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html,1,['integrat'],['integration']
Integrability,"omepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::CombinedCalculator. class RooStats::CombinedCalculator: public RooStats::IntervalCalculator, public RooStats::HypoTestCalculator. CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); RooStats::CombinedCalculatorCombinedCalculator(); R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__CombinedCalculator.html:1000,interface,interface,1000,root/html602/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__CombinedCalculator.html,2,['interface'],['interface']
Integrability,"omepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::CombinedCalculator. class RooStats::CombinedCalculator: public RooStats::IntervalCalculator, public RooStats::HypoTestCalculator. CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__CombinedCalculator.html:1000,interface,interface,1000,root/html530/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__CombinedCalculator.html,3,['interface'],['interface']
Integrability,"omepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMsgService::StreamConfig. class RooMsgService::StreamConfig. The RooMsgService class is a singleton class that organizes informational, debugging, ; warning and errors messages generated by the RooFit core code. ; ; Each message generated by the core; has a message level (DEBUG,INFO,PROGRESS,WARNING,ERROR or FATAL), an originating object,; and a 'topic'. Currently implemented topics are ""Generation"",""Plotting"",; ""Integration"", ""Minimization"" and ""Workspace"" and ""ChangeTracking"".; ; The RooMsgService class allows to filter and redirect messages into 'streams' ; according to message level, topic, (base) class of originating object, name of originating; object and based on attribute labels attached to individual objects. ; ; The current default configuration creates streams for all messages at WARNING level; or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting,; Integration and Minimization and redirects them to stdout. Users can create additional streams ; for logging of e.g. DEBUG messages on particular topics or objects and or redirect streams to; C++ streams or files.; ; The singleton instance is accessible through RooMsgService::instance() ;; . Function Members (Methods); public:. ~StreamConfig(); voidaddTopic(RooFit::MsgTopic newTopic); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj); RooMsgService::StreamConfig&operator=(const RooMsgService::StreamConfig&); RooMsgService::StreamConfig&operator=(RooMsgService::StreamConfig&&); voidremoveTopic(RooFit::MsgTopic oldTopic); RooMsgService::StreamConfigStreamConfig(); RooMsgService::StreamConfigStreamConfig(const RooMsgService::StreamConfig&); RooMs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMsgService__StreamConfig.html:1063,message,messages,1063,root/html602/RooMsgService__StreamConfig.html,https://root.cern,https://root.cern/root/html602/RooMsgService__StreamConfig.html,2,['message'],['messages']
Integrability,"ometry packages, e.g. ROOT’s TGeo package, GEANT4 etc, where we have very large number repeated placements of relatively few unique “shapes”.; Some viewers (GL Viewer only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching (display lists) with considerable performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. In some cases you will not have a real object you can reasonably set TBuffer3D::fID to, or the object is recycled or temporary. To suppress internal caching in the GL Viewer in these cases, set TBuffer3D::fID to 0 (null).; The viewer indicates it can support local frame objects through the TVirtualViewer3D interface method: PreferLocalFrame(). If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of the logical object, with the exception of:. fLocalMaster transform; fColor; fTransparency. attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. If either does not meet this requirement the object may not be displayed.; 9.13.4.8 Scene Rebuilds; TBuffer3D::AddObject is not an explicit command to the viewer - it may for various reasons decide to ignore it:. It already has the object internally cached.; The object falls outside some ‘interest’ limits of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:414689,interface,interface,414689,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['interface'],['interface']
Integrability,"omizing the way how the; # pdf is integrated (see also the rf901_numintconfig tutorial).; enableBinIntegrator(expo, x.numBins()); fit2 = expo.fitTo(expo_data, Save=True, PrintLevel=-1, SumW2Error=False); fit2.Print(); disableBinIntegrator(expo); ; # Power law example; # -----------------; ; # Let's not look at another example: a power law \f[x^a\f].; a = ROOT.RooRealVar(""a"", ""a"", -0.3, -5.0, 5.0); powerlaw = ROOT.RooPowerSum(""powerlaw"", ""powerlaw"", x, ROOT.RooFit.RooConst(1.0), a); powerlaw_data = generateBinnedAsimov(powerlaw, x, 10000); ; # Again, if you do a vanilla fit, you'll get a bias; fit3 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit3.Print(); ; # This time, the bias is not the same factor in each bin! This means our; # trick by sampling the integral in the same way doesn't cancel out the; # bias completely. The average bias is canceled, but there are per-bin; # biases that remain. Still, this method has some value: it is cheaper than; # rigurously correcting the bias by integrating the pdf in each bin. So if; # you know your per-bin bias variations are small or performance is an; # issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins()); fit4 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit4.Print(); disableBinIntegrator(powerlaw); ; # To get rid of the binning effects in the general case, one can use the; # IntegrateBins() command argument. Now, the pdf is not evaluated at the; # bin centers, but numerically integrated over each bin and divided by the; # bin width. The parameter for IntegrateBins() is the required precision; # for the numeric integrals. This is computationally expensive, but the; # bias is now not a problem anymore.; fit5 = powerlaw.fitTo(powerlaw_data, IntegrateBins=1e-3, Save=True, PrintLevel=-1, SumW2Error=False); fit5.Print(); ; # Improving numerical stability; # -----------------------------; ; # There is one more problem with binned fits t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html:4635,integrat,integrating,4635,doc/master/rf614__binned__fit__problems_8py.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html,1,['integrat'],['integrating']
Integrability,"ommand line arguments; TList*fTrashlist of objects to be deleted before refilling menu. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGPopupMenu. TContextMenuImp. ←; TRootContextMenu. Function documentation; TRootContextMenu(TContextMenu* c = 0, const char* name = ""ROOT Context Menu""); Create context menu. ~TRootContextMenu(); Delete a context menu. void DisplayPopup(Int_t x, Int_t y); Display context popup menu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""method"". void Dialog(TObject* object, TFunction* function); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""function"".; function may be a global function or a method. void DrawEntry(TGMenuEntry* entry); Draw context menu entry. Bool_t HandleButton(Event_t* event); Handle button event in the context menu. Bool_t HandleCrossing(Event_t* event); Handle pointer crossing event in context menu. Bool_t HandleMotion(Event_t* event); Handle pointer motion event in context menu. void OnlineHelp(); Open the online help matching the actual class/method. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle context menu messages. void RecursiveRemove(TObject* obj); Close the context menu if the object is deleted in the; RecursiveRemove() operation. TRootCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootContextMenu.html:24114,depend,depending,24114,root/html602/TRootContextMenu.html,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html,1,['depend'],['depending']
Integrability,"ommand to execute while application is idle; TTimer*fIdleTimerIdle timer; Bool_tfIsRunningTrue when in event loop (Run() has been called); Bool_tfNoLogDo not process logon and logoff macros; Bool_tfNoLogoDo not show splash screen and welcome message; Bool_tfQuitExit after having processed input files; Bool_tfReturnFromRunWhen true return from Run(); TSignalHandler*fSigHandlerInterrupt handler; Bool_tfUseMemstatRun with TMemStat enabled; TStringfWorkDirWorking directory specified via argv; static Bool_tfgGraphInitTrue if graphics libs initialized; static Bool_tfgGraphNeededTrue if graphics libs need to be initialized. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TApplication(); Default ctor. Can be used by classes deriving from TApplication. TApplication(const char* appClassName, Int_t* argc, char** argv, void* options = 0, Int_t numOptions = 0); Create an application environment. The application environment; provides an interface to the graphics system and eventloop; (be it X, Windoze, MacOS or BeOS). After creating the application; object start the eventloop by calling its Run() method. The command; line options recogized by TApplication are described in the GetOptions(); method. The recognized options are removed from the argument array.; The original list of argument options can be retrieved via the Argc(); and Argv() methods. The appClassName ""proofserv"" is reserved for the; PROOF system. The ""options"" and ""numOptions"" arguments are not used,; except if you want to by-pass the argv processing by GetOptions(); in which case you should specify numOptions<0. All options will; still be available via the Argv() method for later use. ~TApplication(); TApplication dtor. void NeedGraphicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list cont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplication.html:12665,interface,interface,12665,root/html528/TApplication.html,https://root.cern,https://root.cern/root/html528/TApplication.html,6,['interface'],['interface']
Integrability,"ommon base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:3669,interface,interface,3669,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['interface'],['interface']
Integrability,"ompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intOrderInterpolation order; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Double_t_totVolume! Total volume of space (product of ranges of observables); Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_unitNorm! Assume contents is unit normalized (for use as pdf cache); Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooHistFunc.html:32958,integrat,integrator,32958,root/html530/RooHistFunc.html,https://root.cern,https://root.cern/root/html530/RooHistFunc.html,1,['integrat'],['integrator']
Integrability,"omparison of weighted and unweighted histograms. Statistical Problems in Particle Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05, Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44. Gagunashvili,N., Comparison of weighted and unweighted histograms, arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics. Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables. Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis. John Wiley & Sons Inc., New York. . Definition at line 2008 of file TH1.cxx. ◆ Chi2TestX(). Double_t TH1::Chi2TestX ; (; const TH1 * ; h2, . Double_t & ; chi2, . Int_t & ; ndf, . Int_t & ; igood, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . The computation routine of the Chisquare test. ; For the method description, see Chi2Test() function.; Returnsp-value ; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = if one or both histograms is scaled; ""OF"" = overflows included; ""UF"" = underflows included by default underflows and overflows are not included . [out]igoodtest output; igood=0 - no problems; For unweighted unweighted comparison; igood=1'There is a bin in the 1st histogram with less than 1 event'; igood=2'There is a bin in the 2nd histogram with less than 1 event'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:99178,rout,routine,99178,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['rout'],['routine']
Integrability,"omparisonDefinition SVector.icc:311; ROOT::Math::SVector::operator[]const T & operator[](unsigned int i) constread-only access of vector elements. Index starts from 0.Definition SVector.icc:582; ROOT::Math::SVector::operator+=SVector< T, D > & operator+=(const T &rhs)self addition with a scalarDefinition SVector.icc:371; ROOT::Math::SVector::operator==bool operator==(const T &rhs) constelement wise comparisonDefinition SVector.icc:230; ROOT::Math::SVector::operator/=SVector< T, D > & operator/=(const T &rhs)self division with a scalarDefinition SVector.icc:465; ROOT::Math::SVector::fArrayT fArray[D]SVector data.Definition SVector.h:333; ROOT::Math::SVector::Printstd::ostream & Print(std::ostream &os) constused by operator<<()Definition SVector.icc:521; ROOT::Math::SVector::enditerator end()STL iterator interface.Definition SVector.icc:556; ROOT::Math::SVector::SetElementsvoid SetElements(InputIterator begin, InputIterator end)set vector elements copying the values iterator size must match vector sizeDefinition SVector.icc:563; ROOT::Math::VecExprExpression wrapper class for Vector objects.Definition Expression.h:64; ROOT::Math::VecExpr::applyT apply(unsigned int i) constDefinition Expression.h:77; ROOT::Math::VecExpr::IsInUsebool IsInUse(const T *p) constfunction to determine if any use operand is being used (has same memory address)Definition Expression.h:104; ROOT::Math::MagT Mag(const SVector< T, D > &rhs)Vector magnitude (Euclidean norm) Compute : .Definition Functions.h:253; MathNamespace for new Math classes and functions.; ROOT::Internal::operator==bool operator==(const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs)Definition RConcurrentHashColl.hxx:69; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathsmatrixincMathSVector.icc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SVector_8icc_source.html:25813,wrap,wrapper,25813,doc/master/SVector_8icc_source.html,https://root.cern,https://root.cern/doc/master/SVector_8icc_source.html,1,['wrap'],['wrapper']
Integrability,"ompletely different way by gl-painters. char * GetObjectInfo(Int_t px, Int_t py) const; Overrides TObject::GetObjectInfo.; For lego info is: bin numbers (i, j), bin content.; For TF2 info is: x,y,z 3d surface-point for 2d screen-point under cursor; (this can work incorrectly now, because of wrong code in TF2).; For TF3 no info now.; For box info is: bin numbers (i, j, k), bin content. TList * GetStack() const; Get stack. Bool_t IsInside(Int_t x, Int_t y); Returns kTRUE if the cell ix, iy is inside one of the graphical cuts.; I do not use this function anywhere, this is a ""default implementation"". Bool_t IsInside(Double_t x, Double_t y); Returns kTRUE if the cell x, y is inside one of the graphical cuts.; I do not use this function anywhere, this is a ""default implementation"". void PaintStat(Int_t dostat, TF1* fit); Paint statistics.; This does not work on windows. void ProcessMessage(const char* message, const TObject* obj); Process message. void SetHistogram(TH1* hist); Set histogram. void SetStack(TList* stack); Set stack. Int_t MakeCuts(char* cutsOpt); Make cuts. void Paint(Option_t* option); Final-overrider for TObject::Paint. ParsePaintOption(const TString& option) const; In principle, we can have several conflicting options: ""lego surf pol sph"",; but only one will be selected, which one - depends on parsing order in this function. void CreatePainter(const TGLHistPainter::PlotOption_t& parsed, const TString& option); Create painter. void SetShowProjection(const char* option, Int_t nbins); Set show projection. void PadToViewport(Bool_t selectionPass = kFALSE). TGLHistPainter(TH1* hist). TGLPlotPainter * GetRealPainter(); {return fGLPainter.get();}. » Author: Timur Pocheptsov 17/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2010-11-12 15:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLHistPainter.html:13942,depend,depends,13942,root/html528/TGLHistPainter.html,https://root.cern,https://root.cern/root/html528/TGLHistPainter.html,1,['depend'],['depends']
Integrability,"ompletely different way by gl-painters. char * GetObjectInfo(Int_t px, Int_t py) const; Overrides TObject::GetObjectInfo.; For lego info is: bin numbers (i, j), bin content.; For TF2 info is: x,y,z 3d surface-point for 2d screen-point under cursor; (this can work incorrectly now, because of wrong code in TF2).; For TF3 no info now.; For box info is: bin numbers (i, j, k), bin content. TList * GetStack() const; Get stack. Bool_t IsInside(Int_t x, Int_t y); Returns kTRUE if the cell ix, iy is inside one of the graphical cuts.; I do not use this function anywhere, this is a ""default implementation"". Bool_t IsInside(Double_t x, Double_t y); Returns kTRUE if the cell x, y is inside one of the graphical cuts.; I do not use this function anywhere, this is a ""default implementation"". void PaintStat(Int_t dostat, TF1* fit); Paint statistics.; This does not work on windows. void ProcessMessage(const char* message, const TObject* obj); Process message. void SetHistogram(TH1* hist); Set histogram. void SetStack(TList* stack); Set stack. Int_t MakeCuts(char* cutsOpt); Make cuts. void Paint(Option_t* option); Final-overrider for TObject::Paint. ParsePaintOption(const TString& option) const; In principle, we can have several conflicting options: ""lego surf pol sph"",; but only one will be selected, which one - depends on parsing order in this function. void CreatePainter(const TGLHistPainter::PlotOption_t& parsed, const TString& option); Create painter. void SetShowProjection(const char* option, Int_t nbins); Set show projection. void PadToViewport(Bool_t selectionPass = kFALSE). TGLHistPainter(TH1* hist). TGLPlotPainter * GetRealPainter(); {return fGLPainter.get();}. » Author: Timur Pocheptsov 17/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLHistPainter.html:14180,depend,depends,14180,root/html530/TGLHistPainter.html,https://root.cern,https://root.cern/root/html530/TGLHistPainter.html,1,['depend'],['depends']
Integrability,"omponentSelection(). void RooRealIntegral::setAllowComponentSelection ; (; bool ; allow). Set component selection to be allowed/forbidden. ; Definition at line 1031 of file RooRealIntegral.cxx. ◆ setCacheAllNumeric(). void RooRealIntegral::setCacheAllNumeric ; (; Int_t ; ndim). static . Global switch to cache all integral values that integrate at least ndim dimensions numerically. ; Definition at line 1165 of file RooRealIntegral.cxx. ◆ setCacheNumeric(). void RooRealIntegral::setCacheNumeric ; (; bool ; flag). inline . Definition at line 55 of file RooRealIntegral.h. ◆ Streamer(). void RooRealIntegral::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRealIntegral::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 150 of file RooRealIntegral.h. ◆ sum(). double RooRealIntegral::sum ; (; ); const. protectedvirtual . Perform summation of list of category dependents to be integrated. ; Definition at line 939 of file RooRealIntegral.cxx. ◆ translate(). void RooRealIntegral::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 1035 of file RooRealIntegral.cxx. Member Data Documentation. ◆ _anaList. RooSetProxy RooRealIntegral::_anaList. protected . Set of observables over which is i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:74533,depend,dependents,74533,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,2,"['depend', 'integrat']","['dependents', 'integrated']"
Integrability,"on ();  ; static const char * DeclFileName ();  ; static RooMsgService & instance ();  Return reference to singleton instance. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< int, std::string > _levelNames;  ; std::map< int, std::string > _topicNames;  . Static Public Attributes; static Int_t _debugCount = 0;  . Protected Member Functions;  RooMsgService ();  Constructor. ;  ;  RooMsgService (const RooMsgService &);  ; template<class T > ; Int_t activeStream (T self, RooFit::MsgTopic topic, RooFit::MsgLevel level);  Find appropriate logging stream for message from given object with given topic and message level. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t _debugCode;  ; std::unique_ptr< RooWorkspace > _debugWorkspace;  ; std::unique_ptr< std::ofstream > _devnull;  ; Int_t _errorCount;  ; std::map< std::string, std::unique_ptr< std::ostream > > _files;  ; RooFit::MsgLevel _globMinLevel;  ; RooFit::MsgLevel _lastMsgLevel;  ; bool _showPid;  ; bool _silentMode;  ; std::vector< StreamConfig > _streams;  ; std::stack< std::vector< StreamConfig > > _streamsSaved;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:13381,message,message,13381,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,2,['message'],['message']
Integrability,"on (Event_t *event) override;  Handle mouse motion event in text edit widget. ;  ; Bool_t HandleSelection (Event_t *event) override;  Handle selection notify event. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle timer cursor blink timer. ;  ; virtual void Home ();  Move to beginning of line. ;  ; virtual void InsChar (char character);  Insert a character in the text edit widget. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsCursorEnabledithoutFocus () const;  ; virtual Bool_t IsMenuEnabled () const;  ; virtual void LineDown ();  Move one line down. ;  ; virtual void LineUp ();  Make current position first line in window by scrolling up. ;  ; virtual void NextChar ();  Go to next character. ;  ; virtual void Opened ();  ; virtual Bool_t Paste ();  Paste text into widget. ;  ; virtual void PrevChar ();  Go to the previous character. ;  ; void Print (Option_t *="""") const override;  Send current buffer to printer. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process context menu messages. ;  ; virtual Bool_t Replace (TGLongPosition pos, const char *oldText, const char *newText, Bool_t direction, Bool_t caseSensitive);  Replace text starting at textPos. ;  ; Long_t ReturnLongestLineWidth () override;  Return width of longest line in widget. ;  ; virtual void Saved ();  ; virtual void SavedAs ();  ; virtual Bool_t SaveFile (const char *fname, Bool_t saveas=kFALSE);  Save file. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a text edit widget as a C++ statement(s) on output stream out. ;  ; virtual void ScreenDown ();  Move one screen down. ;  ; virtual void ScreenUp ();  Move one screen up. ;  ; void ScrollCanvas (Int_t newTop, Int_t direction) override;  Scroll the canvas to new_top in the kVertical or kHorizontal direction. ;  ; virtual void Search (Bool_t close);  Invokes search dialog. ;  ; Bool_t Search (const char *string, Bool_t direction=kTRUE, Bool_t caseSensitive=kFALSE) over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:5427,message,messages,5427,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['message'],['messages']
Integrability,"on ; Definition at line 45 of file RooBinningCategory.h. ◆ evaluate(). RooAbsCategory::value_type RooBinningCategory::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return the value of the mapping function. ; Implements RooAbsCategory.; Definition at line 77 of file RooBinningCategory.cxx. ◆ initialize(). void RooBinningCategory::initialize ; (; const char * ; catTypeName = nullptr). protected . Iterator over all bins in input variable and define corresponding state labels. ; Definition at line 60 of file RooBinningCategory.cxx. ◆ IsA(). TClass * RooBinningCategory::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsCategory.; Definition at line 45 of file RooBinningCategory.h. ◆ printMultiline(). void RooBinningCategory::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Printing interface (human readable) ; Print info about this threshold category to the specified stream.; In addition to the info from RooAbsCategory::printStream() we add:; Standard : input category Shape : default value Verbose : list of thresholds ; Reimplemented from RooAbsCategory.; Definition at line 101 of file RooBinningCategory.cxx. ◆ recomputeShape(). void RooBinningCategory::recomputeShape ; (; ). inlineoverrideprotectedvirtual . The shape of this category does not need to be recomputed, as it creates states on the fly. ; Implements RooAbsCategory.; Definition at line 43 of file RooBinningCategory.h. ◆ Streamer(). void RooBinningCategory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategory. ◆ StreamerNVirtual(). void RooBinningCategory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file RooBinningCategory.h. Member Data Documentation. ◆ _bname. TString RooBinningCategory::_bname. protected . Name of the bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinningCategory.html:47260,interface,interface,47260,doc/master/classRooBinningCategory.html,https://root.cern,https://root.cern/doc/master/classRooBinningCategory.html,1,['interface'],['interface']
Integrability,"on = 0, Int_t bufsize = 0) const. protected:. voidChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EReplayModes { kRealtime; };; enum ERecorderState { kInactive; kRecording; kPaused; kReplaying; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPrev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorder.html:8442,depend,depending,8442,root/html528/TRecorder.html,https://root.cern,https://root.cern/root/html528/TRecorder.html,3,['depend'],['depending']
Integrability,"on Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:50800,wrap,wrapper,50800,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,"['integrat', 'wrap']","['integration', 'wrapper']"
Integrability,"on CodeSquashContext.h:42; RooFit::EvalContextDefinition EvalContext.h:84; RooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor.Definition RooFunctor.h:25; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooNumIntConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumIntConfig.h:25; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present i...Definition RooRealBinding.h:30; RooRealSumFuncDefinition RooRealSumFunc.h:26; RooRealSumPdfImplements a PDF constructed from a sum of functions:Definition RooRealSumPdf.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooStringViewThe RooStringView is a wrapper around a C-style string that can also be constructed from a std::strin...Definition RooStringView.h:27; RooVectorDataStoreUses std::vector to store data columns.Definition RooVectorDataStore.h:41; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH3F3-D histogram with a float per channel (see TH1 documentation)Definition TH3.h:317; TListA doubly linked list.Definition TList.h:38; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; double; int; xDouble_t x[n]Definition legend1.C:17; RooBatchComputeNamespace for dispatching RooFit computations to various backends.Definition RooBatchCompute.h:37; RooFit::MPSplitMPSplitDefinit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:57162,wrap,wrapper,57162,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['wrap'],['wrapper']
Integrability,"on RLoopManager.hxx:218; ROOT::Detail::RDF::RLoopManager::GetNSlotsunsigned int GetNSlots() constDefinition RLoopManager.hxx:230; ROOT::Detail::RDF::RLoopManager::GetLoopManagerUncheckedRLoopManager * GetLoopManagerUnchecked() finalDefinition RLoopManager.hxx:212; ROOT::Detail::RDF::RLoopManager::HasDataSourceColumnReadersbool HasDataSourceColumnReaders(const std::string &col, const std::type_info &ti) constReturn true if AddDataSourceColumnReaders was called for column name col.Definition RLoopManager.cxx:1103; ROOT::RDF::RDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats.Definition RDataSource.hxx:109; ROOT::RDF::RDataSource::HasColumnvirtual bool HasColumn(std::string_view colName) const =0Checks if the dataset has a certain column.; ROOT::RDF::RDataSource::GetColumnReadersstd::vector< T ** > GetColumnReaders(std::string_view columnName)Called at most once per column by RDF.Definition RDataSource.hxx:154; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; R; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; double; int; ROOT::VecOps::SumT Sum(const RVec< T > &v, const T zero=T(0))Sum elements of an RVec.Definition RVec.hxx:1954; F#define F(x, y, z); ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80; ROOT::Internal::RDF::SelectColumnsconst ColumnNames_t SelectColumns(unsigned int nRequiredNames, const ColumnNames_t &names, const ColumnNames_t &defaultNames)Choose between local column names or default column names, throw in case of errors.Definition RDFInterfaceUtils.cxx:586; ROOT::Internal::RDF::CheckForNoVariationsvoid CheckForNoVariations(const std::string &where, std::string_view definedColView, const RColumnRegister",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:38979,interface,interface,38979,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,1,['interface'],['interface']
Integrability,"on RooArgList.h:22; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf304_uncorrprodDefinition rf304_uncorrprod.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#0] WARNING:InputArguments -- The parameter 'sigmax' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigmay' with range [-inf, inf] of the RooGaussian 'gaussy' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsReal::plotOn(gaussxy) plot on x integrates over variables (y); [#1] INFO:Plotting -- RooAbsReal::plotOn(gaussxy) plot on y integrates over variables (x); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf304_uncorrprod.C. tutorialsroofitrf304_uncorrprod.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf304__uncorrprod_8C.html:4616,integrat,integrates,4616,doc/master/rf304__uncorrprod_8C.html,https://root.cern,https://root.cern/doc/master/rf304__uncorrprod_8C.html,2,['integrat'],['integrates']
Integrability,"on StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:47063,wrap,wrapper,47063,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,1,['wrap'],['wrapper']
Integrability,"on TClass.h:334; TClass::kInstrumented@ kInstrumentedDefinition TClass.h:334; TClass::kTObject@ kTObjectDefinition TClass.h:334; TClass::AddRulestatic Bool_t AddRule(const char *rule)Add a schema evolution customization rule.Definition TClass.cxx:1890; TClass::IsTObjectBool_t IsTObject() constReturn kTRUE is the class inherits from TObject.Definition TClass.cxx:5938; TClass::GetContextMenuTitleconst char * GetContextMenuTitle() constDefinition TClass.h:438; TClass::RemoveClassstatic void RemoveClass(TClass *cl)static: Remove a class from the list and map of classesDefinition TClass.cxx:520; TClass::HasLocalHashMemberBool_t HasLocalHashMember() constReturns true if this class has an definition and/or overload of the member function Hash.Definition TClass.cxx:7421; TClass::DeleteArrayvoid DeleteArray(void *ary, Bool_t dtorOnly=kFALSE)Explicitly call operator delete[] for an array.Definition TClass.cxx:5529; TClass::GetConvStreamerFuncClassConvStreamerFunc_t GetConvStreamerFunc() constGet a wrapper/accessor function around this class custom conversion streamer (member function).Definition TClass.cxx:2947; TClass::IsForeignBool_t IsForeign() constReturn kTRUE is the class is Foreign (the class does not have a Streamer method).Definition TClass.cxx:5947; TClass::GetClassInfoClassInfo_t * GetClassInfo() constDefinition TClass.h:433; TClass::fDeleteROOT::DelFunc_t fDeleteDefinition TClass.h:237; TClass::fAllPubDataTViewPubDataMembers * fAllPubDataDefinition TClass.h:209; TClass::fClassInfoClassInfo_t * fClassInfoDefinition TClass.h:222; TClass::GetStreamerInfoTVirtualStreamerInfo * GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constreturns a pointer to the TVirtualStreamerInfo object for version If the object does not exist,...Definition TClass.cxx:4599; TClass::HasConsistentHashMemberBool_t HasConsistentHashMember()Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarch...Definition TClass.h:501; TClass::AdoptStre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:66063,wrap,wrapper,66063,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"on TClass.h:334; TClass::kInstrumented@ kInstrumentedDefinition TClass.h:334; TClass::kTObject@ kTObjectDefinition TClass.h:334; TClass::AddRulestatic Bool_t AddRule(const char *rule)Add a schema evolution customization rule.Definition TClass.cxx:1957; TClass::IsTObjectBool_t IsTObject() constReturn kTRUE is the class inherits from TObject.Definition TClass.cxx:6005; TClass::GetContextMenuTitleconst char * GetContextMenuTitle() constDefinition TClass.h:438; TClass::RemoveClassstatic void RemoveClass(TClass *cl)static: Remove a class from the list and map of classesDefinition TClass.cxx:585; TClass::HasLocalHashMemberBool_t HasLocalHashMember() constReturns true if this class has an definition and/or overload of the member function Hash.Definition TClass.cxx:7488; TClass::DeleteArrayvoid DeleteArray(void *ary, Bool_t dtorOnly=kFALSE)Explicitly call operator delete[] for an array.Definition TClass.cxx:5596; TClass::GetConvStreamerFuncClassConvStreamerFunc_t GetConvStreamerFunc() constGet a wrapper/accessor function around this class custom conversion streamer (member function).Definition TClass.cxx:3014; TClass::IsForeignBool_t IsForeign() constReturn kTRUE is the class is Foreign (the class does not have a Streamer method).Definition TClass.cxx:6014; TClass::GetClassInfoClassInfo_t * GetClassInfo() constDefinition TClass.h:433; TClass::fDeleteROOT::DelFunc_t fDeleteDefinition TClass.h:237; TClass::fAllPubDataTViewPubDataMembers * fAllPubDataDefinition TClass.h:209; TClass::fClassInfoClassInfo_t * fClassInfoDefinition TClass.h:222; TClass::GetStreamerInfoTVirtualStreamerInfo * GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constreturns a pointer to the TVirtualStreamerInfo object for version If the object does not exist,...Definition TClass.cxx:4666; TClass::HasConsistentHashMemberBool_t HasConsistentHashMember()Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarch...Definition TClass.h:501; TClass::AdoptStre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:65891,wrap,wrapper,65891,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"on TCollection.h:254; TListIterIterator of linked list.Definition TList.h:193; TListIter::NextTObject * Next() overrideReturn next object in the list. Returns 0 when no more objects in list.Definition TList.cxx:1109; TListA doubly linked list.Definition TList.h:38; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::SysErrorvirtual void SysError(const char *method, const char *msgfmt,...) constIssue system error message.Definition TObject.cxx:1007; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TOrdCollectionIterIterator of ordered collection.Definition TOrdCollection.h:96; TOrdCollectionIter::NextTObject * Next() overrideReturn next object in collection.Definition TOrdCollection.cxx:502; TOrdCollectionOrdered collection.Definition TOrdCollection.h:32; TPRegexpDefinition TPRegexp.h:36; TPRegexp::SubstituteInt_t Substitute(TString &s, const TString &replace, const TString &mods="""", Int_t start=0, Int_t nMatchMax=10)Substitute replaces the string s by a new string in which matching patterns are replaced by the repla...Definition TPRegexp.cxx:561; TROOT::ShutDownstatic void ShutDown()Shut down ROOT.Definition TROOT.cxx:3140; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TROOT::GetLibDirstatic const TString & GetLibDir()Get the library directory in the installation. Static utility function.Definition TROOT.cxx:3014; TRegexpRegular expres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:189834,message,message,189834,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['message'],['message']
Integrability,"on TGWin32VirtualXProxy.cxx:60; SetTextFontOption_t Option_t SetTextFontDefinition TGWin32VirtualXProxy.cxx:60; textsizeOption_t Option_t textsizeDefinition TGWin32VirtualXProxy.cxx:58; angleOption_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; fontnameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char fontnameDefinition TGWin32VirtualXProxy.cxx:228; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; TGWin32This class is the basic interface to the Win32 graphics system.Definition TGWin32.h:64; TGX11TTFInterface to low level X11 (Xlib).Definition TGX11TTF.h:27; TMathTextRendererDefinition TMathText.cxx:55; TTF::TTGlyphTTF helper class containing glyphs description.Definition TTF.h:65; TTF::TTGlyph::fPosFT_Vector fPosposition of glyph originDefinition TTF.h:68; TTF::TTGlyph::fImageFT_Glyph fImageglyph imageDefinition TTF.h:69; TTF::TTGlyph::fIndexUInt_t fIndexglyph index in faceDefinition TTF.h:67; TTFInterface to the freetype 2 library.Definition TTF.h:53; TTF::SetKerningstatic void SetKerning(Bool_t state)Set kerning flag.Definition TTF.cxx:340; TTF::fgHintingstatic Bool_t fgHintinguse hinting (true by default)Definition TTF.h:84; TTF::kMaxGlyphs@ kMaxGlyphsDefinition TTF.h:73; TTF::kTTMaxFonts@ kTTMaxFontsDefinition TTF.h:73; TTF::IsInitializedstatic Bool_t IsInitialized()Definition TTF.cxx:615; TTF::GetTextAdvancestatic void GetTextAdvance(UInt_t &a, char *text)Get advance (a) when text is horizontal.Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTF_8h_source.html:6356,interface,interface,6356,doc/master/TTF_8h_source.html,https://root.cern,https://root.cern/doc/master/TTF_8h_source.html,1,['interface'],['interface']
Integrability,"on TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::IntegralError ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . const Double_t * ; params = nullptr, . const Double_t * ; covmat = nullptr, . Double_t ; epsilon = 1.E-2 . ). virtual . Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertaint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:95075,rout,routine,95075,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['rout'],['routine']
Integrability,"on TMethodCall.h:64; TMethodCall::IsValidBool_t IsValid() constReturn true if the method call has been properly initialized and is usable.Definition TMethodCall.cxx:376; TMethodCall::InitWithPrototypevoid InitWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch)Initialize the method invocation environment.Definition TMethodCall.cxx:342; TMethodCall::SetParamvoid SetParam(Long_t l)Add a long method parameter.Definition TMethodCall.cxx:606; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::IsEqualvirtual Bool_t IsEqual(const TObject *obj) constDefault equal comparison (objects are equal if they have the same address in memory).Definition TObject.cxx:570; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TSeqCollection::LastIndexInt_t LastIndex() constDefinition TSeqCollection.h:55; TSeqCollection::IndexOfvirtual Int_t IndexOf(const TObject *obj) constReturn index of object in collection.Definition TSeqCollection.cxx:30; TSeqCollection::Classstatic TClass * Class(); TSeqCollection::IsATClass * IsA() const overrideDefinition TSeqCollection.h:67; TSeqCollection::Lastvirtual TObject * Last() const =0; TSeqCollection::QSortstatic void QSort(TObject **a, Int_t first, Int_t last)Sort array of TObject pointers us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeqCollection_8cxx_source.html:12462,message,message,12462,doc/master/TSeqCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSeqCollection_8cxx_source.html,1,['message'],['message']
Integrability,"on TObject.cxx:757; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::CapacitySsiz_t Capacity() constDefinition TString.h:364; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string usi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:160941,message,message,160941,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['message'],['message']
Integrability,"on TPad.cxx:3118; TPad::VtoPixelInt_t VtoPixel(Double_t v) const overrideConvert Y NDC to pixel.Definition TPad.cxx:7446; TPad::PaintBordervoid PaintBorder(Color_t color, Bool_t tops)Paint the pad border.Definition TPad.cxx:3644; TPad::GetPhiDouble_t GetPhi() const overrideDefinition TPad.h:225; TPad::IsEditableBool_t IsEditable() const overrideDefinition TPad.h:272; TPad::FillCollideGridvoid FillCollideGrid(TObject *o)Initialise the grid used to find empty space when adding a box (Legend) in a pad.Definition TPad.cxx:3134; TPad::SetViewvoid SetView(TView *view=nullptr) overrideSet the current TView. Delete previous view if view=0.Definition TPad.cxx:6195; TPad::GetViewer3DTVirtualViewer3D * GetViewer3D(Option_t *type="""") overrideCreate/obtain handle to 3D viewer.Definition TPad.cxx:7151; TPad::fPixeltoYkDouble_t fPixeltoYkConversion coefficient for pixel to Y World.Definition TPad.h:59; TPad::PaintHatchesvoid PaintHatches(Double_t dy, Double_t angle, Int_t nn, Double_t *xx, Double_t *yy)This routine draw hatches inclined with the angle ""angle"" and spaced of ""dy"" in normalized device coo...Definition TPad.cxx:4161; TPad::PaintLine3Dvoid PaintLine3D(Float_t *p1, Float_t *p2) overridePaint 3-D line in the CurrentPad.Definition TPad.cxx:4356; TPad::fgMaxPickDistancestatic Int_t fgMaxPickDistanceMaximum Pick Distance.Definition TPad.h:115; TPad::ResizePadvoid ResizePad(Option_t *option="""") overrideCompute pad conversion coefficients.Definition TPad.cxx:5624; TPad::PaintPolyMarkervoid PaintPolyMarker(Int_t n, Float_t *x, Float_t *y, Option_t *option="""") overridePaint polymarker in CurrentPad World coordinates.Definition TPad.cxx:4525; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TPad::fPhiDouble_t fPhiphi angle to view as lego/surfaceDefinition TPad.h:80; TPad::GetAspectRatioDouble_t GetAspectRatio() const overrideDefinition TPad.h:224; TPad::DestroyExternalViewer3Dvoid DestroyExternalViewer3D(); TPad::fPixeltoYDouble_t fPixelt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:32792,rout,routine,32792,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['rout'],['routine']
Integrability,"on TPad.cxx:3118; TPad::VtoPixelInt_t VtoPixel(Double_t v) const overrideConvert Y NDC to pixel.Definition TPad.cxx:7446; TPad::PaintBordervoid PaintBorder(Color_t color, Bool_t tops)Paint the pad border.Definition TPad.cxx:3644; TPad::GetPhiDouble_t GetPhi() const overrideDefinition TPad.h:225; TPad::IsEditableBool_t IsEditable() const overrideDefinition TPad.h:272; TPad::FillCollideGridvoid FillCollideGrid(TObject *o)Initialise the grid used to find empty space when adding a box (Legend) in a pad.Definition TPad.cxx:3134; TPad::SetViewvoid SetView(TView *view=nullptr) overrideSet the current TView. Delete previous view if view=0.Definition TPad.cxx:6195; TPad::GetViewer3DTVirtualViewer3D * GetViewer3D(Option_t *type="""") overrideCreate/obtain handle to 3D viewer.Definition TPad.cxx:7151; TPad::fPixeltoYkDouble_t fPixeltoYkConversion coefficient for pixel to Y World.Definition TPad.h:59; TPad::PaintHatchesvoid PaintHatches(Double_t dy, Double_t angle, Int_t nn, Double_t *xx, Double_t *yy)This routine draw hatches inclined with the angle ""angle"" and spaced of ""dy"" in normalized device coo...Definition TPad.cxx:4161; TPad::PaintLine3Dvoid PaintLine3D(Float_t *p1, Float_t *p2) overridePaint 3-D line in the CurrentPad.Definition TPad.cxx:4356; TPad::fgMaxPickDistancestatic Int_t fgMaxPickDistanceMaximum Pick Distance.Definition TPad.h:115; TPad::ResizePadvoid ResizePad(Option_t *option="""") overrideCompute pad conversion coefficients.Definition TPad.cxx:5624; TPad::PaintPolyMarkervoid PaintPolyMarker(Int_t n, Float_t *x, Float_t *y, Option_t *option="""") overridePaint polymarker in CurrentPad World coordinates.Definition TPad.cxx:4525; TPad::fPhiDouble_t fPhiphi angle to view as lego/surfaceDefinition TPad.h:80; TPad::fPixeltoYDouble_t fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixelDefinition TPad.h:60; TPad::RecordLatexvirtual void RecordLatex(const TObject *obj)Emit RecordLatex() signal.Definition TPad.cxx:7254; TPad::fAbsXlowNDCDouble_t fAbsXlowNDCAbsolute X top left c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:290652,rout,routine,290652,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['rout'],['routine']
Integrability,"on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark this object as having changed its shape, and propagate this status; change to all of our clients. Bool_t redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsArg.html:23783,depend,dependents,23783,root/html528/RooAbsArg.html,https://root.cern,https://root.cern/root/html528/RooAbsArg.html,6,['depend'],['dependents']
Integrability,"on and runtime errors properly.; 5232 ; 5233void TCling::Execute(const char* function, const char* params, int* error); 5234{; 5235 R__LOCKGUARD_CLING(gInterpreterMutex);; 5236 if (error) {; 5237 *error = TInterpreter::kNoError;; 5238 }; 5239 TClingClassInfo cl(GetInterpreterImpl());; 5240 Longptr_t offset = 0L;; 5241 TClingCallFunc func(GetInterpreterImpl());; 5242 func.SetFunc(&cl, function, params, &offset);; 5243 func.Exec(nullptr);; 5244}; 5245 ; 5246////////////////////////////////////////////////////////////////////////////////; 5247/// Execute a method from class cl with arguments params.; 5248///; 5249/// FIXME: The cint-based version of this code does not check if the; 5250/// SetFunc() call works, and does not do any real checking; 5251/// for errors from the Exec() call. It did fetch the most; 5252/// recent cint security error and return that in error, but; 5253/// this does not really translate well to cling/clang. We; 5254/// should enhance these interfaces so that we can report; 5255/// compilation and runtime errors properly.; 5256 ; 5257void TCling::Execute(TObject* obj, TClass* cl, const char* method,; 5258 const char* params, Bool_t objectIsConst, int* error); 5259{; 5260 R__LOCKGUARD_CLING(gInterpreterMutex);; 5261 if (error) {; 5262 *error = TInterpreter::kNoError;; 5263 }; 5264 // If the actual class of this object inherits 2nd (or more) from TObject,; 5265 // 'obj' is unlikely to be the start of the object (as described by IsA()),; 5266 // hence gInterpreter->Execute will improperly correct the offset.; 5267 void* addr = cl->DynamicCast(TObject::Class(), obj, kFALSE);; 5268 Longptr_t offset = 0L;; 5269 TClingCallFunc func(GetInterpreterImpl());; 5270 func.SetFunc((TClingClassInfo*)cl->GetClassInfo(), method, params, objectIsConst, &offset);; 5271 void* address = (void*)((Longptr_t)addr + offset);; 5272 func.Exec(address);; 5273}; 5274 ; 5275////////////////////////////////////////////////////////////////////////////////; 5276 ; 5277void TClin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:204476,interface,interfaces,204476,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['interface'],['interfaces']
Integrability,"on arguments; TStringTNamed::fNameobject identifier; TStringfSignaturestring containing function signature; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFunction(MethodInfo_t* info = 0); Default TFunction ctor. TFunctions are constructed in TROOT via; a call to TCint::UpdateListOfGlobalFunctions(). TFunction(const TFunction& orig); Copy operator. TFunction& operator=(const TFunction& rhs); Assignment operator. ~TFunction(); TFunction dtor deletes adopted CINT MethodInfo. TObject * Clone(const char* newname = """") const; Clone method. void CreateSignature(); Using the CINT method arg information to create a complete signature string. const char * GetSignature(); Return signature of function. TList * GetListOfMethodArgs(); Return list containing the TMethodArgs of a TFunction. const char * GetReturnTypeName() const; Get full type description of function return type, e,g.: ""class TDirectory*"". Int_t GetNargs() const; Number of function arguments. Int_t GetNargsOpt() const; Number of function optional (default) arguments. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void * InterfaceMethod() const; Return pointer to the interface method. Using this pointer we; can find which TFunction belongs to a CINT MethodInfo object.; Both need to have the same InterfaceMethod pointer. const char * GetMangledName() const; Returns the mangled name as defined by CINT, or 0 in case of error. const char * GetPrototype() const; Returns the prototype of a function as defined by CINT, or 0 in; case of error. » Author: Fons Rademakers 07/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TFunction.h 24077 2008-05-31 19:39:09Z brun $ » Last generated: 2010-09-23 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFunction.html:7333,interface,interface,7333,root/html528/TFunction.html,https://root.cern,https://root.cern/root/html528/TFunction.html,1,['interface'],['interface']
Integrability,"on arguments; TStringTNamed::fNameobject identifier; TStringfSignaturestring containing function signature; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFunction(MethodInfo_t* info = 0); Default TFunction ctor. TFunctions are constructed in TROOT via; a call to TCint::UpdateListOfGlobalFunctions(). TFunction(const TFunction& orig); Copy operator. TFunction& operator=(const TFunction& rhs); Assignment operator. ~TFunction(); TFunction dtor deletes adopted CINT MethodInfo. TObject * Clone(const char* newname = """") const; Clone method. void CreateSignature(); Using the CINT method arg information to create a complete signature string. const char * GetSignature(); Return signature of function. TList * GetListOfMethodArgs(); Return list containing the TMethodArgs of a TFunction. const char * GetReturnTypeName() const; Get full type description of function return type, e,g.: ""class TDirectory*"". Int_t GetNargs() const; Number of function arguments. Int_t GetNargsOpt() const; Number of function optional (default) arguments. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void * InterfaceMethod() const; Return pointer to the interface method. Using this pointer we; can find which TFunction belongs to a CINT MethodInfo object.; Both need to have the same InterfaceMethod pointer. const char * GetMangledName() const; Returns the mangled name as defined by CINT, or 0 in case of error. const char * GetPrototype() const; Returns the prototype of a function as defined by CINT, or 0 in; case of error. » Author: Fons Rademakers 07/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TFunction.h 24077 2008-05-31 19:39:09Z brun $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFunction.html:7402,interface,interface,7402,root/html530/TFunction.html,https://root.cern,https://root.cern/root/html530/TFunction.html,1,['interface'],['interface']
Integrability,"on arguments; TStringTNamed::fNameobject identifier; TStringfSignaturestring containing function signature; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFunction(MethodInfo_t* info = 0); Default TFunction ctor. TFunctions are constructed in TROOT via; a call to TCint::UpdateListOfGlobalFunctions(). TFunction(const TFunction& orig); Copy operator. TFunction& operator=(const TFunction& rhs); Assignment operator. ~TFunction(); TFunction dtor deletes adopted CINT MethodInfo. TObject * Clone(const char* newname = """") const; Clone method. void CreateSignature(); Using the CINT method arg information to create a complete signature string. const char * GetSignature(); Return signature of function. TList * GetListOfMethodArgs(); Return list containing the TMethodArgs of a TFunction. const char * GetReturnTypeName() const; Get full type description of function return type, e,g.: ""class TDirectory*"". Int_t GetNargs() const; Number of function arguments. Int_t GetNargsOpt() const; Number of function optional (default) arguments. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void * InterfaceMethod() const; Return pointer to the interface method. Using this pointer we; can find which TFunction belongs to a CINT MethodInfo object.; Both need to have the same InterfaceMethod pointer. const char * GetMangledName() const; Returns the mangled name as defined by CINT, or 0 in case of error. const char * GetPrototype() const; Returns the prototype of a function as defined by CINT, or 0 in; case of error. » Author: Fons Rademakers 07/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TFunction.h 24077 2008-05-31 19:39:09Z brun $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFunction.html:7541,interface,interface,7541,root/html532/TFunction.html,https://root.cern,https://root.cern/root/html532/TFunction.html,1,['interface'],['interface']
Integrability,"on at line 126 of file RNTuple.hxx. ◆ GetSeekHeader(). std::uint64_t ROOT::RNTuple::GetSeekHeader ; (; ); const. inline . Definition at line 122 of file RNTuple.hxx. ◆ GetVersionEpoch(). std::uint16_t ROOT::RNTuple::GetVersionEpoch ; (; ); const. inline . Definition at line 117 of file RNTuple.hxx. ◆ GetVersionMajor(). std::uint16_t ROOT::RNTuple::GetVersionMajor ; (; ); const. inline . Definition at line 118 of file RNTuple.hxx. ◆ GetVersionMinor(). std::uint16_t ROOT::RNTuple::GetVersionMinor ; (; ); const. inline . Definition at line 119 of file RNTuple.hxx. ◆ GetVersionPatch(). std::uint16_t ROOT::RNTuple::GetVersionPatch ; (; ); const. inline . Definition at line 120 of file RNTuple.hxx. ◆ IsA(). TClass * ROOT::RNTuple::IsA ; (; ); const. inline . ReturnsTClass describing current object ; Definition at line 136 of file RNTuple.hxx. ◆ Merge(). Long64_t ROOT::RNTuple::Merge ; (; TCollection * ; input, . TFileMergeInfo * ; mergeInfo . ). RNTuple implements the hadd MergeFile interface Merge this NTuple with the input list entries. ; Definition at line 45 of file RNTupleMerger.cxx. ◆ Streamer(). void ROOT::RNTuple::Streamer ; (; TBuffer & ; buf). Definition at line 27 of file RNTuple.cxx. ◆ StreamerNVirtual(). void ROOT::RNTuple::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 136 of file RNTuple.hxx. Friends And Related Symbol Documentation. ◆ Experimental::Internal::RNTupleFileWriter. friend class Experimental::Internal::RNTupleFileWriter. friend . Definition at line 70 of file RNTuple.hxx. ◆ Experimental::Internal::RPageSourceFile. friend class Experimental::Internal::RPageSourceFile. friend . Definition at line 71 of file RNTuple.hxx. ◆ ROOT::Experimental::Internal::CreateAnchor. ROOT::RNTuple ROOT::Experimental::Internal::CreateAnchor ; (; std::uint16_t ; versionEpoch, . std::uint16_t ; versionMajor, . std::uint16_t ; versionMinor, . std::uint16_t ; versionPatch, . std::uint64_t ; seekHeader, . std::uint64_t ; nbytesH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RNTuple.html:7569,interface,interface,7569,doc/master/classROOT_1_1RNTuple.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html,1,['interface'],['interface']
Integrability,"on at line 1928 of file TROOT.cxx. ◆ IncreaseDirLevel(). Int_t TROOT::IncreaseDirLevel ; (; ). static . Increase the indentation level for ls(). ; Definition at line 2883 of file TROOT.cxx. ◆ IndentLevel(). void TROOT::IndentLevel ; (; ). static . Functions used by ls() to indent an object hierarchy. ; Definition at line 2891 of file TROOT.cxx. ◆ Initialize(). void TROOT::Initialize ; (; ). static . Initialize ROOT explicitly. ; Definition at line 2899 of file TROOT.cxx. ◆ Initialized(). Bool_t TROOT::Initialized ; (; ). static . Return kTRUE if the TROOT object has been initialized. ; Definition at line 2906 of file TROOT.cxx. ◆ InitInterpreter(). void TROOT::InitInterpreter ; (; ). protected . Initialize interpreter (cling) ; Initialize the interpreter.; Should be called only after main(), to make sure LLVM/Clang is fully initialized. ; Definition at line 2064 of file TROOT.cxx. ◆ InitSystem(). void TROOT::InitSystem ; (; ). protected . Operating System interface. ; Initialize operating system interface. ; Definition at line 1978 of file TROOT.cxx. ◆ InitThreads(). void TROOT::InitThreads ; (; ). protected . Initialize threads library. ; Load and initialize thread library. ; Definition at line 2053 of file TROOT.cxx. ◆ IsA(). TClass * TROOT::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDirectory.; Definition at line 372 of file TROOT.h. ◆ IsBatch(). Bool_t TROOT::IsBatch ; (; ); const. inline . Definition at line 279 of file TROOT.h. ◆ IsEscaped(). Bool_t TROOT::IsEscaped ; (; ); const. inline . Definition at line 283 of file TROOT.h. ◆ IsExecutingMacro(). Bool_t TROOT::IsExecutingMacro ; (; ); const. inline . Definition at line 280 of file TROOT.h. ◆ IsFolder(). Bool_t TROOT::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TDirectory.; Definition at line 281 of file TROOT.h. ◆ IsInterr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:64319,interface,interface,64319,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['interface'],['interface']
Integrability,"on at line 1928 of file TROOT.cxx. ◆ IncreaseDirLevel(). Int_t TROOT::IncreaseDirLevel ; (; ). static . Increase the indentation level for ls(). ; Definition at line 2887 of file TROOT.cxx. ◆ IndentLevel(). void TROOT::IndentLevel ; (; ). static . Functions used by ls() to indent an object hierarchy. ; Definition at line 2895 of file TROOT.cxx. ◆ Initialize(). void TROOT::Initialize ; (; ). static . Initialize ROOT explicitly. ; Definition at line 2903 of file TROOT.cxx. ◆ Initialized(). Bool_t TROOT::Initialized ; (; ). static . Return kTRUE if the TROOT object has been initialized. ; Definition at line 2910 of file TROOT.cxx. ◆ InitInterpreter(). void TROOT::InitInterpreter ; (; ). protected . Initialize interpreter (cling) ; Initialize the interpreter.; Should be called only after main(), to make sure LLVM/Clang is fully initialized. ; Definition at line 2064 of file TROOT.cxx. ◆ InitSystem(). void TROOT::InitSystem ; (; ). protected . Operating System interface. ; Initialize operating system interface. ; Definition at line 1978 of file TROOT.cxx. ◆ InitThreads(). void TROOT::InitThreads ; (; ). protected . Initialize threads library. ; Load and initialize thread library. ; Definition at line 2053 of file TROOT.cxx. ◆ IsA(). TClass * TROOT::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDirectory.; Definition at line 372 of file TROOT.h. ◆ IsBatch(). Bool_t TROOT::IsBatch ; (; ); const. inline . Definition at line 279 of file TROOT.h. ◆ IsEscaped(). Bool_t TROOT::IsEscaped ; (; ); const. inline . Definition at line 283 of file TROOT.h. ◆ IsExecutingMacro(). Bool_t TROOT::IsExecutingMacro ; (; ); const. inline . Definition at line 280 of file TROOT.h. ◆ IsFolder(). Bool_t TROOT::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TDirectory.; Definition at line 281 of file TROOT.h. ◆ IsInterr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:64288,interface,interface,64288,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['interface'],['interface']
Integrability,"on at line 2050 of file TGTextEdit.cxx. ◆ NextChar(). void TGTextEdit::NextChar ; (; ). virtual . Go to next character. ; Definition at line 2013 of file TGTextEdit.cxx. ◆ Opened(). virtual void TGTextEdit::Opened ; (; ). inlinevirtual . Definition at line 127 of file TGTextEdit.h. ◆ operator=(). TGTextEdit & TGTextEdit::operator= ; (; const TGTextEdit & ; ). privatedelete . ◆ Paste(). Bool_t TGTextEdit::Paste ; (; ). virtual . Paste text into widget. ; Definition at line 461 of file TGTextEdit.cxx. ◆ PrevChar(). void TGTextEdit::PrevChar ; (; ). virtual . Go to the previous character. ; Definition at line 1968 of file TGTextEdit.cxx. ◆ Print(). void TGTextEdit::Print ; (; Option_t * ; = """"); const. overridevirtual . Send current buffer to printer. ; Reimplemented from TGCompositeFrame.; Definition at line 483 of file TGTextEdit.cxx. ◆ ProcessMessage(). Bool_t TGTextEdit::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process context menu messages. ; Reimplemented from TGCompositeFrame.; Definition at line 1592 of file TGTextEdit.cxx. ◆ Replace(). Bool_t TGTextEdit::Replace ; (; TGLongPosition ; pos, . const char * ; oldText, . const char * ; newText, . Bool_t ; direction, . Bool_t ; caseSensitive . ). virtual . Replace text starting at textPos. ; Definition at line 702 of file TGTextEdit.cxx. ◆ ReturnLongestLineWidth(). Long_t TGTextEdit::ReturnLongestLineWidth ; (; ). overridevirtual . Return width of longest line in widget. ; Reimplemented from TGTextView.; Definition at line 372 of file TGTextEdit.cxx. ◆ Saved(). virtual void TGTextEdit::Saved ; (; ). inlinevirtual . Definition at line 128 of file TGTextEdit.h. ◆ SavedAs(). virtual void TGTextEdit::SavedAs ; (; ). inlinevirtual . Definition at line 129 of file TGTextEdit.h. ◆ SaveFile(). Bool_t TGTextEdit::SaveFile ; (; const char * ; filename, . Bool_t ; saveas = kFALSE . ). virtual . Save file. ; If filename==0 ask user via dialog for a filename, if in addit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:56696,message,messages,56696,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['message'],['messages']
Integrability,"on at line 2501 of file TAuthenticate.cxx. ◆ GetAuthInfo(). TList * TAuthenticate::GetAuthInfo ; (; ). static . Static method returning the list with authentication details. ; Definition at line 1236 of file TAuthenticate.cxx. ◆ GetAuthMethod(). const char * TAuthenticate::GetAuthMethod ; (; Int_t ; idx). static . Static method returning the method corresponding to idx. ; Definition at line 1067 of file TAuthenticate.cxx. ◆ GetAuthMethodIdx(). Int_t TAuthenticate::GetAuthMethodIdx ; (; const char * ; meth). static . Static method returning the method index (which can be used to find the method in GetAuthMethod()). ; Returns -1 in case meth is not found. ; Definition at line 1082 of file TAuthenticate.cxx. ◆ GetAuthReUse(). Bool_t TAuthenticate::GetAuthReUse ; (; ). static . Static method returning the authentication reuse settings. ; Definition at line 1051 of file TAuthenticate.cxx. ◆ GetClientProtocol(). Int_t TAuthenticate::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 3889 of file TAuthenticate.cxx. ◆ GetDefaultDetails(). char * TAuthenticate::GetDefaultDetails ; (; Int_t ; method, . Int_t ; opt, . const char * ; usr . ). static . Determine default authentication details for method 'sec' and user 'usr'. ; Checks .rootrc family files. Returned string must be deleted by the user. ; Definition at line 2172 of file TAuthenticate.cxx. ◆ GetDefaultUser(). const char * TAuthenticate::GetDefaultUser ; (; ). static . Static method returning the default user information. ; Definition at line 1034 of file TAuthenticate.cxx. ◆ GetGlobalExpDate(). TDatime TAuthenticate::GetGlobalExpDate ; (; ). static . Static method returning default expiring date for new validity contexts. ; Definition at line 1026 of file TAuthenticate.cxx. ◆ GetGlobalPwHash(). Bool_t TAuthenticate::GetGlobalPwHash ; (; ). static . Static method returning the global password hash flag. ; Definition at line 1010 of file TAuthenticate.cxx. ◆ GetGlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:27060,protocol,protocol,27060,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['protocol'],['protocol']
Integrability,"on at line 288 of file RooCategory.cxx. ◆ recomputeShape(). void RooCategory::recomputeShape ; (; ). inlineoverrideprotectedvirtual . This category's shape does not depend on others, and does not need recomputing. ; Implements RooAbsCategory.; Definition at line 124 of file RooCategory.h. ◆ setIndex() [1/3]. bool RooAbsCategoryLValue::setIndex ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to state specified by another category state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. NoteThe state name of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 48 of file RooAbsCategoryLValue.h. ◆ setIndex() [2/3]. bool RooCategory::setIndex ; (; Int_t ; index, . bool ; printError = true . ). overridevirtual . Set value by specifying the index code of the desired state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. Returnsbool signalling if an error occurred. ; Implements RooAbsCategoryLValue.; Definition at line 164 of file RooCategory.cxx. ◆ setIndex() [3/3]. virtual bool RooAbsCategoryLValue::setIndex ; (; value_type ; index, . bool ; printError = true . ). virtual . Change category state by specifying the index code of the desired state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. Returnsbool to signal an error. ; Implements RooAbsCategoryLValue. ◆ setLabel() [1/4]. bool RooCategory::setLabel ; (; const char * ; label, . bool ; printError = true . ). overridevirtual . Set value by specifying the name of the desired state. ; If printError is set, a message will be printed if the specified label does not represent a valid state. Returnsfalse on success. ; Implements RooAbsCategoryLValue.; Definition at line 186 of file RooCategory.cxx. ◆ setLabel() [2/4]. virtual bool RooAbsCateg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:62359,message,message,62359,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['message'],['message']
Integrability,"on at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT master - Reference Gu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:2758,depend,depending,2758,doc/master/namespaceROOT_1_1FoundationUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html,1,['depend'],['depending']
Integrability,"on at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT v6-32 - Reference Gui",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:2757,depend,depending,2757,doc/v632/namespaceROOT_1_1FoundationUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html,1,['depend'],['depending']
Integrability,"on at line 47 of file RooFactoryWSTool.h. Classes; class  IFace;  ; class  SpecialsIFace;  . Public Member Functions;  RooFactoryWSTool (const RooFactoryWSTool &)=delete;  ;  RooFactoryWSTool (RooWorkspace &ws);  ; RooAddPdf * add (const char *objName, const char *specList, bool recursiveCoefs=false);  ; RooAddition * addfunc (const char *objName, const char *specList);  ; RooRealSumPdf * amplAdd (const char *objName, const char *specList);  ; RooAbsArg & asARG (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. ;  ; RooCategory & asCAT (const char *);  CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. ;  ; RooAbsCategory & asCATFUNC (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. ;  ; RooAbsCategoryLValue & asCATLV (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. ;  ; RooAbsData & asDATA (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. ;  ; RooDataHist & asDHIST (const char *);  CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. ;  ; double asDOUBLE (const char *);  CINT constructor interface, return constructor string argument #idx as double. ;  ; RooDataSet & asDSET (const char *);  CINT constructor interface, return constructor string argument #idx as RooDataSet object found in workspace. ;  ; RooAbsReal & asFUNC (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. ;  ; Int_t asINT (const char *);  CINT constructor interface, return constructor string argument #idx as Int_t. ;  ; RooArgList asLIST (const char *);  CINT constructor interface, retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:1527,interface,interface,1527,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['interface'],['interface']
Integrability,"on at line 48 of file RooEfficiency.h. ◆ clone(). TObject * RooEfficiency::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 32 of file RooEfficiency.h. ◆ DeclFileName(). static const char * RooEfficiency::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file RooEfficiency.h. ◆ evaluate(). double RooEfficiency::evaluate ; (; ); const. overrideprotectedvirtual . Calculate the raw value of this p.d.f which is the effFunc value if cat==1 and it is (1-effFunc) if cat==0. ; Implements RooAbsReal.; Definition at line 74 of file RooEfficiency.cxx. ◆ getAnalyticalIntegral(). int RooEfficiency::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 80 of file RooEfficiency.cxx. ◆ IsA(). TClass * RooEfficiency::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 48 of file RooEfficiency.h. ◆ Streamer(). void RooEfficiency::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooEfficiency::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file RooEfficiency.h. ◆ translate(). void RooEfficiency::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function define",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:77366,depend,dependents,77366,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,2,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"on at line 51 of file TSQLStatement.h. ◆ SetDatime() [1/2]. Bool_t TSQLStatement::SetDatime ; (; Int_t ; npar, . const TDatime & ; tm . ). set date & time value for specified parameter from TDatime object ; Definition at line 289 of file TSQLStatement.cxx. ◆ SetDatime() [2/2]. virtual Bool_t TSQLStatement::SetDatime ; (; Int_t ; , . Int_t ; , . Int_t ; , . Int_t ; , . Int_t ; , . Int_t ; , . Int_t ;  . ). inlinevirtual . Reimplemented in TMySQLStatement, TODBCStatement, TPgSQLStatement, and TSQLiteStatement.; Definition at line 55 of file TSQLStatement.h. ◆ SetDouble(). virtual Bool_t TSQLStatement::SetDouble ; (; Int_t ; , . Double_t ;  . ). inlinevirtual . Reimplemented in TMySQLStatement, TODBCStatement, TPgSQLStatement, and TSQLiteStatement.; Definition at line 49 of file TSQLStatement.h. ◆ SetError(). void TSQLStatement::SetError ; (; Int_t ; code, . const char * ; msg, . const char * ; method = nullptr . ). protected . set new values for error fields if method specified, displays error message ; Definition at line 262 of file TSQLStatement.cxx. ◆ SetInt(). virtual Bool_t TSQLStatement::SetInt ; (; Int_t ; , . Int_t ;  . ). inlinevirtual . Reimplemented in TMySQLStatement, TODBCStatement, TPgSQLStatement, and TSQLiteStatement.; Definition at line 44 of file TSQLStatement.h. ◆ SetLargeObject(). virtual Bool_t TSQLStatement::SetLargeObject ; (; Int_t ; col, . void * ; mem, . Long_t ; size, . Long_t ; maxsize = 0x1000 . ). inlinevirtual . Reimplemented in TPgSQLStatement.; Definition at line 62 of file TSQLStatement.h. ◆ SetLong(). virtual Bool_t TSQLStatement::SetLong ; (; Int_t ; , . Long_t ;  . ). inlinevirtual . Reimplemented in TMySQLStatement, TODBCStatement, TPgSQLStatement, and TSQLiteStatement.; Definition at line 46 of file TSQLStatement.h. ◆ SetLong64(). virtual Bool_t TSQLStatement::SetLong64 ; (; Int_t ; , . Long64_t ;  . ). inlinevirtual . Reimplemented in TMySQLStatement, TODBCStatement, TPgSQLStatement, and TSQLiteStatement.; Definition at line 47 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStatement.html:27276,message,message,27276,doc/master/classTSQLStatement.html,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html,1,['message'],['message']
Integrability,"on at line 89 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 92 of file RWebWindowsManager.hxx. ◆ GetServerLocations(). std::map< std::string, std::string > RWebWindowsManager::GetServerLocations ; (; ). static . Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ; Definition at line 209 of file RWebWindowsManager.cxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 686 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 299 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 79 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 147 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 105 of file RWebWindowsManager.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:14213,message,message,14213,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['message'],['message']
Integrability,"on but allows as well for parameter interaction by the user. An instance of MnMigrad is specific to the current \(\mbox{FCN}\) and user parameters. Any parameter interaction of the user between two minimization steps will make use of the result of the preceeding minimization in an optimal way. The interface for parameters (see [api:parameters], [api:covariance] and [api:state]) is forwardedin MnMigrad.; 4.4.3 Subsequent minimizations; M takes care that all information is treated in an optimal and correct wayif the user interacts with the parameters between two minimizations. MnMigrad retains the result of the last minimization and uses this as input for the next step. Between two minimization requests to MnMigrad the user can fix or release parameters, put limits on them or remove limits from them. Each instance of a MnMigrad object maintains its own state and one can have multiple instances of MnMigrad objects.; 4.4.4 M fails to find a minimum; If M fails to find a minimum, the user is notified by a warning message isued by M when running into troubles. Problems can be:. a bug in M; an error in the \(\mbox{FCN}\); a highly difficult problem (usually strong correlations among parameters); floating–point precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimzation is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:40595,message,message,40595,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['message'],['message']
Integrability,"on coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper class.; TEveHit Monte Carlo hit (also used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending of radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> Template for a special point on a track: position/momentum reference, daughter creation or decay.; TEvePathMarkT<float> Template for a special point on a tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:62609,wrap,wrapper,62609,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,3,['wrap'],['wrapper']
Integrability,on coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper class.; TEveHit Monte Carlo hit (also used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:63040,wrap,wrapper,63040,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['wrap'],['wrapper']
Integrability,"on coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper class.; TEveHit Monte Carlo hit (also used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> Template for a special point on a track: position/momentum reference, daughter creation or decay.; TEvePathMarkT<float> Template for a special point on a tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:66361,wrap,wrapper,66361,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['wrap'],['wrapper']
Integrability,"on dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html:1964,integrat,integration,1964,root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,3,['integrat'],['integration']
Integrability,"on entrylist to write the results of TTree::Draw and TChain::Draw into ; an entry list. Example:. tree->Draw("">>elist"", ""x<0 && y>0"", ""entrylist"");; TEntryList *elist = (TEntryList*)gDirectory->Get(""elist"");. Example of Loop on TEntryList with a TChain. void loopChain() {; TFile *fe = TFile::Open(""myelist.root"");; TEntryList *myelist = (TEntryList*)fe->Get(""myelist"");; TChain *ch = new TChain(""ntuple"");; ch->Add(""hsimple.root"");; ch->Add(""hsimple2.root"");; Long64_t listEntries = myelist->GetN();; Long64_t chainEntries = ch->GetEntries();; Int_t treenum = 0;; ch->SetEntryList(myelist);; for (entry=start;entry < end;entry++) {; entryNumber = treechain->GetEntryNumber(entry);; if (entryNumber < 0) break;; localEntry = fTree->LoadTree(entryNumber);; if (localEntry < 0) break;; // then either call branch->GetEntry(localEntry);; // or entryNumber->GetEntry(entryNumber);; // In the later case the LoadTree is then somewhat redudant.; }; }. When using the TEntryList interface directly, you can get the 'tree number' and entry in; the current tree (i.e. value similar to the return value of LoadTree) from calling; TEntryList::GetEntryAndTree:. Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);. to obtain the entry number within the chain you need to add to it the value; of; treeEntry+ch->GetTreeOffset()[treenum]; such that the loop in the previous example can also be written as:; for (Long64_t el = 0; el < listEntries; el++) {; Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);; Long64_t chainEntry = treeEntry+ch->GetTreeOffset()[treenum]; ; printf(""el=%lld, treeEntry=%lld, chainEntry=%lld, treenum=%d\n"", el, treeEntry, chainEntry, treenum);; ch->LoadTree(chainEntry); // this also returns treeEntry; needed_branch->GetEntry(treeEntry);; }. TSelectors; To fill an TEntryList from a TSelector correctly, one must add the TEntryList object; to the output list of the selector (TSelector::fOutput). This is the only way to ; make the sub-lists of the TEntryList switch whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEntryList.html:7250,interface,interface,7250,root/html534/TEntryList.html,https://root.cern,https://root.cern/root/html534/TEntryList.html,1,['interface'],['interface']
Integrability,"on evaluation and double Derivative(const double *, int icoord) for the partial derivatives. * From an object implementing any member function like Foo::XXX(const double *) for the function evaluation and any member function like Foo::XXX(const double *, int icoord) for the partial derivatives. * From an function object implementing double operator()( const double * ) for the function evaluation and another function object implementing double operator() (const double *, int icoord) for the partial derivatives.; The function dimension is required when constructing the functor.; 13.7.4.5 Special case: Wrapping TF1 objects in Parametric Function interfaces; In many cases, the user works with the TF1 class. The mathematical library in ROOT provides some solutions to wrap these into the interfaces needed by other methods. If the desired interface to wrap is one-dimensional, the class to use is ROOT::Math::WrappedTF1. The default constructor takes a TF1 reference as an argument, that will be wrapped with the interfaces of a ROOT::Math::IParametricGradFunctionOneDim. Example:; #include ""TF1.h""; #include ""Math/WrappedTF1.h"". int main(); {. TF1 f(""Sin Function"", ""sin(x)+y"",0,3);. ROOT::Math::WrappedTF1 wf1(f);. cout << f(1) << endl;; cout << wf1(1) << endl;. return 0;; }; For a TF1 defining a multidimensional function or in case we need to wrap in a multi-dimensional function interface, the class to use is ROOT::Math::WrappedMultiTF1. Following the usual procedure, setting the TF1 though the constructor, will wrap it into a ROOT::Math::IParametricGradFunctionMultiDim. Example:; #include ""TF1.h""; #include ""Math/WrappedMultiTF1.h"". int main(); {. TF2 f(""Sin Function"", ""sin(x) + y"",0,3,0,2);. ROOT::Math::WrappedMultiTF1 wf1(f);. double x[] = {1,2};. cout << f(x) << endl;; cout << wf1(x) << endl;. return 0;; }; 13.8 Numerical Integration; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. ROOT::Math::VirtualI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:698832,wrap,wrapped,698832,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['interface', 'wrap']","['interfaces', 'wrapped']"
Integrability,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:13550,integrat,integration,13550,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,3,['integrat'],"['integration', 'integrations']"
Integrability,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html:12971,integrat,integration,12971,root/html534/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html,3,['integrat'],"['integration', 'integrations']"
Integrability,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13550,integrat,integration,13550,root/html604/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html,3,['integrat'],"['integration', 'integrations']"
Integrability,"on f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:13293,integrat,integration,13293,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,3,['integrat'],['integration']
Integrability,"on for all RooAbsReals; 2612 ; 2613RooNumGenConfig* RooAbsPdf::defaultGeneratorConfig(); 2614{; 2615 return &RooNumGenConfig::defaultConfig() ;; 2616}; 2617 ; 2618 ; 2619////////////////////////////////////////////////////////////////////////////////; 2620/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2621/// If this object has no specialized configuration, a null pointer is returned; 2622 ; 2623RooNumGenConfig* RooAbsPdf::specialGeneratorConfig() const; 2624{; 2625 return _specGeneratorConfig.get();; 2626}; 2627 ; 2628 ; 2629 ; 2630////////////////////////////////////////////////////////////////////////////////; 2631/// Returns the specialized integrator configuration for _this_ RooAbsReal.; 2632/// If this object has no specialized configuration, a null pointer is returned,; 2633/// unless createOnTheFly is true in which case a clone of the default integrator; 2634/// configuration is created, installed as specialized configuration, and returned; 2635 ; 2636RooNumGenConfig* RooAbsPdf::specialGeneratorConfig(bool createOnTheFly); 2637{; 2638 if (!_specGeneratorConfig && createOnTheFly) {; 2639 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*defaultGeneratorConfig()) ;; 2640 }; 2641 return _specGeneratorConfig.get();; 2642}; 2643 ; 2644 ; 2645 ; 2646////////////////////////////////////////////////////////////////////////////////; 2647/// Return the numeric MC generator configuration used for this object. If; 2648/// a specialized configuration was associated with this object, that configuration; 2649/// is returned, otherwise the default configuration for all RooAbsReals is returned; 2650 ; 2651const RooNumGenConfig* RooAbsPdf::getGeneratorConfig() const; 2652{; 2653 const RooNumGenConfig* config = specialGeneratorConfig() ;; 2654 if (config) return config ;; 2655 return defaultGeneratorConfig() ;; 2656}; 2657 ; 2658 ; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Set the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:125928,integrat,integrator,125928,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integrator']
Integrability,"on from the other workers is done. The wrks arg can be used on the master to limit the set of workers. Returns 0 in case of success and -1 in case of error. ; Reimplemented in TProofLite.; Definition at line 8628 of file TProof.cxx. ◆ LoadPackage(). Int_t TProof::LoadPackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; loadopts = 0, . TList * ; workers = 0 . ). private . Load specified package. ; Executes the PROOF-INF/SETUP.C script on all active nodes. If notOnClient = true, don't load package on the client. The default is to load the package also on the client. The argument 'loadopts' specify a list of objects to be passed to the SETUP. The objects in the list must be streamable; the SETUP macro will be executed like this: SETUP.C(loadopts). Returns 0 in case of success and -1 in case of error. ; Definition at line 8069 of file TProof.cxx. ◆ LogMessage(). void TProof::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Log a message into the appropriate window by emitting a signal. ; Definition at line 6414 of file TProof.cxx. ◆ LogViewer(). void TProof::LogViewer ; (; const char * ; url = 0, . Int_t ; sessionidx = 0 . ). static . Start the log viewer window usign the plugin manager. ; Definition at line 12470 of file TProof.cxx. ◆ MakePlayer(). TVirtualProofPlayer * TProof::MakePlayer ; (; const char * ; player = 0, . TSocket * ; s = 0 . ). protectedvirtual . Construct a TProofPlayer object. ; The player string specifies which player should be created: remote, slave, sm (supermaster) or base. Default is remote. Socket is needed in case a slave player is created. ; Reimplemented in TProofSuperMaster.; Definition at line 10211 of file TProof.cxx. ◆ MarkBad() [1/2]. void TProof::MarkBad ; (; TSlave * ; wrk, . const char * ; reason = 0 . ). private . Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor objects. ; Assume that the work done by this worker was lost and ask packerizer t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:115611,message,message,115611,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['message'],['message']
Integrability,on functions. Function Members (Methods); public:. virtual~TActivationChooser(); static TClass*Class(); TMVA::TActivation*CreateActivation(TMVA::TActivationChooser::EActivationType type) const; TMVA::TActivation*CreateActivation(const TString& type) const; vector<TString>*GetAllActivationNames() const; virtual TClass*IsA() const; TMVA::TActivationChooser&operator=(const TMVA::TActivationChooser&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationChooserTActivationChooser(); TMVA::TActivationChooserTActivationChooser(const TMVA::TActivationChooser&). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TMVA::TActivationChooser::EActivationTypekLinear; static TMVA::TActivationChooser::EActivationTypekRadial; static TMVA::TActivationChooser::EActivationTypekSigmoid; static TMVA::TActivationChooser::EActivationTypekTanh. private:. TStringfLINEARactivation function name; TMVA::MsgLogger*fLogger! message logger; TStringfRADIALactivation function name; TStringfSIGMOIDactivation function name; TStringfTANHactivation function name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationChooser(); defaut constructor. ~TActivationChooser(); destructor. CreateActivation(EActivationType type); instantiate the correct activation object according to the; type choosen (given as the enumeration type). CreateActivation(const TString& type) const; instantiate the correct activation object according to the; type choosen (given by a TString). GetAllActivationNames() const; retuns the names of all know activation functions. TActivationChooser(). » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TActivationChooser.html:1398,message,message,1398,root/html602/TMVA__TActivationChooser.html,https://root.cern,https://root.cern/root/html602/TMVA__TActivationChooser.html,1,['message'],['message']
Integrability,"on has a pre-computed mode; boolfIsLogPdfflag to control if function pointer represent log of pdf; doublefModemode of the distribution; boolfOwnFuncflag to indicate if class manages the function pointers; const ROOT::Math::IGenFunction*fPdfpointer to the pdf; doublefXmaxupper value of the domain; doublefXminlower value of the domain. Class Charts. Inheritance Chart:. TUnuranBaseDist. ←; TUnuranContDist. Function documentation; TUnuranContDist(const ROOT::Math::IGenFunction& pdf, const ROOT::Math::IGenFunction* dpdf = 0, bool isLogPdf = false, bool copyFunc = false); Constructor from generic function interfaces; manage the functions and clone them if flag copyFunc is true. TUnuranContDist(TF1* pdf = 0, TF1* deriv = 0, bool isLogPdf = false); Constructor from a TF1 objects; function pointers are managed by class. TUnuranContDist(const TUnuranContDist& ); Implementation of copy constructor. ~TUnuranContDist(); destructor implementation. void SetCdf(const ROOT::Math::IGenFunction& cdf); set cdf distribution using a generic function interface. void SetCdf(TF1* cdf); set cumulative distribution function from a TF1. double Pdf(double x) const; evaluate the pdf of the distribution. double DPdf(double x) const; evaluate the derivative of the pdf; if derivative function is not given is evaluated numerically. double Cdf(double x) const; evaluate the integral (cdf) on the domain. TUnuranContDist * Clone() const. Clone (required by base class). { return new TUnuranContDist(*this); }. void SetDomain(double xmin, double xmax). Set the distribution domain. If min < max a domain is defined otherwise is undefined. void SetMode(double mode). set the distribution mode (x position of its maximum). { fMode = mode; fHasMode=true;}. void SetPdfArea(double area). set the area below the pdf. { fArea = area; fHasArea=true;}. bool GetDomain(double& xmin, double& xmax) const. check if distribution has a defined domain and return in case its domain. bool HasCdf() const. check if a cdf function is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnuranContDist.html:2838,interface,interface,2838,root/html602/TUnuranContDist.html,https://root.cern,https://root.cern/root/html602/TUnuranContDist.html,2,['interface'],['interface']
Integrability,"on if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction2Binding_double_int_int_.html:33377,integrat,integrator,33377,root/html532/RooCFunction2Binding_double_int_int_.html,https://root.cern,https://root.cern/root/html532/RooCFunction2Binding_double_int_int_.html,1,['integrat'],['integrator']
Integrability,"on integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalpha; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym; RooRealProxym0; RooRealProxyn; RooRealProxysigma.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCBShape.html:38356,integrat,integrator,38356,root/html526/RooCBShape.html,https://root.cern,https://root.cern/root/html526/RooCBShape.html,1,['integrat'],['integrator']
Integrability,"on interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:8793,integrat,integration,8793,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,6,['integrat'],['integration']
Integrability,"on is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. The following named arguments are accepted. NormSet(const RooArgSet&) -- Specify normalization set, mostly useful when working with PDFS; NumIntConfig(const RooNumIntConfig&) -- Use given configuration for any numeric integration, if necessary; Range(const char* name) -- Integrate only over given range. Multiple ranges may be specified; by passing multiple Range() arguments. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset, 				 const RooNumIntConfig* cfg, const char* rangeName); Create an object that represents the integral of the function over one or more observables listed in iset; The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. If nset is specified the integrand is request; to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; the integral is performed over the named range, otherwise it is performed over the domain of each; integrated observable. If cfg is specified it will be used to configure any numeric integration; aspect of the integral. It will not force the integral to be performed numerically, which is; decided automatically by RooRealIntegral. RooAbsReal* createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; Utility function for createIntegral that creates the actual integreal object. void findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; Utility function for createIntObj() that aids in the construct of recursive integrals; over functions with multiple observables",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:36053,integrat,integrates,36053,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,2,['integrat'],['integrates']
Integrability,"on key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing Check function has following signature: int func(double spent_tm) Parameter spent_tm is time in seconds, which already spent ins",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3797,message,message,3797,doc/v632/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html,2,['message'],['message']
Integrability,"on number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. Int_t GetClassSize() const; { return Size(); }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. Cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:49571,wrap,wrapper,49571,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['wrap'],['wrapper']
Integrability,"on number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClass.html:47361,wrap,wrapper,47361,root/html532/TClass.html,https://root.cern,https://root.cern/root/html532/TClass.html,1,['wrap'],['wrapper']
Integrability,"on of the coefficient of any RooAddPdf component in the expression tree headed by...Definition RooAbsReal.cxx:3675; RooAbsReal::_valuedouble _valueCache for current value of object.Definition RooAbsReal.h:536; RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; RooAbsReal::attachToTreevoid attachToTree(TTree &t, Int_t bufSize=32000) overrideAttach object to a branch of given TTree.Definition RooAbsReal.cxx:3028; RooAbsReal::specialIntegratorConfigRooNumIntConfig * specialIntegratorConfig() constReturns the specialized integrator configuration for this RooAbsReal.Definition RooAbsReal.cxx:3282; RooAbsReal::writeToStreamvoid writeToStream(std::ostream &os, bool compact) const overrideWrite object contents to stream (dummy for now)Definition RooAbsReal.cxx:436; RooAbsReal::traceEvaldouble traceEval(const RooArgSet *set) constCalculate current value of object, with error tracing wrapper.Definition RooAbsReal.cxx:319; RooAbsReal::getPropagatedErrordouble getPropagatedError(const RooFitResult &fr, const RooArgSet &nset={}) constPropagates parameter uncertainties to an uncertainty estimate for this RooAbsReal.Definition RooAbsReal.cxx:2472; RooAbsReal::setHideOffsetstatic void setHideOffset(bool flag)Definition RooAbsReal.cxx:191; RooAbsReal::ErrorLoggingModeErrorLoggingModeDefinition RooAbsReal.h:317; RooAbsReal::CountErrors@ CountErrorsDefinition RooAbsReal.h:317; RooAbsReal::CollectErrors@ CollectErrorsDefinition RooAbsReal.h:317; RooAbsReal::PrintErrors@ PrintErrorsDefinition RooAbsReal.h:317; RooAbsReal::Ignore@ IgnoreDefinition RooAbsReal.h:317; RooAbsReal::globalSelectCompstatic void globalSelectComp(bool flag)Global switch controlling the activation of the selectComp() functionality.Definition RooAbsReal.cxx:2966; RooAbsReal::momentRooAbsMoment * moment(RooRealVar &obs, Int_t order, bool central,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:226557,wrap,wrapper,226557,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,"on of the first Histo1D() overload for more details. Example usage:; // Deduce column type (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float, int>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");. Definition at line 1866 of file RInterface.hxx. ◆ Histo1D() [2/5]. template<typename Proxied , typename DataSource = void> . template<typename V , typename W > . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model = {"""", """", 128u, 0., 0.}). inline . Fill and return a one-dimensional histogram with the weighted values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. ; WThe type of the column used as weights. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; This overload will use the first two default columns as column names. See the description of the first Histo1D() overload for more details. ; Definition at line 1920 of file RInterface.hxx. ◆ Histo1D() [3/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model = {"""", """", 128u, 0., 0.}, . std::string_view ; vName = """" . ). inline . Fill and return a one-dimensional histogram with the values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]vNameThe name of the column that will fill the histogram. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the histogram is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:84767,wrap,wrapped,84767,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['wrap'],['wrapped']
Integrability,"on of the hidden layers ; Implements TMVA::MethodBase.; Definition at line 176 of file MethodCFMlpANN.cxx. ◆ DeclFileName(). static const char * TMVA::MethodCFMlpANN::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 176 of file MethodCFMlpANN.h. ◆ EvalANN(). Double_t TMVA::MethodCFMlpANN::EvalANN ; (; std::vector< Double_t > & ; inVar, . Bool_t & ; isOK . ). private . evaluates NN value as function of input variables ; Definition at line 343 of file MethodCFMlpANN.cxx. ◆ GetClass(). Int_t TMVA::MethodCFMlpANN::GetClass ; (; Int_t ; ivar); const. inline . Definition at line 127 of file MethodCFMlpANN.h. ◆ GetData(). Double_t TMVA::MethodCFMlpANN::GetData ; (; Int_t ; isel, . Int_t ; ivar . ); const. inline . Definition at line 126 of file MethodCFMlpANN.h. ◆ GetHelpMessage(). void TMVA::MethodCFMlpANN::GetHelpMessage ; (; ); const. protectedvirtual . get help message text ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 711 of file MethodCFMlpANN.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodCFMlpANN::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . returns CFMlpANN output (normalised within [0,1]) ; Implements TMVA::MethodBase.; Definition at line 321 of file MethodCFMlpANN.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodCFMlpANN::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ;  . ). virtual . CFMlpANN can handle classification with 2 classes. ; Implements TMVA::IMethod.; Definition at line 165 of file MethodCFMlpANN.cxx. ◆ Init(). void TMVA::MethodCFMlpANN::Init ; (; void ; ). privatevirtual . default initialisation called by all constructors ; Implements TMVA::MethodBase.; Definition at line 257 of file MethodCFMlpANN.cxx. ◆ IsA(). virtual TClass * TMVA::MethodCFMlpANN::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:38604,message,message,38604,doc/master/classTMVA_1_1MethodCFMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html,1,['message'],['message']
Integrability,"on or p.d.f; 784/// to be plotted on a RooPlot.; 785/// \ref createPlotProjAnchor ""createPlotProjection()""; 786 ; 787const RooAbsReal* RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars,; 788 RooArgSet*& cloneSet) const; 789{; 790 return createPlotProjection(depVars,&projVars,cloneSet) ;; 791}; 792 ; 793 ; 794////////////////////////////////////////////////////////////////////////////////; 795/// Utility function for plotOn() that creates a projection of a function or p.d.f; 796/// to be plotted on a RooPlot.; 797/// \anchor createPlotProjAnchor; 798///; 799/// Create a new object \f$ G \f$ that represents the normalized projection:; 800/// \f[; 801/// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; 802/// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; 803/// \f]; 804/// where \f$ F[x,y,p] \f$ is the function we represent, and; 805/// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; 806///; 807/// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; 808/// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; 809/// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; 810/// The latter will also be returned. The caller takes ownership of this set.; 811/// \param[in] rangeName Optional range for projection integrals; 812/// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; 813/// are in `dependentVars` or `projectedVars`.; 814/// \return A pointer to the newly created object, or zero in case of an; 815/// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).; 816const RooAbsReal *RooAbsReal::createPlotProjection(const RooArgSet &dependentVars, const RooArgSet *projectedVars,; 817 RooArgSet *&cloneSet, const char* rangeName, const RooArgSet* condObs) const; 818{; 819 // Get the set of our le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:31769,depend,dependentVars,31769,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['depend'],['dependentVars']
Integrability,"on press event. void mouseReleaseEvent(QMouseEvent* e); Handle mouse button release event. void mouseDoubleClickEvent(QMouseEvent* e); Handle mouse double click event. void resizeEvent(QResizeEvent* e); Call QWidget resize and inform the ROOT Canvas. void paintEvent(QPaintEvent* e); Handle paint event of Qt. void leaveEvent(QEvent* e); Handle leave event. void dragEnterEvent(QDragEnterEvent* e); Entering a drag event. void dropEvent(QDropEvent* Event); Start a drop, for now only histogram objects can be drwon by droping. void cd(Int_t subpadnumber = 0); Just a wrapper. void Browse(TBrowser* b); Just a wrapper. void Clear(Option_t* option = """"); Just a wrapper. void Close(Option_t* option = """"); Just a wrapper. void Draw(Option_t* option = """"); Just a wrapper. TObject * DrawClone(Option_t* option = """"); Just a wrapper. TObject * DrawClonePad(); Just a wrapper. void EditorBar(); Just a wrapper. void EnterLeave(TPad* prevSelPad, TObject* prevSelObj); just a wrapper. void FeedbackMode(Bool_t set); just a wrapper. void Flush(); just a wrapper. void UseCurrentStyle(); just a wrapper. void ForceUpdate(); just a wrapper. const char * GetDISPLAY(); just a wrapper. TContextMenu * GetContextMenu(); just a wrapper. Int_t GetDoubleBuffer(); just a wrapper. Int_t GetEvent(); just a wrapper. Int_t GetEventX(); just a wrapper. Int_t GetEventY(); just a wrapper. Color_t GetHighLightColor(); just a wrapper. TVirtualPad * GetPadSave(); just a wrapper. TObject * GetSelected(); just a wrapper. Option_t * GetSelectedOpt(); just a wrapper. TVirtualPad * GetSelectedPad(); just a wrapper. Bool_t GetShowEventStatus(); just a wrapper. Bool_t GetAutoExec(); just a wrapper. Size_t GetXsizeUser(); just a wrapper. Size_t GetYsizeUser(); just a wrapper. Size_t GetXsizeReal(); just a wrapper. Size_t GetYsizeReal(); just a wrapper. Int_t GetCanvasID(); just a wrapper. Int_t GetWindowTopX(); just a wrapper. Int_t GetWindowTopY(); just a wrapper. UInt_t GetWindowWidth(); just a wrapper. UInt_t GetWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootCanvas.html:5277,wrap,wrapper,5277,root/html528/TQRootCanvas.html,https://root.cern,https://root.cern/root/html528/TQRootCanvas.html,3,['wrap'],['wrapper']
Integrability,"on range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdfProxy to p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCachedPdf.html:41167,integrat,integrator,41167,root/html530/RooCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooCachedPdf.html,1,['integrat'],['integrator']
Integrability,"on specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPolyVar(); Default constructor. RooPolyVar(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList, Int_t lowestOrder = 0); Construct polynomial in x with coefficients in coefList. If; lowestOrder is not zero, then the first element in coefList is; interpreted as as the 'lowestOrder' coefficients and all; subsequent coeffient elements are shifted by a similar amount. RooPolyVar(const char* name, const char* title, RooAbsReal& x); Constructor of flat polynomial function. RooPolyVar(const RooPolyVar& other, const char* name = 0); Copy constructor. ~RooPolyVar(); Destructor. Double_t evaluate() const; Calculate and return value of polynomial. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Advertise that we can internally integrate over x. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate and return analytical integral over x. TObject* clone(const char* newname) const; { return new RooPolyVar(*this, newname); }. » Last changed: Mon Dec 7 13:48:40 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPolyVar.html:33346,integrat,integrate,33346,root/html526/RooPolyVar.html,https://root.cern,https://root.cern/root/html526/RooPolyVar.html,1,['integrat'],['integrate']
Integrability,"on specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPolyVar(); Default constructor. RooPolyVar(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList, Int_t lowestOrder = 0); Construct polynomial in x with coefficients in coefList. If; lowestOrder is not zero, then the first element in coefList is; interpreted as as the 'lowestOrder' coefficients and all; subsequent coeffient elements are shifted by a similar amount. RooPolyVar(const char* name, const char* title, RooAbsReal& x); Constructor of flat polynomial function. RooPolyVar(const RooPolyVar& other, const char* name = 0); Copy constructor. ~RooPolyVar(); Destructor. Double_t evaluate() const; Calculate and return value of polynomial. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Advertise that we can internally integrate over x. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate and return analytical integral over x. TObject* clone(const char* newname) const; { return new RooPolyVar(*this, newname); }. » Last changed: Mon Jul 4 15:23:40 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooPolyVar.html:34104,integrat,integrate,34104,root/html530/RooPolyVar.html,https://root.cern,https://root.cern/root/html530/RooPolyVar.html,1,['integrat'],['integrate']
Integrability,"on specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPolyVar(); Default constructor. RooPolyVar(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList, Int_t lowestOrder = 0); Construct polynomial in x with coefficients in coefList. If; lowestOrder is not zero, then the first element in coefList is; interpreted as as the 'lowestOrder' coefficients and all; subsequent coeffient elements are shifted by a similar amount. RooPolyVar(const char* name, const char* title, RooAbsReal& x); Constructor of flat polynomial function. RooPolyVar(const RooPolyVar& other, const char* name = 0); Copy constructor. ~RooPolyVar(); Destructor. Double_t evaluate() const; Calculate and return value of polynomial. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Advertise that we can internally integrate over x. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate and return analytical integral over x. TObject* clone(const char* newname) const; { return new RooPolyVar(*this, newname); }. » Last changed: Thu Nov 3 20:08:57 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooPolyVar.html:34483,integrat,integrate,34483,root/html532/RooPolyVar.html,https://root.cern,https://root.cern/root/html532/RooPolyVar.html,1,['integrat'],['integrate']
Integrability,"on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  ; template<class Function > ; bool FitFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; ROOT::Math::IMultiGenFunction * GetFCN () const;  return pointer to last used objective function (is NULL in case fit is not yet done) This pointer will be valid as far as the fitter class has not been deleted. ;  ; ROOT::Math::Minimizer * GetMinimizer () const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4938,interface,interface,4938,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['interface'],['interface']
Integrability,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:12766,integrat,integration,12766,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,39,['integrat'],['integration']
Integrability,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBukinPdf.html:23777,integrat,integration,23777,doc/master/classRooBukinPdf.html,https://root.cern,https://root.cern/doc/master/classRooBukinPdf.html,32,['integrat'],['integration']
Integrability,"on't boost them; NNodesMax maximum number of nodes allwed in the tree splitting, then it stops.; MaxDepth maximum depth of the decision tree allowed before further splitting is stopped. void DeclareCompatibilityOptions(). void ProcessOptions(); the option string is decoded, for available options see ""DeclareOptions"". void Init( void ); common initialisation with defaults for the BDT-Method. void Reset( void ); reset the method, as if it had just been instantiated (forget all training etc.). ~MethodBDT( void ); destructor. void InitEventSample( void ); Write all Events from the Tree into a vector of Events, that are; more easily manipulated. This method should never be called without; existing trainingTree, as it the vector of events from the ROOT training tree. void PreProcessNegativeEventWeights(); o.k. you know there are events with negative event weights. This routine will remove; them by pairing them with the closest event(s) of the same event class with positive; weights; A first attempt is ""brute force"", I dont' try to be clever using search trees etc,; just quick and dirty to see if the result is any good. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument. void Train(); BDT training. void GetRandomSubSample(); fills fEventSample with fSampleFraction*NEvents random training events. Double_t GetGradBoostMVA(TMVA::Event& e, UInt_t nTrees); returns MVA value: -1 for background, 1 for signal. void UpdateTargets(vector<TMVA::Event*> , UInt_t cls = 0); Calculate residua for all events;. void UpdateTargetsRegression(vector<TMVA::Event*> , Bool_t first = kFALSE); Calculate current residuals for all events and update targets for next iteration. Double_t GetWeightedQuantile(vector<std::pair<Double_t,Double_t> > v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBDT.html:29038,rout,routine,29038,root/html530/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBDT.html,2,['rout'],['routine']
Integrability,"on(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:9915,depend,dependentOverlaps,9915,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,12,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"on). Control function to draw a 2D histogram as a color plot.; . void PaintContour(Option_t* option). Control function to draw a 2D histogram as a contour plot.; . Int_t PaintContourLine(Double_t elev1, Int_t icont1, Double_t x1, Double_t y1, Double_t elev2, Int_t icont2, Double_t x2, Double_t y2, Double_t* xarr, Double_t* yarr, Int_t* itarr, Double_t* levels). Fill the matrix XARR YARR for Contour Plot.; ; . void PaintErrors(Option_t* option). Draw 1D histograms error bars.; . void Paint2DErrors(Option_t* option). Draw 2D histograms errors.; ; . void PaintFrame(). Calculate range and clear pad (canvas).; ; . void PaintFunction(Option_t* option). Paint functions associated to an histogram.; . void PaintHist(Option_t* option). Control routine to draw 1D histograms.; . void PaintH3(Option_t* option = """"). Control function to draw a 3D histograms.; . Int_t PaintInit(). Compute histogram parameters used by the drawing routines.; ; . Int_t PaintInitH(). Compute histogram parameters used by the drawing routines for a rotated pad.; ; . void PaintH3Iso(). Control function to draw a 3D histogram with Iso Surfaces.; . void PaintLego(Option_t* option). Control function to draw a 2D histogram as a lego plot.; . void PaintLegoAxis(TGaxis* axis, Double_t ang). Draw the axis for legos and surface plots.; ; . void PaintPalette(). Paint the color palette on the right side of the pad.; . void PaintScatterPlot(Option_t* option). Control function to draw a 2D histogram as a scatter plot.; . void PaintSpecialObjects(const TObject* obj, Option_t* option). Static function to paint special objects like vectors and matrices.; This function is called via gROOT->ProcessLine to paint these objects; without having a direct dependency of the graphics or histogramming; system.; ; . void PaintStat(Int_t dostat, TF1* fit). Draw the statistics box for 1D and profile histograms.; . void PaintStat2(Int_t dostat, TF1* fit). Draw the statistics box for 2D histograms.; . void PaintStat3(Int_t dostat, TF1*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:85538,rout,routines,85538,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,6,['rout'],['routines']
Integrability,"on, Multiclass, Auto) (default: Auto)"");; 256 AddPreDefVal(TString(""Classification""));; 257 AddPreDefVal(TString(""Regression""));; 258 AddPreDefVal(TString(""Multiclass""));; 259 AddPreDefVal(TString(""Auto""));; 260 ; 261 ParseOptions();; 262 CheckForUnusedOptions();; 263 ; 264 if (Verbose()); 265 fLogger->SetMinType(kVERBOSE);; 266 if (fVerboseLevel.CompareTo(""Debug"") == 0); 267 fLogger->SetMinType(kDEBUG);; 268 if (fVerboseLevel.CompareTo(""Verbose"") == 0); 269 fLogger->SetMinType(kVERBOSE);; 270 if (fVerboseLevel.CompareTo(""Info"") == 0); 271 fLogger->SetMinType(kINFO);; 272 ; 273 // global settings; 274 gConfig().SetUseColor(color);; 275 gConfig().SetSilent(silent);; 276 gConfig().SetDrawProgressBar(drawProgressBar);; 277 ; 278 analysisType.ToLower();; 279 if (analysisType == ""classification""); 280 fAnalysisType = Types::kClassification;; 281 else if (analysisType == ""regression""); 282 fAnalysisType = Types::kRegression;; 283 else if (analysisType == ""multiclass""); 284 fAnalysisType = Types::kMulticlass;; 285 else if (analysisType == ""auto""); 286 fAnalysisType = Types::kNoAnalysisType;; 287 ; 288 Greetings();; 289}; 290 ; 291////////////////////////////////////////////////////////////////////////////////; 292/// Print welcome message.; 293/// Options are: kLogoWelcomeMsg, kIsometricWelcomeMsg, kLeanWelcomeMsg; 294 ; 295void TMVA::Factory::Greetings(); 296{; 297 gTools().ROOTVersionMessage(Log());; 298 gTools().TMVAWelcomeMessage(Log(), gTools().kLogoWelcomeMsg);; 299 gTools().TMVAVersionMessage(Log());; 300 Log() << Endl;; 301}; 302 ; 303////////////////////////////////////////////////////////////////////////////////; 304/// Destructor.; 305 ; 306TMVA::Factory::~Factory(void); 307{; 308 std::vector<TMVA::VariableTransformBase *>::iterator trfIt = fDefaultTrfs.begin();; 309 for (; trfIt != fDefaultTrfs.end(); ++trfIt); 310 delete (*trfIt);; 311 ; 312 this->DeleteAllMethods();; 313 ; 314 // problem with call of REGISTER_METHOD macro ...; 315 // ClassifierFactory::Destroy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:11848,message,message,11848,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['message'],['message']
Integrability,"on, int *val) override;  Get socket option. ;  ; int GetSysInfo (SysInfo_t *info) const override;  Returns static system info, like OS type, CPU type, number of CPUs RAM size, etc into the SysInfo_t structure. ;  ; Int_t GetUid (const char *user=nullptr) override;  Returns the user's id. If user = 0, returns current user's id. ;  ; UserGroup_t * GetUserInfo (const char *user=nullptr) override;  Returns all user info in the UserGroup_t structure. ;  ; UserGroup_t * GetUserInfo (Int_t uid) override;  Returns all user info in the UserGroup_t structure. ;  ; std::string GetWorkingDirectory () const override;  Return working directory. ;  ; const char * HomeDirectory (const char *userName=nullptr) override;  Return the user's home directory. ;  ; const char * HostName () override;  Return the system's host name. ;  ; void IgnoreSignal (ESignals sig, Bool_t ignore=kTRUE) override;  If ignore is true ignore the specified signal, else restore previous behaviour. ;  ; Bool_t Init () override;  Initialize Unix system interface. ;  ; TClass * IsA () const override;  ; Bool_t IsPathLocal (const char *path) override;  Returns TRUE if the url in 'path' points to the local file system. ;  ; int Link (const char *from, const char *to) override;  Create a link from file1 to file2. ;  ; void ListLibraries (const char *regexp="""") override;  List all loaded shared libraries. ;  ; void ListSymbols (const char *module, const char *re="""") override;  List symbols in a shared library. ;  ; int Load (const char *module, const char *entry="""", Bool_t system=kFALSE) override;  Load a shared library. ;  ; int MakeDirectory (const char *name) override;  Make a Unix file system directory. ;  ; TTime Now () override;  Get current time in milliseconds since 0:00 Jan 1 1995. ;  ; int OpenConnection (const char *server, int port, int tcpwindowsize=-1, const char *protocol=""tcp"") override;  Open a connection to a service on a server. ;  ; void * OpenDirectory (const char *name) override;  Open a Unix fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:7521,interface,interface,7521,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,2,['interface'],['interface']
Integrability,"on, using the Kolmogorov test.; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively.; The elements of a and b must be given in ascending order.; option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a; statistical test for compatibility of a and b.; Values of prob close to zero are taken as indicating a small probability; of compatibility. For two point sets drawn randomly from the same parent; distribution, the value of prob should be uniformly distributed between; zero and one.; in case of error the function return -1; If the 2 sets have a different number of points, the minimum of; the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation; between the two integrated distribution functions, multiplied by the; normalizing factor (rdmax*sqrt(na*nb/(na+nb)). Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; Statistical Methods in Experimental Physics, (North-Holland,; Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov). The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; over the two sorted arrays a and b representing empirical distribution; functions. The for-loop handles 3 cases: when the next points to be; evaluated satisfy a>b, a<b, or a=b:. for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }. For the last case,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:18402,integrat,integrated,18402,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['integrat'],['integrated']
Integrability,"on. ; It prints the message on stderr and if abort is set it aborts the application. ; Definition at line 1088 of file TApplicationServer.cxx. ◆ ExecLogon(). void TApplicationServer::ExecLogon ; (; ). private . Execute logon macro's. ; There are three levels of logon macros that will be executed: the system logon etc/system.rootlogon.C, the global user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward compatibility also the logon macro as specified by the Rint.Logon environment setting, by default ./rootlogon.C, will be executed. No logon macros will be executed when the system is started with the -n option. ; Definition at line 1277 of file TApplicationServer.cxx. ◆ GetHost(). const char * TApplicationServer::GetHost ; (; ); const. inline . Definition at line 73 of file TApplicationServer.h. ◆ GetOptions(). void TApplicationServer::GetOptions ; (; Int_t * ; argc, . char ** ; argv . ). overridevirtual . Get and handle command line options. ; Fixed format: ""protocol url"" ; Reimplemented from TApplication.; Definition at line 449 of file TApplicationServer.cxx. ◆ GetPort(). Int_t TApplicationServer::GetPort ; (; ); const. inline . Definition at line 71 of file TApplicationServer.h. ◆ GetProtocol(). Int_t TApplicationServer::GetProtocol ; (; ); const. inline . Definition at line 70 of file TApplicationServer.h. ◆ GetSocket(). TSocket * TApplicationServer::GetSocket ; (; ); const. inline . Definition at line 74 of file TApplicationServer.h. ◆ GetUser(). const char * TApplicationServer::GetUser ; (; ); const. inline . Definition at line 72 of file TApplicationServer.h. ◆ HandleCheckFile(). void TApplicationServer::HandleCheckFile ; (; TMessage * ; mess). protected . Handle file checking request. ; Definition at line 1058 of file TApplicationServer.cxx. ◆ HandleSigPipe(). void TApplicationServer::HandleSigPipe ; (; ). Called when the client is not alive anymore (i.e. ; when kKeepAlive has failed). ; Definition at line 696 of file TApplicationServer.cxx. ◆ Ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:25996,protocol,protocol,25996,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['protocol'],['protocol']
Integrability,"on. ; Reimplemented from RooAbsPdf.; Definition at line 83 of file RooBinSamplingPdf.h. ◆ getMaxVal(). Int_t RooBinSamplingPdf::getMaxVal ; (; const RooArgSet & ; vars); const. inlineoverridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Definition at line 95 of file RooBinSamplingPdf.h. ◆ initGenerator(). void RooBinSamplingPdf::initGenerator ; (; Int_t ; code). inlineoverridevirtual . Forwards to the PDF's implementation. ; Reimplemented from RooAbsPdf.; Definition at line 87 of file RooBinSamplingPdf.h. ◆ integrate(). double RooBinSamplingPdf::integrate ; (; const RooArgSet * ; normSet, . double ; low, . double ; high . ); const. private . Integrate the wrapped PDF using our current integrator, with given norm set and limits. ; Definition at line 302 of file RooBinSamplingPdf.cxx. ◆ integrator(). std::unique_ptr< ROOT::Math::IntegratorOneDim > & RooBinSamplingPdf::integrator ; (; ); const. Direct access to the unique_ptr holding the integrator that's used to sample the bins. ; This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; Example: Use the 61-point Gauss-Kronrod integration rule; ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; intOptions.SetNPoints(6); // 61-point integration rule; intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; pdf.integrator()->SetOptions(intOptions);; ROOT::Math::BaseIntegratorOptions::SetRelTolerancevoid SetRelTolerance(double tol)set the relative toleranceDefinition IntegratorOptions.h:80; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:86400,wrap,wrapped,86400,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,2,"['integrat', 'wrap']","['integrator', 'wrapped']"
Integrability,"on. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:6021,message,messages,6021,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['message'],['messages']
Integrability,"on. Must be implemented by derived classes; 139 virtual double DoEval(double x) const = 0;; 140 };; 141 ; 142 ; 143//-------- GRAD functions---------------------------; 144 ; 145 ; 146 ; 147//___________________________________________________________________________________; 148 /**; 149 Interface (abstract class) for multi-dimensional functions providing a gradient calculation.; 150 The method ROOT::Math::IFunction::Gradient calculates the full gradient vector,; 151 ROOT::Math::IFunction::Derivative calculates the partial derivative for each coordinate and; 152 ROOT::Math::Fdf calculates the gradient and the function value at the same time.; 153 The pure private virtual method DoDerivative() must be implemented by the derived classes, while; 154 Gradient and FdF are by default implemented using DoDerivative, butthey can be overloaded by the; 155 derived classes to improve the efficiency in the derivative calculation.; 156 ; 157 Gradient interface (abstract class) defining the signature for calculating the gradient of a; 158 multi-dimensional function.; 159 Three methods are provided:; 160 - Gradient(const double *x, double * grad) evaluate the full gradient vector at the vector value x; 161 - Derivative(const double * x, int icoord) evaluate the partial derivative for the icoord coordinate; 162 - FdF(const double *x, double &f, double * g) evaluate at the same time gradient and function/; 163 ; 164 @ingroup GenFunc; 165 */; 166 ; 167 template <class T>; 168 class IGradientFunctionMultiDimTempl : virtual public IBaseFunctionMultiDimTempl<T> {; 169 ; 170 public:; 171 typedef IBaseFunctionMultiDimTempl<T> BaseFunc;; 172 typedef IGradientFunctionMultiDimTempl<T> BaseGrad;; 173 ; 174 ; 175 /// Evaluate all the vector of function derivatives (gradient) at a point x.; 176 /// Derived classes must re-implement it if more efficient than evaluating one at a time; 177 virtual void Gradient(const T *x, T *grad) const; 178 {; 179 unsigned int ndim = NDim();; 180 for (unsigned i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:6311,interface,interface,6311,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['interface'],['interface']
Integrability,"on.h. Member Function Documentation. ◆ DoEval(). double ROOT::Math::IParametricFunctionOneDim::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionOneDim.; Reimplemented in ROOT::Math::WrappedTF1, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile.; Definition at line 203 of file IParamFunction.h. ◆ DoEvalPar(). virtual double ROOT::Math::IParametricFunctionOneDim::DoEvalPar ; (; double ; x, . const double * ; p . ); const. privatepure virtual . Implementation of the evaluation function using the x value and the parameters. ; Must be implemented by derived classes ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::Polynomial, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile. ◆ operator()() [1/2]. double ROOT::Math::IParametricFunctionOneDim::operator() ; (; const double * ; x, . const double * ; p . ); const. inline . multidim-like interface ; Definition at line 187 of file IParamFunction.h. ◆ operator()() [2/2]. double ROOT::Math::IParametricFunctionOneDim::operator() ; (; double ; x, . const double * ; p . ); const. inline . Evaluate function at a point x and for given parameters p. ; This method does not change the internal status of the function (internal parameter values). If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be called. Use the pure virtual function DoEvalPar to implement it ; Definition at line 178 of file IParamFunction.h. Libraries for ROOT::Math::IParametricFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricFunctionOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:3776,interface,interface,3776,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,1,['interface'],['interface']
Integrability,"on; BayesianCalculator(); default constructor. BayesianCalculator( /* const char* name, const char* title, */ RooAbsData& data, RooAbsPdf& pdf,						 const RooArgSet& POI,						 RooAbsPdf& priorPOI,						 const RooArgSet* nuisanceParameters ); TNamed( TString(name), TString(title) ),; constructor. BayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); constructor from Model Config. ~BayesianCalculator(); destructor. void ClearAll() const; clear cached pdf objects. void SetModel(const RooStats::ModelConfig& model); set the model. RooAbsReal* GetPosteriorFunction() const; build and return the posterior function (not normalized) as a RooAbsReal; the posterior is obtained from the product of the likelihood function and the; prior pdf which is then intergated in the nuisance parameters (if existing).; A prior function for the nuisance can be specified either in the prior pdf object; or in the model itself. If no prior nuisance is specified, but prior parameters are then; the integration is performed assuming a flat prior for the nuisance parameters. RooAbsPdf* GetPosteriorPdf() const; build and return the posterior pdf (i.e posterior function normalized to all range of poi; NOTE: user must delete the returned object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region. void SetIntegrationType(const char* type). SimpleInterval* GetInterval() const; returns a SimpleInterval with lower and upper bounds on the; parameter of interest specified in the constructor.; Using the method (to be called before SetInterval) SetLeftSideTailFraction the user can choose the type of interval.; By default the returned interval is a central interval with the confidence level specified; previously in the constructor ( LeftSideTailFraction = 0.5).; For lower limit use SetLeftSideTailFraction = 1; For upper limit use SetLeftSideTailFraction = 0; for shortest intervals use SetLeftSideTailFraction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BayesianCalculator.html:8897,integrat,integration,8897,root/html528/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__BayesianCalculator.html,1,['integrat'],['integration']
Integrability,on; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooProofDriverSelector ; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Quasi-random number generator; RooRandom Random number generator interface; RooRandomizeParamMCSModule MCStudy module to vary one or more input parameters during fit/generation cycle; RooRangeBinning Binning that only defines the total range; RooRangeBoolean Polynomial function; RooRealAnalytic Function binding to an analytical integral of a RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of R,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:39232,interface,interface,39232,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['interface'],['interface']
Integrability,"on; The text font code is combination of the font number and the precision. Text font code = 10*fontnumber + precision; fontnumberOption_t Option_t fontnumberDefinition TGWin32VirtualXProxy.cxx:60; Font numbers must be between 1 and 14.; The precision can be:. precision = 0 fast hardware fonts (steps in the size); precision = 1 scalable and rotatable hardware fonts (see below); precision = 2 scalable and rotatable hardware fonts; precision = 3 scalable and rotatable hardware fonts. Text size is given in pixels. The text font and precision of any class inheriting from TAttText can be changed using the method SetTextFont and retrieved using the method GetTextFont. Font quality and speed; When precision 0 is used, only the original non-scaled X11 system fonts are used. The fonts have a minimum (4) and maximum (37) size in pixels. These fonts are fast and are of good quality. Their size varies with large steps and they cannot be rotated. Precision 1 and 2 fonts have a different behaviour depending if the True Type Fonts (TTF) are used or not. If TTF are used, you always get very good quality scalable and rotatable fonts. These days TTF fonts are rendered fast enough and can be used in all cases. How to use True Type Fonts; TTF fonts are used by default. They can be deactivated via the following line in the .rootrc file:; Unix.*.Root.UseTTFonts: false. List of the currently supported fonts; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; TTF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttText.html:8747,depend,depending,8747,doc/master/classTAttText.html,https://root.cern,https://root.cern/doc/master/classTAttText.html,1,['depend'],['depending']
Integrability,"on;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:20692,interface,interface,20692,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['interface'],['interface']
Integrability,"onLength ();  Compute Radiation Length based on Geant4 formula. ;  ; TGeoMaterial * DecayMaterial (Double_t time, Double_t precision=0.001) override;  Create the mixture representing the decay product of this material at a given time. ;  ; void DefineElement (Int_t iel, Double_t a, Double_t z, Double_t weight);  ; void DefineElement (Int_t iel, Int_t z, Int_t natoms);  Define the mixture element at index iel by number of atoms in the chemical formula. ;  ; void DefineElement (Int_t iel, TGeoElement *elem, Double_t weight);  ; void FillMaterialEvolution (TObjArray *population, Double_t precision=0.001) override;  Fills a user array with all the elements deriving from the possible decay of the top elements composing the mixture. ;  ; Double_t * GetAmixt () const;  ; Int_t GetByteCount () const override;  ; TGeoElement * GetElement (Int_t i=0) const override;  Retrieve the pointer to the element corresponding to component I. ;  ; void GetElementProp (Double_t &a, Double_t &z, Double_t &w, Int_t i=0) override;  Single interface to get element properties. ;  ; Int_t GetNelements () const override;  ; Int_t * GetNmixt () const;  ; Double_t GetSpecificActivity (Int_t i=-1) const override;  Get specific activity (in Bq/gram) for the whole mixture (no argument) or for a given component. ;  ; Double_t * GetWmixt () const;  ; Double_t * GetZmixt () const;  ; TClass * IsA () const override;  ; Bool_t IsEq (const TGeoMaterial *other) const override;  Return true if the other material has the same physical properties. ;  ; Bool_t IsMixture () const override;  ; void Print (const Option_t *option="""") const override;  print characteristics of this material ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetA (Double_t a) override;  ; void SetDensity (Double_t density) override;  ; void SetZ (Double_t z) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMixture.html:2363,interface,interface,2363,doc/master/classTGeoMixture.html,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html,1,['interface'],['interface']
Integrability,"onOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values (multi-dim like interface) ; Definition at line 377 of file IParamFunction.h. ◆ ParameterGradient() [3/4]. virtual void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . const double * ; p, . double * ; grad . ); const. inlinevirtual . Evaluate the derivatives of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency if needed ; Reimplemented in ROOT::Math::WrappedTF1.; Definition at line 351 of file IParamFunction.h. ◆ ParameterGradient() [4/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values. ; Definition at line 361 of file IParamFunction.h. Libraries for ROOT::Math::IParametricGradFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricGradFunctionOneD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:7131,interface,interface,7131,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,1,['interface'],['interface']
Integrability,"onOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. ROOT::Math::IGenFunction*fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:4040,integrat,integrator,4040,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,2,"['integrat', 'interface']","['integrator', 'interface']"
Integrability,"onOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenCategory Generic category-to-category function based on user supplied mapping function; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function ; RooLinkedList Doubly linked list for storage of RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:36694,integrat,integration,36694,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,3,['integrat'],['integration']
Integrability,"onProxy();; 5446 // We are not at top-level branch.; 5447 fObject = fAddress;; 5448 } else if (fID < 0) {; 5449 // -- We are a top-level branch.; 5450 char** pp = (char**) fAddress;; 5451 if (pp && *pp) {; 5452 // -- Caller provided an i/o buffer for us to use.; 5453 fObject = *pp;; 5454 } else {; 5455 // -- Caller did not provide an i/o buffer for us to use, we must make one for ourselves.; 5456 if (clOfBranch) {; 5457 if (!pp) {; 5458 // -- Caller wants us to own the object.; 5459 SetBit(kDeleteObject);; 5460 }; 5461 fObject = (char*) clOfBranch->New();; 5462 if (pp) {; 5463 *pp = fObject;; 5464 } else {; 5465 fAddress = (char*) &fObject;; 5466 }; 5467 } else {; 5468 Error(""SetAddress"", ""I have no TClass for branch %s, so I cannot allocate an I/O buffer!"", GetName());; 5469 if (pp) {; 5470 fObject = nullptr;; 5471 *pp = nullptr;; 5472 }; 5473 }; 5474 }; 5475 } else {; 5476 // -- We are *not* a top-level branch.; 5477 fObject = fAddress;; 5478 }; 5479 ; 5480 if (!info) {; 5481 // FIXME: We need and error message here, no streamer info, so cannot set offsets.; 5482 return;; 5483 }; 5484 ; 5485 // We do this only once because it depends only on; 5486 // the type of our object, not on its address.; 5487 if (!fInitOffsets) {; 5488 InitializeOffsets();; 5489 }; 5490 ; 5491 // We are split, recurse down to our sub-branches.; 5492 //; 5493 // FIXME: This is a tail recursion, we burn stack.; 5494 Int_t nbranches = fBranches.GetEntriesFast();; 5495 for (Int_t i = 0; i < nbranches; ++i) {; 5496 TBranch *abranch = (TBranch*) fBranches.UncheckedAt(i);; 5497 // FIXME: This is a tail recursion!; 5498 if (fBranchOffset[i] != TStreamerInfo::kMissing && !(implied && abranch->TestBit(kAddressSet))) {; 5499 abranch->SetAddressImpl(fObject + fBranchOffset[i], implied);; 5500 abranch->SetBit(kAddressSet);; 5501 if (TestBit(kDecomposedObj) != abranch->TestBit(kDecomposedObj)); 5502 abranch->SetMakeClass(TestBit(kDecomposedObj));; 5503 } else {; 5504 // When the member is missing, just le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:203462,message,message,203462,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['message'],['message']
Integrability,onSigmoid;  Sigmoid activation function for TNeuron. More...;  ; class  TMVA::TActivationTanh;  Tanh activation function for ANN. More...;  ; class  TMVA::Timer;  Timing information for training and evaluation of MVA methods. More...;  ; class  TMVA;  Base Class for all classes that need option parsing. More...;  ; class  TMVA::TNeuron;  Neuron class used by TMVA artificial neural network methods. More...;  ; class  TMVA::TNeuronInput;  Interface for TNeuron input calculation classes. More...;  ; class  TMVA::TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TMVA::TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TMVA::TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TMVA::TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  TMVA::Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TMVA::TrainingHistory;  Tracking data from training. More...;  ; class  TMVA::TransformationHandler;  Class that contains all the data information. More...;  ; class  TMVA::TSpline1;  Linear interpolation of TGraph. More...;  ; class  TMVA::TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TMVA::TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; class  TMVA::Types;  Singleton class for Global types used by TMVA. More...;  ; class  TMVA::VariableDecorrTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  TMVA::VariableIdentityTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableImportance;  ; class  TMVA::VariableImportanceResult;  ; class  TMVA::VariableInfo;  Class for type info of MVA input variable. More...;  ; class  TMVA::VariableNormalizeTransform;  Line,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TMVA.html:14172,rout,routines,14172,doc/master/group__TMVA.html,https://root.cern,https://root.cern/doc/master/group__TMVA.html,1,['rout'],['routines']
Integrability,"on_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::Popvirtual void Pop()Pop on object drawn in a pad to the top of the display list.Definition TObject.cxx:621; TObject::kNoContextMenu@ kNoContextMenuif object does not want context menuDefinition TObject.h:69; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPadPainterImplement TVirtualPadPainter which abstracts painting operations.Definition TPadPainter.h:26; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::GetBorderModeShort_t GetBorderMode() const overrideDefinition TPad.h:199; TPad::SetBorderSizevoid SetBorderSize(Short_t bordersize) overrideDefinition TPad.h:326; TPad::GetTickyInt_t GetTicky() const overrideDefinition TPad.h:239; TPad::PaintBordervoid PaintBorder(Color_t color, Bool_t tops)Paint the pad border.Definition TPad.cxx:3644; TPad::ResizePadvoid ResizePad(Option_t *option="""") overrideCompute pad conversion coefficients.Definition TPad.cxx:5624; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TPad::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitives in this pad on the C++ source file out.Definition TPad.cxx:5847; TPad::GetGridxBool_t GetGridx() const overrideDefinit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:122348,message,message,122348,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['message'],['message']
Integrability,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:6540,integrat,integration,6540,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,3,['integrat'],['integration']
Integrability,"onal function (not used here). void DrawFaceMove1(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); Draw face - 1st variant for ""MOVING SCREEN"" algorithm. Function: Draw face - 1st variant for ""MOVING SCREEN"" algorithm; (draw face with level lines). References: FindLevelLines, WCtoNDC,; FindVisibleDraw, ModifyScreen. Input: ICODES(*) - set of codes for the line (not used); ICODES(1) - IX; ICODES(2) - IY; XYZ(3,*) - coordinates of nodes; NP - number of nodes; IFACE(NP) - face; TT(NP) - additional function defined on this face; (not used in this routine). void DrawFaceMove3(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); Draw face - 3rd variant for ""MOVING SCREEN"" algorithm. Function: Draw face - 1st variant for ""MOVING SCREEN"" algorithm; (draw level lines only). References: FindLevelLines, WCtoNDC,; FindVisibleDraw, ModifyScreen. Input: ICODES(*) - set of codes for the line (not used); ICODES(1) - IX; ICODES(2) - IY; XYZ(3,*) - coordinates of nodes; NP - number of nodes; IFACE(NP) - face; TT(NP) - additional function defined on this face; (not used in this routine). void DrawFaceMove2(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); Draw face - 2nd variant for ""MOVING SCREEN"" algorithm. Function: Draw face - 2nd variant for ""MOVING SCREEN"" algorithm; (draw face for stacked lego plot). References: FindLevelLines, WCtoNDC,; FindVisibleDraw, ModifyScreen. Input: ICODES(*) - set of codes for the line (not used); ICODES(1) - IX; ICODES(2) - IY; ICODES(3) - line code (N of lego); XYZ(3,*) - coordinates of nodes; NP - number of nodes; IFACE(NP) - face; TT(NP) - additional function defined on this face; (not used in this routine). void DrawFaceRaster1(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); Draw face - 1st variant for ""RASTER SCREEN"" algorithm. Function: Draw face - 1st variant for ""RASTER SCREEN"" algorithm; (draw face with level lines). References: FindLevelLines, WCtoNDC,; FindVisibleLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPainter3dAlgorithms.html:17661,rout,routine,17661,root/html528/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html528/TPainter3dAlgorithms.html,6,['rout'],['routine']
Integrability,"onal minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  ROOT::Math::GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  ROOT::Math::GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  ROOT::Math::GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  ROOT::Math::GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  ROOT::Math::GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  ROOT::Math::LSResidualFunc< Func >;  LSResidualFunc class description. More...;  ; class  ROOT::Math::Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  ROOT::Math::MinimizerOptions;  Minimizer options. More...;  ; class  ROOT::Math::MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  ROOT::Math::MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  ROOT::Math::MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  ROOT::Math::MultiNumGradFunction;  MultiNumGradFuncti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MultiMin.html:2699,interface,interface,2699,doc/master/group__MultiMin.html,https://root.cern,https://root.cern/doc/master/group__MultiMin.html,1,['interface'],['interface']
Integrability,"once and produce all results in one go.; 461 ; 462### Going parallel; 463Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores.; 464The only modification required to the snippets would be the addition of this line *before* constructing the main; 465dataframe object:; 466~~~{.cpp}; 467ROOT::EnableImplicitMT();; 468~~~; 469Simple as that. More details are given [below](#parallel-execution).; 470 ; 471\anchor collections; 472## Working with collections and object selections; 473 ; 474RDataFrame reads collections as the special type [ROOT::RVec](https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html): for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; 475 ; 476RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; 477 ; 478For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; 479 ; 480~~~{.cpp}; 481// h is filled with all the elements of `good_pts`, for each event; 482auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 483 .Histo1D(""good_pts"");; 484~~~; 485 ; 486And in Python:; 487 ; 488~~~{.py}; 489h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 490~~~; 491 ; 492Learn more at ROOT::VecOps::RVec.; 493 ; 494\anchor transformations; 495## Transformations: manipulating data; 496\anchor Filters; 497### Filters; 498A filter is created through a call to `Filter(f, columnList)` or `Filter(filterString)`. In the first overload, `f` can; 499be a function, a lambda expression, a functor class, or any other callable object. It mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:29055,interface,interface,29055,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['interface'],['interface']
Integrability,"once and produce all results in one go.; 501 ; 502### Going parallel; 503Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores.; 504The only modification required to the snippets would be the addition of this line *before* constructing the main; 505dataframe object:; 506~~~{.cpp}; 507ROOT::EnableImplicitMT();; 508~~~; 509Simple as that. More details are given [below](#parallel-execution).; 510 ; 511\anchor collections; 512## Working with collections and object selections; 513 ; 514RDataFrame reads collections as the special type [ROOT::RVec](https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html): for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; 515 ; 516RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; 517 ; 518For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; 519 ; 520~~~{.cpp}; 521// h is filled with all the elements of `good_pts`, for each event; 522auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 523 .Histo1D(""good_pts"");; 524~~~; 525 ; 526And in Python:; 527 ; 528~~~{.py}; 529h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 530~~~; 531 ; 532Learn more at ROOT::VecOps::RVec.; 533 ; 534\anchor transformations; 535## Transformations: manipulating data; 536\anchor Filters; 537### Filters; 538A filter is created through a call to `Filter(f, columnList)` or `Filter(filterString)`. In the first overload, `f` can; 539be a function, a lambda expression, a functor class, or any other callable object. It mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:30695,interface,interface,30695,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['interface'],['interface']
Integrability,"oncrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& model); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~HypoTestCalculator(); {}. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetCommonModel(const RooStats::ModelConfig& model); Set a common model for both the null and alternate, add to the the workspace if not already there. SetNullModel(const RooStats::ModelConfig& model). SetAlternateModel(const RooStats::ModelConfig& model). void SetData(RooAbsData& data); Set the DataSet. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestCalculator.html:2363,interface,interface,2363,root/html534/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestCalculator.html,1,['interface'],['interface']
Integrability,"ond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeConfigParameters Interface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDecisionTree Decision tree like PDEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:107059,interface,interface,107059,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,2,['interface'],['interface']
Integrability,"onding TAxisBase-derived object ;  CAxisConfigToType< TAxisConfig::kEquidistant >;  CAxisConfigToType< TAxisConfig::kGrow >;  CAxisConfigToType< TAxisConfig::kIrregular >;  CAxisConfigToType< TAxisConfig::kLabels >;  CTDirectoryEntry;  CTFillBinCoordFill coord with low bin edge or center or high bin edge of all axes ;  CTFillBinCoord<-1, COORD, AXES >;  CTFillIterRangeFill range with begin() and end() of all axes, including under/overflow as specified by over ;  CTFillIterRange<-1, AXES >;  CTGetBinCount;  CTGetBinCount< 0, AXES >;  CTGetBinIndex;  CTGetBinIndex<-1, HISTIMPL, AXES, GROW >;  CTHistBufferedFillBase;  CTHistImplGenGenerate THist::fImpl from THist constructor arguments ;  CTHistImplGen< NDIM, NDIM, DATA, PROCESSEDAXISCONFIG... >Generate THist::fImpl from constructor arguments; recursion end ;  CTHistPainterBase;  CTIndexIterIterates over an index; the REFERENCE is defined by the REFERENCE template parameter ;  CTObjectDrawableProvides v7 drawing facilities for TObject types (TGraph etc) ;  CTObjectDrawingOptsFor TObject ;  CTPadHorizVertA 2D (horizontal and vertical) combination of TPadLengths ;  CTPadPainterAbstract interface for object painting on the pad/canvas ;  CTPadUserAxisBaseBase class for user coordinates (e.g ;  ►CTUniWeakPtr;  CAccessorGives transparent access to the shared or unique pointer ;  ►CTVirtualCanvasPainterAbstract interface for painting a canvas ;  CGenerator;  ►CTAxisBaseHistogram axis base class ;  Cconst_iteratorRandom const_iterator through bins ;  ►CTAxisConfigObjects used to configure the different axis types ;  CGrow_tTag type signalling that an axis should be able to grow; used for calling the appropriate constructor ;  CTAxisEquidistantAxis with equidistant bin borders ;  CTAxisGrowAn axis that can extend its range, keeping the number of its bins unchanged ;  CTAxisIrregularAn axis with non-equidistant bins (also known as ""variable binning"") ;  CTAxisLabelsA TAxisGrow that has a label assigned to each bin and a bin width",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:17696,interface,interface,17696,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['interface'],['interface']
Integrability,"onding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:11955,message,message,11955,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,2,['message'],['message']
Integrability,"one in main ROOT thread, where analysis code is running. void ProcessRequests(); Process requests, submitted for execution; Regularly invoked by THttpTimer, when somewhere in the code; gSystem->ProcessEvents() is called.; User can call serv->ProcessRequests() directly, but only from main analysis thread. void ProcessRequest(THttpCallArg* arg); Process single http request; Depending from requested path and filename different actions will be performed.; In most cases information is provided by TRootSniffer class. Bool_t Register(const char* subfolder, TObject* obj); Register object in folders hierarchy. See TRootSniffer::RegisterObject() for more details. Bool_t Unregister(TObject* obj); Unregister object in folders hierarchy. See TRootSniffer::UnregisterObject() for more details. void Restrict(const char* path, const char* options); Restrict access to specified object. See TRootSniffer::Restrict() for more details. Bool_t RegisterCommand(const char* cmdname, const char* method, const char* icon = 0); Register command which can be executed from web interface. As method one typically specifies string, which is executed with; gROOT->ProcessLine() method. For instance; serv->RegisterCommand(""Invoke"",""InvokeFunction()"");. Or one could specify any method of the object which is already registered; to the server. For instance:; serv->Register(""/"", hpx);; serv->RegisterCommand(""/ResetHPX"", ""/hpx/->Reset()"");; Here symbols '/->' separates item name from method to be executed. One could specify additional arguments in the command with; syntax like %arg1%, %arg2% and so on. For example:; serv->RegisterCommand(""/ResetHPX"", ""/hpx/->SetTitle(\""%arg1%\"")"");; serv->RegisterCommand(""/RebinHPXPY"", ""/hpxpy/->Rebin2D(%arg1%,%arg2%)"");; Such parameter(s) will be requested when command clicked in the browser. Once command is registered, one could specify icon which will appear in the browser:; serv->SetIcon(""/ResetHPX"", ""rootsys/icons/ed_execute.png"");. One also can set extra property '_fa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpServer.html:13389,interface,interface,13389,root/html534/THttpServer.html,https://root.cern,https://root.cern/root/html534/THttpServer.html,2,['interface'],['interface']
Integrability,"one of the context menu entries for setting line, fill, marker or text attributes. The following object editors are available for the current ROOT version.; 9.7.1 TAxisEditor. This user interface gives the possibility for changing the following axis attributes:. color of the selected axis, the axis’ title and labels;; the length of thick parameters and the possibility to set them on both axis sides (if +- is selected);; to set logarithmic or linear scale along the selected axis with a choice for optimized or more logarithmic labels;; primary, secondary and tertiary axis divisions can be set via the three number fields;; the axis title can be added or edited and the title’s color, position, offset, size and font can be set interactively;; the color, size, and offset of axis labels can be set similarly. In addition, there is a check box for no exponent choice, and another one for setting the same decimal part for all labels. 9.7.2 TPadEditor. It provides the following user interface:; Fixed aspect ratio - can be set for pad resizing.; Edit - sets pad or canvas as editable.; Cross-hair - sets a cross hair on the pad.; TickX - set ticks along the X axis.; TickY - set ticks along the Y axis.; GridX - set a grid along the X axis.; GridY - set a grid along the Y axis.; The pad or canvas border size can be set if a sunken or a raised border mode is; selected; no border mode can be set too. 9.8 Copy and Paste; You can make a copy of a canvas using TCanvas::DrawClonePad. This method is unique to TCanvas. It clones the entire canvas to the active pad. There is a more general method TObject::DrawClone, which all objects descendent of TObject, specifically all graphic objects inherit. Below are two examples, one to show the use of DrawClonePad and the other to show the use of DrawClone.; 9.8.1 Using the GUI; In this example we will copy an entire canvas to a new one with DrawClonePad. Run the script draw2dopt.C.; root[] .x tutorials/hist/draw2dopt.C; This creates a canvas with 2D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:366681,interface,interface,366681,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['interface'],['interface']
Integrability,"one step a volume pointing to a tube segment shape with given medium. ; Definition at line 300 of file TGeoBuilder.cxx. ◆ MakeEltu(). TGeoVolume * TGeoBuilder::MakeEltu ; (; const char * ; name, . TGeoMedium * ; medium, . Double_t ; a, . Double_t ; b, . Double_t ; dz . ). Make in one step a volume pointing to a tube shape with given medium. ; Definition at line 251 of file TGeoBuilder.cxx. ◆ MakeGtra(). TGeoVolume * TGeoBuilder::MakeGtra ; (; const char * ; name, . TGeoMedium * ; medium, . Double_t ; dz, . Double_t ; theta, . Double_t ; phi, . Double_t ; twist, . Double_t ; h1, . Double_t ; bl1, . Double_t ; tl1, . Double_t ; alpha1, . Double_t ; h2, . Double_t ; bl2, . Double_t ; tl2, . Double_t ; alpha2 . ). Make in one step a volume pointing to a twisted trapezoid shape with given medium. ; Definition at line 413 of file TGeoBuilder.cxx. ◆ MakeHype(). TGeoVolume * TGeoBuilder::MakeHype ; (; const char * ; name, . TGeoMedium * ; medium, . Double_t ; rin, . Double_t ; stin, . Double_t ; rout, . Double_t ; stout, . Double_t ; dz . ). Make in one step a volume pointing to a tube shape with given medium. ; Definition at line 267 of file TGeoBuilder.cxx. ◆ MakePara(). TGeoVolume * TGeoBuilder::MakePara ; (; const char * ; name, . TGeoMedium * ; medium, . Double_t ; dx, . Double_t ; dy, . Double_t ; dz, . Double_t ; alpha, . Double_t ; theta, . Double_t ; phi . ). Make in one step a volume pointing to a parallelepiped shape with given medium. ; Definition at line 171 of file TGeoBuilder.cxx. ◆ MakeParaboloid(). TGeoVolume * TGeoBuilder::MakeParaboloid ; (; const char * ; name, . TGeoMedium * ; medium, . Double_t ; rlo, . Double_t ; rhi, . Double_t ; dz . ). Make in one step a volume pointing to a tube shape with given medium. ; Definition at line 284 of file TGeoBuilder.cxx. ◆ MakePcon(). TGeoVolume * TGeoBuilder::MakePcon ; (; const char * ; name, . TGeoMedium * ; medium, . Double_t ; phi, . Double_t ; dphi, . Int_t ; nz . ). Make in one step a volume pointing to a poly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBuilder.html:23390,rout,rout,23390,doc/master/classTGeoBuilder.html,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html,1,['rout'],['rout']
Integrability,"oneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; Bool_tRooResolutionModel::isConvolved(); virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tisDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:20860,message,message,20860,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,2,['message'],['message']
Integrability,"oneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; Bool_tRooResolutionModel::isConvolved(); virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tisDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; virtual Bool_tTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:20606,message,message,20606,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['message'],['message']
Integrability,"onent; w.factory(""SUM::model( Nsig[5000,0,10000]*sig, NBkg[500,0,10000]*bkg )""); ; # Example of RooSimWSTool interface; # ------------------------------------------------------------------; ; # Introduce a flavour tagging category tagCat as observable with 4 states corresponding; # to 4 flavour tagging techniques with different performance that require different; # parameterizations of the fit model; #; # ROOT.RooSimWSTool operation:; # - Make 4 clones of model (for each tagCat) state, will gain an individual; # copy of parameters w, and biasC. The other parameters remain common; # - Make a simultaneous pdf of the 4 clones assigning each to the appropriate; # state of the tagCat index category; ; # ROOT.RooSimWSTool is interfaced as meta-type SIMCLONE in the factory. The $SplitParam(); # argument maps to the SplitParam() named argument in the; # ROOT.RooSimWSTool constructor; w.factory(""SIMCLONE::model_sim( model, $SplitParam({w,dw,biasC},tagCat[Lep,Kao,NT1,NT2]))""); ; # Example of RooCustomizer interface; # -------------------------------------------------------------------; #; # Class ROOT.RooCustomizer makes clones of existing pdfs with certain prescribed; # modifications (branch of leaf node replacements); #; # Here we take our model (the original before ROOT.RooSimWSTool modifications); # and request that the parameter w (the mistag rate) is replaced with; # an expression-based function that calculates w in terms of the Dilution; # parameter D that is defined D = 1-2*w; ; # Make a clone model_D of original 'model' replacing 'w' with; # 'expr('0.5-D/2',D[0,1])'; w.factory(""EDIT::model_D(model, w=expr('0.5-D/2',D[0,1]) )""); ; # Print workspace contents; w.Print(); ; # Make workspace visible on command line; ROOT.gDirectory.Add(w); ; RooWorkspace(w) w contents; ; variables; ---------; (D,NBkg,Nsig,biasC,biasC_Kao,biasC_Lep,biasC_NT1,biasC_NT2,dm,dt,dterr,dw,dw_Kao,dw_Lep,dw_NT1,dw_NT2,fracC,fracT,k,mB0,mes,mixState,sigmB0,sigmaC,sigmaT,tagCat,tagFlav,tau,w,w_Kao,w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf513__wsfactory__tools_8py.html:2443,interface,interface,2443,doc/master/rf513__wsfactory__tools_8py.html,https://root.cern,https://root.cern/doc/master/rf513__wsfactory__tools_8py.html,1,['interface'],['interface']
Integrability,"onents and check if one of them can be extended or must be extended. ;  ; virtual RooDataHist * fillDataHist (RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) const;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized generator context for simultaneous p.d.f.s. ;  ; RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents) override;  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to component p.d.f.s A unique code is assigned to the combined integration capabilities of all associated p.d.f.s. ;  ; RooAbsPdf * getPdf (RooStringView catName) const;  Return the p.d.f associated with the given index category name. ;  ; const RooAbsCategoryLValue & indexCat () const;  ; TClass * IsA () const override;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:5473,integrat,integration,5473,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['integrat'],['integration']
Integrability,"onesArray.h""; #include ""TClass.h""; #include ""TVirtualPad.h""; #include ""TProfile.h""; #include ""TProfile2D.h""; #include ""TTreeFormula.h""; #include ""TTreeFormulaManager.h""; #include ""TStyle.h""; #include ""Foption.h""; #include ""TTreeResult.h""; #include ""TTreeRow.h""; #include ""TPrincipal.h""; #include ""TChain.h""; #include ""TChainElement.h""; #include ""TF1.h""; #include ""TVirtualFitter.h""; #include ""THLimitsFinder.h""; #include ""TSelectorDraw.h""; #include ""TSelectorEntries.h""; #include ""TPluginManager.h""; #include ""TObjString.h""; #include ""TTreeProxyGenerator.h""; #include ""TTreeReaderGenerator.h""; #include ""TTreeIndex.h""; #include ""TChainIndex.h""; #include ""TRefProxy.h""; #include ""TRefArrayProxy.h""; #include ""TVirtualMonitoring.h""; #include ""TTreeCache.h""; #include ""TVirtualMutex.h""; #include ""ThreadLocalStorage.h""; #include ""strlcpy.h""; #include ""snprintf.h""; #include ""HFitInterface.h""; #include ""Fit/BinData.h""; #include ""Fit/UnBinData.h""; #include ""Math/MinimizerOptions.h"". Include dependency graph for TTreePlayer.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Functions; static TString R__GetBranchPointerName (TLeaf *leaf, bool replace=true);  Return the name of the branch pointer needed by MakeClass/MakeSelector. ;  . Variables; R__EXTERN Foption_t Foption;  ; TVirtualFitter * tFitter = nullptr;  . Function Documentation. ◆ R__GetBranchPointerName(). static TString R__GetBranchPointerName ; (; TLeaf * ; leaf, . bool ; replace = true . ). static . Return the name of the branch pointer needed by MakeClass/MakeSelector. ; Definition at line 647 of file TTreePlayer.cxx. Variable Documentation. ◆ Foption. R__EXTERN Foption_t Foption. Definition at line 98 of file TTreePlayer.cxx. ◆ tFitter. TVirtualFitter* tFitter = nullptr. Definition at line 100",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreePlayer_8cxx.html:1902,depend,dependency,1902,doc/master/TTreePlayer_8cxx.html,https://root.cern,https://root.cern/doc/master/TTreePlayer_8cxx.html,1,['depend'],['dependency']
Integrability,"onfig argument to RooMinimizer constructor. More...;  ; struct  FitResult;  ; class  FitterInterface;  . Public Types; enum  PrintLevel { ;   None = -1; , Reduced = 0; , Normal = 1; , ExtraForProblem = 2; , ;   Maximum = 3. };  ; enum  Strategy { Speed = 0; , Balance = 1; , Robustness = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooMinimizer (RooAbsReal &function, Config const &cfg={});  Construct MINUIT interface to given function. ;  ;  ~RooMinimizer () override;  Destructor. ;  ; void applyCovarianceMatrix (TMatrixDSym const &V);  Apply results of given external covariance matrix. ;  ; void clearStatusHistory ();  Clears the Minuit status history. ;  ; RooPlot * contour (RooRealVar &var1, RooRealVar &var2, double n1=1.0, double n2=2.0, double n3=0.0, double n4=0.0, double n5=0.0, double n6=0.0, unsigned int npoints=50);  Create and draw a TH2 with the error contours in the parameters var1 and var2. ;  ; int evalCounter () const;  ; auto fitter ();  Return underlying ROOT fitter object. ;  ; ROOT::Math::IMultiGenFunction * getMultiGenFcn () const;  ; int getNPar () const;  ; int getPrintLevel ();  Get the MINUIT internal printing level. ;  ; int hesse ();  Execute HESSE. ;  ; int improve ();  Execute IMPROVE. ;  ; TClass * IsA () const override;  ; RooFit::OwningPtr< RooFitResult > lastMinuitFit ();  ; int migrad ();  Execute MIGRAD. ;  ; int min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:2415,interface,interface,2415,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['interface'],['interface']
Integrability,"onfig); Construct an integrator over 'function' where the configuration details; are taken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Dec 7 13:48:10 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCIntegrator.html:9816,integrat,integration,9816,root/html526/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html526/RooMCIntegrator.html,1,['integrat'],['integration']
Integrability,"onfig); Construct an integrator over 'function' where the configuration details; are taken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Jul 4 15:23:17 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMCIntegrator.html:9894,integrat,integration,9894,root/html530/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html530/RooMCIntegrator.html,1,['integrat'],['integration']
Integrability,"onfig); Construct an integrator over 'function' where the configuration details; are taken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Sat Oct 9 06:58:33 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMCIntegrator.html:9825,integrat,integration,9825,root/html528/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html528/RooMCIntegrator.html,1,['integrat'],['integration']
Integrability,"onfig); Construct an integrator over 'function' where the configuration details; are taken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Thu Nov 3 20:08:34 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMCIntegrator.html:9894,integrat,integration,9894,root/html532/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html532/RooMCIntegrator.html,1,['integrat'],['integration']
Integrability,"onfig); Construct an integrator over 'function' where the configuration details; are taken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 2 15:31:58 2015 » Last generated: 2015-06-02 15:31; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMCIntegrator.html:11076,integrat,integration,11076,root/html604/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html604/RooMCIntegrator.html,1,['integrat'],['integration']
Integrability,"onfig); Construct an integrator over 'function' where the configuration details; are taken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 30 14:33:52 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMCIntegrator.html:11076,integrat,integration,11076,root/html602/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html602/RooMCIntegrator.html,1,['integrat'],['integration']
Integrability,"onfig); Construct an integrator over 'function' where the configuration details; are taken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Mar 10 17:17:43 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMCIntegrator.html:9913,integrat,integration,9913,root/html534/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html534/RooMCIntegrator.html,1,['integrat'],['integration']
Integrability,"onfigurable::EnableLooseOptions(Bool_t b = kTRUE); voidForceNetworkCalculations(); voidForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidTMVA::IMethod::GetHelpMessage() const; TMVA::TNeuron*GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tGetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); Float_tTMVA::MethodBase::GetTWeight(const TMVA::Event* ev) const; const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t *const err, Double_t *const errUpper); Int_tNumCycles(); vector<Int_t>*ParseLayoutString(TString layerSpec); voidPrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidWaitForKeyboard(); voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:14069,message,message,14069,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,3,['message'],['message']
Integrability,"onfiguration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPolyVar(); Default constructor. RooPolyVar(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList, Int_t lowestOrder = 0); Construct polynomial in x with coefficients in coefList. If; lowestOrder is not zero, then the first element in coefList is; interpreted as as the 'lowestOrder' coefficients and all; subsequent coeffient elements are shifted by a similar amount. RooPolyVar(const char* name, const char* title, RooAbsReal& x); Constructor of flat polynomial function. RooPolyVar(const RooPolyVar& other, const char* name = 0); Copy constructor. ~RooPolyVar(); Destructor. Double_t evaluate() const; Calculate and return value of polynomial. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Advertise that we can internally integrate over x. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate and return analytical integral over x. TObject* clone(const char* newname) const; { return new RooPolyVar(*this, newname); }. » Last changed: Tue Jun 30 14:34:53 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPolyVar.html:38154,integrat,integrate,38154,root/html602/RooPolyVar.html,https://root.cern,https://root.cern/root/html602/RooPolyVar.html,1,['integrat'],['integrate']
Integrability,"onfigurations for the member wise looping routines ;  CTNestedIDs;  ►Nvecgeom;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CBalancerInfo;  Cbasic_string_view;  CBasicRNNLayerGeneric implementation ;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  Cclient_cert;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  Cfuncptr_and_voidptr_t;  CGcCache_t;  CGCValues_t;  Cgroup;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_cert;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_header;  Cmg_option;  Cmg_request_info;  Cmg_response_info;  Cmg_server_ports;  Cmg_websocket_subprotocols;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  Cpasswd;  CPattern;  CPgSQL_Stmt_t;  CPictureAttributes_t;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:91948,adapter,adapter,91948,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['adapter'],['adapter']
Integrability,"onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClass.html:45331,wrap,wrapper,45331,root/html532/TClass.html,https://root.cern,https://root.cern/root/html532/TClass.html,2,['wrap'],['wrapper']
Integrability,"onfile_class=nullptr) constDefinition TClass.h:607; TClass::fShowMembersShowMembersFunc_t fShowMembersDefinition TClass.h:225; TClass::GetDataMemberTDataMember * GetDataMember(const char *datamember) constReturn pointer to datamember object with name ""datamember"".Definition TClass.cxx:3439; TClass::fIsATVirtualIsAProxy * fIsADefinition TClass.h:229; TClass::GetListOfUsingDataMembersTList * GetListOfUsingDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of using declarations of a class.Definition TClass.cxx:3786; TClass::ForceReloadvoid ForceReload(TClass *oldcl)we found at least one equivalent.Definition TClass.cxx:1336; TClass::fDeleteArrayROOT::DelArrFunc_t fDeleteArrayDefinition TClass.h:238; TClass::CanSplitBool_t CanSplit() constReturn true if the data member of this TClass can be saved separately.Definition TClass.cxx:2319; TClass::fStreamerTClassStreamer * fStreamerDefinition TClass.h:226; TClass::SetDirectoryAutoAddvoid SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc)Install a new wrapper around the directory auto add function.Definition TClass.cxx:7028; TClass::NewArrayvoid * NewArray(Long_t nElements, ENewType defConstructor=kClassNew) constReturn a pointer to a newly allocated array of objects of this class.Definition TClass.cxx:5193; TClass::fNoInfoOrEmuOrFwdDeclNameRegistrystatic TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistryDefinition TClass.h:328; TClass::TGenericClassInfofriend class ROOT::TGenericClassInfoDefinition TClass.h:85; TClass::fFuncTemplateTListOfFunctionTemplates * fFuncTemplateDefinition TClass.h:206; TClass::fStreamerFuncClassStreamerFunc_t fStreamerFuncDefinition TClass.h:241; TClass::AdoptReferenceProxyvoid AdoptReferenceProxy(TVirtualRefProxy *proxy)Adopt the Reference proxy pointer to indicate that this class represents a reference.Definition TClass.cxx:6685; TClass::GetClassMethodTMethod * GetClassMethod(Longptr_t faddr)Look for a method in this class that has the interface function address faddr.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:42639,wrap,wrapper,42639,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"onfile_class=nullptr) constDefinition TClass.h:607; TClass::fShowMembersShowMembersFunc_t fShowMembersDefinition TClass.h:225; TClass::GetDataMemberTDataMember * GetDataMember(const char *datamember) constReturn pointer to datamember object with name ""datamember"".Definition TClass.cxx:3506; TClass::fIsATVirtualIsAProxy * fIsADefinition TClass.h:229; TClass::GetListOfUsingDataMembersTList * GetListOfUsingDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of using declarations of a class.Definition TClass.cxx:3853; TClass::ForceReloadvoid ForceReload(TClass *oldcl)we found at least one equivalent.Definition TClass.cxx:1403; TClass::fDeleteArrayROOT::DelArrFunc_t fDeleteArrayDefinition TClass.h:238; TClass::CanSplitBool_t CanSplit() constReturn true if the data member of this TClass can be saved separately.Definition TClass.cxx:2386; TClass::fStreamerTClassStreamer * fStreamerDefinition TClass.h:226; TClass::SetDirectoryAutoAddvoid SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc)Install a new wrapper around the directory auto add function.Definition TClass.cxx:7095; TClass::NewArrayvoid * NewArray(Long_t nElements, ENewType defConstructor=kClassNew) constReturn a pointer to a newly allocated array of objects of this class.Definition TClass.cxx:5260; TClass::fNoInfoOrEmuOrFwdDeclNameRegistrystatic TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistryDefinition TClass.h:328; TClass::TGenericClassInfofriend class ROOT::TGenericClassInfoDefinition TClass.h:85; TClass::fFuncTemplateTListOfFunctionTemplates * fFuncTemplateDefinition TClass.h:206; TClass::fStreamerFuncClassStreamerFunc_t fStreamerFuncDefinition TClass.h:241; TClass::AdoptReferenceProxyvoid AdoptReferenceProxy(TVirtualRefProxy *proxy)Adopt the Reference proxy pointer to indicate that this class represents a reference.Definition TClass.cxx:6752; TClass::GetClassMethodTMethod * GetClassMethod(Longptr_t faddr)Look for a method in this class that has the interface function address faddr.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:42467,wrap,wrapper,42467,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"ongptr_t faddr)Look for a method in this class that has the interface function address faddr.Definition TClass.cxx:4483; TClass::DetermineCurrentStreamerInfoTVirtualStreamerInfo * DetermineCurrentStreamerInfo()Determine and set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5684; TClass::Browsevoid Browse(TBrowser *b) overrideThis method is called by a browser to get the class information.Definition TClass.cxx:2010; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2886; TClass::AdoptMemberStreamervoid AdoptMemberStreamer(const char *name, TMemberStreamer *strm)Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name.Definition TClass.cxx:6703; TClass::ResetInstanceCountvoid ResetInstanceCount()Definition TClass.h:547; TClass::GetStreamerFuncClassStreamerFunc_t GetStreamerFunc() constGet a wrapper/accessor function around this class custom streamer (member function).Definition TClass.cxx:2939; TClass::RemoveStreamerInfovoid RemoveStreamerInfo(Int_t slot)Remove and delete the StreamerInfo in the given slot.Definition TClass.cxx:7320; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5658; TClass::AddInstancevoid AddInstance(Bool_t heap=kFALSE)Definition TClass.h:381; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3741; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4709; TClass::Newvoid * Ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:44513,wrap,wrapper,44513,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"ongptr_t faddr)Look for a method in this class that has the interface function address faddr.Definition TClass.cxx:4550; TClass::DetermineCurrentStreamerInfoTVirtualStreamerInfo * DetermineCurrentStreamerInfo()Determine and set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5751; TClass::Browsevoid Browse(TBrowser *b) overrideThis method is called by a browser to get the class information.Definition TClass.cxx:2077; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2953; TClass::AdoptMemberStreamervoid AdoptMemberStreamer(const char *name, TMemberStreamer *strm)Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name.Definition TClass.cxx:6770; TClass::ResetInstanceCountvoid ResetInstanceCount()Definition TClass.h:547; TClass::GetStreamerFuncClassStreamerFunc_t GetStreamerFunc() constGet a wrapper/accessor function around this class custom streamer (member function).Definition TClass.cxx:3006; TClass::RemoveStreamerInfovoid RemoveStreamerInfo(Int_t slot)Remove and delete the StreamerInfo in the given slot.Definition TClass.cxx:7387; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5725; TClass::AddInstancevoid AddInstance(Bool_t heap=kFALSE)Definition TClass.h:381; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3808; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4776; TClass::Newvoid * Ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:44341,wrap,wrapper,44341,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"onitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.; TVirtualPerfStats ABC for collecting PROOF statistics; TVirtualProofPlayer Abstract PROOF player; TVirtualStreamerInfo Abstract Interface describing Streamer information for one class; TVirtualTableInterface ; TVirtualTreePlayer Abstract interface for Tree players; TVirtualViewer3D Abstract interface to 3D viewers; TVirtualX ABC defining a generic interface to graphics system; TVolume Description of parameters to position a 3-D geometry object; TVolumePosition Description of parameters to position a 3-D geometry object; TVolumeView Special kind of TDataSet; TVolumeViewIter Volume view iterator; TWbox A window box (box with 3-D effects); TWebFile A ROOT file that reads via a http server; TX11GLManager X11-specific version of TGLManager; TXHandler Template class for handling of async events; TXMLAttr XML attribute pair; TXMLDocument XML document created by the DOM parser; TXMLEngine ROOT XML I/O parser, user by TXMLFile to read/write xml files; TXMLFile ROOT file in XML format; TXMLNode XML node under DOM tree; TXMLParser XML SAX parser; TXMLPlayer Generation of external xml streamers; TXMLSetup settings to be stored in XML files; TXNetFile TFile implementation to deal with new xrootd server.; TXNetFileStager Interface to a 'XRD' staging; TXNetSystem System management class for xrootd servers; TXProofMgr XrdProofd PROOF manager interface; TXProofServ XRD PROOF Server Application Interface; TXSlave Xrd PROOF slave server; TXSocket A high level connection class for PROOF; TXSocketHandler Input handler class for xproofd sockets; TXTRU TXTRU shape; TXUnixSocket Connection class for X",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:125009,interface,interface,125009,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,3,['interface'],['interface']
Integrability,only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; Int_t _basisExp;  ; RooRealProxy _t;  ; RooRealProxy _tau;  ; DecayType _type;  ;  Protected Attributes inherited from RooAbsAnaConvPdf; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDecay.html:64464,integrat,integration,64464,doc/master/classRooDecay.html,https://root.cern,https://root.cern/doc/master/classRooDecay.html,1,['integrat'],['integration']
Integrability,"onnected, while you are sure this is not the case you can force open the file by preceding the option argument with an ""-"", e.g.: ""-recreate"". Do this only in cases when you are very sure nobody else is using the file. To bypass the writelock on a file, to allow the reading of a file that is being written by another process, explicitly specify the ""+read"" option (""read"" being the default option). The netopt argument can be used to specify the size of the tcp window in bytes (for more info see: http://www.psc.edu/networking/perf_tune.html). The default and minimum tcp window size is 65535 bytes. If netopt < -1 then |netopt| is the number of parallel sockets that will be used to connect to rootd. This option should be used on fat pipes (i.e. high bandwidth, high latency links). The ideal number of parallel sockets depends on the bandwidth*delay product. Generally 5-7 is a good number. For a description of the option and other arguments see the TFile ctor. The preferred interface to this constructor is via TFile::Open(). ; Definition at line 659 of file TNetFile.cxx. ◆ Create() [2/2]. void TNetFile::Create ; (; TSocket * ; s, . Option_t * ; option, . Int_t ; netopt . ). protectedvirtual . Create a NetFile object using an existing connection (socket s). ; Provided for use in TNetXNGFile. See: TNetFile::Create(const char *url, Option_t *option, Int_t netopt) for details about the arguments. ; Definition at line 748 of file TNetFile.cxx. ◆ DeclFileName(). static const char * TNetFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TNetFile.h. ◆ Flush(). void TNetFile::Flush ; (; ). overridevirtual . Flush file to disk. ; Reimplemented from TFile.; Definition at line 225 of file TNetFile.cxx. ◆ GetEndpointUrl(). const TUrl * TNetFile::GetEndpointUrl ; (; ); const. inlineoverridevirtual . Reimplemented from TFile.; Definition at line 79 of file TNetFile.h. ◆ GetErrorCode(). Int_t TNetFile::GetErro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:46775,interface,interface,46775,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['interface'],['interface']
Integrability,"onnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←. TDOMParser. TSAXParser. Function documentation; TXMLParser(); Initializes parser variables. ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser(const TXMLParser& ). TXMLParse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLParser.html:11141,message,message,11141,root/html602/TXMLParser.html,https://root.cern,https://root.cern/root/html602/TXMLParser.html,2,['message'],['message']
Integrability,"onrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9121,interface,interface,9121,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['interface'],['interface']
Integrability,"onrodIntegrator1D"").setRealValue(""maxSeg"", 50);; customConfig.getConfigSection(""RooAdaptiveGaussKronrodIntegrator1D"").setCatLabel(""method"", ""15Points"");; ; // Example of how to print set of possible values for ""method"" category; customConfig.getConfigSection(""RooAdaptiveGaussKronrodIntegrator1D"").find(""method"")->Print(""v"");; #endif; ; }; DEBUG#define DEBUGDefinition Polynomial.cxx:40; e#define e(i)Definition RSha256.hxx:103; RooArgSet.h; RooDataSet.h; RooGaussian.h; RooLandau.h; RooNumIntConfig.h; RooPlot.h; RooRealVar.h; TAxis.h; TCanvas.h; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; RooAbsCollection::setRealValuebool setRealValue(const char *name, double newVal=0.0, bool verbose=false)Set value of a RooAbsRealLValue stored in set with given name to newVal No error messages are printed...Definition RooAbsCollection.cxx:999; RooAbsReal::defaultIntegratorConfigstatic RooNumIntConfig * defaultIntegratorConfig()Returns the default numeric integration configuration for all RooAbsReals.Definition RooAbsReal.cxx:3272; RooCategory::setLabelbool setLabel(const char *label, bool printError=true) overrideSet value by specifying the name of the desired state.Definition RooCategory.cxx:186; RooLandauLandau distribution p.d.f.Definition RooLandau.h:24; RooMsgService::instancestatic RooMsgService & instance()Return reference to singleton instance.Definition RooMsgService.cxx:345; RooMsgService::addStreamInt_t addStream(RooFit::MsgLevel level, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Add a message logging stream for message with given RooFit::MsgLevel or higher.Definition RooMsgService.cxx:177; RooNumIntConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumIntConfig.h:25; RooNumIntConfig::Printvoid Print(Option_t *option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:5721,integrat,integration,5721,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,1,['integrat'],['integration']
Integrability,"ons ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CBalancerInfo;  Cbasic_string_view;  CBasicRNNLayerGeneric implementation ;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  Cfuncptr_and_voidptr_t;  CGcCache_t;  CGCValues_t;  CGraphCreatorHelperHelper class that provides the operation graph nodes ;  CGraphNodeClass used to create the operation graph to be printed in the dot representation ;  Cgroup;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CMemInfo_t;  ►CMemPoolForRooSetsMemory pool for RooArgSet and RooDataSet ;  CArena;  Cmg_callbacks;  Cmg_clien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:95290,interface,interface,95290,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['interface'],['interface']
Integrability,"ons ;  CTSpectrumFitAdvanced 1-dimensional spectra fitting functions ;  CTSpectrumTransformAdvanced 1-dimensional orthogonal transform functions ;  CTSPHEA Sphere ;  CTSpiderSpider class ;  CTSpiderEditorThe TSpider editor class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods ;  CTSpline3Class to create third splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives at beginning and ending points ;  CTSpline5Class to create quintic natural splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives using double knots (see BuildCoeff) for more on this ;  CTSplinePolyBase class for TSpline knot ;  CTSplinePoly3Class for TSpline3 knot ;  CTSplinePoly5Class for TSpline5 knot ;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarchical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:205708,interface,interface,205708,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['interface'],['interface']
Integrability,"ons ;  CTSpectrumFitAdvanced 1-dimensional spectra fitting functions ;  CTSpectrumTransformAdvanced 1-dimensional orthogonal transform functions ;  CTSPHEA Sphere ;  CTSpiderSpider class ;  CTSpiderEditorThe TSpider editor class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods ;  CTSpline3Class to create third splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives at beginning and ending points ;  CTSpline5Class to create quintic natural splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives using double knots (see BuildCoeff) for more on this ;  CTSplinePolyBase class for TSpline knot ;  CTSplinePoly3Class for TSpline3 knot ;  CTSplinePoly5Class for TSpline5 knot ;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:196906,interface,interface,196906,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['interface'],['interface']
Integrability,"ons for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:40504,interface,interface,40504,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['interface'],['interface']
Integrability,"ons for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode==AClean ? (flipAClean() ? ADirty : AClean ) : _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueDirty() const. void clearShapeDirty() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:39493,interface,interface,39493,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,1,['interface'],['interface']
Integrability,"ons for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode==AClean ? (flipAClean() ? ADirty : AClean ) : _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. Bool_t redirectServersHook(const RooAbsCollect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsArg.html:39950,interface,interface,39950,root/html528/RooAbsArg.html,https://root.cern,https://root.cern/root/html528/RooAbsArg.html,2,['interface'],['interface']
Integrability,"ons in a number of categories. ; Definition at line 55 of file TGShutter.h. Public Member Functions;  TGShutter (const TGWindow *p=nullptr, UInt_t options=kSunkenFrame);  Create shutter frame. ;  ;  ~TGShutter () override;  Cleanup shutter widget. ;  ; virtual void AddItem (TGShutterItem *item);  Add shutter item to shutter frame. ;  ; virtual TGShutterItem * AddPage (const char *item=""Page"");  Add new page (shutter item) ;  ; virtual void EnableItem (const char *name, Bool_t on=kTRUE);  Disable/enbale shutter item. ;  ; TGDimension GetDefaultSize () const override;  Return the default / minimal size of the widget. ;  ; TGShutterItem * GetItem (const char *name);  returns a shutter item by name (name is hot string of shutter item) ;  ; TGShutterItem * GetSelectedItem () const;  ; Bool_t HandleTimer (TTimer *t) override;  Shutter item animation. ;  ; TClass * IsA () const override;  ; void Layout () override;  Layout shutter items. ;  ; Bool_t ProcessMessage (Longptr_t cmd, Longptr_t parm1, Longptr_t parm2) override;  Handle shutter messages. ;  ; virtual void RemoveItem (const char *name);  Remove item from shutter. ;  ; virtual void RemovePage ();  Remove selected page. ;  ; virtual void RenamePage (const char *name);  Rename selected page. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a shutter widget as a C++ statement(s) on output stream out. ;  ; virtual void Selected (TGShutterItem *item);  ; virtual void SetDefaultSize (UInt_t w, UInt_t h);  Set the default / minimal size of the widget. ;  ; void SetLayoutManager (TGLayoutManager *) override;  Set the layout manager for the composite frame. ;  ; virtual void SetSelectedItem (const char *name);  Set item to be the currently open shutter item. ;  ; virtual void SetSelectedItem (TGShutterItem *item);  Set item to be the currently open shutter item. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGShutter.html:1527,message,messages,1527,doc/master/classTGShutter.html,https://root.cern,https://root.cern/doc/master/classTGShutter.html,1,['message'],['messages']
Integrability,"ons inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TProofOutputFile (const TProofOutputFile &);  ; void AddFile (TFileMerger *merger, const char *path);  Add file to merger, checking the result. ;  ; void Init (const char *path, const char *dsname);  Initializer. Called by all constructors. ;  ; void NotifyError (const char *errmsg);  Notify error message. ;  ; TProofOutputFile & operator= (const TProofOutputFile &);  ; void SetDir (const char *dir, Bool_t raw=kFALSE);  ; void SetFileName (const char *name);  ; void SetMerged (Bool_t merged=kTRUE);  ; void SetWorkerOrdinal (const char *ordinal);  ; void Unlink (const char *path);  Unlink path. ;  . Private Attributes; TFileCollection * fDataSet;  ; TString fDir;  ; TString fFileName;  ; Bool_t fIsLocal;  ; TString fLocalHost;  ; Bool_t fMerged;  ; Bool_t fMergeHistosOneGo;  ; TFileMerger * fMerger;  ; TString fOptionsAnchor;  ; TString fOutputFileName;  ; TString fRawDir;  ; ERunType fRunType;  ; UInt_t fTypeOpt;  ; TString fWorkerOrdinal;  . Friends; class TProof;  ; class TProofPlayer;  ; class TProofPlayerRemote;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputFile.html:12874,message,message,12874,doc/master/classTProofOutputFile.html,https://root.cern,https://root.cern/doc/master/classTProofOutputFile.html,1,['message'],['message']
Integrability,"ons opt, Int_t &val) override;  Get socket options. Returns -1 in case of error. ;  ; Int_t GetSize () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t SetOption (ESockOptions opt, Int_t val) override;  Set socket options. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSocket;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:2426,message,message,2426,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['message'],['message']
Integrability,"ons |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNumGenConfig Class ReferenceRooFit » RooFit Core. ; Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. ; RooRealIntegral and RooAbsPdf use this class in the (normalization) integral configuration interface ; Definition at line 25 of file RooNumGenConfig.h. Public Member Functions;  RooNumGenConfig ();  Constructor. ;  ;  RooNumGenConfig (const RooNumGenConfig &other);  Copy constructor. ;  ;  ~RooNumGenConfig () override;  Destructor. ;  ; bool addConfigSection (const RooAbsNumGenerator *proto, const RooArgSet &defaultConfig);  Add a configuration section for a particular integrator. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  ; RooArgSet & getConfigSection (const char *name);  Return section with configuration parameters for integrator with given (class) name. ;  ; const RooArgSet & getConfigSection (const char *name) const;  Retrieve configuration information specific to integrator with given name. ;  ; TClass * IsA () const override;  ; RooCategory & method1D (bool cond, bool cat);  ; const RooCategory & method1D (bool cond, bool cat) const;  ; RooCategory & method2D (bool cond, bool cat);  ; const RooCategory & method2D (bool cond, bool cat) const;  ; RooCategory & methodND (bool cond, bool cat);  ; const RooCategory & methodND (bool cond, bool cat) const;  ; RooNumGenConfig & operator= (const RooNumGenConfig &other);  Assignment operator from other RooNumGenConfig. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose, TString indent="""") const override;  Detailed printing interface. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:1209,integrat,integrator,1209,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integrator']
Integrability,"ons. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ IsCmdThread(). Bool_t TGWin32VirtualXProxy::IsCmdThread ; (; ); const. overridevirtual . Return kTRUE if we are inside cmd/server thread. ; Reimplemented from TVirtualX.; Definition at line 328 of file TGWin32VirtualXProxy.cxx. ◆ IsDNDAware(). Bool_t TGWin32VirtualXProxy::IsDNDAware ; (; Window_t ; win, . Atom_t * ; typelist . ). overridevirtual . Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ; Reimplemented from TVirtualX. ◆ IsTransparent(). Bool_t TGWin32VirtualXProxy::IsTransparent ; (; ); const. overridevirtual . Reimplemented from TAttFill. ◆ KeysymToKeycode(). Int_t TGWin32VirtualXProxy::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Converts the ""keysym"" to the appropriate keycode. ; For example, keysym is a letter and keycode is the matching keyboard key (which is dependent on the current keyboard mapping). If the specified ""keysym"" is not defined for any keycode, returns zero. ; Reimplemented from TVirtualX. ◆ ListFonts(). char ** TGWin32VirtualXProxy::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:92354,depend,dependent,92354,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['depend'],['dependent']
Integrability,"ons. ; Reimplemented from TBufferIO.; Definition at line 168 of file TMessage.cxx. ◆ TestBitNumber(). Bool_t TMessage::TestBitNumber ; (; UInt_t ; bitnumber); const. inlineprivate . Definition at line 59 of file TMessage.h. ◆ Uncompress(). Int_t TMessage::Uncompress ; (; ). Uncompress the message. ; The message will only be uncompressed when kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. ; Definition at line 389 of file TMessage.cxx. ◆ UsesSchemaEvolution(). Bool_t TMessage::UsesSchemaEvolution ; (; ); const. inline . Definition at line 79 of file TMessage.h. ◆ UsesSchemaEvolutionForAll(). Bool_t TMessage::UsesSchemaEvolutionForAll ; (; ). static . Static function returning status of global schema evolution. ; Definition at line 124 of file TMessage.cxx. ◆ What(). UInt_t TMessage::What ; (; ); const. inline . Definition at line 75 of file TMessage.h. ◆ WriteProcessID(). UShort_t TMessage::WriteProcessID ; (; TProcessID * ; pid). overridevirtual . Check if the ProcessID pid is already in the message. ; If not, then:; mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; mark bit uid+1 where uid id the uid of the ProcessID . Reimplemented from TBufferIO.; Definition at line 438 of file TMessage.cxx. Friends And Related Symbol Documentation. ◆ TAuthenticate. friend class TAuthenticate. friend . Definition at line 35 of file TMessage.h. ◆ TPSocket. friend class TPSocket. friend . Definition at line 38 of file TMessage.h. ◆ TSocket. friend class TSocket. friend . Definition at line 36 of file TMessage.h. ◆ TUDPSocket. friend class TUDPSocket. friend . Definition at line 37 of file TMessage.h. ◆ TXSocket. friend class TXSocket. friend . Definition at line 39 of file TMessage.h. Member Data Documentation. ◆ fBitsPIDs. TBits TMessage::fBitsPIDs. private . Definition at line 43 of file TMessage.h. ◆ fBufComp. char* TMessage::fBufComp {nullptr}. private . Definition at line 47 of file TMessage.h. ◆ fBufCompCur. char* TMessage::fBufCompCur {nullptr}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:47963,message,message,47963,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['message'],['message']
Integrability,"ons. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void FlushOpenGLBuffer (Handle_t ctx);  Flushes OpenGL buffer. ;  ; virtual Handle_t GetCurrentOpenGLContext ();  Asks OpenGL subsystem about the current OpenGL context. ;  ; EDrawMode GetDrawMode ();  ; virtual Int_t GetFontAscent () const;  Returns the ascent of the current font (in pixels). ;  ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:30118,message,messageID,30118,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['message'],['messageID']
Integrability,"ons. It is the easiest way to make your code known to the community, even if it will not be automatically integrated in ROOT. Of course the most successful contributions will become part of the repository!; 2. Sending Patches; You can send us a patch or a pull request with Github, provided that you follow these two simple rules:. Make sure you follow the ROOT coding conventions in your code; Make sure you provide a set of tests for your feature/bug fix. Often it is useful to contact us first to discuss the code you want to develop or the bug you want to fix.; Picking up an Idea; We maintain a set of ""ideas"" for talented scientists and developers to pick up. An ""idea"" is a sketch of a development project, a functionality a missing feature we would like to see in our tool, in your ROOT! You can inspect the ideas in the following list. Ideas. ; 30-01-2019 ; Transform GNU-makefile tests to CMake; ROOT's test suite has several crucial tests that still try on GNU-Makefile. We need to integrate them with CMake. ; 30-01-2019 ; Better argument parsing; Use a C++ command line argument library for defining and parsing ROOT's options. ; 30-01-2019 ; More tests, more benchmarks!; ROOT relies on testing, including performance testing - and we need to improve both. ; 05-01-2016 ; Wanted: A tool to 'warn' user of inefficient (for I/O) construct in data model; A tool to 'warn' user of inefficient (for I/O) construct in data model. ; 02-09-2015 ; Wanted: Storage of HEP data via key/value storage solutions; Interface the ROOT I/O to key/value stores. Completed ideas. ; 28-03-2015 ; Commandline tools for ROOT files inspection, modification and automated plotting; Create a unix-like set of Python command line tools to explore, modify and display the content of ROOT files. . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportFo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/collaborate-with-us.html:3484,integrat,integrate,3484,d/collaborate-with-us.html,https://root.cern,https://root.cern/d/collaborate-with-us.html,1,['integrat'],['integrate']
Integrability,"ons; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3989,integrat,integrator,3989,root/html602/ROOT__Math__IntegratorOneDimOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html,2,['integrat'],['integrator']
Integrability,"ons; virtual ~TSQLStatement ()=default;  ; virtual void Close (Option_t *="""");  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t GetBinary (Int_t, void *&, Long_t &);  ; virtual Int_t GetBufferLength () const =0;  ; virtual Bool_t GetDate (Int_t, Int_t &, Int_t &, Int_t &);  ; TDatime GetDatime (Int_t);  return value of parameter in form of TDatime Be aware, that TDatime does not allow dates before 1995-01-01 ;  ; virtual Bool_t GetDatime (Int_t, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &);  ; Int_t GetDay (Int_t);  return day value for parameter (if applicable) ;  ; virtual Double_t GetDouble (Int_t);  ; virtual Int_t GetErrorCode () const;  returns error code of last operation if res==0, no error Each specific implementation of TSQLStatement provides its own error coding ;  ; virtual const char * GetErrorMsg () const;  returns error message of last operation if no errors, return 0 Each specific implementation of TSQLStatement provides its own error messages ;  ; virtual const char * GetFieldName (Int_t)=0;  ; Int_t GetHour (Int_t);  return hours value for parameter (if applicable) ;  ; virtual Int_t GetInt (Int_t);  ; virtual Bool_t GetLargeObject (Int_t col, void *&mem, Long_t &size);  ; virtual Long_t GetLong (Int_t);  ; virtual Long64_t GetLong64 (Int_t);  ; Int_t GetMinute (Int_t);  return minutes value for parameter (if applicable) ;  ; Int_t GetMonth (Int_t);  return month value for parameter (if applicable) ;  ; virtual Int_t GetNumAffectedRows ();  ; virtual Int_t GetNumFields ()=0;  ; virtual Int_t GetNumParameters ()=0;  ; Int_t GetSecond (Int_t);  return seconds value for parameter (if applicable) ;  ; Int_t GetSecondsFraction (Int_t);  return seconds fraction value for parameter (if applicable) ;  ; virtual const char * GetString (Int_t);  ; virtual Bool_t GetTime (Int_t, Int_t &, Int_t &, Int_t &);  ; TDatime GetTimestamp (Int_t);  return value of parameter in form of TDatime Be aware, that TDatime does not allow dates be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStatement.html:1384,message,messages,1384,doc/master/classTSQLStatement.html,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html,1,['message'],['messages']
Integrability,"ons={""nprocs"":4,},; ); ```; ; Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:; ; ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```; ; In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2) each using only; 1 core (threads_per_worker=1) and 2GiB of RAM (memory_limit=""2GiB"").; """"""; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB""); client = Client(cluster); return client; ; ; # This tutorial uses Python multiprocessing, so the creation of the cluster; # needs to be wrapped in the main clause as described in the Python docs; # https://docs.python.org/3/library/multiprocessing.html; if __name__ == ""__main__"":; ; # Create the connection to the mock Dask cluster on the local machine; connection = create_connection(); # Create an RDataFrame that will use Dask as a backend for computations; df = RDataFrame(1000, daskclient=connection); ; # Set the random seed and define two columns of the dataset with random numbers.; ROOT.gRandom.SetSeed(1); df_1 = df.Define(""gaus"", ""gRandom->Gaus(10, 1)"").Define(""exponential"", ""gRandom->Exp(10)""); ; # Book an histogram for each column; h_gaus = df_1.Histo1D((""gaus"", ""Normal distribution"", 50, 0, 30), ""gaus""); h_exp = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""); ; # Plot the histograms side by side on a canvas; c = ROOT.TCanvas(""distrdf002"", ""distrdf002"", 800, 400); c.Divide(2, 1); c.cd(1); h_gaus.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/distrdf002__dask__connection_8py.html:3510,wrap,wrapped,3510,doc/master/distrdf002__dask__connection_8py.html,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html,1,['wrap'],['wrapped']
Integrability,"onsequences. For this reason, altering pushed tags is emphatically discouraged: create a new tag. However, since you're going to ignore me and do it anyway, here's how to do what you want without getting into too much of a mess:. To remove an erroneous tag, someone with the manager rôle on the project must log into cdcvsdirectly as the repository user (e.g. p-art), cd to the bare repository with cd /cvs/projects/<project> and then remove the tag with git tag -d <tag>.; Back in your working directory, tag correctly and then push tags.; Now, you must alert all your developers that, if they have pulled the erroneous tag to their local repository, they will need to remove the tag from their local repository with git -d <tag> and then re-pull from the repository. Otherwise, deleted tags will keep re-appearing in the remote repository and/or users will be unable to pull or push to the remote. Undo the last commit:. Undo the commit:; git reset --soft HEAD^. Do stuff.; Recommit:; git commit -a -m <message> -c ORIG_HEAD. Note that the -c ORIG_HEAD clause causes git to use the meta-data from the previous HEAD (author, etc) with the exception of the commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the packag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:15435,message,message,15435,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['message'],['message']
Integrability,"onst Double_t* par). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfAverageTrue if the fit function must be averaged over the bin; TH1*fDenominatorDenominator histogram; Double_tfEpsilonPrecision required for function integration (option ""I""); Bool_tfFitDoneSet to kTRUE when the fit has been done; ROOT::Fit::Fitter*fFitterpointer to the real fitter; TF1*fFunctionFunction to fit; TH1*fNumeratorNumerator histogram; Bool_tfRangeTrue if the fit range must be taken from the function range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBinomialEfficiencyFitter(); default constructor. TBinomialEfficiencyFitter(const TH1* numerator, const TH1* denominator); Constructor. Note that no objects are copied, so it is up to the user to ensure that the; histogram pointers remain valid. Both histograms need to be ""consistent"". This is not checked here, but in; TBinomialEfficiencyFitter::Fit(). ~TBinomialEfficiencyFitter(); destructor. void Set(const TH1* numerator, const TH1* denominator); Initialize with a new set of inputs. void SetPrecision(Double_t epsilon); Set the required integration precision, see TF1::Integral(). ROOT::Fit::Fitter* GetFitter(); Provide access to the underlying fitter object.; This may be useful e.g. f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBinomialEfficiencyFitter.html:8813,integrat,integration,8813,root/html602/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html602/TBinomialEfficiencyFitter.html,2,['integrat'],['integration']
Integrability,"onst Event & ; e, . std::vector< const BinarySearchTreeNode * > & ; events, . Volume * ; volume . ). private . Definition at line 548 of file MethodPDERS.cxx. ◆ GetVolumeContentForRoot(). Double_t TMVA::MethodPDERS::GetVolumeContentForRoot ; (; Double_t ; scale). count number of events in rescaled volume ; Definition at line 537 of file MethodPDERS.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodPDERS::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . PDERS can handle classification with 2 classes and regression with one or more regression-targets. ; Implements TMVA::IMethod.; Definition at line 166 of file MethodPDERS.cxx. ◆ IGetVolumeContentForRoot(). Double_t TMVA::MethodPDERS::IGetVolumeContentForRoot ; (; Double_t ; scale). static . Interface to RootFinder. ; Definition at line 529 of file MethodPDERS.cxx. ◆ Init(). void TMVA::MethodPDERS::Init ; (; void ; ). privatevirtual . default initialisation routine called by all constructors ; Implements TMVA::MethodBase.; Definition at line 176 of file MethodPDERS.cxx. ◆ IsA(). virtual TClass * TMVA::MethodPDERS::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodBase.; Definition at line 221 of file MethodPDERS.h. ◆ KernelNormalization(). Double_t TMVA::MethodPDERS::KernelNormalization ; (; Double_t ; pdf). protected . Calculating the normalization factor only once (might need a reset at some point. ; Can the method be restarted with different params?) ; Definition at line 974 of file MethodPDERS.cxx. ◆ LanczosFilter(). Double_t TMVA::MethodPDERS::LanczosFilter ; (; Int_t ; level, . Double_t ; x . ). protected . Lanczos Filter. ; Definition at line 1060 of file MethodPDERS.cxx. ◆ MakeClassSpecific(). void TMVA::MethodPDERS::MakeClassSpecific ; (; std::ostream & ; fout, . const TString & ; className . ); const. protectedvirtual . write specific classifier response ; Reimplemented from TMVA::MethodBase.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:40480,rout,routine,40480,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['rout'],['routine']
Integrability,"onst Expr< A, T, D1, D2, R > & ; rhs). inline . Definition at line 551 of file MatrixFunctions.h. ◆ Unit(). template<class A , class T , unsigned int D> . SVector< T, D > ROOT::Math::Unit ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 390 of file Functions.h. Variable Documentation. ◆ eu. const double ROOT::Math::eu = 0.577215664901532860606. static . Definition at line 44 of file Vavilov.cxx. ◆ gDefaultAbsTolerance. double ROOT::Math::gDefaultAbsTolerance = 1.E-6. Definition at line 53 of file GSLMultiRootFinder.cxx. ◆ gDefaultMaxIter. int ROOT::Math::gDefaultMaxIter = 100. Definition at line 52 of file GSLMultiRootFinder.cxx. ◆ gDefaultNpx [1/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 29 of file BrentMinimizer1D.cxx. ◆ gDefaultNpx [2/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 25 of file BrentRootFinder.cxx. ◆ gDefaultNSearch [1/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 30 of file BrentMinimizer1D.cxx. ◆ gDefaultNSearch [2/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 26 of file BrentRootFinder.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::gDefaultRelTolerance = 1.E-10. Definition at line 54 of file GSLMultiRootFinder.cxx. ◆ gFunction. const ROOT::Math::IMultiGenFunction* ROOT::Math::gFunction. function wrapper for the function to be minimized ; Definition at line 12 of file RMinimizer.cxx. ◆ gGradFunction. const ROOT::Math::IMultiGradFunction* ROOT::Math::gGradFunction. function wrapper for the gradient of the function to be minimized ; Definition at line 14 of file RMinimizer.cxx. ◆ gNCalls. int ROOT::Math::gNCalls = 0. integer for the number of function calls ; Definition at line 16 of file RMinimizer.cxx. ◆ kSqrt2. const double ROOT::Math::kSqrt2 = 1.41421356237309515. static . Definition at line 18 of file ProbFuncMathCore.cxx. ROOTMath. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Math.html:199036,wrap,wrapper,199036,doc/v632/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html,2,['wrap'],['wrapper']
Integrability,"onst FCNBase& fcn, const MnUserParameterState& state, const MnStrategy& stra, unsigned int nfcn = 0); constructor from non-gradient functions. MnApplication(const FCNGradientBase& fcn, const MnUserParameterState& state, const MnStrategy& stra, unsigned int nfcn = 0); constructor from gradient function. virtual ~MnApplication(); { }. FunctionMinimum operator()(unsigned int maxfcn = 0, double tolerance = 0.10000000000000001). Minimize the function; @param maxfcn : max number of function calls (if = 0) default is used which is set to; 200 + 100 * npar + 5 * npar**2; @param tolerance : value used for terminating iteration procedure.; For example, MIGRAD will stop iterating when edm (expected distance from minimum) will be:; edm < tolerance * 10**-3; Default value of tolerance used is 0.1. const FCNBase& Fcnbase() const; {return fFCN;}. unsigned int NumOfCalls() const; {return fNumCall;}. const std::vector<ROOT::Minuit2::MinuitParameter>& MinuitParameters() const; facade: forward interface of MnUserParameters and MnUserTransformation; via MnUserParameterState; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. void Add(const char* Name, double val, double err); add free Parameter. void Add(const char* Name, double val, double err, double , double ); add limited Parameter. void Add(const char* , double ); add const Parameter. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void RemoveLimits(unsigned int ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const char* ); interaction via Name of Parameter. void Release(const char* ). void SetValue(const char* , double ). void SetError(const char* , double ). void SetLimits(const char* , double , double ).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnApplication.html:4245,interface,interface,4245,root/html602/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnApplication.html,2,['interface'],['interface']
Integrability,"onst GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html:6841,integrat,integration,6841,root/html602/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html,2,['integrat'],['integration']
Integrability,"onst ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: LogLikelihoodFCN.h 42007 2011-11-15 13:23:17Z moneta $ » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:4076,interface,interface,4076,root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"onst ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const. protected:. virtual voidSetNFitPoints(unsigned int n) const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::BinData&fData; const ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; unsigned intfNEffPointsnumber of effective points used in the fit . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function. unsigned int NFitPoints() const; effective points used in the fit (exclude the rejected one). { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th chi-square residual. void Gradient(const double* x, double* g) const; need to be virtual to be instantiated. void SetNFitPoints(unsigned int n) const; set number of fit points (need to be called in const methods, make it const). { fNEffPoints = n; }. double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Tue Sep 5 09:13:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__Chi2FCN_-p0Math__IBaseFunctionMultiDim_.html:3685,interface,interface,3685,root/html534/ROOT__Fit__Chi2FCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__Chi2FCN_-p0Math__IBaseFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"onst ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0). Fit using a FitMethodGradFunction interface. Same as method above, but now extra information; can be taken from the function class. bool SetFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Set the FCN function represented by a multi-dimensional gradient function interface; (ROOT::Math::IMultiGenFunction) and optionally the initial parameters; See also note above for the initial parameters for FitFCN. bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. bool LinearFit(const ROOT::Fit::BinData& data). do a linear fit on a set of bin-data. { return DoLinearFit(data); }. void SetFunction(const IModelFunction & func). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise an error (false) is returned.; The result will be appended in the fit result class; Optionally a vector of parameter indeces can be passed for selecting; the parameters to analyse using FitConfig::SetMinosErrors. bool IsBinFit() const. query if fit is binned. In cse of false teh fit can be unbinned; or is not defined (like in case",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__Fitter.html:10131,interface,interface,10131,root/html530/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__Fitter.html,1,['interface'],['interface']
Integrability,"onst ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:8479,integrat,integration,8479,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,6,['integrat'],['integration']
Integrability,"onst RooAbsAnaConvPdf &other, const char *name=nullptr);  ;  ~RooAbsAnaConvPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral defined by given code, which is returned by getAnalyticalIntegralWN() ;  ; virtual bool changeModel (const RooResolutionModel &newModel);  Change the current resolution model to newModel. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsRealLValue * convVar ();  Retrieve the convolution variable. ;  ; const RooAbsRealLValue * convVar () const;  Retrieve the convolution variable. ;  ; Int_t declareBasis (const char *expression, const RooArgList &params);  Declare a basis function for use in this physics model. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  This function forces RooRealIntegral to offer all integration dependents to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for internal integration, if RooRealIntegral considers this to be unsafe (e.g. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Create a generator context for this p.d.f. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise capability to perform (analytical) integrals internally. ;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet &nset, const char *rangeName) const;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet *nset=nullptr, const char *rangeName=nullptr) const;  ; bool isDirectGenSafe (const RooAbsArg &arg) const override;  Return true if it is safe to generate the convolution observable from the internal generator (this is the case if the chosen resolution model is the truth model) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBDecay.html:5260,integrat,integration,5260,doc/master/classRooBDecay.html,https://root.cern,https://root.cern/doc/master/classRooBDecay.html,3,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"onst RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooSetProxy _cacheObs;  Variables to be cached. ;  ; bool _cacheSource;  Keep an attached clone of the source in the cache for fast operation. ;  ; bool _useCdfBoundaries;  Are c.d.f boundary conditions used by the RooHistFuncs? ;  ; RooRealProxy func;  Proxy to function being cached. ;  ;  Protected Attributes inherited from RooAbsCachedReal; std::map< Int_t, std::pair< const RooArgSet *, const RooArgSet * > > _anaIntMap;  ! Map for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; Int_t _ipOrder;  Interpolation order for cache histograms. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:57812,integrat,integration,57812,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,1,['integrat'],['integration']
Integrability,"onst RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tdefaultErrorLevel() const; static RooNumIntConfig*defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:8314,depend,dependentOverlaps,8314,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,36,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"onst RooArgSet& getConfigSection(const char* name) const; Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Mon Jul 4 15:23:35 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumIntConfig.html:10132,integrat,integration,10132,root/html530/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html530/RooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"onst RooArgSet& getConfigSection(const char* name) const; Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Thu Nov 3 20:08:52 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumIntConfig.html:10132,integrat,integration,10132,root/html532/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html532/RooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"onst RooArgSet& getConfigSection(const char* name) const; Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Thu Sep 23 20:00:24 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumIntConfig.html:10063,integrat,integration,10063,root/html528/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html528/RooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"onst RooArgSet& getConfigSection(const char* name) const; Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Tue Jun 2 15:32:44 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumIntConfig.html:11157,integrat,integration,11157,root/html604/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html604/RooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"onst RooArgSet& getConfigSection(const char* name) const; Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Tue Jun 30 14:34:39 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumIntConfig.html:11157,integrat,integration,11157,root/html602/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html602/RooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"onst RooArgSet& getConfigSection(const char* name) const; Retrieve configuration information specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Tue Mar 10 17:18:16 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumIntConfig.html:10151,integrat,integration,10151,root/html534/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html534/RooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"onst RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProduct(*this, newname); }. RooArgSet components(); { RooArgSet tmp(_compRSet) ; tmp.add(_compCSet) ; return tmp ; }. ProdMap* groupProductTerms(const RooArgSet& ) const. » Last changed: Fri Dec 2 14:26:58 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProduct.html:35713,depend,depend,35713,root/html532/RooProduct.html,https://root.cern,https://root.cern/root/html532/RooProduct.html,1,['depend'],['depend']
Integrability,"onst RooCmdArg &arg4={}, const RooCmdArg &arg5={}) constAs RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,...Definition RooAbsPdf.h:110; RooAbsPdf::traceEvalPdfbool traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:153511,rout,routine,153511,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['rout'],['routine']
Integrability,"onst RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()) const; RooAbsReal*RooAbsReal::createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); virtual RooAbsReal*createNLL(RooAbsData& data, const RooLinkedList& cmdList); virtual RooAbsReal*createNLL(RooAbsData& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); virtual RooAbsPdf*createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:10368,depend,dependentVars,10368,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['depend'],['dependentVars']
Integrability,"onst RooCmdArg& arg4={},; 270 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 271 const RooCmdArg& arg7={}, const RooCmdArg& arg8={},; 272 const RooCmdArg& arg9={}, const RooCmdArg& arg10={}; 273 ) const ;; 274 ; 275 ; 276 enum ScaleType { Raw, Relative, NumEvent, RelativeExpected } ;; 277 ; 278 // Fill an existing histogram; 279 TH1 *fillHistogram(TH1 *hist, const RooArgList &plotVars,; 280 double scaleFactor= 1, const RooArgSet *projectedVars= nullptr, bool scaling=true,; 281 const RooArgSet* condObs=nullptr, bool setError=true) const;; 282 ; 283 // Create 1,2, and 3D histograms from and fill it; 284 TH1 *createHistogram(RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const ;; 285 TH1* createHistogram(const char *name, const RooAbsRealLValue& xvar, RooLinkedList& argList) const ;; 286 TH1 *createHistogram(const char *name, const RooAbsRealLValue& xvar,; 287 const RooCmdArg& arg1={}, const RooCmdArg& arg2={},; 288 const RooCmdArg& arg3={}, const RooCmdArg& arg4={},; 289 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 290 const RooCmdArg& arg7={}, const RooCmdArg& arg8={}) const ;; 291 ; 292 // Fill a RooDataHist; 293 RooDataHist* fillDataHist(RooDataHist *hist, const RooArgSet* nset, double scaleFactor,; 294 bool correctForBinVolume=false, bool showProgress=false) const ;; 295 ; 296 // I/O streaming interface (machine readable); 297 bool readFromStream(std::istream& is, bool compact, bool verbose=false) override ;; 298 void writeToStream(std::ostream& os, bool compact) const override ;; 299 ; 300 // Printing interface (human readable); 301 void printValue(std::ostream& os) const override ;; 302 void printMultiline(std::ostream& os, Int_t contents, bool verbose=false, TString indent="""") const override ;; 303 ; 304 inline void setCachedValue(double value, bool notifyClients = true) final;; 305 ; 306 // Evaluation error logging; 307 class EvalError {; 308 public:; 309 EvalError() { }; 310 EvalError(const EvalError& other) : _msg(other.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:14628,interface,interface,14628,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,2,['interface'],['interface']
Integrability,"onst RooDataSet* protoData = NULL, int forceEvents = 0) const; This is the generate function to use in the context of the ToyMCSampler; instead of the standard RooAbsPdf::generate(...).; It takes into account whether the number of events is given explicitly; or whether it should use the expected number of events. It also takes; into account the option to generate a binned data set (ie RooDataHist). ToyMCSampler(); Proof constructor. Do not use. ToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys). void SetAlwaysUseMultiGen(Bool_t flag); { fgAlwaysUseMultiGen = flag ; }. void SetUseMultiGen(Bool_t flag); { fUseMultiGen = flag ; }. RooAbsData* GenerateToyData(RooArgSet& paramPoint) const; generates toy data; without weight. SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; { return fTestStat; }. Double_t ConfidenceLevel() const; { return 1. - fSize; }. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); { return fNToys; }. void SetNToys(const Int_t ntoy); { fNToys = ntoy; }. void SetNEventsPerToy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); specify the values of parameters used when evaluating test statistic. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. { fPdf = &pdf; }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. { fPriorNuisance = pdf; }. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ToyMCSampler.html:7070,interface,interface,7070,root/html530/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__ToyMCSampler.html,1,['interface'],['interface']
